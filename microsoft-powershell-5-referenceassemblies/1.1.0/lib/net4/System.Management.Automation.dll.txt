public static class Microsoft.PowerShell.AdapterCodeMethods : object {
    public static long ConvertLargeIntegerToInt64(PSObject deInstance, PSObject largeIntegerInstance);
    public static string ConvertDNWithBinaryToString(PSObject deInstance, PSObject dnWithBinaryInstance);
}
public class Microsoft.PowerShell.Cim.CimInstanceAdapter : PSPropertyAdapter {
    public virtual Collection`1<PSAdaptedProperty> GetProperties(object baseObject);
    public virtual PSAdaptedProperty GetProperty(object baseObject, string propertyName);
    public virtual string GetPropertyTypeName(PSAdaptedProperty adaptedProperty);
    public virtual object GetPropertyValue(PSAdaptedProperty adaptedProperty);
    public virtual Collection`1<string> GetTypeNameHierarchy(object baseObject);
    public virtual bool IsGettable(PSAdaptedProperty adaptedProperty);
    public virtual bool IsSettable(PSAdaptedProperty adaptedProperty);
    public virtual void SetPropertyValue(PSAdaptedProperty adaptedProperty, object value);
}
public enum Microsoft.PowerShell.Cmdletization.BehaviorOnNoMatch : Enum {
    public int value__;
    public static BehaviorOnNoMatch Default;
    public static BehaviorOnNoMatch ReportErrors;
    public static BehaviorOnNoMatch SilentlyContinue;
}
public abstract class Microsoft.PowerShell.Cmdletization.CmdletAdapter`1 : object {
    public string ClassName { get; }
    public string ClassVersion { get; }
    public PSCmdlet Cmdlet { get; }
    public Version ModuleVersion { get; }
    public IDictionary`2<string, string> PrivateData { get; }
    public void Initialize(PSCmdlet cmdlet, string className, string classVersion, Version moduleVersion, IDictionary`2<string, string> privateData);
    public virtual QueryBuilder GetQueryBuilder();
    public virtual void ProcessRecord(QueryBuilder query);
    public virtual void BeginProcessing();
    public virtual void EndProcessing();
    public virtual void StopProcessing();
    public virtual void ProcessRecord(TObjectInstance objectInstance, MethodInvocationInfo methodInvocationInfo, bool passThru);
    public virtual void ProcessRecord(QueryBuilder query, MethodInvocationInfo methodInvocationInfo, bool passThru);
    public virtual void ProcessRecord(MethodInvocationInfo methodInvocationInfo);
    public PSCmdlet get_Cmdlet();
    public string get_ClassName();
    public string get_ClassVersion();
    public Version get_ModuleVersion();
    public IDictionary`2<string, string> get_PrivateData();
}
public class Microsoft.PowerShell.Cmdletization.MethodInvocationInfo : object {
    public string MethodName { get; }
    public KeyedCollection`2<string, MethodParameter> Parameters { get; }
    public MethodParameter ReturnValue { get; }
    public MethodInvocationInfo(string name, IEnumerable`1<MethodParameter> parameters, MethodParameter returnValue);
    public string get_MethodName();
    public KeyedCollection`2<string, MethodParameter> get_Parameters();
    public MethodParameter get_ReturnValue();
}
public class Microsoft.PowerShell.Cmdletization.MethodParameter : object {
    public MethodParameterBindings Bindings { get; public set; }
    public bool IsValuePresent { get; public set; }
    public string Name { get; public set; }
    public Type ParameterType { get; public set; }
    public string ParameterTypeName { get; public set; }
    public object Value { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public Type get_ParameterType();
    public void set_ParameterType(Type value);
    public string get_ParameterTypeName();
    public void set_ParameterTypeName(string value);
    public MethodParameterBindings get_Bindings();
    public void set_Bindings(MethodParameterBindings value);
    public object get_Value();
    public void set_Value(object value);
    public bool get_IsValuePresent();
    public void set_IsValuePresent(bool value);
}
[FlagsAttribute]
public enum Microsoft.PowerShell.Cmdletization.MethodParameterBindings : Enum {
    public int value__;
    public static MethodParameterBindings Error;
    public static MethodParameterBindings In;
    public static MethodParameterBindings Out;
}
public abstract class Microsoft.PowerShell.Cmdletization.QueryBuilder : object {
    public virtual void FilterByProperty(string propertyName, IEnumerable allowedPropertyValues, bool wildcardsEnabled, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void ExcludeByProperty(string propertyName, IEnumerable excludedPropertyValues, bool wildcardsEnabled, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void FilterByMinPropertyValue(string propertyName, object minPropertyValue, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void FilterByMaxPropertyValue(string propertyName, object maxPropertyValue, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void FilterByAssociatedInstance(object associatedInstance, string associationName, string sourceRole, string resultRole, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void AddQueryOption(string optionName, object optionValue);
}
public enum Microsoft.PowerShell.Cmdletization.Xml.ConfirmImpact : Enum {
    public int value__;
    public static ConfirmImpact High;
    public static ConfirmImpact Low;
    public static ConfirmImpact Medium;
    public static ConfirmImpact None;
}
public enum Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType : Enum {
    public int value__;
    public static ItemsChoiceType ExcludeQuery;
    public static ItemsChoiceType MaxValueQuery;
    public static ItemsChoiceType MinValueQuery;
    public static ItemsChoiceType RegularQuery;
}
public class Microsoft.PowerShell.Commands.AddHistoryCommand : PSCmdlet {
    public PSObject[] InputObject { get; public set; }
    public SwitchParameter Passthru { get; public set; }
    public void set_InputObject(PSObject[] value);
    public PSObject[] get_InputObject();
    public SwitchParameter get_Passthru();
    public void set_Passthru(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.AddPSSnapinCommand : PSSnapInCommandBase {
    public String[] Name { get; public set; }
    public SwitchParameter PassThru { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.AliasProvider : SessionStateProviderBase {
    public static string ProviderName;
    protected virtual Collection`1<PSDriveInfo> InitializeDefaultDrives();
    protected virtual object NewItemDynamicParameters(string path, string type, object newItemValue);
    protected virtual object SetItemDynamicParameters(string path, object value);
}
public class Microsoft.PowerShell.Commands.AliasProviderDynamicParameters : object {
    public ScopedItemOptions Options { get; public set; }
    public ScopedItemOptions get_Options();
    public void set_Options(ScopedItemOptions value);
}
public class Microsoft.PowerShell.Commands.AlternateStreamData : object {
    public string FileName { get; public set; }
    public long Length { get; public set; }
    public string Stream { get; public set; }
    public string get_FileName();
    public void set_FileName(string value);
    public string get_Stream();
    public void set_Stream(string value);
    public long get_Length();
    public void set_Length(long value);
}
public class Microsoft.PowerShell.Commands.ClearHistoryCommand : PSCmdlet {
    public String[] CommandLine { get; public set; }
    public int Count { get; public set; }
    public Int32[] Id { get; public set; }
    public SwitchParameter Newest { get; public set; }
    public Int32[] get_Id();
    public void set_Id(Int32[] value);
    public String[] get_CommandLine();
    public void set_CommandLine(String[] value);
    public int get_Count();
    public void set_Count(int value);
    public SwitchParameter get_Newest();
    public void set_Newest(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.ConnectPSSessionCommand : PSRunspaceCmdlet {
    public SwitchParameter AllowRedirection { get; public set; }
    public string ApplicationName { get; public set; }
    public AuthenticationMechanism Authentication { get; public set; }
    public string CertificateThumbprint { get; public set; }
    public String[] ComputerName { get; public set; }
    public string ConfigurationName { get; public set; }
    public Uri[] ConnectionUri { get; public set; }
    public PSCredential Credential { get; public set; }
    public Guid[] InstanceId { get; public set; }
    public String[] Name { get; public set; }
    public int Port { get; public set; }
    public PSSession[] Session { get; public set; }
    public PSSessionOption SessionOption { get; public set; }
    public int ThrottleLimit { get; public set; }
    public SwitchParameter UseSSL { get; public set; }
    public PSSession[] get_Session();
    public void set_Session(PSSession[] value);
    public virtual String[] get_ComputerName();
    public virtual void set_ComputerName(String[] value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_ConfigurationName();
    public void set_ConfigurationName(string value);
    public Uri[] get_ConnectionUri();
    public void set_ConnectionUri(Uri[] value);
    public SwitchParameter get_AllowRedirection();
    public void set_AllowRedirection(SwitchParameter value);
    public virtual Guid[] get_InstanceId();
    public virtual void set_InstanceId(Guid[] value);
    public virtual String[] get_Name();
    public virtual void set_Name(String[] value);
    public PSCredential get_Credential();
    public void set_Credential(PSCredential value);
    public AuthenticationMechanism get_Authentication();
    public void set_Authentication(AuthenticationMechanism value);
    public string get_CertificateThumbprint();
    public void set_CertificateThumbprint(string value);
    public int get_Port();
    public void set_Port(int value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    public PSSessionOption get_SessionOption();
    public void set_SessionOption(PSSessionOption value);
    public int get_ThrottleLimit();
    public void set_ThrottleLimit(int value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    public sealed virtual void Dispose();
}
public abstract class Microsoft.PowerShell.Commands.ConsoleCmdletsBase : PSCmdlet {
}
public class Microsoft.PowerShell.Commands.DebugJobCommand : PSCmdlet {
    public int Id { get; public set; }
    public Guid InstanceId { get; public set; }
    public Job Job { get; public set; }
    public string Name { get; public set; }
    public Job get_Job();
    public void set_Job(Job value);
    public string get_Name();
    public void set_Name(string value);
    public int get_Id();
    public void set_Id(int value);
    public Guid get_InstanceId();
    public void set_InstanceId(Guid value);
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
}
public class Microsoft.PowerShell.Commands.DisablePSRemotingCommand : PSCmdlet {
    public SwitchParameter Force { get; public set; }
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.Commands.DisablePSSessionConfigurationCommand : PSCmdlet {
    public SwitchParameter Force { get; public set; }
    public String[] Name { get; public set; }
    public SwitchParameter NoServiceRestart { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_NoServiceRestart();
    public void set_NoServiceRestart(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.Commands.DisconnectPSSessionCommand : PSRunspaceCmdlet {
    public String[] ComputerName { get; public set; }
    public int IdleTimeoutSec { get; public set; }
    public OutputBufferingMode OutputBufferingMode { get; public set; }
    public PSSession[] Session { get; public set; }
    public int ThrottleLimit { get; public set; }
    public PSSession[] get_Session();
    public void set_Session(PSSession[] value);
    public int get_IdleTimeoutSec();
    public void set_IdleTimeoutSec(int value);
    public OutputBufferingMode get_OutputBufferingMode();
    public void set_OutputBufferingMode(OutputBufferingMode value);
    public int get_ThrottleLimit();
    public void set_ThrottleLimit(int value);
    public virtual String[] get_ComputerName();
    public virtual void set_ComputerName(String[] value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    public sealed virtual void Dispose();
}
public class Microsoft.PowerShell.Commands.EnablePSRemotingCommand : PSCmdlet {
    public SwitchParameter Force { get; public set; }
    public SwitchParameter SkipNetworkProfileCheck { get; public set; }
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_SkipNetworkProfileCheck();
    public void set_SkipNetworkProfileCheck(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.Commands.EnablePSSessionConfigurationCommand : PSCmdlet {
    public SwitchParameter Force { get; public set; }
    public String[] Name { get; public set; }
    public SwitchParameter NoServiceRestart { get; public set; }
    public string SecurityDescriptorSddl { get; public set; }
    public SwitchParameter SkipNetworkProfileCheck { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public string get_SecurityDescriptorSddl();
    public void set_SecurityDescriptorSddl(string value);
    public SwitchParameter get_SkipNetworkProfileCheck();
    public void set_SkipNetworkProfileCheck(SwitchParameter value);
    public SwitchParameter get_NoServiceRestart();
    public void set_NoServiceRestart(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.Commands.EnterPSHostProcessCommand : PSCmdlet {
    public string AppDomainName { get; public set; }
    public PSHostProcessInfo HostProcessInfo { get; public set; }
    public int Id { get; public set; }
    public string Name { get; public set; }
    public Process Process { get; public set; }
    public Process get_Process();
    public void set_Process(Process value);
    public int get_Id();
    public void set_Id(int value);
    public string get_Name();
    public void set_Name(string value);
    public PSHostProcessInfo get_HostProcessInfo();
    public void set_HostProcessInfo(PSHostProcessInfo value);
    public string get_AppDomainName();
    public void set_AppDomainName(string value);
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
}
public class Microsoft.PowerShell.Commands.EnterPSSessionCommand : PSRemotingBaseCmdlet {
    public string ComputerName { get; public set; }
    public Uri ConnectionUri { get; public set; }
    public PSCredential Credential { get; public set; }
    public SwitchParameter EnableNetworkAccess { get; public set; }
    public int Id { get; public set; }
    public Guid InstanceId { get; public set; }
    public string Name { get; public set; }
    public PSSession Session { get; public set; }
    public int ThrottleLimit { get; public set; }
    public Guid VMGuid { get; public set; }
    public string VMName { get; public set; }
    public void set_ThrottleLimit(int value);
    public int get_ThrottleLimit();
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public PSSession get_Session();
    public void set_Session(PSSession value);
    public Uri get_ConnectionUri();
    public void set_ConnectionUri(Uri value);
    public Guid get_InstanceId();
    public void set_InstanceId(Guid value);
    public int get_Id();
    public void set_Id(int value);
    public string get_Name();
    public void set_Name(string value);
    public SwitchParameter get_EnableNetworkAccess();
    public void set_EnableNetworkAccess(SwitchParameter value);
    public Guid get_VMGuid();
    public void set_VMGuid(Guid value);
    public string get_VMName();
    public void set_VMName(string value);
    public virtual PSCredential get_Credential();
    public virtual void set_Credential(PSCredential value);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
}
public class Microsoft.PowerShell.Commands.EnvironmentProvider : SessionStateProviderBase {
    public static string ProviderName;
    protected virtual Collection`1<PSDriveInfo> InitializeDefaultDrives();
}
public class Microsoft.PowerShell.Commands.ExitPSHostProcessCommand : PSCmdlet {
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.ExitPSSessionCommand : PSRemotingCmdlet {
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.ExportConsoleCommand : ConsoleCmdletsBase {
    public SwitchParameter Force { get; public set; }
    public SwitchParameter NoClobber { get; public set; }
    public string Path { get; public set; }
    public string get_Path();
    public void set_Path(string value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_NoClobber();
    public void set_NoClobber(SwitchParameter value);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.ExportModuleMemberCommand : PSCmdlet {
    public String[] Alias { get; public set; }
    public String[] Cmdlet { get; public set; }
    public String[] Function { get; public set; }
    public String[] Variable { get; public set; }
    public void set_Function(String[] value);
    public String[] get_Function();
    public void set_Cmdlet(String[] value);
    public String[] get_Cmdlet();
    public void set_Variable(String[] value);
    public String[] get_Variable();
    public void set_Alias(String[] value);
    public String[] get_Alias();
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.FileSystemClearContentDynamicParameters : object {
    public string Stream { get; public set; }
    public string get_Stream();
    public void set_Stream(string value);
}
public enum Microsoft.PowerShell.Commands.FileSystemCmdletProviderEncoding : Enum {
    public int value__;
    public static FileSystemCmdletProviderEncoding Ascii;
    public static FileSystemCmdletProviderEncoding BigEndianUTF32;
    public static FileSystemCmdletProviderEncoding BigEndianUnicode;
    public static FileSystemCmdletProviderEncoding Byte;
    public static FileSystemCmdletProviderEncoding Default;
    public static FileSystemCmdletProviderEncoding Oem;
    public static FileSystemCmdletProviderEncoding String;
    public static FileSystemCmdletProviderEncoding UTF32;
    public static FileSystemCmdletProviderEncoding UTF7;
    public static FileSystemCmdletProviderEncoding UTF8;
    public static FileSystemCmdletProviderEncoding Unicode;
    public static FileSystemCmdletProviderEncoding Unknown;
}
public class Microsoft.PowerShell.Commands.FileSystemContentDynamicParametersBase : object {
    public FileSystemCmdletProviderEncoding Encoding { get; public set; }
    public Encoding EncodingType { get; }
    public string Stream { get; public set; }
    public bool UsingByteEncoding { get; }
    public bool WasStreamTypeSpecified { get; }
    public FileSystemCmdletProviderEncoding get_Encoding();
    public void set_Encoding(FileSystemCmdletProviderEncoding value);
    public string get_Stream();
    public void set_Stream(string value);
    public Encoding get_EncodingType();
    public bool get_UsingByteEncoding();
    public bool get_WasStreamTypeSpecified();
}
public class Microsoft.PowerShell.Commands.FileSystemContentReaderDynamicParameters : FileSystemContentDynamicParametersBase {
    public string Delimiter { get; public set; }
    public bool DelimiterSpecified { get; }
    public SwitchParameter Raw { get; public set; }
    public SwitchParameter Wait { get; public set; }
    public string get_Delimiter();
    public void set_Delimiter(string value);
    public SwitchParameter get_Wait();
    public void set_Wait(SwitchParameter value);
    public SwitchParameter get_Raw();
    public void set_Raw(SwitchParameter value);
    public bool get_DelimiterSpecified();
}
public class Microsoft.PowerShell.Commands.FileSystemContentWriterDynamicParameters : FileSystemContentDynamicParametersBase {
    public SwitchParameter NoNewline { get; public set; }
    public SwitchParameter get_NoNewline();
    public void set_NoNewline(SwitchParameter value);
}
public class Microsoft.PowerShell.Commands.FileSystemItemProviderDynamicParameters : object {
    public Nullable`1<DateTime> NewerThan { get; public set; }
    public Nullable`1<DateTime> OlderThan { get; public set; }
    public Nullable`1<DateTime> get_OlderThan();
    public void set_OlderThan(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_NewerThan();
    public void set_NewerThan(Nullable`1<DateTime> value);
}
public class Microsoft.PowerShell.Commands.FileSystemProvider : NavigationCmdletProvider {
    public static string ProviderName;
    protected virtual object GetChildNamesDynamicParameters(string path);
    protected virtual object GetChildItemsDynamicParameters(string path, bool recurse);
    protected virtual object CopyItemDynamicParameters(string path, string destination, bool recurse);
    public sealed virtual string GetHelpMaml(string helpItemName, string path);
    protected virtual ProviderInfo Start(ProviderInfo providerInfo);
    protected virtual PSDriveInfo NewDrive(PSDriveInfo drive);
    protected virtual PSDriveInfo RemoveDrive(PSDriveInfo drive);
    protected virtual Collection`1<PSDriveInfo> InitializeDefaultDrives();
    protected virtual object GetItemDynamicParameters(string path);
    protected virtual bool IsValidPath(string path);
    protected virtual void GetItem(string path);
    protected virtual void InvokeDefaultAction(string path);
    protected virtual void GetChildItems(string path, bool recurse, UInt32 depth);
    protected virtual void GetChildNames(string path, ReturnContainers returnContainers);
    protected virtual bool ConvertPath(string path, string filter, String& updatedPath, String& updatedFilter);
    public static string Mode(PSObject instance);
    protected virtual void RenameItem(string path, string newName);
    protected virtual void NewItem(string path, string type, object value);
    protected virtual void RemoveItem(string path, bool recurse);
    protected virtual object RemoveItemDynamicParameters(string path, bool recurse);
    protected virtual bool ItemExists(string path);
    protected virtual object ItemExistsDynamicParameters(string path);
    protected virtual bool HasChildItems(string path);
    protected virtual void CopyItem(string path, string destinationPath, bool recurse);
    protected virtual string GetParentPath(string path, string root);
    protected virtual string NormalizeRelativePath(string path, string basePath);
    protected virtual string GetChildName(string path);
    protected virtual bool IsItemContainer(string path);
    protected virtual void MoveItem(string path, string destination);
    public sealed virtual void GetProperty(string path, Collection`1<string> providerSpecificPickList);
    public sealed virtual object GetPropertyDynamicParameters(string path, Collection`1<string> providerSpecificPickList);
    public sealed virtual void SetProperty(string path, PSObject propertyToSet);
    public sealed virtual object SetPropertyDynamicParameters(string path, PSObject propertyValue);
    public sealed virtual void ClearProperty(string path, Collection`1<string> propertiesToClear);
    public sealed virtual object ClearPropertyDynamicParameters(string path, Collection`1<string> propertiesToClear);
    public sealed virtual IContentReader GetContentReader(string path);
    public sealed virtual object GetContentReaderDynamicParameters(string path);
    public sealed virtual IContentWriter GetContentWriter(string path);
    public sealed virtual object GetContentWriterDynamicParameters(string path);
    public sealed virtual void ClearContent(string path);
    public sealed virtual object ClearContentDynamicParameters(string path);
    public sealed virtual void GetSecurityDescriptor(string path, AccessControlSections sections);
    public sealed virtual void SetSecurityDescriptor(string path, ObjectSecurity securityDescriptor);
    public sealed virtual ObjectSecurity NewSecurityDescriptorFromPath(string path, AccessControlSections sections);
    public sealed virtual ObjectSecurity NewSecurityDescriptorOfType(string type, AccessControlSections sections);
}
public class Microsoft.PowerShell.Commands.FileSystemProviderGetItemDynamicParameters : object {
    public String[] Stream { get; public set; }
    public String[] get_Stream();
    public void set_Stream(String[] value);
}
public class Microsoft.PowerShell.Commands.FileSystemProviderRemoveItemDynamicParameters : object {
    public String[] Stream { get; public set; }
    public String[] get_Stream();
    public void set_Stream(String[] value);
}
public class Microsoft.PowerShell.Commands.ForEachObjectCommand : PSCmdlet {
    public Object[] ArgumentList { get; public set; }
    public ScriptBlock Begin { get; public set; }
    public ScriptBlock End { get; public set; }
    public PSObject InputObject { get; public set; }
    public string MemberName { get; public set; }
    public ScriptBlock[] Process { get; public set; }
    public ScriptBlock[] RemainingScripts { get; public set; }
    public void set_InputObject(PSObject value);
    public PSObject get_InputObject();
    public void set_Begin(ScriptBlock value);
    public ScriptBlock get_Begin();
    public void set_Process(ScriptBlock[] value);
    public ScriptBlock[] get_Process();
    public void set_End(ScriptBlock value);
    public ScriptBlock get_End();
    public void set_RemainingScripts(ScriptBlock[] value);
    public ScriptBlock[] get_RemainingScripts();
    public void set_MemberName(string value);
    public string get_MemberName();
    public void set_ArgumentList(Object[] value);
    public Object[] get_ArgumentList();
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.Commands.FormatDefaultCommand : FrontEndCommandBase {
}
public class Microsoft.PowerShell.Commands.FunctionProvider : SessionStateProviderBase {
    public static string ProviderName;
    protected virtual Collection`1<PSDriveInfo> InitializeDefaultDrives();
    protected virtual object NewItemDynamicParameters(string path, string type, object newItemValue);
    protected virtual object SetItemDynamicParameters(string path, object value);
}
public class Microsoft.PowerShell.Commands.FunctionProviderDynamicParameters : object {
    public ScopedItemOptions Options { get; public set; }
    public ScopedItemOptions get_Options();
    public void set_Options(ScopedItemOptions value);
}
public class Microsoft.PowerShell.Commands.GetCommandCommand : PSCmdlet {
    public SwitchParameter All { get; public set; }
    public Object[] ArgumentList { get; public set; }
    public CommandTypes CommandType { get; public set; }
    public ModuleSpecification[] FullyQualifiedModule { get; public set; }
    public SwitchParameter ListImported { get; public set; }
    public String[] Module { get; public set; }
    public String[] Name { get; public set; }
    public String[] Noun { get; public set; }
    public String[] ParameterName { get; public set; }
    public PSTypeName[] ParameterType { get; public set; }
    public SwitchParameter ShowCommandInfo { get; public set; }
    public SwitchParameter Syntax { get; public set; }
    public int TotalCount { get; public set; }
    public String[] Verb { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public String[] get_Verb();
    public void set_Verb(String[] value);
    public String[] get_Noun();
    public void set_Noun(String[] value);
    public String[] get_Module();
    public void set_Module(String[] value);
    public ModuleSpecification[] get_FullyQualifiedModule();
    public void set_FullyQualifiedModule(ModuleSpecification[] value);
    public CommandTypes get_CommandType();
    public void set_CommandType(CommandTypes value);
    public int get_TotalCount();
    public void set_TotalCount(int value);
    public SwitchParameter get_Syntax();
    public void set_Syntax(SwitchParameter value);
    public SwitchParameter get_ShowCommandInfo();
    public void set_ShowCommandInfo(SwitchParameter value);
    public Object[] get_ArgumentList();
    public void set_ArgumentList(Object[] value);
    public SwitchParameter get_All();
    public void set_All(SwitchParameter value);
    public SwitchParameter get_ListImported();
    public void set_ListImported(SwitchParameter value);
    public String[] get_ParameterName();
    public void set_ParameterName(String[] value);
    public PSTypeName[] get_ParameterType();
    public void set_ParameterType(PSTypeName[] value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
public static class Microsoft.PowerShell.Commands.GetHelpCodeMethods : object {
    public static string GetHelpUri(PSObject commandInfoPSObject);
}
public class Microsoft.PowerShell.Commands.GetHelpCommand : PSCmdlet {
    public String[] Category { get; public set; }
    public String[] Component { get; public set; }
    unknown SwitchParameter Detailed {public set; }
    unknown SwitchParameter Examples {public set; }
    unknown SwitchParameter Full {public set; }
    public String[] Functionality { get; public set; }
    public string Name { get; public set; }
    public SwitchParameter Online { get; public set; }
    public string Parameter { get; public set; }
    public string Path { get; public set; }
    public String[] Role { get; public set; }
    public SwitchParameter ShowWindow { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Path();
    public void set_Path(string value);
    public String[] get_Category();
    public void set_Category(String[] value);
    public String[] get_Component();
    public void set_Component(String[] value);
    public String[] get_Functionality();
    public void set_Functionality(String[] value);
    public String[] get_Role();
    public void set_Role(String[] value);
    public void set_Detailed(SwitchParameter value);
    public void set_Full(SwitchParameter value);
    public void set_Examples(SwitchParameter value);
    public void set_Parameter(string value);
    public string get_Parameter();
    public void set_Online(SwitchParameter value);
    public SwitchParameter get_Online();
    public SwitchParameter get_ShowWindow();
    public void set_ShowWindow(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.GetHistoryCommand : PSCmdlet {
    public int Count { get; public set; }
    public Int64[] Id { get; public set; }
    public Int64[] get_Id();
    public void set_Id(Int64[] value);
    public int get_Count();
    public void set_Count(int value);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.GetJobCommand : JobCmdletBase {
    public DateTime After { get; public set; }
    public DateTime Before { get; public set; }
    public JobState ChildJobState { get; public set; }
    public bool HasMoreData { get; public set; }
    public Int32[] Id { get; public set; }
    public SwitchParameter IncludeChildJob { get; public set; }
    public int Newest { get; public set; }
    public SwitchParameter get_IncludeChildJob();
    public void set_IncludeChildJob(SwitchParameter value);
    public JobState get_ChildJobState();
    public void set_ChildJobState(JobState value);
    public bool get_HasMoreData();
    public void set_HasMoreData(bool value);
    public DateTime get_Before();
    public void set_Before(DateTime value);
    public DateTime get_After();
    public void set_After(DateTime value);
    public int get_Newest();
    public void set_Newest(int value);
    public virtual Int32[] get_Id();
    public virtual void set_Id(Int32[] value);
    protected virtual void ProcessRecord();
    protected List`1<Job> FindJobs();
}
public class Microsoft.PowerShell.Commands.GetModuleCommand : ModuleCmdletBase {
    public SwitchParameter All { get; public set; }
    public string CimNamespace { get; public set; }
    public Uri CimResourceUri { get; public set; }
    public CimSession CimSession { get; public set; }
    public ModuleSpecification[] FullyQualifiedName { get; public set; }
    public SwitchParameter ListAvailable { get; public set; }
    public String[] Name { get; public set; }
    public PSSession PSSession { get; public set; }
    public SwitchParameter Refresh { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public ModuleSpecification[] get_FullyQualifiedName();
    public void set_FullyQualifiedName(ModuleSpecification[] value);
    public SwitchParameter get_All();
    public void set_All(SwitchParameter value);
    public SwitchParameter get_ListAvailable();
    public void set_ListAvailable(SwitchParameter value);
    public SwitchParameter get_Refresh();
    public void set_Refresh(SwitchParameter value);
    public PSSession get_PSSession();
    public void set_PSSession(PSSession value);
    public CimSession get_CimSession();
    public void set_CimSession(CimSession value);
    public Uri get_CimResourceUri();
    public void set_CimResourceUri(Uri value);
    public string get_CimNamespace();
    public void set_CimNamespace(string value);
    protected virtual void StopProcessing();
    public sealed virtual void Dispose();
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.GetPSHostProcessInfoCommand : PSCmdlet {
    public Int32[] Id { get; public set; }
    public String[] Name { get; public set; }
    public Process[] Process { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public Process[] get_Process();
    public void set_Process(Process[] value);
    public Int32[] get_Id();
    public void set_Id(Int32[] value);
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.Commands.GetPSSessionCommand : PSRunspaceCmdlet {
    public SwitchParameter AllowRedirection { get; public set; }
    public string ApplicationName { get; public set; }
    public AuthenticationMechanism Authentication { get; public set; }
    public string CertificateThumbprint { get; public set; }
    public String[] ComputerName { get; public set; }
    public string ConfigurationName { get; public set; }
    public Uri[] ConnectionUri { get; public set; }
    public PSCredential Credential { get; public set; }
    public Guid[] InstanceId { get; public set; }
    public String[] Name { get; public set; }
    public int Port { get; public set; }
    public PSSessionOption SessionOption { get; public set; }
    public SessionFilterState State { get; public set; }
    public int ThrottleLimit { get; public set; }
    public SwitchParameter UseSSL { get; public set; }
    public virtual String[] get_ComputerName();
    public virtual void set_ComputerName(String[] value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public Uri[] get_ConnectionUri();
    public void set_ConnectionUri(Uri[] value);
    public string get_ConfigurationName();
    public void set_ConfigurationName(string value);
    public SwitchParameter get_AllowRedirection();
    public void set_AllowRedirection(SwitchParameter value);
    public virtual String[] get_Name();
    public virtual void set_Name(String[] value);
    public virtual Guid[] get_InstanceId();
    public virtual void set_InstanceId(Guid[] value);
    public PSCredential get_Credential();
    public void set_Credential(PSCredential value);
    public AuthenticationMechanism get_Authentication();
    public void set_Authentication(AuthenticationMechanism value);
    public string get_CertificateThumbprint();
    public void set_CertificateThumbprint(string value);
    public int get_Port();
    public void set_Port(int value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    public int get_ThrottleLimit();
    public void set_ThrottleLimit(int value);
    public SessionFilterState get_State();
    public void set_State(SessionFilterState value);
    public PSSessionOption get_SessionOption();
    public void set_SessionOption(PSSessionOption value);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    public sealed virtual void Dispose();
}
public class Microsoft.PowerShell.Commands.GetPSSessionConfigurationCommand : PSCmdlet {
    public SwitchParameter Force { get; public set; }
    public String[] Name { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.GetPSSnapinCommand : PSSnapInCommandBase {
    public String[] Name { get; public set; }
    public SwitchParameter Registered { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public SwitchParameter get_Registered();
    public void set_Registered(SwitchParameter value);
    protected virtual void BeginProcessing();
}
public class Microsoft.PowerShell.Commands.HelpCategoryInvalidException : ArgumentException {
    public ErrorRecord ErrorRecord { get; }
    public string HelpCategory { get; }
    public string Message { get; }
    public HelpCategoryInvalidException(string helpCategory);
    public HelpCategoryInvalidException(string helpCategory, Exception innerException);
    protected HelpCategoryInvalidException(SerializationInfo info, StreamingContext context);
    public sealed virtual ErrorRecord get_ErrorRecord();
    public string get_HelpCategory();
    public virtual string get_Message();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.PowerShell.Commands.HelpNotFoundException : SystemException {
    public ErrorRecord ErrorRecord { get; }
    public string HelpTopic { get; }
    public string Message { get; }
    public HelpNotFoundException(string helpTopic);
    public HelpNotFoundException(string helpTopic, Exception innerException);
    protected HelpNotFoundException(SerializationInfo info, StreamingContext context);
    public sealed virtual ErrorRecord get_ErrorRecord();
    public string get_HelpTopic();
    public virtual string get_Message();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.PowerShell.Commands.HistoryInfo : object {
    public string CommandLine { get; }
    public DateTime EndExecutionTime { get; }
    public PipelineState ExecutionStatus { get; }
    public long Id { get; }
    public DateTime StartExecutionTime { get; }
    public long get_Id();
    public string get_CommandLine();
    public PipelineState get_ExecutionStatus();
    public DateTime get_StartExecutionTime();
    public DateTime get_EndExecutionTime();
    public virtual string ToString();
    public HistoryInfo Clone();
}
public class Microsoft.PowerShell.Commands.ImportModuleCommand : ModuleCmdletBase {
    public String[] Alias { get; public set; }
    public Object[] ArgumentList { get; public set; }
    public SwitchParameter AsCustomObject { get; public set; }
    public Assembly[] Assembly { get; public set; }
    public string CimNamespace { get; public set; }
    public Uri CimResourceUri { get; public set; }
    public CimSession CimSession { get; public set; }
    public String[] Cmdlet { get; public set; }
    public SwitchParameter DisableNameChecking { get; public set; }
    public SwitchParameter Force { get; public set; }
    public ModuleSpecification[] FullyQualifiedName { get; public set; }
    public String[] Function { get; public set; }
    public SwitchParameter Global { get; public set; }
    public Version MinimumVersion { get; public set; }
    public PSModuleInfo[] ModuleInfo { get; public set; }
    public String[] Name { get; public set; }
    public SwitchParameter NoClobber { get; public set; }
    public PSSession PSSession { get; public set; }
    public SwitchParameter PassThru { get; public set; }
    public string Prefix { get; public set; }
    public Version RequiredVersion { get; public set; }
    public string Scope { get; public set; }
    public String[] Variable { get; public set; }
    public void set_Global(SwitchParameter value);
    public SwitchParameter get_Global();
    public void set_Prefix(string value);
    public string get_Prefix();
    public void set_Name(String[] value);
    public String[] get_Name();
    public ModuleSpecification[] get_FullyQualifiedName();
    public void set_FullyQualifiedName(ModuleSpecification[] value);
    public Assembly[] get_Assembly();
    public void set_Assembly(Assembly[] value);
    public void set_Function(String[] value);
    public String[] get_Function();
    public void set_Cmdlet(String[] value);
    public String[] get_Cmdlet();
    public void set_Variable(String[] value);
    public String[] get_Variable();
    public void set_Alias(String[] value);
    public String[] get_Alias();
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    public SwitchParameter get_AsCustomObject();
    public void set_AsCustomObject(SwitchParameter value);
    public Version get_MinimumVersion();
    public void set_MinimumVersion(Version value);
    public Version get_RequiredVersion();
    public void set_RequiredVersion(Version value);
    public void set_ModuleInfo(PSModuleInfo[] value);
    public PSModuleInfo[] get_ModuleInfo();
    public Object[] get_ArgumentList();
    public void set_ArgumentList(Object[] value);
    public SwitchParameter get_DisableNameChecking();
    public void set_DisableNameChecking(SwitchParameter value);
    public SwitchParameter get_NoClobber();
    public void set_NoClobber(SwitchParameter value);
    public string get_Scope();
    public void set_Scope(string value);
    public PSSession get_PSSession();
    public void set_PSSession(PSSession value);
    public CimSession get_CimSession();
    public void set_CimSession(CimSession value);
    public Uri get_CimResourceUri();
    public void set_CimResourceUri(Uri value);
    public string get_CimNamespace();
    public void set_CimNamespace(string value);
    protected virtual void StopProcessing();
    public sealed virtual void Dispose();
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
public abstract class Microsoft.PowerShell.Commands.Internal.Format.FrontEndCommandBase : PSCmdlet {
    public PSObject InputObject { get; public set; }
    public void set_InputObject(PSObject value);
    public PSObject get_InputObject();
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    protected virtual PSCmdlet OuterCmdletCall();
    protected virtual PSObject InputObjectCall();
    protected virtual void WriteObjectCall(object value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual void InternalDispose();
}
public class Microsoft.PowerShell.Commands.Internal.Format.OuterFormatShapeCommandBase : FrontEndCommandBase {
    public SwitchParameter DisplayError { get; public set; }
    public string Expand { get; public set; }
    public SwitchParameter Force { get; public set; }
    public object GroupBy { get; public set; }
    public SwitchParameter ShowError { get; public set; }
    public string View { get; public set; }
    public object get_GroupBy();
    public void set_GroupBy(object value);
    public string get_View();
    public void set_View(string value);
    public SwitchParameter get_ShowError();
    public void set_ShowError(SwitchParameter value);
    public SwitchParameter get_DisplayError();
    public void set_DisplayError(SwitchParameter value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public string get_Expand();
    public void set_Expand(string value);
    protected virtual void BeginProcessing();
}
public class Microsoft.PowerShell.Commands.Internal.Format.OuterFormatTableAndListBase : OuterFormatShapeCommandBase {
    public Object[] Property { get; public set; }
    public Object[] get_Property();
    public void set_Property(Object[] value);
}
public class Microsoft.PowerShell.Commands.Internal.Format.OuterFormatTableBase : OuterFormatTableAndListBase {
    public SwitchParameter AutoSize { get; public set; }
    public SwitchParameter HideTableHeaders { get; public set; }
    public SwitchParameter Wrap { get; public set; }
    public SwitchParameter get_AutoSize();
    public void set_AutoSize(SwitchParameter value);
    public SwitchParameter get_HideTableHeaders();
    public void set_HideTableHeaders(SwitchParameter value);
    public SwitchParameter get_Wrap();
    public void set_Wrap(SwitchParameter value);
}
public class Microsoft.PowerShell.Commands.Internal.TransactedRegistryAccessRule : AccessRule {
    public RegistryRights RegistryRights { get; }
    public TransactedRegistryAccessRule(IdentityReference identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public RegistryRights get_RegistryRights();
}
public class Microsoft.PowerShell.Commands.Internal.TransactedRegistryAuditRule : AuditRule {
    public RegistryRights RegistryRights { get; }
    public RegistryRights get_RegistryRights();
}
[ComVisibleAttribute("True")]
public class Microsoft.PowerShell.Commands.Internal.TransactedRegistryKey : MarshalByRefObject {
    public string Name { get; }
    public int SubKeyCount { get; }
    public int ValueCount { get; }
    public void Close();
    public void Flush();
    public sealed virtual void Dispose();
    public TransactedRegistryKey CreateSubKey(string subkey);
    [ComVisibleAttribute("False")]
public TransactedRegistryKey CreateSubKey(string subkey, RegistryKeyPermissionCheck permissionCheck);
    [ComVisibleAttribute("False")]
public TransactedRegistryKey CreateSubKey(string subkey, RegistryKeyPermissionCheck permissionCheck, TransactedRegistrySecurity registrySecurity);
    public void DeleteSubKey(string subkey);
    public void DeleteSubKey(string subkey, bool throwOnMissingSubKey);
    public void DeleteSubKeyTree(string subkey);
    public void DeleteValue(string name);
    public void DeleteValue(string name, bool throwOnMissingValue);
    public TransactedRegistryKey OpenSubKey(string name, bool writable);
    [ComVisibleAttribute("False")]
public TransactedRegistryKey OpenSubKey(string name, RegistryKeyPermissionCheck permissionCheck);
    [ComVisibleAttribute("False")]
public TransactedRegistryKey OpenSubKey(string name, RegistryKeyPermissionCheck permissionCheck, RegistryRights rights);
    public TransactedRegistryKey OpenSubKey(string name);
    public int get_SubKeyCount();
    public String[] GetSubKeyNames();
    public int get_ValueCount();
    public String[] GetValueNames();
    public object GetValue(string name);
    public object GetValue(string name, object defaultValue);
    [ComVisibleAttribute("False")]
public object GetValue(string name, object defaultValue, RegistryValueOptions options);
    [ComVisibleAttribute("False")]
public RegistryValueKind GetValueKind(string name);
    public string get_Name();
    public void SetValue(string name, object value);
    [ComVisibleAttribute("False")]
public void SetValue(string name, object value, RegistryValueKind valueKind);
    public virtual string ToString();
    public TransactedRegistrySecurity GetAccessControl();
    public TransactedRegistrySecurity GetAccessControl(AccessControlSections includeSections);
    public void SetAccessControl(TransactedRegistrySecurity registrySecurity);
}
public class Microsoft.PowerShell.Commands.Internal.TransactedRegistrySecurity : NativeObjectSecurity {
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public void AddAccessRule(TransactedRegistryAccessRule rule);
    public void SetAccessRule(TransactedRegistryAccessRule rule);
    public void ResetAccessRule(TransactedRegistryAccessRule rule);
    public bool RemoveAccessRule(TransactedRegistryAccessRule rule);
    public void RemoveAccessRuleAll(TransactedRegistryAccessRule rule);
    public void RemoveAccessRuleSpecific(TransactedRegistryAccessRule rule);
    public void AddAuditRule(TransactedRegistryAuditRule rule);
    public void SetAuditRule(TransactedRegistryAuditRule rule);
    public bool RemoveAuditRule(TransactedRegistryAuditRule rule);
    public void RemoveAuditRuleAll(TransactedRegistryAuditRule rule);
    public void RemoveAuditRuleSpecific(TransactedRegistryAuditRule rule);
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
}
public static class Microsoft.PowerShell.Commands.InternalSymbolicLinkLinkCodeMethods : object {
    public static String[] GetTarget(string reparsePoint);
    public static string GetLinkType(string reparsePoint);
}
public class Microsoft.PowerShell.Commands.InvokeCommandCommand : PSExecutionCmdlet {
    public SwitchParameter AllowRedirection { get; public set; }
    public string ApplicationName { get; public set; }
    public SwitchParameter AsJob { get; public set; }
    public AuthenticationMechanism Authentication { get; public set; }
    public String[] ComputerName { get; public set; }
    public string ConfigurationName { get; public set; }
    public Uri[] ConnectionUri { get; public set; }
    public PSCredential Credential { get; public set; }
    public SwitchParameter EnableNetworkAccess { get; public set; }
    public string FilePath { get; public set; }
    public SwitchParameter HideComputerName { get; public set; }
    public SwitchParameter InDisconnectedSession { get; public set; }
    public string JobName { get; public set; }
    public SwitchParameter NoNewScope { get; public set; }
    public int Port { get; public set; }
    public ScriptBlock ScriptBlock { get; public set; }
    public PSSession[] Session { get; public set; }
    public String[] SessionName { get; public set; }
    public PSSessionOption SessionOption { get; public set; }
    public int ThrottleLimit { get; public set; }
    public SwitchParameter UseSSL { get; public set; }
    public virtual PSSession[] get_Session();
    public virtual void set_Session(PSSession[] value);
    public virtual String[] get_ComputerName();
    public virtual void set_ComputerName(String[] value);
    public virtual PSCredential get_Credential();
    public virtual void set_Credential(PSCredential value);
    public virtual int get_Port();
    public virtual void set_Port(int value);
    public virtual SwitchParameter get_UseSSL();
    public virtual void set_UseSSL(SwitchParameter value);
    public virtual string get_ConfigurationName();
    public virtual void set_ConfigurationName(string value);
    public virtual string get_ApplicationName();
    public virtual void set_ApplicationName(string value);
    public virtual void set_ThrottleLimit(int value);
    public virtual int get_ThrottleLimit();
    public virtual Uri[] get_ConnectionUri();
    public virtual void set_ConnectionUri(Uri[] value);
    public SwitchParameter get_AsJob();
    public void set_AsJob(SwitchParameter value);
    public SwitchParameter get_InDisconnectedSession();
    public void set_InDisconnectedSession(SwitchParameter value);
    public String[] get_SessionName();
    public void set_SessionName(String[] value);
    public SwitchParameter get_HideComputerName();
    public void set_HideComputerName(SwitchParameter value);
    public string get_JobName();
    public void set_JobName(string value);
    public virtual ScriptBlock get_ScriptBlock();
    public virtual void set_ScriptBlock(ScriptBlock value);
    public SwitchParameter get_NoNewScope();
    public void set_NoNewScope(SwitchParameter value);
    public virtual string get_FilePath();
    public virtual void set_FilePath(string value);
    public virtual SwitchParameter get_AllowRedirection();
    public virtual void set_AllowRedirection(SwitchParameter value);
    public virtual PSSessionOption get_SessionOption();
    public virtual void set_SessionOption(PSSessionOption value);
    public virtual AuthenticationMechanism get_Authentication();
    public virtual void set_Authentication(AuthenticationMechanism value);
    public virtual SwitchParameter get_EnableNetworkAccess();
    public virtual void set_EnableNetworkAccess(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    public sealed virtual void Dispose();
}
public class Microsoft.PowerShell.Commands.InvokeHistoryCommand : PSCmdlet {
    public string Id { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.Commands.JobCmdletBase : PSRemotingCmdlet {
    public String[] Command { get; public set; }
    public Hashtable Filter { get; public set; }
    public Int32[] Id { get; public set; }
    public Guid[] InstanceId { get; public set; }
    public String[] Name { get; public set; }
    public JobState State { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public Guid[] get_InstanceId();
    public void set_InstanceId(Guid[] value);
    public virtual Int32[] get_Id();
    public virtual void set_Id(Int32[] value);
    public virtual JobState get_State();
    public virtual void set_State(JobState value);
    public virtual String[] get_Command();
    public virtual void set_Command(String[] value);
    public virtual Hashtable get_Filter();
    public virtual void set_Filter(Hashtable value);
    protected virtual void BeginProcessing();
}
public class Microsoft.PowerShell.Commands.Management.TransactedString : object {
    public int Length { get; }
    public TransactedString(string value);
    private sealed virtual override void System.Transactions.IEnlistmentNotification.Commit(Enlistment enlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotification.Rollback(Enlistment enlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotification.InDoubt(Enlistment enlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotification.Prepare(PreparingEnlistment preparingEnlistment);
    public void Append(string text);
    public void Remove(int startIndex, int length);
    public int get_Length();
    public virtual string ToString();
}
public class Microsoft.PowerShell.Commands.ModuleCmdletBase : PSCmdlet {
    protected bool AddToAppDomainLevelCache { get; protected set; }
    protected Object[] BaseArgumentList { get; protected set; }
    protected bool BaseDisableNameChecking { get; protected set; }
    protected Object[] get_BaseArgumentList();
    protected void set_BaseArgumentList(Object[] value);
    protected bool get_BaseDisableNameChecking();
    protected void set_BaseDisableNameChecking(bool value);
    protected bool get_AddToAppDomainLevelCache();
    protected void set_AddToAppDomainLevelCache(bool value);
    protected internal void ImportModuleMembers(PSModuleInfo sourceModule, string prefix);
    protected internal void ImportModuleMembers(PSModuleInfo sourceModule, string prefix, ImportModuleOptions options);
}
public class Microsoft.PowerShell.Commands.ModuleSpecification : object {
    public Nullable`1<Guid> Guid { get; }
    public string Name { get; }
    public Version RequiredVersion { get; }
    public Version Version { get; }
    public ModuleSpecification(string moduleName);
    public ModuleSpecification(Hashtable moduleSpecification);
    public virtual string ToString();
    public static bool TryParse(string input, ModuleSpecification& result);
    public string get_Name();
    public Nullable`1<Guid> get_Guid();
    public Version get_Version();
    public Version get_RequiredVersion();
}
public class Microsoft.PowerShell.Commands.NewModuleCommand : ModuleCmdletBase {
    public Object[] ArgumentList { get; public set; }
    public SwitchParameter AsCustomObject { get; public set; }
    public String[] Cmdlet { get; public set; }
    public String[] Function { get; public set; }
    public string Name { get; public set; }
    public SwitchParameter ReturnResult { get; public set; }
    public ScriptBlock ScriptBlock { get; public set; }
    public void set_Name(string value);
    public string get_Name();
    public ScriptBlock get_ScriptBlock();
    public void set_ScriptBlock(ScriptBlock value);
    public void set_Function(String[] value);
    public String[] get_Function();
    public void set_Cmdlet(String[] value);
    public String[] get_Cmdlet();
    public SwitchParameter get_ReturnResult();
    public void set_ReturnResult(SwitchParameter value);
    public SwitchParameter get_AsCustomObject();
    public void set_AsCustomObject(SwitchParameter value);
    public Object[] get_ArgumentList();
    public void set_ArgumentList(Object[] value);
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.Commands.NewModuleManifestCommand : PSCmdlet {
    public String[] AliasesToExport { get; public set; }
    public string Author { get; public set; }
    public Version ClrVersion { get; public set; }
    public String[] CmdletsToExport { get; public set; }
    public string CompanyName { get; public set; }
    public string Copyright { get; public set; }
    public string DefaultCommandPrefix { get; public set; }
    public string Description { get; public set; }
    public Version DotNetFrameworkVersion { get; public set; }
    public String[] DscResourcesToExport { get; public set; }
    public String[] FileList { get; public set; }
    public String[] FormatsToProcess { get; public set; }
    public String[] FunctionsToExport { get; public set; }
    public Guid Guid { get; public set; }
    public string HelpInfoUri { get; public set; }
    public Uri IconUri { get; public set; }
    public Uri LicenseUri { get; public set; }
    public Object[] ModuleList { get; public set; }
    public Version ModuleVersion { get; public set; }
    public Object[] NestedModules { get; public set; }
    public SwitchParameter PassThru { get; public set; }
    public string Path { get; public set; }
    public string PowerShellHostName { get; public set; }
    public Version PowerShellHostVersion { get; public set; }
    public Version PowerShellVersion { get; public set; }
    public object PrivateData { get; public set; }
    public ProcessorArchitecture ProcessorArchitecture { get; public set; }
    public Uri ProjectUri { get; public set; }
    public string ReleaseNotes { get; public set; }
    public String[] RequiredAssemblies { get; public set; }
    public Object[] RequiredModules { get; public set; }
    public string RootModule { get; public set; }
    public String[] ScriptsToProcess { get; public set; }
    public String[] Tags { get; public set; }
    public String[] TypesToProcess { get; public set; }
    public String[] VariablesToExport { get; public set; }
    public string get_Path();
    public void set_Path(string value);
    public Object[] get_NestedModules();
    public void set_NestedModules(Object[] value);
    public Guid get_Guid();
    public void set_Guid(Guid value);
    public string get_Author();
    public void set_Author(string value);
    public string get_CompanyName();
    public void set_CompanyName(string value);
    public string get_Copyright();
    public void set_Copyright(string value);
    public string get_RootModule();
    public void set_RootModule(string value);
    public Version get_ModuleVersion();
    public void set_ModuleVersion(Version value);
    public string get_Description();
    public void set_Description(string value);
    public ProcessorArchitecture get_ProcessorArchitecture();
    public void set_ProcessorArchitecture(ProcessorArchitecture value);
    public Version get_PowerShellVersion();
    public void set_PowerShellVersion(Version value);
    public Version get_ClrVersion();
    public void set_ClrVersion(Version value);
    public Version get_DotNetFrameworkVersion();
    public void set_DotNetFrameworkVersion(Version value);
    public string get_PowerShellHostName();
    public void set_PowerShellHostName(string value);
    public Version get_PowerShellHostVersion();
    public void set_PowerShellHostVersion(Version value);
    public Object[] get_RequiredModules();
    public void set_RequiredModules(Object[] value);
    public String[] get_TypesToProcess();
    public void set_TypesToProcess(String[] value);
    public String[] get_FormatsToProcess();
    public void set_FormatsToProcess(String[] value);
    public String[] get_ScriptsToProcess();
    public void set_ScriptsToProcess(String[] value);
    public String[] get_RequiredAssemblies();
    public void set_RequiredAssemblies(String[] value);
    public String[] get_FileList();
    public void set_FileList(String[] value);
    public Object[] get_ModuleList();
    public void set_ModuleList(Object[] value);
    public String[] get_FunctionsToExport();
    public void set_FunctionsToExport(String[] value);
    public String[] get_AliasesToExport();
    public void set_AliasesToExport(String[] value);
    public String[] get_VariablesToExport();
    public void set_VariablesToExport(String[] value);
    public String[] get_CmdletsToExport();
    public void set_CmdletsToExport(String[] value);
    public String[] get_DscResourcesToExport();
    public void set_DscResourcesToExport(String[] value);
    public object get_PrivateData();
    public void set_PrivateData(object value);
    public String[] get_Tags();
    public void set_Tags(String[] value);
    public Uri get_ProjectUri();
    public void set_ProjectUri(Uri value);
    public Uri get_LicenseUri();
    public void set_LicenseUri(Uri value);
    public Uri get_IconUri();
    public void set_IconUri(Uri value);
    public string get_ReleaseNotes();
    public void set_ReleaseNotes(string value);
    public string get_HelpInfoUri();
    public void set_HelpInfoUri(string value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    public string get_DefaultCommandPrefix();
    public void set_DefaultCommandPrefix(string value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.NewPSSessionCommand : PSRemotingBaseCmdlet {
    public String[] ComputerName { get; public set; }
    public PSCredential Credential { get; public set; }
    public SwitchParameter EnableNetworkAccess { get; public set; }
    public String[] Name { get; public set; }
    public PSSession[] Session { get; public set; }
    public virtual String[] get_ComputerName();
    public virtual void set_ComputerName(String[] value);
    public virtual PSCredential get_Credential();
    public virtual void set_Credential(PSCredential value);
    public virtual PSSession[] get_Session();
    public virtual void set_Session(PSSession[] value);
    public String[] get_Name();
    public void set_Name(String[] value);
    public SwitchParameter get_EnableNetworkAccess();
    public void set_EnableNetworkAccess(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
}
public class Microsoft.PowerShell.Commands.NewPSSessionConfigurationFileCommand : PSCmdlet {
    public Hashtable[] AliasDefinitions { get; public set; }
    public String[] AssembliesToLoad { get; public set; }
    public string Author { get; public set; }
    public string CompanyName { get; public set; }
    public string Copyright { get; public set; }
    public string Description { get; public set; }
    public object EnvironmentVariables { get; public set; }
    public ExecutionPolicy ExecutionPolicy { get; public set; }
    public String[] FormatsToProcess { get; public set; }
    public Hashtable[] FunctionDefinitions { get; public set; }
    public Guid Guid { get; public set; }
    public PSLanguageMode LanguageMode { get; public set; }
    public Object[] ModulesToImport { get; public set; }
    public string Path { get; public set; }
    public Version PowerShellVersion { get; public set; }
    public Version SchemaVersion { get; public set; }
    public String[] ScriptsToProcess { get; public set; }
    public SessionType SessionType { get; public set; }
    public String[] TypesToProcess { get; public set; }
    public object VariableDefinitions { get; public set; }
    public String[] VisibleAliases { get; public set; }
    public String[] VisibleCmdlets { get; public set; }
    public String[] VisibleFunctions { get; public set; }
    public String[] VisibleProviders { get; public set; }
    public string get_Path();
    public void set_Path(string value);
    public Version get_SchemaVersion();
    public void set_SchemaVersion(Version value);
    public Guid get_Guid();
    public void set_Guid(Guid value);
    public string get_Author();
    public void set_Author(string value);
    public string get_CompanyName();
    public void set_CompanyName(string value);
    public string get_Copyright();
    public void set_Copyright(string value);
    public string get_Description();
    public void set_Description(string value);
    public Version get_PowerShellVersion();
    public void set_PowerShellVersion(Version value);
    public SessionType get_SessionType();
    public void set_SessionType(SessionType value);
    public Object[] get_ModulesToImport();
    public void set_ModulesToImport(Object[] value);
    public String[] get_AssembliesToLoad();
    public void set_AssembliesToLoad(String[] value);
    public String[] get_VisibleAliases();
    public void set_VisibleAliases(String[] value);
    public String[] get_VisibleCmdlets();
    public void set_VisibleCmdlets(String[] value);
    public String[] get_VisibleFunctions();
    public void set_VisibleFunctions(String[] value);
    public String[] get_VisibleProviders();
    public void set_VisibleProviders(String[] value);
    public Hashtable[] get_AliasDefinitions();
    public void set_AliasDefinitions(Hashtable[] value);
    public Hashtable[] get_FunctionDefinitions();
    public void set_FunctionDefinitions(Hashtable[] value);
    public object get_VariableDefinitions();
    public void set_VariableDefinitions(object value);
    public object get_EnvironmentVariables();
    public void set_EnvironmentVariables(object value);
    public String[] get_TypesToProcess();
    public void set_TypesToProcess(String[] value);
    public String[] get_FormatsToProcess();
    public void set_FormatsToProcess(String[] value);
    public PSLanguageMode get_LanguageMode();
    public void set_LanguageMode(PSLanguageMode value);
    public ExecutionPolicy get_ExecutionPolicy();
    public void set_ExecutionPolicy(ExecutionPolicy value);
    public String[] get_ScriptsToProcess();
    public void set_ScriptsToProcess(String[] value);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.NewPSSessionOptionCommand : PSCmdlet {
    public PSPrimitiveDictionary ApplicationArguments { get; public set; }
    public int CancelTimeout { get; public set; }
    public CultureInfo Culture { get; public set; }
    public int IdleTimeout { get; public set; }
    public SwitchParameter IncludePortInSPN { get; public set; }
    public int MaxConnectionRetryCount { get; public set; }
    public int MaximumReceivedDataSizePerCommand { get; public set; }
    public int MaximumReceivedObjectSize { get; public set; }
    public int MaximumRedirection { get; public set; }
    public SwitchParameter NoCompression { get; public set; }
    public SwitchParameter NoEncryption { get; public set; }
    public SwitchParameter NoMachineProfile { get; public set; }
    public int OpenTimeout { get; public set; }
    public int OperationTimeout { get; public set; }
    public OutputBufferingMode OutputBufferingMode { get; public set; }
    public ProxyAccessType ProxyAccessType { get; public set; }
    public AuthenticationMechanism ProxyAuthentication { get; public set; }
    public PSCredential ProxyCredential { get; public set; }
    public SwitchParameter SkipCACheck { get; public set; }
    public SwitchParameter SkipCNCheck { get; public set; }
    public SwitchParameter SkipRevocationCheck { get; public set; }
    public CultureInfo UICulture { get; public set; }
    public SwitchParameter UseUTF16 { get; public set; }
    public int get_MaximumRedirection();
    public void set_MaximumRedirection(int value);
    public SwitchParameter get_NoCompression();
    public void set_NoCompression(SwitchParameter value);
    public SwitchParameter get_NoMachineProfile();
    public void set_NoMachineProfile(SwitchParameter value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public CultureInfo get_UICulture();
    public void set_UICulture(CultureInfo value);
    public int get_MaximumReceivedDataSizePerCommand();
    public void set_MaximumReceivedDataSizePerCommand(int value);
    public int get_MaximumReceivedObjectSize();
    public void set_MaximumReceivedObjectSize(int value);
    public OutputBufferingMode get_OutputBufferingMode();
    public void set_OutputBufferingMode(OutputBufferingMode value);
    public int get_MaxConnectionRetryCount();
    public void set_MaxConnectionRetryCount(int value);
    public PSPrimitiveDictionary get_ApplicationArguments();
    public void set_ApplicationArguments(PSPrimitiveDictionary value);
    public int get_OpenTimeout();
    public void set_OpenTimeout(int value);
    public int get_CancelTimeout();
    public void set_CancelTimeout(int value);
    public int get_IdleTimeout();
    public void set_IdleTimeout(int value);
    public ProxyAccessType get_ProxyAccessType();
    public void set_ProxyAccessType(ProxyAccessType value);
    public AuthenticationMechanism get_ProxyAuthentication();
    public void set_ProxyAuthentication(AuthenticationMechanism value);
    public PSCredential get_ProxyCredential();
    public void set_ProxyCredential(PSCredential value);
    public SwitchParameter get_SkipCACheck();
    public void set_SkipCACheck(SwitchParameter value);
    public SwitchParameter get_SkipCNCheck();
    public void set_SkipCNCheck(SwitchParameter value);
    public SwitchParameter get_SkipRevocationCheck();
    public void set_SkipRevocationCheck(SwitchParameter value);
    public int get_OperationTimeout();
    public void set_OperationTimeout(int value);
    public SwitchParameter get_NoEncryption();
    public void set_NoEncryption(SwitchParameter value);
    public SwitchParameter get_UseUTF16();
    public void set_UseUTF16(SwitchParameter value);
    public SwitchParameter get_IncludePortInSPN();
    public void set_IncludePortInSPN(SwitchParameter value);
    protected virtual void BeginProcessing();
}
public class Microsoft.PowerShell.Commands.NewPSTransportOptionCommand : PSCmdlet {
    public Nullable`1<int> IdleTimeoutSec { get; public set; }
    public Nullable`1<int> MaxConcurrentCommandsPerSession { get; public set; }
    public Nullable`1<int> MaxConcurrentUsers { get; public set; }
    public Nullable`1<int> MaxIdleTimeoutSec { get; public set; }
    public Nullable`1<int> MaxMemoryPerSessionMB { get; public set; }
    public Nullable`1<int> MaxProcessesPerSession { get; public set; }
    public Nullable`1<int> MaxSessions { get; public set; }
    public Nullable`1<int> MaxSessionsPerUser { get; public set; }
    public Nullable`1<OutputBufferingMode> OutputBufferingMode { get; public set; }
    public Nullable`1<int> ProcessIdleTimeoutSec { get; public set; }
    public Nullable`1<int> get_MaxIdleTimeoutSec();
    public void set_MaxIdleTimeoutSec(Nullable`1<int> value);
    public Nullable`1<int> get_ProcessIdleTimeoutSec();
    public void set_ProcessIdleTimeoutSec(Nullable`1<int> value);
    public Nullable`1<int> get_MaxSessions();
    public void set_MaxSessions(Nullable`1<int> value);
    public Nullable`1<int> get_MaxConcurrentCommandsPerSession();
    public void set_MaxConcurrentCommandsPerSession(Nullable`1<int> value);
    public Nullable`1<int> get_MaxSessionsPerUser();
    public void set_MaxSessionsPerUser(Nullable`1<int> value);
    public Nullable`1<int> get_MaxMemoryPerSessionMB();
    public void set_MaxMemoryPerSessionMB(Nullable`1<int> value);
    public Nullable`1<int> get_MaxProcessesPerSession();
    public void set_MaxProcessesPerSession(Nullable`1<int> value);
    public Nullable`1<int> get_MaxConcurrentUsers();
    public void set_MaxConcurrentUsers(Nullable`1<int> value);
    public Nullable`1<int> get_IdleTimeoutSec();
    public void set_IdleTimeoutSec(Nullable`1<int> value);
    public Nullable`1<OutputBufferingMode> get_OutputBufferingMode();
    public void set_OutputBufferingMode(Nullable`1<OutputBufferingMode> value);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.NounArgumentCompleter : object {
    public sealed virtual IEnumerable`1<CompletionResult> CompleteArgument(string commandName, string parameterName, string wordToComplete, CommandAst commandAst, IDictionary fakeBoundParameters);
}
public abstract class Microsoft.PowerShell.Commands.ObjectEventRegistrationBase : PSCmdlet {
    public ScriptBlock Action { get; public set; }
    public SwitchParameter Forward { get; public set; }
    public int MaxTriggerCount { get; public set; }
    public PSObject MessageData { get; public set; }
    protected PSEventSubscriber NewSubscriber { get; }
    public string SourceIdentifier { get; public set; }
    public SwitchParameter SupportEvent { get; public set; }
    public string get_SourceIdentifier();
    public void set_SourceIdentifier(string value);
    public ScriptBlock get_Action();
    public void set_Action(ScriptBlock value);
    public PSObject get_MessageData();
    public void set_MessageData(PSObject value);
    public SwitchParameter get_SupportEvent();
    public void set_SupportEvent(SwitchParameter value);
    public SwitchParameter get_Forward();
    public void set_Forward(SwitchParameter value);
    public int get_MaxTriggerCount();
    public void set_MaxTriggerCount(int value);
    protected abstract virtual object GetSourceObject();
    protected abstract virtual string GetSourceObjectEventName();
    protected PSEventSubscriber get_NewSubscriber();
    protected virtual void BeginProcessing();
    protected virtual void EndProcessing();
}
public enum Microsoft.PowerShell.Commands.OpenMode : Enum {
    public int value__;
    public static OpenMode Add;
    public static OpenMode New;
    public static OpenMode Overwrite;
}
public class Microsoft.PowerShell.Commands.OutDefaultCommand : FrontEndCommandBase {
    public SwitchParameter Transcript { get; public set; }
    public SwitchParameter get_Transcript();
    public void set_Transcript(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.Commands.OutHostCommand : FrontEndCommandBase {
    public SwitchParameter Paging { get; public set; }
    public SwitchParameter get_Paging();
    public void set_Paging(SwitchParameter value);
    protected virtual void BeginProcessing();
}
public class Microsoft.PowerShell.Commands.OutLineOutputCommand : FrontEndCommandBase {
    public object LineOutput { get; public set; }
    public object get_LineOutput();
    public void set_LineOutput(object value);
    protected virtual void BeginProcessing();
}
public class Microsoft.PowerShell.Commands.OutNullCommand : PSCmdlet {
    public PSObject InputObject { get; public set; }
    public void set_InputObject(PSObject value);
    public PSObject get_InputObject();
    protected virtual void ProcessRecord();
}
public enum Microsoft.PowerShell.Commands.OutTarget : Enum {
    public int value__;
    public static OutTarget Default;
    public static OutTarget Host;
    public static OutTarget Job;
}
public abstract class Microsoft.PowerShell.Commands.PSExecutionCmdlet : PSRemotingBaseCmdlet {
    protected static string FilePathComputerNameParameterSet;
    protected static string FilePathSessionParameterSet;
    protected static string FilePathUriParameterSet;
    protected static string FilePathVMIdParameterSet;
    protected static string FilePathVMNameParameterSet;
    protected static string LiteralFilePathComputerNameParameterSet;
    protected static string VMIdParameterSet;
    protected static string VMNameParameterSet;
    public Object[] ArgumentList { get; public set; }
    protected String[] DisconnectedSessionName { get; protected set; }
    public SwitchParameter EnableNetworkAccess { get; public set; }
    public string FilePath { get; public set; }
    public PSObject InputObject { get; public set; }
    protected bool InvokeAndDisconnect { get; protected set; }
    protected bool IsLiteralPath { get; protected set; }
    public ScriptBlock ScriptBlock { get; public set; }
    public Guid[] VMGuid { get; public set; }
    public String[] VMName { get; public set; }
    public virtual PSObject get_InputObject();
    public virtual void set_InputObject(PSObject value);
    public virtual ScriptBlock get_ScriptBlock();
    public virtual void set_ScriptBlock(ScriptBlock value);
    public virtual string get_FilePath();
    public virtual void set_FilePath(string value);
    protected bool get_IsLiteralPath();
    protected void set_IsLiteralPath(bool value);
    public virtual Object[] get_ArgumentList();
    public virtual void set_ArgumentList(Object[] value);
    protected bool get_InvokeAndDisconnect();
    protected void set_InvokeAndDisconnect(bool value);
    protected String[] get_DisconnectedSessionName();
    protected void set_DisconnectedSessionName(String[] value);
    public virtual SwitchParameter get_EnableNetworkAccess();
    public virtual void set_EnableNetworkAccess(SwitchParameter value);
    public Guid[] get_VMGuid();
    public void set_VMGuid(Guid[] value);
    public String[] get_VMName();
    public void set_VMName(String[] value);
    protected virtual void CreateHelpersForSpecifiedComputerNames();
    protected void CreateHelpersForSpecifiedRunspaces();
    protected void CreateHelpersForSpecifiedUris();
    protected virtual void CreateHelpersForSpecifiedVMSession();
    protected void CloseAllInputStreams();
    protected ScriptBlock GetScriptBlockFromFile(string filePath, bool isLiteralPath);
    protected virtual void BeginProcessing();
}
public class Microsoft.PowerShell.Commands.PSHostProcessInfo : object {
    public string AppDomainName { get; }
    public int ProcessId { get; }
    public string ProcessName { get; }
    public string get_ProcessName();
    public int get_ProcessId();
    public string get_AppDomainName();
}
public abstract class Microsoft.PowerShell.Commands.PSRemotingBaseCmdlet : PSRemotingCmdlet {
    protected static string UriParameterSet;
    public SwitchParameter AllowRedirection { get; public set; }
    public string ApplicationName { get; public set; }
    public AuthenticationMechanism Authentication { get; public set; }
    public string CertificateThumbprint { get; public set; }
    public String[] ComputerName { get; public set; }
    public string ConfigurationName { get; public set; }
    public Uri[] ConnectionUri { get; public set; }
    public PSCredential Credential { get; public set; }
    public int Port { get; public set; }
    protected String[] ResolvedComputerNames { get; protected set; }
    public PSSession[] Session { get; public set; }
    public PSSessionOption SessionOption { get; public set; }
    public int ThrottleLimit { get; public set; }
    public SwitchParameter UseSSL { get; public set; }
    public virtual PSSession[] get_Session();
    public virtual void set_Session(PSSession[] value);
    public virtual String[] get_ComputerName();
    public virtual void set_ComputerName(String[] value);
    protected String[] get_ResolvedComputerNames();
    protected void set_ResolvedComputerNames(String[] value);
    public virtual PSCredential get_Credential();
    public virtual void set_Credential(PSCredential value);
    public virtual int get_Port();
    public virtual void set_Port(int value);
    public virtual SwitchParameter get_UseSSL();
    public virtual void set_UseSSL(SwitchParameter value);
    public virtual string get_ConfigurationName();
    public virtual void set_ConfigurationName(string value);
    public virtual string get_ApplicationName();
    public virtual void set_ApplicationName(string value);
    public virtual void set_ThrottleLimit(int value);
    public virtual int get_ThrottleLimit();
    public virtual Uri[] get_ConnectionUri();
    public virtual void set_ConnectionUri(Uri[] value);
    public virtual SwitchParameter get_AllowRedirection();
    public virtual void set_AllowRedirection(SwitchParameter value);
    public virtual PSSessionOption get_SessionOption();
    public virtual void set_SessionOption(PSSessionOption value);
    public virtual AuthenticationMechanism get_Authentication();
    public virtual void set_Authentication(AuthenticationMechanism value);
    public virtual string get_CertificateThumbprint();
    public virtual void set_CertificateThumbprint(string value);
    protected void ValidateRemoteRunspacesSpecified();
    protected void ValidateComputerName(String[] computerNames);
    protected virtual void BeginProcessing();
}
public abstract class Microsoft.PowerShell.Commands.PSRemotingCmdlet : PSCmdlet {
    protected static string ComputerNameParameterSet;
    protected static string DefaultPowerShellRemoteShellAppName;
    protected static string DefaultPowerShellRemoteShellName;
    protected static string SessionParameterSet;
    protected virtual void BeginProcessing();
    protected void ResolveComputerNames(String[] computerNames, String[]& resolvedComputerNames);
    protected string ResolveComputerName(string computerName);
    protected string ResolveShell(string shell);
    protected string ResolveAppName(string appName);
}
public abstract class Microsoft.PowerShell.Commands.PSRunspaceCmdlet : PSRemotingCmdlet {
    protected static string IdParameterSet;
    protected static string InstanceIdParameterSet;
    protected static string NameParameterSet;
    public String[] ComputerName { get; public set; }
    public Int32[] Id { get; public set; }
    public Guid[] InstanceId { get; public set; }
    public String[] Name { get; public set; }
    public virtual Guid[] get_InstanceId();
    public virtual void set_InstanceId(Guid[] value);
    public Int32[] get_Id();
    public void set_Id(Int32[] value);
    public virtual String[] get_Name();
    public virtual void set_Name(String[] value);
    public virtual String[] get_ComputerName();
    public virtual void set_ComputerName(String[] value);
    protected Dictionary`2<Guid, PSSession> GetMatchingRunspaces(bool writeobject, bool writeErrorOnNoMatch);
    protected Dictionary`2<Guid, PSSession> GetMatchingRunspacesByName(bool writeobject, bool writeErrorOnNoMatch);
    protected Dictionary`2<Guid, PSSession> GetMatchingRunspacesByRunspaceId(bool writeobject, bool writeErrorOnNoMatch);
}
public class Microsoft.PowerShell.Commands.PSSessionConfigurationCommandBase : PSCmdlet {
    public PSSessionConfigurationAccessMode AccessMode { get; public set; }
    public string ApplicationBase { get; public set; }
    public string AssemblyName { get; public set; }
    public string ConfigurationTypeName { get; public set; }
    public SwitchParameter Force { get; public set; }
    public Nullable`1<double> MaximumReceivedDataSizePerCommandMB { get; public set; }
    public Nullable`1<double> MaximumReceivedObjectSizeMB { get; public set; }
    public Object[] ModulesToImport { get; public set; }
    public string Name { get; public set; }
    public SwitchParameter NoServiceRestart { get; public set; }
    public Version PSVersion { get; public set; }
    public string Path { get; public set; }
    public PSCredential RunAsCredential { get; public set; }
    public string SecurityDescriptorSddl { get; public set; }
    public PSSessionTypeOption SessionTypeOption { get; public set; }
    public SwitchParameter ShowSecurityDescriptorUI { get; public set; }
    public string StartupScript { get; public set; }
    public ApartmentState ThreadApartmentState { get; public set; }
    public PSThreadOptions ThreadOptions { get; public set; }
    public PSTransportOption TransportOption { get; public set; }
    public SwitchParameter UseSharedProcess { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public string get_ApplicationBase();
    public void set_ApplicationBase(string value);
    public string get_ConfigurationTypeName();
    public void set_ConfigurationTypeName(string value);
    public PSCredential get_RunAsCredential();
    public void set_RunAsCredential(PSCredential value);
    public ApartmentState get_ThreadApartmentState();
    public void set_ThreadApartmentState(ApartmentState value);
    public PSThreadOptions get_ThreadOptions();
    public void set_ThreadOptions(PSThreadOptions value);
    public PSSessionConfigurationAccessMode get_AccessMode();
    public void set_AccessMode(PSSessionConfigurationAccessMode value);
    public SwitchParameter get_UseSharedProcess();
    public void set_UseSharedProcess(SwitchParameter value);
    public string get_StartupScript();
    public void set_StartupScript(string value);
    public Nullable`1<double> get_MaximumReceivedDataSizePerCommandMB();
    public void set_MaximumReceivedDataSizePerCommandMB(Nullable`1<double> value);
    public Nullable`1<double> get_MaximumReceivedObjectSizeMB();
    public void set_MaximumReceivedObjectSizeMB(Nullable`1<double> value);
    public string get_SecurityDescriptorSddl();
    public void set_SecurityDescriptorSddl(string value);
    public SwitchParameter get_ShowSecurityDescriptorUI();
    public void set_ShowSecurityDescriptorUI(SwitchParameter value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_NoServiceRestart();
    public void set_NoServiceRestart(SwitchParameter value);
    public Version get_PSVersion();
    public void set_PSVersion(Version value);
    public PSSessionTypeOption get_SessionTypeOption();
    public void set_SessionTypeOption(PSSessionTypeOption value);
    public PSTransportOption get_TransportOption();
    public void set_TransportOption(PSTransportOption value);
    public Object[] get_ModulesToImport();
    public void set_ModulesToImport(Object[] value);
    public string get_Path();
    public void set_Path(string value);
}
public abstract class Microsoft.PowerShell.Commands.PSSnapInCommandBase : PSCmdlet {
    protected internal bool ShouldGetAll { get; protected internal set; }
    public sealed virtual void Dispose();
    protected virtual void EndProcessing();
    protected internal Collection`1<PSSnapInInfo> GetSnapIns(string pattern);
    protected internal bool get_ShouldGetAll();
    protected internal void set_ShouldGetAll(bool value);
}
public class Microsoft.PowerShell.Commands.ReceiveJobCommand : JobCmdletBase {
    protected static string LocationParameterSet;
    public SwitchParameter AutoRemoveJob { get; public set; }
    public String[] Command { get; }
    public String[] ComputerName { get; public set; }
    public Hashtable Filter { get; }
    public SwitchParameter Force { get; public set; }
    public Job[] Job { get; public set; }
    public SwitchParameter Keep { get; public set; }
    public String[] Location { get; public set; }
    public SwitchParameter NoRecurse { get; public set; }
    public PSSession[] Session { get; public set; }
    public JobState State { get; }
    public SwitchParameter Wait { get; public set; }
    public SwitchParameter WriteEvents { get; public set; }
    public SwitchParameter WriteJobInResults { get; public set; }
    public Job[] get_Job();
    public void set_Job(Job[] value);
    public String[] get_ComputerName();
    public void set_ComputerName(String[] value);
    public String[] get_Location();
    public void set_Location(String[] value);
    public PSSession[] get_Session();
    public void set_Session(PSSession[] value);
    public SwitchParameter get_Keep();
    public void set_Keep(SwitchParameter value);
    public SwitchParameter get_NoRecurse();
    public void set_NoRecurse(SwitchParameter value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public virtual JobState get_State();
    public virtual Hashtable get_Filter();
    public virtual String[] get_Command();
    public SwitchParameter get_Wait();
    public void set_Wait(SwitchParameter value);
    public SwitchParameter get_AutoRemoveJob();
    public void set_AutoRemoveJob(SwitchParameter value);
    public SwitchParameter get_WriteEvents();
    public void set_WriteEvents(SwitchParameter value);
    public SwitchParameter get_WriteJobInResults();
    public void set_WriteJobInResults(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void StopProcessing();
    protected virtual void EndProcessing();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
}
public class Microsoft.PowerShell.Commands.ReceivePSSessionCommand : PSRemotingCmdlet {
    public SwitchParameter AllowRedirection { get; public set; }
    public string ApplicationName { get; public set; }
    public AuthenticationMechanism Authentication { get; public set; }
    public string CertificateThumbprint { get; public set; }
    public string ComputerName { get; public set; }
    public string ConfigurationName { get; public set; }
    public Uri ConnectionUri { get; public set; }
    public PSCredential Credential { get; public set; }
    public int Id { get; public set; }
    public Guid InstanceId { get; public set; }
    public string JobName { get; public set; }
    public string Name { get; public set; }
    public OutTarget OutTarget { get; public set; }
    public int Port { get; public set; }
    public PSSession Session { get; public set; }
    public PSSessionOption SessionOption { get; public set; }
    public SwitchParameter UseSSL { get; public set; }
    public PSSession get_Session();
    public void set_Session(PSSession value);
    public int get_Id();
    public void set_Id(int value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_ConfigurationName();
    public void set_ConfigurationName(string value);
    public Uri get_ConnectionUri();
    public void set_ConnectionUri(Uri value);
    public SwitchParameter get_AllowRedirection();
    public void set_AllowRedirection(SwitchParameter value);
    public Guid get_InstanceId();
    public void set_InstanceId(Guid value);
    public string get_Name();
    public void set_Name(string value);
    public OutTarget get_OutTarget();
    public void set_OutTarget(OutTarget value);
    public string get_JobName();
    public void set_JobName(string value);
    public PSCredential get_Credential();
    public void set_Credential(PSCredential value);
    public AuthenticationMechanism get_Authentication();
    public void set_Authentication(AuthenticationMechanism value);
    public string get_CertificateThumbprint();
    public void set_CertificateThumbprint(string value);
    public int get_Port();
    public void set_Port(int value);
    public SwitchParameter get_UseSSL();
    public void set_UseSSL(SwitchParameter value);
    public PSSessionOption get_SessionOption();
    public void set_SessionOption(PSSessionOption value);
    protected virtual void ProcessRecord();
    protected virtual void StopProcessing();
}
public class Microsoft.PowerShell.Commands.RegisterPSSessionConfigurationCommand : PSSessionConfigurationCommandBase {
    public string ProcessorArchitecture { get; public set; }
    public PSSessionType SessionType { get; public set; }
    public string get_ProcessorArchitecture();
    public void set_ProcessorArchitecture(string value);
    public PSSessionType get_SessionType();
    public void set_SessionType(PSSessionType value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.Commands.RegistryProvider : NavigationCmdletProvider {
    public static string ProviderName;
    protected virtual PSDriveInfo NewDrive(PSDriveInfo drive);
    protected virtual Collection`1<PSDriveInfo> InitializeDefaultDrives();
    protected virtual bool IsValidPath(string path);
    protected virtual void GetItem(string path);
    protected virtual void SetItem(string path, object value);
    protected virtual object SetItemDynamicParameters(string path, object value);
    protected virtual void ClearItem(string path);
    protected virtual void GetChildItems(string path, bool recurse, UInt32 depth);
    protected virtual void GetChildNames(string path, ReturnContainers returnContainers);
    protected virtual void RenameItem(string path, string newName);
    protected virtual void NewItem(string path, string type, object newItem);
    protected virtual void RemoveItem(string path, bool recurse);
    protected virtual bool ItemExists(string path);
    protected virtual bool HasChildItems(string path);
    protected virtual void CopyItem(string path, string destination, bool recurse);
    protected virtual bool IsItemContainer(string path);
    protected virtual void MoveItem(string path, string destination);
    public sealed virtual void GetProperty(string path, Collection`1<string> providerSpecificPickList);
    public sealed virtual void SetProperty(string path, PSObject propertyValue);
    public sealed virtual object SetPropertyDynamicParameters(string path, PSObject propertyValue);
    public sealed virtual void ClearProperty(string path, Collection`1<string> propertyToClear);
    public sealed virtual object GetPropertyDynamicParameters(string path, Collection`1<string> providerSpecificPickList);
    public sealed virtual object ClearPropertyDynamicParameters(string path, Collection`1<string> propertyToClear);
    public sealed virtual void NewProperty(string path, string propertyName, string type, object value);
    public sealed virtual void RemoveProperty(string path, string propertyName);
    public sealed virtual void RenameProperty(string path, string sourceProperty, string destinationProperty);
    public sealed virtual void CopyProperty(string sourcePath, string sourceProperty, string destinationPath, string destinationProperty);
    public sealed virtual void MoveProperty(string sourcePath, string sourceProperty, string destinationPath, string destinationProperty);
    protected virtual string GetParentPath(string path, string root);
    protected virtual string GetChildName(string path);
    public sealed virtual object NewPropertyDynamicParameters(string path, string propertyName, string type, object value);
    public sealed virtual object RemovePropertyDynamicParameters(string path, string propertyName);
    public sealed virtual object RenamePropertyDynamicParameters(string path, string sourceProperty, string destinationProperty);
    public sealed virtual object CopyPropertyDynamicParameters(string sourcePath, string sourceProperty, string destinationPath, string destinationProperty);
    public sealed virtual object MovePropertyDynamicParameters(string sourcePath, string sourceProperty, string destinationPath, string destinationProperty);
    public sealed virtual void GetSecurityDescriptor(string path, AccessControlSections sections);
    public sealed virtual void SetSecurityDescriptor(string path, ObjectSecurity securityDescriptor);
    public sealed virtual ObjectSecurity NewSecurityDescriptorFromPath(string path, AccessControlSections sections);
    public sealed virtual ObjectSecurity NewSecurityDescriptorOfType(string type, AccessControlSections sections);
}
public class Microsoft.PowerShell.Commands.RegistryProviderSetItemDynamicParameter : object {
    public RegistryValueKind Type { get; public set; }
    public RegistryValueKind get_Type();
    public void set_Type(RegistryValueKind value);
}
public class Microsoft.PowerShell.Commands.RemoveJobCommand : JobCmdletBase {
    public SwitchParameter Force { get; public set; }
    public Job[] Job { get; public set; }
    public Job[] get_Job();
    public void set_Job(Job[] value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
}
public class Microsoft.PowerShell.Commands.RemoveModuleCommand : ModuleCmdletBase {
    public SwitchParameter Force { get; public set; }
    public ModuleSpecification[] FullyQualifiedName { get; public set; }
    public PSModuleInfo[] ModuleInfo { get; public set; }
    public String[] Name { get; public set; }
    public void set_Name(String[] value);
    public String[] get_Name();
    public ModuleSpecification[] get_FullyQualifiedName();
    public void set_FullyQualifiedName(ModuleSpecification[] value);
    public void set_ModuleInfo(PSModuleInfo[] value);
    public PSModuleInfo[] get_ModuleInfo();
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.Commands.RemovePSSessionCommand : PSRunspaceCmdlet {
    public PSSession[] Session { get; public set; }
    public PSSession[] get_Session();
    public void set_Session(PSSession[] value);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.RemovePSSnapinCommand : PSSnapInCommandBase {
    public String[] Name { get; public set; }
    public SwitchParameter PassThru { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.ResumeJobCommand : JobCmdletBase {
    public String[] Command { get; }
    public Job[] Job { get; public set; }
    public SwitchParameter Wait { get; public set; }
    public Job[] get_Job();
    public void set_Job(Job[] value);
    public virtual String[] get_Command();
    public SwitchParameter get_Wait();
    public void set_Wait(SwitchParameter value);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
}
public class Microsoft.PowerShell.Commands.SaveHelpCommand : UpdatableHelpCommandBase {
    public String[] DestinationPath { get; public set; }
    public ModuleSpecification[] FullyQualifiedModule { get; public set; }
    public String[] LiteralPath { get; public set; }
    public PSModuleInfo[] Module { get; public set; }
    public String[] get_DestinationPath();
    public void set_DestinationPath(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public PSModuleInfo[] get_Module();
    public void set_Module(PSModuleInfo[] value);
    public ModuleSpecification[] get_FullyQualifiedModule();
    public void set_FullyQualifiedModule(ModuleSpecification[] value);
    protected virtual void ProcessRecord();
}
public enum Microsoft.PowerShell.Commands.SessionFilterState : Enum {
    public int value__;
    public static SessionFilterState All;
    public static SessionFilterState Broken;
    public static SessionFilterState Closed;
    public static SessionFilterState Disconnected;
    public static SessionFilterState Opened;
}
public abstract class Microsoft.PowerShell.Commands.SessionStateProviderBase : ContainerCmdletProvider {
    protected virtual void GetItem(string name);
    protected virtual void SetItem(string name, object value);
    protected virtual void ClearItem(string path);
    protected virtual void GetChildItems(string path, bool recurse);
    protected virtual void GetChildNames(string path, ReturnContainers returnContainers);
    protected virtual bool HasChildItems(string path);
    protected virtual bool ItemExists(string path);
    protected virtual bool IsValidPath(string path);
    protected virtual void RemoveItem(string path, bool recurse);
    protected virtual void NewItem(string path, string type, object newItem);
    protected virtual void CopyItem(string path, string copyPath, bool recurse);
    protected virtual void RenameItem(string name, string newName);
    public sealed virtual IContentReader GetContentReader(string path);
    public sealed virtual IContentWriter GetContentWriter(string path);
    public sealed virtual void ClearContent(string path);
    public sealed virtual object GetContentReaderDynamicParameters(string path);
    public sealed virtual object GetContentWriterDynamicParameters(string path);
    public sealed virtual object ClearContentDynamicParameters(string path);
}
public class Microsoft.PowerShell.Commands.SessionStateProviderBaseContentReaderWriter : object {
    public sealed virtual IList Read(long readCount);
    public sealed virtual IList Write(IList content);
    public sealed virtual void Seek(long offset, SeekOrigin origin);
    public sealed virtual void Close();
    public sealed virtual void Dispose();
}
public class Microsoft.PowerShell.Commands.SetPSDebugCommand : PSCmdlet {
    public SwitchParameter Off { get; public set; }
    public SwitchParameter Step { get; public set; }
    public SwitchParameter Strict { get; public set; }
    public int Trace { get; public set; }
    public void set_Trace(int value);
    public int get_Trace();
    public void set_Step(SwitchParameter value);
    public SwitchParameter get_Step();
    public void set_Strict(SwitchParameter value);
    public SwitchParameter get_Strict();
    public SwitchParameter get_Off();
    public void set_Off(SwitchParameter value);
    protected virtual void BeginProcessing();
}
public class Microsoft.PowerShell.Commands.SetPSSessionConfigurationCommand : PSSessionConfigurationCommandBase {
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.Commands.SetStrictModeCommand : PSCmdlet {
    public SwitchParameter Off { get; public set; }
    public Version Version { get; public set; }
    public SwitchParameter get_Off();
    public void set_Off(SwitchParameter value);
    public Version get_Version();
    public void set_Version(Version value);
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.Commands.StartJobCommand : PSExecutionCmdlet {
    public SwitchParameter AllowRedirection { get; }
    public string ApplicationName { get; }
    public Object[] ArgumentList { get; public set; }
    public AuthenticationMechanism Authentication { get; public set; }
    public string CertificateThumbprint { get; public set; }
    public String[] ComputerName { get; }
    public string ConfigurationName { get; public set; }
    public Uri[] ConnectionUri { get; }
    public PSCredential Credential { get; public set; }
    public string DefinitionName { get; public set; }
    public string DefinitionPath { get; public set; }
    public SwitchParameter EnableNetworkAccess { get; }
    public string FilePath { get; public set; }
    public ScriptBlock InitializationScript { get; public set; }
    public PSObject InputObject { get; public set; }
    public string LiteralPath { get; public set; }
    public string Name { get; public set; }
    public Version PSVersion { get; public set; }
    public int Port { get; }
    public SwitchParameter RunAs32 { get; public set; }
    public ScriptBlock ScriptBlock { get; public set; }
    public PSSession[] Session { get; }
    public PSSessionOption SessionOption { get; public set; }
    public int ThrottleLimit { get; }
    public string Type { get; public set; }
    public SwitchParameter UseSSL { get; }
    public string get_DefinitionName();
    public void set_DefinitionName(string value);
    public string get_DefinitionPath();
    public void set_DefinitionPath(string value);
    public string get_Type();
    public void set_Type(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual ScriptBlock get_ScriptBlock();
    public virtual void set_ScriptBlock(ScriptBlock value);
    public virtual PSSession[] get_Session();
    public virtual String[] get_ComputerName();
    public virtual SwitchParameter get_EnableNetworkAccess();
    public virtual PSCredential get_Credential();
    public virtual void set_Credential(PSCredential value);
    public virtual int get_Port();
    public virtual SwitchParameter get_UseSSL();
    public virtual string get_ConfigurationName();
    public virtual void set_ConfigurationName(string value);
    public virtual int get_ThrottleLimit();
    public virtual string get_ApplicationName();
    public virtual Uri[] get_ConnectionUri();
    public virtual string get_FilePath();
    public virtual void set_FilePath(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    public virtual AuthenticationMechanism get_Authentication();
    public virtual void set_Authentication(AuthenticationMechanism value);
    public virtual string get_CertificateThumbprint();
    public virtual void set_CertificateThumbprint(string value);
    public virtual SwitchParameter get_AllowRedirection();
    public virtual PSSessionOption get_SessionOption();
    public virtual void set_SessionOption(PSSessionOption value);
    public virtual ScriptBlock get_InitializationScript();
    public virtual void set_InitializationScript(ScriptBlock value);
    public virtual SwitchParameter get_RunAs32();
    public virtual void set_RunAs32(SwitchParameter value);
    public virtual Version get_PSVersion();
    public virtual void set_PSVersion(Version value);
    public virtual PSObject get_InputObject();
    public virtual void set_InputObject(PSObject value);
    public virtual Object[] get_ArgumentList();
    public virtual void set_ArgumentList(Object[] value);
    protected virtual void BeginProcessing();
    protected virtual void CreateHelpersForSpecifiedComputerNames();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    public sealed virtual void Dispose();
}
public class Microsoft.PowerShell.Commands.StopJobCommand : JobCmdletBase {
    public String[] Command { get; }
    public Job[] Job { get; public set; }
    public SwitchParameter PassThru { get; public set; }
    public Job[] get_Job();
    public void set_Job(Job[] value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    public virtual String[] get_Command();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
}
public class Microsoft.PowerShell.Commands.SuspendJobCommand : JobCmdletBase {
    public String[] Command { get; }
    public SwitchParameter Force { get; public set; }
    public Job[] Job { get; public set; }
    public SwitchParameter Wait { get; public set; }
    public Job[] get_Job();
    public void set_Job(Job[] value);
    public virtual String[] get_Command();
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_Wait();
    public void set_Wait(SwitchParameter value);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
}
public class Microsoft.PowerShell.Commands.TestModuleManifestCommand : ModuleCmdletBase {
    public string Path { get; public set; }
    public string get_Path();
    public void set_Path(string value);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.TestPSSessionConfigurationFileCommand : PSCmdlet {
    public string Path { get; public set; }
    public string get_Path();
    public void set_Path(string value);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.UnregisterPSSessionConfigurationCommand : PSCmdlet {
    public SwitchParameter Force { get; public set; }
    public string Name { get; public set; }
    public SwitchParameter NoServiceRestart { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_NoServiceRestart();
    public void set_NoServiceRestart(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.Commands.UpdatableHelpCommandBase : PSCmdlet {
    public PSCredential Credential { get; public set; }
    public SwitchParameter Force { get; public set; }
    public CultureInfo[] UICulture { get; public set; }
    public SwitchParameter UseDefaultCredentials { get; public set; }
    public CultureInfo[] get_UICulture();
    public void set_UICulture(CultureInfo[] value);
    public PSCredential get_Credential();
    public void set_Credential(PSCredential value);
    public SwitchParameter get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(SwitchParameter value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    protected virtual void StopProcessing();
    protected virtual void EndProcessing();
}
public class Microsoft.PowerShell.Commands.UpdateHelpCommand : UpdatableHelpCommandBase {
    public ModuleSpecification[] FullyQualifiedModule { get; public set; }
    public String[] LiteralPath { get; public set; }
    public String[] Module { get; public set; }
    public SwitchParameter Recurse { get; public set; }
    public String[] SourcePath { get; public set; }
    public String[] get_Module();
    public void set_Module(String[] value);
    public ModuleSpecification[] get_FullyQualifiedModule();
    public void set_FullyQualifiedModule(ModuleSpecification[] value);
    public String[] get_SourcePath();
    public void set_SourcePath(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public SwitchParameter get_Recurse();
    public void set_Recurse(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.VariableProvider : SessionStateProviderBase {
    public static string ProviderName;
    protected virtual Collection`1<PSDriveInfo> InitializeDefaultDrives();
}
public class Microsoft.PowerShell.Commands.WaitJobCommand : JobCmdletBase {
    public SwitchParameter Any { get; public set; }
    public String[] Command { get; public set; }
    public SwitchParameter Force { get; public set; }
    public Job[] Job { get; public set; }
    public int Timeout { get; public set; }
    public Job[] get_Job();
    public void set_Job(Job[] value);
    public SwitchParameter get_Any();
    public void set_Any(SwitchParameter value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public virtual String[] get_Command();
    public virtual void set_Command(String[] value);
    protected virtual void StopProcessing();
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    public sealed virtual void Dispose();
}
public class Microsoft.PowerShell.Commands.WhereObjectCommand : PSCmdlet {
    public SwitchParameter CContains { get; public set; }
    public SwitchParameter CEQ { get; public set; }
    public SwitchParameter CGE { get; public set; }
    public SwitchParameter CGT { get; public set; }
    public SwitchParameter CIn { get; public set; }
    public SwitchParameter CLE { get; public set; }
    public SwitchParameter CLT { get; public set; }
    public SwitchParameter CLike { get; public set; }
    public SwitchParameter CMatch { get; public set; }
    public SwitchParameter CNE { get; public set; }
    public SwitchParameter CNotContains { get; public set; }
    public SwitchParameter CNotIn { get; public set; }
    public SwitchParameter CNotLike { get; public set; }
    public SwitchParameter CNotMatch { get; public set; }
    public SwitchParameter Contains { get; public set; }
    public SwitchParameter EQ { get; public set; }
    public ScriptBlock FilterScript { get; public set; }
    public SwitchParameter GE { get; public set; }
    public SwitchParameter GT { get; public set; }
    public SwitchParameter In { get; public set; }
    public PSObject InputObject { get; public set; }
    public SwitchParameter Is { get; public set; }
    public SwitchParameter IsNot { get; public set; }
    public SwitchParameter LE { get; public set; }
    public SwitchParameter LT { get; public set; }
    public SwitchParameter Like { get; public set; }
    public SwitchParameter Match { get; public set; }
    public SwitchParameter NE { get; public set; }
    public SwitchParameter NotContains { get; public set; }
    public SwitchParameter NotIn { get; public set; }
    public SwitchParameter NotLike { get; public set; }
    public SwitchParameter NotMatch { get; public set; }
    public string Property { get; public set; }
    public object Value { get; public set; }
    public void set_InputObject(PSObject value);
    public PSObject get_InputObject();
    public void set_FilterScript(ScriptBlock value);
    public ScriptBlock get_FilterScript();
    public void set_Property(string value);
    public string get_Property();
    public void set_Value(object value);
    public object get_Value();
    public void set_EQ(SwitchParameter value);
    public SwitchParameter get_EQ();
    public void set_CEQ(SwitchParameter value);
    public SwitchParameter get_CEQ();
    public void set_NE(SwitchParameter value);
    public SwitchParameter get_NE();
    public void set_CNE(SwitchParameter value);
    public SwitchParameter get_CNE();
    public void set_GT(SwitchParameter value);
    public SwitchParameter get_GT();
    public void set_CGT(SwitchParameter value);
    public SwitchParameter get_CGT();
    public void set_LT(SwitchParameter value);
    public SwitchParameter get_LT();
    public void set_CLT(SwitchParameter value);
    public SwitchParameter get_CLT();
    public void set_GE(SwitchParameter value);
    public SwitchParameter get_GE();
    public void set_CGE(SwitchParameter value);
    public SwitchParameter get_CGE();
    public void set_LE(SwitchParameter value);
    public SwitchParameter get_LE();
    public void set_CLE(SwitchParameter value);
    public SwitchParameter get_CLE();
    public void set_Like(SwitchParameter value);
    public SwitchParameter get_Like();
    public void set_CLike(SwitchParameter value);
    public SwitchParameter get_CLike();
    public void set_NotLike(SwitchParameter value);
    public SwitchParameter get_NotLike();
    public void set_CNotLike(SwitchParameter value);
    public SwitchParameter get_CNotLike();
    public void set_Match(SwitchParameter value);
    public SwitchParameter get_Match();
    public void set_CMatch(SwitchParameter value);
    public SwitchParameter get_CMatch();
    public void set_NotMatch(SwitchParameter value);
    public SwitchParameter get_NotMatch();
    public void set_CNotMatch(SwitchParameter value);
    public SwitchParameter get_CNotMatch();
    public void set_Contains(SwitchParameter value);
    public SwitchParameter get_Contains();
    public void set_CContains(SwitchParameter value);
    public SwitchParameter get_CContains();
    public void set_NotContains(SwitchParameter value);
    public SwitchParameter get_NotContains();
    public void set_CNotContains(SwitchParameter value);
    public SwitchParameter get_CNotContains();
    public void set_In(SwitchParameter value);
    public SwitchParameter get_In();
    public void set_CIn(SwitchParameter value);
    public SwitchParameter get_CIn();
    public void set_NotIn(SwitchParameter value);
    public SwitchParameter get_NotIn();
    public void set_CNotIn(SwitchParameter value);
    public SwitchParameter get_CNotIn();
    public void set_Is(SwitchParameter value);
    public SwitchParameter get_Is();
    public void set_IsNot(SwitchParameter value);
    public SwitchParameter get_IsNot();
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.WSManConfigurationOption : PSTransportOption {
    public Nullable`1<int> IdleTimeoutSec { get; }
    public Nullable`1<int> MaxConcurrentCommandsPerSession { get; }
    public Nullable`1<int> MaxConcurrentUsers { get; }
    public Nullable`1<int> MaxIdleTimeoutSec { get; }
    public Nullable`1<int> MaxMemoryPerSessionMB { get; }
    public Nullable`1<int> MaxProcessesPerSession { get; }
    public Nullable`1<int> MaxSessions { get; }
    public Nullable`1<int> MaxSessionsPerUser { get; }
    public Nullable`1<OutputBufferingMode> OutputBufferingMode { get; }
    public Nullable`1<int> ProcessIdleTimeoutSec { get; }
    protected internal virtual void LoadFromDefaults(PSSessionType sessionType, bool keepAssigned);
    public Nullable`1<int> get_ProcessIdleTimeoutSec();
    public Nullable`1<int> get_MaxIdleTimeoutSec();
    public Nullable`1<int> get_MaxSessions();
    public Nullable`1<int> get_MaxConcurrentCommandsPerSession();
    public Nullable`1<int> get_MaxSessionsPerUser();
    public Nullable`1<int> get_MaxMemoryPerSessionMB();
    public Nullable`1<int> get_MaxProcessesPerSession();
    public Nullable`1<int> get_MaxConcurrentUsers();
    public Nullable`1<int> get_IdleTimeoutSec();
    public Nullable`1<OutputBufferingMode> get_OutputBufferingMode();
}
public class Microsoft.PowerShell.DeserializingTypeConverter : PSTypeConverter {
    public virtual bool CanConvertFrom(PSObject sourceValue, Type destinationType);
    public virtual object ConvertFrom(PSObject sourceValue, Type destinationType, IFormatProvider formatProvider, bool ignoreCase);
    public virtual bool CanConvertTo(object sourceValue, Type destinationType);
    public virtual object ConvertTo(object sourceValue, Type destinationType, IFormatProvider formatProvider, bool ignoreCase);
    public virtual bool CanConvertFrom(object sourceValue, Type destinationType);
    public virtual bool CanConvertTo(PSObject sourceValue, Type destinationType);
    public virtual object ConvertFrom(object sourceValue, Type destinationType, IFormatProvider formatProvider, bool ignoreCase);
    public virtual object ConvertTo(PSObject sourceValue, Type destinationType, IFormatProvider formatProvider, bool ignoreCase);
    public static UInt32 GetParameterSetMetadataFlags(PSObject instance);
    public static PSObject GetInvocationInfo(PSObject instance);
    public static Guid GetFormatViewDefinitionInstanceId(PSObject instance);
}
[AttributeUsageAttribute("2432")]
public class Microsoft.PowerShell.DesiredStateConfiguration.ArgumentToConfigurationDataTransformationAttribute : ArgumentTransformationAttribute {
    public virtual object Transform(EngineIntrinsics engineIntrinsics, object inputData);
}
public static class Microsoft.PowerShell.DesiredStateConfiguration.Internal.DscClassCache : object {
    public static void Initialize();
    public static void Initialize(Collection`1<Exception> errors, List`1<string> modulePathList);
    public static List`1<CimClass> ImportClasses(string path, Tuple`2<string, Version> moduleInfo, Collection`1<Exception> errors);
    public static void ClearCache();
    public static List`1<CimClass> GetCachedClasses();
    public static List`1<string> GetFileDefiningClass(string className);
    public static String[] GetLoadedFiles();
    public static List`1<CimClass> GetCachedClassByFileName(string fileName);
    public static List`1<CimClass> GetCachedClassByModuleName(string moduleName);
    public static List`1<CimInstance> ImportInstances(string path);
    public static List`1<CimInstance> ImportInstances(string path, int schemaValidationOption);
    public static void ValidateInstanceText(string instanceText);
    public static Collection`1<DynamicKeyword> GetCachedKeywords();
    public static void LoadDefaultCimKeywords();
    public static void LoadDefaultCimKeywords(List`1<string> modulePathList);
    public static void LoadDefaultCimKeywords(Collection`1<Exception> errors);
    public static void LoadDefaultCimKeywords(Dictionary`2<string, ScriptBlock> functionsToDefine);
    public static void LoadDefaultCimKeywords(Collection`1<Exception> errors, bool cacheResourcesFromMultipleModuleVersions);
    public static void LoadResourcesFromModule(IScriptExtent scriptExtent, ModuleSpecification[] moduleSpecifications, String[] resourceNames, List`1<ParseError> errorList);
    public static List`1<string> ImportClassResourcesFromModule(PSModuleInfo moduleInfo, ICollection`1<string> resourcesToImport, Dictionary`2<string, ScriptBlock> functionsToDefine);
    public static string GenerateMofForType(Type type);
    public static bool ImportCimKeywordsFromModule(PSModuleInfo module, string resourceName, String& schemaFilePath);
    public static bool ImportCimKeywordsFromModule(PSModuleInfo module, string resourceName, String& schemaFilePath, Dictionary`2<string, ScriptBlock> functionsToDefine);
    public static bool ImportCimKeywordsFromModule(PSModuleInfo module, string resourceName, String& schemaFilePath, Dictionary`2<string, ScriptBlock> functionsToDefine, Collection`1<Exception> errors);
    public static bool ImportScriptKeywordsFromModule(PSModuleInfo module, string resourceName, String& schemaFilePath);
    public static bool ImportScriptKeywordsFromModule(PSModuleInfo module, string resourceName, String& schemaFilePath, Dictionary`2<string, ScriptBlock> functionsToDefine);
    public static ErrorRecord GetBadlyFormedRequiredResourceIdErrorRecord(string badDependsOnReference, string definingResource);
    public static ErrorRecord GetBadlyFormedExclusiveResourceIdErrorRecord(string badExclusiveResourcereference, string definingResource);
    public static ErrorRecord DuplicateResourceIdInNodeStatementErrorRecord(string duplicateResourceId, string nodeName);
    public static ErrorRecord InvalidConfigurationNameErrorRecord(string configurationName);
    public static ErrorRecord InvalidValueForPropertyErrorRecord(string propertyName, string value, string keywordName, string validValues);
    public static ErrorRecord InvalidLocalConfigurationManagerPropertyErrorRecord(string propertyName, string validProperties);
    public static ErrorRecord UnsupportedValueForPropertyErrorRecord(string propertyName, string value, string keywordName, string validValues);
    public static ErrorRecord MissingValueForMandatoryPropertyErrorRecord(string keywordName, string typeName, string propertyName);
    public static ErrorRecord DebugModeShouldHaveOneValue();
    public static ErrorRecord ValueNotInRangeErrorRecord(string property, string name, int providedValue, int lower, int upper);
    public static string GetDSCResourceUsageString(DynamicKeyword keyword);
}
public enum Microsoft.PowerShell.ExecutionPolicy : Enum {
    public int value__;
    public static ExecutionPolicy AllSigned;
    public static ExecutionPolicy Bypass;
    public static ExecutionPolicy Default;
    public static ExecutionPolicy RemoteSigned;
    public static ExecutionPolicy Restricted;
    public static ExecutionPolicy Undefined;
    public static ExecutionPolicy Unrestricted;
}
public enum Microsoft.PowerShell.ExecutionPolicyScope : Enum {
    public int value__;
    public static ExecutionPolicyScope CurrentUser;
    public static ExecutionPolicyScope LocalMachine;
    public static ExecutionPolicyScope MachinePolicy;
    public static ExecutionPolicyScope Process;
    public static ExecutionPolicyScope UserPolicy;
}
public class Microsoft.PowerShell.PSAuthorizationManager : AuthorizationManager {
    public PSAuthorizationManager(string shellId);
    protected internal virtual bool ShouldRun(CommandInfo commandInfo, CommandOrigin origin, PSHost host, Exception& reason);
}
public class Microsoft.PowerShell.PSCorePSSnapIn : PSSnapIn {
    public string Description { get; }
    public string DescriptionResource { get; }
    public String[] Formats { get; }
    public string Name { get; }
    public String[] Types { get; }
    public string Vendor { get; }
    public string VendorResource { get; }
    public virtual string get_Name();
    public virtual string get_Vendor();
    public virtual string get_VendorResource();
    public virtual string get_Description();
    public virtual string get_DescriptionResource();
    public virtual String[] get_Types();
    public virtual String[] get_Formats();
}
public static class Microsoft.PowerShell.Telemetry.Internal.TelemetryAPI : object {
    public static void TraceMessage(string message, T arguments);
}
public static class Microsoft.PowerShell.ToStringCodeMethods : object {
    public static string Type(PSObject instance);
    public static string XmlNode(PSObject instance);
    public static string XmlNodeList(PSObject instance);
    public static string PropertyValueCollection(PSObject instance);
}
public enum System.Management.Automation.ActionPreference : Enum {
    public int value__;
    public static ActionPreference Continue;
    public static ActionPreference Ignore;
    public static ActionPreference Inquire;
    public static ActionPreference SilentlyContinue;
    public static ActionPreference Stop;
    public static ActionPreference Suspend;
}
public class System.Management.Automation.ActionPreferenceStopException : RuntimeException {
    public ErrorRecord ErrorRecord { get; }
    protected ActionPreferenceStopException(SerializationInfo info, StreamingContext context);
    public ActionPreferenceStopException(string message);
    public ActionPreferenceStopException(string message, Exception innerException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual ErrorRecord get_ErrorRecord();
}
[AttributeUsageAttribute("388")]
public class System.Management.Automation.AliasAttribute : ParsingBaseAttribute {
    public IList`1<string> AliasNames { get; }
    public AliasAttribute(String[] aliasNames);
    public IList`1<string> get_AliasNames();
}
public class System.Management.Automation.AliasInfo : CommandInfo {
    public string Definition { get; }
    public string Description { get; public set; }
    public ScopedItemOptions Options { get; public set; }
    public ReadOnlyCollection`1<PSTypeName> OutputType { get; }
    public CommandInfo ReferencedCommand { get; }
    public CommandInfo ResolvedCommand { get; }
    public CommandInfo get_ReferencedCommand();
    public CommandInfo get_ResolvedCommand();
    public virtual string get_Definition();
    public ScopedItemOptions get_Options();
    public void set_Options(ScopedItemOptions value);
    public string get_Description();
    public void set_Description(string value);
    public virtual ReadOnlyCollection`1<PSTypeName> get_OutputType();
}
public enum System.Management.Automation.Alignment : Enum {
    public int value__;
    public static Alignment Center;
    public static Alignment Left;
    public static Alignment Right;
    public static Alignment Undefined;
}
[AttributeUsageAttribute("384")]
public class System.Management.Automation.AllowEmptyCollectionAttribute : CmdletMetadataAttribute {
}
[AttributeUsageAttribute("384")]
public class System.Management.Automation.AllowEmptyStringAttribute : CmdletMetadataAttribute {
}
[AttributeUsageAttribute("384")]
public class System.Management.Automation.AllowNullAttribute : CmdletMetadataAttribute {
}
public class System.Management.Automation.ApplicationFailedException : RuntimeException {
    protected ApplicationFailedException(SerializationInfo info, StreamingContext context);
    public ApplicationFailedException(string message);
    public ApplicationFailedException(string message, Exception innerException);
}
public class System.Management.Automation.ApplicationInfo : CommandInfo {
    public string Definition { get; }
    public string Extension { get; }
    public ReadOnlyCollection`1<PSTypeName> OutputType { get; }
    public string Path { get; }
    public string Source { get; }
    public Version Version { get; }
    public SessionStateEntryVisibility Visibility { get; public set; }
    public string get_Path();
    public string get_Extension();
    public virtual string get_Definition();
    public virtual string get_Source();
    public virtual Version get_Version();
    public virtual SessionStateEntryVisibility get_Visibility();
    public virtual void set_Visibility(SessionStateEntryVisibility value);
    public virtual ReadOnlyCollection`1<PSTypeName> get_OutputType();
}
[AttributeUsageAttribute("384")]
public class System.Management.Automation.ArgumentCompleterAttribute : Attribute {
    public ScriptBlock ScriptBlock { get; }
    public Type Type { get; }
    public ArgumentCompleterAttribute(Type type);
    public ArgumentCompleterAttribute(ScriptBlock scriptBlock);
    public Type get_Type();
    public ScriptBlock get_ScriptBlock();
}
[AttributeUsageAttribute("384")]
public abstract class System.Management.Automation.ArgumentTransformationAttribute : CmdletMetadataAttribute {
    public bool TransformNullOptionalParameters { get; }
    public abstract virtual object Transform(EngineIntrinsics engineIntrinsics, object inputData);
    public virtual bool get_TransformNullOptionalParameters();
}
public class System.Management.Automation.ArgumentTransformationMetadataException : MetadataException {
    protected ArgumentTransformationMetadataException(SerializationInfo info, StreamingContext context);
    public ArgumentTransformationMetadataException(string message);
    public ArgumentTransformationMetadataException(string message, Exception innerException);
}
public class System.Management.Automation.AuthorizationManager : object {
    public AuthorizationManager(string shellId);
    protected internal virtual bool ShouldRun(CommandInfo commandInfo, CommandOrigin origin, PSHost host, Exception& reason);
}
public class System.Management.Automation.BackgroundDispatcher : object {
    public BackgroundDispatcher(EventProvider transferProvider, EventDescriptor transferEvent);
    public sealed virtual bool QueueUserWorkItem(WaitCallback callback);
    public sealed virtual bool QueueUserWorkItem(WaitCallback callback, object state);
    public sealed virtual IAsyncResult BeginInvoke(WaitCallback callback, object state, AsyncCallback completionCallback, object asyncState);
    public sealed virtual void EndInvoke(IAsyncResult asyncResult);
}
public class System.Management.Automation.BreakException : LoopFlowException {
}
public abstract class System.Management.Automation.Breakpoint : object {
    public ScriptBlock Action { get; }
    public bool Enabled { get; }
    public int HitCount { get; }
    public int Id { get; }
    public string Script { get; }
    public ScriptBlock get_Action();
    public bool get_Enabled();
    public int get_HitCount();
    public int get_Id();
    public string get_Script();
}
public class System.Management.Automation.BreakpointUpdatedEventArgs : EventArgs {
    public Breakpoint Breakpoint { get; }
    public int BreakpointCount { get; }
    public BreakpointUpdateType UpdateType { get; }
    public Breakpoint get_Breakpoint();
    public BreakpointUpdateType get_UpdateType();
    public int get_BreakpointCount();
}
public enum System.Management.Automation.BreakpointUpdateType : Enum {
    public int value__;
    public static BreakpointUpdateType Disabled;
    public static BreakpointUpdateType Enabled;
    public static BreakpointUpdateType Removed;
    public static BreakpointUpdateType Set;
}
public class System.Management.Automation.CallStackFrame : object {
    public string FunctionName { get; }
    public InvocationInfo InvocationInfo { get; }
    public IScriptExtent Position { get; }
    public int ScriptLineNumber { get; }
    public string ScriptName { get; }
    public CallStackFrame(InvocationInfo invocationInfo);
    public string get_ScriptName();
    public int get_ScriptLineNumber();
    public InvocationInfo get_InvocationInfo();
    public IScriptExtent get_Position();
    public string get_FunctionName();
    public string GetScriptLocation();
    public Dictionary`2<string, PSVariable> GetFrameVariables();
    public virtual string ToString();
}
public class System.Management.Automation.ChildItemCmdletProviderIntrinsics : object {
    public Collection`1<PSObject> Get(string path, bool recurse);
    public Collection`1<PSObject> Get(String[] path, bool recurse, UInt32 depth, bool force, bool literalPath);
    public Collection`1<PSObject> Get(String[] path, bool recurse, bool force, bool literalPath);
    public Collection`1<string> GetNames(string path, ReturnContainers returnContainers, bool recurse);
    public Collection`1<string> GetNames(String[] path, ReturnContainers returnContainers, bool recurse, bool force, bool literalPath);
    public Collection`1<string> GetNames(String[] path, ReturnContainers returnContainers, bool recurse, UInt32 depth, bool force, bool literalPath);
    public bool HasChild(string path);
    public bool HasChild(string path, bool force, bool literalPath);
}
public static class System.Management.Automation.ClassOps : object {
    public static void ValidateSetProperty(Type type, string propertyName, object value);
    public static void CallBaseCtor(object target, ConstructorInfo ci, Object[] args);
    public static object CallMethodNonVirtually(object target, MethodInfo mi, Object[] args);
    public static void CallVoidMethodNonVirtually(object target, MethodInfo mi, Object[] args);
}
public abstract class System.Management.Automation.Cmdlet : InternalCommand {
    public ICommandRuntime CommandRuntime { get; public set; }
    public static HashSet`1<string> CommonParameters { get; }
    public PSTransactionContext CurrentPSTransaction { get; }
    public static HashSet`1<string> OptionalCommonParameters { get; }
    public bool Stopping { get; }
    public static HashSet`1<string> get_CommonParameters();
    public static HashSet`1<string> get_OptionalCommonParameters();
    public bool get_Stopping();
    public virtual string GetResourceString(string baseName, string resourceId);
    public ICommandRuntime get_CommandRuntime();
    public void set_CommandRuntime(ICommandRuntime value);
    public void WriteError(ErrorRecord errorRecord);
    public void WriteObject(object sendToPipeline);
    public void WriteObject(object sendToPipeline, bool enumerateCollection);
    public void WriteVerbose(string text);
    public void WriteWarning(string text);
    public void WriteCommandDetail(string text);
    public void WriteProgress(ProgressRecord progressRecord);
    public void WriteDebug(string text);
    public void WriteInformation(object messageData, String[] tags);
    public void WriteInformation(InformationRecord informationRecord);
    public bool ShouldProcess(string target);
    public bool ShouldProcess(string target, string action);
    public bool ShouldProcess(string verboseDescription, string verboseWarning, string caption);
    public bool ShouldProcess(string verboseDescription, string verboseWarning, string caption, ShouldProcessReason& shouldProcessReason);
    public bool ShouldContinue(string query, string caption);
    public bool ShouldContinue(string query, string caption, Boolean& yesToAll, Boolean& noToAll);
    public bool ShouldContinue(string query, string caption, bool hasSecurityImpact, Boolean& yesToAll, Boolean& noToAll);
    public IEnumerable Invoke();
    public IEnumerable`1<T> Invoke();
    public bool TransactionAvailable();
    public PSTransactionContext get_CurrentPSTransaction();
    public void ThrowTerminatingError(ErrorRecord errorRecord);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
}
[AttributeUsageAttribute("4")]
public class System.Management.Automation.CmdletAttribute : CmdletCommonMetadataAttribute {
    public string NounName { get; }
    public string VerbName { get; }
    public CmdletAttribute(string verbName, string nounName);
    public string get_NounName();
    public string get_VerbName();
}
[AttributeUsageAttribute("4")]
public class System.Management.Automation.CmdletBindingAttribute : CmdletCommonMetadataAttribute {
    public bool PositionalBinding { get; public set; }
    public bool get_PositionalBinding();
    public void set_PositionalBinding(bool value);
}
[AttributeUsageAttribute("4")]
public abstract class System.Management.Automation.CmdletCommonMetadataAttribute : CmdletMetadataAttribute {
    public ConfirmImpact ConfirmImpact { get; public set; }
    public string DefaultParameterSetName { get; public set; }
    public string HelpUri { get; public set; }
    public RemotingCapability RemotingCapability { get; public set; }
    public bool SupportsPaging { get; public set; }
    public bool SupportsShouldProcess { get; public set; }
    public bool SupportsTransactions { get; public set; }
    public string get_DefaultParameterSetName();
    public void set_DefaultParameterSetName(string value);
    public bool get_SupportsShouldProcess();
    public void set_SupportsShouldProcess(bool value);
    public bool get_SupportsPaging();
    public void set_SupportsPaging(bool value);
    public bool get_SupportsTransactions();
    public void set_SupportsTransactions(bool value);
    public ConfirmImpact get_ConfirmImpact();
    public void set_ConfirmImpact(ConfirmImpact value);
    public string get_HelpUri();
    public void set_HelpUri(string value);
    public RemotingCapability get_RemotingCapability();
    public void set_RemotingCapability(RemotingCapability value);
}
public class System.Management.Automation.CmdletInfo : CommandInfo {
    public string DefaultParameterSet { get; }
    public string Definition { get; }
    public string HelpFile { get; }
    public Type ImplementingType { get; }
    public string Noun { get; }
    public ScopedItemOptions Options { get; public set; }
    public ReadOnlyCollection`1<PSTypeName> OutputType { get; }
    public PSSnapInInfo PSSnapIn { get; }
    public string Verb { get; }
    public Version Version { get; }
    public CmdletInfo(string name, Type implementingType);
    public string get_Verb();
    public string get_Noun();
    public string get_HelpFile();
    public PSSnapInInfo get_PSSnapIn();
    public virtual Version get_Version();
    public Type get_ImplementingType();
    public virtual string get_Definition();
    public string get_DefaultParameterSet();
    public virtual ReadOnlyCollection`1<PSTypeName> get_OutputType();
    public ScopedItemOptions get_Options();
    public void set_Options(ScopedItemOptions value);
}
public class System.Management.Automation.CmdletInvocationException : RuntimeException {
    public ErrorRecord ErrorRecord { get; }
    public CmdletInvocationException(string message);
    public CmdletInvocationException(string message, Exception innerException);
    protected CmdletInvocationException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual ErrorRecord get_ErrorRecord();
}
public class System.Management.Automation.CmdletProviderInvocationException : CmdletInvocationException {
    public ProviderInfo ProviderInfo { get; }
    public ProviderInvocationException ProviderInvocationException { get; }
    protected CmdletProviderInvocationException(SerializationInfo info, StreamingContext context);
    public CmdletProviderInvocationException(string message);
    public CmdletProviderInvocationException(string message, Exception innerException);
    public ProviderInvocationException get_ProviderInvocationException();
    public ProviderInfo get_ProviderInfo();
}
public class System.Management.Automation.CmdletProviderManagementIntrinsics : object {
    public Collection`1<ProviderInfo> Get(string name);
    public ProviderInfo GetOne(string name);
    public IEnumerable`1<ProviderInfo> GetAll();
}
public class System.Management.Automation.CmsMessageRecipient : object {
    public X509Certificate2Collection Certificates { get; }
    public CmsMessageRecipient(string identifier);
    public CmsMessageRecipient(X509Certificate2 certificate);
    public X509Certificate2Collection get_Certificates();
    public void Resolve(SessionState sessionState, ResolutionPurpose purpose, ErrorRecord& error);
}
public class System.Management.Automation.CommandBreakpoint : Breakpoint {
    public string Command { get; }
    public string get_Command();
    public virtual string ToString();
}
public class System.Management.Automation.CommandCompletion : object {
    public Collection`1<CompletionResult> CompletionMatches { get; public set; }
    public int CurrentMatchIndex { get; public set; }
    public int ReplacementIndex { get; public set; }
    public int ReplacementLength { get; public set; }
    public CommandCompletion(Collection`1<CompletionResult> matches, int currentMatchIndex, int replacementIndex, int replacementLength);
    public int get_CurrentMatchIndex();
    public void set_CurrentMatchIndex(int value);
    public int get_ReplacementIndex();
    public void set_ReplacementIndex(int value);
    public int get_ReplacementLength();
    public void set_ReplacementLength(int value);
    public Collection`1<CompletionResult> get_CompletionMatches();
    public void set_CompletionMatches(Collection`1<CompletionResult> value);
    public static Tuple`3<Ast, Token[], IScriptPosition> MapStringInputToParsedInput(string input, int cursorIndex);
    public static CommandCompletion CompleteInput(string input, int cursorIndex, Hashtable options);
    public static CommandCompletion CompleteInput(Ast ast, Token[] tokens, IScriptPosition positionOfCursor, Hashtable options);
    public static CommandCompletion CompleteInput(string input, int cursorIndex, Hashtable options, PowerShell powershell);
    public static CommandCompletion CompleteInput(Ast ast, Token[] tokens, IScriptPosition cursorPosition, Hashtable options, PowerShell powershell);
    public CompletionResult GetNextResult(bool forward);
}
public abstract class System.Management.Automation.CommandInfo : object {
    public CommandTypes CommandType { get; }
    public string Definition { get; }
    public PSModuleInfo Module { get; }
    public string ModuleName { get; }
    public string Name { get; }
    public ReadOnlyCollection`1<PSTypeName> OutputType { get; }
    public ReadOnlyCollection`1<CommandParameterSetInfo> ParameterSets { get; }
    public Dictionary`2<string, ParameterMetadata> Parameters { get; }
    public RemotingCapability RemotingCapability { get; }
    public string Source { get; }
    public Version Version { get; }
    public SessionStateEntryVisibility Visibility { get; public set; }
    public string get_Name();
    public CommandTypes get_CommandType();
    public virtual string get_Source();
    public virtual Version get_Version();
    public abstract virtual string get_Definition();
    public virtual string ToString();
    public virtual SessionStateEntryVisibility get_Visibility();
    public virtual void set_Visibility(SessionStateEntryVisibility value);
    public string get_ModuleName();
    public PSModuleInfo get_Module();
    public RemotingCapability get_RemotingCapability();
    public virtual Dictionary`2<string, ParameterMetadata> get_Parameters();
    public ParameterMetadata ResolveParameter(string name);
    public ReadOnlyCollection`1<CommandParameterSetInfo> get_ParameterSets();
    public abstract virtual ReadOnlyCollection`1<PSTypeName> get_OutputType();
}
public class System.Management.Automation.CommandInvocationIntrinsics : object {
    public EventHandler`1<CommandLookupEventArgs> CommandNotFoundAction { get; public set; }
    public bool HasErrors { get; public set; }
    public EventHandler`1<CommandLookupEventArgs> PostCommandLookupAction { get; public set; }
    public EventHandler`1<CommandLookupEventArgs> PreCommandLookupAction { get; public set; }
    public bool get_HasErrors();
    public void set_HasErrors(bool value);
    public string ExpandString(string source);
    public CommandInfo GetCommand(string commandName, CommandTypes type);
    public EventHandler`1<CommandLookupEventArgs> get_CommandNotFoundAction();
    public void set_CommandNotFoundAction(EventHandler`1<CommandLookupEventArgs> value);
    public EventHandler`1<CommandLookupEventArgs> get_PreCommandLookupAction();
    public void set_PreCommandLookupAction(EventHandler`1<CommandLookupEventArgs> value);
    public EventHandler`1<CommandLookupEventArgs> get_PostCommandLookupAction();
    public void set_PostCommandLookupAction(EventHandler`1<CommandLookupEventArgs> value);
    public CmdletInfo GetCmdlet(string commandName);
    public CmdletInfo GetCmdletByTypeName(string cmdletTypeName);
    public List`1<CmdletInfo> GetCmdlets();
    public List`1<CmdletInfo> GetCmdlets(string pattern);
    public List`1<string> GetCommandName(string name, bool nameIsPattern, bool returnFullName);
    public IEnumerable`1<CommandInfo> GetCommands(string name, CommandTypes commandTypes, bool nameIsPattern);
    public Collection`1<PSObject> InvokeScript(string script);
    public Collection`1<PSObject> InvokeScript(string script, Object[] args);
    public Collection`1<PSObject> InvokeScript(SessionState sessionState, ScriptBlock scriptBlock, Object[] args);
    public Collection`1<PSObject> InvokeScript(bool useLocalScope, ScriptBlock scriptBlock, IList input, Object[] args);
    public Collection`1<PSObject> InvokeScript(string script, bool useNewScope, PipelineResultTypes writeToPipeline, IList input, Object[] args);
    public ScriptBlock NewScriptBlock(string scriptText);
}
public class System.Management.Automation.CommandLookupEventArgs : EventArgs {
    public CommandInfo Command { get; public set; }
    public string CommandName { get; }
    public CommandOrigin CommandOrigin { get; }
    public ScriptBlock CommandScriptBlock { get; public set; }
    public bool StopSearch { get; public set; }
    public string get_CommandName();
    public CommandOrigin get_CommandOrigin();
    public bool get_StopSearch();
    public void set_StopSearch(bool value);
    public CommandInfo get_Command();
    public void set_Command(CommandInfo value);
    public ScriptBlock get_CommandScriptBlock();
    public void set_CommandScriptBlock(ScriptBlock value);
}
public class System.Management.Automation.CommandMetadata : object {
    public Type CommandType { get; }
    public ConfirmImpact ConfirmImpact { get; public set; }
    public string DefaultParameterSetName { get; public set; }
    public string HelpUri { get; public set; }
    public string Name { get; public set; }
    public Dictionary`2<string, ParameterMetadata> Parameters { get; }
    public bool PositionalBinding { get; public set; }
    public RemotingCapability RemotingCapability { get; public set; }
    public bool SupportsPaging { get; public set; }
    public bool SupportsShouldProcess { get; public set; }
    public bool SupportsTransactions { get; public set; }
    public CommandMetadata(Type commandType);
    public CommandMetadata(CommandInfo commandInfo);
    public CommandMetadata(CommandInfo commandInfo, bool shouldGenerateCommonParameters);
    public CommandMetadata(string path);
    public CommandMetadata(CommandMetadata other);
    public string get_Name();
    public void set_Name(string value);
    public Type get_CommandType();
    public string get_DefaultParameterSetName();
    public void set_DefaultParameterSetName(string value);
    public bool get_SupportsShouldProcess();
    public void set_SupportsShouldProcess(bool value);
    public bool get_SupportsPaging();
    public void set_SupportsPaging(bool value);
    public bool get_PositionalBinding();
    public void set_PositionalBinding(bool value);
    public bool get_SupportsTransactions();
    public void set_SupportsTransactions(bool value);
    public string get_HelpUri();
    public void set_HelpUri(string value);
    public RemotingCapability get_RemotingCapability();
    public void set_RemotingCapability(RemotingCapability value);
    public ConfirmImpact get_ConfirmImpact();
    public void set_ConfirmImpact(ConfirmImpact value);
    public Dictionary`2<string, ParameterMetadata> get_Parameters();
    public static Dictionary`2<string, CommandMetadata> GetRestrictedCommands(SessionCapabilities sessionCapabilities);
}
public class System.Management.Automation.CommandNotFoundException : RuntimeException {
    public string CommandName { get; public set; }
    public ErrorRecord ErrorRecord { get; }
    public CommandNotFoundException(string message);
    public CommandNotFoundException(string message, Exception innerException);
    protected CommandNotFoundException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual ErrorRecord get_ErrorRecord();
    public string get_CommandName();
    public void set_CommandName(string value);
}
public enum System.Management.Automation.CommandOrigin : Enum {
    public int value__;
    public static CommandOrigin Internal;
    public static CommandOrigin Runspace;
}
public class System.Management.Automation.CommandParameterInfo : object {
    public ReadOnlyCollection`1<string> Aliases { get; }
    public ReadOnlyCollection`1<Attribute> Attributes { get; }
    public string HelpMessage { get; }
    public bool IsDynamic { get; }
    public bool IsMandatory { get; }
    public string Name { get; }
    public Type ParameterType { get; }
    public int Position { get; }
    public bool ValueFromPipeline { get; }
    public bool ValueFromPipelineByPropertyName { get; }
    public bool ValueFromRemainingArguments { get; }
    public string get_Name();
    public Type get_ParameterType();
    public bool get_IsMandatory();
    public bool get_IsDynamic();
    public int get_Position();
    public bool get_ValueFromPipeline();
    public bool get_ValueFromPipelineByPropertyName();
    public bool get_ValueFromRemainingArguments();
    public string get_HelpMessage();
    public ReadOnlyCollection`1<string> get_Aliases();
    public ReadOnlyCollection`1<Attribute> get_Attributes();
}
public class System.Management.Automation.CommandParameterSetInfo : object {
    public bool IsDefault { get; }
    public string Name { get; }
    public ReadOnlyCollection`1<CommandParameterInfo> Parameters { get; }
    public string get_Name();
    public bool get_IsDefault();
    public ReadOnlyCollection`1<CommandParameterInfo> get_Parameters();
    public virtual string ToString();
}
[FlagsAttribute]
public enum System.Management.Automation.CommandTypes : Enum {
    public int value__;
    public static CommandTypes Alias;
    public static CommandTypes All;
    public static CommandTypes Application;
    public static CommandTypes Cmdlet;
    public static CommandTypes Configuration;
    public static CommandTypes ExternalScript;
    public static CommandTypes Filter;
    public static CommandTypes Function;
    public static CommandTypes Script;
    public static CommandTypes Workflow;
}
public static class System.Management.Automation.CompletionCompleters : object {
    public static IEnumerable`1<CompletionResult> CompleteCommand(string commandName);
    public static IEnumerable`1<CompletionResult> CompleteCommand(string commandName, string moduleName, CommandTypes commandTypes);
    public static List`1<CompletionResult> CompleteOperator(string wordToComplete);
    public static IEnumerable`1<CompletionResult> CompleteFilename(string fileName);
    public static IEnumerable`1<CompletionResult> CompleteVariable(string variableName);
    public static IEnumerable`1<CompletionResult> CompleteType(string typeName);
}
public class System.Management.Automation.CompletionResult : object {
    public string CompletionText { get; }
    public string ListItemText { get; }
    public CompletionResultType ResultType { get; }
    public string ToolTip { get; }
    public CompletionResult(string completionText, string listItemText, CompletionResultType resultType, string toolTip);
    public CompletionResult(string completionText);
    public string get_CompletionText();
    public string get_ListItemText();
    public CompletionResultType get_ResultType();
    public string get_ToolTip();
}
public enum System.Management.Automation.CompletionResultType : Enum {
    public int value__;
    public static CompletionResultType Command;
    public static CompletionResultType DynamicKeyword;
    public static CompletionResultType History;
    public static CompletionResultType Keyword;
    public static CompletionResultType Method;
    public static CompletionResultType Namespace;
    public static CompletionResultType ParameterName;
    public static CompletionResultType ParameterValue;
    public static CompletionResultType Property;
    public static CompletionResultType ProviderContainer;
    public static CompletionResultType ProviderItem;
    public static CompletionResultType Text;
    public static CompletionResultType Type;
    public static CompletionResultType Variable;
}
public class System.Management.Automation.ConfigurationInfo : FunctionInfo {
    public bool IsMetaConfiguration { get; }
    public bool get_IsMetaConfiguration();
}
public enum System.Management.Automation.ConfirmImpact : Enum {
    public int value__;
    public static ConfirmImpact High;
    public static ConfirmImpact Low;
    public static ConfirmImpact Medium;
    public static ConfirmImpact None;
}
public class System.Management.Automation.ContainerParentJob : Job2 {
    public bool HasMoreData { get; }
    public string Location { get; }
    public string StatusMessage { get; }
    public ContainerParentJob(string command, string name);
    public ContainerParentJob(string command);
    public ContainerParentJob(string command, string name, JobIdentifier jobId);
    public ContainerParentJob(string command, string name, Guid instanceId);
    public ContainerParentJob(string command, string name, JobIdentifier jobId, string jobType);
    public ContainerParentJob(string command, string name, Guid instanceId, string jobType);
    public ContainerParentJob(string command, string name, string jobType);
    public void AddChildJob(Job2 childJob);
    public virtual bool get_HasMoreData();
    public virtual string get_StatusMessage();
    public virtual void StartJob();
    public virtual void StartJobAsync();
    public virtual void ResumeJob();
    public virtual void ResumeJobAsync();
    public virtual void SuspendJob();
    public virtual void SuspendJob(bool force, string reason);
    public virtual void SuspendJobAsync();
    public virtual void SuspendJobAsync(bool force, string reason);
    public virtual void StopJob();
    public virtual void StopJobAsync();
    public virtual void StopJob(bool force, string reason);
    public virtual void StopJobAsync(bool force, string reason);
    public virtual void UnblockJob();
    public virtual void UnblockJobAsync();
    protected virtual void Dispose(bool disposing);
    public virtual string get_Location();
}
public class System.Management.Automation.ContentCmdletProviderIntrinsics : object {
    public Collection`1<IContentReader> GetReader(string path);
    public Collection`1<IContentReader> GetReader(String[] path, bool force, bool literalPath);
    public Collection`1<IContentWriter> GetWriter(string path);
    public Collection`1<IContentWriter> GetWriter(String[] path, bool force, bool literalPath);
    public void Clear(string path);
    public void Clear(String[] path, bool force, bool literalPath);
}
public class System.Management.Automation.ContinueException : LoopFlowException {
}
public class System.Management.Automation.ConvertThroughString : PSTypeConverter {
    public virtual bool CanConvertFrom(object sourceValue, Type destinationType);
    public virtual object ConvertFrom(object sourceValue, Type destinationType, IFormatProvider formatProvider, bool ignoreCase);
    public virtual bool CanConvertTo(object sourceValue, Type destinationType);
    public virtual object ConvertTo(object sourceValue, Type destinationType, IFormatProvider formatProvider, bool ignoreCase);
}
public enum System.Management.Automation.CopyContainers : Enum {
    public int value__;
    public static CopyContainers CopyChildrenOfTargetContainer;
    public static CopyContainers CopyTargetContainer;
}
[AttributeUsageAttribute("384")]
public class System.Management.Automation.CredentialAttribute : ArgumentTransformationAttribute {
    public bool TransformNullOptionalParameters { get; }
    public virtual object Transform(EngineIntrinsics engineIntrinsics, object inputData);
    public virtual bool get_TransformNullOptionalParameters();
}
public abstract class System.Management.Automation.CustomPSSnapIn : PSSnapInInstaller {
    public Collection`1<CmdletConfigurationEntry> Cmdlets { get; }
    public Collection`1<FormatConfigurationEntry> Formats { get; }
    public Collection`1<ProviderConfigurationEntry> Providers { get; }
    public Collection`1<TypeConfigurationEntry> Types { get; }
    public virtual Collection`1<CmdletConfigurationEntry> get_Cmdlets();
    public virtual Collection`1<ProviderConfigurationEntry> get_Providers();
    public virtual Collection`1<TypeConfigurationEntry> get_Types();
    public virtual Collection`1<FormatConfigurationEntry> get_Formats();
}
public class System.Management.Automation.DataAddedEventArgs : EventArgs {
    public int Index { get; }
    public Guid PowerShellInstanceId { get; }
    public int get_Index();
    public Guid get_PowerShellInstanceId();
}
public class System.Management.Automation.DataAddingEventArgs : EventArgs {
    public object ItemAdded { get; }
    public Guid PowerShellInstanceId { get; }
    public object get_ItemAdded();
    public Guid get_PowerShellInstanceId();
}
public abstract class System.Management.Automation.Debugger : object {
    public DebugModes DebugMode { get; protected set; }
    protected bool DebuggerStopped { get; }
    public bool InBreakpoint { get; }
    public Guid InstanceId { get; }
    public bool IsActive { get; }
    public void add_DebuggerStop(EventHandler`1<DebuggerStopEventArgs> value);
    public void remove_DebuggerStop(EventHandler`1<DebuggerStopEventArgs> value);
    public void add_BreakpointUpdated(EventHandler`1<BreakpointUpdatedEventArgs> value);
    public void remove_BreakpointUpdated(EventHandler`1<BreakpointUpdatedEventArgs> value);
    protected bool get_DebuggerStopped();
    public DebugModes get_DebugMode();
    protected void set_DebugMode(DebugModes value);
    public virtual bool get_IsActive();
    public virtual Guid get_InstanceId();
    public virtual bool get_InBreakpoint();
    protected void RaiseDebuggerStopEvent(DebuggerStopEventArgs args);
    protected bool IsDebuggerStopEventSubscribed();
    protected void RaiseBreakpointUpdatedEvent(BreakpointUpdatedEventArgs args);
    protected bool IsDebuggerBreakpointUpdatedEventSubscribed();
    public abstract virtual DebuggerCommandResults ProcessCommand(PSCommand command, PSDataCollection`1<PSObject> output);
    public abstract virtual void SetDebuggerAction(DebuggerResumeAction resumeAction);
    public abstract virtual void StopProcessCommand();
    public abstract virtual DebuggerStopEventArgs GetDebuggerStopArgs();
    public virtual void SetParent(Debugger parent, IEnumerable`1<Breakpoint> breakPoints, Nullable`1<DebuggerResumeAction> startAction, PSHost host, PathInfo path);
    public virtual void SetParent(Debugger parent, IEnumerable`1<Breakpoint> breakPoints, Nullable`1<DebuggerResumeAction> startAction, PSHost host, PathInfo path, Dictionary`2<string, DebugSource> functionSourceMap);
    public virtual void SetDebugMode(DebugModes mode);
    public virtual IEnumerable`1<CallStackFrame> GetCallStack();
    public virtual void SetBreakpoints(IEnumerable`1<Breakpoint> breakpoints);
    public virtual void ResetCommandProcessorSource();
    public virtual void SetDebuggerStepMode(bool enabled);
}
public class System.Management.Automation.DebuggerCommandResults : object {
    public bool EvaluatedByDebugger { get; }
    public Nullable`1<DebuggerResumeAction> ResumeAction { get; }
    public DebuggerCommandResults(Nullable`1<DebuggerResumeAction> resumeAction, bool evaluatedByDebugger);
    public Nullable`1<DebuggerResumeAction> get_ResumeAction();
    public bool get_EvaluatedByDebugger();
}
public enum System.Management.Automation.DebuggerResumeAction : Enum {
    public int value__;
    public static DebuggerResumeAction Continue;
    public static DebuggerResumeAction StepInto;
    public static DebuggerResumeAction StepOut;
    public static DebuggerResumeAction StepOver;
    public static DebuggerResumeAction Stop;
}
public class System.Management.Automation.DebuggerStopEventArgs : EventArgs {
    public ReadOnlyCollection`1<Breakpoint> Breakpoints { get; }
    public InvocationInfo InvocationInfo { get; }
    public DebuggerResumeAction ResumeAction { get; public set; }
    public DebuggerStopEventArgs(InvocationInfo invocationInfo, Collection`1<Breakpoint> breakpoints, DebuggerResumeAction resumeAction);
    public InvocationInfo get_InvocationInfo();
    public ReadOnlyCollection`1<Breakpoint> get_Breakpoints();
    public DebuggerResumeAction get_ResumeAction();
    public void set_ResumeAction(DebuggerResumeAction value);
}
[FlagsAttribute]
public enum System.Management.Automation.DebugModes : Enum {
    public int value__;
    public static DebugModes Default;
    public static DebugModes LocalScript;
    public static DebugModes None;
    public static DebugModes RemoteScript;
}
public class System.Management.Automation.DebugRecord : InformationalRecord {
    public DebugRecord(string message);
    public DebugRecord(PSObject record);
}
public class System.Management.Automation.DebugSource : object {
    public string Script { get; }
    public string ScriptFile { get; }
    public string XamlDefinition { get; }
    public DebugSource(string script, string scriptFile, string xamlDefinition);
    public string get_Script();
    public string get_ScriptFile();
    public string get_XamlDefinition();
}
[DefaultMemberAttribute("Item")]
public class System.Management.Automation.DefaultParameterDictionary : Hashtable {
    public object Item { get; public set; }
    public DefaultParameterDictionary(IDictionary dictionary);
    public bool ChangeSinceLastCheck();
    public virtual bool Contains(object key);
    public virtual bool ContainsKey(object key);
    public virtual void Add(object key, object value);
    public virtual object get_Item(object key);
    public virtual void set_Item(object key, object value);
    public virtual void Remove(object key);
    public virtual void Clear();
}
public class System.Management.Automation.DisplayEntry : object {
    public string Value { get; }
    public DisplayEntryValueType ValueType { get; }
    public DisplayEntry(string value, DisplayEntryValueType type);
    public DisplayEntryValueType get_ValueType();
    public string get_Value();
    public virtual string ToString();
}
public enum System.Management.Automation.DisplayEntryValueType : Enum {
    public int value__;
    public static DisplayEntryValueType Property;
    public static DisplayEntryValueType ScriptBlock;
}
public class System.Management.Automation.DriveManagementIntrinsics : object {
    public PSDriveInfo Current { get; }
    public PSDriveInfo get_Current();
    public PSDriveInfo New(PSDriveInfo drive, string scope);
    public void Remove(string driveName, bool force, string scope);
    public PSDriveInfo Get(string driveName);
    public PSDriveInfo GetAtScope(string driveName, string scope);
    public Collection`1<PSDriveInfo> GetAll();
    public Collection`1<PSDriveInfo> GetAllAtScope(string scope);
    public Collection`1<PSDriveInfo> GetAllForProvider(string providerName);
}
public class System.Management.Automation.DriveNotFoundException : SessionStateException {
    public DriveNotFoundException(string message);
    public DriveNotFoundException(string message, Exception innerException);
    protected DriveNotFoundException(SerializationInfo info, StreamingContext context);
}
[AttributeUsageAttribute("4")]
public class System.Management.Automation.DscLocalConfigurationManagerAttribute : CmdletMetadataAttribute {
}
[AttributeUsageAttribute("384")]
public class System.Management.Automation.DscPropertyAttribute : CmdletMetadataAttribute {
    public bool Key { get; public set; }
    public bool Mandatory { get; public set; }
    public bool NotConfigurable { get; public set; }
    public bool get_Key();
    public void set_Key(bool value);
    public bool get_Mandatory();
    public void set_Mandatory(bool value);
    public bool get_NotConfigurable();
    public void set_NotConfigurable(bool value);
}
[AttributeUsageAttribute("4")]
public class System.Management.Automation.DscResourceAttribute : CmdletMetadataAttribute {
}
public class System.Management.Automation.DscResourceInfo : object {
    public string CompanyName { get; public set; }
    public string FriendlyName { get; public set; }
    public string HelpFile { get; }
    public ImplementedAsType ImplementedAs { get; public set; }
    public PSModuleInfo Module { get; }
    public string Name { get; }
    public string ParentPath { get; public set; }
    public string Path { get; public set; }
    public ReadOnlyCollection`1<DscResourcePropertyInfo> Properties { get; }
    public string ResourceType { get; public set; }
    public string get_Name();
    public string get_ResourceType();
    public void set_ResourceType(string value);
    public string get_FriendlyName();
    public void set_FriendlyName(string value);
    public string get_Path();
    public void set_Path(string value);
    public string get_ParentPath();
    public void set_ParentPath(string value);
    public ImplementedAsType get_ImplementedAs();
    public void set_ImplementedAs(ImplementedAsType value);
    public string get_CompanyName();
    public void set_CompanyName(string value);
    public ReadOnlyCollection`1<DscResourcePropertyInfo> get_Properties();
    public void UpdateProperties(IList`1<DscResourcePropertyInfo> properties);
    public PSModuleInfo get_Module();
    public string get_HelpFile();
}
public class System.Management.Automation.DscResourcePropertyInfo : object {
    public bool IsMandatory { get; public set; }
    public string Name { get; public set; }
    public string PropertyType { get; public set; }
    public ReadOnlyCollection`1<string> Values { get; }
    public string get_Name();
    public void set_Name(string value);
    public string get_PropertyType();
    public void set_PropertyType(string value);
    public bool get_IsMandatory();
    public void set_IsMandatory(bool value);
    public ReadOnlyCollection`1<string> get_Values();
}
[AttributeUsageAttribute("1")]
public class System.Management.Automation.DynamicClassImplementationAssemblyAttribute : Attribute {
}
public class System.Management.Automation.EngineIntrinsics : object {
    public PSEventManager Events { get; }
    public PSHost Host { get; }
    public CommandInvocationIntrinsics InvokeCommand { get; }
    public ProviderIntrinsics InvokeProvider { get; }
    public SessionState SessionState { get; }
    public PSHost get_Host();
    public PSEventManager get_Events();
    public ProviderIntrinsics get_InvokeProvider();
    public SessionState get_SessionState();
    public CommandInvocationIntrinsics get_InvokeCommand();
}
public enum System.Management.Automation.ErrorCategory : Enum {
    public int value__;
    public static ErrorCategory AuthenticationError;
    public static ErrorCategory CloseError;
    public static ErrorCategory ConnectionError;
    public static ErrorCategory DeadlockDetected;
    public static ErrorCategory DeviceError;
    public static ErrorCategory FromStdErr;
    public static ErrorCategory InvalidArgument;
    public static ErrorCategory InvalidData;
    public static ErrorCategory InvalidOperation;
    public static ErrorCategory InvalidResult;
    public static ErrorCategory InvalidType;
    public static ErrorCategory LimitsExceeded;
    public static ErrorCategory MetadataError;
    public static ErrorCategory NotEnabled;
    public static ErrorCategory NotImplemented;
    public static ErrorCategory NotInstalled;
    public static ErrorCategory NotSpecified;
    public static ErrorCategory ObjectNotFound;
    public static ErrorCategory OpenError;
    public static ErrorCategory OperationStopped;
    public static ErrorCategory OperationTimeout;
    public static ErrorCategory ParserError;
    public static ErrorCategory PermissionDenied;
    public static ErrorCategory ProtocolError;
    public static ErrorCategory QuotaExceeded;
    public static ErrorCategory ReadError;
    public static ErrorCategory ResourceBusy;
    public static ErrorCategory ResourceExists;
    public static ErrorCategory ResourceUnavailable;
    public static ErrorCategory SecurityError;
    public static ErrorCategory SyntaxError;
    public static ErrorCategory WriteError;
}
public class System.Management.Automation.ErrorCategoryInfo : object {
    public string Activity { get; public set; }
    public ErrorCategory Category { get; }
    public string Reason { get; public set; }
    public string TargetName { get; public set; }
    public string TargetType { get; public set; }
    public ErrorCategory get_Category();
    public string get_Activity();
    public void set_Activity(string value);
    public string get_Reason();
    public void set_Reason(string value);
    public string get_TargetName();
    public void set_TargetName(string value);
    public string get_TargetType();
    public void set_TargetType(string value);
    public string GetMessage();
    public string GetMessage(CultureInfo uiCultureInfo);
    public virtual string ToString();
}
public class System.Management.Automation.ErrorDetails : object {
    public string Message { get; }
    public string RecommendedAction { get; public set; }
    public ErrorDetails(string message);
    public ErrorDetails(Cmdlet cmdlet, string baseName, string resourceId, Object[] args);
    public ErrorDetails(IResourceSupplier resourceSupplier, string baseName, string resourceId, Object[] args);
    public ErrorDetails(Assembly assembly, string baseName, string resourceId, Object[] args);
    protected ErrorDetails(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_Message();
    public string get_RecommendedAction();
    public void set_RecommendedAction(string value);
    public virtual string ToString();
}
public class System.Management.Automation.ErrorRecord : object {
    public ErrorCategoryInfo CategoryInfo { get; }
    public ErrorDetails ErrorDetails { get; public set; }
    public Exception Exception { get; }
    public string FullyQualifiedErrorId { get; }
    public InvocationInfo InvocationInfo { get; }
    public ReadOnlyCollection`1<int> PipelineIterationInfo { get; }
    public string ScriptStackTrace { get; }
    public object TargetObject { get; }
    public ErrorRecord(Exception exception, string errorId, ErrorCategory errorCategory, object targetObject);
    protected ErrorRecord(SerializationInfo info, StreamingContext context);
    public ErrorRecord(ErrorRecord errorRecord, Exception replaceParentContainsErrorRecordException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public Exception get_Exception();
    public object get_TargetObject();
    public ErrorCategoryInfo get_CategoryInfo();
    public string get_FullyQualifiedErrorId();
    public ErrorDetails get_ErrorDetails();
    public void set_ErrorDetails(ErrorDetails value);
    public InvocationInfo get_InvocationInfo();
    public string get_ScriptStackTrace();
    public ReadOnlyCollection`1<int> get_PipelineIterationInfo();
    public virtual string ToString();
}
public class System.Management.Automation.ExitException : FlowControlException {
    public object Argument { get; }
    public object get_Argument();
}
public class System.Management.Automation.ExtendedTypeDefinition : object {
    public List`1<FormatViewDefinition> FormatViewDefinition { get; }
    public string TypeName { get; }
    public ExtendedTypeDefinition(string typeName, IEnumerable`1<FormatViewDefinition> viewDefinitions);
    public ExtendedTypeDefinition(string typeName);
    public string get_TypeName();
    public List`1<FormatViewDefinition> get_FormatViewDefinition();
    public virtual string ToString();
}
public class System.Management.Automation.ExtendedTypeSystemException : RuntimeException {
    public ExtendedTypeSystemException(string message);
    public ExtendedTypeSystemException(string message, Exception innerException);
    protected ExtendedTypeSystemException(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.ExternalScriptInfo : CommandInfo {
    public string Definition { get; }
    public Encoding OriginalEncoding { get; }
    public ReadOnlyCollection`1<PSTypeName> OutputType { get; }
    public string Path { get; }
    public ScriptBlock ScriptBlock { get; }
    public string ScriptContents { get; }
    public string Source { get; }
    public SessionStateEntryVisibility Visibility { get; public set; }
    public string get_Path();
    public virtual string get_Definition();
    public virtual string get_Source();
    public virtual SessionStateEntryVisibility get_Visibility();
    public virtual void set_Visibility(SessionStateEntryVisibility value);
    public sealed virtual ScriptBlock get_ScriptBlock();
    public void ValidateScriptInfo(PSHost host);
    public virtual ReadOnlyCollection`1<PSTypeName> get_OutputType();
    public string get_ScriptContents();
    public Encoding get_OriginalEncoding();
}
public class System.Management.Automation.FilterInfo : FunctionInfo {
}
public class System.Management.Automation.FlagsExpression`1 : object {
    public FlagsExpression`1(string expression);
    public FlagsExpression`1(Object[] expression);
    public bool Evaluate(T value);
}
public abstract class System.Management.Automation.FlowControlException : SystemException {
}
public class System.Management.Automation.FormatViewDefinition : object {
    public PSControl Control { get; }
    public string Name { get; }
    public FormatViewDefinition(string name, PSControl control);
    public string get_Name();
    public PSControl get_Control();
    public virtual string ToString();
}
public class System.Management.Automation.ForwardedEventArgs : EventArgs {
    public PSObject SerializedRemoteEventArgs { get; }
    public PSObject get_SerializedRemoteEventArgs();
}
public class System.Management.Automation.FunctionInfo : CommandInfo {
    public bool CmdletBinding { get; }
    public string DefaultParameterSet { get; }
    public string Definition { get; }
    public string Description { get; public set; }
    public string HelpFile { get; }
    public string Noun { get; }
    public ScopedItemOptions Options { get; public set; }
    public ReadOnlyCollection`1<PSTypeName> OutputType { get; }
    public ScriptBlock ScriptBlock { get; }
    public string Verb { get; }
    public sealed virtual ScriptBlock get_ScriptBlock();
    protected internal virtual void Update(FunctionInfo newFunction, bool force, ScopedItemOptions options, string helpFile);
    public bool get_CmdletBinding();
    public string get_DefaultParameterSet();
    public virtual string get_Definition();
    public ScopedItemOptions get_Options();
    public void set_Options(ScopedItemOptions value);
    public string get_Description();
    public void set_Description(string value);
    public string get_Verb();
    public string get_Noun();
    public string get_HelpFile();
    public virtual ReadOnlyCollection`1<PSTypeName> get_OutputType();
}
public class System.Management.Automation.GetSymmetricEncryptionKey : MulticastDelegate {
    public GetSymmetricEncryptionKey(object object, IntPtr method);
    public virtual bool Invoke(StreamingContext context, Byte[]& key, Byte[]& iv);
    public virtual IAsyncResult BeginInvoke(StreamingContext context, Byte[]& key, Byte[]& iv, AsyncCallback callback, object object);
    public virtual bool EndInvoke(Byte[]& key, Byte[]& iv, IAsyncResult result);
}
public class System.Management.Automation.GettingValueExceptionEventArgs : EventArgs {
    public Exception Exception { get; }
    public bool ShouldThrow { get; public set; }
    public object ValueReplacement { get; public set; }
    public bool get_ShouldThrow();
    public void set_ShouldThrow(bool value);
    public Exception get_Exception();
    public object get_ValueReplacement();
    public void set_ValueReplacement(object value);
}
public class System.Management.Automation.GetValueException : ExtendedTypeSystemException {
    public GetValueException(string message);
    public GetValueException(string message, Exception innerException);
    protected GetValueException(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.GetValueInvocationException : GetValueException {
    public GetValueInvocationException(string message);
    public GetValueInvocationException(string message, Exception innerException);
    protected GetValueInvocationException(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.HaltCommandException : SystemException {
    public HaltCommandException(string message);
    public HaltCommandException(string message, Exception innerException);
    protected HaltCommandException(SerializationInfo info, StreamingContext context);
}
[AttributeUsageAttribute("992")]
public class System.Management.Automation.HiddenAttribute : ParsingBaseAttribute {
}
public class System.Management.Automation.Host.BufferCell : ValueType {
    private int __Asmmeta_Private_Field;
    public ConsoleColor BackgroundColor { get; public set; }
    public BufferCellType BufferCellType { get; public set; }
    public char Character { get; public set; }
    public ConsoleColor ForegroundColor { get; public set; }
    public BufferCell(char character, ConsoleColor foreground, ConsoleColor background, BufferCellType bufferCellType);
    public char get_Character();
    public void set_Character(char value);
    public ConsoleColor get_ForegroundColor();
    public void set_ForegroundColor(ConsoleColor value);
    public ConsoleColor get_BackgroundColor();
    public void set_BackgroundColor(ConsoleColor value);
    public BufferCellType get_BufferCellType();
    public void set_BufferCellType(BufferCellType value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(BufferCell first, BufferCell second);
    public static bool op_Inequality(BufferCell first, BufferCell second);
}
public enum System.Management.Automation.Host.BufferCellType : Enum {
    public int value__;
    public static BufferCellType Complete;
    public static BufferCellType Leading;
    public static BufferCellType Trailing;
}
public class System.Management.Automation.Host.ChoiceDescription : object {
    public string HelpMessage { get; public set; }
    public string Label { get; }
    public ChoiceDescription(string label);
    public ChoiceDescription(string label, string helpMessage);
    public string get_Label();
    public string get_HelpMessage();
    public void set_HelpMessage(string value);
}
[FlagsAttribute]
public enum System.Management.Automation.Host.ControlKeyStates : Enum {
    public int value__;
    public static ControlKeyStates CapsLockOn;
    public static ControlKeyStates EnhancedKey;
    public static ControlKeyStates LeftAltPressed;
    public static ControlKeyStates LeftCtrlPressed;
    public static ControlKeyStates NumLockOn;
    public static ControlKeyStates RightAltPressed;
    public static ControlKeyStates RightCtrlPressed;
    public static ControlKeyStates ScrollLockOn;
    public static ControlKeyStates ShiftPressed;
}
public class System.Management.Automation.Host.Coordinates : ValueType {
    private int __Asmmeta_Private_Field;
    public int X { get; public set; }
    public int Y { get; public set; }
    public Coordinates(int x, int y);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Coordinates first, Coordinates second);
    public static bool op_Inequality(Coordinates first, Coordinates second);
}
public class System.Management.Automation.Host.FieldDescription : object {
    public Collection`1<Attribute> Attributes { get; }
    public PSObject DefaultValue { get; public set; }
    public string HelpMessage { get; public set; }
    public bool IsMandatory { get; public set; }
    public string Label { get; public set; }
    public string Name { get; }
    public string ParameterAssemblyFullName { get; }
    public string ParameterTypeFullName { get; }
    public string ParameterTypeName { get; }
    public FieldDescription(string name);
    public string get_Name();
    public void SetParameterType(Type parameterType);
    public string get_ParameterTypeName();
    public string get_ParameterTypeFullName();
    public string get_ParameterAssemblyFullName();
    public string get_Label();
    public void set_Label(string value);
    public string get_HelpMessage();
    public void set_HelpMessage(string value);
    public bool get_IsMandatory();
    public void set_IsMandatory(bool value);
    public PSObject get_DefaultValue();
    public void set_DefaultValue(PSObject value);
    public Collection`1<Attribute> get_Attributes();
}
public class System.Management.Automation.Host.HostException : RuntimeException {
    public HostException(string message);
    public HostException(string message, Exception innerException);
    public HostException(string message, Exception innerException, string errorId, ErrorCategory errorCategory);
    protected HostException(SerializationInfo info, StreamingContext context);
}
public interface System.Management.Automation.Host.IHostSupportsInteractiveSession {
    public bool IsRunspacePushed { get; }
    public Runspace Runspace { get; }
    public abstract virtual void PushRunspace(Runspace runspace);
    public abstract virtual void PopRunspace();
    public abstract virtual bool get_IsRunspacePushed();
    public abstract virtual Runspace get_Runspace();
}
public interface System.Management.Automation.Host.IHostUISupportsMultipleChoiceSelection {
    public abstract virtual Collection`1<int> PromptForChoice(string caption, string message, Collection`1<ChoiceDescription> choices, IEnumerable`1<int> defaultChoices);
}
public class System.Management.Automation.Host.KeyInfo : ValueType {
    private int __Asmmeta_Private_Field;
    public char Character { get; public set; }
    public ControlKeyStates ControlKeyState { get; public set; }
    public bool KeyDown { get; public set; }
    public int VirtualKeyCode { get; public set; }
    public KeyInfo(int virtualKeyCode, char ch, ControlKeyStates controlKeyState, bool keyDown);
    public int get_VirtualKeyCode();
    public void set_VirtualKeyCode(int value);
    public char get_Character();
    public void set_Character(char value);
    public ControlKeyStates get_ControlKeyState();
    public void set_ControlKeyState(ControlKeyStates value);
    public bool get_KeyDown();
    public void set_KeyDown(bool value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(KeyInfo first, KeyInfo second);
    public static bool op_Inequality(KeyInfo first, KeyInfo second);
}
public class System.Management.Automation.Host.PromptingException : HostException {
    public PromptingException(string message);
    public PromptingException(string message, Exception innerException);
    public PromptingException(string message, Exception innerException, string errorId, ErrorCategory errorCategory);
    protected PromptingException(SerializationInfo info, StreamingContext context);
}
public abstract class System.Management.Automation.Host.PSHost : object {
    public CultureInfo CurrentCulture { get; }
    public CultureInfo CurrentUICulture { get; }
    public bool DebuggerEnabled { get; public set; }
    public Guid InstanceId { get; }
    public string Name { get; }
    public PSObject PrivateData { get; }
    public PSHostUserInterface UI { get; }
    public Version Version { get; }
    public abstract virtual string get_Name();
    public abstract virtual Version get_Version();
    public abstract virtual Guid get_InstanceId();
    public abstract virtual PSHostUserInterface get_UI();
    public abstract virtual CultureInfo get_CurrentCulture();
    public abstract virtual CultureInfo get_CurrentUICulture();
    public abstract virtual void SetShouldExit(int exitCode);
    public abstract virtual void EnterNestedPrompt();
    public abstract virtual void ExitNestedPrompt();
    public virtual PSObject get_PrivateData();
    public abstract virtual void NotifyBeginApplication();
    public abstract virtual void NotifyEndApplication();
    public virtual bool get_DebuggerEnabled();
    public virtual void set_DebuggerEnabled(bool value);
}
public abstract class System.Management.Automation.Host.PSHostRawUserInterface : object {
    public ConsoleColor BackgroundColor { get; public set; }
    public Size BufferSize { get; public set; }
    public Coordinates CursorPosition { get; public set; }
    public int CursorSize { get; public set; }
    public ConsoleColor ForegroundColor { get; public set; }
    public bool KeyAvailable { get; }
    public Size MaxPhysicalWindowSize { get; }
    public Size MaxWindowSize { get; }
    public Coordinates WindowPosition { get; public set; }
    public Size WindowSize { get; public set; }
    public string WindowTitle { get; public set; }
    public abstract virtual ConsoleColor get_ForegroundColor();
    public abstract virtual void set_ForegroundColor(ConsoleColor value);
    public abstract virtual ConsoleColor get_BackgroundColor();
    public abstract virtual void set_BackgroundColor(ConsoleColor value);
    public abstract virtual Coordinates get_CursorPosition();
    public abstract virtual void set_CursorPosition(Coordinates value);
    public abstract virtual Coordinates get_WindowPosition();
    public abstract virtual void set_WindowPosition(Coordinates value);
    public abstract virtual int get_CursorSize();
    public abstract virtual void set_CursorSize(int value);
    public abstract virtual Size get_BufferSize();
    public abstract virtual void set_BufferSize(Size value);
    public abstract virtual Size get_WindowSize();
    public abstract virtual void set_WindowSize(Size value);
    public abstract virtual Size get_MaxWindowSize();
    public abstract virtual Size get_MaxPhysicalWindowSize();
    public KeyInfo ReadKey();
    public abstract virtual KeyInfo ReadKey(ReadKeyOptions options);
    public abstract virtual void FlushInputBuffer();
    public abstract virtual bool get_KeyAvailable();
    public abstract virtual string get_WindowTitle();
    public abstract virtual void set_WindowTitle(string value);
    public abstract virtual void SetBufferContents(Coordinates origin, BufferCell[0...,0...] contents);
    public abstract virtual void SetBufferContents(Rectangle rectangle, BufferCell fill);
    public abstract virtual BufferCell[0...,0...] GetBufferContents(Rectangle rectangle);
    public abstract virtual void ScrollBufferContents(Rectangle source, Coordinates destination, Rectangle clip, BufferCell fill);
    public virtual int LengthInBufferCells(string source, int offset);
    public virtual int LengthInBufferCells(string source);
    public virtual int LengthInBufferCells(char source);
    public BufferCell[0...,0...] NewBufferCellArray(String[] contents, ConsoleColor foregroundColor, ConsoleColor backgroundColor);
    public BufferCell[0...,0...] NewBufferCellArray(int width, int height, BufferCell contents);
    public BufferCell[0...,0...] NewBufferCellArray(Size size, BufferCell contents);
}
public abstract class System.Management.Automation.Host.PSHostUserInterface : object {
    public PSHostRawUserInterface RawUI { get; }
    public abstract virtual PSHostRawUserInterface get_RawUI();
    public abstract virtual string ReadLine();
    public abstract virtual SecureString ReadLineAsSecureString();
    public abstract virtual void Write(string value);
    public abstract virtual void Write(ConsoleColor foregroundColor, ConsoleColor backgroundColor, string value);
    public virtual void WriteLine();
    public abstract virtual void WriteLine(string value);
    public virtual void WriteLine(ConsoleColor foregroundColor, ConsoleColor backgroundColor, string value);
    public abstract virtual void WriteErrorLine(string value);
    public abstract virtual void WriteDebugLine(string message);
    public abstract virtual void WriteProgress(long sourceId, ProgressRecord record);
    public abstract virtual void WriteVerboseLine(string message);
    public abstract virtual void WriteWarningLine(string message);
    public virtual void WriteInformation(InformationRecord record);
    public abstract virtual Dictionary`2<string, PSObject> Prompt(string caption, string message, Collection`1<FieldDescription> descriptions);
    public abstract virtual PSCredential PromptForCredential(string caption, string message, string userName, string targetName);
    public abstract virtual PSCredential PromptForCredential(string caption, string message, string userName, string targetName, PSCredentialTypes allowedCredentialTypes, PSCredentialUIOptions options);
    public abstract virtual int PromptForChoice(string caption, string message, Collection`1<ChoiceDescription> choices, int defaultChoice);
}
[FlagsAttribute]
public enum System.Management.Automation.Host.ReadKeyOptions : Enum {
    public int value__;
    public static ReadKeyOptions AllowCtrlC;
    public static ReadKeyOptions IncludeKeyDown;
    public static ReadKeyOptions IncludeKeyUp;
    public static ReadKeyOptions NoEcho;
}
public class System.Management.Automation.Host.Rectangle : ValueType {
    private int __Asmmeta_Private_Field;
    public int Bottom { get; public set; }
    public int Left { get; public set; }
    public int Right { get; public set; }
    public int Top { get; public set; }
    public Rectangle(int left, int top, int right, int bottom);
    public Rectangle(Coordinates upperLeft, Coordinates lowerRight);
    public int get_Left();
    public void set_Left(int value);
    public int get_Top();
    public void set_Top(int value);
    public int get_Right();
    public void set_Right(int value);
    public int get_Bottom();
    public void set_Bottom(int value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Rectangle first, Rectangle second);
    public static bool op_Inequality(Rectangle first, Rectangle second);
}
public class System.Management.Automation.Host.Size : ValueType {
    private int __Asmmeta_Private_Field;
    public int Height { get; public set; }
    public int Width { get; public set; }
    public Size(int width, int height);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Size first, Size second);
    public static bool op_Inequality(Size first, Size second);
}
public class System.Management.Automation.HostInformationMessage : object {
    public Nullable`1<ConsoleColor> BackgroundColor { get; public set; }
    public Nullable`1<ConsoleColor> ForegroundColor { get; public set; }
    public string Message { get; public set; }
    public Nullable`1<bool> NoNewLine { get; public set; }
    public string get_Message();
    public void set_Message(string value);
    public Nullable`1<bool> get_NoNewLine();
    public void set_NoNewLine(Nullable`1<bool> value);
    public Nullable`1<ConsoleColor> get_ForegroundColor();
    public void set_ForegroundColor(Nullable`1<ConsoleColor> value);
    public Nullable`1<ConsoleColor> get_BackgroundColor();
    public void set_BackgroundColor(Nullable`1<ConsoleColor> value);
    public virtual string ToString();
}
public static class System.Management.Automation.HostUtilities : object {
    public static string CreatePSEditFunction;
    public static string PSEditFunction;
    public static string RemoteSessionOpenFileEvent;
    public static string RemovePSEditFunction;
}
public interface System.Management.Automation.IArgumentCompleter {
    public abstract virtual IEnumerable`1<CompletionResult> CompleteArgument(string commandName, string parameterName, string wordToComplete, CommandAst commandAst, IDictionary fakeBoundParameters);
}
public interface System.Management.Automation.IBackgroundDispatcher {
    public abstract virtual bool QueueUserWorkItem(WaitCallback callback);
    public abstract virtual bool QueueUserWorkItem(WaitCallback callback, object state);
    public abstract virtual IAsyncResult BeginInvoke(WaitCallback callback, object state, AsyncCallback completionCallback, object asyncState);
    public abstract virtual void EndInvoke(IAsyncResult asyncResult);
}
public interface System.Management.Automation.ICommandRuntime {
    public PSTransactionContext CurrentPSTransaction { get; }
    public PSHost Host { get; }
    public abstract virtual PSHost get_Host();
    public abstract virtual void WriteDebug(string text);
    public abstract virtual void WriteError(ErrorRecord errorRecord);
    public abstract virtual void WriteObject(object sendToPipeline);
    public abstract virtual void WriteObject(object sendToPipeline, bool enumerateCollection);
    public abstract virtual void WriteProgress(ProgressRecord progressRecord);
    public abstract virtual void WriteProgress(long sourceId, ProgressRecord progressRecord);
    public abstract virtual void WriteVerbose(string text);
    public abstract virtual void WriteWarning(string text);
    public abstract virtual void WriteCommandDetail(string text);
    public abstract virtual bool ShouldProcess(string target);
    public abstract virtual bool ShouldProcess(string target, string action);
    public abstract virtual bool ShouldProcess(string verboseDescription, string verboseWarning, string caption);
    public abstract virtual bool ShouldProcess(string verboseDescription, string verboseWarning, string caption, ShouldProcessReason& shouldProcessReason);
    public abstract virtual bool ShouldContinue(string query, string caption);
    public abstract virtual bool ShouldContinue(string query, string caption, Boolean& yesToAll, Boolean& noToAll);
    public abstract virtual bool TransactionAvailable();
    public abstract virtual PSTransactionContext get_CurrentPSTransaction();
    public abstract virtual void ThrowTerminatingError(ErrorRecord errorRecord);
}
public interface System.Management.Automation.ICommandRuntime2 {
    public abstract virtual void WriteInformation(InformationRecord informationRecord);
    public abstract virtual bool ShouldContinue(string query, string caption, bool hasSecurityImpact, Boolean& yesToAll, Boolean& noToAll);
}
public interface System.Management.Automation.IContainsErrorRecord {
    public ErrorRecord ErrorRecord { get; }
    public abstract virtual ErrorRecord get_ErrorRecord();
}
public interface System.Management.Automation.IDynamicParameters {
    public abstract virtual object GetDynamicParameters();
}
public interface System.Management.Automation.IJobDebugger {
    public Debugger Debugger { get; }
    public bool IsAsync { get; public set; }
    public abstract virtual Debugger get_Debugger();
    public abstract virtual bool get_IsAsync();
    public abstract virtual void set_IsAsync(bool value);
}
public interface System.Management.Automation.IModuleAssemblyCleanup {
    public abstract virtual void OnRemove(PSModuleInfo psModuleInfo);
}
public interface System.Management.Automation.IModuleAssemblyInitializer {
    public abstract virtual void OnImport();
}
public enum System.Management.Automation.ImplementedAsType : Enum {
    public int value__;
    public static ImplementedAsType Binary;
    public static ImplementedAsType Composite;
    public static ImplementedAsType None;
    public static ImplementedAsType PowerShell;
}
public class System.Management.Automation.IncompleteParseException : ParseException {
    protected IncompleteParseException(SerializationInfo info, StreamingContext context);
    public IncompleteParseException(string message);
    public IncompleteParseException(string message, Exception innerException);
}
public abstract class System.Management.Automation.InformationalRecord : object {
    public InvocationInfo InvocationInfo { get; }
    public string Message { get; public set; }
    public ReadOnlyCollection`1<int> PipelineIterationInfo { get; }
    public string get_Message();
    public void set_Message(string value);
    public InvocationInfo get_InvocationInfo();
    public ReadOnlyCollection`1<int> get_PipelineIterationInfo();
    public virtual string ToString();
}
public class System.Management.Automation.InformationRecord : object {
    public string Computer { get; public set; }
    public UInt32 ManagedThreadId { get; public set; }
    public object MessageData { get; }
    public UInt32 NativeThreadId { get; public set; }
    public UInt32 ProcessId { get; public set; }
    public string Source { get; public set; }
    public List`1<string> Tags { get; }
    public DateTime TimeGenerated { get; public set; }
    public string User { get; public set; }
    public InformationRecord(object messageData, string source);
    public object get_MessageData();
    public string get_Source();
    public void set_Source(string value);
    public DateTime get_TimeGenerated();
    public void set_TimeGenerated(DateTime value);
    public List`1<string> get_Tags();
    public string get_User();
    public void set_User(string value);
    public string get_Computer();
    public void set_Computer(string value);
    public UInt32 get_ProcessId();
    public void set_ProcessId(UInt32 value);
    public UInt32 get_NativeThreadId();
    public void set_NativeThreadId(UInt32 value);
    public UInt32 get_ManagedThreadId();
    public void set_ManagedThreadId(UInt32 value);
    public virtual string ToString();
}
public static class System.Management.Automation.Internal.AlternateDataStreamUtilities : object {
}
public static class System.Management.Automation.Internal.AutomationNull : object {
    public static PSObject Value { get; }
    public static PSObject get_Value();
}
[AttributeUsageAttribute("32767")]
public abstract class System.Management.Automation.Internal.CmdletMetadataAttribute : Attribute {
}
public class System.Management.Automation.Internal.CommonParameters : object {
    public SwitchParameter Debug { get; public set; }
    public ActionPreference ErrorAction { get; public set; }
    public string ErrorVariable { get; public set; }
    public ActionPreference InformationAction { get; public set; }
    public string InformationVariable { get; public set; }
    public int OutBuffer { get; public set; }
    public string OutVariable { get; public set; }
    public string PipelineVariable { get; public set; }
    public SwitchParameter Verbose { get; public set; }
    public ActionPreference WarningAction { get; public set; }
    public string WarningVariable { get; public set; }
    public SwitchParameter get_Verbose();
    public void set_Verbose(SwitchParameter value);
    public SwitchParameter get_Debug();
    public void set_Debug(SwitchParameter value);
    public ActionPreference get_ErrorAction();
    public void set_ErrorAction(ActionPreference value);
    public ActionPreference get_WarningAction();
    public void set_WarningAction(ActionPreference value);
    public ActionPreference get_InformationAction();
    public void set_InformationAction(ActionPreference value);
    public string get_ErrorVariable();
    public void set_ErrorVariable(string value);
    public string get_WarningVariable();
    public void set_WarningVariable(string value);
    public string get_InformationVariable();
    public void set_InformationVariable(string value);
    public string get_OutVariable();
    public void set_OutVariable(string value);
    public int get_OutBuffer();
    public void set_OutBuffer(int value);
    public string get_PipelineVariable();
    public void set_PipelineVariable(string value);
}
public static class System.Management.Automation.Internal.DebuggerUtils : object {
    public static string GetPSCallStackOverrideFunction;
    public static string RemoveVariableFunction;
    public static string SetVariableFunction;
    public static bool ShouldAddCommandToHistory(string command);
    public static IEnumerable`1<string> GetWorkflowDebuggerFunctions();
    public static void StartMonitoringRunspace(Debugger debugger, PSMonitorRunspaceInfo runspaceInfo);
    public static void EndMonitoringRunspace(Debugger debugger, PSMonitorRunspaceInfo runspaceInfo);
}
public interface System.Management.Automation.Internal.IAstToWorkflowConverter {
    public abstract virtual List`1<ParseError> ValidateAst(FunctionDefinitionAst ast);
    public abstract virtual List`1<WorkflowInfo> CompileWorkflows(ScriptBlockAst ast, PSModuleInfo definingModule);
    public abstract virtual List`1<WorkflowInfo> CompileWorkflows(ScriptBlockAst ast, PSModuleInfo definingModule, InitialSessionState initialSessionState, ParseException& parsingErrors);
    public abstract virtual List`1<WorkflowInfo> CompileWorkflows(ScriptBlockAst ast, PSModuleInfo definingModule, string rootWorkflowName);
    public abstract virtual List`1<WorkflowInfo> CompileWorkflows(ScriptBlockAst ast, PSModuleInfo definingModule, InitialSessionState initialSessionState, ParseException& parsingErrors, string rootWorkflowName);
    public abstract virtual WorkflowInfo CompileWorkflow(string name, string definition, InitialSessionState initialSessionState);
}
public abstract class System.Management.Automation.Internal.InternalCommand : object {
    public CommandOrigin CommandOrigin { get; }
    public CommandOrigin get_CommandOrigin();
}
public static class System.Management.Automation.Internal.InternalTestHooks : object {
    public static void SetTestHook(string property, bool value);
}
[AttributeUsageAttribute("32767")]
public abstract class System.Management.Automation.Internal.ParsingBaseAttribute : CmdletMetadataAttribute {
}
public class System.Management.Automation.Internal.PSEmbeddedMonitorRunspaceInfo : PSMonitorRunspaceInfo {
    public PowerShell Command { get; }
    public Guid ParentDebuggerId { get; }
    public PSEmbeddedMonitorRunspaceInfo(Runspace runspace, PSMonitorRunspaceType runspaceType, PowerShell command, Guid parentDebuggerId);
    public PowerShell get_Command();
    public Guid get_ParentDebuggerId();
}
public abstract class System.Management.Automation.Internal.PSMonitorRunspaceInfo : object {
    public Runspace Runspace { get; }
    public PSMonitorRunspaceType RunspaceType { get; }
    protected PSMonitorRunspaceInfo(Runspace runspace, PSMonitorRunspaceType runspaceType);
    public Runspace get_Runspace();
    public PSMonitorRunspaceType get_RunspaceType();
}
public enum System.Management.Automation.Internal.PSMonitorRunspaceType : Enum {
    public int value__;
    public static PSMonitorRunspaceType InvokeCommand;
    public static PSMonitorRunspaceType Standalone;
    public static PSMonitorRunspaceType WorkflowInlineScript;
}
public class System.Management.Automation.Internal.PSStandaloneMonitorRunspaceInfo : PSMonitorRunspaceInfo {
    public PSStandaloneMonitorRunspaceInfo(Runspace runspace);
}
public class System.Management.Automation.Internal.ShouldProcessParameters : object {
    public SwitchParameter Confirm { get; public set; }
    public SwitchParameter WhatIf { get; public set; }
    public SwitchParameter get_WhatIf();
    public void set_WhatIf(SwitchParameter value);
    public SwitchParameter get_Confirm();
    public void set_Confirm(SwitchParameter value);
}
public class System.Management.Automation.Internal.TransactionParameters : object {
    public SwitchParameter UseTransaction { get; public set; }
    public SwitchParameter get_UseTransaction();
    public void set_UseTransaction(SwitchParameter value);
}
public class System.Management.Automation.InvalidJobStateException : SystemException {
    public JobState CurrentState { get; }
    public InvalidJobStateException(string message);
    public InvalidJobStateException(string message, Exception innerException);
    public InvalidJobStateException(JobState currentState, string actionMessage);
    protected InvalidJobStateException(SerializationInfo info, StreamingContext context);
    public JobState get_CurrentState();
}
public class System.Management.Automation.InvalidPowerShellStateException : SystemException {
    public PSInvocationState CurrentState { get; }
    public InvalidPowerShellStateException(string message);
    public InvalidPowerShellStateException(string message, Exception innerException);
    protected InvalidPowerShellStateException(SerializationInfo info, StreamingContext context);
    public PSInvocationState get_CurrentState();
}
public class System.Management.Automation.InvocationInfo : object {
    public Dictionary`2<string, object> BoundParameters { get; }
    public CommandOrigin CommandOrigin { get; }
    public IScriptExtent DisplayScriptPosition { get; public set; }
    public bool ExpectingInput { get; }
    public long HistoryId { get; }
    public string InvocationName { get; }
    public string Line { get; }
    public CommandInfo MyCommand { get; }
    public int OffsetInLine { get; }
    public string PSCommandPath { get; }
    public string PSScriptRoot { get; }
    public int PipelineLength { get; }
    public int PipelinePosition { get; }
    public string PositionMessage { get; }
    public int ScriptLineNumber { get; }
    public string ScriptName { get; }
    public List`1<object> UnboundArguments { get; }
    public CommandInfo get_MyCommand();
    public Dictionary`2<string, object> get_BoundParameters();
    public List`1<object> get_UnboundArguments();
    public int get_ScriptLineNumber();
    public int get_OffsetInLine();
    public long get_HistoryId();
    public string get_ScriptName();
    public string get_Line();
    public string get_PositionMessage();
    public string get_PSScriptRoot();
    public string get_PSCommandPath();
    public string get_InvocationName();
    public int get_PipelineLength();
    public int get_PipelinePosition();
    public bool get_ExpectingInput();
    public CommandOrigin get_CommandOrigin();
    public IScriptExtent get_DisplayScriptPosition();
    public void set_DisplayScriptPosition(IScriptExtent value);
    public static InvocationInfo Create(CommandInfo commandInfo, IScriptExtent scriptPosition);
}
public interface System.Management.Automation.IResourceSupplier {
    public abstract virtual string GetResourceString(string baseName, string resourceId);
}
public class System.Management.Automation.ItemCmdletProviderIntrinsics : object {
    public Collection`1<PSObject> Get(string path);
    public Collection`1<PSObject> Get(String[] path, bool force, bool literalPath);
    public Collection`1<PSObject> Set(string path, object value);
    public Collection`1<PSObject> Set(String[] path, object value, bool force, bool literalPath);
    public Collection`1<PSObject> Clear(string path);
    public Collection`1<PSObject> Clear(String[] path, bool force, bool literalPath);
    public void Invoke(string path);
    public void Invoke(String[] path, bool literalPath);
    public Collection`1<PSObject> Rename(string path, string newName);
    public Collection`1<PSObject> Rename(string path, string newName, bool force);
    public Collection`1<PSObject> New(string path, string name, string itemTypeName, object content);
    public Collection`1<PSObject> New(String[] path, string name, string itemTypeName, object content, bool force);
    public void Remove(string path, bool recurse);
    public void Remove(String[] path, bool recurse, bool force, bool literalPath);
    public Collection`1<PSObject> Copy(string path, string destinationPath, bool recurse, CopyContainers copyContainers);
    public Collection`1<PSObject> Copy(String[] path, string destinationPath, bool recurse, CopyContainers copyContainers, bool force, bool literalPath);
    public Collection`1<PSObject> Move(string path, string destination);
    public Collection`1<PSObject> Move(String[] path, string destination, bool force, bool literalPath);
    public bool Exists(string path);
    public bool Exists(string path, bool force, bool literalPath);
    public bool IsContainer(string path);
}
public class System.Management.Automation.ItemNotFoundException : SessionStateException {
    public ItemNotFoundException(string message);
    public ItemNotFoundException(string message, Exception innerException);
    protected ItemNotFoundException(SerializationInfo info, StreamingContext context);
}
public abstract class System.Management.Automation.Job : object {
    public IList`1<Job> ChildJobs { get; }
    public string Command { get; }
    public PSDataCollection`1<DebugRecord> Debug { get; public set; }
    public PSDataCollection`1<ErrorRecord> Error { get; public set; }
    public WaitHandle Finished { get; }
    public bool HasMoreData { get; }
    public int Id { get; }
    public PSDataCollection`1<InformationRecord> Information { get; public set; }
    public Guid InstanceId { get; }
    public JobStateInfo JobStateInfo { get; }
    public string Location { get; }
    public string Name { get; public set; }
    public PSDataCollection`1<PSObject> Output { get; public set; }
    public Nullable`1<DateTime> PSBeginTime { get; protected set; }
    public Nullable`1<DateTime> PSEndTime { get; protected set; }
    public string PSJobTypeName { get; protected internal set; }
    public PSDataCollection`1<ProgressRecord> Progress { get; public set; }
    public string StatusMessage { get; }
    public PSDataCollection`1<VerboseRecord> Verbose { get; public set; }
    public PSDataCollection`1<WarningRecord> Warning { get; public set; }
    protected Job(string command);
    protected Job(string command, string name);
    protected Job(string command, string name, IList`1<Job> childJobs);
    protected Job(string command, string name, JobIdentifier token);
    protected Job(string command, string name, Guid instanceId);
    public string get_Command();
    public JobStateInfo get_JobStateInfo();
    public WaitHandle get_Finished();
    public Guid get_InstanceId();
    public int get_Id();
    public string get_Name();
    public void set_Name(string value);
    public IList`1<Job> get_ChildJobs();
    public abstract virtual string get_StatusMessage();
    public abstract virtual bool get_HasMoreData();
    public Nullable`1<DateTime> get_PSBeginTime();
    protected void set_PSBeginTime(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_PSEndTime();
    protected void set_PSEndTime(Nullable`1<DateTime> value);
    public string get_PSJobTypeName();
    protected internal void set_PSJobTypeName(string value);
    protected virtual void DoLoadJobStreams();
    protected virtual void DoUnloadJobStreams();
    public void LoadJobStreams();
    public void UnloadJobStreams();
    public PSDataCollection`1<PSObject> get_Output();
    public void set_Output(PSDataCollection`1<PSObject> value);
    public PSDataCollection`1<ErrorRecord> get_Error();
    public void set_Error(PSDataCollection`1<ErrorRecord> value);
    public PSDataCollection`1<ProgressRecord> get_Progress();
    public void set_Progress(PSDataCollection`1<ProgressRecord> value);
    public PSDataCollection`1<VerboseRecord> get_Verbose();
    public void set_Verbose(PSDataCollection`1<VerboseRecord> value);
    public PSDataCollection`1<DebugRecord> get_Debug();
    public void set_Debug(PSDataCollection`1<DebugRecord> value);
    public PSDataCollection`1<WarningRecord> get_Warning();
    public void set_Warning(PSDataCollection`1<WarningRecord> value);
    public PSDataCollection`1<InformationRecord> get_Information();
    public void set_Information(PSDataCollection`1<InformationRecord> value);
    public abstract virtual string get_Location();
    public void add_StateChanged(EventHandler`1<JobStateEventArgs> value);
    public void remove_StateChanged(EventHandler`1<JobStateEventArgs> value);
    protected void SetJobState(JobState state);
    public abstract virtual void StopJob();
    protected string AutoGenerateJobName();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public abstract class System.Management.Automation.Job2 : Job {
    public List`1<CommandParameterCollection> StartParameters { get; public set; }
    protected object SyncRoot { get; }
    protected Job2(string command);
    protected Job2(string command, string name);
    protected Job2(string command, string name, IList`1<Job> childJobs);
    protected Job2(string command, string name, JobIdentifier token);
    protected Job2(string command, string name, Guid instanceId);
    public List`1<CommandParameterCollection> get_StartParameters();
    public void set_StartParameters(List`1<CommandParameterCollection> value);
    protected object get_SyncRoot();
    protected void SetJobState(JobState state, Exception reason);
    public abstract virtual void StartJob();
    public abstract virtual void StartJobAsync();
    public void add_StartJobCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_StartJobCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    protected virtual void OnStartJobCompleted(AsyncCompletedEventArgs eventArgs);
    protected virtual void OnStopJobCompleted(AsyncCompletedEventArgs eventArgs);
    protected virtual void OnSuspendJobCompleted(AsyncCompletedEventArgs eventArgs);
    protected virtual void OnResumeJobCompleted(AsyncCompletedEventArgs eventArgs);
    protected virtual void OnUnblockJobCompleted(AsyncCompletedEventArgs eventArgs);
    public abstract virtual void StopJobAsync();
    public void add_StopJobCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_StopJobCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public abstract virtual void SuspendJob();
    public abstract virtual void SuspendJobAsync();
    public void add_SuspendJobCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_SuspendJobCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public abstract virtual void ResumeJob();
    public abstract virtual void ResumeJobAsync();
    public void add_ResumeJobCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_ResumeJobCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public abstract virtual void UnblockJob();
    public abstract virtual void UnblockJobAsync();
    public abstract virtual void StopJob(bool force, string reason);
    public abstract virtual void StopJobAsync(bool force, string reason);
    public abstract virtual void SuspendJob(bool force, string reason);
    public abstract virtual void SuspendJobAsync(bool force, string reason);
    public void add_UnblockJobCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_UnblockJobCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
}
public class System.Management.Automation.JobDataAddedEventArgs : EventArgs {
    public PowerShellStreamType DataType { get; }
    public int Index { get; }
    public Job SourceJob { get; }
    public Job get_SourceJob();
    public PowerShellStreamType get_DataType();
    public int get_Index();
}
public class System.Management.Automation.JobDefinition : object {
    public string Command { get; }
    public CommandInfo CommandInfo { get; }
    public Guid InstanceId { get; public set; }
    public Type JobSourceAdapterType { get; }
    public string JobSourceAdapterTypeName { get; public set; }
    public string ModuleName { get; public set; }
    public string Name { get; public set; }
    public JobDefinition(Type jobSourceAdapterType, string command, string name);
    protected JobDefinition(SerializationInfo info, StreamingContext context);
    public string get_Name();
    public void set_Name(string value);
    public Type get_JobSourceAdapterType();
    public string get_ModuleName();
    public void set_ModuleName(string value);
    public string get_JobSourceAdapterTypeName();
    public void set_JobSourceAdapterTypeName(string value);
    public string get_Command();
    public Guid get_InstanceId();
    public void set_InstanceId(Guid value);
    public virtual void Save(Stream stream);
    public virtual void Load(Stream stream);
    public CommandInfo get_CommandInfo();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.JobFailedException : SystemException {
    public ScriptExtent DisplayScriptPosition { get; }
    public string Message { get; }
    public Exception Reason { get; }
    public JobFailedException(string message);
    public JobFailedException(string message, Exception innerException);
    public JobFailedException(Exception innerException, ScriptExtent displayScriptPosition);
    protected JobFailedException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public Exception get_Reason();
    public ScriptExtent get_DisplayScriptPosition();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public class System.Management.Automation.JobIdentifier : object {
}
public class System.Management.Automation.JobInvocationInfo : object {
    public string Command { get; public set; }
    public JobDefinition Definition { get; public set; }
    public Guid InstanceId { get; }
    public string Name { get; public set; }
    public List`1<CommandParameterCollection> Parameters { get; }
    public JobInvocationInfo(JobDefinition definition, Dictionary`2<string, object> parameters);
    public JobInvocationInfo(JobDefinition definition, IEnumerable`1<Dictionary`2<string, object>> parameterCollectionList);
    public JobInvocationInfo(JobDefinition definition, CommandParameterCollection parameters);
    public JobInvocationInfo(JobDefinition definition, IEnumerable`1<CommandParameterCollection> parameters);
    protected JobInvocationInfo(SerializationInfo info, StreamingContext context);
    public string get_Name();
    public void set_Name(string value);
    public string get_Command();
    public void set_Command(string value);
    public JobDefinition get_Definition();
    public void set_Definition(JobDefinition value);
    public List`1<CommandParameterCollection> get_Parameters();
    public Guid get_InstanceId();
    public virtual void Save(Stream stream);
    public virtual void Load(Stream stream);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.JobManager : object {
    public bool IsRegistered(string typeName);
    public Job2 NewJob(JobDefinition definition);
    public Job2 NewJob(JobInvocationInfo specification);
    public void PersistJob(Job2 job, JobDefinition definition);
}
public class System.Management.Automation.JobRepository : Repository`1<Job> {
    public List`1<Job> Jobs { get; }
    public List`1<Job> get_Jobs();
    public Job GetJob(Guid instanceId);
    protected virtual Guid GetKey(Job item);
}
public abstract class System.Management.Automation.JobSourceAdapter : object {
    public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    protected JobIdentifier RetrieveJobIdForReuse(Guid instanceId);
    public void StoreJobIdForReuse(Job2 job, bool recurse);
    public Job2 NewJob(JobDefinition definition);
    public virtual Job2 NewJob(string definitionName, string definitionPath);
    public abstract virtual Job2 NewJob(JobInvocationInfo specification);
    public abstract virtual IList`1<Job2> GetJobs();
    public abstract virtual IList`1<Job2> GetJobsByName(string name, bool recurse);
    public abstract virtual IList`1<Job2> GetJobsByCommand(string command, bool recurse);
    public abstract virtual Job2 GetJobByInstanceId(Guid instanceId, bool recurse);
    public abstract virtual Job2 GetJobBySessionId(int id, bool recurse);
    public abstract virtual IList`1<Job2> GetJobsByState(JobState state, bool recurse);
    public abstract virtual IList`1<Job2> GetJobsByFilter(Dictionary`2<string, object> filter, bool recurse);
    public abstract virtual void RemoveJob(Job2 job);
    public virtual void PersistJob(Job2 job);
}
public enum System.Management.Automation.JobState : Enum {
    public int value__;
    public static JobState AtBreakpoint;
    public static JobState Blocked;
    public static JobState Completed;
    public static JobState Disconnected;
    public static JobState Failed;
    public static JobState NotStarted;
    public static JobState Running;
    public static JobState Stopped;
    public static JobState Stopping;
    public static JobState Suspended;
    public static JobState Suspending;
}
public class System.Management.Automation.JobStateEventArgs : EventArgs {
    public JobStateInfo JobStateInfo { get; }
    public JobStateInfo PreviousJobStateInfo { get; }
    public JobStateEventArgs(JobStateInfo jobStateInfo);
    public JobStateEventArgs(JobStateInfo jobStateInfo, JobStateInfo previousJobStateInfo);
    public JobStateInfo get_JobStateInfo();
    public JobStateInfo get_PreviousJobStateInfo();
}
public class System.Management.Automation.JobStateInfo : object {
    public Exception Reason { get; }
    public JobState State { get; }
    public JobStateInfo(JobState state);
    public JobStateInfo(JobState state, Exception reason);
    public JobState get_State();
    public Exception get_Reason();
    public virtual string ToString();
}
public enum System.Management.Automation.JobThreadOptions : Enum {
    public int value__;
    public static JobThreadOptions Default;
    public static JobThreadOptions UseNewThread;
    public static JobThreadOptions UseThreadPoolThread;
}
public class System.Management.Automation.Language.ArrayExpressionAst : ExpressionAst {
    public Type StaticType { get; }
    public StatementBlockAst SubExpression { get; }
    public ArrayExpressionAst(IScriptExtent extent, StatementBlockAst statementBlock);
    public StatementBlockAst get_SubExpression();
    public virtual Ast Copy();
    public virtual Type get_StaticType();
}
public class System.Management.Automation.Language.ArrayLiteralAst : ExpressionAst {
    public ReadOnlyCollection`1<ExpressionAst> Elements { get; }
    public Type StaticType { get; }
    public ArrayLiteralAst(IScriptExtent extent, IList`1<ExpressionAst> elements);
    public ReadOnlyCollection`1<ExpressionAst> get_Elements();
    public virtual Ast Copy();
    public virtual Type get_StaticType();
}
public class System.Management.Automation.Language.ArrayTypeName : object {
    public string AssemblyName { get; }
    public ITypeName ElementType { get; }
    public IScriptExtent Extent { get; }
    public string FullName { get; }
    public bool IsArray { get; }
    public bool IsGeneric { get; }
    public string Name { get; }
    public int Rank { get; }
    public ArrayTypeName(IScriptExtent extent, ITypeName elementType, int rank);
    public sealed virtual string get_FullName();
    public sealed virtual string get_Name();
    public sealed virtual string get_AssemblyName();
    public sealed virtual bool get_IsArray();
    public sealed virtual bool get_IsGeneric();
    public ITypeName get_ElementType();
    public int get_Rank();
    public sealed virtual IScriptExtent get_Extent();
    public sealed virtual Type GetReflectionType();
    public sealed virtual Type GetReflectionAttributeType();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Management.Automation.Language.AssignmentStatementAst : PipelineBaseAst {
    public IScriptExtent ErrorPosition { get; }
    public ExpressionAst Left { get; }
    public TokenKind Operator { get; }
    public StatementAst Right { get; }
    public AssignmentStatementAst(IScriptExtent extent, ExpressionAst left, TokenKind operator, StatementAst right, IScriptExtent errorPosition);
    public ExpressionAst get_Left();
    public TokenKind get_Operator();
    public StatementAst get_Right();
    public IScriptExtent get_ErrorPosition();
    public virtual Ast Copy();
    public IEnumerable`1<ExpressionAst> GetAssignmentTargets();
}
public abstract class System.Management.Automation.Language.Ast : object {
    public IScriptExtent Extent { get; }
    public Ast Parent { get; }
    protected Ast(IScriptExtent extent);
    public IScriptExtent get_Extent();
    public Ast get_Parent();
    public object Visit(ICustomAstVisitor astVisitor);
    public void Visit(AstVisitor astVisitor);
    public IEnumerable`1<Ast> FindAll(Func`2<Ast, bool> predicate, bool searchNestedScriptBlocks);
    public Ast Find(Func`2<Ast, bool> predicate, bool searchNestedScriptBlocks);
    public virtual string ToString();
    public abstract virtual Ast Copy();
    public object SafeGetValue();
}
public enum System.Management.Automation.Language.AstVisitAction : Enum {
    public int value__;
    public static AstVisitAction Continue;
    public static AstVisitAction SkipChildren;
    public static AstVisitAction StopVisit;
}
public abstract class System.Management.Automation.Language.AstVisitor : object {
    public virtual AstVisitAction VisitErrorStatement(ErrorStatementAst errorStatementAst);
    public virtual AstVisitAction VisitErrorExpression(ErrorExpressionAst errorExpressionAst);
    public virtual AstVisitAction VisitScriptBlock(ScriptBlockAst scriptBlockAst);
    public virtual AstVisitAction VisitParamBlock(ParamBlockAst paramBlockAst);
    public virtual AstVisitAction VisitNamedBlock(NamedBlockAst namedBlockAst);
    public virtual AstVisitAction VisitTypeConstraint(TypeConstraintAst typeConstraintAst);
    public virtual AstVisitAction VisitAttribute(AttributeAst attributeAst);
    public virtual AstVisitAction VisitParameter(ParameterAst parameterAst);
    public virtual AstVisitAction VisitTypeExpression(TypeExpressionAst typeExpressionAst);
    public virtual AstVisitAction VisitFunctionDefinition(FunctionDefinitionAst functionDefinitionAst);
    public virtual AstVisitAction VisitStatementBlock(StatementBlockAst statementBlockAst);
    public virtual AstVisitAction VisitIfStatement(IfStatementAst ifStmtAst);
    public virtual AstVisitAction VisitTrap(TrapStatementAst trapStatementAst);
    public virtual AstVisitAction VisitSwitchStatement(SwitchStatementAst switchStatementAst);
    public virtual AstVisitAction VisitDataStatement(DataStatementAst dataStatementAst);
    public virtual AstVisitAction VisitForEachStatement(ForEachStatementAst forEachStatementAst);
    public virtual AstVisitAction VisitDoWhileStatement(DoWhileStatementAst doWhileStatementAst);
    public virtual AstVisitAction VisitForStatement(ForStatementAst forStatementAst);
    public virtual AstVisitAction VisitWhileStatement(WhileStatementAst whileStatementAst);
    public virtual AstVisitAction VisitCatchClause(CatchClauseAst catchClauseAst);
    public virtual AstVisitAction VisitTryStatement(TryStatementAst tryStatementAst);
    public virtual AstVisitAction VisitBreakStatement(BreakStatementAst breakStatementAst);
    public virtual AstVisitAction VisitContinueStatement(ContinueStatementAst continueStatementAst);
    public virtual AstVisitAction VisitReturnStatement(ReturnStatementAst returnStatementAst);
    public virtual AstVisitAction VisitExitStatement(ExitStatementAst exitStatementAst);
    public virtual AstVisitAction VisitThrowStatement(ThrowStatementAst throwStatementAst);
    public virtual AstVisitAction VisitDoUntilStatement(DoUntilStatementAst doUntilStatementAst);
    public virtual AstVisitAction VisitAssignmentStatement(AssignmentStatementAst assignmentStatementAst);
    public virtual AstVisitAction VisitPipeline(PipelineAst pipelineAst);
    public virtual AstVisitAction VisitCommand(CommandAst commandAst);
    public virtual AstVisitAction VisitCommandExpression(CommandExpressionAst commandExpressionAst);
    public virtual AstVisitAction VisitCommandParameter(CommandParameterAst commandParameterAst);
    public virtual AstVisitAction VisitMergingRedirection(MergingRedirectionAst redirectionAst);
    public virtual AstVisitAction VisitFileRedirection(FileRedirectionAst redirectionAst);
    public virtual AstVisitAction VisitBinaryExpression(BinaryExpressionAst binaryExpressionAst);
    public virtual AstVisitAction VisitUnaryExpression(UnaryExpressionAst unaryExpressionAst);
    public virtual AstVisitAction VisitConvertExpression(ConvertExpressionAst convertExpressionAst);
    public virtual AstVisitAction VisitConstantExpression(ConstantExpressionAst constantExpressionAst);
    public virtual AstVisitAction VisitStringConstantExpression(StringConstantExpressionAst stringConstantExpressionAst);
    public virtual AstVisitAction VisitSubExpression(SubExpressionAst subExpressionAst);
    public virtual AstVisitAction VisitUsingExpression(UsingExpressionAst usingExpressionAst);
    public virtual AstVisitAction VisitVariableExpression(VariableExpressionAst variableExpressionAst);
    public virtual AstVisitAction VisitMemberExpression(MemberExpressionAst memberExpressionAst);
    public virtual AstVisitAction VisitInvokeMemberExpression(InvokeMemberExpressionAst methodCallAst);
    public virtual AstVisitAction VisitArrayExpression(ArrayExpressionAst arrayExpressionAst);
    public virtual AstVisitAction VisitArrayLiteral(ArrayLiteralAst arrayLiteralAst);
    public virtual AstVisitAction VisitHashtable(HashtableAst hashtableAst);
    public virtual AstVisitAction VisitScriptBlockExpression(ScriptBlockExpressionAst scriptBlockExpressionAst);
    public virtual AstVisitAction VisitParenExpression(ParenExpressionAst parenExpressionAst);
    public virtual AstVisitAction VisitExpandableStringExpression(ExpandableStringExpressionAst expandableStringExpressionAst);
    public virtual AstVisitAction VisitIndexExpression(IndexExpressionAst indexExpressionAst);
    public virtual AstVisitAction VisitAttributedExpression(AttributedExpressionAst attributedExpressionAst);
    public virtual AstVisitAction VisitBlockStatement(BlockStatementAst blockStatementAst);
    public virtual AstVisitAction VisitNamedAttributeArgument(NamedAttributeArgumentAst namedAttributeArgumentAst);
}
public abstract class System.Management.Automation.Language.AstVisitor2 : AstVisitor {
    public virtual AstVisitAction VisitTypeDefinition(TypeDefinitionAst typeDefinitionAst);
    public virtual AstVisitAction VisitPropertyMember(PropertyMemberAst propertyMemberAst);
    public virtual AstVisitAction VisitFunctionMember(FunctionMemberAst functionMemberAst);
    public virtual AstVisitAction VisitBaseCtorInvokeMemberExpression(BaseCtorInvokeMemberExpressionAst baseCtorInvokeMemberExpressionAst);
    public virtual AstVisitAction VisitUsingStatement(UsingStatementAst usingStatementAst);
    public virtual AstVisitAction VisitConfigurationDefinition(ConfigurationDefinitionAst configurationDefinitionAst);
    public virtual AstVisitAction VisitDynamicKeywordStatement(DynamicKeywordStatementAst dynamicKeywordStatementAst);
}
public class System.Management.Automation.Language.AttributeAst : AttributeBaseAst {
    public ReadOnlyCollection`1<NamedAttributeArgumentAst> NamedArguments { get; }
    public ReadOnlyCollection`1<ExpressionAst> PositionalArguments { get; }
    public AttributeAst(IScriptExtent extent, ITypeName typeName, IEnumerable`1<ExpressionAst> positionalArguments, IEnumerable`1<NamedAttributeArgumentAst> namedArguments);
    public ReadOnlyCollection`1<ExpressionAst> get_PositionalArguments();
    public ReadOnlyCollection`1<NamedAttributeArgumentAst> get_NamedArguments();
    public virtual Ast Copy();
}
public abstract class System.Management.Automation.Language.AttributeBaseAst : Ast {
    public ITypeName TypeName { get; }
    protected AttributeBaseAst(IScriptExtent extent, ITypeName typeName);
    public ITypeName get_TypeName();
}
public class System.Management.Automation.Language.AttributedExpressionAst : ExpressionAst {
    public AttributeBaseAst Attribute { get; }
    public ExpressionAst Child { get; }
    public AttributedExpressionAst(IScriptExtent extent, AttributeBaseAst attribute, ExpressionAst child);
    public ExpressionAst get_Child();
    public AttributeBaseAst get_Attribute();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.BaseCtorInvokeMemberExpressionAst : InvokeMemberExpressionAst {
    public BaseCtorInvokeMemberExpressionAst(IScriptExtent baseKeywordExtent, IScriptExtent baseCallExtent, IEnumerable`1<ExpressionAst> arguments);
}
public class System.Management.Automation.Language.BinaryExpressionAst : ExpressionAst {
    public IScriptExtent ErrorPosition { get; }
    public ExpressionAst Left { get; }
    public TokenKind Operator { get; }
    public ExpressionAst Right { get; }
    public Type StaticType { get; }
    public BinaryExpressionAst(IScriptExtent extent, ExpressionAst left, TokenKind operator, ExpressionAst right, IScriptExtent errorPosition);
    public TokenKind get_Operator();
    public ExpressionAst get_Left();
    public ExpressionAst get_Right();
    public IScriptExtent get_ErrorPosition();
    public virtual Ast Copy();
    public virtual Type get_StaticType();
}
public class System.Management.Automation.Language.BlockStatementAst : StatementAst {
    public StatementBlockAst Body { get; }
    public Token Kind { get; }
    public BlockStatementAst(IScriptExtent extent, Token kind, StatementBlockAst body);
    public StatementBlockAst get_Body();
    public Token get_Kind();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.BreakStatementAst : StatementAst {
    public ExpressionAst Label { get; }
    public BreakStatementAst(IScriptExtent extent, ExpressionAst label);
    public ExpressionAst get_Label();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.CatchClauseAst : Ast {
    public StatementBlockAst Body { get; }
    public ReadOnlyCollection`1<TypeConstraintAst> CatchTypes { get; }
    public bool IsCatchAll { get; }
    public CatchClauseAst(IScriptExtent extent, IEnumerable`1<TypeConstraintAst> catchTypes, StatementBlockAst body);
    public ReadOnlyCollection`1<TypeConstraintAst> get_CatchTypes();
    public bool get_IsCatchAll();
    public StatementBlockAst get_Body();
    public virtual Ast Copy();
}
public static class System.Management.Automation.Language.CodeGeneration : object {
    public static string EscapeSingleQuotedStringContent(string value);
    public static string EscapeBlockCommentContent(string value);
    public static string EscapeFormatStringContent(string value);
    public static string EscapeVariableName(string value);
}
public class System.Management.Automation.Language.CommandAst : CommandBaseAst {
    public ReadOnlyCollection`1<CommandElementAst> CommandElements { get; }
    public DynamicKeyword DefiningKeyword { get; public set; }
    public TokenKind InvocationOperator { get; }
    public CommandAst(IScriptExtent extent, IEnumerable`1<CommandElementAst> commandElements, TokenKind invocationOperator, IEnumerable`1<RedirectionAst> redirections);
    public ReadOnlyCollection`1<CommandElementAst> get_CommandElements();
    public TokenKind get_InvocationOperator();
    public string GetCommandName();
    public DynamicKeyword get_DefiningKeyword();
    public void set_DefiningKeyword(DynamicKeyword value);
    public virtual Ast Copy();
}
public abstract class System.Management.Automation.Language.CommandBaseAst : StatementAst {
    public ReadOnlyCollection`1<RedirectionAst> Redirections { get; }
    protected CommandBaseAst(IScriptExtent extent, IEnumerable`1<RedirectionAst> redirections);
    public ReadOnlyCollection`1<RedirectionAst> get_Redirections();
}
public abstract class System.Management.Automation.Language.CommandElementAst : Ast {
    protected CommandElementAst(IScriptExtent extent);
}
public class System.Management.Automation.Language.CommandExpressionAst : CommandBaseAst {
    public ExpressionAst Expression { get; }
    public CommandExpressionAst(IScriptExtent extent, ExpressionAst expression, IEnumerable`1<RedirectionAst> redirections);
    public ExpressionAst get_Expression();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.CommandParameterAst : CommandElementAst {
    public ExpressionAst Argument { get; }
    public IScriptExtent ErrorPosition { get; }
    public string ParameterName { get; }
    public CommandParameterAst(IScriptExtent extent, string parameterName, ExpressionAst argument, IScriptExtent errorPosition);
    public string get_ParameterName();
    public ExpressionAst get_Argument();
    public IScriptExtent get_ErrorPosition();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.CommentHelpInfo : object {
    public string Component { get; }
    public string Description { get; }
    public ReadOnlyCollection`1<string> Examples { get; }
    public string ForwardHelpCategory { get; }
    public string ForwardHelpTargetName { get; }
    public string Functionality { get; }
    public ReadOnlyCollection`1<string> Inputs { get; }
    public ReadOnlyCollection`1<string> Links { get; }
    public string MamlHelpFile { get; }
    public string Notes { get; }
    public ReadOnlyCollection`1<string> Outputs { get; }
    public IDictionary`2<string, string> Parameters { get; }
    public string RemoteHelpRunspace { get; }
    public string Role { get; }
    public string Synopsis { get; }
    public string get_Synopsis();
    public string get_Description();
    public string get_Notes();
    public IDictionary`2<string, string> get_Parameters();
    public ReadOnlyCollection`1<string> get_Links();
    public ReadOnlyCollection`1<string> get_Examples();
    public ReadOnlyCollection`1<string> get_Inputs();
    public ReadOnlyCollection`1<string> get_Outputs();
    public string get_Component();
    public string get_Role();
    public string get_Functionality();
    public string get_ForwardHelpTargetName();
    public string get_ForwardHelpCategory();
    public string get_RemoteHelpRunspace();
    public string get_MamlHelpFile();
    public string GetCommentBlock();
}
public class System.Management.Automation.Language.ConfigurationDefinitionAst : StatementAst {
    public ScriptBlockExpressionAst Body { get; }
    public ConfigurationType ConfigurationType { get; }
    public ExpressionAst InstanceName { get; }
    public ConfigurationDefinitionAst(IScriptExtent extent, ScriptBlockExpressionAst body, ConfigurationType type, ExpressionAst instanceName);
    public ScriptBlockExpressionAst get_Body();
    public ConfigurationType get_ConfigurationType();
    public ExpressionAst get_InstanceName();
    public virtual Ast Copy();
}
public enum System.Management.Automation.Language.ConfigurationType : Enum {
    public int value__;
    public static ConfigurationType Meta;
    public static ConfigurationType Resource;
}
public class System.Management.Automation.Language.ConstantExpressionAst : ExpressionAst {
    public Type StaticType { get; }
    public object Value { get; }
    public ConstantExpressionAst(IScriptExtent extent, object value);
    public object get_Value();
    public virtual Ast Copy();
    public virtual Type get_StaticType();
}
public class System.Management.Automation.Language.ContinueStatementAst : StatementAst {
    public ExpressionAst Label { get; }
    public ContinueStatementAst(IScriptExtent extent, ExpressionAst label);
    public ExpressionAst get_Label();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.ConvertExpressionAst : AttributedExpressionAst {
    public Type StaticType { get; }
    public TypeConstraintAst Type { get; }
    public ConvertExpressionAst(IScriptExtent extent, TypeConstraintAst typeConstraint, ExpressionAst child);
    public TypeConstraintAst get_Type();
    public virtual Ast Copy();
    public virtual Type get_StaticType();
}
public class System.Management.Automation.Language.DataStatementAst : StatementAst {
    public StatementBlockAst Body { get; }
    public ReadOnlyCollection`1<ExpressionAst> CommandsAllowed { get; }
    public string Variable { get; }
    public DataStatementAst(IScriptExtent extent, string variableName, IEnumerable`1<ExpressionAst> commandsAllowed, StatementBlockAst body);
    public string get_Variable();
    public ReadOnlyCollection`1<ExpressionAst> get_CommandsAllowed();
    public StatementBlockAst get_Body();
    public virtual Ast Copy();
}
public abstract class System.Management.Automation.Language.DefaultCustomAstVisitor : object {
    public virtual object VisitErrorStatement(ErrorStatementAst errorStatementAst);
    public virtual object VisitErrorExpression(ErrorExpressionAst errorExpressionAst);
    public virtual object VisitScriptBlock(ScriptBlockAst scriptBlockAst);
    public virtual object VisitParamBlock(ParamBlockAst paramBlockAst);
    public virtual object VisitNamedBlock(NamedBlockAst namedBlockAst);
    public virtual object VisitTypeConstraint(TypeConstraintAst typeConstraintAst);
    public virtual object VisitAttribute(AttributeAst attributeAst);
    public virtual object VisitNamedAttributeArgument(NamedAttributeArgumentAst namedAttributeArgumentAst);
    public virtual object VisitParameter(ParameterAst parameterAst);
    public virtual object VisitStatementBlock(StatementBlockAst statementBlockAst);
    public virtual object VisitIfStatement(IfStatementAst ifStmtAst);
    public virtual object VisitTrap(TrapStatementAst trapStatementAst);
    public virtual object VisitSwitchStatement(SwitchStatementAst switchStatementAst);
    public virtual object VisitDataStatement(DataStatementAst dataStatementAst);
    public virtual object VisitForEachStatement(ForEachStatementAst forEachStatementAst);
    public virtual object VisitDoWhileStatement(DoWhileStatementAst doWhileStatementAst);
    public virtual object VisitForStatement(ForStatementAst forStatementAst);
    public virtual object VisitWhileStatement(WhileStatementAst whileStatementAst);
    public virtual object VisitCatchClause(CatchClauseAst catchClauseAst);
    public virtual object VisitTryStatement(TryStatementAst tryStatementAst);
    public virtual object VisitBreakStatement(BreakStatementAst breakStatementAst);
    public virtual object VisitContinueStatement(ContinueStatementAst continueStatementAst);
    public virtual object VisitReturnStatement(ReturnStatementAst returnStatementAst);
    public virtual object VisitExitStatement(ExitStatementAst exitStatementAst);
    public virtual object VisitThrowStatement(ThrowStatementAst throwStatementAst);
    public virtual object VisitDoUntilStatement(DoUntilStatementAst doUntilStatementAst);
    public virtual object VisitAssignmentStatement(AssignmentStatementAst assignmentStatementAst);
    public virtual object VisitPipeline(PipelineAst pipelineAst);
    public virtual object VisitCommand(CommandAst commandAst);
    public virtual object VisitCommandExpression(CommandExpressionAst commandExpressionAst);
    public virtual object VisitCommandParameter(CommandParameterAst commandParameterAst);
    public virtual object VisitFileRedirection(FileRedirectionAst fileRedirectionAst);
    public virtual object VisitMergingRedirection(MergingRedirectionAst mergingRedirectionAst);
    public virtual object VisitBinaryExpression(BinaryExpressionAst binaryExpressionAst);
    public virtual object VisitUnaryExpression(UnaryExpressionAst unaryExpressionAst);
    public virtual object VisitConvertExpression(ConvertExpressionAst convertExpressionAst);
    public virtual object VisitConstantExpression(ConstantExpressionAst constantExpressionAst);
    public virtual object VisitStringConstantExpression(StringConstantExpressionAst stringConstantExpressionAst);
    public virtual object VisitSubExpression(SubExpressionAst subExpressionAst);
    public virtual object VisitUsingExpression(UsingExpressionAst usingExpressionAst);
    public virtual object VisitVariableExpression(VariableExpressionAst variableExpressionAst);
    public virtual object VisitTypeExpression(TypeExpressionAst typeExpressionAst);
    public virtual object VisitMemberExpression(MemberExpressionAst memberExpressionAst);
    public virtual object VisitInvokeMemberExpression(InvokeMemberExpressionAst invokeMemberExpressionAst);
    public virtual object VisitArrayExpression(ArrayExpressionAst arrayExpressionAst);
    public virtual object VisitArrayLiteral(ArrayLiteralAst arrayLiteralAst);
    public virtual object VisitHashtable(HashtableAst hashtableAst);
    public virtual object VisitParenExpression(ParenExpressionAst parenExpressionAst);
    public virtual object VisitExpandableStringExpression(ExpandableStringExpressionAst expandableStringExpressionAst);
    public virtual object VisitIndexExpression(IndexExpressionAst indexExpressionAst);
    public virtual object VisitAttributedExpression(AttributedExpressionAst attributedExpressionAst);
    public virtual object VisitBlockStatement(BlockStatementAst blockStatementAst);
    public virtual object VisitFunctionDefinition(FunctionDefinitionAst functionDefinitionAst);
    public virtual object VisitScriptBlockExpression(ScriptBlockExpressionAst scriptBlockExpressionAst);
}
public abstract class System.Management.Automation.Language.DefaultCustomAstVisitor2 : DefaultCustomAstVisitor {
    public virtual object VisitPropertyMember(PropertyMemberAst propertyMemberAst);
    public virtual object VisitBaseCtorInvokeMemberExpression(BaseCtorInvokeMemberExpressionAst baseCtorInvokeMemberExpressionAst);
    public virtual object VisitUsingStatement(UsingStatementAst usingStatement);
    public virtual object VisitConfigurationDefinition(ConfigurationDefinitionAst configurationAst);
    public virtual object VisitDynamicKeywordStatement(DynamicKeywordStatementAst dynamicKeywordAst);
    public virtual object VisitTypeDefinition(TypeDefinitionAst typeDefinitionAst);
    public virtual object VisitFunctionMember(FunctionMemberAst functionMemberAst);
}
public class System.Management.Automation.Language.DoUntilStatementAst : LoopStatementAst {
    public DoUntilStatementAst(IScriptExtent extent, string label, PipelineBaseAst condition, StatementBlockAst body);
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.DoWhileStatementAst : LoopStatementAst {
    public DoWhileStatementAst(IScriptExtent extent, string label, PipelineBaseAst condition, StatementBlockAst body);
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.DynamicKeyword : object {
    public DynamicKeywordBodyMode BodyMode { get; public set; }
    public bool DirectCall { get; public set; }
    public bool HasReservedProperties { get; public set; }
    public string ImplementingModule { get; public set; }
    public Version ImplementingModuleVersion { get; public set; }
    public bool IsReservedKeyword { get; public set; }
    public string Keyword { get; public set; }
    public bool MetaStatement { get; public set; }
    public DynamicKeywordNameMode NameMode { get; public set; }
    public Dictionary`2<string, DynamicKeywordParameter> Parameters { get; }
    public Func`2<DynamicKeywordStatementAst, ParseError[]> PostParse { get; public set; }
    public Func`2<DynamicKeyword, ParseError[]> PreParse { get; public set; }
    public Dictionary`2<string, DynamicKeywordProperty> Properties { get; }
    public string ResourceName { get; public set; }
    public Func`2<DynamicKeywordStatementAst, ParseError[]> SemanticCheck { get; public set; }
    public static void Reset();
    public static void Push();
    public static void Pop();
    public static DynamicKeyword GetKeyword(string name);
    public static List`1<DynamicKeyword> GetKeyword();
    public static bool ContainsKeyword(string name);
    public static void AddKeyword(DynamicKeyword keywordToAdd);
    public static void RemoveKeyword(string name);
    public DynamicKeyword Copy();
    public string get_ImplementingModule();
    public void set_ImplementingModule(string value);
    public Version get_ImplementingModuleVersion();
    public void set_ImplementingModuleVersion(Version value);
    public string get_Keyword();
    public void set_Keyword(string value);
    public string get_ResourceName();
    public void set_ResourceName(string value);
    public DynamicKeywordBodyMode get_BodyMode();
    public void set_BodyMode(DynamicKeywordBodyMode value);
    public bool get_DirectCall();
    public void set_DirectCall(bool value);
    public DynamicKeywordNameMode get_NameMode();
    public void set_NameMode(DynamicKeywordNameMode value);
    public bool get_MetaStatement();
    public void set_MetaStatement(bool value);
    public bool get_IsReservedKeyword();
    public void set_IsReservedKeyword(bool value);
    public bool get_HasReservedProperties();
    public void set_HasReservedProperties(bool value);
    public Dictionary`2<string, DynamicKeywordProperty> get_Properties();
    public Dictionary`2<string, DynamicKeywordParameter> get_Parameters();
    public Func`2<DynamicKeyword, ParseError[]> get_PreParse();
    public void set_PreParse(Func`2<DynamicKeyword, ParseError[]> value);
    public Func`2<DynamicKeywordStatementAst, ParseError[]> get_PostParse();
    public void set_PostParse(Func`2<DynamicKeywordStatementAst, ParseError[]> value);
    public Func`2<DynamicKeywordStatementAst, ParseError[]> get_SemanticCheck();
    public void set_SemanticCheck(Func`2<DynamicKeywordStatementAst, ParseError[]> value);
}
public enum System.Management.Automation.Language.DynamicKeywordBodyMode : Enum {
    public int value__;
    public static DynamicKeywordBodyMode Command;
    public static DynamicKeywordBodyMode Hashtable;
    public static DynamicKeywordBodyMode ScriptBlock;
}
public enum System.Management.Automation.Language.DynamicKeywordNameMode : Enum {
    public int value__;
    public static DynamicKeywordNameMode NameRequired;
    public static DynamicKeywordNameMode NoName;
    public static DynamicKeywordNameMode OptionalName;
    public static DynamicKeywordNameMode SimpleNameRequired;
    public static DynamicKeywordNameMode SimpleOptionalName;
}
public class System.Management.Automation.Language.DynamicKeywordParameter : DynamicKeywordProperty {
    public bool Switch { get; public set; }
    public bool get_Switch();
    public void set_Switch(bool value);
}
public class System.Management.Automation.Language.DynamicKeywordProperty : object {
    public List`1<string> Attributes { get; }
    public bool IsKey { get; public set; }
    public bool Mandatory { get; public set; }
    public string Name { get; public set; }
    public Tuple`2<int, int> Range { get; public set; }
    public string TypeConstraint { get; public set; }
    public Dictionary`2<string, string> ValueMap { get; }
    public List`1<string> Values { get; }
    public string get_Name();
    public void set_Name(string value);
    public string get_TypeConstraint();
    public void set_TypeConstraint(string value);
    public List`1<string> get_Attributes();
    public List`1<string> get_Values();
    public Dictionary`2<string, string> get_ValueMap();
    public bool get_Mandatory();
    public void set_Mandatory(bool value);
    public bool get_IsKey();
    public void set_IsKey(bool value);
    public Tuple`2<int, int> get_Range();
    public void set_Range(Tuple`2<int, int> value);
}
public class System.Management.Automation.Language.DynamicKeywordStatementAst : StatementAst {
    public ReadOnlyCollection`1<CommandElementAst> CommandElements { get; }
    public DynamicKeywordStatementAst(IScriptExtent extent, IEnumerable`1<CommandElementAst> commandElements);
    public ReadOnlyCollection`1<CommandElementAst> get_CommandElements();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.ErrorExpressionAst : ExpressionAst {
    public ReadOnlyCollection`1<Ast> NestedAst { get; }
    public ReadOnlyCollection`1<Ast> get_NestedAst();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.ErrorStatementAst : PipelineBaseAst {
    public ReadOnlyCollection`1<Ast> Bodies { get; }
    public ReadOnlyCollection`1<Ast> Conditions { get; }
    public Dictionary`2<string, Tuple`2<Token, Ast>> Flags { get; }
    public Token Kind { get; }
    public ReadOnlyCollection`1<Ast> NestedAst { get; }
    public Token get_Kind();
    public Dictionary`2<string, Tuple`2<Token, Ast>> get_Flags();
    public ReadOnlyCollection`1<Ast> get_Conditions();
    public ReadOnlyCollection`1<Ast> get_Bodies();
    public ReadOnlyCollection`1<Ast> get_NestedAst();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.ExitStatementAst : StatementAst {
    public PipelineBaseAst Pipeline { get; }
    public ExitStatementAst(IScriptExtent extent, PipelineBaseAst pipeline);
    public PipelineBaseAst get_Pipeline();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.ExpandableStringExpressionAst : ExpressionAst {
    public ReadOnlyCollection`1<ExpressionAst> NestedExpressions { get; }
    public Type StaticType { get; }
    public StringConstantType StringConstantType { get; }
    public string Value { get; }
    public ExpandableStringExpressionAst(IScriptExtent extent, string value, StringConstantType type);
    public string get_Value();
    public StringConstantType get_StringConstantType();
    public ReadOnlyCollection`1<ExpressionAst> get_NestedExpressions();
    public virtual Ast Copy();
    public virtual Type get_StaticType();
}
public abstract class System.Management.Automation.Language.ExpressionAst : CommandElementAst {
    public Type StaticType { get; }
    protected ExpressionAst(IScriptExtent extent);
    public virtual Type get_StaticType();
}
public class System.Management.Automation.Language.FileRedirectionAst : RedirectionAst {
    public bool Append { get; }
    public ExpressionAst Location { get; }
    public FileRedirectionAst(IScriptExtent extent, RedirectionStream stream, ExpressionAst file, bool append);
    public ExpressionAst get_Location();
    public bool get_Append();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.FileRedirectionToken : RedirectionToken {
    public bool Append { get; }
    public RedirectionStream FromStream { get; }
    public RedirectionStream get_FromStream();
    public bool get_Append();
}
[FlagsAttribute]
public enum System.Management.Automation.Language.ForEachFlags : Enum {
    public int value__;
    public static ForEachFlags None;
    public static ForEachFlags Parallel;
}
public class System.Management.Automation.Language.ForEachStatementAst : LoopStatementAst {
    public ForEachFlags Flags { get; }
    public ExpressionAst ThrottleLimit { get; }
    public VariableExpressionAst Variable { get; }
    public ForEachStatementAst(IScriptExtent extent, string label, ForEachFlags flags, VariableExpressionAst variable, PipelineBaseAst expression, StatementBlockAst body);
    public ForEachStatementAst(IScriptExtent extent, string label, ForEachFlags flags, ExpressionAst throttleLimit, VariableExpressionAst variable, PipelineBaseAst expression, StatementBlockAst body);
    public VariableExpressionAst get_Variable();
    public ExpressionAst get_ThrottleLimit();
    public ForEachFlags get_Flags();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.ForStatementAst : LoopStatementAst {
    public PipelineBaseAst Initializer { get; }
    public PipelineBaseAst Iterator { get; }
    public ForStatementAst(IScriptExtent extent, string label, PipelineBaseAst initializer, PipelineBaseAst condition, PipelineBaseAst iterator, StatementBlockAst body);
    public PipelineBaseAst get_Initializer();
    public PipelineBaseAst get_Iterator();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.FunctionDefinitionAst : StatementAst {
    public ScriptBlockAst Body { get; }
    public bool IsFilter { get; }
    public bool IsWorkflow { get; }
    public string Name { get; }
    public ReadOnlyCollection`1<ParameterAst> Parameters { get; }
    public FunctionDefinitionAst(IScriptExtent extent, bool isFilter, bool isWorkflow, string name, IEnumerable`1<ParameterAst> parameters, ScriptBlockAst body);
    public bool get_IsFilter();
    public bool get_IsWorkflow();
    public string get_Name();
    public ReadOnlyCollection`1<ParameterAst> get_Parameters();
    public sealed virtual ScriptBlockAst get_Body();
    public CommentHelpInfo GetHelpContent();
    public CommentHelpInfo GetHelpContent(Dictionary`2<Ast, Token[]> scriptBlockTokenCache);
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.FunctionMemberAst : MemberAst {
    public ReadOnlyCollection`1<AttributeAst> Attributes { get; }
    public ScriptBlockAst Body { get; }
    public bool IsConstructor { get; }
    public bool IsHidden { get; }
    public bool IsPrivate { get; }
    public bool IsPublic { get; }
    public bool IsStatic { get; }
    public MethodAttributes MethodAttributes { get; }
    public string Name { get; }
    public ReadOnlyCollection`1<ParameterAst> Parameters { get; }
    public TypeConstraintAst ReturnType { get; }
    public FunctionMemberAst(IScriptExtent extent, FunctionDefinitionAst functionDefinitionAst, TypeConstraintAst returnType, IEnumerable`1<AttributeAst> attributes, MethodAttributes methodAttributes);
    public virtual string get_Name();
    public ReadOnlyCollection`1<AttributeAst> get_Attributes();
    public TypeConstraintAst get_ReturnType();
    public ReadOnlyCollection`1<ParameterAst> get_Parameters();
    public sealed virtual ScriptBlockAst get_Body();
    public MethodAttributes get_MethodAttributes();
    public bool get_IsPublic();
    public bool get_IsPrivate();
    public bool get_IsHidden();
    public bool get_IsStatic();
    public bool get_IsConstructor();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.GenericTypeName : object {
    public string AssemblyName { get; }
    public IScriptExtent Extent { get; }
    public string FullName { get; }
    public ReadOnlyCollection`1<ITypeName> GenericArguments { get; }
    public bool IsArray { get; }
    public bool IsGeneric { get; }
    public string Name { get; }
    public ITypeName TypeName { get; }
    public GenericTypeName(IScriptExtent extent, ITypeName genericTypeName, IEnumerable`1<ITypeName> genericArguments);
    public sealed virtual string get_FullName();
    public sealed virtual string get_Name();
    public sealed virtual string get_AssemblyName();
    public sealed virtual bool get_IsArray();
    public sealed virtual bool get_IsGeneric();
    public ITypeName get_TypeName();
    public ReadOnlyCollection`1<ITypeName> get_GenericArguments();
    public sealed virtual IScriptExtent get_Extent();
    public sealed virtual Type GetReflectionType();
    public sealed virtual Type GetReflectionAttributeType();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Management.Automation.Language.HashtableAst : ExpressionAst {
    public ReadOnlyCollection`1<Tuple`2<ExpressionAst, StatementAst>> KeyValuePairs { get; }
    public Type StaticType { get; }
    public HashtableAst(IScriptExtent extent, IEnumerable`1<Tuple`2<ExpressionAst, StatementAst>> keyValuePairs);
    public ReadOnlyCollection`1<Tuple`2<ExpressionAst, StatementAst>> get_KeyValuePairs();
    public virtual Ast Copy();
    public virtual Type get_StaticType();
}
public interface System.Management.Automation.Language.IAstPostVisitHandler {
    public abstract virtual void PostVisit(Ast ast);
}
public interface System.Management.Automation.Language.ICustomAstVisitor {
    public abstract virtual object VisitErrorStatement(ErrorStatementAst errorStatementAst);
    public abstract virtual object VisitErrorExpression(ErrorExpressionAst errorExpressionAst);
    public abstract virtual object VisitScriptBlock(ScriptBlockAst scriptBlockAst);
    public abstract virtual object VisitParamBlock(ParamBlockAst paramBlockAst);
    public abstract virtual object VisitNamedBlock(NamedBlockAst namedBlockAst);
    public abstract virtual object VisitTypeConstraint(TypeConstraintAst typeConstraintAst);
    public abstract virtual object VisitAttribute(AttributeAst attributeAst);
    public abstract virtual object VisitNamedAttributeArgument(NamedAttributeArgumentAst namedAttributeArgumentAst);
    public abstract virtual object VisitParameter(ParameterAst parameterAst);
    public abstract virtual object VisitFunctionDefinition(FunctionDefinitionAst functionDefinitionAst);
    public abstract virtual object VisitStatementBlock(StatementBlockAst statementBlockAst);
    public abstract virtual object VisitIfStatement(IfStatementAst ifStmtAst);
    public abstract virtual object VisitTrap(TrapStatementAst trapStatementAst);
    public abstract virtual object VisitSwitchStatement(SwitchStatementAst switchStatementAst);
    public abstract virtual object VisitDataStatement(DataStatementAst dataStatementAst);
    public abstract virtual object VisitForEachStatement(ForEachStatementAst forEachStatementAst);
    public abstract virtual object VisitDoWhileStatement(DoWhileStatementAst doWhileStatementAst);
    public abstract virtual object VisitForStatement(ForStatementAst forStatementAst);
    public abstract virtual object VisitWhileStatement(WhileStatementAst whileStatementAst);
    public abstract virtual object VisitCatchClause(CatchClauseAst catchClauseAst);
    public abstract virtual object VisitTryStatement(TryStatementAst tryStatementAst);
    public abstract virtual object VisitBreakStatement(BreakStatementAst breakStatementAst);
    public abstract virtual object VisitContinueStatement(ContinueStatementAst continueStatementAst);
    public abstract virtual object VisitReturnStatement(ReturnStatementAst returnStatementAst);
    public abstract virtual object VisitExitStatement(ExitStatementAst exitStatementAst);
    public abstract virtual object VisitThrowStatement(ThrowStatementAst throwStatementAst);
    public abstract virtual object VisitDoUntilStatement(DoUntilStatementAst doUntilStatementAst);
    public abstract virtual object VisitAssignmentStatement(AssignmentStatementAst assignmentStatementAst);
    public abstract virtual object VisitPipeline(PipelineAst pipelineAst);
    public abstract virtual object VisitCommand(CommandAst commandAst);
    public abstract virtual object VisitCommandExpression(CommandExpressionAst commandExpressionAst);
    public abstract virtual object VisitCommandParameter(CommandParameterAst commandParameterAst);
    public abstract virtual object VisitFileRedirection(FileRedirectionAst fileRedirectionAst);
    public abstract virtual object VisitMergingRedirection(MergingRedirectionAst mergingRedirectionAst);
    public abstract virtual object VisitBinaryExpression(BinaryExpressionAst binaryExpressionAst);
    public abstract virtual object VisitUnaryExpression(UnaryExpressionAst unaryExpressionAst);
    public abstract virtual object VisitConvertExpression(ConvertExpressionAst convertExpressionAst);
    public abstract virtual object VisitConstantExpression(ConstantExpressionAst constantExpressionAst);
    public abstract virtual object VisitStringConstantExpression(StringConstantExpressionAst stringConstantExpressionAst);
    public abstract virtual object VisitSubExpression(SubExpressionAst subExpressionAst);
    public abstract virtual object VisitUsingExpression(UsingExpressionAst usingExpressionAst);
    public abstract virtual object VisitVariableExpression(VariableExpressionAst variableExpressionAst);
    public abstract virtual object VisitTypeExpression(TypeExpressionAst typeExpressionAst);
    public abstract virtual object VisitMemberExpression(MemberExpressionAst memberExpressionAst);
    public abstract virtual object VisitInvokeMemberExpression(InvokeMemberExpressionAst invokeMemberExpressionAst);
    public abstract virtual object VisitArrayExpression(ArrayExpressionAst arrayExpressionAst);
    public abstract virtual object VisitArrayLiteral(ArrayLiteralAst arrayLiteralAst);
    public abstract virtual object VisitHashtable(HashtableAst hashtableAst);
    public abstract virtual object VisitScriptBlockExpression(ScriptBlockExpressionAst scriptBlockExpressionAst);
    public abstract virtual object VisitParenExpression(ParenExpressionAst parenExpressionAst);
    public abstract virtual object VisitExpandableStringExpression(ExpandableStringExpressionAst expandableStringExpressionAst);
    public abstract virtual object VisitIndexExpression(IndexExpressionAst indexExpressionAst);
    public abstract virtual object VisitAttributedExpression(AttributedExpressionAst attributedExpressionAst);
    public abstract virtual object VisitBlockStatement(BlockStatementAst blockStatementAst);
}
public interface System.Management.Automation.Language.ICustomAstVisitor2 {
    public abstract virtual object VisitTypeDefinition(TypeDefinitionAst typeDefinitionAst);
    public abstract virtual object VisitPropertyMember(PropertyMemberAst propertyMemberAst);
    public abstract virtual object VisitFunctionMember(FunctionMemberAst functionMemberAst);
    public abstract virtual object VisitBaseCtorInvokeMemberExpression(BaseCtorInvokeMemberExpressionAst baseCtorInvokeMemberExpressionAst);
    public abstract virtual object VisitUsingStatement(UsingStatementAst usingStatement);
    public abstract virtual object VisitConfigurationDefinition(ConfigurationDefinitionAst configurationDefinitionAst);
    public abstract virtual object VisitDynamicKeywordStatement(DynamicKeywordStatementAst dynamicKeywordAst);
}
public class System.Management.Automation.Language.IfStatementAst : StatementAst {
    public ReadOnlyCollection`1<Tuple`2<PipelineBaseAst, StatementBlockAst>> Clauses { get; }
    public StatementBlockAst ElseClause { get; }
    public IfStatementAst(IScriptExtent extent, IEnumerable`1<Tuple`2<PipelineBaseAst, StatementBlockAst>> clauses, StatementBlockAst elseClause);
    public ReadOnlyCollection`1<Tuple`2<PipelineBaseAst, StatementBlockAst>> get_Clauses();
    public StatementBlockAst get_ElseClause();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.IndexExpressionAst : ExpressionAst {
    public ExpressionAst Index { get; }
    public ExpressionAst Target { get; }
    public IndexExpressionAst(IScriptExtent extent, ExpressionAst target, ExpressionAst index);
    public ExpressionAst get_Target();
    public ExpressionAst get_Index();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.InputRedirectionToken : RedirectionToken {
}
public class System.Management.Automation.Language.InvokeMemberExpressionAst : MemberExpressionAst {
    public ReadOnlyCollection`1<ExpressionAst> Arguments { get; }
    public InvokeMemberExpressionAst(IScriptExtent extent, ExpressionAst expression, CommandElementAst method, IEnumerable`1<ExpressionAst> arguments, bool static);
    public ReadOnlyCollection`1<ExpressionAst> get_Arguments();
    public virtual Ast Copy();
}
public interface System.Management.Automation.Language.IScriptExtent {
    public int EndColumnNumber { get; }
    public int EndLineNumber { get; }
    public int EndOffset { get; }
    public IScriptPosition EndScriptPosition { get; }
    public string File { get; }
    public int StartColumnNumber { get; }
    public int StartLineNumber { get; }
    public int StartOffset { get; }
    public IScriptPosition StartScriptPosition { get; }
    public string Text { get; }
    public abstract virtual string get_File();
    public abstract virtual IScriptPosition get_StartScriptPosition();
    public abstract virtual IScriptPosition get_EndScriptPosition();
    public abstract virtual int get_StartLineNumber();
    public abstract virtual int get_StartColumnNumber();
    public abstract virtual int get_EndLineNumber();
    public abstract virtual int get_EndColumnNumber();
    public abstract virtual string get_Text();
    public abstract virtual int get_StartOffset();
    public abstract virtual int get_EndOffset();
}
public interface System.Management.Automation.Language.IScriptPosition {
    public int ColumnNumber { get; }
    public string File { get; }
    public string Line { get; }
    public int LineNumber { get; }
    public int Offset { get; }
    public abstract virtual string get_File();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_ColumnNumber();
    public abstract virtual int get_Offset();
    public abstract virtual string get_Line();
    public abstract virtual string GetFullScript();
}
public interface System.Management.Automation.Language.ITypeName {
    public string AssemblyName { get; }
    public IScriptExtent Extent { get; }
    public string FullName { get; }
    public bool IsArray { get; }
    public bool IsGeneric { get; }
    public string Name { get; }
    public abstract virtual string get_FullName();
    public abstract virtual string get_Name();
    public abstract virtual string get_AssemblyName();
    public abstract virtual bool get_IsArray();
    public abstract virtual bool get_IsGeneric();
    public abstract virtual Type GetReflectionType();
    public abstract virtual Type GetReflectionAttributeType();
    public abstract virtual IScriptExtent get_Extent();
}
public abstract class System.Management.Automation.Language.LabeledStatementAst : StatementAst {
    public PipelineBaseAst Condition { get; }
    public string Label { get; }
    protected LabeledStatementAst(IScriptExtent extent, string label, PipelineBaseAst condition);
    public string get_Label();
    public PipelineBaseAst get_Condition();
}
public class System.Management.Automation.Language.LabelToken : Token {
    public string LabelText { get; }
    public string get_LabelText();
}
public abstract class System.Management.Automation.Language.LoopStatementAst : LabeledStatementAst {
    public StatementBlockAst Body { get; }
    protected LoopStatementAst(IScriptExtent extent, string label, PipelineBaseAst condition, StatementBlockAst body);
    public StatementBlockAst get_Body();
}
public abstract class System.Management.Automation.Language.MemberAst : Ast {
    public string Name { get; }
    protected MemberAst(IScriptExtent extent);
    public abstract virtual string get_Name();
}
public class System.Management.Automation.Language.MemberExpressionAst : ExpressionAst {
    public ExpressionAst Expression { get; }
    public CommandElementAst Member { get; }
    public bool Static { get; }
    public MemberExpressionAst(IScriptExtent extent, ExpressionAst expression, CommandElementAst member, bool static);
    public ExpressionAst get_Expression();
    public CommandElementAst get_Member();
    public bool get_Static();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.MergingRedirectionAst : RedirectionAst {
    public RedirectionStream ToStream { get; }
    public MergingRedirectionAst(IScriptExtent extent, RedirectionStream from, RedirectionStream to);
    public RedirectionStream get_ToStream();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.MergingRedirectionToken : RedirectionToken {
    public RedirectionStream FromStream { get; }
    public RedirectionStream ToStream { get; }
    public RedirectionStream get_FromStream();
    public RedirectionStream get_ToStream();
}
[FlagsAttribute]
public enum System.Management.Automation.Language.MethodAttributes : Enum {
    public int value__;
    public static MethodAttributes Hidden;
    public static MethodAttributes None;
    public static MethodAttributes Private;
    public static MethodAttributes Public;
    public static MethodAttributes Static;
}
public class System.Management.Automation.Language.NamedAttributeArgumentAst : Ast {
    public ExpressionAst Argument { get; }
    public string ArgumentName { get; }
    public bool ExpressionOmitted { get; }
    public NamedAttributeArgumentAst(IScriptExtent extent, string argumentName, ExpressionAst argument, bool expressionOmitted);
    public string get_ArgumentName();
    public ExpressionAst get_Argument();
    public bool get_ExpressionOmitted();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.NamedBlockAst : Ast {
    public TokenKind BlockKind { get; }
    public ReadOnlyCollection`1<StatementAst> Statements { get; }
    public ReadOnlyCollection`1<TrapStatementAst> Traps { get; }
    public bool Unnamed { get; }
    public NamedBlockAst(IScriptExtent extent, TokenKind blockName, StatementBlockAst statementBlock, bool unnamed);
    public bool get_Unnamed();
    public TokenKind get_BlockKind();
    public ReadOnlyCollection`1<StatementAst> get_Statements();
    public ReadOnlyCollection`1<TrapStatementAst> get_Traps();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.NullString : object {
    public static NullString Value { get; }
    public virtual string ToString();
    public static NullString get_Value();
}
public class System.Management.Automation.Language.NumberToken : Token {
    public object Value { get; }
    public object get_Value();
}
public class System.Management.Automation.Language.ParamBlockAst : Ast {
    public ReadOnlyCollection`1<AttributeAst> Attributes { get; }
    public ReadOnlyCollection`1<ParameterAst> Parameters { get; }
    public ParamBlockAst(IScriptExtent extent, IEnumerable`1<AttributeAst> attributes, IEnumerable`1<ParameterAst> parameters);
    public ReadOnlyCollection`1<AttributeAst> get_Attributes();
    public ReadOnlyCollection`1<ParameterAst> get_Parameters();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.ParameterAst : Ast {
    public ReadOnlyCollection`1<AttributeBaseAst> Attributes { get; }
    public ExpressionAst DefaultValue { get; }
    public VariableExpressionAst Name { get; }
    public Type StaticType { get; }
    public ParameterAst(IScriptExtent extent, VariableExpressionAst name, IEnumerable`1<AttributeBaseAst> attributes, ExpressionAst defaultValue);
    public ReadOnlyCollection`1<AttributeBaseAst> get_Attributes();
    public VariableExpressionAst get_Name();
    public ExpressionAst get_DefaultValue();
    public Type get_StaticType();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.ParameterBindingResult : object {
    public object ConstantValue { get; }
    public ParameterMetadata Parameter { get; }
    public CommandElementAst Value { get; }
    public ParameterMetadata get_Parameter();
    public object get_ConstantValue();
    public CommandElementAst get_Value();
}
public class System.Management.Automation.Language.ParameterToken : Token {
    public string ParameterName { get; }
    public bool UsedColon { get; }
    public string get_ParameterName();
    public bool get_UsedColon();
}
public class System.Management.Automation.Language.ParenExpressionAst : ExpressionAst {
    public PipelineBaseAst Pipeline { get; }
    public ParenExpressionAst(IScriptExtent extent, PipelineBaseAst pipeline);
    public PipelineBaseAst get_Pipeline();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.ParseError : object {
    public string ErrorId { get; }
    public IScriptExtent Extent { get; }
    public bool IncompleteInput { get; }
    public string Message { get; }
    public ParseError(IScriptExtent extent, string errorId, string message);
    public virtual string ToString();
    public IScriptExtent get_Extent();
    public string get_ErrorId();
    public string get_Message();
    public bool get_IncompleteInput();
}
public class System.Management.Automation.Language.Parser : object {
    public static ScriptBlockAst ParseFile(string fileName, Token[]& tokens, ParseError[]& errors);
    public static ScriptBlockAst ParseInput(string input, Token[]& tokens, ParseError[]& errors);
}
public class System.Management.Automation.Language.PipelineAst : PipelineBaseAst {
    public ReadOnlyCollection`1<CommandBaseAst> PipelineElements { get; }
    public PipelineAst(IScriptExtent extent, IEnumerable`1<CommandBaseAst> pipelineElements);
    public PipelineAst(IScriptExtent extent, CommandBaseAst commandAst);
    public ReadOnlyCollection`1<CommandBaseAst> get_PipelineElements();
    public virtual ExpressionAst GetPureExpression();
    public virtual Ast Copy();
}
public abstract class System.Management.Automation.Language.PipelineBaseAst : StatementAst {
    protected PipelineBaseAst(IScriptExtent extent);
    public virtual ExpressionAst GetPureExpression();
}
[FlagsAttribute]
public enum System.Management.Automation.Language.PropertyAttributes : Enum {
    public int value__;
    public static PropertyAttributes Hidden;
    public static PropertyAttributes Literal;
    public static PropertyAttributes None;
    public static PropertyAttributes Private;
    public static PropertyAttributes Public;
    public static PropertyAttributes Static;
}
public class System.Management.Automation.Language.PropertyMemberAst : MemberAst {
    public ReadOnlyCollection`1<AttributeAst> Attributes { get; }
    public ExpressionAst InitialValue { get; }
    public bool IsHidden { get; }
    public bool IsPrivate { get; }
    public bool IsPublic { get; }
    public bool IsStatic { get; }
    public string Name { get; }
    public PropertyAttributes PropertyAttributes { get; }
    public TypeConstraintAst PropertyType { get; }
    public PropertyMemberAst(IScriptExtent extent, string name, TypeConstraintAst propertyType, IEnumerable`1<AttributeAst> attributes, PropertyAttributes propertyAttributes, ExpressionAst initialValue);
    public virtual string get_Name();
    public TypeConstraintAst get_PropertyType();
    public ReadOnlyCollection`1<AttributeAst> get_Attributes();
    public PropertyAttributes get_PropertyAttributes();
    public ExpressionAst get_InitialValue();
    public bool get_IsPublic();
    public bool get_IsPrivate();
    public bool get_IsHidden();
    public bool get_IsStatic();
    public virtual Ast Copy();
}
public abstract class System.Management.Automation.Language.RedirectionAst : Ast {
    public RedirectionStream FromStream { get; }
    protected RedirectionAst(IScriptExtent extent, RedirectionStream from);
    public RedirectionStream get_FromStream();
}
public enum System.Management.Automation.Language.RedirectionStream : Enum {
    public int value__;
    public static RedirectionStream All;
    public static RedirectionStream Debug;
    public static RedirectionStream Error;
    public static RedirectionStream Information;
    public static RedirectionStream Output;
    public static RedirectionStream Verbose;
    public static RedirectionStream Warning;
}
public abstract class System.Management.Automation.Language.RedirectionToken : Token {
}
public class System.Management.Automation.Language.ReflectionTypeName : object {
    public string AssemblyName { get; }
    public IScriptExtent Extent { get; }
    public string FullName { get; }
    public bool IsArray { get; }
    public bool IsGeneric { get; }
    public string Name { get; }
    public ReflectionTypeName(Type type);
    public sealed virtual string get_FullName();
    public sealed virtual string get_Name();
    public sealed virtual string get_AssemblyName();
    public sealed virtual bool get_IsArray();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual IScriptExtent get_Extent();
    public sealed virtual Type GetReflectionType();
    public sealed virtual Type GetReflectionAttributeType();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Management.Automation.Language.ReturnStatementAst : StatementAst {
    public PipelineBaseAst Pipeline { get; }
    public ReturnStatementAst(IScriptExtent extent, PipelineBaseAst pipeline);
    public PipelineBaseAst get_Pipeline();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.ScriptBlockAst : Ast {
    public ReadOnlyCollection`1<AttributeAst> Attributes { get; }
    public NamedBlockAst BeginBlock { get; }
    public NamedBlockAst DynamicParamBlock { get; }
    public NamedBlockAst EndBlock { get; }
    public Assembly ImplementingAssembly { get; }
    public ParamBlockAst ParamBlock { get; }
    public NamedBlockAst ProcessBlock { get; }
    public ScriptRequirements ScriptRequirements { get; }
    public ReadOnlyCollection`1<StatementAst> UsingStatements { get; }
    public ScriptBlockAst(IScriptExtent extent, IEnumerable`1<StatementAst> usingStatements, IEnumerable`1<AttributeAst> attributes, ParamBlockAst paramBlock, NamedBlockAst beginBlock, NamedBlockAst processBlock, NamedBlockAst endBlock, NamedBlockAst dynamicParamBlock);
    public ScriptBlockAst(IScriptExtent extent, IEnumerable`1<StatementAst> usingStatements, ParamBlockAst paramBlock, NamedBlockAst beginBlock, NamedBlockAst processBlock, NamedBlockAst endBlock, NamedBlockAst dynamicParamBlock);
    public ScriptBlockAst(IScriptExtent extent, ParamBlockAst paramBlock, NamedBlockAst beginBlock, NamedBlockAst processBlock, NamedBlockAst endBlock, NamedBlockAst dynamicParamBlock);
    public ScriptBlockAst(IScriptExtent extent, List`1<StatementAst> usingStatements, ParamBlockAst paramBlock, StatementBlockAst statements, bool isFilter);
    public ScriptBlockAst(IScriptExtent extent, ParamBlockAst paramBlock, StatementBlockAst statements, bool isFilter);
    public ScriptBlockAst(IScriptExtent extent, ParamBlockAst paramBlock, StatementBlockAst statements, bool isFilter, bool isConfiguration);
    public ScriptBlockAst(IScriptExtent extent, IEnumerable`1<StatementAst> usingStatements, ParamBlockAst paramBlock, StatementBlockAst statements, bool isFilter, bool isConfiguration);
    public ScriptBlockAst(IScriptExtent extent, IEnumerable`1<AttributeAst> attributes, ParamBlockAst paramBlock, StatementBlockAst statements, bool isFilter, bool isConfiguration);
    public ScriptBlockAst(IScriptExtent extent, IEnumerable`1<StatementAst> usingStatements, IEnumerable`1<AttributeAst> attributes, ParamBlockAst paramBlock, StatementBlockAst statements, bool isFilter, bool isConfiguration);
    public ReadOnlyCollection`1<AttributeAst> get_Attributes();
    public ReadOnlyCollection`1<StatementAst> get_UsingStatements();
    public ParamBlockAst get_ParamBlock();
    public NamedBlockAst get_BeginBlock();
    public NamedBlockAst get_ProcessBlock();
    public NamedBlockAst get_EndBlock();
    public NamedBlockAst get_DynamicParamBlock();
    public ScriptRequirements get_ScriptRequirements();
    public Assembly get_ImplementingAssembly();
    public CommentHelpInfo GetHelpContent();
    public ScriptBlock GetScriptBlock();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.ScriptBlockExpressionAst : ExpressionAst {
    public ScriptBlockAst ScriptBlock { get; }
    public Type StaticType { get; }
    public ScriptBlockExpressionAst(IScriptExtent extent, ScriptBlockAst scriptBlock);
    public ScriptBlockAst get_ScriptBlock();
    public virtual Ast Copy();
    public virtual Type get_StaticType();
}
public class System.Management.Automation.Language.ScriptExtent : object {
    public int EndColumnNumber { get; }
    public int EndLineNumber { get; }
    public int EndOffset { get; }
    public IScriptPosition EndScriptPosition { get; }
    public string File { get; }
    public int StartColumnNumber { get; }
    public int StartLineNumber { get; }
    public int StartOffset { get; }
    public IScriptPosition StartScriptPosition { get; }
    public string Text { get; }
    public ScriptExtent(ScriptPosition startPosition, ScriptPosition endPosition);
    public sealed virtual string get_File();
    public sealed virtual IScriptPosition get_StartScriptPosition();
    public sealed virtual IScriptPosition get_EndScriptPosition();
    public sealed virtual int get_StartLineNumber();
    public sealed virtual int get_StartColumnNumber();
    public sealed virtual int get_EndLineNumber();
    public sealed virtual int get_EndColumnNumber();
    public sealed virtual int get_StartOffset();
    public sealed virtual int get_EndOffset();
    public sealed virtual string get_Text();
}
public class System.Management.Automation.Language.ScriptPosition : object {
    public int ColumnNumber { get; }
    public string File { get; }
    public string Line { get; }
    public int LineNumber { get; }
    public int Offset { get; }
    public ScriptPosition(string scriptName, int scriptLineNumber, int offsetInLine, string line);
    public ScriptPosition(string scriptName, int scriptLineNumber, int offsetInLine, string line, string fullScript);
    public sealed virtual string get_File();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_ColumnNumber();
    public sealed virtual int get_Offset();
    public sealed virtual string get_Line();
    public sealed virtual string GetFullScript();
}
public class System.Management.Automation.Language.ScriptRequirements : object {
    public bool IsElevationRequired { get; }
    public string RequiredApplicationId { get; }
    public ReadOnlyCollection`1<string> RequiredAssemblies { get; }
    public ReadOnlyCollection`1<ModuleSpecification> RequiredModules { get; }
    public Version RequiredPSVersion { get; }
    public ReadOnlyCollection`1<PSSnapInSpecification> RequiresPSSnapIns { get; }
    public string get_RequiredApplicationId();
    public Version get_RequiredPSVersion();
    public ReadOnlyCollection`1<ModuleSpecification> get_RequiredModules();
    public ReadOnlyCollection`1<PSSnapInSpecification> get_RequiresPSSnapIns();
    public ReadOnlyCollection`1<string> get_RequiredAssemblies();
    public bool get_IsElevationRequired();
}
public abstract class System.Management.Automation.Language.StatementAst : Ast {
    protected StatementAst(IScriptExtent extent);
}
public class System.Management.Automation.Language.StatementBlockAst : Ast {
    public ReadOnlyCollection`1<StatementAst> Statements { get; }
    public ReadOnlyCollection`1<TrapStatementAst> Traps { get; }
    public StatementBlockAst(IScriptExtent extent, IEnumerable`1<StatementAst> statements, IEnumerable`1<TrapStatementAst> traps);
    public ReadOnlyCollection`1<StatementAst> get_Statements();
    public ReadOnlyCollection`1<TrapStatementAst> get_Traps();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.StaticBindingError : object {
    public ParameterBindingException BindingException { get; }
    public CommandElementAst CommandElement { get; }
    public CommandElementAst get_CommandElement();
    public ParameterBindingException get_BindingException();
}
public class System.Management.Automation.Language.StaticBindingResult : object {
    public Dictionary`2<string, StaticBindingError> BindingExceptions { get; }
    public Dictionary`2<string, ParameterBindingResult> BoundParameters { get; }
    public Dictionary`2<string, ParameterBindingResult> get_BoundParameters();
    public Dictionary`2<string, StaticBindingError> get_BindingExceptions();
}
public static class System.Management.Automation.Language.StaticParameterBinder : object {
    public static StaticBindingResult BindCommand(CommandAst commandAst);
    public static StaticBindingResult BindCommand(CommandAst commandAst, bool resolve);
    public static StaticBindingResult BindCommand(CommandAst commandAst, bool resolve, String[] desiredParameters);
}
public class System.Management.Automation.Language.StringConstantExpressionAst : ConstantExpressionAst {
    public Type StaticType { get; }
    public StringConstantType StringConstantType { get; }
    public string Value { get; }
    public StringConstantExpressionAst(IScriptExtent extent, string value, StringConstantType stringConstantType);
    public StringConstantType get_StringConstantType();
    public string get_Value();
    public virtual Ast Copy();
    public virtual Type get_StaticType();
}
public enum System.Management.Automation.Language.StringConstantType : Enum {
    public int value__;
    public static StringConstantType BareWord;
    public static StringConstantType DoubleQuoted;
    public static StringConstantType DoubleQuotedHereString;
    public static StringConstantType SingleQuoted;
    public static StringConstantType SingleQuotedHereString;
}
public class System.Management.Automation.Language.StringExpandableToken : StringToken {
    public ReadOnlyCollection`1<Token> NestedTokens { get; }
    public ReadOnlyCollection`1<Token> get_NestedTokens();
}
public class System.Management.Automation.Language.StringLiteralToken : StringToken {
}
public abstract class System.Management.Automation.Language.StringToken : Token {
    public string Value { get; }
    public string get_Value();
}
public class System.Management.Automation.Language.SubExpressionAst : ExpressionAst {
    public StatementBlockAst SubExpression { get; }
    public SubExpressionAst(IScriptExtent extent, StatementBlockAst statementBlock);
    public StatementBlockAst get_SubExpression();
    public virtual Ast Copy();
}
[FlagsAttribute]
public enum System.Management.Automation.Language.SwitchFlags : Enum {
    public int value__;
    public static SwitchFlags CaseSensitive;
    public static SwitchFlags Exact;
    public static SwitchFlags File;
    public static SwitchFlags None;
    public static SwitchFlags Parallel;
    public static SwitchFlags Regex;
    public static SwitchFlags Wildcard;
}
public class System.Management.Automation.Language.SwitchStatementAst : LabeledStatementAst {
    public ReadOnlyCollection`1<Tuple`2<ExpressionAst, StatementBlockAst>> Clauses { get; }
    public StatementBlockAst Default { get; }
    public SwitchFlags Flags { get; }
    public SwitchStatementAst(IScriptExtent extent, string label, PipelineBaseAst condition, SwitchFlags flags, IEnumerable`1<Tuple`2<ExpressionAst, StatementBlockAst>> clauses, StatementBlockAst default);
    public SwitchFlags get_Flags();
    public ReadOnlyCollection`1<Tuple`2<ExpressionAst, StatementBlockAst>> get_Clauses();
    public StatementBlockAst get_Default();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.ThrowStatementAst : StatementAst {
    public bool IsRethrow { get; }
    public PipelineBaseAst Pipeline { get; }
    public ThrowStatementAst(IScriptExtent extent, PipelineBaseAst pipeline);
    public PipelineBaseAst get_Pipeline();
    public bool get_IsRethrow();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.Token : object {
    public IScriptExtent Extent { get; }
    public bool HasError { get; }
    public TokenKind Kind { get; }
    public string Text { get; }
    public TokenFlags TokenFlags { get; }
    public string get_Text();
    public TokenFlags get_TokenFlags();
    public TokenKind get_Kind();
    public bool get_HasError();
    public IScriptExtent get_Extent();
    public virtual string ToString();
}
[FlagsAttribute]
public enum System.Management.Automation.Language.TokenFlags : Enum {
    public int value__;
    public static TokenFlags AssignmentOperator;
    public static TokenFlags AttributeName;
    public static TokenFlags BinaryOperator;
    public static TokenFlags BinaryPrecedenceAdd;
    public static TokenFlags BinaryPrecedenceBitwise;
    public static TokenFlags BinaryPrecedenceComparison;
    public static TokenFlags BinaryPrecedenceFormat;
    public static TokenFlags BinaryPrecedenceLogical;
    public static TokenFlags BinaryPrecedenceMask;
    public static TokenFlags BinaryPrecedenceMultiply;
    public static TokenFlags BinaryPrecedenceRange;
    public static TokenFlags CanConstantFold;
    public static TokenFlags CaseSensitiveOperator;
    public static TokenFlags CommandName;
    public static TokenFlags DisallowedInRestrictedMode;
    public static TokenFlags Keyword;
    public static TokenFlags MemberName;
    public static TokenFlags None;
    public static TokenFlags ParseModeInvariant;
    public static TokenFlags PrefixOrPostfixOperator;
    public static TokenFlags ScriptBlockBlockName;
    public static TokenFlags SpecialOperator;
    public static TokenFlags StatementDoesntSupportAttributes;
    public static TokenFlags TokenInError;
    public static TokenFlags TypeName;
    public static TokenFlags UnaryOperator;
}
public enum System.Management.Automation.Language.TokenKind : Enum {
    public int value__;
    public static TokenKind Ampersand;
    public static TokenKind And;
    public static TokenKind AndAnd;
    public static TokenKind As;
    public static TokenKind Assembly;
    public static TokenKind AtCurly;
    public static TokenKind AtParen;
    public static TokenKind Band;
    public static TokenKind Base;
    public static TokenKind Begin;
    public static TokenKind Bnot;
    public static TokenKind Bor;
    public static TokenKind Break;
    public static TokenKind Bxor;
    public static TokenKind Catch;
    public static TokenKind Ccontains;
    public static TokenKind Ceq;
    public static TokenKind Cge;
    public static TokenKind Cgt;
    public static TokenKind Cin;
    public static TokenKind Class;
    public static TokenKind Cle;
    public static TokenKind Clike;
    public static TokenKind Clt;
    public static TokenKind Cmatch;
    public static TokenKind Cne;
    public static TokenKind Cnotcontains;
    public static TokenKind Cnotin;
    public static TokenKind Cnotlike;
    public static TokenKind Cnotmatch;
    public static TokenKind Colon;
    public static TokenKind ColonColon;
    public static TokenKind Comma;
    public static TokenKind Command;
    public static TokenKind Comment;
    public static TokenKind Configuration;
    public static TokenKind Continue;
    public static TokenKind Creplace;
    public static TokenKind Csplit;
    public static TokenKind Data;
    public static TokenKind Define;
    public static TokenKind Divide;
    public static TokenKind DivideEquals;
    public static TokenKind Do;
    public static TokenKind DollarParen;
    public static TokenKind Dot;
    public static TokenKind DotDot;
    public static TokenKind DynamicKeyword;
    public static TokenKind Dynamicparam;
    public static TokenKind Else;
    public static TokenKind ElseIf;
    public static TokenKind End;
    public static TokenKind EndOfInput;
    public static TokenKind Enum;
    public static TokenKind Equals;
    public static TokenKind Exclaim;
    public static TokenKind Exit;
    public static TokenKind Filter;
    public static TokenKind Finally;
    public static TokenKind For;
    public static TokenKind Foreach;
    public static TokenKind Format;
    public static TokenKind From;
    public static TokenKind Function;
    public static TokenKind Generic;
    public static TokenKind HereStringExpandable;
    public static TokenKind HereStringLiteral;
    public static TokenKind Hidden;
    public static TokenKind Icontains;
    public static TokenKind Identifier;
    public static TokenKind Ieq;
    public static TokenKind If;
    public static TokenKind Ige;
    public static TokenKind Igt;
    public static TokenKind Iin;
    public static TokenKind Ile;
    public static TokenKind Ilike;
    public static TokenKind Ilt;
    public static TokenKind Imatch;
    public static TokenKind In;
    public static TokenKind Ine;
    public static TokenKind InlineScript;
    public static TokenKind Inotcontains;
    public static TokenKind Inotin;
    public static TokenKind Inotlike;
    public static TokenKind Inotmatch;
    public static TokenKind Interface;
    public static TokenKind Ireplace;
    public static TokenKind Is;
    public static TokenKind IsNot;
    public static TokenKind Isplit;
    public static TokenKind Join;
    public static TokenKind LBracket;
    public static TokenKind LCurly;
    public static TokenKind LParen;
    public static TokenKind Label;
    public static TokenKind LineContinuation;
    public static TokenKind Minus;
    public static TokenKind MinusEquals;
    public static TokenKind MinusMinus;
    public static TokenKind Module;
    public static TokenKind Multiply;
    public static TokenKind MultiplyEquals;
    public static TokenKind Namespace;
    public static TokenKind NewLine;
    public static TokenKind Not;
    public static TokenKind Number;
    public static TokenKind Or;
    public static TokenKind OrOr;
    public static TokenKind Parallel;
    public static TokenKind Param;
    public static TokenKind Parameter;
    public static TokenKind Pipe;
    public static TokenKind Plus;
    public static TokenKind PlusEquals;
    public static TokenKind PlusPlus;
    public static TokenKind PostfixMinusMinus;
    public static TokenKind PostfixPlusPlus;
    public static TokenKind Private;
    public static TokenKind Process;
    public static TokenKind Public;
    public static TokenKind RBracket;
    public static TokenKind RCurly;
    public static TokenKind RParen;
    public static TokenKind RedirectInStd;
    public static TokenKind Redirection;
    public static TokenKind Rem;
    public static TokenKind RemainderEquals;
    public static TokenKind Return;
    public static TokenKind Semi;
    public static TokenKind Sequence;
    public static TokenKind Shl;
    public static TokenKind Shr;
    public static TokenKind SplattedVariable;
    public static TokenKind Static;
    public static TokenKind StringExpandable;
    public static TokenKind StringLiteral;
    public static TokenKind Switch;
    public static TokenKind Throw;
    public static TokenKind Trap;
    public static TokenKind Try;
    public static TokenKind Type;
    public static TokenKind Unknown;
    public static TokenKind Until;
    public static TokenKind Using;
    public static TokenKind Var;
    public static TokenKind Variable;
    public static TokenKind While;
    public static TokenKind Workflow;
    public static TokenKind Xor;
}
public static class System.Management.Automation.Language.TokenTraits : object {
    public static TokenFlags GetTraits(TokenKind kind);
    public static bool HasTrait(TokenKind kind, TokenFlags flag);
    public static string Text(TokenKind kind);
}
public class System.Management.Automation.Language.TrapStatementAst : StatementAst {
    public StatementBlockAst Body { get; }
    public TypeConstraintAst TrapType { get; }
    public TrapStatementAst(IScriptExtent extent, TypeConstraintAst trapType, StatementBlockAst body);
    public TypeConstraintAst get_TrapType();
    public StatementBlockAst get_Body();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.TryStatementAst : StatementAst {
    public StatementBlockAst Body { get; }
    public ReadOnlyCollection`1<CatchClauseAst> CatchClauses { get; }
    public StatementBlockAst Finally { get; }
    public TryStatementAst(IScriptExtent extent, StatementBlockAst body, IEnumerable`1<CatchClauseAst> catchClauses, StatementBlockAst finally);
    public StatementBlockAst get_Body();
    public ReadOnlyCollection`1<CatchClauseAst> get_CatchClauses();
    public StatementBlockAst get_Finally();
    public virtual Ast Copy();
}
[FlagsAttribute]
public enum System.Management.Automation.Language.TypeAttributes : Enum {
    public int value__;
    public static TypeAttributes Class;
    public static TypeAttributes Enum;
    public static TypeAttributes Interface;
    public static TypeAttributes None;
}
public class System.Management.Automation.Language.TypeConstraintAst : AttributeBaseAst {
    public TypeConstraintAst(IScriptExtent extent, ITypeName typeName);
    public TypeConstraintAst(IScriptExtent extent, Type type);
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.TypeDefinitionAst : StatementAst {
    public ReadOnlyCollection`1<AttributeAst> Attributes { get; }
    public ReadOnlyCollection`1<TypeConstraintAst> BaseTypes { get; }
    public bool IsClass { get; }
    public bool IsEnum { get; }
    public bool IsInterface { get; }
    public ReadOnlyCollection`1<MemberAst> Members { get; }
    public string Name { get; }
    public TypeAttributes TypeAttributes { get; }
    public TypeDefinitionAst(IScriptExtent extent, string name, IEnumerable`1<AttributeAst> attributes, IEnumerable`1<MemberAst> members, TypeAttributes typeAttributes, IEnumerable`1<TypeConstraintAst> baseTypes);
    public string get_Name();
    public ReadOnlyCollection`1<AttributeAst> get_Attributes();
    public ReadOnlyCollection`1<TypeConstraintAst> get_BaseTypes();
    public ReadOnlyCollection`1<MemberAst> get_Members();
    public TypeAttributes get_TypeAttributes();
    public bool get_IsEnum();
    public bool get_IsClass();
    public bool get_IsInterface();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.TypeExpressionAst : ExpressionAst {
    public Type StaticType { get; }
    public ITypeName TypeName { get; }
    public TypeExpressionAst(IScriptExtent extent, ITypeName typeName);
    public ITypeName get_TypeName();
    public virtual Ast Copy();
    public virtual Type get_StaticType();
}
public class System.Management.Automation.Language.TypeName : object {
    public string AssemblyName { get; }
    public IScriptExtent Extent { get; }
    public string FullName { get; }
    public bool IsArray { get; }
    public bool IsGeneric { get; }
    public string Name { get; }
    public TypeName(IScriptExtent extent, string name);
    public TypeName(IScriptExtent extent, string name, string assembly);
    public sealed virtual string get_FullName();
    public sealed virtual string get_Name();
    public sealed virtual string get_AssemblyName();
    public sealed virtual bool get_IsArray();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual IScriptExtent get_Extent();
    public sealed virtual Type GetReflectionType();
    public sealed virtual Type GetReflectionAttributeType();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Management.Automation.Language.UnaryExpressionAst : ExpressionAst {
    public ExpressionAst Child { get; }
    public Type StaticType { get; }
    public TokenKind TokenKind { get; }
    public UnaryExpressionAst(IScriptExtent extent, TokenKind tokenKind, ExpressionAst child);
    public TokenKind get_TokenKind();
    public ExpressionAst get_Child();
    public virtual Ast Copy();
    public virtual Type get_StaticType();
}
public class System.Management.Automation.Language.UsingExpressionAst : ExpressionAst {
    public ExpressionAst SubExpression { get; }
    public UsingExpressionAst(IScriptExtent extent, ExpressionAst expressionAst);
    public ExpressionAst get_SubExpression();
    public virtual Ast Copy();
    public static VariableExpressionAst ExtractUsingVariable(UsingExpressionAst usingExpressionAst);
}
public class System.Management.Automation.Language.UsingStatementAst : StatementAst {
    public StringConstantExpressionAst Alias { get; }
    public StringConstantExpressionAst Name { get; }
    public UsingStatementKind UsingStatementKind { get; }
    public UsingStatementAst(IScriptExtent extent, UsingStatementKind kind, StringConstantExpressionAst name);
    public UsingStatementAst(IScriptExtent extent, UsingStatementKind kind, StringConstantExpressionAst aliasName, StringConstantExpressionAst resolvedAliasAst);
    public UsingStatementKind get_UsingStatementKind();
    public StringConstantExpressionAst get_Name();
    public StringConstantExpressionAst get_Alias();
    public virtual Ast Copy();
}
public enum System.Management.Automation.Language.UsingStatementKind : Enum {
    public int value__;
    public static UsingStatementKind Assembly;
    public static UsingStatementKind Command;
    public static UsingStatementKind Module;
    public static UsingStatementKind Namespace;
    public static UsingStatementKind Type;
}
public class System.Management.Automation.Language.VariableExpressionAst : ExpressionAst {
    public bool Splatted { get; }
    public VariablePath VariablePath { get; }
    public VariableExpressionAst(IScriptExtent extent, string variableName, bool splatted);
    public VariableExpressionAst(IScriptExtent extent, VariablePath variablePath, bool splatted);
    public VariablePath get_VariablePath();
    public bool get_Splatted();
    public bool IsConstantVariable();
    public virtual Ast Copy();
}
public class System.Management.Automation.Language.VariableToken : Token {
    public string Name { get; }
    public VariablePath VariablePath { get; }
    public string get_Name();
    public VariablePath get_VariablePath();
}
public class System.Management.Automation.Language.WhileStatementAst : LoopStatementAst {
    public WhileStatementAst(IScriptExtent extent, string label, PipelineBaseAst condition, StatementBlockAst body);
    public virtual Ast Copy();
}
public static class System.Management.Automation.LanguagePrimitives : object {
    public static IEnumerable GetEnumerable(object obj);
    public static IEnumerator GetEnumerator(object obj);
    public static PSDataCollection`1<PSObject> GetPSDataCollection(object inputValue);
    public static bool Equals(object first, object second);
    public static bool Equals(object first, object second, bool ignoreCase);
    public static bool Equals(object first, object second, bool ignoreCase, IFormatProvider formatProvider);
    public static int Compare(object first, object second);
    public static int Compare(object first, object second, bool ignoreCase);
    public static int Compare(object first, object second, bool ignoreCase, IFormatProvider formatProvider);
    public static bool IsTrue(object obj);
    public static string ConvertTypeNameToPSTypeName(string typeName);
    public static object ConvertTo(object valueToConvert, Type resultType);
    public static object ConvertTo(object valueToConvert, Type resultType, IFormatProvider formatProvider);
    public static object ConvertPSObjectToType(PSObject valueToConvert, Type resultType, bool recursion, IFormatProvider formatProvider, bool ignoreUnknownMembers);
    public static T ConvertTo(object valueToConvert);
    public static bool TryConvertTo(object valueToConvert, T& result);
    public static bool TryConvertTo(object valueToConvert, IFormatProvider formatProvider, T& result);
    public static bool TryConvertTo(object valueToConvert, Type resultType, Object& result);
    public static bool TryConvertTo(object valueToConvert, Type resultType, IFormatProvider formatProvider, Object& result);
}
public class System.Management.Automation.LineBreakpoint : Breakpoint {
    public int Column { get; }
    public int Line { get; }
    public int get_Column();
    public int get_Line();
    public virtual string ToString();
}
public class System.Management.Automation.ListControl : PSControl {
    public List`1<ListControlEntry> Entries { get; }
    public ListControl(IEnumerable`1<ListControlEntry> entries);
    public List`1<ListControlEntry> get_Entries();
    public virtual string ToString();
}
public class System.Management.Automation.ListControlEntry : object {
    public List`1<ListControlEntryItem> Items { get; }
    public List`1<string> SelectedBy { get; }
    public ListControlEntry(IEnumerable`1<ListControlEntryItem> listItems);
    public ListControlEntry(IEnumerable`1<ListControlEntryItem> listItems, IEnumerable`1<string> selectedBy);
    public List`1<ListControlEntryItem> get_Items();
    public List`1<string> get_SelectedBy();
}
public class System.Management.Automation.ListControlEntryItem : object {
    public DisplayEntry DisplayEntry { get; }
    public string Label { get; }
    public ListControlEntryItem(string label, DisplayEntry entry);
    public string get_Label();
    public DisplayEntry get_DisplayEntry();
}
public abstract class System.Management.Automation.LoopFlowException : FlowControlException {
    public string Label { get; }
    public string get_Label();
}
public class System.Management.Automation.MetadataException : RuntimeException {
    protected MetadataException(SerializationInfo info, StreamingContext context);
    public MetadataException(string message);
    public MetadataException(string message, Exception innerException);
}
public class System.Management.Automation.MethodException : ExtendedTypeSystemException {
    public MethodException(string message);
    public MethodException(string message, Exception innerException);
    protected MethodException(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.MethodInvocationException : MethodException {
    public MethodInvocationException(string message);
    public MethodInvocationException(string message, Exception innerException);
    protected MethodInvocationException(SerializationInfo info, StreamingContext context);
}
public enum System.Management.Automation.ModuleAccessMode : Enum {
    public int value__;
    public static ModuleAccessMode Constant;
    public static ModuleAccessMode ReadOnly;
    public static ModuleAccessMode ReadWrite;
}
public class System.Management.Automation.ModuleIntrinsics : object {
    public static string GetModulePath(string currentModulePath, string systemWideModulePath, string personalModulePath);
}
public enum System.Management.Automation.ModuleType : Enum {
    public int value__;
    public static ModuleType Binary;
    public static ModuleType Cim;
    public static ModuleType Manifest;
    public static ModuleType Script;
    public static ModuleType Workflow;
}
[AttributeUsageAttribute("4")]
public class System.Management.Automation.OutputTypeAttribute : CmdletMetadataAttribute {
    public String[] ParameterSetName { get; public set; }
    public string ProviderCmdlet { get; public set; }
    public PSTypeName[] Type { get; }
    public OutputTypeAttribute(Type[] type);
    public OutputTypeAttribute(String[] type);
    public PSTypeName[] get_Type();
    public string get_ProviderCmdlet();
    public void set_ProviderCmdlet(string value);
    public String[] get_ParameterSetName();
    public void set_ParameterSetName(String[] value);
}
public class System.Management.Automation.PagingParameters : object {
    public ulong First { get; public set; }
    public SwitchParameter IncludeTotalCount { get; public set; }
    public ulong Skip { get; public set; }
    public SwitchParameter get_IncludeTotalCount();
    public void set_IncludeTotalCount(SwitchParameter value);
    public ulong get_Skip();
    public void set_Skip(ulong value);
    public ulong get_First();
    public void set_First(ulong value);
    public PSObject NewTotalCount(ulong totalCount, double accuracy);
}
[AttributeUsageAttribute("384")]
public class System.Management.Automation.ParameterAttribute : ParsingBaseAttribute {
    public static string AllParameterSets;
    public bool DontShow { get; public set; }
    public string HelpMessage { get; public set; }
    public string HelpMessageBaseName { get; public set; }
    public string HelpMessageResourceId { get; public set; }
    public bool Mandatory { get; public set; }
    public string ParameterSetName { get; public set; }
    public int Position { get; public set; }
    public bool ValueFromPipeline { get; public set; }
    public bool ValueFromPipelineByPropertyName { get; public set; }
    public bool ValueFromRemainingArguments { get; public set; }
    public int get_Position();
    public void set_Position(int value);
    public string get_ParameterSetName();
    public void set_ParameterSetName(string value);
    public bool get_Mandatory();
    public void set_Mandatory(bool value);
    public bool get_ValueFromPipeline();
    public void set_ValueFromPipeline(bool value);
    public bool get_ValueFromPipelineByPropertyName();
    public void set_ValueFromPipelineByPropertyName(bool value);
    public bool get_ValueFromRemainingArguments();
    public void set_ValueFromRemainingArguments(bool value);
    public string get_HelpMessage();
    public void set_HelpMessage(string value);
    public string get_HelpMessageBaseName();
    public void set_HelpMessageBaseName(string value);
    public string get_HelpMessageResourceId();
    public void set_HelpMessageResourceId(string value);
    public bool get_DontShow();
    public void set_DontShow(bool value);
}
public class System.Management.Automation.ParameterBindingException : RuntimeException {
    public InvocationInfo CommandInvocation { get; }
    public string ErrorId { get; }
    public long Line { get; }
    public string Message { get; }
    public long Offset { get; }
    public string ParameterName { get; }
    public Type ParameterType { get; }
    public Type TypeSpecified { get; }
    protected ParameterBindingException(SerializationInfo info, StreamingContext context);
    public ParameterBindingException(string message);
    public ParameterBindingException(string message, Exception innerException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
    public string get_ParameterName();
    public Type get_ParameterType();
    public Type get_TypeSpecified();
    public string get_ErrorId();
    public long get_Line();
    public long get_Offset();
    public InvocationInfo get_CommandInvocation();
}
public class System.Management.Automation.ParameterMetadata : object {
    public Collection`1<string> Aliases { get; }
    public Collection`1<Attribute> Attributes { get; }
    public bool IsDynamic { get; public set; }
    public string Name { get; public set; }
    public Dictionary`2<string, ParameterSetMetadata> ParameterSets { get; }
    public Type ParameterType { get; public set; }
    public bool SwitchParameter { get; }
    public ParameterMetadata(string name);
    public ParameterMetadata(string name, Type parameterType);
    public ParameterMetadata(ParameterMetadata other);
    public string get_Name();
    public void set_Name(string value);
    public Type get_ParameterType();
    public void set_ParameterType(Type value);
    public Dictionary`2<string, ParameterSetMetadata> get_ParameterSets();
    public bool get_IsDynamic();
    public void set_IsDynamic(bool value);
    public Collection`1<string> get_Aliases();
    public Collection`1<Attribute> get_Attributes();
    public bool get_SwitchParameter();
    public static Dictionary`2<string, ParameterMetadata> GetParameterMetadata(Type type);
}
public class System.Management.Automation.ParameterSetMetadata : object {
    public string HelpMessage { get; public set; }
    public string HelpMessageBaseName { get; public set; }
    public string HelpMessageResourceId { get; public set; }
    public bool IsMandatory { get; public set; }
    public int Position { get; public set; }
    public bool ValueFromPipeline { get; public set; }
    public bool ValueFromPipelineByPropertyName { get; public set; }
    public bool ValueFromRemainingArguments { get; public set; }
    public bool get_IsMandatory();
    public void set_IsMandatory(bool value);
    public int get_Position();
    public void set_Position(int value);
    public bool get_ValueFromPipeline();
    public void set_ValueFromPipeline(bool value);
    public bool get_ValueFromPipelineByPropertyName();
    public void set_ValueFromPipelineByPropertyName(bool value);
    public bool get_ValueFromRemainingArguments();
    public void set_ValueFromRemainingArguments(bool value);
    public string get_HelpMessage();
    public void set_HelpMessage(string value);
    public string get_HelpMessageBaseName();
    public void set_HelpMessageBaseName(string value);
    public string get_HelpMessageResourceId();
    public void set_HelpMessageResourceId(string value);
}
public class System.Management.Automation.ParentContainsErrorRecordException : SystemException {
    public string Message { get; }
    public ParentContainsErrorRecordException(Exception wrapperException);
    public ParentContainsErrorRecordException(string message);
    public ParentContainsErrorRecordException(string message, Exception innerException);
    protected ParentContainsErrorRecordException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.ParseException : RuntimeException {
    public ParseError[] Errors { get; }
    public string Message { get; }
    protected ParseException(SerializationInfo info, StreamingContext context);
    public ParseException(string message);
    public ParseException(string message, Exception innerException);
    public ParseException(ParseError[] errors);
    public ParseError[] get_Errors();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public class System.Management.Automation.ParsingMetadataException : MetadataException {
    protected ParsingMetadataException(SerializationInfo info, StreamingContext context);
    public ParsingMetadataException(string message);
    public ParsingMetadataException(string message, Exception innerException);
}
public class System.Management.Automation.PathInfo : object {
    public PSDriveInfo Drive { get; }
    public string Path { get; }
    public ProviderInfo Provider { get; }
    public string ProviderPath { get; }
    public PSDriveInfo get_Drive();
    public ProviderInfo get_Provider();
    public string get_ProviderPath();
    public string get_Path();
    public virtual string ToString();
}
public class System.Management.Automation.PathInfoStack : Stack`1<PathInfo> {
    public string Name { get; }
    public string get_Name();
}
public class System.Management.Automation.PathIntrinsics : object {
    public PathInfo CurrentFileSystemLocation { get; }
    public PathInfo CurrentLocation { get; }
    public PathInfo get_CurrentLocation();
    public PathInfo CurrentProviderLocation(string providerName);
    public PathInfo get_CurrentFileSystemLocation();
    public PathInfo SetLocation(string path);
    public void PushCurrentLocation(string stackName);
    public PathInfo PopLocation(string stackName);
    public PathInfoStack LocationStack(string stackName);
    public PathInfoStack SetDefaultLocationStack(string stackName);
    public Collection`1<PathInfo> GetResolvedPSPathFromPSPath(string path);
    public Collection`1<string> GetResolvedProviderPathFromPSPath(string path, ProviderInfo& provider);
    public Collection`1<string> GetResolvedProviderPathFromProviderPath(string path, string providerId);
    public string GetUnresolvedProviderPathFromPSPath(string path);
    public string GetUnresolvedProviderPathFromPSPath(string path, ProviderInfo& provider, PSDriveInfo& drive);
    public bool IsProviderQualified(string path);
    public bool IsPSAbsolute(string path, String& driveName);
    public string Combine(string parent, string child);
    public string ParseParent(string path, string root);
    public string ParseChildName(string path);
    public string NormalizeRelativePath(string path, string basePath);
    public bool IsValid(string path);
}
public class System.Management.Automation.PerformanceData.CounterInfo : ValueType {
    private int __Asmmeta_Private_Field;
    public int Id { get; }
    public string Name { get; }
    public CounterType Type { get; }
    public CounterInfo(int id, CounterType type, string name);
    public CounterInfo(int id, CounterType type);
    public string get_Name();
    public int get_Id();
    public CounterType get_Type();
}
public abstract class System.Management.Automation.PerformanceData.CounterSetInstanceBase : object {
    protected ConcurrentDictionary`2<int, CounterType> _counterIdToTypeMapping;
    protected ConcurrentDictionary`2<string, int> _counterNameToIdMapping;
    protected CounterSetRegistrarBase _counterSetRegistrarBase;
    protected CounterSetInstanceBase(CounterSetRegistrarBase counterSetRegistrarInst);
    protected bool RetrieveTargetCounterIdIfValid(int counterId, bool isNumerator, Int32& targetCounterId);
    public abstract virtual bool UpdateCounterByValue(int counterId, long stepAmount, bool isNumerator);
    public abstract virtual bool UpdateCounterByValue(string counterName, long stepAmount, bool isNumerator);
    public abstract virtual bool SetCounterValue(int counterId, long counterValue, bool isNumerator);
    public abstract virtual bool SetCounterValue(string counterName, long counterValue, bool isNumerator);
    public abstract virtual bool GetCounterValue(int counterId, bool isNumerator, Int64& counterValue);
    public abstract virtual bool GetCounterValue(string counterName, bool isNumerator, Int64& counterValue);
    public abstract virtual void Dispose();
}
public abstract class System.Management.Automation.PerformanceData.CounterSetRegistrarBase : object {
    protected CounterSetInstanceBase _counterSetInstanceBase;
    public CounterInfo[] CounterInfoArray { get; }
    public Guid CounterSetId { get; }
    public CounterSetInstanceType CounterSetInstType { get; }
    public CounterSetInstanceBase CounterSetInstance { get; }
    public string CounterSetName { get; }
    public Guid ProviderId { get; }
    protected CounterSetRegistrarBase(Guid providerId, Guid counterSetId, CounterSetInstanceType counterSetInstType, CounterInfo[] counterInfoArray, string counterSetName);
    protected CounterSetRegistrarBase(CounterSetRegistrarBase srcCounterSetRegistrarBase);
    protected abstract virtual CounterSetInstanceBase CreateCounterSetInstance();
    public Guid get_ProviderId();
    public Guid get_CounterSetId();
    public string get_CounterSetName();
    public CounterSetInstanceType get_CounterSetInstType();
    public CounterInfo[] get_CounterInfoArray();
    public CounterSetInstanceBase get_CounterSetInstance();
    public abstract virtual void DisposeCounterSetInstance();
}
public class System.Management.Automation.PerformanceData.PSCounterSetInstance : CounterSetInstanceBase {
    public PSCounterSetInstance(CounterSetRegistrarBase counterSetRegBaseObj);
    protected virtual void Finalize();
    protected virtual void Dispose(bool disposing);
    public virtual void Dispose();
    public virtual bool UpdateCounterByValue(int counterId, long stepAmount, bool isNumerator);
    public virtual bool UpdateCounterByValue(string counterName, long stepAmount, bool isNumerator);
    public virtual bool SetCounterValue(int counterId, long counterValue, bool isNumerator);
    public virtual bool SetCounterValue(string counterName, long counterValue, bool isNumerator);
    public virtual bool GetCounterValue(int counterId, bool isNumerator, Int64& counterValue);
    public virtual bool GetCounterValue(string counterName, bool isNumerator, Int64& counterValue);
}
public class System.Management.Automation.PerformanceData.PSCounterSetRegistrar : CounterSetRegistrarBase {
    public PSCounterSetRegistrar(Guid providerId, Guid counterSetId, CounterSetInstanceType counterSetInstType, CounterInfo[] counterInfoArray, string counterSetName);
    public PSCounterSetRegistrar(PSCounterSetRegistrar srcPSCounterSetRegistrar);
    protected virtual CounterSetInstanceBase CreateCounterSetInstance();
    public virtual void DisposeCounterSetInstance();
}
public class System.Management.Automation.PerformanceData.PSPerfCountersMgr : object {
    public static PSPerfCountersMgr Instance { get; }
    protected virtual void Finalize();
    public static PSPerfCountersMgr get_Instance();
    public string GetCounterSetInstanceName();
    public bool IsCounterSetRegistered(string counterSetName, Guid& counterSetId);
    public bool IsCounterSetRegistered(Guid counterSetId, CounterSetInstanceBase& counterSetInst);
    public bool AddCounterSetInstance(CounterSetRegistrarBase counterSetRegistrarInstance);
    public bool UpdateCounterByValue(Guid counterSetId, int counterId, long stepAmount, bool isNumerator);
    public bool UpdateCounterByValue(Guid counterSetId, string counterName, long stepAmount, bool isNumerator);
    public bool UpdateCounterByValue(string counterSetName, int counterId, long stepAmount, bool isNumerator);
    public bool UpdateCounterByValue(string counterSetName, string counterName, long stepAmount, bool isNumerator);
    public bool SetCounterValue(Guid counterSetId, int counterId, long counterValue, bool isNumerator);
    public bool SetCounterValue(Guid counterSetId, string counterName, long counterValue, bool isNumerator);
    public bool SetCounterValue(string counterSetName, int counterId, long counterValue, bool isNumerator);
    public bool SetCounterValue(string counterSetName, string counterName, long counterValue, bool isNumerator);
}
public class System.Management.Automation.PipelineClosedException : RuntimeException {
    public PipelineClosedException(string message);
    public PipelineClosedException(string message, Exception innerException);
    protected PipelineClosedException(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.PipelineDepthException : SystemException {
    public int CallDepth { get; }
    public ErrorRecord ErrorRecord { get; }
    public PipelineDepthException(string message);
    public PipelineDepthException(string message, Exception innerException);
    protected PipelineDepthException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual ErrorRecord get_ErrorRecord();
    public int get_CallDepth();
}
public class System.Management.Automation.PipelineStoppedException : RuntimeException {
    protected PipelineStoppedException(SerializationInfo info, StreamingContext context);
    public PipelineStoppedException(string message);
    public PipelineStoppedException(string message, Exception innerException);
}
public class System.Management.Automation.PowerShell : object {
    public PSCommand Commands { get; public set; }
    public bool HadErrors { get; }
    public string HistoryString { get; public set; }
    public Guid InstanceId { get; }
    public PSInvocationStateInfo InvocationStateInfo { get; }
    public bool IsNested { get; }
    public bool IsRunspaceOwner { get; }
    public Runspace Runspace { get; public set; }
    public RunspacePool RunspacePool { get; public set; }
    public PSDataStreams Streams { get; }
    public static PowerShell Create();
    public static PowerShell Create(RunspaceMode runspace);
    public static PowerShell Create(InitialSessionState initialSessionState);
    public PowerShell CreateNestedPowerShell();
    public PowerShell AddCommand(string cmdlet);
    public PowerShell AddCommand(string cmdlet, bool useLocalScope);
    public PowerShell AddScript(string script);
    public PowerShell AddScript(string script, bool useLocalScope);
    public PowerShell AddCommand(CommandInfo commandInfo);
    public PowerShell AddParameter(string parameterName, object value);
    public PowerShell AddParameter(string parameterName);
    public PowerShell AddParameters(IList parameters);
    public PowerShell AddParameters(IDictionary parameters);
    public PowerShell AddArgument(object value);
    public PowerShell AddStatement();
    public PSCommand get_Commands();
    public void set_Commands(PSCommand value);
    public PSDataStreams get_Streams();
    public Guid get_InstanceId();
    public PSInvocationStateInfo get_InvocationStateInfo();
    public bool get_IsNested();
    public bool get_HadErrors();
    public void add_InvocationStateChanged(EventHandler`1<PSInvocationStateChangedEventArgs> value);
    public void remove_InvocationStateChanged(EventHandler`1<PSInvocationStateChangedEventArgs> value);
    public Runspace get_Runspace();
    public void set_Runspace(Runspace value);
    public RunspacePool get_RunspacePool();
    public void set_RunspacePool(RunspacePool value);
    public Collection`1<PSObject> Connect();
    public IAsyncResult ConnectAsync();
    public IAsyncResult ConnectAsync(PSDataCollection`1<PSObject> output, AsyncCallback invocationCallback, object state);
    public Collection`1<PSObject> Invoke();
    public Collection`1<PSObject> Invoke(IEnumerable input);
    public Collection`1<PSObject> Invoke(IEnumerable input, PSInvocationSettings settings);
    public Collection`1<T> Invoke();
    public Collection`1<T> Invoke(IEnumerable input);
    public Collection`1<T> Invoke(IEnumerable input, PSInvocationSettings settings);
    public void Invoke(IEnumerable input, IList`1<T> output);
    public void Invoke(IEnumerable input, IList`1<T> output, PSInvocationSettings settings);
    public void Invoke(PSDataCollection`1<TInput> input, PSDataCollection`1<TOutput> output, PSInvocationSettings settings);
    public IAsyncResult BeginInvoke();
    public IAsyncResult BeginInvoke(PSDataCollection`1<T> input);
    public IAsyncResult BeginInvoke(PSDataCollection`1<T> input, PSInvocationSettings settings, AsyncCallback callback, object state);
    public IAsyncResult BeginInvoke(PSDataCollection`1<TInput> input, PSDataCollection`1<TOutput> output);
    public IAsyncResult BeginInvoke(PSDataCollection`1<TInput> input, PSDataCollection`1<TOutput> output, PSInvocationSettings settings, AsyncCallback callback, object state);
    public PSDataCollection`1<PSObject> EndInvoke(IAsyncResult asyncResult);
    public void Stop();
    public IAsyncResult BeginStop(AsyncCallback callback, object state);
    public void EndStop(IAsyncResult asyncResult);
    public sealed virtual void Dispose();
    public bool get_IsRunspaceOwner();
    public string get_HistoryString();
    public void set_HistoryString(string value);
    public PSJobProxy AsJobProxy();
}
public class System.Management.Automation.PowerShellStreams`2 : object {
    public PSDataCollection`1<DebugRecord> DebugStream { get; public set; }
    public PSDataCollection`1<ErrorRecord> ErrorStream { get; public set; }
    public PSDataCollection`1<InformationRecord> InformationStream { get; public set; }
    public PSDataCollection`1<TInput> InputStream { get; public set; }
    public PSDataCollection`1<TOutput> OutputStream { get; public set; }
    public PSDataCollection`1<ProgressRecord> ProgressStream { get; public set; }
    public PSDataCollection`1<VerboseRecord> VerboseStream { get; public set; }
    public PSDataCollection`1<WarningRecord> WarningStream { get; public set; }
    public PowerShellStreams`2(PSDataCollection`1<TInput> pipelineInput);
    public sealed virtual void Dispose();
    public PSDataCollection`1<TInput> get_InputStream();
    public void set_InputStream(PSDataCollection`1<TInput> value);
    public PSDataCollection`1<TOutput> get_OutputStream();
    public void set_OutputStream(PSDataCollection`1<TOutput> value);
    public PSDataCollection`1<ErrorRecord> get_ErrorStream();
    public void set_ErrorStream(PSDataCollection`1<ErrorRecord> value);
    public PSDataCollection`1<WarningRecord> get_WarningStream();
    public void set_WarningStream(PSDataCollection`1<WarningRecord> value);
    public PSDataCollection`1<ProgressRecord> get_ProgressStream();
    public void set_ProgressStream(PSDataCollection`1<ProgressRecord> value);
    public PSDataCollection`1<VerboseRecord> get_VerboseStream();
    public void set_VerboseStream(PSDataCollection`1<VerboseRecord> value);
    public PSDataCollection`1<DebugRecord> get_DebugStream();
    public void set_DebugStream(PSDataCollection`1<DebugRecord> value);
    public PSDataCollection`1<InformationRecord> get_InformationStream();
    public void set_InformationStream(PSDataCollection`1<InformationRecord> value);
    public void CloseAll();
}
public enum System.Management.Automation.PowerShellStreamType : Enum {
    public int value__;
    public static PowerShellStreamType Debug;
    public static PowerShellStreamType Error;
    public static PowerShellStreamType Information;
    public static PowerShellStreamType Input;
    public static PowerShellStreamType Output;
    public static PowerShellStreamType Progress;
    public static PowerShellStreamType Verbose;
    public static PowerShellStreamType Warning;
}
public class System.Management.Automation.ProgressRecord : object {
    public string Activity { get; public set; }
    public int ActivityId { get; }
    public string CurrentOperation { get; public set; }
    public int ParentActivityId { get; public set; }
    public int PercentComplete { get; public set; }
    public ProgressRecordType RecordType { get; public set; }
    public int SecondsRemaining { get; public set; }
    public string StatusDescription { get; public set; }
    public ProgressRecord(int activityId, string activity, string statusDescription);
    public int get_ActivityId();
    public int get_ParentActivityId();
    public void set_ParentActivityId(int value);
    public string get_Activity();
    public void set_Activity(string value);
    public string get_StatusDescription();
    public void set_StatusDescription(string value);
    public string get_CurrentOperation();
    public void set_CurrentOperation(string value);
    public int get_PercentComplete();
    public void set_PercentComplete(int value);
    public int get_SecondsRemaining();
    public void set_SecondsRemaining(int value);
    public ProgressRecordType get_RecordType();
    public void set_RecordType(ProgressRecordType value);
    public virtual string ToString();
}
public enum System.Management.Automation.ProgressRecordType : Enum {
    public int value__;
    public static ProgressRecordType Completed;
    public static ProgressRecordType Processing;
}
public class System.Management.Automation.PropertyCmdletProviderIntrinsics : object {
    public Collection`1<PSObject> Get(string path, Collection`1<string> providerSpecificPickList);
    public Collection`1<PSObject> Get(String[] path, Collection`1<string> providerSpecificPickList, bool literalPath);
    public Collection`1<PSObject> Set(string path, PSObject propertyValue);
    public Collection`1<PSObject> Set(String[] path, PSObject propertyValue, bool force, bool literalPath);
    public void Clear(string path, Collection`1<string> propertyToClear);
    public void Clear(String[] path, Collection`1<string> propertyToClear, bool force, bool literalPath);
    public Collection`1<PSObject> New(string path, string propertyName, string propertyTypeName, object value);
    public Collection`1<PSObject> New(String[] path, string propertyName, string propertyTypeName, object value, bool force, bool literalPath);
    public void Remove(string path, string propertyName);
    public void Remove(String[] path, string propertyName, bool force, bool literalPath);
    public Collection`1<PSObject> Rename(string path, string sourceProperty, string destinationProperty);
    public Collection`1<PSObject> Rename(String[] path, string sourceProperty, string destinationProperty, bool force, bool literalPath);
    public Collection`1<PSObject> Copy(string sourcePath, string sourceProperty, string destinationPath, string destinationProperty);
    public Collection`1<PSObject> Copy(String[] sourcePath, string sourceProperty, string destinationPath, string destinationProperty, bool force, bool literalPath);
    public Collection`1<PSObject> Move(string sourcePath, string sourceProperty, string destinationPath, string destinationProperty);
    public Collection`1<PSObject> Move(String[] sourcePath, string sourceProperty, string destinationPath, string destinationProperty, bool force, bool literalPath);
}
public class System.Management.Automation.PropertyNotFoundException : ExtendedTypeSystemException {
    public PropertyNotFoundException(string message);
    public PropertyNotFoundException(string message, Exception innerException);
    protected PropertyNotFoundException(SerializationInfo info, StreamingContext context);
}
public abstract class System.Management.Automation.Provider.CmdletProvider : object {
    public PSCredential Credential { get; }
    public PSTransactionContext CurrentPSTransaction { get; }
    protected object DynamicParameters { get; }
    public Collection`1<string> Exclude { get; }
    public string Filter { get; }
    public SwitchParameter Force { get; }
    public PSHost Host { get; }
    public Collection`1<string> Include { get; }
    public CommandInvocationIntrinsics InvokeCommand { get; }
    public ProviderIntrinsics InvokeProvider { get; }
    protected PSDriveInfo PSDriveInfo { get; }
    protected internal ProviderInfo ProviderInfo { get; }
    public SessionState SessionState { get; }
    public bool Stopping { get; }
    protected internal virtual void StopProcessing();
    protected virtual ProviderInfo Start(ProviderInfo providerInfo);
    protected virtual object StartDynamicParameters();
    protected virtual void Stop();
    public bool get_Stopping();
    public SessionState get_SessionState();
    public ProviderIntrinsics get_InvokeProvider();
    public CommandInvocationIntrinsics get_InvokeCommand();
    public PSCredential get_Credential();
    protected internal ProviderInfo get_ProviderInfo();
    protected PSDriveInfo get_PSDriveInfo();
    protected object get_DynamicParameters();
    public SwitchParameter get_Force();
    public string get_Filter();
    public Collection`1<string> get_Include();
    public Collection`1<string> get_Exclude();
    public PSHost get_Host();
    public virtual string GetResourceString(string baseName, string resourceId);
    public void ThrowTerminatingError(ErrorRecord errorRecord);
    public bool ShouldProcess(string target);
    public bool ShouldProcess(string target, string action);
    public bool ShouldProcess(string verboseDescription, string verboseWarning, string caption);
    public bool ShouldProcess(string verboseDescription, string verboseWarning, string caption, ShouldProcessReason& shouldProcessReason);
    public bool ShouldContinue(string query, string caption);
    public bool ShouldContinue(string query, string caption, Boolean& yesToAll, Boolean& noToAll);
    public bool TransactionAvailable();
    public PSTransactionContext get_CurrentPSTransaction();
    public void WriteVerbose(string text);
    public void WriteWarning(string text);
    public void WriteProgress(ProgressRecord progressRecord);
    public void WriteDebug(string text);
    public void WriteInformation(InformationRecord record);
    public void WriteInformation(object messageData, String[] tags);
    public void WriteItemObject(object item, string path, bool isContainer);
    public void WritePropertyObject(object propertyValue, string path);
    public void WriteSecurityDescriptorObject(ObjectSecurity securityDescriptor, string path);
    public void WriteError(ErrorRecord errorRecord);
}
[AttributeUsageAttribute("4")]
public class System.Management.Automation.Provider.CmdletProviderAttribute : Attribute {
    public ProviderCapabilities ProviderCapabilities { get; }
    public string ProviderName { get; }
    public CmdletProviderAttribute(string providerName, ProviderCapabilities providerCapabilities);
    public string get_ProviderName();
    public ProviderCapabilities get_ProviderCapabilities();
}
public abstract class System.Management.Automation.Provider.ContainerCmdletProvider : ItemCmdletProvider {
    protected virtual void GetChildItems(string path, bool recurse);
    protected virtual void GetChildItems(string path, bool recurse, UInt32 depth);
    protected virtual object GetChildItemsDynamicParameters(string path, bool recurse);
    protected virtual void GetChildNames(string path, ReturnContainers returnContainers);
    protected virtual bool ConvertPath(string path, string filter, String& updatedPath, String& updatedFilter);
    protected virtual object GetChildNamesDynamicParameters(string path);
    protected virtual void RenameItem(string path, string newName);
    protected virtual object RenameItemDynamicParameters(string path, string newName);
    protected virtual void NewItem(string path, string itemTypeName, object newItemValue);
    protected virtual object NewItemDynamicParameters(string path, string itemTypeName, object newItemValue);
    protected virtual void RemoveItem(string path, bool recurse);
    protected virtual object RemoveItemDynamicParameters(string path, bool recurse);
    protected virtual bool HasChildItems(string path);
    protected virtual void CopyItem(string path, string copyPath, bool recurse);
    protected virtual object CopyItemDynamicParameters(string path, string destination, bool recurse);
}
public abstract class System.Management.Automation.Provider.DriveCmdletProvider : CmdletProvider {
    protected virtual PSDriveInfo NewDrive(PSDriveInfo drive);
    protected virtual object NewDriveDynamicParameters();
    protected virtual PSDriveInfo RemoveDrive(PSDriveInfo drive);
    protected virtual Collection`1<PSDriveInfo> InitializeDefaultDrives();
}
public interface System.Management.Automation.Provider.ICmdletProviderSupportsHelp {
    public abstract virtual string GetHelpMaml(string helpItemName, string path);
}
public interface System.Management.Automation.Provider.IContentCmdletProvider {
    public abstract virtual IContentReader GetContentReader(string path);
    public abstract virtual object GetContentReaderDynamicParameters(string path);
    public abstract virtual IContentWriter GetContentWriter(string path);
    public abstract virtual object GetContentWriterDynamicParameters(string path);
    public abstract virtual void ClearContent(string path);
    public abstract virtual object ClearContentDynamicParameters(string path);
}
public interface System.Management.Automation.Provider.IContentReader {
    public abstract virtual IList Read(long readCount);
    public abstract virtual void Seek(long offset, SeekOrigin origin);
    public abstract virtual void Close();
}
public interface System.Management.Automation.Provider.IContentWriter {
    public abstract virtual IList Write(IList content);
    public abstract virtual void Seek(long offset, SeekOrigin origin);
    public abstract virtual void Close();
}
public interface System.Management.Automation.Provider.IDynamicPropertyCmdletProvider {
    public abstract virtual void NewProperty(string path, string propertyName, string propertyTypeName, object value);
    public abstract virtual object NewPropertyDynamicParameters(string path, string propertyName, string propertyTypeName, object value);
    public abstract virtual void RemoveProperty(string path, string propertyName);
    public abstract virtual object RemovePropertyDynamicParameters(string path, string propertyName);
    public abstract virtual void RenameProperty(string path, string sourceProperty, string destinationProperty);
    public abstract virtual object RenamePropertyDynamicParameters(string path, string sourceProperty, string destinationProperty);
    public abstract virtual void CopyProperty(string sourcePath, string sourceProperty, string destinationPath, string destinationProperty);
    public abstract virtual object CopyPropertyDynamicParameters(string sourcePath, string sourceProperty, string destinationPath, string destinationProperty);
    public abstract virtual void MoveProperty(string sourcePath, string sourceProperty, string destinationPath, string destinationProperty);
    public abstract virtual object MovePropertyDynamicParameters(string sourcePath, string sourceProperty, string destinationPath, string destinationProperty);
}
public interface System.Management.Automation.Provider.IPropertyCmdletProvider {
    public abstract virtual void GetProperty(string path, Collection`1<string> providerSpecificPickList);
    public abstract virtual object GetPropertyDynamicParameters(string path, Collection`1<string> providerSpecificPickList);
    public abstract virtual void SetProperty(string path, PSObject propertyValue);
    public abstract virtual object SetPropertyDynamicParameters(string path, PSObject propertyValue);
    public abstract virtual void ClearProperty(string path, Collection`1<string> propertyToClear);
    public abstract virtual object ClearPropertyDynamicParameters(string path, Collection`1<string> propertyToClear);
}
public interface System.Management.Automation.Provider.ISecurityDescriptorCmdletProvider {
    public abstract virtual void GetSecurityDescriptor(string path, AccessControlSections includeSections);
    public abstract virtual void SetSecurityDescriptor(string path, ObjectSecurity securityDescriptor);
    public abstract virtual ObjectSecurity NewSecurityDescriptorFromPath(string path, AccessControlSections includeSections);
    public abstract virtual ObjectSecurity NewSecurityDescriptorOfType(string type, AccessControlSections includeSections);
}
public abstract class System.Management.Automation.Provider.ItemCmdletProvider : DriveCmdletProvider {
    protected virtual void GetItem(string path);
    protected virtual object GetItemDynamicParameters(string path);
    protected virtual void SetItem(string path, object value);
    protected virtual object SetItemDynamicParameters(string path, object value);
    protected virtual void ClearItem(string path);
    protected virtual object ClearItemDynamicParameters(string path);
    protected virtual void InvokeDefaultAction(string path);
    protected virtual object InvokeDefaultActionDynamicParameters(string path);
    protected virtual bool ItemExists(string path);
    protected virtual object ItemExistsDynamicParameters(string path);
    protected abstract virtual bool IsValidPath(string path);
    protected virtual String[] ExpandPath(string path);
}
public abstract class System.Management.Automation.Provider.NavigationCmdletProvider : ContainerCmdletProvider {
    protected virtual string MakePath(string parent, string child);
    protected string MakePath(string parent, string child, bool childIsLeaf);
    protected virtual string GetParentPath(string path, string root);
    protected virtual string NormalizeRelativePath(string path, string basePath);
    protected virtual string GetChildName(string path);
    protected virtual bool IsItemContainer(string path);
    protected virtual void MoveItem(string path, string destination);
    protected virtual object MoveItemDynamicParameters(string path, string destination);
}
[FlagsAttribute]
public enum System.Management.Automation.Provider.ProviderCapabilities : Enum {
    public int value__;
    public static ProviderCapabilities Credentials;
    public static ProviderCapabilities Exclude;
    public static ProviderCapabilities ExpandWildcards;
    public static ProviderCapabilities Filter;
    public static ProviderCapabilities Include;
    public static ProviderCapabilities None;
    public static ProviderCapabilities ShouldProcess;
    public static ProviderCapabilities Transactions;
}
public static class System.Management.Automation.ProviderCmdlet : object {
    public static string AddContent;
    public static string ClearContent;
    public static string ClearItem;
    public static string ClearItemProperty;
    public static string ConvertPath;
    public static string CopyItem;
    public static string CopyItemProperty;
    public static string GetAcl;
    public static string GetChildItem;
    public static string GetContent;
    public static string GetItem;
    public static string GetItemProperty;
    public static string GetLocation;
    public static string GetPSDrive;
    public static string GetPSProvider;
    public static string InvokeItem;
    public static string JoinPath;
    public static string MoveItem;
    public static string MoveItemProperty;
    public static string NewItem;
    public static string NewItemProperty;
    public static string NewPSDrive;
    public static string PopLocation;
    public static string PushLocation;
    public static string RemoveItem;
    public static string RemoveItemProperty;
    public static string RemovePSDrive;
    public static string RenameItem;
    public static string RenameItemProperty;
    public static string ResolvePath;
    public static string SetAcl;
    public static string SetContent;
    public static string SetItem;
    public static string SetItemProperty;
    public static string SetLocation;
    public static string SplitPath;
    public static string TestPath;
}
public class System.Management.Automation.ProviderInfo : object {
    public ProviderCapabilities Capabilities { get; }
    public string Description { get; public set; }
    public Collection`1<PSDriveInfo> Drives { get; }
    public string HelpFile { get; }
    public string Home { get; public set; }
    public Type ImplementingType { get; }
    public PSModuleInfo Module { get; }
    public string ModuleName { get; }
    public string Name { get; }
    public PSSnapInInfo PSSnapIn { get; }
    protected ProviderInfo(ProviderInfo providerInfo);
    public Type get_ImplementingType();
    public string get_HelpFile();
    public string get_Name();
    public PSSnapInInfo get_PSSnapIn();
    public string get_ModuleName();
    public PSModuleInfo get_Module();
    public string get_Description();
    public void set_Description(string value);
    public ProviderCapabilities get_Capabilities();
    public string get_Home();
    public void set_Home(string value);
    public Collection`1<PSDriveInfo> get_Drives();
    public virtual string ToString();
}
public class System.Management.Automation.ProviderIntrinsics : object {
    public ChildItemCmdletProviderIntrinsics ChildItem { get; }
    public ContentCmdletProviderIntrinsics Content { get; }
    public ItemCmdletProviderIntrinsics Item { get; }
    public PropertyCmdletProviderIntrinsics Property { get; }
    public SecurityDescriptorCmdletProviderIntrinsics SecurityDescriptor { get; }
    public ItemCmdletProviderIntrinsics get_Item();
    public ChildItemCmdletProviderIntrinsics get_ChildItem();
    public ContentCmdletProviderIntrinsics get_Content();
    public PropertyCmdletProviderIntrinsics get_Property();
    public SecurityDescriptorCmdletProviderIntrinsics get_SecurityDescriptor();
}
public class System.Management.Automation.ProviderInvocationException : RuntimeException {
    public ErrorRecord ErrorRecord { get; }
    public string Message { get; }
    public ProviderInfo ProviderInfo { get; }
    protected ProviderInvocationException(SerializationInfo info, StreamingContext context);
    public ProviderInvocationException(string message);
    public ProviderInvocationException(string message, Exception innerException);
    public ProviderInfo get_ProviderInfo();
    public virtual ErrorRecord get_ErrorRecord();
    public virtual string get_Message();
}
public class System.Management.Automation.ProviderNameAmbiguousException : ProviderNotFoundException {
    public ReadOnlyCollection`1<ProviderInfo> PossibleMatches { get; }
    public ProviderNameAmbiguousException(string message);
    public ProviderNameAmbiguousException(string message, Exception innerException);
    protected ProviderNameAmbiguousException(SerializationInfo info, StreamingContext context);
    public ReadOnlyCollection`1<ProviderInfo> get_PossibleMatches();
}
public class System.Management.Automation.ProviderNotFoundException : SessionStateException {
    public ProviderNotFoundException(string message);
    public ProviderNotFoundException(string message, Exception innerException);
    protected ProviderNotFoundException(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.ProxyCommand : object {
    public static string Create(CommandMetadata commandMetadata);
    public static string Create(CommandMetadata commandMetadata, string helpComment);
    public static string GetCmdletBindingAttribute(CommandMetadata commandMetadata);
    public static string GetParamBlock(CommandMetadata commandMetadata);
    public static string GetBegin(CommandMetadata commandMetadata);
    public static string GetProcess(CommandMetadata commandMetadata);
    public static string GetEnd(CommandMetadata commandMetadata);
    public static string GetHelpComments(PSObject help);
}
public class System.Management.Automation.PSAdaptedProperty : PSProperty {
    public object BaseObject { get; }
    public object Tag { get; }
    public PSAdaptedProperty(string name, object tag);
    public virtual PSMemberInfo Copy();
    public object get_BaseObject();
    public object get_Tag();
}
public class System.Management.Automation.PSAliasProperty : PSPropertyInfo {
    public Type ConversionType { get; }
    public bool IsGettable { get; }
    public bool IsSettable { get; }
    public PSMemberTypes MemberType { get; }
    public string ReferencedMemberName { get; }
    public string TypeNameOfValue { get; }
    public object Value { get; public set; }
    public PSAliasProperty(string name, string referencedMemberName);
    public PSAliasProperty(string name, string referencedMemberName, Type conversionType);
    public virtual string ToString();
    public string get_ReferencedMemberName();
    public Type get_ConversionType();
    public virtual PSMemberInfo Copy();
    public virtual PSMemberTypes get_MemberType();
    public virtual string get_TypeNameOfValue();
    public virtual bool get_IsSettable();
    public virtual bool get_IsGettable();
    public virtual object get_Value();
    public virtual void set_Value(object value);
}
public class System.Management.Automation.PSArgumentException : ArgumentException {
    public ErrorRecord ErrorRecord { get; }
    public string Message { get; }
    public PSArgumentException(string message);
    public PSArgumentException(string message, string paramName);
    protected PSArgumentException(SerializationInfo info, StreamingContext context);
    public PSArgumentException(string message, Exception innerException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual ErrorRecord get_ErrorRecord();
    public virtual string get_Message();
}
public class System.Management.Automation.PSArgumentNullException : ArgumentNullException {
    public ErrorRecord ErrorRecord { get; }
    public string Message { get; }
    public PSArgumentNullException(string paramName);
    public PSArgumentNullException(string message, Exception innerException);
    public PSArgumentNullException(string paramName, string message);
    protected PSArgumentNullException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual ErrorRecord get_ErrorRecord();
    public virtual string get_Message();
}
public class System.Management.Automation.PSArgumentOutOfRangeException : ArgumentOutOfRangeException {
    public ErrorRecord ErrorRecord { get; }
    public PSArgumentOutOfRangeException(string paramName);
    public PSArgumentOutOfRangeException(string paramName, object actualValue, string message);
    protected PSArgumentOutOfRangeException(SerializationInfo info, StreamingContext context);
    public PSArgumentOutOfRangeException(string message, Exception innerException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual ErrorRecord get_ErrorRecord();
}
public class System.Management.Automation.PSChildJobProxy : Job2 {
    public bool HasMoreData { get; }
    public string Location { get; }
    public string StatusMessage { get; }
    protected virtual void Dispose(bool disposing);
    public virtual void StartJob();
    public virtual void StartJobAsync();
    public virtual void StopJob(bool force, string reason);
    public virtual void StopJobAsync();
    public virtual void StopJobAsync(bool force, string reason);
    public virtual void SuspendJob();
    public virtual void SuspendJobAsync();
    public virtual void SuspendJob(bool force, string reason);
    public virtual void SuspendJobAsync(bool force, string reason);
    public virtual void ResumeJob();
    public virtual void ResumeJobAsync();
    public virtual void UnblockJob();
    public virtual void UnblockJobAsync();
    public virtual void StopJob();
    public void add_JobDataAdded(EventHandler`1<JobDataAddedEventArgs> value);
    public void remove_JobDataAdded(EventHandler`1<JobDataAddedEventArgs> value);
    public virtual string get_StatusMessage();
    public virtual bool get_HasMoreData();
    public virtual string get_Location();
}
public class System.Management.Automation.PSClassInfo : object {
    public string HelpFile { get; }
    public ReadOnlyCollection`1<PSClassMemberInfo> Members { get; }
    public PSModuleInfo Module { get; }
    public string Name { get; }
    public string get_Name();
    public ReadOnlyCollection`1<PSClassMemberInfo> get_Members();
    public void UpdateMembers(IList`1<PSClassMemberInfo> members);
    public PSModuleInfo get_Module();
    public string get_HelpFile();
}
public class System.Management.Automation.PSClassMemberInfo : object {
    public string DefaultValue { get; }
    public string Name { get; }
    public string TypeName { get; }
    public string get_Name();
    public string get_TypeName();
    public string get_DefaultValue();
}
public abstract class System.Management.Automation.PSCmdlet : Cmdlet {
    public PSEventManager Events { get; }
    public PSHost Host { get; }
    public CommandInvocationIntrinsics InvokeCommand { get; }
    public ProviderIntrinsics InvokeProvider { get; }
    public JobManager JobManager { get; }
    public JobRepository JobRepository { get; }
    public InvocationInfo MyInvocation { get; }
    public PagingParameters PagingParameters { get; }
    public string ParameterSetName { get; }
    public SessionState SessionState { get; }
    public string get_ParameterSetName();
    public InvocationInfo get_MyInvocation();
    public PagingParameters get_PagingParameters();
    public CommandInvocationIntrinsics get_InvokeCommand();
    public PSHost get_Host();
    public SessionState get_SessionState();
    public PSEventManager get_Events();
    public JobRepository get_JobRepository();
    public JobManager get_JobManager();
    public ProviderIntrinsics get_InvokeProvider();
    public PathInfo CurrentProviderLocation(string providerId);
    public string GetUnresolvedProviderPathFromPSPath(string path);
    public Collection`1<string> GetResolvedProviderPathFromPSPath(string path, ProviderInfo& provider);
    public object GetVariableValue(string name);
    public object GetVariableValue(string name, object defaultValue);
}
public class System.Management.Automation.PSCodeMethod : PSMethodInfo {
    public MethodInfo CodeReference { get; }
    public PSMemberTypes MemberType { get; }
    public Collection`1<string> OverloadDefinitions { get; }
    public string TypeNameOfValue { get; }
    public PSCodeMethod(string name, MethodInfo codeReference);
    public virtual string ToString();
    public MethodInfo get_CodeReference();
    public virtual PSMemberInfo Copy();
    public virtual PSMemberTypes get_MemberType();
    public virtual object Invoke(Object[] arguments);
    public virtual Collection`1<string> get_OverloadDefinitions();
    public virtual string get_TypeNameOfValue();
}
public class System.Management.Automation.PSCodeProperty : PSPropertyInfo {
    public MethodInfo GetterCodeReference { get; }
    public bool IsGettable { get; }
    public bool IsSettable { get; }
    public PSMemberTypes MemberType { get; }
    public MethodInfo SetterCodeReference { get; }
    public string TypeNameOfValue { get; }
    public object Value { get; public set; }
    public PSCodeProperty(string name, MethodInfo getterCodeReference);
    public PSCodeProperty(string name, MethodInfo getterCodeReference, MethodInfo setterCodeReference);
    public virtual string ToString();
    public MethodInfo get_GetterCodeReference();
    public MethodInfo get_SetterCodeReference();
    public virtual PSMemberInfo Copy();
    public virtual PSMemberTypes get_MemberType();
    public virtual bool get_IsSettable();
    public virtual bool get_IsGettable();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual string get_TypeNameOfValue();
}
public class System.Management.Automation.PSCommand : object {
    public CommandCollection Commands { get; }
    public PSCommand AddCommand(string command);
    public PSCommand AddCommand(string cmdlet, bool useLocalScope);
    public PSCommand AddScript(string script);
    public PSCommand AddScript(string script, bool useLocalScope);
    public PSCommand AddCommand(Command command);
    public PSCommand AddParameter(string parameterName, object value);
    public PSCommand AddParameter(string parameterName);
    public PSCommand AddArgument(object value);
    public PSCommand AddStatement();
    public CommandCollection get_Commands();
    public void Clear();
    public PSCommand Clone();
}
public abstract class System.Management.Automation.PSControl : object {
}
public class System.Management.Automation.PSCredential : object {
    public static PSCredential Empty { get; }
    public static GetSymmetricEncryptionKey GetSymmetricEncryptionKeyDelegate { get; public set; }
    public SecureString Password { get; }
    public string UserName { get; }
    public PSCredential(string userName, SecureString password);
    public PSCredential(PSObject pso);
    public static GetSymmetricEncryptionKey get_GetSymmetricEncryptionKeyDelegate();
    public static void set_GetSymmetricEncryptionKeyDelegate(GetSymmetricEncryptionKey value);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_UserName();
    public SecureString get_Password();
    public NetworkCredential GetNetworkCredential();
    public static NetworkCredential op_Explicit(PSCredential credential);
    public static PSCredential get_Empty();
}
[FlagsAttribute]
public enum System.Management.Automation.PSCredentialTypes : Enum {
    public int value__;
    public static PSCredentialTypes Default;
    public static PSCredentialTypes Domain;
    public static PSCredentialTypes Generic;
}
[FlagsAttribute]
public enum System.Management.Automation.PSCredentialUIOptions : Enum {
    public int value__;
    public static PSCredentialUIOptions AlwaysPrompt;
    public static PSCredentialUIOptions Default;
    public static PSCredentialUIOptions None;
    public static PSCredentialUIOptions ReadOnlyUserName;
    public static PSCredentialUIOptions ValidateUserNameSyntax;
}
public class System.Management.Automation.PSCustomObject : object {
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Management.Automation.PSDataCollection`1 : object {
    public bool BlockingEnumerator { get; public set; }
    public int Count { get; }
    public int DataAddedCount { get; public set; }
    public bool EnumeratorNeverBlocks { get; public set; }
    public bool IsAutoGenerated { get; public set; }
    public bool IsOpen { get; }
    public bool IsReadOnly { get; }
    public T Item { get; public set; }
    public bool SerializeInput { get; public set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public PSDataCollection`1(IEnumerable`1<T> items);
    public PSDataCollection`1(int capacity);
    protected PSDataCollection`1(SerializationInfo info, StreamingContext context);
    public static PSDataCollection`1<T> op_Implicit(bool valueToConvert);
    public static PSDataCollection`1<T> op_Implicit(string valueToConvert);
    public static PSDataCollection`1<T> op_Implicit(int valueToConvert);
    public static PSDataCollection`1<T> op_Implicit(byte valueToConvert);
    public static PSDataCollection`1<T> op_Implicit(Hashtable valueToConvert);
    public static PSDataCollection`1<T> op_Implicit(T valueToConvert);
    public static PSDataCollection`1<T> op_Implicit(Object[] arrayToConvert);
    public void add_DataAdding(EventHandler`1<DataAddingEventArgs> value);
    public void remove_DataAdding(EventHandler`1<DataAddingEventArgs> value);
    public void add_DataAdded(EventHandler`1<DataAddedEventArgs> value);
    public void remove_DataAdded(EventHandler`1<DataAddedEventArgs> value);
    public void add_Completed(EventHandler value);
    public void remove_Completed(EventHandler value);
    public bool get_IsOpen();
    public int get_DataAddedCount();
    public void set_DataAddedCount(int value);
    public bool get_SerializeInput();
    public void set_SerializeInput(bool value);
    public bool get_IsAutoGenerated();
    public void set_IsAutoGenerated(bool value);
    public void Complete();
    public bool get_BlockingEnumerator();
    public void set_BlockingEnumerator(bool value);
    public bool get_EnumeratorNeverBlocks();
    public void set_EnumeratorNeverBlocks(bool value);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public Collection`1<T> ReadAll();
    protected virtual void InsertItem(Guid psInstanceId, int index, T item);
    protected virtual void RemoveItem(int index);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
}
public class System.Management.Automation.PSDataStreams : object {
    public PSDataCollection`1<DebugRecord> Debug { get; public set; }
    public PSDataCollection`1<ErrorRecord> Error { get; public set; }
    public PSDataCollection`1<InformationRecord> Information { get; public set; }
    public PSDataCollection`1<ProgressRecord> Progress { get; public set; }
    public PSDataCollection`1<VerboseRecord> Verbose { get; public set; }
    public PSDataCollection`1<WarningRecord> Warning { get; public set; }
    public PSDataCollection`1<ErrorRecord> get_Error();
    public void set_Error(PSDataCollection`1<ErrorRecord> value);
    public PSDataCollection`1<ProgressRecord> get_Progress();
    public void set_Progress(PSDataCollection`1<ProgressRecord> value);
    public PSDataCollection`1<VerboseRecord> get_Verbose();
    public void set_Verbose(PSDataCollection`1<VerboseRecord> value);
    public PSDataCollection`1<DebugRecord> get_Debug();
    public void set_Debug(PSDataCollection`1<DebugRecord> value);
    public PSDataCollection`1<WarningRecord> get_Warning();
    public void set_Warning(PSDataCollection`1<WarningRecord> value);
    public PSDataCollection`1<InformationRecord> get_Information();
    public void set_Information(PSDataCollection`1<InformationRecord> value);
    public void ClearStreams();
}
public class System.Management.Automation.PSDebugContext : object {
    public Breakpoint[] Breakpoints { get; }
    public InvocationInfo InvocationInfo { get; }
    public PSDebugContext(InvocationInfo invocationInfo, List`1<Breakpoint> breakpoints);
    public InvocationInfo get_InvocationInfo();
    public Breakpoint[] get_Breakpoints();
}
[AttributeUsageAttribute("384")]
public class System.Management.Automation.PSDefaultValueAttribute : ParsingBaseAttribute {
    public string Help { get; public set; }
    public object Value { get; public set; }
    public object get_Value();
    public void set_Value(object value);
    public string get_Help();
    public void set_Help(string value);
}
public class System.Management.Automation.PSDriveInfo : object {
    public PSCredential Credential { get; }
    public string CurrentLocation { get; public set; }
    public string Description { get; public set; }
    public string DisplayRoot { get; }
    public string Name { get; }
    public ProviderInfo Provider { get; }
    public string Root { get; }
    protected PSDriveInfo(PSDriveInfo driveInfo);
    public PSDriveInfo(string name, ProviderInfo provider, string root, string description, PSCredential credential);
    public PSDriveInfo(string name, ProviderInfo provider, string root, string description, PSCredential credential, string displayRoot);
    public PSDriveInfo(string name, ProviderInfo provider, string root, string description, PSCredential credential, bool persist);
    public string get_CurrentLocation();
    public void set_CurrentLocation(string value);
    public string get_Name();
    public ProviderInfo get_Provider();
    public string get_Root();
    public string get_Description();
    public void set_Description(string value);
    public PSCredential get_Credential();
    public string get_DisplayRoot();
    public virtual string ToString();
    public int CompareTo(PSDriveInfo drive);
    public sealed virtual int CompareTo(object obj);
    public virtual bool Equals(object obj);
    public bool Equals(PSDriveInfo drive);
    public static bool op_Equality(PSDriveInfo drive1, PSDriveInfo drive2);
    public static bool op_Inequality(PSDriveInfo drive1, PSDriveInfo drive2);
    public static bool op_LessThan(PSDriveInfo drive1, PSDriveInfo drive2);
    public static bool op_GreaterThan(PSDriveInfo drive1, PSDriveInfo drive2);
    public virtual int GetHashCode();
}
public class System.Management.Automation.PSDynamicMember : PSMemberInfo {
    public PSMemberTypes MemberType { get; }
    public string TypeNameOfValue { get; }
    public object Value { get; public set; }
    public virtual string ToString();
    public virtual PSMemberTypes get_MemberType();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual string get_TypeNameOfValue();
    public virtual PSMemberInfo Copy();
}
public class System.Management.Automation.PSEngineEvent : object {
    public static string Exiting;
    public static string OnIdle;
    public static string WorkflowJobStartEvent;
}
public class System.Management.Automation.PSEvent : PSMemberInfo {
    public PSMemberTypes MemberType { get; }
    public string TypeNameOfValue { get; }
    public object Value { get; public set; }
    public virtual string ToString();
    public virtual PSMemberInfo Copy();
    public virtual PSMemberTypes get_MemberType();
    public sealed virtual object get_Value();
    public sealed virtual void set_Value(object value);
    public virtual string get_TypeNameOfValue();
}
public class System.Management.Automation.PSEventArgs : EventArgs {
    public string ComputerName { get; }
    public int EventIdentifier { get; }
    public PSObject MessageData { get; }
    public Guid RunspaceId { get; }
    public object Sender { get; }
    public Object[] SourceArgs { get; }
    public EventArgs SourceEventArgs { get; }
    public string SourceIdentifier { get; }
    public DateTime TimeGenerated { get; }
    public string get_ComputerName();
    public Guid get_RunspaceId();
    public int get_EventIdentifier();
    public object get_Sender();
    public EventArgs get_SourceEventArgs();
    public Object[] get_SourceArgs();
    public string get_SourceIdentifier();
    public DateTime get_TimeGenerated();
    public PSObject get_MessageData();
}
[DefaultMemberAttribute("Item")]
public class System.Management.Automation.PSEventArgsCollection : object {
    public int Count { get; }
    public PSEventArgs Item { get; }
    public object SyncRoot { get; }
    public void add_PSEventReceived(PSEventReceivedEventHandler value);
    public void remove_PSEventReceived(PSEventReceivedEventHandler value);
    public int get_Count();
    public void RemoveAt(int index);
    public PSEventArgs get_Item(int index);
    public sealed virtual IEnumerator`1<PSEventArgs> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public object get_SyncRoot();
}
public class System.Management.Automation.PSEventHandler : object {
    protected PSEventManager eventManager;
    protected PSObject extraData;
    protected object sender;
    protected string sourceIdentifier;
    public PSEventHandler(PSEventManager eventManager, object sender, string sourceIdentifier, PSObject extraData);
}
public class System.Management.Automation.PSEventJob : Job {
    public bool HasMoreData { get; }
    public string Location { get; }
    public PSModuleInfo Module { get; }
    public string StatusMessage { get; }
    public PSEventJob(PSEventManager eventManager, PSEventSubscriber subscriber, ScriptBlock action, string name);
    public PSModuleInfo get_Module();
    public virtual void StopJob();
    public virtual string get_StatusMessage();
    public virtual bool get_HasMoreData();
    public virtual string get_Location();
}
public abstract class System.Management.Automation.PSEventManager : object {
    public PSEventArgsCollection ReceivedEvents { get; }
    public List`1<PSEventSubscriber> Subscribers { get; }
    protected int GetNextEventId();
    public PSEventArgsCollection get_ReceivedEvents();
    public abstract virtual List`1<PSEventSubscriber> get_Subscribers();
    protected abstract virtual PSEventArgs CreateEvent(string sourceIdentifier, object sender, Object[] args, PSObject extraData);
    public PSEventArgs GenerateEvent(string sourceIdentifier, object sender, Object[] args, PSObject extraData);
    public PSEventArgs GenerateEvent(string sourceIdentifier, object sender, Object[] args, PSObject extraData, bool processInCurrentThread, bool waitForCompletionInCurrentThread);
    protected abstract virtual void ProcessNewEvent(PSEventArgs newEvent, bool processInCurrentThread);
    protected internal virtual void ProcessNewEvent(PSEventArgs newEvent, bool processInCurrentThread, bool waitForCompletionWhenInCurrentThread);
    public abstract virtual IEnumerable`1<PSEventSubscriber> GetEventSubscribers(string sourceIdentifier);
    public abstract virtual PSEventSubscriber SubscribeEvent(object source, string eventName, string sourceIdentifier, PSObject data, ScriptBlock action, bool supportEvent, bool forwardEvent);
    public abstract virtual PSEventSubscriber SubscribeEvent(object source, string eventName, string sourceIdentifier, PSObject data, ScriptBlock action, bool supportEvent, bool forwardEvent, int maxTriggerCount);
    public abstract virtual PSEventSubscriber SubscribeEvent(object source, string eventName, string sourceIdentifier, PSObject data, PSEventReceivedEventHandler handlerDelegate, bool supportEvent, bool forwardEvent);
    public abstract virtual PSEventSubscriber SubscribeEvent(object source, string eventName, string sourceIdentifier, PSObject data, PSEventReceivedEventHandler handlerDelegate, bool supportEvent, bool forwardEvent, int maxTriggerCount);
    public abstract virtual void UnsubscribeEvent(PSEventSubscriber subscriber);
}
public class System.Management.Automation.PSEventReceivedEventHandler : MulticastDelegate {
    public PSEventReceivedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PSEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PSEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Management.Automation.PSEventSubscriber : object {
    public PSEventJob Action { get; }
    public string EventName { get; }
    public bool ForwardEvent { get; }
    public PSEventReceivedEventHandler HandlerDelegate { get; }
    public string SourceIdentifier { get; }
    public object SourceObject { get; }
    public int SubscriptionId { get; public set; }
    public bool SupportEvent { get; }
    public int get_SubscriptionId();
    public void set_SubscriptionId(int value);
    public object get_SourceObject();
    public string get_EventName();
    public string get_SourceIdentifier();
    public PSEventJob get_Action();
    public PSEventReceivedEventHandler get_HandlerDelegate();
    public bool get_SupportEvent();
    public bool get_ForwardEvent();
    public void add_Unsubscribed(PSEventUnsubscribedEventHandler value);
    public void remove_Unsubscribed(PSEventUnsubscribedEventHandler value);
    public sealed virtual bool Equals(PSEventSubscriber other);
    public virtual int GetHashCode();
}
public class System.Management.Automation.PSEventUnsubscribedEventArgs : EventArgs {
    public PSEventSubscriber EventSubscriber { get; }
    public PSEventSubscriber get_EventSubscriber();
}
public class System.Management.Automation.PSEventUnsubscribedEventHandler : MulticastDelegate {
    public PSEventUnsubscribedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PSEventUnsubscribedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PSEventUnsubscribedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class System.Management.Automation.PSInstaller : Installer {
    public sealed virtual void Install(IDictionary stateSaver);
    public sealed virtual void Uninstall(IDictionary savedState);
    public sealed virtual void Rollback(IDictionary savedState);
}
public class System.Management.Automation.PSInvalidCastException : InvalidCastException {
    public ErrorRecord ErrorRecord { get; }
    protected PSInvalidCastException(SerializationInfo info, StreamingContext context);
    public PSInvalidCastException(string message);
    public PSInvalidCastException(string message, Exception innerException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual ErrorRecord get_ErrorRecord();
}
public class System.Management.Automation.PSInvalidOperationException : InvalidOperationException {
    public ErrorRecord ErrorRecord { get; }
    protected PSInvalidOperationException(SerializationInfo info, StreamingContext context);
    public PSInvalidOperationException(string message);
    public PSInvalidOperationException(string message, Exception innerException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual ErrorRecord get_ErrorRecord();
}
public class System.Management.Automation.PSInvocationSettings : object {
    public bool AddToHistory { get; public set; }
    public ApartmentState ApartmentState { get; public set; }
    public Nullable`1<ActionPreference> ErrorActionPreference { get; public set; }
    public bool ExposeFlowControlExceptions { get; public set; }
    public bool FlowImpersonationPolicy { get; public set; }
    public PSHost Host { get; public set; }
    public RemoteStreamOptions RemoteStreamOptions { get; public set; }
    public ApartmentState get_ApartmentState();
    public void set_ApartmentState(ApartmentState value);
    public PSHost get_Host();
    public void set_Host(PSHost value);
    public RemoteStreamOptions get_RemoteStreamOptions();
    public void set_RemoteStreamOptions(RemoteStreamOptions value);
    public bool get_AddToHistory();
    public void set_AddToHistory(bool value);
    public Nullable`1<ActionPreference> get_ErrorActionPreference();
    public void set_ErrorActionPreference(Nullable`1<ActionPreference> value);
    public bool get_FlowImpersonationPolicy();
    public void set_FlowImpersonationPolicy(bool value);
    public bool get_ExposeFlowControlExceptions();
    public void set_ExposeFlowControlExceptions(bool value);
}
public enum System.Management.Automation.PSInvocationState : Enum {
    public int value__;
    public static PSInvocationState Completed;
    public static PSInvocationState Disconnected;
    public static PSInvocationState Failed;
    public static PSInvocationState NotStarted;
    public static PSInvocationState Running;
    public static PSInvocationState Stopped;
    public static PSInvocationState Stopping;
}
public class System.Management.Automation.PSInvocationStateChangedEventArgs : EventArgs {
    public PSInvocationStateInfo InvocationStateInfo { get; }
    public PSInvocationStateInfo get_InvocationStateInfo();
}
public class System.Management.Automation.PSInvocationStateInfo : object {
    public Exception Reason { get; }
    public PSInvocationState State { get; }
    public PSInvocationState get_State();
    public Exception get_Reason();
}
public class System.Management.Automation.PSJobProxy : Job2 {
    public bool HasMoreData { get; }
    public string Location { get; }
    public Guid RemoteJobInstanceId { get; }
    public bool RemoveRemoteJobOnCompletion { get; public set; }
    public Runspace Runspace { get; public set; }
    public RunspacePool RunspacePool { get; public set; }
    public string StatusMessage { get; }
    public virtual string get_StatusMessage();
    public virtual bool get_HasMoreData();
    public virtual string get_Location();
    public virtual void StartJob();
    public virtual void StartJobAsync();
    public virtual void StopJob();
    public virtual void StopJobAsync();
    public virtual void StopJob(bool force, string reason);
    public virtual void StopJobAsync(bool force, string reason);
    public virtual void SuspendJob();
    public virtual void SuspendJobAsync();
    public virtual void SuspendJob(bool force, string reason);
    public virtual void SuspendJobAsync(bool force, string reason);
    public virtual void ResumeJob();
    public virtual void ResumeJobAsync();
    public virtual void UnblockJob();
    public virtual void UnblockJobAsync();
    public void StartJobAsync(PSDataCollection`1<object> input);
    public void StartJob(PSDataCollection`1<object> input);
    public void StartJob(EventHandler`1<JobDataAddedEventArgs> dataAdded, EventHandler`1<JobStateEventArgs> stateChanged, PSDataCollection`1<object> input);
    public void StartJobAsync(EventHandler`1<JobDataAddedEventArgs> dataAdded, EventHandler`1<JobStateEventArgs> stateChanged, PSDataCollection`1<object> input);
    public void RemoveJob(bool removeRemoteJob, bool force);
    public void RemoveJob(bool removeRemoteJob);
    public void RemoveJobAsync(bool removeRemoteJob, bool force);
    public void RemoveJobAsync(bool removeRemoteJob);
    public void add_RemoveJobCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_RemoveJobCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public bool get_RemoveRemoteJobOnCompletion();
    public void set_RemoveRemoteJobOnCompletion(bool value);
    public Guid get_RemoteJobInstanceId();
    public Runspace get_Runspace();
    public void set_Runspace(Runspace value);
    public RunspacePool get_RunspacePool();
    public void set_RunspacePool(RunspacePool value);
    public static ICollection`1<PSJobProxy> Create(Runspace runspace, Hashtable filter, EventHandler`1<JobDataAddedEventArgs> dataAdded, EventHandler`1<JobStateEventArgs> stateChanged);
    public static ICollection`1<PSJobProxy> Create(Runspace runspace, Hashtable filter, bool receiveImmediately);
    public static ICollection`1<PSJobProxy> Create(Runspace runspace, Hashtable filter);
    public static ICollection`1<PSJobProxy> Create(Runspace runspace);
    public static ICollection`1<PSJobProxy> Create(RunspacePool runspacePool, Hashtable filter, EventHandler`1<JobDataAddedEventArgs> dataAdded, EventHandler`1<JobStateEventArgs> stateChanged);
    public static ICollection`1<PSJobProxy> Create(RunspacePool runspacePool, Hashtable filter, bool receiveImmediately);
    public static ICollection`1<PSJobProxy> Create(RunspacePool runspacePool, Hashtable filter);
    public static ICollection`1<PSJobProxy> Create(RunspacePool runspacePool);
    public void ReceiveJob();
    public void ReceiveJob(EventHandler`1<JobDataAddedEventArgs> dataAdded, EventHandler`1<JobStateEventArgs> stateChanged);
    protected virtual void Dispose(bool disposing);
}
public class System.Management.Automation.PSJobStartEventArgs : EventArgs {
    public Debugger Debugger { get; }
    public bool IsAsync { get; }
    public Job Job { get; }
    public PSJobStartEventArgs(Job job, Debugger debugger, bool isAsync);
    public Job get_Job();
    public Debugger get_Debugger();
    public bool get_IsAsync();
}
public enum System.Management.Automation.PSLanguageMode : Enum {
    public int value__;
    public static PSLanguageMode ConstrainedLanguage;
    public static PSLanguageMode FullLanguage;
    public static PSLanguageMode NoLanguage;
    public static PSLanguageMode RestrictedLanguage;
}
public class System.Management.Automation.PSListModifier : object {
    public Collection`1<object> Add { get; }
    public Collection`1<object> Remove { get; }
    public Collection`1<object> Replace { get; }
    public PSListModifier(Collection`1<object> removeItems, Collection`1<object> addItems);
    public PSListModifier(object replacementItems);
    public PSListModifier(Hashtable hash);
    public Collection`1<object> get_Add();
    public Collection`1<object> get_Remove();
    public Collection`1<object> get_Replace();
    public void ApplyTo(IList collectionToUpdate);
    public void ApplyTo(object collectionToUpdate);
}
public class System.Management.Automation.PSListModifier`1 : PSListModifier {
    public PSListModifier`1(Collection`1<object> removeItems, Collection`1<object> addItems);
    public PSListModifier`1(object replacementItems);
    public PSListModifier`1(Hashtable hash);
}
public abstract class System.Management.Automation.PSMemberInfo : object {
    public bool IsInstance { get; }
    public PSMemberTypes MemberType { get; }
    public string Name { get; }
    public string TypeNameOfValue { get; }
    public object Value { get; public set; }
    public abstract virtual PSMemberTypes get_MemberType();
    public string get_Name();
    protected void SetMemberName(string name);
    public bool get_IsInstance();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual string get_TypeNameOfValue();
    public abstract virtual PSMemberInfo Copy();
}
[DefaultMemberAttribute("Item")]
public abstract class System.Management.Automation.PSMemberInfoCollection`1 : object {
    public T Item { get; }
    public abstract virtual void Add(T member);
    public abstract virtual void Add(T member, bool preValidated);
    public abstract virtual void Remove(string name);
    public abstract virtual T get_Item(string name);
    public abstract virtual ReadOnlyPSMemberInfoCollection`1<T> Match(string name);
    public abstract virtual ReadOnlyPSMemberInfoCollection`1<T> Match(string name, PSMemberTypes memberTypes);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public abstract virtual IEnumerator`1<T> GetEnumerator();
}
public class System.Management.Automation.PSMemberSet : PSMemberInfo {
    public bool InheritMembers { get; }
    public PSMemberTypes MemberType { get; }
    public PSMemberInfoCollection`1<PSMemberInfo> Members { get; }
    public PSMemberInfoCollection`1<PSMethodInfo> Methods { get; }
    public PSMemberInfoCollection`1<PSPropertyInfo> Properties { get; }
    public string TypeNameOfValue { get; }
    public object Value { get; public set; }
    public PSMemberSet(string name);
    public PSMemberSet(string name, IEnumerable`1<PSMemberInfo> members);
    public virtual string ToString();
    public bool get_InheritMembers();
    public PSMemberInfoCollection`1<PSMemberInfo> get_Members();
    public PSMemberInfoCollection`1<PSPropertyInfo> get_Properties();
    public PSMemberInfoCollection`1<PSMethodInfo> get_Methods();
    public virtual PSMemberInfo Copy();
    public virtual PSMemberTypes get_MemberType();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual string get_TypeNameOfValue();
}
[FlagsAttribute]
public enum System.Management.Automation.PSMemberTypes : Enum {
    public int value__;
    public static PSMemberTypes AliasProperty;
    public static PSMemberTypes All;
    public static PSMemberTypes CodeMethod;
    public static PSMemberTypes CodeProperty;
    public static PSMemberTypes Dynamic;
    public static PSMemberTypes Event;
    public static PSMemberTypes MemberSet;
    public static PSMemberTypes Method;
    public static PSMemberTypes Methods;
    public static PSMemberTypes NoteProperty;
    public static PSMemberTypes ParameterizedProperty;
    public static PSMemberTypes Properties;
    public static PSMemberTypes Property;
    public static PSMemberTypes PropertySet;
    public static PSMemberTypes ScriptMethod;
    public static PSMemberTypes ScriptProperty;
}
[FlagsAttribute]
public enum System.Management.Automation.PSMemberViewTypes : Enum {
    public int value__;
    public static PSMemberViewTypes Adapted;
    public static PSMemberViewTypes All;
    public static PSMemberViewTypes Base;
    public static PSMemberViewTypes Extended;
}
public class System.Management.Automation.PSMethod : PSMethodInfo {
    public PSMemberTypes MemberType { get; }
    public Collection`1<string> OverloadDefinitions { get; }
    public string TypeNameOfValue { get; }
    public virtual string ToString();
    public virtual PSMemberInfo Copy();
    public virtual PSMemberTypes get_MemberType();
    public virtual object Invoke(Object[] arguments);
    public virtual Collection`1<string> get_OverloadDefinitions();
    public virtual string get_TypeNameOfValue();
}
public abstract class System.Management.Automation.PSMethodInfo : PSMemberInfo {
    public Collection`1<string> OverloadDefinitions { get; }
    public object Value { get; public set; }
    public abstract virtual object Invoke(Object[] arguments);
    public abstract virtual Collection`1<string> get_OverloadDefinitions();
    public sealed virtual object get_Value();
    public sealed virtual void set_Value(object value);
}
public enum System.Management.Automation.PSModuleAutoLoadingPreference : Enum {
    public int value__;
    public static PSModuleAutoLoadingPreference All;
    public static PSModuleAutoLoadingPreference ModuleQualified;
    public static PSModuleAutoLoadingPreference None;
}
public class System.Management.Automation.PSModuleInfo : object {
    public ModuleAccessMode AccessMode { get; public set; }
    public string Author { get; }
    public Version ClrVersion { get; }
    public string CompanyName { get; }
    public string Copyright { get; }
    public string Definition { get; }
    public string Description { get; public set; }
    public Version DotNetFrameworkVersion { get; }
    public Dictionary`2<string, AliasInfo> ExportedAliases { get; }
    public Dictionary`2<string, CmdletInfo> ExportedCmdlets { get; }
    public Dictionary`2<string, CommandInfo> ExportedCommands { get; }
    public ReadOnlyCollection`1<string> ExportedDscResources { get; }
    public ReadOnlyCollection`1<string> ExportedFormatFiles { get; }
    public Dictionary`2<string, FunctionInfo> ExportedFunctions { get; }
    public ReadOnlyCollection`1<string> ExportedTypeFiles { get; }
    public Dictionary`2<string, PSVariable> ExportedVariables { get; }
    public Dictionary`2<string, FunctionInfo> ExportedWorkflows { get; }
    public IEnumerable`1<string> FileList { get; }
    public Guid Guid { get; }
    public string HelpInfoUri { get; }
    public Uri IconUri { get; }
    public Assembly ImplementingAssembly { get; }
    public Uri LicenseUri { get; }
    public bool LogPipelineExecutionDetails { get; public set; }
    public string ModuleBase { get; }
    public IEnumerable`1<object> ModuleList { get; }
    public ModuleType ModuleType { get; }
    public string Name { get; }
    public ReadOnlyCollection`1<PSModuleInfo> NestedModules { get; }
    public ScriptBlock OnRemove { get; public set; }
    public string Path { get; }
    public string PowerShellHostName { get; }
    public Version PowerShellHostVersion { get; }
    public Version PowerShellVersion { get; }
    public string Prefix { get; }
    public object PrivateData { get; public set; }
    public ProcessorArchitecture ProcessorArchitecture { get; }
    public Uri ProjectUri { get; }
    public string ReleaseNotes { get; }
    public Uri RepositorySourceLocation { get; }
    public IEnumerable`1<string> RequiredAssemblies { get; }
    public ReadOnlyCollection`1<PSModuleInfo> RequiredModules { get; }
    public string RootModule { get; }
    public IEnumerable`1<string> Scripts { get; }
    public SessionState SessionState { get; public set; }
    public IEnumerable`1<string> Tags { get; }
    public static bool UseAppDomainLevelModuleCache { get; public set; }
    public Version Version { get; }
    public PSModuleInfo(bool linkToGlobal);
    public PSModuleInfo(ScriptBlock scriptBlock);
    public virtual string ToString();
    public bool get_LogPipelineExecutionDetails();
    public void set_LogPipelineExecutionDetails(bool value);
    public string get_Name();
    public string get_Path();
    public Assembly get_ImplementingAssembly();
    public string get_Definition();
    public string get_Description();
    public void set_Description(string value);
    public Guid get_Guid();
    public string get_HelpInfoUri();
    public string get_ModuleBase();
    public object get_PrivateData();
    public void set_PrivateData(object value);
    public IEnumerable`1<string> get_Tags();
    public Uri get_ProjectUri();
    public Uri get_IconUri();
    public Uri get_LicenseUri();
    public string get_ReleaseNotes();
    public Uri get_RepositorySourceLocation();
    public Version get_Version();
    public ModuleType get_ModuleType();
    public string get_Author();
    public ModuleAccessMode get_AccessMode();
    public void set_AccessMode(ModuleAccessMode value);
    public Version get_ClrVersion();
    public string get_CompanyName();
    public string get_Copyright();
    public Version get_DotNetFrameworkVersion();
    public Dictionary`2<string, FunctionInfo> get_ExportedFunctions();
    public string get_Prefix();
    public Dictionary`2<string, CmdletInfo> get_ExportedCmdlets();
    public Dictionary`2<string, CommandInfo> get_ExportedCommands();
    public IEnumerable`1<string> get_FileList();
    public IEnumerable`1<object> get_ModuleList();
    public ReadOnlyCollection`1<PSModuleInfo> get_NestedModules();
    public string get_PowerShellHostName();
    public Version get_PowerShellHostVersion();
    public Version get_PowerShellVersion();
    public ProcessorArchitecture get_ProcessorArchitecture();
    public IEnumerable`1<string> get_Scripts();
    public IEnumerable`1<string> get_RequiredAssemblies();
    public ReadOnlyCollection`1<PSModuleInfo> get_RequiredModules();
    public string get_RootModule();
    public Dictionary`2<string, PSVariable> get_ExportedVariables();
    public Dictionary`2<string, AliasInfo> get_ExportedAliases();
    public Dictionary`2<string, FunctionInfo> get_ExportedWorkflows();
    public ReadOnlyCollection`1<string> get_ExportedDscResources();
    public SessionState get_SessionState();
    public void set_SessionState(SessionState value);
    public ScriptBlock NewBoundScriptBlock(ScriptBlock scriptBlockToBind);
    public object Invoke(ScriptBlock sb, Object[] args);
    public PSVariable GetVariableFromCallersModule(string variableName);
    public PSObject AsCustomObject();
    public ScriptBlock get_OnRemove();
    public void set_OnRemove(ScriptBlock value);
    public ReadOnlyCollection`1<string> get_ExportedFormatFiles();
    public ReadOnlyCollection`1<string> get_ExportedTypeFiles();
    public PSModuleInfo Clone();
    public static bool get_UseAppDomainLevelModuleCache();
    public static void set_UseAppDomainLevelModuleCache(bool value);
    public static void ClearAppDomainLevelModulePathCache();
}
public class System.Management.Automation.PSNoteProperty : PSPropertyInfo {
    public bool IsGettable { get; }
    public bool IsSettable { get; }
    public PSMemberTypes MemberType { get; }
    public string TypeNameOfValue { get; }
    public object Value { get; public set; }
    public PSNoteProperty(string name, object value);
    public virtual string ToString();
    public virtual PSMemberInfo Copy();
    public virtual PSMemberTypes get_MemberType();
    public virtual bool get_IsSettable();
    public virtual bool get_IsGettable();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual string get_TypeNameOfValue();
}
public class System.Management.Automation.PSNotImplementedException : NotImplementedException {
    public ErrorRecord ErrorRecord { get; }
    protected PSNotImplementedException(SerializationInfo info, StreamingContext context);
    public PSNotImplementedException(string message);
    public PSNotImplementedException(string message, Exception innerException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual ErrorRecord get_ErrorRecord();
}
public class System.Management.Automation.PSNotSupportedException : NotSupportedException {
    public ErrorRecord ErrorRecord { get; }
    protected PSNotSupportedException(SerializationInfo info, StreamingContext context);
    public PSNotSupportedException(string message);
    public PSNotSupportedException(string message, Exception innerException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual ErrorRecord get_ErrorRecord();
}
public class System.Management.Automation.PSObject : object {
    public static string AdaptedMemberSetName;
    public static string BaseObjectMemberSetName;
    public static string ExtendedMemberSetName;
    public object BaseObject { get; }
    public object ImmediateBaseObject { get; }
    public PSMemberInfoCollection`1<PSMemberInfo> Members { get; }
    public PSMemberInfoCollection`1<PSMethodInfo> Methods { get; }
    public PSMemberInfoCollection`1<PSPropertyInfo> Properties { get; }
    public Collection`1<string> TypeNames { get; }
    public PSObject(object obj);
    protected PSObject(SerializationInfo info, StreamingContext context);
    public PSMemberInfoCollection`1<PSMemberInfo> get_Members();
    public PSMemberInfoCollection`1<PSPropertyInfo> get_Properties();
    public PSMemberInfoCollection`1<PSMethodInfo> get_Methods();
    public object get_ImmediateBaseObject();
    public object get_BaseObject();
    public Collection`1<string> get_TypeNames();
    public static PSObject op_Implicit(int valueToConvert);
    public static PSObject op_Implicit(string valueToConvert);
    public static PSObject op_Implicit(Hashtable valueToConvert);
    public static PSObject op_Implicit(double valueToConvert);
    public static PSObject op_Implicit(bool valueToConvert);
    public static PSObject AsPSObject(object obj);
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public virtual PSObject Copy();
    public sealed virtual int CompareTo(object obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression parameter);
}
public class System.Management.Automation.PSObjectDisposedException : ObjectDisposedException {
    public ErrorRecord ErrorRecord { get; }
    public PSObjectDisposedException(string objectName);
    public PSObjectDisposedException(string objectName, string message);
    public PSObjectDisposedException(string message, Exception innerException);
    protected PSObjectDisposedException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual ErrorRecord get_ErrorRecord();
}
public class System.Management.Automation.PSObjectPropertyDescriptor : PropertyDescriptor {
    public AttributeCollection Attributes { get; }
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public virtual AttributeCollection get_Attributes();
    public virtual bool get_IsReadOnly();
    public virtual void ResetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
    public virtual Type get_ComponentType();
    public virtual Type get_PropertyType();
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
}
public class System.Management.Automation.PSObjectTypeDescriptionProvider : TypeDescriptionProvider {
    public void add_SettingValueException(EventHandler`1<SettingValueExceptionEventArgs> value);
    public void remove_SettingValueException(EventHandler`1<SettingValueExceptionEventArgs> value);
    public void add_GettingValueException(EventHandler`1<GettingValueExceptionEventArgs> value);
    public void remove_GettingValueException(EventHandler`1<GettingValueExceptionEventArgs> value);
    public virtual ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance);
}
public class System.Management.Automation.PSObjectTypeDescriptor : CustomTypeDescriptor {
    public PSObject Instance { get; }
    public PSObjectTypeDescriptor(PSObject instance);
    public void add_SettingValueException(EventHandler`1<SettingValueExceptionEventArgs> value);
    public void remove_SettingValueException(EventHandler`1<SettingValueExceptionEventArgs> value);
    public void add_GettingValueException(EventHandler`1<GettingValueExceptionEventArgs> value);
    public void remove_GettingValueException(EventHandler`1<GettingValueExceptionEventArgs> value);
    public PSObject get_Instance();
    public virtual PropertyDescriptorCollection GetProperties();
    public virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual PropertyDescriptor GetDefaultProperty();
    public virtual TypeConverter GetConverter();
    public virtual object GetPropertyOwner(PropertyDescriptor pd);
    public virtual EventDescriptor GetDefaultEvent();
    public virtual EventDescriptorCollection GetEvents();
    public virtual EventDescriptorCollection GetEvents(Attribute[] attributes);
    public virtual AttributeCollection GetAttributes();
    public virtual string GetClassName();
    public virtual string GetComponentName();
    public virtual object GetEditor(Type editorBaseType);
}
public class System.Management.Automation.PSParameterizedProperty : PSMethodInfo {
    public bool IsGettable { get; }
    public bool IsSettable { get; }
    public PSMemberTypes MemberType { get; }
    public Collection`1<string> OverloadDefinitions { get; }
    public string TypeNameOfValue { get; }
    public virtual string ToString();
    public bool get_IsSettable();
    public bool get_IsGettable();
    public virtual object Invoke(Object[] arguments);
    public void InvokeSet(object valueToSet, Object[] arguments);
    public virtual Collection`1<string> get_OverloadDefinitions();
    public virtual string get_TypeNameOfValue();
    public virtual PSMemberInfo Copy();
    public virtual PSMemberTypes get_MemberType();
}
public class System.Management.Automation.PSParseError : object {
    public string Message { get; }
    public PSToken Token { get; }
    public PSToken get_Token();
    public string get_Message();
}
public class System.Management.Automation.PSParser : object {
    public static Collection`1<PSToken> Tokenize(string script, Collection`1& errors);
    public static Collection`1<PSToken> Tokenize(Object[] script, Collection`1& errors);
}
[DefaultMemberAttribute("Item")]
public class System.Management.Automation.PSPrimitiveDictionary : Hashtable {
    public object Item { get; public set; }
    public object Item { get; public set; }
    public PSPrimitiveDictionary(Hashtable other);
    public virtual void Add(object key, object value);
    public virtual object get_Item(object key);
    public virtual void set_Item(object key, object value);
    public object get_Item(string key);
    public void set_Item(string key, object value);
    public virtual object Clone();
    public void Add(string key, bool value);
    public void Add(string key, Boolean[] value);
    public void Add(string key, byte value);
    public void Add(string key, Byte[] value);
    public void Add(string key, char value);
    public void Add(string key, Char[] value);
    public void Add(string key, DateTime value);
    public void Add(string key, DateTime[] value);
    public void Add(string key, decimal value);
    public void Add(string key, Decimal[] value);
    public void Add(string key, double value);
    public void Add(string key, Double[] value);
    public void Add(string key, Guid value);
    public void Add(string key, Guid[] value);
    public void Add(string key, int value);
    public void Add(string key, Int32[] value);
    public void Add(string key, long value);
    public void Add(string key, Int64[] value);
    public void Add(string key, sbyte value);
    public void Add(string key, SByte[] value);
    public void Add(string key, float value);
    public void Add(string key, Single[] value);
    public void Add(string key, string value);
    public void Add(string key, String[] value);
    public void Add(string key, TimeSpan value);
    public void Add(string key, TimeSpan[] value);
    public void Add(string key, ushort value);
    public void Add(string key, UInt16[] value);
    public void Add(string key, UInt32 value);
    public void Add(string key, UInt32[] value);
    public void Add(string key, ulong value);
    public void Add(string key, UInt64[] value);
    public void Add(string key, Uri value);
    public void Add(string key, Uri[] value);
    public void Add(string key, Version value);
    public void Add(string key, Version[] value);
    public void Add(string key, PSPrimitiveDictionary value);
    public void Add(string key, PSPrimitiveDictionary[] value);
}
public class System.Management.Automation.PSProperty : PSPropertyInfo {
    public bool IsGettable { get; }
    public bool IsSettable { get; }
    public PSMemberTypes MemberType { get; }
    public string TypeNameOfValue { get; }
    public object Value { get; public set; }
    public virtual string ToString();
    public virtual PSMemberInfo Copy();
    public virtual PSMemberTypes get_MemberType();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual bool get_IsSettable();
    public virtual bool get_IsGettable();
    public virtual string get_TypeNameOfValue();
}
public abstract class System.Management.Automation.PSPropertyAdapter : object {
    public virtual Collection`1<string> GetTypeNameHierarchy(object baseObject);
    public abstract virtual Collection`1<PSAdaptedProperty> GetProperties(object baseObject);
    public abstract virtual PSAdaptedProperty GetProperty(object baseObject, string propertyName);
    public abstract virtual bool IsSettable(PSAdaptedProperty adaptedProperty);
    public abstract virtual bool IsGettable(PSAdaptedProperty adaptedProperty);
    public abstract virtual object GetPropertyValue(PSAdaptedProperty adaptedProperty);
    public abstract virtual void SetPropertyValue(PSAdaptedProperty adaptedProperty, object value);
    public abstract virtual string GetPropertyTypeName(PSAdaptedProperty adaptedProperty);
}
public abstract class System.Management.Automation.PSPropertyInfo : PSMemberInfo {
    public bool IsGettable { get; }
    public bool IsSettable { get; }
    public abstract virtual bool get_IsSettable();
    public abstract virtual bool get_IsGettable();
}
public class System.Management.Automation.PSPropertySet : PSMemberInfo {
    public PSMemberTypes MemberType { get; }
    public Collection`1<string> ReferencedPropertyNames { get; }
    public string TypeNameOfValue { get; }
    public object Value { get; public set; }
    public PSPropertySet(string name, IEnumerable`1<string> referencedPropertyNames);
    public virtual string ToString();
    public Collection`1<string> get_ReferencedPropertyNames();
    public virtual PSMemberInfo Copy();
    public virtual PSMemberTypes get_MemberType();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual string get_TypeNameOfValue();
}
public class System.Management.Automation.PSReference : object {
    public object Value { get; public set; }
    public PSReference(object value);
    public object get_Value();
    public void set_Value(object value);
}
public class System.Management.Automation.PSScriptMethod : PSMethodInfo {
    public PSMemberTypes MemberType { get; }
    public Collection`1<string> OverloadDefinitions { get; }
    public ScriptBlock Script { get; }
    public string TypeNameOfValue { get; }
    public PSScriptMethod(string name, ScriptBlock script);
    public virtual string ToString();
    public ScriptBlock get_Script();
    public virtual object Invoke(Object[] arguments);
    public virtual Collection`1<string> get_OverloadDefinitions();
    public virtual PSMemberInfo Copy();
    public virtual PSMemberTypes get_MemberType();
    public virtual string get_TypeNameOfValue();
}
public class System.Management.Automation.PSScriptProperty : PSPropertyInfo {
    public ScriptBlock GetterScript { get; }
    public bool IsGettable { get; }
    public bool IsSettable { get; }
    public PSMemberTypes MemberType { get; }
    public ScriptBlock SetterScript { get; }
    public string TypeNameOfValue { get; }
    public object Value { get; public set; }
    public PSScriptProperty(string name, ScriptBlock getterScript);
    public PSScriptProperty(string name, ScriptBlock getterScript, ScriptBlock setterScript);
    public virtual string ToString();
    public ScriptBlock get_GetterScript();
    public ScriptBlock get_SetterScript();
    public virtual PSMemberInfo Copy();
    public virtual PSMemberTypes get_MemberType();
    public virtual bool get_IsSettable();
    public virtual bool get_IsGettable();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual string get_TypeNameOfValue();
}
public class System.Management.Automation.PSSecurityException : RuntimeException {
    public ErrorRecord ErrorRecord { get; }
    public string Message { get; }
    protected PSSecurityException(SerializationInfo info, StreamingContext context);
    public PSSecurityException(string message);
    public PSSecurityException(string message, Exception innerException);
    public virtual ErrorRecord get_ErrorRecord();
    public virtual string get_Message();
}
public class System.Management.Automation.PSSerializer : object {
    public static string Serialize(object source);
    public static string Serialize(object source, int depth);
    public static object Deserialize(string source);
    public static Object[] DeserializeAsList(string source);
}
public abstract class System.Management.Automation.PSSessionTypeOption : object {
    protected internal virtual string ConstructPrivateData();
    protected internal virtual PSSessionTypeOption ConstructObjectFromPrivateData(string privateData);
    protected internal virtual void CopyUpdatedValuesFrom(PSSessionTypeOption updated);
}
public abstract class System.Management.Automation.PSSnapIn : PSSnapInInstaller {
    public String[] Formats { get; }
    public String[] Types { get; }
    public virtual String[] get_Formats();
    public virtual String[] get_Types();
}
public class System.Management.Automation.PSSnapInInfo : object {
    public string ApplicationBase { get; }
    public string AssemblyName { get; }
    public string Description { get; }
    public Collection`1<string> Formats { get; }
    public bool IsDefault { get; }
    public bool LogPipelineExecutionDetails { get; public set; }
    public string ModuleName { get; }
    public string Name { get; }
    public Version PSVersion { get; }
    public Collection`1<string> Types { get; }
    public string Vendor { get; }
    public Version Version { get; }
    public string get_Name();
    public bool get_IsDefault();
    public string get_ApplicationBase();
    public string get_AssemblyName();
    public string get_ModuleName();
    public Version get_PSVersion();
    public Version get_Version();
    public Collection`1<string> get_Types();
    public Collection`1<string> get_Formats();
    public string get_Description();
    public string get_Vendor();
    public bool get_LogPipelineExecutionDetails();
    public void set_LogPipelineExecutionDetails(bool value);
    public virtual string ToString();
}
public abstract class System.Management.Automation.PSSnapInInstaller : PSInstaller {
    public string Description { get; }
    public string DescriptionResource { get; }
    public string Name { get; }
    public string Vendor { get; }
    public string VendorResource { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Vendor();
    public virtual string get_VendorResource();
    public abstract virtual string get_Description();
    public virtual string get_DescriptionResource();
}
public class System.Management.Automation.PSSnapInSpecification : object {
    public string Name { get; }
    public Version Version { get; }
    public string get_Name();
    public Version get_Version();
}
public class System.Management.Automation.PSToken : object {
    public string Content { get; }
    public int EndColumn { get; }
    public int EndLine { get; }
    public int Length { get; }
    public int Start { get; }
    public int StartColumn { get; }
    public int StartLine { get; }
    public PSTokenType Type { get; }
    public string get_Content();
    public static PSTokenType GetPSTokenType(Token token);
    public PSTokenType get_Type();
    public int get_Start();
    public int get_Length();
    public int get_StartLine();
    public int get_StartColumn();
    public int get_EndLine();
    public int get_EndColumn();
}
public enum System.Management.Automation.PSTokenType : Enum {
    public int value__;
    public static PSTokenType Attribute;
    public static PSTokenType Command;
    public static PSTokenType CommandArgument;
    public static PSTokenType CommandParameter;
    public static PSTokenType Comment;
    public static PSTokenType GroupEnd;
    public static PSTokenType GroupStart;
    public static PSTokenType Keyword;
    public static PSTokenType LineContinuation;
    public static PSTokenType LoopLabel;
    public static PSTokenType Member;
    public static PSTokenType NewLine;
    public static PSTokenType Number;
    public static PSTokenType Operator;
    public static PSTokenType Position;
    public static PSTokenType StatementSeparator;
    public static PSTokenType String;
    public static PSTokenType Type;
    public static PSTokenType Unknown;
    public static PSTokenType Variable;
}
public class System.Management.Automation.PSTraceSource : object {
    public StringDictionary Attributes { get; }
    public string Description { get; public set; }
    public TraceListenerCollection Listeners { get; }
    public string Name { get; }
    public PSTraceSourceOptions Options { get; public set; }
    public SourceSwitch Switch { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    public PSTraceSourceOptions get_Options();
    public void set_Options(PSTraceSourceOptions value);
    public StringDictionary get_Attributes();
    public TraceListenerCollection get_Listeners();
    public string get_Name();
    public SourceSwitch get_Switch();
    public void set_Switch(SourceSwitch value);
}
[FlagsAttribute]
public enum System.Management.Automation.PSTraceSourceOptions : Enum {
    public int value__;
    public static PSTraceSourceOptions All;
    public static PSTraceSourceOptions Assert;
    public static PSTraceSourceOptions Constructor;
    public static PSTraceSourceOptions Data;
    public static PSTraceSourceOptions Delegates;
    public static PSTraceSourceOptions Dispose;
    public static PSTraceSourceOptions Error;
    public static PSTraceSourceOptions Errors;
    public static PSTraceSourceOptions Events;
    public static PSTraceSourceOptions Exception;
    public static PSTraceSourceOptions ExecutionFlow;
    public static PSTraceSourceOptions Finalizer;
    public static PSTraceSourceOptions Lock;
    public static PSTraceSourceOptions Method;
    public static PSTraceSourceOptions None;
    public static PSTraceSourceOptions Property;
    public static PSTraceSourceOptions Scope;
    public static PSTraceSourceOptions Verbose;
    public static PSTraceSourceOptions Warning;
    public static PSTraceSourceOptions WriteLine;
}
public class System.Management.Automation.PSTransaction : object {
    public RollbackSeverity RollbackPreference { get; }
    public PSTransactionStatus Status { get; }
    public int SubscriberCount { get; public set; }
    public RollbackSeverity get_RollbackPreference();
    public int get_SubscriberCount();
    public void set_SubscriberCount(int value);
    public PSTransactionStatus get_Status();
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    public void Dispose(bool disposing);
}
public class System.Management.Automation.PSTransactionContext : object {
    protected virtual void Finalize();
    public sealed virtual void Dispose();
}
public enum System.Management.Automation.PSTransactionStatus : Enum {
    public int value__;
    public static PSTransactionStatus Active;
    public static PSTransactionStatus Committed;
    public static PSTransactionStatus RolledBack;
}
public abstract class System.Management.Automation.PSTransportOption : object {
    protected internal virtual void LoadFromDefaults(PSSessionType sessionType, bool keepAssigned);
    public sealed virtual object Clone();
}
public abstract class System.Management.Automation.PSTypeConverter : object {
    public abstract virtual bool CanConvertFrom(object sourceValue, Type destinationType);
    public virtual bool CanConvertFrom(PSObject sourceValue, Type destinationType);
    public abstract virtual object ConvertFrom(object sourceValue, Type destinationType, IFormatProvider formatProvider, bool ignoreCase);
    public virtual object ConvertFrom(PSObject sourceValue, Type destinationType, IFormatProvider formatProvider, bool ignoreCase);
    public abstract virtual bool CanConvertTo(object sourceValue, Type destinationType);
    public virtual bool CanConvertTo(PSObject sourceValue, Type destinationType);
    public abstract virtual object ConvertTo(object sourceValue, Type destinationType, IFormatProvider formatProvider, bool ignoreCase);
    public virtual object ConvertTo(PSObject sourceValue, Type destinationType, IFormatProvider formatProvider, bool ignoreCase);
}
public class System.Management.Automation.PSTypeName : object {
    public string Name { get; }
    public Type Type { get; }
    public TypeDefinitionAst TypeDefinitionAst { get; }
    public PSTypeName(Type type);
    public PSTypeName(string name);
    public PSTypeName(TypeDefinitionAst typeDefinitionAst);
    public PSTypeName(ITypeName typeName);
    public string get_Name();
    public Type get_Type();
    public TypeDefinitionAst get_TypeDefinitionAst();
    public virtual string ToString();
}
[AttributeUsageAttribute("384")]
public class System.Management.Automation.PSTypeNameAttribute : Attribute {
    public string PSTypeName { get; }
    public PSTypeNameAttribute(string psTypeName);
    public string get_PSTypeName();
}
public class System.Management.Automation.PSVariable : object {
    public Collection`1<Attribute> Attributes { get; }
    public string Description { get; public set; }
    public PSModuleInfo Module { get; }
    public string ModuleName { get; }
    public string Name { get; }
    public ScopedItemOptions Options { get; public set; }
    public object Value { get; public set; }
    public SessionStateEntryVisibility Visibility { get; public set; }
    public PSVariable(string name);
    public PSVariable(string name, object value);
    public PSVariable(string name, object value, ScopedItemOptions options);
    public PSVariable(string name, object value, ScopedItemOptions options, Collection`1<Attribute> attributes);
    public string get_Name();
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public sealed virtual SessionStateEntryVisibility get_Visibility();
    public sealed virtual void set_Visibility(SessionStateEntryVisibility value);
    public PSModuleInfo get_Module();
    public string get_ModuleName();
    public virtual ScopedItemOptions get_Options();
    public virtual void set_Options(ScopedItemOptions value);
    public Collection`1<Attribute> get_Attributes();
    public virtual bool IsValidValue(object value);
}
public class System.Management.Automation.PSVariableIntrinsics : object {
    public PSVariable Get(string name);
    public object GetValue(string name);
    public object GetValue(string name, object defaultValue);
    public void Set(string name, object value);
    public void Set(PSVariable variable);
    public void Remove(string name);
    public void Remove(PSVariable variable);
}
public class System.Management.Automation.PSVariableProperty : PSNoteProperty {
    public bool IsGettable { get; }
    public bool IsSettable { get; }
    public PSMemberTypes MemberType { get; }
    public string TypeNameOfValue { get; }
    public object Value { get; public set; }
    public PSVariableProperty(PSVariable variable);
    public virtual string ToString();
    public virtual PSMemberInfo Copy();
    public virtual PSMemberTypes get_MemberType();
    public virtual bool get_IsSettable();
    public virtual bool get_IsGettable();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual string get_TypeNameOfValue();
}
[DefaultMemberAttribute("Item")]
public class System.Management.Automation.ReadOnlyPSMemberInfoCollection`1 : object {
    public int Count { get; }
    public T Item { get; }
    public T Item { get; }
    public T get_Item(string name);
    public ReadOnlyPSMemberInfoCollection`1<T> Match(string name);
    public ReadOnlyPSMemberInfoCollection`1<T> Match(string name, PSMemberTypes memberTypes);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual IEnumerator`1<T> GetEnumerator();
    public int get_Count();
    public T get_Item(int index);
}
public class System.Management.Automation.RedirectedException : RuntimeException {
    public RedirectedException(string message);
    public RedirectedException(string message, Exception innerException);
    protected RedirectedException(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.RegisterArgumentCompleter : PSCmdlet {
    public String[] CommandName { get; public set; }
    public SwitchParameter Native { get; public set; }
    public string ParameterName { get; public set; }
    public ScriptBlock ScriptBlock { get; public set; }
    public String[] get_CommandName();
    public void set_CommandName(String[] value);
    public string get_ParameterName();
    public void set_ParameterName(string value);
    public ScriptBlock get_ScriptBlock();
    public void set_ScriptBlock(ScriptBlock value);
    public SwitchParameter get_Native();
    public void set_Native(SwitchParameter value);
    protected virtual void EndProcessing();
}
public class System.Management.Automation.RemoteCommandInfo : CommandInfo {
    public string Definition { get; }
    public ReadOnlyCollection`1<PSTypeName> OutputType { get; }
    public virtual string get_Definition();
    public virtual ReadOnlyCollection`1<PSTypeName> get_OutputType();
}
public class System.Management.Automation.RemoteException : RuntimeException {
    public ErrorRecord ErrorRecord { get; }
    public PSObject SerializedRemoteException { get; }
    public PSObject SerializedRemoteInvocationInfo { get; }
    public RemoteException(string message);
    public RemoteException(string message, Exception innerException);
    protected RemoteException(SerializationInfo info, StreamingContext context);
    public PSObject get_SerializedRemoteException();
    public PSObject get_SerializedRemoteInvocationInfo();
    public virtual ErrorRecord get_ErrorRecord();
}
[FlagsAttribute]
public enum System.Management.Automation.RemoteStreamOptions : Enum {
    public int value__;
    public static RemoteStreamOptions AddInvocationInfo;
    public static RemoteStreamOptions AddInvocationInfoToDebugRecord;
    public static RemoteStreamOptions AddInvocationInfoToErrorRecord;
    public static RemoteStreamOptions AddInvocationInfoToVerboseRecord;
    public static RemoteStreamOptions AddInvocationInfoToWarningRecord;
}
public class System.Management.Automation.Remoting.CmdletMethodInvoker`1 : object {
    public Func`2<Cmdlet, T> Action { get; public set; }
    public Exception ExceptionThrownOnCmdletThread { get; public set; }
    public ManualResetEventSlim Finished { get; public set; }
    public T MethodResult { get; public set; }
    public object SyncObject { get; public set; }
    public Func`2<Cmdlet, T> get_Action();
    public void set_Action(Func`2<Cmdlet, T> value);
    public Exception get_ExceptionThrownOnCmdletThread();
    public void set_ExceptionThrownOnCmdletThread(Exception value);
    public ManualResetEventSlim get_Finished();
    public void set_Finished(ManualResetEventSlim value);
    public object get_SyncObject();
    public void set_SyncObject(object value);
    public T get_MethodResult();
    public void set_MethodResult(T value);
}
public class System.Management.Automation.Remoting.Internal.PSStreamObject : object {
    public PSStreamObjectType ObjectType { get; public set; }
    public PSStreamObject(PSStreamObjectType objectType, object value);
    public PSStreamObjectType get_ObjectType();
    public void set_ObjectType(PSStreamObjectType value);
    public void WriteStreamObject(Cmdlet cmdlet, bool overrideInquire);
}
public enum System.Management.Automation.Remoting.Internal.PSStreamObjectType : Enum {
    public int value__;
    public static PSStreamObjectType BlockingError;
    public static PSStreamObjectType Debug;
    public static PSStreamObjectType Error;
    public static PSStreamObjectType Exception;
    public static PSStreamObjectType Information;
    public static PSStreamObjectType MethodExecutor;
    public static PSStreamObjectType Output;
    public static PSStreamObjectType Progress;
    public static PSStreamObjectType ShouldMethod;
    public static PSStreamObjectType Verbose;
    public static PSStreamObjectType Warning;
    public static PSStreamObjectType WarningRecord;
}
public class System.Management.Automation.Remoting.OriginInfo : object {
    public Guid InstanceID { get; public set; }
    public string PSComputerName { get; }
    public Guid RunspaceID { get; }
    public OriginInfo(string computerName, Guid runspaceID);
    public OriginInfo(string computerName, Guid runspaceID, Guid instanceID);
    public string get_PSComputerName();
    public Guid get_RunspaceID();
    public Guid get_InstanceID();
    public void set_InstanceID(Guid value);
    public virtual string ToString();
}
public enum System.Management.Automation.Remoting.ProxyAccessType : Enum {
    public int value__;
    public static ProxyAccessType AutoDetect;
    public static ProxyAccessType IEConfig;
    public static ProxyAccessType NoProxyServer;
    public static ProxyAccessType None;
    public static ProxyAccessType WinHttpConfig;
}
public class System.Management.Automation.Remoting.PSCertificateDetails : object {
    public string IssuerName { get; }
    public string IssuerThumbprint { get; }
    public string Subject { get; }
    public PSCertificateDetails(string subject, string issuerName, string issuerThumbprint);
    public string get_Subject();
    public string get_IssuerName();
    public string get_IssuerThumbprint();
}
public class System.Management.Automation.Remoting.PSIdentity : object {
    public string AuthenticationType { get; }
    public PSCertificateDetails CertificateDetails { get; }
    public bool IsAuthenticated { get; }
    public string Name { get; }
    public PSIdentity(string authType, bool isAuthenticated, string userName, PSCertificateDetails cert);
    public sealed virtual string get_AuthenticationType();
    public sealed virtual bool get_IsAuthenticated();
    public sealed virtual string get_Name();
    public PSCertificateDetails get_CertificateDetails();
}
public class System.Management.Automation.Remoting.PSPrincipal : object {
    public PSIdentity Identity { get; }
    private IIdentity System.Security.Principal.IPrincipal.Identity { get; }
    public WindowsIdentity WindowsIdentity { get; }
    public PSPrincipal(PSIdentity identity, WindowsIdentity windowsIdentity);
    public PSIdentity get_Identity();
    public WindowsIdentity get_WindowsIdentity();
    private sealed virtual override IIdentity System.Security.Principal.IPrincipal.get_Identity();
    public sealed virtual bool IsInRole(string role);
}
public class System.Management.Automation.Remoting.PSRemotingDataStructureException : RuntimeException {
    public PSRemotingDataStructureException(string message);
    public PSRemotingDataStructureException(string message, Exception innerException);
    protected PSRemotingDataStructureException(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.Remoting.PSRemotingTransportException : RuntimeException {
    public int ErrorCode { get; public set; }
    public string TransportMessage { get; public set; }
    public PSRemotingTransportException(string message);
    public PSRemotingTransportException(string message, Exception innerException);
    protected PSRemotingTransportException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    protected void SetDefaultErrorRecord();
    public int get_ErrorCode();
    public void set_ErrorCode(int value);
    public string get_TransportMessage();
    public void set_TransportMessage(string value);
}
public class System.Management.Automation.Remoting.PSRemotingTransportRedirectException : PSRemotingTransportException {
    public string RedirectLocation { get; }
    public PSRemotingTransportRedirectException(string message);
    public PSRemotingTransportRedirectException(string message, Exception innerException);
    protected PSRemotingTransportRedirectException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_RedirectLocation();
}
public class System.Management.Automation.Remoting.PSSenderInfo : object {
    public PSPrimitiveDictionary ApplicationArguments { get; }
    public TimeZone ClientTimeZone { get; }
    public string ConnectionString { get; }
    public PSPrincipal UserInfo { get; }
    public PSSenderInfo(PSPrincipal userPrincipal, string httpUrl);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public PSPrincipal get_UserInfo();
    public TimeZone get_ClientTimeZone();
    public string get_ConnectionString();
    public PSPrimitiveDictionary get_ApplicationArguments();
}
public abstract class System.Management.Automation.Remoting.PSSessionConfiguration : object {
    public abstract virtual InitialSessionState GetInitialSessionState(PSSenderInfo senderInfo);
    public virtual InitialSessionState GetInitialSessionState(PSSessionConfigurationData sessionConfigurationData, PSSenderInfo senderInfo, string configProviderId);
    public virtual Nullable`1<int> GetMaximumReceivedObjectSize(PSSenderInfo senderInfo);
    public virtual Nullable`1<int> GetMaximumReceivedDataSizePerCommand(PSSenderInfo senderInfo);
    public virtual PSPrimitiveDictionary GetApplicationPrivateData(PSSenderInfo senderInfo);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
}
public class System.Management.Automation.Remoting.PSSessionConfigurationData : object {
    public static bool IsServerManager;
    public List`1<string> ModulesToImport { get; }
    public string PrivateData { get; }
    public List`1<string> get_ModulesToImport();
    public string get_PrivateData();
}
public class System.Management.Automation.Remoting.PSSessionOption : object {
    public PSPrimitiveDictionary ApplicationArguments { get; public set; }
    public TimeSpan CancelTimeout { get; public set; }
    public CultureInfo Culture { get; public set; }
    public TimeSpan IdleTimeout { get; public set; }
    public bool IncludePortInSPN { get; public set; }
    public int MaxConnectionRetryCount { get; public set; }
    public int MaximumConnectionRedirectionCount { get; public set; }
    public Nullable`1<int> MaximumReceivedDataSizePerCommand { get; public set; }
    public Nullable`1<int> MaximumReceivedObjectSize { get; public set; }
    public bool NoCompression { get; public set; }
    public bool NoEncryption { get; public set; }
    public bool NoMachineProfile { get; public set; }
    public TimeSpan OpenTimeout { get; public set; }
    public TimeSpan OperationTimeout { get; public set; }
    public OutputBufferingMode OutputBufferingMode { get; public set; }
    public ProxyAccessType ProxyAccessType { get; public set; }
    public AuthenticationMechanism ProxyAuthentication { get; public set; }
    public PSCredential ProxyCredential { get; public set; }
    public bool SkipCACheck { get; public set; }
    public bool SkipCNCheck { get; public set; }
    public bool SkipRevocationCheck { get; public set; }
    public CultureInfo UICulture { get; public set; }
    public bool UseUTF16 { get; public set; }
    public int get_MaximumConnectionRedirectionCount();
    public void set_MaximumConnectionRedirectionCount(int value);
    public bool get_NoCompression();
    public void set_NoCompression(bool value);
    public bool get_NoMachineProfile();
    public void set_NoMachineProfile(bool value);
    public ProxyAccessType get_ProxyAccessType();
    public void set_ProxyAccessType(ProxyAccessType value);
    public AuthenticationMechanism get_ProxyAuthentication();
    public void set_ProxyAuthentication(AuthenticationMechanism value);
    public PSCredential get_ProxyCredential();
    public void set_ProxyCredential(PSCredential value);
    public bool get_SkipCACheck();
    public void set_SkipCACheck(bool value);
    public bool get_SkipCNCheck();
    public void set_SkipCNCheck(bool value);
    public bool get_SkipRevocationCheck();
    public void set_SkipRevocationCheck(bool value);
    public TimeSpan get_OperationTimeout();
    public void set_OperationTimeout(TimeSpan value);
    public bool get_NoEncryption();
    public void set_NoEncryption(bool value);
    public bool get_UseUTF16();
    public void set_UseUTF16(bool value);
    public bool get_IncludePortInSPN();
    public void set_IncludePortInSPN(bool value);
    public OutputBufferingMode get_OutputBufferingMode();
    public void set_OutputBufferingMode(OutputBufferingMode value);
    public int get_MaxConnectionRetryCount();
    public void set_MaxConnectionRetryCount(int value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public CultureInfo get_UICulture();
    public void set_UICulture(CultureInfo value);
    public Nullable`1<int> get_MaximumReceivedDataSizePerCommand();
    public void set_MaximumReceivedDataSizePerCommand(Nullable`1<int> value);
    public Nullable`1<int> get_MaximumReceivedObjectSize();
    public void set_MaximumReceivedObjectSize(Nullable`1<int> value);
    public PSPrimitiveDictionary get_ApplicationArguments();
    public void set_ApplicationArguments(PSPrimitiveDictionary value);
    public TimeSpan get_OpenTimeout();
    public void set_OpenTimeout(TimeSpan value);
    public TimeSpan get_CancelTimeout();
    public void set_CancelTimeout(TimeSpan value);
    public TimeSpan get_IdleTimeout();
    public void set_IdleTimeout(TimeSpan value);
}
public enum System.Management.Automation.Remoting.SessionType : Enum {
    public int value__;
    public static SessionType Default;
    public static SessionType Empty;
    public static SessionType RestrictedRemoteServer;
}
public class System.Management.Automation.Remoting.WSMan.ActiveSessionsChangedEventArgs : EventArgs {
    public int ActiveSessionsCount { get; }
    public ActiveSessionsChangedEventArgs(int activeSessionsCount);
    public int get_ActiveSessionsCount();
}
public static class System.Management.Automation.Remoting.WSMan.WSManServerChannelEvents : object {
    public static void add_ShuttingDown(EventHandler value);
    public static void remove_ShuttingDown(EventHandler value);
    public static void add_ActiveSessionsChanged(EventHandler`1<ActiveSessionsChangedEventArgs> value);
    public static void remove_ActiveSessionsChanged(EventHandler`1<ActiveSessionsChangedEventArgs> value);
}
public class System.Management.Automation.Remoting.WSManPluginManagedEntryInstanceWrapper : object {
    public sealed virtual void Dispose();
    protected virtual void Finalize();
    public IntPtr GetEntryDelegate();
}
public class System.Management.Automation.Remoting.WSManPluginManagedEntryWrapper : object {
    public static int InitPlugin(IntPtr wkrPtrs);
    public static void ShutdownPlugin(IntPtr pluginContext);
    public static void WSManPluginConnect(IntPtr pluginContext, IntPtr requestDetails, int flags, IntPtr shellContext, IntPtr commandContext, IntPtr inboundConnectInformation);
    public static void WSManPluginShell(IntPtr pluginContext, IntPtr requestDetails, int flags, string extraInfo, IntPtr startupInfo, IntPtr inboundShellInformation);
    public static void WSManPluginReleaseShellContext(IntPtr pluginContext, IntPtr shellContext);
    public static void WSManPluginCommand(IntPtr pluginContext, IntPtr requestDetails, int flags, IntPtr shellContext, string commandLine, IntPtr arguments);
    public static void WSManPluginReleaseCommandContext(IntPtr pluginContext, IntPtr shellContext, IntPtr commandContext);
    public static void WSManPluginSend(IntPtr pluginContext, IntPtr requestDetails, int flags, IntPtr shellContext, IntPtr commandContext, string stream, IntPtr inboundData);
    public static void WSManPluginReceive(IntPtr pluginContext, IntPtr requestDetails, int flags, IntPtr shellContext, IntPtr commandContext, IntPtr streamSet);
    public static void WSManPluginSignal(IntPtr pluginContext, IntPtr requestDetails, int flags, IntPtr shellContext, IntPtr commandContext, string code);
    public static void PSPluginOperationShutdownCallback(object operationContext, bool timedOut);
}
public enum System.Management.Automation.RemotingBehavior : Enum {
    public int value__;
    public static RemotingBehavior Custom;
    public static RemotingBehavior None;
    public static RemotingBehavior PowerShell;
}
public enum System.Management.Automation.RemotingCapability : Enum {
    public int value__;
    public static RemotingCapability None;
    public static RemotingCapability OwnedByCommand;
    public static RemotingCapability PowerShell;
    public static RemotingCapability SupportedByCommand;
}
public abstract class System.Management.Automation.Repository`1 : object {
    protected Repository`1(string identifier);
    public void Add(T item);
    public void Remove(T item);
    public List`1<T> GetItems();
    protected abstract virtual Guid GetKey(T item);
    public T GetItem(Guid instanceId);
}
public enum System.Management.Automation.ResolutionPurpose : Enum {
    public int value__;
    public static ResolutionPurpose Decryption;
    public static ResolutionPurpose Encryption;
}
public enum System.Management.Automation.ReturnContainers : Enum {
    public int value__;
    public static ReturnContainers ReturnAllContainers;
    public static ReturnContainers ReturnMatchingContainers;
}
public enum System.Management.Automation.RollbackSeverity : Enum {
    public int value__;
    public static RollbackSeverity Error;
    public static RollbackSeverity Never;
    public static RollbackSeverity TerminatingError;
}
public class System.Management.Automation.RunspaceInvoke : object {
    public RunspaceInvoke(RunspaceConfiguration runspaceConfiguration);
    public RunspaceInvoke(string consoleFilePath);
    public RunspaceInvoke(Runspace runspace);
    public Collection`1<PSObject> Invoke(string script);
    public Collection`1<PSObject> Invoke(string script, IEnumerable input);
    public Collection`1<PSObject> Invoke(string script, IEnumerable input, IList& errors);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public enum System.Management.Automation.RunspaceMode : Enum {
    public int value__;
    public static RunspaceMode CurrentRunspace;
    public static RunspaceMode NewRunspace;
}
public class System.Management.Automation.RunspacePoolStateInfo : object {
    public Exception Reason { get; }
    public RunspacePoolState State { get; }
    public RunspacePoolStateInfo(RunspacePoolState state, Exception reason);
    public RunspacePoolState get_State();
    public Exception get_Reason();
}
public class System.Management.Automation.RunspaceRepository : Repository`1<PSSession> {
    public List`1<PSSession> Runspaces { get; }
    public List`1<PSSession> get_Runspaces();
    protected virtual Guid GetKey(PSSession item);
}
public class System.Management.Automation.Runspaces.AliasPropertyData : TypeMemberData {
    public bool IsHidden { get; public set; }
    public Type MemberType { get; public set; }
    public string ReferencedMemberName { get; public set; }
    public AliasPropertyData(string name, string referencedMemberName);
    public AliasPropertyData(string name, string referencedMemberName, Type type);
    public string get_ReferencedMemberName();
    public void set_ReferencedMemberName(string value);
    public Type get_MemberType();
    public void set_MemberType(Type value);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
}
public class System.Management.Automation.Runspaces.AssemblyConfigurationEntry : RunspaceConfigurationEntry {
    public string FileName { get; }
    public AssemblyConfigurationEntry(string name, string fileName);
    public string get_FileName();
}
public enum System.Management.Automation.Runspaces.AuthenticationMechanism : Enum {
    public int value__;
    public static AuthenticationMechanism Basic;
    public static AuthenticationMechanism Credssp;
    public static AuthenticationMechanism Default;
    public static AuthenticationMechanism Digest;
    public static AuthenticationMechanism Kerberos;
    public static AuthenticationMechanism Negotiate;
    public static AuthenticationMechanism NegotiateWithImplicitCredential;
}
public class System.Management.Automation.Runspaces.CmdletConfigurationEntry : RunspaceConfigurationEntry {
    public string HelpFileName { get; }
    public Type ImplementingType { get; }
    public CmdletConfigurationEntry(string name, Type implementingType, string helpFileName);
    public Type get_ImplementingType();
    public string get_HelpFileName();
}
public class System.Management.Automation.Runspaces.CodeMethodData : TypeMemberData {
    public MethodInfo CodeReference { get; public set; }
    public CodeMethodData(string name, MethodInfo methodToCall);
    public MethodInfo get_CodeReference();
    public void set_CodeReference(MethodInfo value);
}
public class System.Management.Automation.Runspaces.CodePropertyData : TypeMemberData {
    public MethodInfo GetCodeReference { get; public set; }
    public bool IsHidden { get; public set; }
    public MethodInfo SetCodeReference { get; public set; }
    public CodePropertyData(string name, MethodInfo getMethod);
    public CodePropertyData(string name, MethodInfo getMethod, MethodInfo setMethod);
    public MethodInfo get_GetCodeReference();
    public void set_GetCodeReference(MethodInfo value);
    public MethodInfo get_SetCodeReference();
    public void set_SetCodeReference(MethodInfo value);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
}
public class System.Management.Automation.Runspaces.Command : object {
    public string CommandText { get; }
    public bool IsEndOfStatement { get; }
    public bool IsScript { get; }
    public PipelineResultTypes MergeUnclaimedPreviousCommandResults { get; public set; }
    public CommandParameterCollection Parameters { get; }
    public bool UseLocalScope { get; }
    public Command(string command);
    public Command(string command, bool isScript);
    public Command(string command, bool isScript, bool useLocalScope);
    public CommandParameterCollection get_Parameters();
    public string get_CommandText();
    public bool get_IsScript();
    public bool get_UseLocalScope();
    public bool get_IsEndOfStatement();
    public virtual string ToString();
    public PipelineResultTypes get_MergeUnclaimedPreviousCommandResults();
    public void set_MergeUnclaimedPreviousCommandResults(PipelineResultTypes value);
    public void MergeMyResults(PipelineResultTypes myResult, PipelineResultTypes toResult);
}
public class System.Management.Automation.Runspaces.CommandCollection : Collection`1<Command> {
    public void Add(string command);
    public void AddScript(string scriptContents);
    public void AddScript(string scriptContents, bool useLocalScope);
}
public class System.Management.Automation.Runspaces.CommandParameter : object {
    public string Name { get; }
    public object Value { get; }
    public CommandParameter(string name);
    public CommandParameter(string name, object value);
    public string get_Name();
    public object get_Value();
}
public class System.Management.Automation.Runspaces.CommandParameterCollection : Collection`1<CommandParameter> {
    public void Add(string name);
    public void Add(string name, object value);
}
public abstract class System.Management.Automation.Runspaces.ConstrainedSessionStateEntry : InitialSessionStateEntry {
    public SessionStateEntryVisibility Visibility { get; public set; }
    protected ConstrainedSessionStateEntry(string name, SessionStateEntryVisibility visibility);
    public SessionStateEntryVisibility get_Visibility();
    public void set_Visibility(SessionStateEntryVisibility value);
}
public class System.Management.Automation.Runspaces.FormatConfigurationEntry : RunspaceConfigurationEntry {
    public string FileName { get; }
    public ExtendedTypeDefinition FormatData { get; }
    public FormatConfigurationEntry(string name, string fileName);
    public FormatConfigurationEntry(string fileName);
    public FormatConfigurationEntry(ExtendedTypeDefinition typeDefinition);
    public string get_FileName();
    public ExtendedTypeDefinition get_FormatData();
}
public class System.Management.Automation.Runspaces.FormatTable : object {
    public FormatTable(IEnumerable`1<string> formatFiles);
    public void AppendFormatData(IEnumerable`1<ExtendedTypeDefinition> formatData);
    public void PrependFormatData(IEnumerable`1<ExtendedTypeDefinition> formatData);
    public static FormatTable LoadDefaultFormatFiles();
}
public class System.Management.Automation.Runspaces.FormatTableLoadException : RuntimeException {
    public Collection`1<string> Errors { get; }
    public FormatTableLoadException(string message);
    public FormatTableLoadException(string message, Exception innerException);
    protected FormatTableLoadException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    protected void SetDefaultErrorRecord();
    public Collection`1<string> get_Errors();
}
public class System.Management.Automation.Runspaces.InitialSessionState : object {
    public ApartmentState ApartmentState { get; public set; }
    public InitialSessionStateEntryCollection`1<SessionStateAssemblyEntry> Assemblies { get; }
    public AuthorizationManager AuthorizationManager { get; public set; }
    public InitialSessionStateEntryCollection`1<SessionStateCommandEntry> Commands { get; }
    public bool DisableFormatUpdates { get; public set; }
    public InitialSessionStateEntryCollection`1<SessionStateFormatEntry> Formats { get; }
    public PSLanguageMode LanguageMode { get; public set; }
    public ReadOnlyCollection`1<ModuleSpecification> Modules { get; }
    public InitialSessionStateEntryCollection`1<SessionStateProviderEntry> Providers { get; }
    public PSThreadOptions ThreadOptions { get; public set; }
    public bool ThrowOnRunspaceOpenError { get; public set; }
    public InitialSessionStateEntryCollection`1<SessionStateTypeEntry> Types { get; }
    public bool UseFullLanguageModeInDebugger { get; public set; }
    public InitialSessionStateEntryCollection`1<SessionStateVariableEntry> Variables { get; }
    public static InitialSessionState CreateRestricted(SessionCapabilities sessionCapabilities);
    public static InitialSessionState Create();
    public static InitialSessionState CreateDefault();
    public static InitialSessionState CreateDefault2();
    public InitialSessionState Clone();
    public static InitialSessionState Create(string snapInName);
    public static InitialSessionState Create(String[] snapInNameCollection, PSConsoleLoadException& warning);
    public static InitialSessionState CreateFrom(string snapInPath, PSConsoleLoadException& warnings);
    public static InitialSessionState CreateFrom(String[] snapInPathCollection, PSConsoleLoadException& warnings);
    public PSLanguageMode get_LanguageMode();
    public void set_LanguageMode(PSLanguageMode value);
    public bool get_UseFullLanguageModeInDebugger();
    public void set_UseFullLanguageModeInDebugger(bool value);
    public ApartmentState get_ApartmentState();
    public void set_ApartmentState(ApartmentState value);
    public PSThreadOptions get_ThreadOptions();
    public void set_ThreadOptions(PSThreadOptions value);
    public bool get_ThrowOnRunspaceOpenError();
    public void set_ThrowOnRunspaceOpenError(bool value);
    public virtual AuthorizationManager get_AuthorizationManager();
    public virtual void set_AuthorizationManager(AuthorizationManager value);
    public void ImportPSModule(String[] name);
    public void ImportPSModule(IEnumerable`1<ModuleSpecification> modules);
    public void ImportPSModulesFromPath(string path);
    public ReadOnlyCollection`1<ModuleSpecification> get_Modules();
    public virtual InitialSessionStateEntryCollection`1<SessionStateAssemblyEntry> get_Assemblies();
    public virtual InitialSessionStateEntryCollection`1<SessionStateTypeEntry> get_Types();
    public virtual InitialSessionStateEntryCollection`1<SessionStateFormatEntry> get_Formats();
    public bool get_DisableFormatUpdates();
    public void set_DisableFormatUpdates(bool value);
    public virtual InitialSessionStateEntryCollection`1<SessionStateProviderEntry> get_Providers();
    public virtual InitialSessionStateEntryCollection`1<SessionStateCommandEntry> get_Commands();
    public virtual InitialSessionStateEntryCollection`1<SessionStateVariableEntry> get_Variables();
    public PSSnapInInfo ImportPSSnapIn(string name, PSSnapInException& warning);
}
public abstract class System.Management.Automation.Runspaces.InitialSessionStateEntry : object {
    public PSModuleInfo Module { get; }
    public string Name { get; }
    public PSSnapInInfo PSSnapIn { get; }
    protected InitialSessionStateEntry(string name);
    public string get_Name();
    public PSSnapInInfo get_PSSnapIn();
    public PSModuleInfo get_Module();
    public abstract virtual InitialSessionStateEntry Clone();
}
[DefaultMemberAttribute("Item")]
public class System.Management.Automation.Runspaces.InitialSessionStateEntryCollection`1 : object {
    public int Count { get; }
    public T Item { get; }
    public Collection`1<T> Item { get; }
    public InitialSessionStateEntryCollection`1(IEnumerable`1<T> items);
    public InitialSessionStateEntryCollection`1<T> Clone();
    public void Reset();
    public int get_Count();
    public T get_Item(int index);
    public Collection`1<T> get_Item(string name);
    public void RemoveItem(int index);
    public void RemoveItem(int index, int count);
    public void Clear();
    public void Remove(string name, object type);
    public void Add(T item);
    public void Add(IEnumerable`1<T> items);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
}
public class System.Management.Automation.Runspaces.InvalidPipelineStateException : SystemException {
    public PipelineState CurrentState { get; }
    public PipelineState ExpectedState { get; }
    public InvalidPipelineStateException(string message);
    public InvalidPipelineStateException(string message, Exception innerException);
    public PipelineState get_CurrentState();
    public PipelineState get_ExpectedState();
}
public class System.Management.Automation.Runspaces.InvalidRunspacePoolStateException : SystemException {
    public RunspacePoolState CurrentState { get; }
    public RunspacePoolState ExpectedState { get; }
    public InvalidRunspacePoolStateException(string message);
    public InvalidRunspacePoolStateException(string message, Exception innerException);
    protected InvalidRunspacePoolStateException(SerializationInfo info, StreamingContext context);
    public RunspacePoolState get_CurrentState();
    public RunspacePoolState get_ExpectedState();
}
public class System.Management.Automation.Runspaces.InvalidRunspaceStateException : SystemException {
    public RunspaceState CurrentState { get; }
    public RunspaceState ExpectedState { get; }
    public InvalidRunspaceStateException(string message);
    public InvalidRunspaceStateException(string message, Exception innerException);
    protected InvalidRunspaceStateException(SerializationInfo info, StreamingContext context);
    public RunspaceState get_CurrentState();
    public RunspaceState get_ExpectedState();
}
public class System.Management.Automation.Runspaces.NamedPipeConnectionInfo : RunspaceConnectionInfo {
    public string AppDomainName { get; public set; }
    public AuthenticationMechanism AuthenticationMechanism { get; public set; }
    public string CertificateThumbprint { get; public set; }
    public string ComputerName { get; public set; }
    public PSCredential Credential { get; public set; }
    public int ProcessId { get; public set; }
    public NamedPipeConnectionInfo(int processId);
    public NamedPipeConnectionInfo(int processId, string appDomainName);
    public NamedPipeConnectionInfo(int processId, string appDomainName, int openTimeout);
    public int get_ProcessId();
    public void set_ProcessId(int value);
    public string get_AppDomainName();
    public void set_AppDomainName(string value);
    public virtual string get_ComputerName();
    public virtual void set_ComputerName(string value);
    public virtual PSCredential get_Credential();
    public virtual void set_Credential(PSCredential value);
    public virtual AuthenticationMechanism get_AuthenticationMechanism();
    public virtual void set_AuthenticationMechanism(AuthenticationMechanism value);
    public virtual string get_CertificateThumbprint();
    public virtual void set_CertificateThumbprint(string value);
}
public class System.Management.Automation.Runspaces.NotePropertyData : TypeMemberData {
    public bool IsHidden { get; public set; }
    public object Value { get; public set; }
    public NotePropertyData(string name, object value);
    public object get_Value();
    public void set_Value(object value);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
}
public enum System.Management.Automation.Runspaces.OutputBufferingMode : Enum {
    public int value__;
    public static OutputBufferingMode Block;
    public static OutputBufferingMode Drop;
    public static OutputBufferingMode None;
}
public abstract class System.Management.Automation.Runspaces.Pipeline : object {
    public CommandCollection Commands { get; }
    public PipelineReader`1<object> Error { get; }
    public bool HadErrors { get; }
    public PipelineWriter Input { get; }
    public long InstanceId { get; }
    public bool IsNested { get; }
    public PipelineReader`1<PSObject> Output { get; }
    public PipelineStateInfo PipelineStateInfo { get; }
    public Runspace Runspace { get; }
    public bool SetPipelineSessionState { get; public set; }
    public abstract virtual Runspace get_Runspace();
    public abstract virtual bool get_IsNested();
    public abstract virtual PipelineWriter get_Input();
    public abstract virtual PipelineReader`1<PSObject> get_Output();
    public abstract virtual PipelineReader`1<object> get_Error();
    public abstract virtual PipelineStateInfo get_PipelineStateInfo();
    public virtual bool get_HadErrors();
    public long get_InstanceId();
    public CommandCollection get_Commands();
    public bool get_SetPipelineSessionState();
    public void set_SetPipelineSessionState(bool value);
    public abstract virtual void add_StateChanged(EventHandler`1<PipelineStateEventArgs> value);
    public abstract virtual void remove_StateChanged(EventHandler`1<PipelineStateEventArgs> value);
    public Collection`1<PSObject> Invoke();
    public abstract virtual Collection`1<PSObject> Invoke(IEnumerable input);
    public abstract virtual void InvokeAsync();
    public abstract virtual void Stop();
    public abstract virtual void StopAsync();
    public abstract virtual Pipeline Copy();
    public abstract virtual Collection`1<PSObject> Connect();
    public abstract virtual void ConnectAsync();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public abstract class System.Management.Automation.Runspaces.PipelineReader`1 : object {
    public int Count { get; }
    public bool EndOfPipeline { get; }
    public bool IsOpen { get; }
    public int MaxCapacity { get; }
    public WaitHandle WaitHandle { get; }
    public abstract virtual void add_DataReady(EventHandler value);
    public abstract virtual void remove_DataReady(EventHandler value);
    public abstract virtual WaitHandle get_WaitHandle();
    public abstract virtual bool get_EndOfPipeline();
    public abstract virtual bool get_IsOpen();
    public abstract virtual int get_Count();
    public abstract virtual int get_MaxCapacity();
    public abstract virtual void Close();
    public abstract virtual Collection`1<T> Read(int count);
    public abstract virtual T Read();
    public abstract virtual Collection`1<T> ReadToEnd();
    public abstract virtual Collection`1<T> NonBlockingRead();
    public abstract virtual Collection`1<T> NonBlockingRead(int maxRequested);
    public abstract virtual T Peek();
}
[FlagsAttribute]
public enum System.Management.Automation.Runspaces.PipelineResultTypes : Enum {
    public int value__;
    public static PipelineResultTypes All;
    public static PipelineResultTypes Debug;
    public static PipelineResultTypes Error;
    public static PipelineResultTypes Information;
    public static PipelineResultTypes None;
    public static PipelineResultTypes Null;
    public static PipelineResultTypes Output;
    public static PipelineResultTypes Verbose;
    public static PipelineResultTypes Warning;
}
public enum System.Management.Automation.Runspaces.PipelineState : Enum {
    public int value__;
    public static PipelineState Completed;
    public static PipelineState Disconnected;
    public static PipelineState Failed;
    public static PipelineState NotStarted;
    public static PipelineState Running;
    public static PipelineState Stopped;
    public static PipelineState Stopping;
}
public class System.Management.Automation.Runspaces.PipelineStateEventArgs : EventArgs {
    public PipelineStateInfo PipelineStateInfo { get; }
    public PipelineStateInfo get_PipelineStateInfo();
}
public class System.Management.Automation.Runspaces.PipelineStateInfo : object {
    public Exception Reason { get; }
    public PipelineState State { get; }
    public PipelineState get_State();
    public Exception get_Reason();
}
public abstract class System.Management.Automation.Runspaces.PipelineWriter : object {
    public int Count { get; }
    public bool IsOpen { get; }
    public int MaxCapacity { get; }
    public WaitHandle WaitHandle { get; }
    public abstract virtual WaitHandle get_WaitHandle();
    public abstract virtual bool get_IsOpen();
    public abstract virtual int get_Count();
    public abstract virtual int get_MaxCapacity();
    public abstract virtual void Close();
    public abstract virtual void Flush();
    public abstract virtual int Write(object obj);
    public abstract virtual int Write(object obj, bool enumerateCollection);
}
public class System.Management.Automation.Runspaces.PowerShellProcessInstance : object {
    public bool HasExited { get; }
    public Process Process { get; }
    public PowerShellProcessInstance(Version powerShellVersion, PSCredential credential, ScriptBlock initializationScript, bool useWow64);
    public bool get_HasExited();
    public sealed virtual void Dispose();
    public Process get_Process();
}
public class System.Management.Automation.Runspaces.PropertySetData : object {
    public Collection`1<string> ReferencedProperties { get; }
    public PropertySetData(IEnumerable`1<string> referencedProperties);
    public Collection`1<string> get_ReferencedProperties();
}
public class System.Management.Automation.Runspaces.ProviderConfigurationEntry : RunspaceConfigurationEntry {
    public string HelpFileName { get; }
    public Type ImplementingType { get; }
    public ProviderConfigurationEntry(string name, Type implementingType, string helpFileName);
    public Type get_ImplementingType();
    public string get_HelpFileName();
}
public class System.Management.Automation.Runspaces.PSConsoleLoadException : SystemException {
    public ErrorRecord ErrorRecord { get; }
    public string Message { get; }
    public PSConsoleLoadException(string message);
    public PSConsoleLoadException(string message, Exception innerException);
    protected PSConsoleLoadException(SerializationInfo info, StreamingContext context);
    public sealed virtual ErrorRecord get_ErrorRecord();
    public virtual string get_Message();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.Runspaces.PSSession : object {
    public PSPrimitiveDictionary ApplicationPrivateData { get; }
    public RunspaceAvailability Availability { get; }
    public string ComputerName { get; }
    public string ConfigurationName { get; }
    public int Id { get; }
    public Guid InstanceId { get; }
    public string Name { get; public set; }
    public Runspace Runspace { get; }
    public string get_ComputerName();
    public string get_ConfigurationName();
    public Guid get_InstanceId();
    public int get_Id();
    public string get_Name();
    public void set_Name(string value);
    public RunspaceAvailability get_Availability();
    public PSPrimitiveDictionary get_ApplicationPrivateData();
    public Runspace get_Runspace();
    public virtual string ToString();
}
public enum System.Management.Automation.Runspaces.PSSessionConfigurationAccessMode : Enum {
    public int value__;
    public static PSSessionConfigurationAccessMode Disabled;
    public static PSSessionConfigurationAccessMode Local;
    public static PSSessionConfigurationAccessMode Remote;
}
public enum System.Management.Automation.Runspaces.PSSessionType : Enum {
    public int value__;
    public static PSSessionType DefaultRemoteShell;
    public static PSSessionType Workflow;
}
public class System.Management.Automation.Runspaces.PSSnapInException : RuntimeException {
    public ErrorRecord ErrorRecord { get; }
    public string Message { get; }
    public PSSnapInException(string message);
    public PSSnapInException(string message, Exception innerException);
    protected PSSnapInException(SerializationInfo info, StreamingContext context);
    public virtual ErrorRecord get_ErrorRecord();
    public virtual string get_Message();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public enum System.Management.Automation.Runspaces.PSThreadOptions : Enum {
    public int value__;
    public static PSThreadOptions Default;
    public static PSThreadOptions ReuseThread;
    public static PSThreadOptions UseCurrentThread;
    public static PSThreadOptions UseNewThread;
}
public class System.Management.Automation.Runspaces.RemotingDebugRecord : DebugRecord {
    public OriginInfo OriginInfo { get; }
    public RemotingDebugRecord(string message, OriginInfo originInfo);
    public OriginInfo get_OriginInfo();
}
public class System.Management.Automation.Runspaces.RemotingErrorRecord : ErrorRecord {
    public OriginInfo OriginInfo { get; }
    public RemotingErrorRecord(ErrorRecord errorRecord, OriginInfo originInfo);
    protected RemotingErrorRecord(SerializationInfo info, StreamingContext context);
    public OriginInfo get_OriginInfo();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.Runspaces.RemotingInformationRecord : InformationRecord {
    public OriginInfo OriginInfo { get; }
    public RemotingInformationRecord(InformationRecord record, OriginInfo originInfo);
    public OriginInfo get_OriginInfo();
}
public class System.Management.Automation.Runspaces.RemotingProgressRecord : ProgressRecord {
    public OriginInfo OriginInfo { get; }
    public RemotingProgressRecord(ProgressRecord progressRecord, OriginInfo originInfo);
    public OriginInfo get_OriginInfo();
}
public class System.Management.Automation.Runspaces.RemotingVerboseRecord : VerboseRecord {
    public OriginInfo OriginInfo { get; }
    public RemotingVerboseRecord(string message, OriginInfo originInfo);
    public OriginInfo get_OriginInfo();
}
public class System.Management.Automation.Runspaces.RemotingWarningRecord : WarningRecord {
    public OriginInfo OriginInfo { get; }
    public RemotingWarningRecord(string message, OriginInfo originInfo);
    public OriginInfo get_OriginInfo();
}
public abstract class System.Management.Automation.Runspaces.Runspace : object {
    public ApartmentState ApartmentState { get; public set; }
    public static bool CanUseDefaultRunspace { get; }
    public RunspaceConnectionInfo ConnectionInfo { get; }
    public Debugger Debugger { get; }
    public static Runspace DefaultRunspace { get; public set; }
    public Nullable`1<DateTime> DisconnectedOn { get; }
    public PSEventManager Events { get; }
    public Nullable`1<DateTime> ExpiresOn { get; }
    public int Id { get; }
    public InitialSessionState InitialSessionState { get; }
    public Guid InstanceId { get; }
    public JobManager JobManager { get; }
    public string Name { get; public set; }
    public RunspaceConnectionInfo OriginalConnectionInfo { get; }
    public RunspaceAvailability RunspaceAvailability { get; protected set; }
    public RunspaceConfiguration RunspaceConfiguration { get; }
    public bool RunspaceIsRemote { get; }
    public RunspaceStateInfo RunspaceStateInfo { get; }
    public SessionStateProxy SessionStateProxy { get; }
    public PSThreadOptions ThreadOptions { get; public set; }
    public Version Version { get; }
    public static Runspace get_DefaultRunspace();
    public static void set_DefaultRunspace(Runspace value);
    public static bool get_CanUseDefaultRunspace();
    public ApartmentState get_ApartmentState();
    public void set_ApartmentState(ApartmentState value);
    public abstract virtual PSThreadOptions get_ThreadOptions();
    public abstract virtual void set_ThreadOptions(PSThreadOptions value);
    public abstract virtual Version get_Version();
    public bool get_RunspaceIsRemote();
    public abstract virtual RunspaceStateInfo get_RunspaceStateInfo();
    public abstract virtual RunspaceAvailability get_RunspaceAvailability();
    protected abstract virtual void set_RunspaceAvailability(RunspaceAvailability value);
    public abstract virtual RunspaceConfiguration get_RunspaceConfiguration();
    public abstract virtual InitialSessionState get_InitialSessionState();
    public Guid get_InstanceId();
    public abstract virtual RunspaceConnectionInfo get_ConnectionInfo();
    public abstract virtual RunspaceConnectionInfo get_OriginalConnectionInfo();
    public abstract virtual JobManager get_JobManager();
    public Nullable`1<DateTime> get_DisconnectedOn();
    public Nullable`1<DateTime> get_ExpiresOn();
    public string get_Name();
    public void set_Name(string value);
    public int get_Id();
    public abstract virtual void add_StateChanged(EventHandler`1<RunspaceStateEventArgs> value);
    public abstract virtual void remove_StateChanged(EventHandler`1<RunspaceStateEventArgs> value);
    public abstract virtual void add_AvailabilityChanged(EventHandler`1<RunspaceAvailabilityEventArgs> value);
    public abstract virtual void remove_AvailabilityChanged(EventHandler`1<RunspaceAvailabilityEventArgs> value);
    protected abstract virtual void OnAvailabilityChanged(RunspaceAvailabilityEventArgs e);
    protected void UpdateRunspaceAvailability(RunspaceState runspaceState, bool raiseEvent);
    public static Runspace[] GetRunspaces(RunspaceConnectionInfo connectionInfo);
    public static Runspace[] GetRunspaces(RunspaceConnectionInfo connectionInfo, PSHost host);
    public static Runspace[] GetRunspaces(RunspaceConnectionInfo connectionInfo, PSHost host, TypeTable typeTable);
    public static Runspace GetRunspace(RunspaceConnectionInfo connectionInfo, Guid sessionId, Nullable`1<Guid> commandId, PSHost host, TypeTable typeTable);
    public abstract virtual void Disconnect();
    public abstract virtual void DisconnectAsync();
    public abstract virtual void Connect();
    public abstract virtual void ConnectAsync();
    public abstract virtual Pipeline CreateDisconnectedPipeline();
    public abstract virtual PowerShell CreateDisconnectedPowerShell();
    public abstract virtual RunspaceCapability GetCapabilities();
    public abstract virtual void Open();
    public abstract virtual void OpenAsync();
    public abstract virtual void Close();
    public abstract virtual void CloseAsync();
    public abstract virtual Pipeline CreatePipeline();
    public abstract virtual Pipeline CreatePipeline(string command);
    public abstract virtual Pipeline CreatePipeline(string command, bool addToHistory);
    public abstract virtual Pipeline CreateNestedPipeline();
    public abstract virtual Pipeline CreateNestedPipeline(string command, bool addToHistory);
    public abstract virtual PSPrimitiveDictionary GetApplicationPrivateData();
    public SessionStateProxy get_SessionStateProxy();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual Debugger get_Debugger();
    public abstract virtual PSEventManager get_Events();
    public void SetBaseTransaction(CommittableTransaction transaction);
    public void SetBaseTransaction(CommittableTransaction transaction, RollbackSeverity severity);
    public void ClearBaseTransaction();
    public virtual void ResetRunspaceState();
}
public enum System.Management.Automation.Runspaces.RunspaceAvailability : Enum {
    public int value__;
    public static RunspaceAvailability Available;
    public static RunspaceAvailability AvailableForNestedCommand;
    public static RunspaceAvailability Busy;
    public static RunspaceAvailability None;
    public static RunspaceAvailability RemoteDebug;
}
public class System.Management.Automation.Runspaces.RunspaceAvailabilityEventArgs : EventArgs {
    public RunspaceAvailability RunspaceAvailability { get; }
    public RunspaceAvailability get_RunspaceAvailability();
}
public enum System.Management.Automation.Runspaces.RunspaceCapability : Enum {
    public int value__;
    public static RunspaceCapability Default;
    public static RunspaceCapability NamedPipeTransport;
    public static RunspaceCapability SupportsDisconnect;
}
public abstract class System.Management.Automation.Runspaces.RunspaceConfiguration : object {
    public RunspaceConfigurationEntryCollection`1<AssemblyConfigurationEntry> Assemblies { get; }
    public AuthorizationManager AuthorizationManager { get; }
    public RunspaceConfigurationEntryCollection`1<CmdletConfigurationEntry> Cmdlets { get; }
    public RunspaceConfigurationEntryCollection`1<FormatConfigurationEntry> Formats { get; }
    public RunspaceConfigurationEntryCollection`1<ScriptConfigurationEntry> InitializationScripts { get; }
    public RunspaceConfigurationEntryCollection`1<ProviderConfigurationEntry> Providers { get; }
    public RunspaceConfigurationEntryCollection`1<ScriptConfigurationEntry> Scripts { get; }
    public string ShellId { get; }
    public RunspaceConfigurationEntryCollection`1<TypeConfigurationEntry> Types { get; }
    public static RunspaceConfiguration Create(string assemblyName);
    public static RunspaceConfiguration Create(string consoleFilePath, PSConsoleLoadException& warnings);
    public static RunspaceConfiguration Create();
    public abstract virtual string get_ShellId();
    public PSSnapInInfo AddPSSnapIn(string name, PSSnapInException& warning);
    public PSSnapInInfo RemovePSSnapIn(string name, PSSnapInException& warning);
    public virtual RunspaceConfigurationEntryCollection`1<CmdletConfigurationEntry> get_Cmdlets();
    public virtual RunspaceConfigurationEntryCollection`1<ProviderConfigurationEntry> get_Providers();
    public virtual RunspaceConfigurationEntryCollection`1<TypeConfigurationEntry> get_Types();
    public virtual RunspaceConfigurationEntryCollection`1<FormatConfigurationEntry> get_Formats();
    public virtual RunspaceConfigurationEntryCollection`1<ScriptConfigurationEntry> get_Scripts();
    public virtual RunspaceConfigurationEntryCollection`1<ScriptConfigurationEntry> get_InitializationScripts();
    public virtual RunspaceConfigurationEntryCollection`1<AssemblyConfigurationEntry> get_Assemblies();
    public virtual AuthorizationManager get_AuthorizationManager();
}
public class System.Management.Automation.Runspaces.RunspaceConfigurationAttributeException : SystemException {
    public string AssemblyName { get; }
    public string Error { get; }
    public ErrorRecord ErrorRecord { get; }
    public string Message { get; }
    public RunspaceConfigurationAttributeException(string message);
    public RunspaceConfigurationAttributeException(string message, Exception innerException);
    protected RunspaceConfigurationAttributeException(SerializationInfo info, StreamingContext context);
    public sealed virtual ErrorRecord get_ErrorRecord();
    public string get_Error();
    public string get_AssemblyName();
    public virtual string get_Message();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public abstract class System.Management.Automation.Runspaces.RunspaceConfigurationEntry : object {
    public bool BuiltIn { get; }
    public string Name { get; }
    public PSSnapInInfo PSSnapIn { get; }
    protected RunspaceConfigurationEntry(string name);
    public string get_Name();
    public PSSnapInInfo get_PSSnapIn();
    public bool get_BuiltIn();
}
[DefaultMemberAttribute("Item")]
public class System.Management.Automation.Runspaces.RunspaceConfigurationEntryCollection`1 : object {
    public int Count { get; }
    public T Item { get; }
    public RunspaceConfigurationEntryCollection`1(IEnumerable`1<T> items);
    public T get_Item(int index);
    public int get_Count();
    public void Reset();
    public void RemoveItem(int index);
    public void RemoveItem(int index, int count);
    public void Prepend(T item);
    public void Prepend(IEnumerable`1<T> items);
    public void Append(T item);
    public void Append(IEnumerable`1<T> items);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    public void Update();
}
[AttributeUsageAttribute("1")]
public class System.Management.Automation.Runspaces.RunspaceConfigurationTypeAttribute : Attribute {
    public string RunspaceConfigurationType { get; }
    public RunspaceConfigurationTypeAttribute(string runspaceConfigurationType);
    public string get_RunspaceConfigurationType();
}
public class System.Management.Automation.Runspaces.RunspaceConfigurationTypeException : SystemException {
    public string AssemblyName { get; }
    public ErrorRecord ErrorRecord { get; }
    public string Message { get; }
    public string TypeName { get; }
    public RunspaceConfigurationTypeException(string message);
    public RunspaceConfigurationTypeException(string message, Exception innerException);
    protected RunspaceConfigurationTypeException(SerializationInfo info, StreamingContext context);
    public sealed virtual ErrorRecord get_ErrorRecord();
    public string get_AssemblyName();
    public string get_TypeName();
    public virtual string get_Message();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public abstract class System.Management.Automation.Runspaces.RunspaceConnectionInfo : object {
    public AuthenticationMechanism AuthenticationMechanism { get; public set; }
    public int CancelTimeout { get; public set; }
    public string CertificateThumbprint { get; public set; }
    public string ComputerName { get; public set; }
    public PSCredential Credential { get; public set; }
    public CultureInfo Culture { get; public set; }
    public int IdleTimeout { get; public set; }
    public int MaxIdleTimeout { get; }
    public int OpenTimeout { get; public set; }
    public int OperationTimeout { get; public set; }
    public CultureInfo UICulture { get; public set; }
    public abstract virtual string get_ComputerName();
    public abstract virtual void set_ComputerName(string value);
    public abstract virtual PSCredential get_Credential();
    public abstract virtual void set_Credential(PSCredential value);
    public abstract virtual AuthenticationMechanism get_AuthenticationMechanism();
    public abstract virtual void set_AuthenticationMechanism(AuthenticationMechanism value);
    public abstract virtual string get_CertificateThumbprint();
    public abstract virtual void set_CertificateThumbprint(string value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public CultureInfo get_UICulture();
    public void set_UICulture(CultureInfo value);
    public int get_OpenTimeout();
    public void set_OpenTimeout(int value);
    public int get_CancelTimeout();
    public void set_CancelTimeout(int value);
    public int get_OperationTimeout();
    public void set_OperationTimeout(int value);
    public int get_IdleTimeout();
    public void set_IdleTimeout(int value);
    public int get_MaxIdleTimeout();
    public virtual void SetSessionOptions(PSSessionOption options);
}
public static class System.Management.Automation.Runspaces.RunspaceFactory : object {
    public static Runspace CreateRunspace();
    public static Runspace CreateRunspace(PSHost host);
    public static Runspace CreateRunspace(RunspaceConfiguration runspaceConfiguration);
    public static Runspace CreateRunspace(PSHost host, RunspaceConfiguration runspaceConfiguration);
    public static Runspace CreateRunspace(InitialSessionState initialSessionState);
    public static Runspace CreateRunspace(PSHost host, InitialSessionState initialSessionState);
    public static RunspacePool CreateRunspacePool();
    public static RunspacePool CreateRunspacePool(int minRunspaces, int maxRunspaces);
    public static RunspacePool CreateRunspacePool(InitialSessionState initialSessionState);
    public static RunspacePool CreateRunspacePool(int minRunspaces, int maxRunspaces, PSHost host);
    public static RunspacePool CreateRunspacePool(int minRunspaces, int maxRunspaces, InitialSessionState initialSessionState, PSHost host);
    public static RunspacePool CreateRunspacePool(int minRunspaces, int maxRunspaces, RunspaceConnectionInfo connectionInfo);
    public static RunspacePool CreateRunspacePool(int minRunspaces, int maxRunspaces, RunspaceConnectionInfo connectionInfo, PSHost host);
    public static RunspacePool CreateRunspacePool(int minRunspaces, int maxRunspaces, RunspaceConnectionInfo connectionInfo, PSHost host, TypeTable typeTable);
    public static RunspacePool CreateRunspacePool(int minRunspaces, int maxRunspaces, RunspaceConnectionInfo connectionInfo, PSHost host, TypeTable typeTable, PSPrimitiveDictionary applicationArguments);
    public static Runspace CreateRunspace(RunspaceConnectionInfo connectionInfo, PSHost host, TypeTable typeTable);
    public static Runspace CreateRunspace(RunspaceConnectionInfo connectionInfo, PSHost host, TypeTable typeTable, PSPrimitiveDictionary applicationArguments);
    public static Runspace CreateRunspace(RunspaceConnectionInfo connectionInfo, PSHost host, TypeTable typeTable, PSPrimitiveDictionary applicationArguments, string name);
    public static Runspace CreateRunspace(PSHost host, RunspaceConnectionInfo connectionInfo);
    public static Runspace CreateRunspace(RunspaceConnectionInfo connectionInfo);
    public static Runspace CreateOutOfProcessRunspace(TypeTable typeTable);
    public static Runspace CreateOutOfProcessRunspace(TypeTable typeTable, PowerShellProcessInstance processInstance);
}
public class System.Management.Automation.Runspaces.RunspaceOpenModuleLoadException : RuntimeException {
    public PSDataCollection`1<ErrorRecord> ErrorRecords { get; }
    public RunspaceOpenModuleLoadException(string message);
    public RunspaceOpenModuleLoadException(string message, Exception innerException);
    protected RunspaceOpenModuleLoadException(SerializationInfo info, StreamingContext context);
    public PSDataCollection`1<ErrorRecord> get_ErrorRecords();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.Runspaces.RunspacePool : object {
    public ApartmentState ApartmentState { get; public set; }
    public TimeSpan CleanupInterval { get; public set; }
    public RunspaceConnectionInfo ConnectionInfo { get; }
    public InitialSessionState InitialSessionState { get; }
    public Guid InstanceId { get; }
    public bool IsDisposed { get; }
    public RunspacePoolAvailability RunspacePoolAvailability { get; }
    public RunspacePoolStateInfo RunspacePoolStateInfo { get; }
    public PSThreadOptions ThreadOptions { get; public set; }
    public Guid get_InstanceId();
    public bool get_IsDisposed();
    public RunspacePoolStateInfo get_RunspacePoolStateInfo();
    public InitialSessionState get_InitialSessionState();
    public RunspaceConnectionInfo get_ConnectionInfo();
    public TimeSpan get_CleanupInterval();
    public void set_CleanupInterval(TimeSpan value);
    public RunspacePoolAvailability get_RunspacePoolAvailability();
    public void add_StateChanged(EventHandler`1<RunspacePoolStateChangedEventArgs> value);
    public void remove_StateChanged(EventHandler`1<RunspacePoolStateChangedEventArgs> value);
    public static RunspacePool[] GetRunspacePools(RunspaceConnectionInfo connectionInfo);
    public static RunspacePool[] GetRunspacePools(RunspaceConnectionInfo connectionInfo, PSHost host);
    public static RunspacePool[] GetRunspacePools(RunspaceConnectionInfo connectionInfo, PSHost host, TypeTable typeTable);
    public void Disconnect();
    public IAsyncResult BeginDisconnect(AsyncCallback callback, object state);
    public void EndDisconnect(IAsyncResult asyncResult);
    public void Connect();
    public IAsyncResult BeginConnect(AsyncCallback callback, object state);
    public void EndConnect(IAsyncResult asyncResult);
    public Collection`1<PowerShell> CreateDisconnectedPowerShells();
    public RunspacePoolCapability GetCapabilities();
    public bool SetMaxRunspaces(int maxRunspaces);
    public int GetMaxRunspaces();
    public bool SetMinRunspaces(int minRunspaces);
    public int GetMinRunspaces();
    public int GetAvailableRunspaces();
    public void Open();
    public IAsyncResult BeginOpen(AsyncCallback callback, object state);
    public void EndOpen(IAsyncResult asyncResult);
    public void Close();
    public IAsyncResult BeginClose(AsyncCallback callback, object state);
    public void EndClose(IAsyncResult asyncResult);
    public sealed virtual void Dispose();
    public PSPrimitiveDictionary GetApplicationPrivateData();
    public PSThreadOptions get_ThreadOptions();
    public void set_ThreadOptions(PSThreadOptions value);
    public ApartmentState get_ApartmentState();
    public void set_ApartmentState(ApartmentState value);
}
public enum System.Management.Automation.Runspaces.RunspacePoolAvailability : Enum {
    public int value__;
    public static RunspacePoolAvailability Available;
    public static RunspacePoolAvailability Busy;
    public static RunspacePoolAvailability None;
}
public enum System.Management.Automation.Runspaces.RunspacePoolCapability : Enum {
    public int value__;
    public static RunspacePoolCapability Default;
    public static RunspacePoolCapability SupportsDisconnect;
}
public enum System.Management.Automation.Runspaces.RunspacePoolState : Enum {
    public int value__;
    public static RunspacePoolState BeforeOpen;
    public static RunspacePoolState Broken;
    public static RunspacePoolState Closed;
    public static RunspacePoolState Closing;
    public static RunspacePoolState Connecting;
    public static RunspacePoolState Disconnected;
    public static RunspacePoolState Disconnecting;
    public static RunspacePoolState Opened;
    public static RunspacePoolState Opening;
}
public class System.Management.Automation.Runspaces.RunspacePoolStateChangedEventArgs : EventArgs {
    public RunspacePoolStateInfo RunspacePoolStateInfo { get; }
    public RunspacePoolStateInfo get_RunspacePoolStateInfo();
}
public enum System.Management.Automation.Runspaces.RunspaceState : Enum {
    public int value__;
    public static RunspaceState BeforeOpen;
    public static RunspaceState Broken;
    public static RunspaceState Closed;
    public static RunspaceState Closing;
    public static RunspaceState Connecting;
    public static RunspaceState Disconnected;
    public static RunspaceState Disconnecting;
    public static RunspaceState Opened;
    public static RunspaceState Opening;
}
public class System.Management.Automation.Runspaces.RunspaceStateEventArgs : EventArgs {
    public RunspaceStateInfo RunspaceStateInfo { get; }
    public RunspaceStateInfo get_RunspaceStateInfo();
}
public class System.Management.Automation.Runspaces.RunspaceStateInfo : object {
    public Exception Reason { get; }
    public RunspaceState State { get; }
    public RunspaceState get_State();
    public Exception get_Reason();
    public virtual string ToString();
}
public class System.Management.Automation.Runspaces.ScriptConfigurationEntry : RunspaceConfigurationEntry {
    public string Definition { get; }
    public ScriptConfigurationEntry(string name, string definition);
    public string get_Definition();
}
public class System.Management.Automation.Runspaces.ScriptMethodData : TypeMemberData {
    public ScriptBlock Script { get; public set; }
    public ScriptMethodData(string name, ScriptBlock scriptToInvoke);
    public ScriptBlock get_Script();
    public void set_Script(ScriptBlock value);
}
public class System.Management.Automation.Runspaces.ScriptPropertyData : TypeMemberData {
    public ScriptBlock GetScriptBlock { get; public set; }
    public bool IsHidden { get; public set; }
    public ScriptBlock SetScriptBlock { get; public set; }
    public ScriptPropertyData(string name, ScriptBlock getScriptBlock);
    public ScriptPropertyData(string name, ScriptBlock getScriptBlock, ScriptBlock setScriptBlock);
    public ScriptBlock get_GetScriptBlock();
    public void set_GetScriptBlock(ScriptBlock value);
    public ScriptBlock get_SetScriptBlock();
    public void set_SetScriptBlock(ScriptBlock value);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
}
public class System.Management.Automation.Runspaces.SessionStateAliasEntry : SessionStateCommandEntry {
    public string Definition { get; }
    public string Description { get; }
    public ScopedItemOptions Options { get; }
    public SessionStateAliasEntry(string name, string definition);
    public SessionStateAliasEntry(string name, string definition, string description);
    public SessionStateAliasEntry(string name, string definition, string description, ScopedItemOptions options);
    public virtual InitialSessionStateEntry Clone();
    public string get_Definition();
    public string get_Description();
    public ScopedItemOptions get_Options();
}
public class System.Management.Automation.Runspaces.SessionStateApplicationEntry : SessionStateCommandEntry {
    public string Path { get; }
    public SessionStateApplicationEntry(string path);
    public virtual InitialSessionStateEntry Clone();
    public string get_Path();
}
public class System.Management.Automation.Runspaces.SessionStateAssemblyEntry : InitialSessionStateEntry {
    public string FileName { get; }
    public SessionStateAssemblyEntry(string name, string fileName);
    public SessionStateAssemblyEntry(string name);
    public virtual InitialSessionStateEntry Clone();
    public string get_FileName();
}
public class System.Management.Automation.Runspaces.SessionStateCmdletEntry : SessionStateCommandEntry {
    public string HelpFileName { get; }
    public Type ImplementingType { get; }
    public SessionStateCmdletEntry(string name, Type implementingType, string helpFileName);
    public virtual InitialSessionStateEntry Clone();
    public Type get_ImplementingType();
    public string get_HelpFileName();
}
public abstract class System.Management.Automation.Runspaces.SessionStateCommandEntry : ConstrainedSessionStateEntry {
    public CommandTypes CommandType { get; }
    protected SessionStateCommandEntry(string name);
    protected internal SessionStateCommandEntry(string name, SessionStateEntryVisibility visibility);
    public CommandTypes get_CommandType();
}
public class System.Management.Automation.Runspaces.SessionStateFormatEntry : InitialSessionStateEntry {
    public string FileName { get; }
    public ExtendedTypeDefinition FormatData { get; }
    public FormatTable Formattable { get; }
    public SessionStateFormatEntry(string fileName);
    public SessionStateFormatEntry(FormatTable formattable);
    public SessionStateFormatEntry(ExtendedTypeDefinition typeDefinition);
    public virtual InitialSessionStateEntry Clone();
    public string get_FileName();
    public FormatTable get_Formattable();
    public ExtendedTypeDefinition get_FormatData();
}
public class System.Management.Automation.Runspaces.SessionStateFunctionEntry : SessionStateCommandEntry {
    public string Definition { get; }
    public string HelpFile { get; }
    public ScopedItemOptions Options { get; }
    public SessionStateFunctionEntry(string name, string definition, ScopedItemOptions options, string helpFile);
    public SessionStateFunctionEntry(string name, string definition, string helpFile);
    public SessionStateFunctionEntry(string name, string definition);
    public virtual InitialSessionStateEntry Clone();
    public string get_Definition();
    public ScopedItemOptions get_Options();
    public string get_HelpFile();
}
public class System.Management.Automation.Runspaces.SessionStateProviderEntry : ConstrainedSessionStateEntry {
    public string HelpFileName { get; }
    public Type ImplementingType { get; }
    public SessionStateProviderEntry(string name, Type implementingType, string helpFileName);
    public virtual InitialSessionStateEntry Clone();
    public Type get_ImplementingType();
    public string get_HelpFileName();
}
public class System.Management.Automation.Runspaces.SessionStateProxy : object {
    public List`1<string> Applications { get; }
    public DriveManagementIntrinsics Drive { get; }
    public CommandInvocationIntrinsics InvokeCommand { get; }
    public ProviderIntrinsics InvokeProvider { get; }
    public PSLanguageMode LanguageMode { get; public set; }
    public PSModuleInfo Module { get; }
    public PSVariableIntrinsics PSVariable { get; }
    public PathIntrinsics Path { get; }
    public CmdletProviderManagementIntrinsics Provider { get; }
    public List`1<string> Scripts { get; }
    public virtual void SetVariable(string name, object value);
    public virtual object GetVariable(string name);
    public virtual List`1<string> get_Applications();
    public virtual List`1<string> get_Scripts();
    public virtual DriveManagementIntrinsics get_Drive();
    public virtual PSLanguageMode get_LanguageMode();
    public virtual void set_LanguageMode(PSLanguageMode value);
    public virtual PSModuleInfo get_Module();
    public virtual PathIntrinsics get_Path();
    public virtual CmdletProviderManagementIntrinsics get_Provider();
    public virtual PSVariableIntrinsics get_PSVariable();
    public virtual CommandInvocationIntrinsics get_InvokeCommand();
    public virtual ProviderIntrinsics get_InvokeProvider();
}
public class System.Management.Automation.Runspaces.SessionStateScriptEntry : SessionStateCommandEntry {
    public string Path { get; }
    public SessionStateScriptEntry(string path);
    public virtual InitialSessionStateEntry Clone();
    public string get_Path();
}
public class System.Management.Automation.Runspaces.SessionStateTypeEntry : InitialSessionStateEntry {
    public string FileName { get; }
    public bool IsRemove { get; }
    public TypeData TypeData { get; }
    public TypeTable TypeTable { get; }
    public SessionStateTypeEntry(string fileName);
    public SessionStateTypeEntry(TypeTable typeTable);
    public SessionStateTypeEntry(TypeData typeData, bool isRemove);
    public virtual InitialSessionStateEntry Clone();
    public string get_FileName();
    public TypeTable get_TypeTable();
    public TypeData get_TypeData();
    public bool get_IsRemove();
}
public class System.Management.Automation.Runspaces.SessionStateVariableEntry : ConstrainedSessionStateEntry {
    public Collection`1<Attribute> Attributes { get; }
    public string Description { get; }
    public ScopedItemOptions Options { get; }
    public object Value { get; }
    public SessionStateVariableEntry(string name, object value, string description);
    public SessionStateVariableEntry(string name, object value, string description, ScopedItemOptions options);
    public SessionStateVariableEntry(string name, object value, string description, ScopedItemOptions options, Collection`1<Attribute> attributes);
    public SessionStateVariableEntry(string name, object value, string description, ScopedItemOptions options, Attribute attribute);
    public virtual InitialSessionStateEntry Clone();
    public object get_Value();
    public string get_Description();
    public ScopedItemOptions get_Options();
    public Collection`1<Attribute> get_Attributes();
}
public class System.Management.Automation.Runspaces.SessionStateWorkflowEntry : SessionStateCommandEntry {
    public string Definition { get; }
    public string HelpFile { get; }
    public ScopedItemOptions Options { get; }
    public SessionStateWorkflowEntry(string name, string definition, ScopedItemOptions options, string helpFile);
    public SessionStateWorkflowEntry(string name, string definition, string helpFile);
    public SessionStateWorkflowEntry(string name, string definition);
    public virtual InitialSessionStateEntry Clone();
    public string get_Definition();
    public ScopedItemOptions get_Options();
    public string get_HelpFile();
}
public class System.Management.Automation.Runspaces.TypeConfigurationEntry : RunspaceConfigurationEntry {
    public string FileName { get; }
    public bool IsRemove { get; }
    public TypeData TypeData { get; }
    public TypeConfigurationEntry(string name, string fileName);
    public TypeConfigurationEntry(TypeData typeData, bool isRemove);
    public TypeConfigurationEntry(string fileName);
    public string get_FileName();
    public TypeData get_TypeData();
    public bool get_IsRemove();
}
public class System.Management.Automation.Runspaces.TypeData : object {
    public string DefaultDisplayProperty { get; public set; }
    public PropertySetData DefaultDisplayPropertySet { get; public set; }
    public PropertySetData DefaultKeyPropertySet { get; public set; }
    public bool InheritPropertySerializationSet { get; public set; }
    public bool IsOverride { get; public set; }
    public Dictionary`2<string, TypeMemberData> Members { get; }
    public PropertySetData PropertySerializationSet { get; public set; }
    public UInt32 SerializationDepth { get; public set; }
    public string SerializationMethod { get; public set; }
    public string StringSerializationSource { get; public set; }
    public Type TargetTypeForDeserialization { get; public set; }
    public Type TypeAdapter { get; public set; }
    public Type TypeConverter { get; public set; }
    public string TypeName { get; }
    public TypeData(string typeName);
    public TypeData(Type type);
    public string get_TypeName();
    public Dictionary`2<string, TypeMemberData> get_Members();
    public Type get_TypeConverter();
    public void set_TypeConverter(Type value);
    public Type get_TypeAdapter();
    public void set_TypeAdapter(Type value);
    public bool get_IsOverride();
    public void set_IsOverride(bool value);
    public string get_SerializationMethod();
    public void set_SerializationMethod(string value);
    public Type get_TargetTypeForDeserialization();
    public void set_TargetTypeForDeserialization(Type value);
    public UInt32 get_SerializationDepth();
    public void set_SerializationDepth(UInt32 value);
    public string get_DefaultDisplayProperty();
    public void set_DefaultDisplayProperty(string value);
    public bool get_InheritPropertySerializationSet();
    public void set_InheritPropertySerializationSet(bool value);
    public string get_StringSerializationSource();
    public void set_StringSerializationSource(string value);
    public PropertySetData get_DefaultDisplayPropertySet();
    public void set_DefaultDisplayPropertySet(PropertySetData value);
    public PropertySetData get_DefaultKeyPropertySet();
    public void set_DefaultKeyPropertySet(PropertySetData value);
    public PropertySetData get_PropertySerializationSet();
    public void set_PropertySerializationSet(PropertySetData value);
    public TypeData Copy();
}
public abstract class System.Management.Automation.Runspaces.TypeMemberData : object {
    public string Name { get; }
    public string get_Name();
}
public class System.Management.Automation.Runspaces.TypeTable : object {
    public TypeTable(IEnumerable`1<string> typeFiles);
    public static TypeTable LoadDefaultTypeFiles();
    public static List`1<string> GetDefaultTypeFiles();
    public TypeTable Clone(bool unshared);
    public void AddType(TypeData typeData);
    public void RemoveType(string typeName);
}
public class System.Management.Automation.Runspaces.TypeTableLoadException : RuntimeException {
    public Collection`1<string> Errors { get; }
    public TypeTableLoadException(string message);
    public TypeTableLoadException(string message, Exception innerException);
    protected TypeTableLoadException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    protected void SetDefaultErrorRecord();
    public Collection`1<string> get_Errors();
}
public class System.Management.Automation.Runspaces.WSManConnectionInfo : RunspaceConnectionInfo {
    public static string HttpScheme;
    public static string HttpsScheme;
    public string AppName { get; public set; }
    public AuthenticationMechanism AuthenticationMechanism { get; public set; }
    public string CertificateThumbprint { get; public set; }
    public string ComputerName { get; public set; }
    public Uri ConnectionUri { get; public set; }
    public PSCredential Credential { get; public set; }
    public bool EnableNetworkAccess { get; public set; }
    public bool IncludePortInSPN { get; public set; }
    public int MaxConnectionRetryCount { get; public set; }
    public int MaximumConnectionRedirectionCount { get; public set; }
    public Nullable`1<int> MaximumReceivedDataSizePerCommand { get; public set; }
    public Nullable`1<int> MaximumReceivedObjectSize { get; public set; }
    public bool NoEncryption { get; public set; }
    public bool NoMachineProfile { get; public set; }
    public OutputBufferingMode OutputBufferingMode { get; public set; }
    public int Port { get; public set; }
    public ProxyAccessType ProxyAccessType { get; public set; }
    public AuthenticationMechanism ProxyAuthentication { get; public set; }
    public PSCredential ProxyCredential { get; public set; }
    public string Scheme { get; public set; }
    public string ShellUri { get; public set; }
    public bool SkipCACheck { get; public set; }
    public bool SkipCNCheck { get; public set; }
    public bool SkipRevocationCheck { get; public set; }
    public bool UseCompression { get; public set; }
    public bool UseUTF16 { get; public set; }
    public WSManConnectionInfo(string scheme, string computerName, int port, string appName, string shellUri, PSCredential credential, int openTimeout);
    public WSManConnectionInfo(string scheme, string computerName, int port, string appName, string shellUri, PSCredential credential);
    public WSManConnectionInfo(bool useSsl, string computerName, int port, string appName, string shellUri, PSCredential credential);
    public WSManConnectionInfo(bool useSsl, string computerName, int port, string appName, string shellUri, PSCredential credential, int openTimeout);
    public WSManConnectionInfo(Uri uri, string shellUri, PSCredential credential);
    public WSManConnectionInfo(Uri uri, string shellUri, string certificateThumbprint);
    public WSManConnectionInfo(Uri uri);
    public WSManConnectionInfo(PSSessionType configurationType);
    public Uri get_ConnectionUri();
    public void set_ConnectionUri(Uri value);
    public virtual string get_ComputerName();
    public virtual void set_ComputerName(string value);
    public string get_Scheme();
    public void set_Scheme(string value);
    public int get_Port();
    public void set_Port(int value);
    public string get_AppName();
    public void set_AppName(string value);
    public virtual PSCredential get_Credential();
    public virtual void set_Credential(PSCredential value);
    public string get_ShellUri();
    public void set_ShellUri(string value);
    public virtual AuthenticationMechanism get_AuthenticationMechanism();
    public virtual void set_AuthenticationMechanism(AuthenticationMechanism value);
    public virtual string get_CertificateThumbprint();
    public virtual void set_CertificateThumbprint(string value);
    public int get_MaximumConnectionRedirectionCount();
    public void set_MaximumConnectionRedirectionCount(int value);
    public Nullable`1<int> get_MaximumReceivedDataSizePerCommand();
    public void set_MaximumReceivedDataSizePerCommand(Nullable`1<int> value);
    public Nullable`1<int> get_MaximumReceivedObjectSize();
    public void set_MaximumReceivedObjectSize(Nullable`1<int> value);
    public bool get_UseCompression();
    public void set_UseCompression(bool value);
    public bool get_NoMachineProfile();
    public void set_NoMachineProfile(bool value);
    public ProxyAccessType get_ProxyAccessType();
    public void set_ProxyAccessType(ProxyAccessType value);
    public AuthenticationMechanism get_ProxyAuthentication();
    public void set_ProxyAuthentication(AuthenticationMechanism value);
    public PSCredential get_ProxyCredential();
    public void set_ProxyCredential(PSCredential value);
    public bool get_SkipCACheck();
    public void set_SkipCACheck(bool value);
    public bool get_SkipCNCheck();
    public void set_SkipCNCheck(bool value);
    public bool get_SkipRevocationCheck();
    public void set_SkipRevocationCheck(bool value);
    public bool get_NoEncryption();
    public void set_NoEncryption(bool value);
    public bool get_UseUTF16();
    public void set_UseUTF16(bool value);
    public OutputBufferingMode get_OutputBufferingMode();
    public void set_OutputBufferingMode(OutputBufferingMode value);
    public bool get_IncludePortInSPN();
    public void set_IncludePortInSPN(bool value);
    public bool get_EnableNetworkAccess();
    public void set_EnableNetworkAccess(bool value);
    public int get_MaxConnectionRetryCount();
    public void set_MaxConnectionRetryCount(int value);
    public virtual void SetSessionOptions(PSSessionOption options);
    public WSManConnectionInfo Copy();
}
public class System.Management.Automation.RuntimeDefinedParameter : object {
    public Collection`1<Attribute> Attributes { get; }
    public bool IsSet { get; public set; }
    public string Name { get; public set; }
    public Type ParameterType { get; public set; }
    public object Value { get; public set; }
    public RuntimeDefinedParameter(string name, Type parameterType, Collection`1<Attribute> attributes);
    public string get_Name();
    public void set_Name(string value);
    public Type get_ParameterType();
    public void set_ParameterType(Type value);
    public object get_Value();
    public void set_Value(object value);
    public bool get_IsSet();
    public void set_IsSet(bool value);
    public Collection`1<Attribute> get_Attributes();
}
public class System.Management.Automation.RuntimeDefinedParameterDictionary : Dictionary`2<string, RuntimeDefinedParameter> {
    public object Data { get; public set; }
    public string HelpFile { get; public set; }
    public string get_HelpFile();
    public void set_HelpFile(string value);
    public object get_Data();
    public void set_Data(object value);
}
public class System.Management.Automation.RuntimeException : SystemException {
    public ErrorRecord ErrorRecord { get; }
    public string StackTrace { get; }
    public bool WasThrownFromThrowStatement { get; public set; }
    protected RuntimeException(SerializationInfo info, StreamingContext context);
    public RuntimeException(string message);
    public RuntimeException(string message, Exception innerException);
    public RuntimeException(string message, Exception innerException, ErrorRecord errorRecord);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual ErrorRecord get_ErrorRecord();
    public virtual string get_StackTrace();
    public bool get_WasThrownFromThrowStatement();
    public void set_WasThrownFromThrowStatement(bool value);
}
[FlagsAttribute]
public enum System.Management.Automation.ScopedItemOptions : Enum {
    public int value__;
    public static ScopedItemOptions AllScope;
    public static ScopedItemOptions Constant;
    public static ScopedItemOptions None;
    public static ScopedItemOptions Private;
    public static ScopedItemOptions ReadOnly;
    public static ScopedItemOptions Unspecified;
}
public class System.Management.Automation.ScriptBlock : object {
    public Ast Ast { get; }
    public List`1<Attribute> Attributes { get; }
    public bool DebuggerHidden { get; public set; }
    public string File { get; }
    public Guid Id { get; }
    public bool IsConfiguration { get; public set; }
    public bool IsFilter { get; public set; }
    public PSModuleInfo Module { get; }
    public PSToken StartPosition { get; }
    protected ScriptBlock(SerializationInfo info, StreamingContext context);
    public static ScriptBlock Create(string script);
    public ScriptBlock GetNewClosure();
    public PowerShell GetPowerShell(Object[] args);
    public PowerShell GetPowerShell(bool isTrustedInput, Object[] args);
    public PowerShell GetPowerShell(Dictionary`2<string, object> variables, Object[] args);
    public PowerShell GetPowerShell(Dictionary`2<string, object> variables, Dictionary`2& usingVariables, Object[] args);
    public PowerShell GetPowerShell(Dictionary`2<string, object> variables, Dictionary`2& usingVariables, bool isTrustedInput, Object[] args);
    public SteppablePipeline GetSteppablePipeline();
    public SteppablePipeline GetSteppablePipeline(CommandOrigin commandOrigin);
    public SteppablePipeline GetSteppablePipeline(CommandOrigin commandOrigin, Object[] args);
    public Collection`1<PSObject> Invoke(Object[] args);
    public Collection`1<PSObject> InvokeWithContext(IDictionary functionsToDefine, List`1<PSVariable> variablesToDefine, Object[] args);
    public Collection`1<PSObject> InvokeWithContext(Dictionary`2<string, ScriptBlock> functionsToDefine, List`1<PSVariable> variablesToDefine, Object[] args);
    public object InvokeReturnAsIs(Object[] args);
    public List`1<Attribute> get_Attributes();
    public string get_File();
    public bool get_IsFilter();
    public void set_IsFilter(bool value);
    public bool get_IsConfiguration();
    public void set_IsConfiguration(bool value);
    public PSModuleInfo get_Module();
    public PSToken get_StartPosition();
    public virtual string ToString();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public bool get_DebuggerHidden();
    public void set_DebuggerHidden(bool value);
    public Guid get_Id();
    public void CheckRestrictedLanguage(IEnumerable`1<string> allowedCommands, IEnumerable`1<string> allowedVariables, bool allowEnvironmentVariables);
    public Ast get_Ast();
}
public class System.Management.Automation.ScriptBlockMemberMethodWrapper : object {
    public static Object[] _emptyArgumentArray;
    public void InvokeHelper(object instance, Object[] args);
    public T InvokeHelperT(object instance, Object[] args);
}
public class System.Management.Automation.ScriptBlockToPowerShellNotSupportedException : RuntimeException {
    public ScriptBlockToPowerShellNotSupportedException(string message);
    public ScriptBlockToPowerShellNotSupportedException(string message, Exception innerException);
    protected ScriptBlockToPowerShellNotSupportedException(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.ScriptCallDepthException : SystemException {
    public int CallDepth { get; }
    public ErrorRecord ErrorRecord { get; }
    public ScriptCallDepthException(string message);
    public ScriptCallDepthException(string message, Exception innerException);
    protected ScriptCallDepthException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual ErrorRecord get_ErrorRecord();
    public int get_CallDepth();
}
public class System.Management.Automation.ScriptInfo : CommandInfo {
    public string Definition { get; }
    public ReadOnlyCollection`1<PSTypeName> OutputType { get; }
    public ScriptBlock ScriptBlock { get; }
    public sealed virtual ScriptBlock get_ScriptBlock();
    public virtual string get_Definition();
    public virtual ReadOnlyCollection`1<PSTypeName> get_OutputType();
    public virtual string ToString();
}
public class System.Management.Automation.ScriptRequiresException : RuntimeException {
    public string CommandName { get; }
    public ReadOnlyCollection`1<string> MissingPSSnapIns { get; }
    public Version RequiresPSVersion { get; }
    public string RequiresShellId { get; }
    public string RequiresShellPath { get; }
    public ScriptRequiresException(string message);
    public ScriptRequiresException(string message, Exception innerException);
    protected ScriptRequiresException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_CommandName();
    public Version get_RequiresPSVersion();
    public ReadOnlyCollection`1<string> get_MissingPSSnapIns();
    public string get_RequiresShellId();
    public string get_RequiresShellPath();
}
public enum System.Management.Automation.Security.SystemEnforcementMode : Enum {
    public int value__;
    public static SystemEnforcementMode Audit;
    public static SystemEnforcementMode Enforce;
    public static SystemEnforcementMode None;
}
public class System.Management.Automation.Security.SystemPolicy : object {
    public static SystemEnforcementMode GetSystemLockdownPolicy();
    public static SystemEnforcementMode GetLockdownPolicy(string path, SafeHandle handle);
}
public class System.Management.Automation.SecurityDescriptorCmdletProviderIntrinsics : object {
    public Collection`1<PSObject> Get(string path, AccessControlSections includeSections);
    public Collection`1<PSObject> Set(string path, ObjectSecurity sd);
    public ObjectSecurity NewFromPath(string path, AccessControlSections includeSections);
    public ObjectSecurity NewOfType(string providerId, string type, AccessControlSections includeSections);
}
[FlagsAttribute]
public enum System.Management.Automation.SessionCapabilities : Enum {
    public int value__;
    public static SessionCapabilities Language;
    public static SessionCapabilities RemoteServer;
    public static SessionCapabilities WorkflowServer;
}
public class System.Management.Automation.SessionState : object {
    public List`1<string> Applications { get; }
    public DriveManagementIntrinsics Drive { get; }
    public CommandInvocationIntrinsics InvokeCommand { get; }
    public ProviderIntrinsics InvokeProvider { get; }
    public PSLanguageMode LanguageMode { get; public set; }
    public PSModuleInfo Module { get; }
    public PSVariableIntrinsics PSVariable { get; }
    public PathIntrinsics Path { get; }
    public CmdletProviderManagementIntrinsics Provider { get; }
    public List`1<string> Scripts { get; }
    public bool UseFullLanguageModeInDebugger { get; }
    public DriveManagementIntrinsics get_Drive();
    public CmdletProviderManagementIntrinsics get_Provider();
    public PathIntrinsics get_Path();
    public PSVariableIntrinsics get_PSVariable();
    public PSLanguageMode get_LanguageMode();
    public void set_LanguageMode(PSLanguageMode value);
    public bool get_UseFullLanguageModeInDebugger();
    public List`1<string> get_Scripts();
    public List`1<string> get_Applications();
    public PSModuleInfo get_Module();
    public ProviderIntrinsics get_InvokeProvider();
    public CommandInvocationIntrinsics get_InvokeCommand();
    public static void ThrowIfNotVisible(CommandOrigin origin, object valueToCheck);
    public static bool IsVisible(CommandOrigin origin, object valueToCheck);
    public static bool IsVisible(CommandOrigin origin, PSVariable variable);
    public static bool IsVisible(CommandOrigin origin, CommandInfo commandInfo);
}
public enum System.Management.Automation.SessionStateCategory : Enum {
    public int value__;
    public static SessionStateCategory Alias;
    public static SessionStateCategory Cmdlet;
    public static SessionStateCategory CmdletProvider;
    public static SessionStateCategory Command;
    public static SessionStateCategory Drive;
    public static SessionStateCategory Filter;
    public static SessionStateCategory Function;
    public static SessionStateCategory Resource;
    public static SessionStateCategory Scope;
    public static SessionStateCategory Variable;
}
public enum System.Management.Automation.SessionStateEntryVisibility : Enum {
    public int value__;
    public static SessionStateEntryVisibility Private;
    public static SessionStateEntryVisibility Public;
}
public class System.Management.Automation.SessionStateException : RuntimeException {
    public ErrorRecord ErrorRecord { get; }
    public string ItemName { get; }
    public SessionStateCategory SessionStateCategory { get; }
    public SessionStateException(string message);
    public SessionStateException(string message, Exception innerException);
    protected SessionStateException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual ErrorRecord get_ErrorRecord();
    public string get_ItemName();
    public SessionStateCategory get_SessionStateCategory();
}
public class System.Management.Automation.SessionStateOverflowException : SessionStateException {
    public SessionStateOverflowException(string message);
    public SessionStateOverflowException(string message, Exception innerException);
    protected SessionStateOverflowException(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.SessionStateUnauthorizedAccessException : SessionStateException {
    public SessionStateUnauthorizedAccessException(string message);
    public SessionStateUnauthorizedAccessException(string message, Exception innerException);
    protected SessionStateUnauthorizedAccessException(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.SettingValueExceptionEventArgs : EventArgs {
    public Exception Exception { get; }
    public bool ShouldThrow { get; public set; }
    public bool get_ShouldThrow();
    public void set_ShouldThrow(bool value);
    public Exception get_Exception();
}
public class System.Management.Automation.SetValueException : ExtendedTypeSystemException {
    public SetValueException(string message);
    public SetValueException(string message, Exception innerException);
    protected SetValueException(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.SetValueInvocationException : SetValueException {
    public SetValueInvocationException(string message);
    public SetValueInvocationException(string message, Exception innerException);
    protected SetValueInvocationException(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum System.Management.Automation.ShouldProcessReason : Enum {
    public int value__;
    public static ShouldProcessReason None;
    public static ShouldProcessReason WhatIf;
}
public class System.Management.Automation.Signature : object {
    public bool IsOSBinary { get; }
    public string Path { get; }
    public SignatureType SignatureType { get; }
    public X509Certificate2 SignerCertificate { get; }
    public SignatureStatus Status { get; }
    public string StatusMessage { get; }
    public X509Certificate2 TimeStamperCertificate { get; }
    public X509Certificate2 get_SignerCertificate();
    public X509Certificate2 get_TimeStamperCertificate();
    public SignatureStatus get_Status();
    public string get_StatusMessage();
    public string get_Path();
    public SignatureType get_SignatureType();
    public bool get_IsOSBinary();
}
public enum System.Management.Automation.SignatureStatus : Enum {
    public int value__;
    public static SignatureStatus HashMismatch;
    public static SignatureStatus Incompatible;
    public static SignatureStatus NotSigned;
    public static SignatureStatus NotSupportedFileFormat;
    public static SignatureStatus NotTrusted;
    public static SignatureStatus UnknownError;
    public static SignatureStatus Valid;
}
public enum System.Management.Automation.SignatureType : Enum {
    public int value__;
    public static SignatureType Authenticode;
    public static SignatureType Catalog;
    public static SignatureType None;
}
public enum System.Management.Automation.SigningOption : Enum {
    public int value__;
    public static SigningOption AddFullCertificateChain;
    public static SigningOption AddFullCertificateChainExceptRoot;
    public static SigningOption AddOnlyCertificate;
    public static SigningOption Default;
}
[FlagsAttribute]
public enum System.Management.Automation.SplitOptions : Enum {
    public int value__;
    public static SplitOptions CultureInvariant;
    public static SplitOptions ExplicitCapture;
    public static SplitOptions IgnoreCase;
    public static SplitOptions IgnorePatternWhitespace;
    public static SplitOptions Multiline;
    public static SplitOptions RegexMatch;
    public static SplitOptions SimpleMatch;
    public static SplitOptions Singleline;
}
public static class System.Management.Automation.Sqm.PSSQMAPI : object {
    public static void NoteRunspaceStart(Guid rsInstanceId);
    public static void NoteRunspaceEnd(Guid rsInstanceId);
    public static void NoteWorkflowStart(Guid workflowInstanceId);
    public static void NoteWorkflowEnd(Guid workflowInstanceId);
    public static void NoteSessionConfigurationIdleTimeout(int idleTimeout);
    public static void NoteSessionConfigurationOutputBufferingMode(string optBufferingMode);
    public static void NoteWorkflowOutputStreamSize(UInt32 size, string streamType);
    public static void NoteWorkflowEndpointConfiguration(string quotaName, UInt32 data);
    public static void NoteWorkflowCommonParametersValues(string parameterName, UInt32 data);
    public static void UpdateWorkflowsConcurrentExecution(UInt32 numberWorkflows);
    public static void IncrementWorkflowCommonParameterPresent(string parameterName);
    public static void IncrementWorkflowActivityPresent(string activityName);
    public static void IncrementWorkflowExecuted(string workflowName);
    public static void IncrementWorkflowType(string workflowType);
    public static void UpdateExecutionPolicy(string shellId, ExecutionPolicy executionPolicy);
    public static void IncrementData(CommandTypes cmdType);
    public static void IncrementData(CmdletInfo cmdlet);
    public static void InitiateWorkflowStateDataTracking(Job parentJob);
    public static void IncrementWorkflowStateData(Guid parentJobInstanceId, JobState state);
    public static void IncrementWorkflowSpecificParameterType(Type parameterType);
    public static void IncrementDataPoint(UInt32 dataPoint);
    public static void LogAllDataSuppressExceptions();
}
public enum System.Management.Automation.Sqm.PSSqmDataPoint : Enum {
    public UInt32 value__;
    public static PSSqmDataPoint Alias;
    public static PSSqmDataPoint AllCmdlets;
    public static PSSqmDataPoint Application;
    public static PSSqmDataPoint Cmdlet;
    public static PSSqmDataPoint ExecutionPolicy;
    public static PSSqmDataPoint ExternalScript;
    public static PSSqmDataPoint Filter;
    public static PSSqmDataPoint Function;
    public static PSSqmDataPoint NewObjectCom;
    public static PSSqmDataPoint None;
    public static PSSqmDataPoint RunspaceDuration;
    public static PSSqmDataPoint Script;
    public static PSSqmDataPoint SessionConfigurationIdleTimeout;
    public static PSSqmDataPoint SessionConfigurationOutputBufferingMode;
    public static PSSqmDataPoint WorkflowActivities;
    public static PSSqmDataPoint WorkflowActivitiesCount;
    public static PSSqmDataPoint WorkflowCommonParametersPresent;
    public static PSSqmDataPoint WorkflowCommonParametersSpecific;
    public static PSSqmDataPoint WorkflowCount;
    public static PSSqmDataPoint WorkflowDomain;
    public static PSSqmDataPoint WorkflowDuration;
    public static PSSqmDataPoint WorkflowEndpoint;
    public static PSSqmDataPoint WorkflowOutputStream;
    public static PSSqmDataPoint WorkflowProcessConcurrentCount;
    public static PSSqmDataPoint WorkflowProcessDuration;
    public static PSSqmDataPoint WorkflowSpecificParameterTypes;
    public static PSSqmDataPoint WorkflowSpecificParametersCount;
    public static PSSqmDataPoint WorkflowState;
    public static PSSqmDataPoint WorkflowType;
}
public class System.Management.Automation.SteppablePipeline : object {
    public void Begin(bool expectInput);
    public void Begin(bool expectInput, EngineIntrinsics contextToRedirectTo);
    public void Begin(InternalCommand command);
    public Array Process(object input);
    public Array Process(PSObject input);
    public Array Process();
    public Array End();
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[AttributeUsageAttribute("384")]
public class System.Management.Automation.SupportsWildcardsAttribute : ParsingBaseAttribute {
}
public class System.Management.Automation.SwitchParameter : ValueType {
    private int __Asmmeta_Private_Field;
    public bool IsPresent { get; }
    public static SwitchParameter Present { get; }
    public SwitchParameter(bool isPresent);
    public bool get_IsPresent();
    public static bool op_Implicit(SwitchParameter switchParameter);
    public static SwitchParameter op_Implicit(bool value);
    public bool ToBool();
    public static SwitchParameter get_Present();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SwitchParameter first, SwitchParameter second);
    public static bool op_Inequality(SwitchParameter first, SwitchParameter second);
    public static bool op_Equality(SwitchParameter first, bool second);
    public static bool op_Inequality(SwitchParameter first, bool second);
    public static bool op_Equality(bool first, SwitchParameter second);
    public static bool op_Inequality(bool first, SwitchParameter second);
    public virtual string ToString();
}
public class System.Management.Automation.TableControl : PSControl {
    public List`1<TableControlColumnHeader> Headers { get; }
    public List`1<TableControlRow> Rows { get; }
    public TableControl(TableControlRow tableControlRow);
    public TableControl(TableControlRow tableControlRow, IEnumerable`1<TableControlColumnHeader> tableControlColumnHeaders);
    public List`1<TableControlColumnHeader> get_Headers();
    public List`1<TableControlRow> get_Rows();
    public virtual string ToString();
}
public class System.Management.Automation.TableControlColumn : object {
    public Alignment Alignment { get; }
    public DisplayEntry DisplayEntry { get; }
    public TableControlColumn(Alignment alignment, DisplayEntry entry);
    public Alignment get_Alignment();
    public DisplayEntry get_DisplayEntry();
    public virtual string ToString();
}
public class System.Management.Automation.TableControlColumnHeader : object {
    public Alignment Alignment { get; }
    public string Label { get; }
    public int Width { get; }
    public TableControlColumnHeader(string label, int width, Alignment alignment);
    public string get_Label();
    public Alignment get_Alignment();
    public int get_Width();
}
public class System.Management.Automation.TableControlRow : object {
    public List`1<TableControlColumn> Columns { get; }
    public TableControlRow(IEnumerable`1<TableControlColumn> columns);
    public List`1<TableControlColumn> get_Columns();
}
public abstract class System.Management.Automation.Tracing.BaseChannelWriter : object {
    public PowerShellTraceKeywords Keywords { get; public set; }
    public virtual void Dispose();
    public virtual bool TraceError(PowerShellTraceEvent traceEvent, PowerShellTraceOperationCode operationCode, PowerShellTraceTask task, Object[] args);
    public virtual bool TraceWarning(PowerShellTraceEvent traceEvent, PowerShellTraceOperationCode operationCode, PowerShellTraceTask task, Object[] args);
    public virtual bool TraceInformational(PowerShellTraceEvent traceEvent, PowerShellTraceOperationCode operationCode, PowerShellTraceTask task, Object[] args);
    public virtual bool TraceVerbose(PowerShellTraceEvent traceEvent, PowerShellTraceOperationCode operationCode, PowerShellTraceTask task, Object[] args);
    public virtual bool TraceDebug(PowerShellTraceEvent traceEvent, PowerShellTraceOperationCode operationCode, PowerShellTraceTask task, Object[] args);
    public virtual bool TraceLogAlways(PowerShellTraceEvent traceEvent, PowerShellTraceOperationCode operationCode, PowerShellTraceTask task, Object[] args);
    public virtual bool TraceCritical(PowerShellTraceEvent traceEvent, PowerShellTraceOperationCode operationCode, PowerShellTraceTask task, Object[] args);
    public virtual PowerShellTraceKeywords get_Keywords();
    public virtual void set_Keywords(PowerShellTraceKeywords value);
}
public class System.Management.Automation.Tracing.CallbackNoParameter : MulticastDelegate {
    public CallbackNoParameter(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Management.Automation.Tracing.CallbackWithState : MulticastDelegate {
    public CallbackWithState(object object, IntPtr method);
    public virtual void Invoke(object state);
    public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Management.Automation.Tracing.CallbackWithStateAndArgs : MulticastDelegate {
    public CallbackWithStateAndArgs(object object, IntPtr method);
    public virtual void Invoke(object state, ElapsedEventArgs args);
    public virtual IAsyncResult BeginInvoke(object state, ElapsedEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class System.Management.Automation.Tracing.EtwActivity : object {
    public bool IsEnabled { get; }
    protected Guid ProviderId { get; }
    protected EventDescriptor TransferEvent { get; }
    public static void add_EventWritten(EventHandler`1<EtwEventArgs> value);
    public static void remove_EventWritten(EventHandler`1<EtwEventArgs> value);
    public static bool SetActivityId(Guid activityId);
    public static Guid CreateActivityId();
    public static Guid GetActivityId();
    public void CorrelateWithActivity(Guid parentActivityId);
    public bool get_IsEnabled();
    public bool IsProviderEnabled(byte levels, long keywords);
    public void Correlate();
    public CallbackNoParameter Correlate(CallbackNoParameter callback);
    public CallbackWithState Correlate(CallbackWithState callback);
    public AsyncCallback Correlate(AsyncCallback callback);
    public CallbackWithStateAndArgs Correlate(CallbackWithStateAndArgs callback);
    protected virtual Guid get_ProviderId();
    protected virtual EventDescriptor get_TransferEvent();
    protected void WriteEvent(EventDescriptor ed, Object[] payload);
}
[AttributeUsageAttribute("64")]
public class System.Management.Automation.Tracing.EtwEvent : Attribute {
    public long EventId { get; }
    public EtwEvent(long eventId);
    public long get_EventId();
}
public class System.Management.Automation.Tracing.EtwEventArgs : EventArgs {
    public EventDescriptor Descriptor { get; }
    public Object[] Payload { get; }
    public bool Success { get; }
    public EtwEventArgs(EventDescriptor descriptor, bool success, Object[] payload);
    public EventDescriptor get_Descriptor();
    public bool get_Success();
    public Object[] get_Payload();
}
public class System.Management.Automation.Tracing.EtwEventCorrelator : object {
    public Guid CurrentActivityId { get; public set; }
    public EtwEventCorrelator(EventProvider transferProvider, EventDescriptor transferEvent);
    public sealed virtual Guid get_CurrentActivityId();
    public sealed virtual void set_CurrentActivityId(Guid value);
    public sealed virtual IEtwActivityReverter StartActivity(Guid relatedActivityId);
    public sealed virtual IEtwActivityReverter StartActivity();
}
public interface System.Management.Automation.Tracing.IEtwActivityReverter {
    public abstract virtual void RevertCurrentActivityId();
}
public interface System.Management.Automation.Tracing.IEtwEventCorrelator {
    public Guid CurrentActivityId { get; public set; }
    public abstract virtual Guid get_CurrentActivityId();
    public abstract virtual void set_CurrentActivityId(Guid value);
    public abstract virtual IEtwActivityReverter StartActivity(Guid relatedActivityId);
    public abstract virtual IEtwActivityReverter StartActivity();
}
public class System.Management.Automation.Tracing.NullWriter : BaseChannelWriter {
    public static BaseChannelWriter Instance { get; }
    public static BaseChannelWriter get_Instance();
}
public class System.Management.Automation.Tracing.PowerShellChannelWriter : BaseChannelWriter {
    public PowerShellTraceKeywords Keywords { get; public set; }
    public virtual PowerShellTraceKeywords get_Keywords();
    public virtual void set_Keywords(PowerShellTraceKeywords value);
    public virtual void Dispose();
    public virtual bool TraceError(PowerShellTraceEvent traceEvent, PowerShellTraceOperationCode operationCode, PowerShellTraceTask task, Object[] args);
    public virtual bool TraceWarning(PowerShellTraceEvent traceEvent, PowerShellTraceOperationCode operationCode, PowerShellTraceTask task, Object[] args);
    public virtual bool TraceInformational(PowerShellTraceEvent traceEvent, PowerShellTraceOperationCode operationCode, PowerShellTraceTask task, Object[] args);
    public virtual bool TraceVerbose(PowerShellTraceEvent traceEvent, PowerShellTraceOperationCode operationCode, PowerShellTraceTask task, Object[] args);
    public virtual bool TraceDebug(PowerShellTraceEvent traceEvent, PowerShellTraceOperationCode operationCode, PowerShellTraceTask task, Object[] args);
    public virtual bool TraceLogAlways(PowerShellTraceEvent traceEvent, PowerShellTraceOperationCode operationCode, PowerShellTraceTask task, Object[] args);
    public virtual bool TraceCritical(PowerShellTraceEvent traceEvent, PowerShellTraceOperationCode operationCode, PowerShellTraceTask task, Object[] args);
}
public enum System.Management.Automation.Tracing.PowerShellTraceChannel : Enum {
    public int value__;
    public static PowerShellTraceChannel Analytic;
    public static PowerShellTraceChannel Debug;
    public static PowerShellTraceChannel None;
    public static PowerShellTraceChannel Operational;
}
public enum System.Management.Automation.Tracing.PowerShellTraceEvent : Enum {
    public int value__;
    public static PowerShellTraceEvent AnalyticTransferEventRunspacePool;
    public static PowerShellTraceEvent AppDomainUnhandledException;
    public static PowerShellTraceEvent AppDomainUnhandledExceptionAnalytic;
    public static PowerShellTraceEvent AppName;
    public static PowerShellTraceEvent ComputerName;
    public static PowerShellTraceEvent ErrorRecord;
    public static PowerShellTraceEvent Exception;
    public static PowerShellTraceEvent HostNameResolve;
    public static PowerShellTraceEvent Job;
    public static PowerShellTraceEvent LoadingPSCustomShellAssembly;
    public static PowerShellTraceEvent LoadingPSCustomShellType;
    public static PowerShellTraceEvent None;
    public static PowerShellTraceEvent OperationalTransferEventRunspacePool;
    public static PowerShellTraceEvent PerformanceTrackConsoleStartupStart;
    public static PowerShellTraceEvent PerformanceTrackConsoleStartupStop;
    public static PowerShellTraceEvent PowerShellObject;
    public static PowerShellTraceEvent ReceivedRemotingFragment;
    public static PowerShellTraceEvent ReportContext;
    public static PowerShellTraceEvent ReportOperationComplete;
    public static PowerShellTraceEvent RunspaceConstructor;
    public static PowerShellTraceEvent RunspacePoolConstructor;
    public static PowerShellTraceEvent RunspacePoolOpen;
    public static PowerShellTraceEvent RunspacePort;
    public static PowerShellTraceEvent Scheme;
    public static PowerShellTraceEvent SchemeResolve;
    public static PowerShellTraceEvent SentRemotingFragment;
    public static PowerShellTraceEvent SerializerDepthOverride;
    public static PowerShellTraceEvent SerializerEnumerationFailed;
    public static PowerShellTraceEvent SerializerMaxDepthWhenSerializing;
    public static PowerShellTraceEvent SerializerModeOverride;
    public static PowerShellTraceEvent SerializerPropertyGetterFailed;
    public static PowerShellTraceEvent SerializerScriptPropertyWithoutRunspace;
    public static PowerShellTraceEvent SerializerSpecificPropertyMissing;
    public static PowerShellTraceEvent SerializerToStringFailed;
    public static PowerShellTraceEvent SerializerWorkflowLoadFailure;
    public static PowerShellTraceEvent SerializerWorkflowLoadSuccess;
    public static PowerShellTraceEvent SerializerXmlExceptionWhenDeserializing;
    public static PowerShellTraceEvent ServerClientReceiveRequest;
    public static PowerShellTraceEvent ServerCloseOperation;
    public static PowerShellTraceEvent ServerCreateCommandSession;
    public static PowerShellTraceEvent ServerCreateRemoteSession;
    public static PowerShellTraceEvent ServerReceivedData;
    public static PowerShellTraceEvent ServerSendData;
    public static PowerShellTraceEvent ServerStopCommand;
    public static PowerShellTraceEvent ShellResolve;
    public static PowerShellTraceEvent TestAnalytic;
    public static PowerShellTraceEvent TraceMessage;
    public static PowerShellTraceEvent TraceMessage2;
    public static PowerShellTraceEvent TraceMessageGuid;
    public static PowerShellTraceEvent TraceWSManConnectionInfo;
    public static PowerShellTraceEvent TransportError;
    public static PowerShellTraceEvent TransportErrorAnalytic;
    public static PowerShellTraceEvent TransportReceivedObject;
    public static PowerShellTraceEvent UriRedirection;
    public static PowerShellTraceEvent WSManCloseCommand;
    public static PowerShellTraceEvent WSManCloseCommandCallbackReceived;
    public static PowerShellTraceEvent WSManCloseShell;
    public static PowerShellTraceEvent WSManCloseShellCallbackReceived;
    public static PowerShellTraceEvent WSManConnectionInfoDump;
    public static PowerShellTraceEvent WSManCreateCommand;
    public static PowerShellTraceEvent WSManCreateCommandCallbackReceived;
    public static PowerShellTraceEvent WSManCreateShell;
    public static PowerShellTraceEvent WSManCreateShellCallbackReceived;
    public static PowerShellTraceEvent WSManPluginShutdown;
    public static PowerShellTraceEvent WSManReceiveShellOutputExtended;
    public static PowerShellTraceEvent WSManReceiveShellOutputExtendedCallbackReceived;
    public static PowerShellTraceEvent WSManSendShellInputExtended;
    public static PowerShellTraceEvent WSManSendShellInputExtendedCallbackReceived;
    public static PowerShellTraceEvent WSManSignal;
    public static PowerShellTraceEvent WSManSignalCallbackReceived;
}
[FlagsAttribute]
public enum System.Management.Automation.Tracing.PowerShellTraceKeywords : Enum {
    public ulong value__;
    public static PowerShellTraceKeywords Cmdlets;
    public static PowerShellTraceKeywords Host;
    public static PowerShellTraceKeywords ManagedPlugIn;
    public static PowerShellTraceKeywords None;
    public static PowerShellTraceKeywords Pipeline;
    public static PowerShellTraceKeywords Protocol;
    public static PowerShellTraceKeywords Runspace;
    public static PowerShellTraceKeywords Serializer;
    public static PowerShellTraceKeywords Session;
    public static PowerShellTraceKeywords Transport;
    public static PowerShellTraceKeywords UseAlwaysAnalytic;
    public static PowerShellTraceKeywords UseAlwaysDebug;
    public static PowerShellTraceKeywords UseAlwaysOperational;
}
public enum System.Management.Automation.Tracing.PowerShellTraceLevel : Enum {
    public int value__;
    public static PowerShellTraceLevel Critical;
    public static PowerShellTraceLevel Debug;
    public static PowerShellTraceLevel Error;
    public static PowerShellTraceLevel Informational;
    public static PowerShellTraceLevel LogAlways;
    public static PowerShellTraceLevel Verbose;
    public static PowerShellTraceLevel Warning;
}
public enum System.Management.Automation.Tracing.PowerShellTraceOperationCode : Enum {
    public int value__;
    public static PowerShellTraceOperationCode Close;
    public static PowerShellTraceOperationCode Connect;
    public static PowerShellTraceOperationCode Constructor;
    public static PowerShellTraceOperationCode Create;
    public static PowerShellTraceOperationCode Disconnect;
    public static PowerShellTraceOperationCode Dispose;
    public static PowerShellTraceOperationCode EventHandler;
    public static PowerShellTraceOperationCode Exception;
    public static PowerShellTraceOperationCode Method;
    public static PowerShellTraceOperationCode Negotiate;
    public static PowerShellTraceOperationCode None;
    public static PowerShellTraceOperationCode Open;
    public static PowerShellTraceOperationCode Receive;
    public static PowerShellTraceOperationCode Send;
    public static PowerShellTraceOperationCode SerializationSettings;
    public static PowerShellTraceOperationCode WinDCStart;
    public static PowerShellTraceOperationCode WinDCStop;
    public static PowerShellTraceOperationCode WinExtension;
    public static PowerShellTraceOperationCode WinInfo;
    public static PowerShellTraceOperationCode WinReply;
    public static PowerShellTraceOperationCode WinResume;
    public static PowerShellTraceOperationCode WinStart;
    public static PowerShellTraceOperationCode WinStop;
    public static PowerShellTraceOperationCode WinSuspend;
    public static PowerShellTraceOperationCode WorkflowLoad;
}
public class System.Management.Automation.Tracing.PowerShellTraceSource : object {
    public BaseChannelWriter AnalyticChannel { get; }
    public BaseChannelWriter DebugChannel { get; }
    public PowerShellTraceKeywords Keywords { get; }
    public BaseChannelWriter OperationalChannel { get; }
    public PowerShellTraceTask Task { get; public set; }
    public sealed virtual void Dispose();
    public PowerShellTraceKeywords get_Keywords();
    public PowerShellTraceTask get_Task();
    public void set_Task(PowerShellTraceTask value);
    public bool TraceErrorRecord(ErrorRecord errorRecord);
    public bool TraceException(Exception exception);
    public bool TracePowerShellObject(PSObject powerShellObject);
    public bool TraceJob(Job job);
    public bool WriteMessage(string message);
    public bool WriteMessage(string message1, string message2);
    public bool WriteMessage(string message, Guid instanceId);
    public void WriteMessage(string className, string methodName, Guid workflowId, string message, String[] parameters);
    public void WriteMessage(string className, string methodName, Guid workflowId, Job job, string message, String[] parameters);
    public void WriteScheduledJobStartEvent(Object[] args);
    public void WriteScheduledJobCompleteEvent(Object[] args);
    public void WriteScheduledJobErrorEvent(Object[] args);
    public void WriteISEExecuteScriptEvent(Object[] args);
    public void WriteISEExecuteSelectionEvent(Object[] args);
    public void WriteISEStopCommandEvent(Object[] args);
    public void WriteISEResumeDebuggerEvent(Object[] args);
    public void WriteISEStopDebuggerEvent(Object[] args);
    public void WriteISEDebuggerStepIntoEvent(Object[] args);
    public void WriteISEDebuggerStepOverEvent(Object[] args);
    public void WriteISEDebuggerStepOutEvent(Object[] args);
    public void WriteISEEnableAllBreakpointsEvent(Object[] args);
    public void WriteISEDisableAllBreakpointsEvent(Object[] args);
    public void WriteISERemoveAllBreakpointsEvent(Object[] args);
    public void WriteISESetBreakpointEvent(Object[] args);
    public void WriteISERemoveBreakpointEvent(Object[] args);
    public void WriteISEEnableBreakpointEvent(Object[] args);
    public void WriteISEDisableBreakpointEvent(Object[] args);
    public void WriteISEHitBreakpointEvent(Object[] args);
    public void WriteMessage(string className, string methodName, Guid workflowId, string activityName, Guid activityId, string message, String[] parameters);
    public bool TraceWSManConnectionInfo(WSManConnectionInfo connectionInfo);
    public BaseChannelWriter get_DebugChannel();
    public BaseChannelWriter get_AnalyticChannel();
    public BaseChannelWriter get_OperationalChannel();
}
public static class System.Management.Automation.Tracing.PowerShellTraceSourceFactory : object {
    public static PowerShellTraceSource GetTraceSource();
    public static PowerShellTraceSource GetTraceSource(PowerShellTraceTask task);
    public static PowerShellTraceSource GetTraceSource(PowerShellTraceTask task, PowerShellTraceKeywords keywords);
}
public enum System.Management.Automation.Tracing.PowerShellTraceTask : Enum {
    public int value__;
    public static PowerShellTraceTask CreateRunspace;
    public static PowerShellTraceTask ExecuteCommand;
    public static PowerShellTraceTask None;
    public static PowerShellTraceTask PowerShellConsoleStartup;
    public static PowerShellTraceTask Serialization;
}
public class System.Management.Automation.Tracing.Tracer : EtwActivity {
    public static long KeywordAll;
    public static byte LevelCritical;
    public static byte LevelError;
    public static byte LevelInformational;
    public static byte LevelVerbose;
    public static byte LevelWarning;
    protected Guid ProviderId { get; }
    protected EventDescriptor TransferEvent { get; }
    protected virtual Guid get_ProviderId();
    protected virtual EventDescriptor get_TransferEvent();
    public void WriteTransferEvent(Guid currentActivityId, Guid parentActivityId);
    public void DebugMessage(string message);
    public void AbortingWorkflowExecution(Guid workflowId, string reason);
    public void ActivityExecutionFinished(string activityName);
    public void ActivityExecutionQueued(Guid workflowId, string activityName);
    public void ActivityExecutionStarted(string activityName, string activityTypeName);
    public void BeginContainerParentJobExecution(Guid containerParentJobInstanceId);
    public void BeginCreateNewJob(Guid trackingId);
    public void BeginJobLogic(Guid workflowJobJobInstanceId);
    public void BeginProxyChildJobEventHandler(Guid proxyChildJobInstanceId);
    public void BeginProxyJobEventHandler(Guid proxyJobInstanceId);
    public void BeginProxyJobExecution(Guid proxyJobInstanceId);
    public void BeginRunGarbageCollection();
    public void BeginStartWorkflowApplication(Guid trackingId);
    public void BeginWorkflowExecution(Guid workflowJobJobInstanceId);
    public void CancellingWorkflowExecution(Guid workflowId);
    public void ChildWorkflowJobAddition(Guid workflowJobInstanceId, Guid containerParentJobInstanceId);
    public void EndContainerParentJobExecution(Guid containerParentJobInstanceId);
    public void EndCreateNewJob(Guid trackingId);
    public void EndJobLogic(Guid workflowJobJobInstanceId);
    public void EndpointDisabled(string endpointName, string disabledBy);
    public void EndpointEnabled(string endpointName, string enabledBy);
    public void EndpointModified(string endpointName, string modifiedBy);
    public void EndpointRegistered(string endpointName, string endpointType, string registeredBy);
    public void EndpointUnregistered(string endpointName, string unregisteredBy);
    public void EndProxyChildJobEventHandler(Guid proxyChildJobInstanceId);
    public void EndProxyJobEventHandler(Guid proxyJobInstanceId);
    public void EndProxyJobExecution(Guid proxyJobInstanceId);
    public void EndRunGarbageCollection();
    public void EndStartWorkflowApplication(Guid trackingId);
    public void EndWorkflowExecution(Guid workflowJobJobInstanceId);
    public void ErrorImportingWorkflowFromXaml(Guid workflowId, string errorDescription);
    public void ForcedWorkflowShutdownError(Guid workflowId, string errorDescription);
    public void ForcedWorkflowShutdownFinished(Guid workflowId);
    public void ForcedWorkflowShutdownStarted(Guid workflowId);
    public void ImportedWorkflowFromXaml(Guid workflowId, string xamlFile);
    public void ImportingWorkflowFromXaml(Guid workflowId, string xamlFile);
    public void JobCreationComplete(Guid jobId, Guid workflowId);
    public void JobError(int jobId, Guid workflowId, string errorDescription);
    public void JobRemoved(Guid parentJobId, Guid childJobId, Guid workflowId);
    public void JobRemoveError(Guid parentJobId, Guid childJobId, Guid workflowId, string error);
    public void JobStateChanged(int jobId, Guid workflowId, string newState, string oldState);
    public void LoadingWorkflowForExecution(Guid workflowId);
    public void OutOfProcessRunspaceStarted(string command);
    public void ParameterSplattingWasPerformed(string parameters, string computers);
    public void ParentJobCreated(Guid jobId);
    public void PersistenceStoreMaxSizeReached();
    public void PersistingWorkflow(Guid workflowId, string persistPath);
    public void ProxyJobRemoteJobAssociation(Guid proxyJobInstanceId, Guid containerParentJobInstanceId);
    public void RemoveJobStarted(Guid jobId);
    public void RunspaceAvailabilityChanged(string runspaceId, string availability);
    public void RunspaceStateChanged(string runspaceId, string newState, string oldState);
    public void TrackingGuidContainerParentJobCorrelation(Guid trackingId, Guid containerParentJobInstanceId);
    public void UnloadingWorkflow(Guid workflowId);
    public void WorkflowActivityExecutionFailed(Guid workflowId, string activityName, string failureDescription);
    public void WorkflowActivityValidated(Guid workflowId, string activityDisplayName, string activityType);
    public void WorkflowActivityValidationFailed(Guid workflowId, string activityDisplayName, string activityType);
    public void WorkflowCleanupPerformed(Guid workflowId);
    public void WorkflowDeletedFromDisk(Guid workflowId, string path);
    public void WorkflowEngineStarted(string endpointName);
    public void WorkflowExecutionAborted(Guid workflowId);
    public void WorkflowExecutionCancelled(Guid workflowId);
    public void WorkflowExecutionError(Guid workflowId, string errorDescription);
    public void WorkflowExecutionFinished(Guid workflowId);
    public void WorkflowExecutionStarted(Guid workflowId, string managedNodes);
    public void WorkflowJobCreated(Guid parentJobId, Guid childJobId, Guid childWorkflowId);
    public void WorkflowLoadedForExecution(Guid workflowId);
    public void WorkflowLoadedFromDisk(Guid workflowId, string path);
    public void WorkflowManagerCheckpoint(string checkpointPath, string configProviderId, string userName, string path);
    public void WorkflowPersisted(Guid workflowId);
    public void WorkflowPluginRequestedToShutdown(string endpointName);
    public void WorkflowPluginRestarted(string endpointName);
    public void WorkflowPluginStarted(string endpointName, string user, string hostingMode, string protocol, string configuration);
    public void WorkflowQuotaViolated(string endpointName, string configName, string allowedValue, string valueInQuestion);
    public void WorkflowResumed(Guid workflowId);
    public void WorkflowResuming(Guid workflowId);
    public void WorkflowRunspacePoolCreated(Guid workflowId, string managedNode);
    public void WorkflowStateChanged(Guid workflowId, string newState, string oldState);
    public void WorkflowUnloaded(Guid workflowId);
    public void WorkflowValidationError(Guid workflowId);
    public void WorkflowValidationFinished(Guid workflowId);
    public void WorkflowValidationStarted(Guid workflowId);
    public void DebugMessage(Exception exception);
    public static string GetExceptionString(Exception exception);
}
[AttributeUsageAttribute("384")]
public abstract class System.Management.Automation.ValidateArgumentsAttribute : CmdletMetadataAttribute {
    protected abstract virtual void Validate(object arguments, EngineIntrinsics engineIntrinsics);
}
[AttributeUsageAttribute("384")]
public class System.Management.Automation.ValidateCountAttribute : ValidateArgumentsAttribute {
    public int MaxLength { get; }
    public int MinLength { get; }
    public ValidateCountAttribute(int minLength, int maxLength);
    public int get_MinLength();
    public int get_MaxLength();
    protected virtual void Validate(object arguments, EngineIntrinsics engineIntrinsics);
}
[AttributeUsageAttribute("384")]
public abstract class System.Management.Automation.ValidateEnumeratedArgumentsAttribute : ValidateArgumentsAttribute {
    protected abstract virtual void ValidateElement(object element);
    protected sealed virtual void Validate(object arguments, EngineIntrinsics engineIntrinsics);
}
[AttributeUsageAttribute("384")]
public class System.Management.Automation.ValidateLengthAttribute : ValidateEnumeratedArgumentsAttribute {
    public int MaxLength { get; }
    public int MinLength { get; }
    public ValidateLengthAttribute(int minLength, int maxLength);
    public int get_MinLength();
    public int get_MaxLength();
    protected virtual void ValidateElement(object element);
}
[AttributeUsageAttribute("384")]
public class System.Management.Automation.ValidateNotNullAttribute : ValidateArgumentsAttribute {
    protected virtual void Validate(object arguments, EngineIntrinsics engineIntrinsics);
}
[AttributeUsageAttribute("384")]
public class System.Management.Automation.ValidateNotNullOrEmptyAttribute : ValidateArgumentsAttribute {
    protected virtual void Validate(object arguments, EngineIntrinsics engineIntrinsics);
}
[AttributeUsageAttribute("384")]
public class System.Management.Automation.ValidatePatternAttribute : ValidateEnumeratedArgumentsAttribute {
    public RegexOptions Options { get; public set; }
    public string RegexPattern { get; }
    public ValidatePatternAttribute(string regexPattern);
    public string get_RegexPattern();
    public void set_Options(RegexOptions value);
    public RegexOptions get_Options();
    protected virtual void ValidateElement(object element);
}
[AttributeUsageAttribute("384")]
public class System.Management.Automation.ValidateRangeAttribute : ValidateEnumeratedArgumentsAttribute {
    public object MaxRange { get; }
    public object MinRange { get; }
    public ValidateRangeAttribute(object minRange, object maxRange);
    public object get_MinRange();
    public object get_MaxRange();
    protected virtual void ValidateElement(object element);
}
public class System.Management.Automation.ValidateScriptAttribute : ValidateEnumeratedArgumentsAttribute {
    public ScriptBlock ScriptBlock { get; }
    public ValidateScriptAttribute(ScriptBlock scriptBlock);
    public ScriptBlock get_ScriptBlock();
    protected virtual void ValidateElement(object element);
}
[AttributeUsageAttribute("384")]
public class System.Management.Automation.ValidateSetAttribute : ValidateEnumeratedArgumentsAttribute {
    public bool IgnoreCase { get; public set; }
    public IList`1<string> ValidValues { get; }
    public ValidateSetAttribute(String[] validValues);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public IList`1<string> get_ValidValues();
    protected virtual void ValidateElement(object element);
}
public class System.Management.Automation.ValidationMetadataException : MetadataException {
    protected ValidationMetadataException(SerializationInfo info, StreamingContext context);
    public ValidationMetadataException(string message);
    public ValidationMetadataException(string message, Exception innerException);
}
public enum System.Management.Automation.VariableAccessMode : Enum {
    public int value__;
    public static VariableAccessMode Read;
    public static VariableAccessMode ReadWrite;
    public static VariableAccessMode Write;
}
public class System.Management.Automation.VariableBreakpoint : Breakpoint {
    public VariableAccessMode AccessMode { get; }
    public string Variable { get; }
    public VariableAccessMode get_AccessMode();
    public string get_Variable();
    public virtual string ToString();
}
public class System.Management.Automation.VariablePath : object {
    public string DriveName { get; }
    public bool IsDriveQualified { get; }
    public bool IsGlobal { get; }
    public bool IsLocal { get; }
    public bool IsPrivate { get; }
    public bool IsScript { get; }
    public bool IsUnqualified { get; }
    public bool IsUnscopedVariable { get; }
    public bool IsVariable { get; }
    public string UserPath { get; }
    public VariablePath(string path);
    public string get_UserPath();
    public bool get_IsGlobal();
    public bool get_IsLocal();
    public bool get_IsPrivate();
    public bool get_IsScript();
    public bool get_IsUnqualified();
    public bool get_IsUnscopedVariable();
    public bool get_IsVariable();
    public bool get_IsDriveQualified();
    public string get_DriveName();
    public virtual string ToString();
}
public class System.Management.Automation.VerboseRecord : InformationalRecord {
    public VerboseRecord(string message);
    public VerboseRecord(PSObject record);
}
public static class System.Management.Automation.VerbsCommon : object {
    public static string Add;
    public static string Clear;
    public static string Close;
    public static string Copy;
    public static string Enter;
    public static string Exit;
    public static string Find;
    public static string Format;
    public static string Get;
    public static string Hide;
    public static string Join;
    public static string Lock;
    public static string Move;
    public static string New;
    public static string Open;
    public static string Optimize;
    public static string Pop;
    public static string Push;
    public static string Redo;
    public static string Remove;
    public static string Rename;
    public static string Reset;
    public static string Resize;
    public static string Search;
    public static string Select;
    public static string Set;
    public static string Show;
    public static string Skip;
    public static string Split;
    public static string Step;
    public static string Switch;
    public static string Undo;
    public static string Unlock;
    public static string Watch;
}
public static class System.Management.Automation.VerbsCommunications : object {
    public static string Connect;
    public static string Disconnect;
    public static string Read;
    public static string Receive;
    public static string Send;
    public static string Write;
}
public static class System.Management.Automation.VerbsData : object {
    public static string Backup;
    public static string Checkpoint;
    public static string Compare;
    public static string Compress;
    public static string Convert;
    public static string ConvertFrom;
    public static string ConvertTo;
    public static string Dismount;
    public static string Edit;
    public static string Expand;
    public static string Export;
    public static string Group;
    public static string Import;
    public static string Initialize;
    public static string Limit;
    public static string Merge;
    public static string Mount;
    public static string Out;
    public static string Publish;
    public static string Restore;
    public static string Save;
    public static string Sync;
    public static string Unpublish;
    public static string Update;
}
public static class System.Management.Automation.VerbsDiagnostic : object {
    public static string Debug;
    public static string Measure;
    public static string Ping;
    public static string Repair;
    public static string Resolve;
    public static string Test;
    public static string Trace;
}
public static class System.Management.Automation.VerbsLifecycle : object {
    public static string Approve;
    public static string Assert;
    public static string Complete;
    public static string Confirm;
    public static string Deny;
    public static string Disable;
    public static string Enable;
    public static string Install;
    public static string Invoke;
    public static string Register;
    public static string Request;
    public static string Restart;
    public static string Resume;
    public static string Start;
    public static string Stop;
    public static string Submit;
    public static string Suspend;
    public static string Uninstall;
    public static string Unregister;
    public static string Wait;
}
public static class System.Management.Automation.VerbsOther : object {
    public static string Use;
}
public static class System.Management.Automation.VerbsSecurity : object {
    public static string Block;
    public static string Grant;
    public static string Protect;
    public static string Revoke;
    public static string Unblock;
    public static string Unprotect;
}
public class System.Management.Automation.WarningRecord : InformationalRecord {
    public string FullyQualifiedWarningId { get; }
    public WarningRecord(string message);
    public WarningRecord(PSObject record);
    public WarningRecord(string fullyQualifiedWarningId, string message);
    public WarningRecord(string fullyQualifiedWarningId, PSObject record);
    public string get_FullyQualifiedWarningId();
}
public enum System.Management.Automation.WhereOperatorSelectionMode : Enum {
    public int value__;
    public static WhereOperatorSelectionMode Default;
    public static WhereOperatorSelectionMode First;
    public static WhereOperatorSelectionMode Last;
    public static WhereOperatorSelectionMode SkipUntil;
    public static WhereOperatorSelectionMode Split;
    public static WhereOperatorSelectionMode Until;
}
public class System.Management.Automation.WideControl : PSControl {
    public Alignment Alignment { get; }
    public UInt32 Columns { get; }
    public List`1<WideControlEntryItem> Entries { get; }
    public WideControl(IEnumerable`1<WideControlEntryItem> wideEntries);
    public WideControl(IEnumerable`1<WideControlEntryItem> wideEntries, UInt32 columns);
    public WideControl(UInt32 columns);
    public List`1<WideControlEntryItem> get_Entries();
    public Alignment get_Alignment();
    public UInt32 get_Columns();
    public virtual string ToString();
}
public class System.Management.Automation.WideControlEntryItem : object {
    public DisplayEntry DisplayEntry { get; }
    public List`1<string> SelectedBy { get; }
    public WideControlEntryItem(DisplayEntry entry);
    public WideControlEntryItem(DisplayEntry entry, IEnumerable`1<string> selectedBy);
    public DisplayEntry get_DisplayEntry();
    public List`1<string> get_SelectedBy();
}
[FlagsAttribute]
public enum System.Management.Automation.WildcardOptions : Enum {
    public int value__;
    public static WildcardOptions Compiled;
    public static WildcardOptions CultureInvariant;
    public static WildcardOptions IgnoreCase;
    public static WildcardOptions None;
}
public class System.Management.Automation.WildcardPattern : object {
    public WildcardPattern(string pattern);
    public WildcardPattern(string pattern, WildcardOptions options);
    public bool IsMatch(string input);
    public static string Escape(string pattern);
    public static bool ContainsWildcardCharacters(string pattern);
    public static string Unescape(string pattern);
    public string ToWql();
}
public class System.Management.Automation.WildcardPatternException : RuntimeException {
    public WildcardPatternException(string message);
    public WildcardPatternException(string message, Exception innerException);
    protected WildcardPatternException(SerializationInfo info, StreamingContext context);
}
public class System.Management.Automation.WorkflowInfo : FunctionInfo {
    public string Definition { get; }
    public string NestedXamlDefinition { get; public set; }
    public ReadOnlyCollection`1<WorkflowInfo> WorkflowsCalled { get; }
    public string XamlDefinition { get; }
    public WorkflowInfo(string name, string definition, ScriptBlock workflow, string xamlDefinition, WorkflowInfo[] workflowsCalled);
    public WorkflowInfo(string name, string definition, ScriptBlock workflow, string xamlDefinition, WorkflowInfo[] workflowsCalled, PSModuleInfo module);
    protected internal virtual void Update(FunctionInfo function, bool force, ScopedItemOptions options, string helpFile);
    public virtual string get_Definition();
    public string get_XamlDefinition();
    public string get_NestedXamlDefinition();
    public void set_NestedXamlDefinition(string value);
    public ReadOnlyCollection`1<WorkflowInfo> get_WorkflowsCalled();
}
