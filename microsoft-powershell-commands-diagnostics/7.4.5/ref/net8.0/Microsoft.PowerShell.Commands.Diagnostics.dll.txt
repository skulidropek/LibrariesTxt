[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class GetEventResources : object {
}
internal static class Microsoft.PowerShell.Commands.Diagnostics.Common.CommonUtilities : object {
    public static UInt32 FormatMessageFromModule(UInt32 lastError, string moduleName, String& msg);
    public static ResourceManager GetResourceManager();
}
internal class Microsoft.PowerShell.Commands.EventWriteException : Exception {
}
public class Microsoft.PowerShell.Commands.GetCounter.CounterSet : object {
    public string CounterSetName { get; }
    public string MachineName { get; }
    public PerformanceCounterCategoryType CounterSetType { get; }
    public string Description { get; }
    public StringCollection Paths { get; }
    public StringCollection PathsWithInstances { get; }
    [CompilerGeneratedAttribute]
public string get_CounterSetName();
    [CompilerGeneratedAttribute]
public string get_MachineName();
    [CompilerGeneratedAttribute]
public PerformanceCounterCategoryType get_CounterSetType();
    [CompilerGeneratedAttribute]
public string get_Description();
    public StringCollection get_Paths();
    public StringCollection get_PathsWithInstances();
}
internal class Microsoft.Powershell.Commands.GetCounter.PdhNative.CounterHandleNInstance : ValueType {
    public IntPtr hCounter;
    public string InstanceName;
}
internal static class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhFormat : object {
    public static UInt32 PDH_FMT_RAW;
    public static UInt32 PDH_FMT_ANSI;
    public static UInt32 PDH_FMT_UNICODE;
    public static UInt32 PDH_FMT_LONG;
    public static UInt32 PDH_FMT_DOUBLE;
    public static UInt32 PDH_FMT_LARGE;
    public static UInt32 PDH_FMT_NOSCALE;
    public static UInt32 PDH_FMT_1000;
    public static UInt32 PDH_FMT_NODATA;
    public static UInt32 PDH_FMT_NOCAP100;
    public static UInt32 PERF_DETAIL_COSTLY;
    public static UInt32 PERF_DETAIL_STANDARD;
}
internal class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhHelper : object {
    public sealed virtual void Dispose();
    public UInt32 ConnectToDataSource();
    public UInt32 ConnectToDataSource(string dataSourceName);
    public UInt32 ConnectToDataSource(StringCollection blgFileNames);
    public UInt32 OpenQuery();
    public UInt32 OpenLogForWriting(string logName, PdhLogFileType logFileType, bool bOverwrite, UInt32 maxSize, bool bCircular, string caption);
    public UInt32 SetQueryTimeRange(DateTime startTime, DateTime endTime);
    public UInt32 EnumBlgFilesMachines(StringCollection& machineNames);
    public UInt32 EnumObjects(string machineName, StringCollection& objectNames);
    public UInt32 EnumObjectItems(string machineName, string objectName, StringCollection& counterNames, StringCollection& instanceNames);
    public UInt32 GetValidPathsFromFiles(StringCollection& validPaths);
    public bool IsPathValid(string path);
    public UInt32 TranslateLocalCounterPath(string englishPath, String& localizedPath);
    public UInt32 LookupPerfNameByIndex(string machineName, UInt32 index, String& locName);
    public UInt32 GetValidPaths(string machineName, string objectName, StringCollection& counters, StringCollection& instances, StringCollection& validPaths);
    public UInt32 AddCounters(StringCollection& validPaths, bool bFlushOldCounters);
    public string GetCounterSetHelp(string szMachineName, string szObjectName);
    public UInt32 ReadNextSet(PerformanceCounterSampleSet& nextSet, bool bSkipReading);
    public UInt32 ExpandWildCardPath(string path, StringCollection& expandedPaths);
}
internal static class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhLogAccess : object {
    public static UInt32 PDH_LOG_READ_ACCESS;
    public static UInt32 PDH_LOG_WRITE_ACCESS;
    public static UInt32 PDH_LOG_UPDATE_ACCESS;
    public static UInt32 PDH_LOG_ACCESS_MASK;
}
internal enum Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhLogFileType : Enum {
    public int value__;
    public static PdhLogFileType PDH_LOG_TYPE_UNDEFINED;
    public static PdhLogFileType PDH_LOG_TYPE_CSV;
    public static PdhLogFileType PDH_LOG_TYPE_TSV;
    public static PdhLogFileType PDH_LOG_TYPE_TRACE_KERNEL;
    public static PdhLogFileType PDH_LOG_TYPE_TRACE_GENERIC;
    public static PdhLogFileType PDH_LOG_TYPE_PERFMON;
    public static PdhLogFileType PDH_LOG_TYPE_SQL;
    public static PdhLogFileType PDH_LOG_TYPE_BINARY;
}
internal static class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhLogOpenMode : object {
    public static UInt32 PDH_LOG_CREATE_NEW;
    public static UInt32 PDH_LOG_CREATE_ALWAYS;
    public static UInt32 PDH_LOG_OPEN_ALWAYS;
    public static UInt32 PDH_LOG_OPEN_EXISTING;
    public static UInt32 PDH_LOG_CREATE_MASK;
}
internal static class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhLogOpenOption : object {
    public static UInt32 PDH_LOG_OPT_USER_STRING;
    public static UInt32 PDH_LOG_OPT_CIRCULAR;
    public static UInt32 PDH_LOG_OPT_MAX_IS_BYTES;
    public static UInt32 PDH_LOG_OPT_APPEND;
}
internal static class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhResults : object {
    public static UInt32 PDH_CSTATUS_VALID_DATA;
    public static UInt32 PDH_CSTATUS_NEW_DATA;
    public static UInt32 PDH_CSTATUS_NO_MACHINE;
    public static UInt32 PDH_CSTATUS_NO_INSTANCE;
    public static UInt32 PDH_MORE_DATA;
    public static UInt32 PDH_CSTATUS_ITEM_NOT_VALIDATED;
    public static UInt32 PDH_RETRY;
    public static UInt32 PDH_NO_DATA;
    public static UInt32 PDH_CALC_NEGATIVE_DENOMINATOR;
    public static UInt32 PDH_CALC_NEGATIVE_TIMEBASE;
    public static UInt32 PDH_CALC_NEGATIVE_VALUE;
    public static UInt32 PDH_DIALOG_CANCELLED;
    public static UInt32 PDH_END_OF_LOG_FILE;
    public static UInt32 PDH_ASYNC_QUERY_TIMEOUT;
    public static UInt32 PDH_CANNOT_SET_DEFAULT_REALTIME_DATASOURCE;
    public static UInt32 PDH_UNABLE_MAP_NAME_FILES;
    public static UInt32 PDH_PLA_VALIDATION_WARNING;
    public static UInt32 PDH_CSTATUS_NO_OBJECT;
    public static UInt32 PDH_CSTATUS_NO_COUNTER;
    public static UInt32 PDH_CSTATUS_INVALID_DATA;
    public static UInt32 PDH_MEMORY_ALLOCATION_FAILURE;
    public static UInt32 PDH_INVALID_HANDLE;
    public static UInt32 PDH_INVALID_ARGUMENT;
    public static UInt32 PDH_FUNCTION_NOT_FOUND;
    public static UInt32 PDH_CSTATUS_NO_COUNTERNAME;
    public static UInt32 PDH_CSTATUS_BAD_COUNTERNAME;
    public static UInt32 PDH_INVALID_BUFFER;
    public static UInt32 PDH_INSUFFICIENT_BUFFER;
    public static UInt32 PDH_CANNOT_CONNECT_MACHINE;
    public static UInt32 PDH_INVALID_PATH;
    public static UInt32 PDH_INVALID_INSTANCE;
    public static UInt32 PDH_INVALID_DATA;
    public static UInt32 PDH_NO_DIALOG_DATA;
    public static UInt32 PDH_CANNOT_READ_NAME_STRINGS;
    public static UInt32 PDH_LOG_FILE_CREATE_ERROR;
    public static UInt32 PDH_LOG_FILE_OPEN_ERROR;
    public static UInt32 PDH_LOG_TYPE_NOT_FOUND;
    public static UInt32 PDH_NO_MORE_DATA;
    public static UInt32 PDH_ENTRY_NOT_IN_LOG_FILE;
    public static UInt32 PDH_DATA_SOURCE_IS_LOG_FILE;
    public static UInt32 PDH_DATA_SOURCE_IS_REAL_TIME;
    public static UInt32 PDH_UNABLE_READ_LOG_HEADER;
    public static UInt32 PDH_FILE_NOT_FOUND;
    public static UInt32 PDH_FILE_ALREADY_EXISTS;
    public static UInt32 PDH_NOT_IMPLEMENTED;
    public static UInt32 PDH_STRING_NOT_FOUND;
    public static UInt32 PDH_UNKNOWN_LOG_FORMAT;
    public static UInt32 PDH_UNKNOWN_LOGSVC_COMMAND;
    public static UInt32 PDH_LOGSVC_QUERY_NOT_FOUND;
    public static UInt32 PDH_LOGSVC_NOT_OPENED;
    public static UInt32 PDH_WBEM_ERROR;
    public static UInt32 PDH_ACCESS_DENIED;
    public static UInt32 PDH_LOG_FILE_TOO_SMALL;
    public static UInt32 PDH_INVALID_DATASOURCE;
    public static UInt32 PDH_INVALID_SQLDB;
    public static UInt32 PDH_NO_COUNTERS;
    public static UInt32 PDH_SQL_ALLOC_FAILED;
    public static UInt32 PDH_SQL_ALLOCCON_FAILED;
    public static UInt32 PDH_SQL_EXEC_DIRECT_FAILED;
    public static UInt32 PDH_SQL_FETCH_FAILED;
    public static UInt32 PDH_SQL_ROWCOUNT_FAILED;
    public static UInt32 PDH_SQL_MORE_RESULTS_FAILED;
    public static UInt32 PDH_SQL_CONNECT_FAILED;
    public static UInt32 PDH_SQL_BIND_FAILED;
    public static UInt32 PDH_CANNOT_CONNECT_WMI_SERVER;
    public static UInt32 PDH_PLA_COLLECTION_ALREADY_RUNNING;
    public static UInt32 PDH_PLA_ERROR_SCHEDULE_OVERLAP;
    public static UInt32 PDH_PLA_COLLECTION_NOT_FOUND;
    public static UInt32 PDH_PLA_ERROR_SCHEDULE_ELAPSED;
    public static UInt32 PDH_PLA_ERROR_NOSTART;
    public static UInt32 PDH_PLA_ERROR_ALREADY_EXISTS;
    public static UInt32 PDH_PLA_ERROR_TYPE_MISMATCH;
    public static UInt32 PDH_PLA_ERROR_FILEPATH;
    public static UInt32 PDH_PLA_SERVICE_ERROR;
    public static UInt32 PDH_PLA_VALIDATION_ERROR;
    public static UInt32 PDH_PLA_ERROR_NAME_TOO_LONG;
    public static UInt32 PDH_INVALID_SQL_LOG_FORMAT;
    public static UInt32 PDH_COUNTER_ALREADY_IN_QUERY;
    public static UInt32 PDH_BINARY_LOG_CORRUPT;
    public static UInt32 PDH_LOG_SAMPLE_TOO_SMALL;
    public static UInt32 PDH_OS_LATER_VERSION;
    public static UInt32 PDH_OS_EARLIER_VERSION;
    public static UInt32 PDH_INCORRECT_APPEND_TIME;
    public static UInt32 PDH_UNMATCHED_APPEND_COUNTER;
    public static UInt32 PDH_SQL_ALTER_DETAIL_FAILED;
    public static UInt32 PDH_QUERY_PERF_DATA_TIMEOUT;
}
internal class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhSafeDataSourceHandle : SafeHandle {
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhSafeLogHandle : SafeHandle {
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhSafeQueryHandle : SafeHandle {
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal static class Microsoft.Powershell.Commands.GetCounter.PdhNative.PdhWildCardFlag : object {
    public static UInt32 PDH_NOEXPANDCOUNTERS;
    public static UInt32 PDH_NOEXPANDINSTANCES;
    public static UInt32 PDH_REFRESHCOUNTERS;
}
internal static class Microsoft.Powershell.Commands.GetCounter.PdhNative.PerfDetail : object {
    public static UInt32 PERF_DETAIL_NOVICE;
    public static UInt32 PERF_DETAIL_ADVANCED;
    public static UInt32 PERF_DETAIL_EXPERT;
    public static UInt32 PERF_DETAIL_WIZARD;
}
internal class Microsoft.Powershell.Commands.GetCounter.PdhNative.SYSTEMTIME : ValueType {
    public ushort year;
    public ushort month;
    public ushort dayOfWeek;
    public ushort day;
    public ushort hour;
    public ushort minute;
    public ushort second;
    public ushort milliseconds;
}
public class Microsoft.PowerShell.Commands.GetCounter.PerformanceCounterSample : object {
    public string Path { get; public set; }
    public string InstanceName { get; public set; }
    public double CookedValue { get; public set; }
    public ulong RawValue { get; public set; }
    public ulong SecondValue { get; public set; }
    public UInt32 MultipleCount { get; public set; }
    public PerformanceCounterType CounterType { get; public set; }
    public DateTime Timestamp { get; public set; }
    public ulong Timestamp100NSec { get; public set; }
    public UInt32 Status { get; public set; }
    public UInt32 DefaultScale { get; public set; }
    public ulong TimeBase { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceName();
    [CompilerGeneratedAttribute]
public void set_InstanceName(string value);
    [CompilerGeneratedAttribute]
public double get_CookedValue();
    [CompilerGeneratedAttribute]
public void set_CookedValue(double value);
    [CompilerGeneratedAttribute]
public ulong get_RawValue();
    [CompilerGeneratedAttribute]
public void set_RawValue(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_SecondValue();
    [CompilerGeneratedAttribute]
public void set_SecondValue(ulong value);
    [CompilerGeneratedAttribute]
public UInt32 get_MultipleCount();
    [CompilerGeneratedAttribute]
public void set_MultipleCount(UInt32 value);
    [CompilerGeneratedAttribute]
public PerformanceCounterType get_CounterType();
    [CompilerGeneratedAttribute]
public void set_CounterType(PerformanceCounterType value);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public ulong get_Timestamp100NSec();
    [CompilerGeneratedAttribute]
public void set_Timestamp100NSec(ulong value);
    [CompilerGeneratedAttribute]
public UInt32 get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_DefaultScale();
    [CompilerGeneratedAttribute]
public void set_DefaultScale(UInt32 value);
    [CompilerGeneratedAttribute]
public ulong get_TimeBase();
    [CompilerGeneratedAttribute]
public void set_TimeBase(ulong value);
}
public class Microsoft.PowerShell.Commands.GetCounter.PerformanceCounterSampleSet : object {
    public DateTime Timestamp { get; public set; }
    public PerformanceCounterSample[] CounterSamples { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public PerformanceCounterSample[] get_CounterSamples();
    [CompilerGeneratedAttribute]
public void set_CounterSamples(PerformanceCounterSample[] value);
}
[CmdletAttribute("Get", "Counter")]
public class Microsoft.PowerShell.Commands.GetCounterCommand : PSCmdlet {
    [ParameterAttribute]
[AllowEmptyCollectionAttribute]
public String[] ListSet { get; public set; }
    [ParameterAttribute]
[AllowEmptyCollectionAttribute]
public String[] Counter { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int SampleInterval { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public long MaxSamples { get; public set; }
    [ParameterAttribute]
public SwitchParameter Continuous { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
[AllowEmptyCollectionAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] ComputerName { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_ListSet();
    [CompilerGeneratedAttribute]
public void set_ListSet(String[] value);
    public String[] get_Counter();
    public void set_Counter(String[] value);
    [CompilerGeneratedAttribute]
public int get_SampleInterval();
    [CompilerGeneratedAttribute]
public void set_SampleInterval(int value);
    public long get_MaxSamples();
    public void set_MaxSamples(long value);
    public SwitchParameter get_Continuous();
    public void set_Continuous(SwitchParameter value);
    [CompilerGeneratedAttribute]
public String[] get_ComputerName();
    [CompilerGeneratedAttribute]
public void set_ComputerName(String[] value);
    protected virtual void BeginProcessing();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
    protected virtual void ProcessRecord();
}
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CmdletAttribute("Get", "WinEvent")]
public class Microsoft.PowerShell.Commands.GetWinEventCommand : PSCmdlet {
    [ParameterAttribute]
[AllowEmptyCollectionAttribute]
public String[] ListLog { get; public set; }
    [ParameterAttribute]
public String[] LogName { get; public set; }
    [ParameterAttribute]
[AllowEmptyCollectionAttribute]
public String[] ListProvider { get; public set; }
    [ParameterAttribute]
public String[] ProviderName { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Path { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public long MaxEvents { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ComputerName { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[CredentialAttribute]
public PSCredential Credential { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullAttribute]
public string FilterXPath { get; public set; }
    [ParameterAttribute]
public XmlDocument FilterXml { get; public set; }
    [ParameterAttribute]
public Hashtable[] FilterHashtable { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter Oldest { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_ListLog();
    [CompilerGeneratedAttribute]
public void set_ListLog(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_LogName();
    [CompilerGeneratedAttribute]
public void set_LogName(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ListProvider();
    [CompilerGeneratedAttribute]
public void set_ListProvider(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ProviderName();
    [CompilerGeneratedAttribute]
public void set_ProviderName(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(String[] value);
    [CompilerGeneratedAttribute]
public long get_MaxEvents();
    [CompilerGeneratedAttribute]
public void set_MaxEvents(long value);
    [CompilerGeneratedAttribute]
public string get_ComputerName();
    [CompilerGeneratedAttribute]
public void set_ComputerName(string value);
    [CompilerGeneratedAttribute]
public PSCredential get_Credential();
    [CompilerGeneratedAttribute]
public void set_Credential(PSCredential value);
    [CompilerGeneratedAttribute]
public string get_FilterXPath();
    [CompilerGeneratedAttribute]
public void set_FilterXPath(string value);
    [CompilerGeneratedAttribute]
public XmlDocument get_FilterXml();
    [CompilerGeneratedAttribute]
public void set_FilterXml(XmlDocument value);
    [CompilerGeneratedAttribute]
public Hashtable[] get_FilterHashtable();
    [CompilerGeneratedAttribute]
public void set_FilterHashtable(Hashtable[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(SwitchParameter value);
    public SwitchParameter get_Oldest();
    public void set_Oldest(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void EndProcessing();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("New", "WinEvent")]
public class Microsoft.PowerShell.Commands.NewWinEventCommand : PSCmdlet {
    [ParameterAttribute]
public string ProviderName { get; public set; }
    [ParameterAttribute]
public int Id { get; public set; }
    [ParameterAttribute]
public byte Version { get; public set; }
    [ParameterAttribute]
[AllowEmptyCollectionAttribute]
public Object[] Payload { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
public void set_ProviderName(string value);
    public int get_Id();
    public void set_Id(int value);
    public byte get_Version();
    public void set_Version(byte value);
    [CompilerGeneratedAttribute]
public Object[] get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(Object[] value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
