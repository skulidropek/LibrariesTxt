[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ClearRecycleBinResources : object {
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ClipboardResources : object {
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class CmdletizationResources : object {
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ComputerInfoResources : object {
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ComputerResources : object {
}
[ExtensionAttribute]
internal static class Extensions.CIMExtensions : object {
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class HotFixResources : object {
}
internal class Microsoft.PowerShell.Cim.CimSensitiveValueConverter : object {
    public sealed virtual void Dispose();
}
internal static class Microsoft.PowerShell.Cim.CimValueConverter : object {
}
internal abstract class Microsoft.PowerShell.Cmdletization.Cim.CimChildJobBase`1 : StartableJob {
    public string Location { get; }
    public string StatusMessage { get; }
    public bool HasMoreData { get; }
    internal string Description { get; }
    internal string FailSafeDescription { get; }
    internal abstract virtual IObservable`1<T> GetCimOperation();
    public abstract virtual void OnNext(T item);
    public virtual void OnError(Exception exception);
    public virtual void OnCompleted();
    public virtual string get_Location();
    public virtual string get_StatusMessage();
    public virtual bool get_HasMoreData();
    internal virtual void StartJob();
    internal abstract virtual string get_Description();
    internal abstract virtual string get_FailSafeDescription();
    internal virtual string GetProviderVersionExpectedByJob();
    internal abstract virtual CimCustomOptionsDictionary CalculateJobSpecificCustomOptions();
    public virtual void StopJob();
    internal virtual void WriteWarning(string message);
    internal virtual void WriteVerbose(string message);
    internal virtual void WriteDebug(string message);
    internal virtual void WriteProgress(ProgressRecord progressRecord);
    internal virtual void WriteObject(object outputObject);
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter : SessionBasedCmdletAdapter`2<CimInstance, CimSession> {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CimSession[] CimSession { get; public set; }
    [ParameterAttribute]
public int ThrottleLimit { get; public set; }
    protected CimSession DefaultSession { get; }
    public CimSession[] get_CimSession();
    public void set_CimSession(CimSession[] value);
    public virtual int get_ThrottleLimit();
    public virtual void set_ThrottleLimit(int value);
    public virtual QueryBuilder GetQueryBuilder();
    protected virtual string GenerateParentJobName();
    protected virtual CimSession get_DefaultSession();
    internal virtual StartableJob CreateQueryJob(CimSession session, QueryBuilder baseQuery);
    internal virtual StartableJob CreateInstanceMethodInvocationJob(CimSession session, CimInstance objectInstance, MethodInvocationInfo methodInvocationInfo, bool passThru);
    internal virtual StartableJob CreateStaticMethodInvocationJob(CimSession session, MethodInvocationInfo methodInvocationInfo);
    internal virtual CimSession GetSessionOfOriginFromInstance(CimInstance instance);
    private sealed virtual override object System.Management.Automation.IDynamicParameters.GetDynamicParameters();
}
internal class Microsoft.PowerShell.Cmdletization.Cim.CimCmdletDefinitionContext : object {
    public string CmdletizationClassName { get; }
    public string CmdletizationClassVersion { get; }
    public Version CmdletizationModuleVersion { get; }
    public bool SupportsShouldProcess { get; }
    public bool UseEnumerateInstancesInsteadOfWql { get; }
    public int DefaultThrottleLimit { get; }
    public bool ExposeCimNamespaceParameter { get; }
    public bool ClientSideWriteVerbose { get; }
    public bool ClientSideShouldProcess { get; }
    public Uri ResourceUri { get; }
    public bool SkipTestConnection { get; }
    public CimOperationFlags SchemaConformanceLevel { get; }
    [CompilerGeneratedAttribute]
public string get_CmdletizationClassName();
    [CompilerGeneratedAttribute]
public string get_CmdletizationClassVersion();
    [CompilerGeneratedAttribute]
public Version get_CmdletizationModuleVersion();
    [CompilerGeneratedAttribute]
public bool get_SupportsShouldProcess();
    public bool get_UseEnumerateInstancesInsteadOfWql();
    public int get_DefaultThrottleLimit();
    public bool get_ExposeCimNamespaceParameter();
    public bool get_ClientSideWriteVerbose();
    public bool get_ClientSideShouldProcess();
    public Uri get_ResourceUri();
    public bool get_SkipTestConnection();
    public CimOperationFlags get_SchemaConformanceLevel();
}
internal class Microsoft.PowerShell.Cmdletization.Cim.CimCmdletInvocationContext : object {
    public CimCmdletDefinitionContext CmdletDefinitionContext { get; }
    public InvocationInfo CmdletInvocationInfo { get; }
    public ShouldProcessPossibleOptimization ShouldProcessOptimization { get; }
    public ActionPreference ErrorActionPreference { get; }
    public ActionPreference WarningActionPreference { get; }
    public ActionPreference VerboseActionPreference { get; }
    public ActionPreference DebugActionPreference { get; }
    public string NamespaceOverride { get; }
    public bool IsRunningInBackground { get; }
    public bool ShowComputerName { get; }
    [CompilerGeneratedAttribute]
public CimCmdletDefinitionContext get_CmdletDefinitionContext();
    [CompilerGeneratedAttribute]
public InvocationInfo get_CmdletInvocationInfo();
    [CompilerGeneratedAttribute]
public ShouldProcessPossibleOptimization get_ShouldProcessOptimization();
    [CompilerGeneratedAttribute]
public ActionPreference get_ErrorActionPreference();
    [CompilerGeneratedAttribute]
public ActionPreference get_WarningActionPreference();
    [CompilerGeneratedAttribute]
public ActionPreference get_VerboseActionPreference();
    [CompilerGeneratedAttribute]
public ActionPreference get_DebugActionPreference();
    [CompilerGeneratedAttribute]
public string get_NamespaceOverride();
    public bool get_IsRunningInBackground();
    public bool get_ShowComputerName();
    public CimSession GetDefaultCimSession();
}
internal class Microsoft.PowerShell.Cmdletization.Cim.CimCustomOptionsDictionary : object {
}
internal class Microsoft.PowerShell.Cmdletization.Cim.CimJobContext : object {
    public CimCmdletInvocationContext CmdletInvocationContext { get; }
    public CimSession Session { get; }
    public object TargetObject { get; }
    public string ClassName { get; }
    public string ClassNameOrNullIfResourceUriIsUsed { get; }
    public string Namespace { get; }
    public InvocationInfo CmdletInvocationInfo { get; }
    public string CmdletizationClassName { get; }
    public Version CmdletizationModuleVersion { get; }
    public ActionPreference ErrorActionPreference { get; }
    public ActionPreference WarningActionPreference { get; }
    public ActionPreference VerboseActionPreference { get; }
    public ActionPreference DebugActionPreference { get; }
    public bool IsRunningInBackground { get; }
    public ShouldProcessPossibleOptimization ShouldProcessOptimization { get; }
    public bool ShowComputerName { get; }
    public bool SupportsShouldProcess { get; }
    [CompilerGeneratedAttribute]
public CimCmdletInvocationContext get_CmdletInvocationContext();
    [CompilerGeneratedAttribute]
public CimSession get_Session();
    [CompilerGeneratedAttribute]
public object get_TargetObject();
    public string get_ClassName();
    public string get_ClassNameOrNullIfResourceUriIsUsed();
    public string get_Namespace();
    public InvocationInfo get_CmdletInvocationInfo();
    public string get_CmdletizationClassName();
    public Version get_CmdletizationModuleVersion();
    public ActionPreference get_ErrorActionPreference();
    public ActionPreference get_WarningActionPreference();
    public ActionPreference get_VerboseActionPreference();
    public ActionPreference get_DebugActionPreference();
    public bool get_IsRunningInBackground();
    public ShouldProcessPossibleOptimization get_ShouldProcessOptimization();
    public bool get_ShowComputerName();
    public bool get_SupportsShouldProcess();
}
public class Microsoft.PowerShell.Cmdletization.Cim.CimJobException : SystemException {
    public ErrorRecord ErrorRecord { get; }
    public CimJobException(string message);
    public CimJobException(string message, Exception inner);
    [ObsoleteAttribute("Legacy serialization support is deprecated since .NET 8")]
protected CimJobException(SerializationInfo info, StreamingContext context);
    public sealed virtual ErrorRecord get_ErrorRecord();
}
internal static class Microsoft.PowerShell.Cmdletization.Cim.CimOperationOptionsHelper : object {
}
internal class Microsoft.PowerShell.Cmdletization.Cim.CimQuery : QueryBuilder {
    public virtual void FilterByProperty(string propertyName, IEnumerable allowedPropertyValues, bool wildcardsEnabled, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void ExcludeByProperty(string propertyName, IEnumerable excludedPropertyValues, bool wildcardsEnabled, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void FilterByMinPropertyValue(string propertyName, object minPropertyValue, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void FilterByMaxPropertyValue(string propertyName, object maxPropertyValue, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void FilterByAssociatedInstance(object associatedInstance, string associationName, string sourceRole, string resultRole, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void AddQueryOption(string optionName, object optionValue);
    private sealed virtual override CimSession Microsoft.PowerShell.Cmdletization.ISessionBoundQueryBuilder<Microsoft.Management.Infrastructure.CimSession>.GetTargetSession();
    public virtual string ToString();
}
internal class Microsoft.PowerShell.Cmdletization.Cim.ClientSideQuery : QueryBuilder {
    public virtual void FilterByProperty(string propertyName, IEnumerable allowedPropertyValues, bool wildcardsEnabled, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void ExcludeByProperty(string propertyName, IEnumerable excludedPropertyValues, bool wildcardsEnabled, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void FilterByMinPropertyValue(string propertyName, object minPropertyValue, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void FilterByMaxPropertyValue(string propertyName, object maxPropertyValue, BehaviorOnNoMatch behaviorOnNoMatch);
    public virtual void FilterByAssociatedInstance(object associatedInstance, string associationName, string sourceRole, string resultRole, BehaviorOnNoMatch behaviorOnNoMatch);
}
internal class Microsoft.PowerShell.Cmdletization.Cim.CreateInstanceJob : PropertySettingJob`1<CimInstance> {
    internal object PassThruObject { get; }
    internal virtual IObservable`1<CimInstance> GetCimOperation();
    public virtual void OnNext(CimInstance item);
    public virtual void OnError(Exception exception);
    public virtual void OnCompleted();
    internal virtual object get_PassThruObject();
}
internal class Microsoft.PowerShell.Cmdletization.Cim.DeleteInstanceJob : MethodInvocationJobBase`1<object> {
    internal object PassThruObject { get; }
    internal virtual IObservable`1<object> GetCimOperation();
    public virtual void OnNext(object item);
    internal virtual object get_PassThruObject();
    internal virtual CimCustomOptionsDictionary CalculateJobSpecificCustomOptions();
}
internal class Microsoft.PowerShell.Cmdletization.Cim.EnumerateAssociatedInstancesJob : QueryJobBase {
    internal string Description { get; }
    internal string FailSafeDescription { get; }
    internal virtual IObservable`1<CimInstance> GetCimOperation();
    internal virtual string get_Description();
    internal virtual string get_FailSafeDescription();
    internal virtual CimCustomOptionsDictionary CalculateJobSpecificCustomOptions();
    internal virtual void WriteObject(object outputObject);
    internal virtual string GetProviderVersionExpectedByJob();
}
internal abstract class Microsoft.PowerShell.Cmdletization.Cim.ExtrinsicMethodInvocationJob : MethodInvocationJobBase`1<CimMethodResultBase> {
    public virtual void OnNext(CimMethodResultBase item);
}
internal class Microsoft.PowerShell.Cmdletization.Cim.InstanceMethodInvocationJob : ExtrinsicMethodInvocationJob {
    internal object PassThruObject { get; }
    internal virtual IObservable`1<CimMethodResultBase> GetCimOperation();
    internal virtual object get_PassThruObject();
    internal virtual CimCustomOptionsDictionary CalculateJobSpecificCustomOptions();
}
internal abstract class Microsoft.PowerShell.Cmdletization.Cim.MethodInvocationJobBase`1 : CimChildJobBase`1<T> {
    internal object PassThruObject { get; }
    internal string Description { get; }
    internal string FailSafeDescription { get; }
    internal virtual CimCustomOptionsDictionary CalculateJobSpecificCustomOptions();
    internal abstract virtual object get_PassThruObject();
    public virtual void OnCompleted();
    internal virtual string get_Description();
    internal virtual string get_FailSafeDescription();
}
internal class Microsoft.PowerShell.Cmdletization.Cim.ModifyInstanceJob : PropertySettingJob`1<CimInstance> {
    internal object PassThruObject { get; }
    internal virtual IObservable`1<CimInstance> GetCimOperation();
    public virtual void OnNext(CimInstance item);
    public virtual void OnCompleted();
    internal virtual object get_PassThruObject();
    internal virtual CimCustomOptionsDictionary CalculateJobSpecificCustomOptions();
    protected virtual void Dispose(bool disposing);
}
internal abstract class Microsoft.PowerShell.Cmdletization.Cim.PropertySettingJob`1 : MethodInvocationJobBase`1<T> {
}
internal class Microsoft.PowerShell.Cmdletization.Cim.QueryInstancesJob : QueryJobBase {
    internal string Description { get; }
    internal string FailSafeDescription { get; }
    internal virtual IObservable`1<CimInstance> GetCimOperation();
    internal virtual string get_Description();
    internal virtual string get_FailSafeDescription();
}
internal abstract class Microsoft.PowerShell.Cmdletization.Cim.QueryJobBase : CimChildJobBase`1<CimInstance> {
    public virtual void OnNext(CimInstance item);
    public virtual void OnCompleted();
    internal virtual CimCustomOptionsDictionary CalculateJobSpecificCustomOptions();
}
internal class Microsoft.PowerShell.Cmdletization.Cim.StaticMethodInvocationJob : ExtrinsicMethodInvocationJob {
    internal object PassThruObject { get; }
    internal virtual IObservable`1<CimMethodResultBase> GetCimOperation();
    internal virtual object get_PassThruObject();
    internal virtual CimCustomOptionsDictionary CalculateJobSpecificCustomOptions();
}
internal class Microsoft.PowerShell.Cmdletization.Cim.TerminatingErrorTracker : object {
}
internal interface Microsoft.PowerShell.Cmdletization.ISessionBoundQueryBuilder`1 {
    public abstract virtual TSession GetTargetSession();
}
public abstract class Microsoft.PowerShell.Cmdletization.SessionBasedCmdletAdapter`2 : CmdletAdapter`1<TObjectInstance> {
    protected TSession[] Session { get; protected set; }
    [ParameterAttribute]
public SwitchParameter AsJob { get; public set; }
    [ParameterAttribute]
public int ThrottleLimit { get; public set; }
    protected TSession DefaultSession { get; }
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected TSession[] get_Session();
    protected void set_Session(TSession[] value);
    public SwitchParameter get_AsJob();
    public void set_AsJob(SwitchParameter value);
    [CompilerGeneratedAttribute]
public virtual int get_ThrottleLimit();
    [CompilerGeneratedAttribute]
public virtual void set_ThrottleLimit(int value);
    internal abstract virtual StartableJob CreateQueryJob(TSession session, QueryBuilder query);
    internal abstract virtual StartableJob CreateInstanceMethodInvocationJob(TSession session, TObjectInstance objectInstance, MethodInvocationInfo methodInvocationInfo, bool passThru);
    internal abstract virtual StartableJob CreateStaticMethodInvocationJob(TSession session, MethodInvocationInfo methodInvocationInfo);
    internal virtual TSession GetSessionOfOriginFromInstance(TObjectInstance instance);
    protected abstract virtual TSession get_DefaultSession();
    protected abstract virtual string GenerateParentJobName();
    public virtual void ProcessRecord(QueryBuilder query);
    public virtual void ProcessRecord(QueryBuilder query, MethodInvocationInfo methodInvocationInfo, bool passThru);
    public virtual void ProcessRecord(TObjectInstance objectInstance, MethodInvocationInfo methodInvocationInfo, bool passThru);
    public virtual void ProcessRecord(MethodInvocationInfo methodInvocationInfo);
    public virtual void BeginProcessing();
    public virtual void EndProcessing();
    public virtual void StopProcessing();
}
[CmdletAttribute("Add", "Content")]
public class Microsoft.PowerShell.Commands.AddContentCommand : WriteContentCommandBase {
    internal virtual void SeekContentPosition(List`1<ContentHolder> contentHolders);
    internal virtual bool CallShouldProcess(string path);
}
internal static class Microsoft.PowerShell.Commands.CIMHelper : object {
}
[CmdletAttribute("Clear", "Content")]
public class Microsoft.PowerShell.Commands.ClearContentCommand : ContentCommandBase {
    protected bool ProviderSupportsShouldProcess { get; }
    protected virtual void ProcessRecord();
    protected virtual bool get_ProviderSupportsShouldProcess();
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
}
[CmdletAttribute("Clear", "Item")]
public class Microsoft.PowerShell.Commands.ClearItemCommand : CoreCommandWithCredentialsBase {
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Clear", "ItemProperty")]
public class Microsoft.PowerShell.Commands.ClearItemPropertyCommand : PassThroughItemPropertyCommandBase {
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public string Name { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public string get_Name();
    public void set_Name(string value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.CommandLineCmdletBase : PSCmdlet {
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual void StopProcessing();
    [NullableContextAttribute("1")]
protected void RunShutdown(string args);
}
public class Microsoft.PowerShell.Commands.ContentCommandBase : CoreCommandWithCredentialsBase {
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    internal virtual bool CallShouldProcess(string path);
    public sealed virtual void Dispose();
}
[CmdletAttribute]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.ConvertPathCommand : CoreCommandBase {
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Copy", "Item")]
public class Microsoft.PowerShell.Commands.CopyItemCommand : CoreCommandWithCredentialsBase {
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public string Destination { get; public set; }
    [ParameterAttribute]
public SwitchParameter Container { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
public SwitchParameter Recurse { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public string get_Destination();
    [CompilerGeneratedAttribute]
public void set_Destination(string value);
    public SwitchParameter get_Container();
    public void set_Container(SwitchParameter value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    public SwitchParameter get_Recurse();
    public void set_Recurse(SwitchParameter value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Copy", "ItemProperty")]
public class Microsoft.PowerShell.Commands.CopyItemPropertyCommand : PassThroughItemPropertyCommandBase {
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Name { get; public set; }
    [ParameterAttribute]
public string Destination { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Destination();
    [CompilerGeneratedAttribute]
public void set_Destination(string value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
public abstract class Microsoft.PowerShell.Commands.CoreCommandBase : PSCmdlet {
    internal CmdletProviderContext CmdletProviderContext { get; }
    internal SwitchParameter SuppressWildcardExpansion { get; internal set; }
    protected bool ProviderSupportsShouldProcess { get; }
    protected internal object RetrievedDynamicParameters { get; }
    public string Filter { get; public set; }
    public String[] Include { get; public set; }
    public String[] Exclude { get; public set; }
    public SwitchParameter Force { get; public set; }
    public bool SupportsShouldProcess { get; }
    internal virtual CmdletProviderContext get_CmdletProviderContext();
    internal virtual SwitchParameter get_SuppressWildcardExpansion();
    internal virtual void set_SuppressWildcardExpansion(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected bool DoesProviderSupportShouldProcess(String[] paths);
    protected internal object get_RetrievedDynamicParameters();
    protected virtual void StopProcessing();
    [CompilerGeneratedAttribute]
public virtual string get_Filter();
    [CompilerGeneratedAttribute]
public virtual void set_Filter(string value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Include();
    [CompilerGeneratedAttribute]
public virtual void set_Include(String[] value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Exclude();
    [CompilerGeneratedAttribute]
public virtual void set_Exclude(String[] value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    public sealed virtual object GetDynamicParameters();
    public bool get_SupportsShouldProcess();
}
public class Microsoft.PowerShell.Commands.CoreCommandWithCredentialsBase : CoreCommandBase {
    [ParameterAttribute]
[CredentialAttribute]
public PSCredential Credential { get; public set; }
    internal CmdletProviderContext CmdletProviderContext { get; }
    [CompilerGeneratedAttribute]
public PSCredential get_Credential();
    [CompilerGeneratedAttribute]
public void set_Credential(PSCredential value);
    internal virtual CmdletProviderContext get_CmdletProviderContext();
}
[CmdletAttribute("Debug", "Process")]
public class Microsoft.PowerShell.Commands.DebugProcessCommand : ProcessBaseCommand {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Int32[] Id { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Name { get; public set; }
    public Int32[] get_Id();
    public void set_Id(Int32[] value);
    public String[] get_Name();
    public void set_Name(String[] value);
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.DriveMatchingCoreCommandBase : CoreCommandBase {
}
[CmdletAttribute("Get", "ChildItem")]
public class Microsoft.PowerShell.Commands.GetChildItemCommand : CoreCommandBase {
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter Recurse { get; public set; }
    [ParameterAttribute]
public UInt32 Depth { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public SwitchParameter Name { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    public SwitchParameter get_Recurse();
    public void set_Recurse(SwitchParameter value);
    public UInt32 get_Depth();
    public void set_Depth(UInt32 value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    public SwitchParameter get_Name();
    public void set_Name(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "Clipboard")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.GetClipboardCommand : PSCmdlet {
    [ParameterAttribute]
public SwitchParameter Raw { get; public set; }
    public SwitchParameter get_Raw();
    public void set_Raw(SwitchParameter value);
    protected virtual void BeginProcessing();
}
[CmdletAttribute("Get", "Content")]
public class Microsoft.PowerShell.Commands.GetContentCommand : ContentCommandBase {
    [ParameterAttribute]
public long ReadCount { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public long TotalCount { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int Tail { get; public set; }
    [CompilerGeneratedAttribute]
public long get_ReadCount();
    [CompilerGeneratedAttribute]
public void set_ReadCount(long value);
    [CompilerGeneratedAttribute]
public long get_TotalCount();
    [CompilerGeneratedAttribute]
public void set_TotalCount(long value);
    [CompilerGeneratedAttribute]
public int get_Tail();
    [CompilerGeneratedAttribute]
public void set_Tail(int value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
[CmdletAttribute("Get", "Item")]
public class Microsoft.PowerShell.Commands.GetItemCommand : CoreCommandWithCredentialsBase {
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "ItemProperty")]
public class Microsoft.PowerShell.Commands.GetItemPropertyCommand : ItemPropertyCommandBase {
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Name { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public String[] get_Name();
    public void set_Name(String[] value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "ItemPropertyValue")]
public class Microsoft.PowerShell.Commands.GetItemPropertyValueCommand : ItemPropertyCommandBase {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Name { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public String[] get_Name();
    public void set_Name(String[] value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "Location")]
[OutputTypeAttribute("System.Management.Automation.PathInfo")]
[OutputTypeAttribute("System.Management.Automation.PathInfoStack")]
public class Microsoft.PowerShell.Commands.GetLocationCommand : DriveMatchingCoreCommandBase {
    [ParameterAttribute]
public String[] PSProvider { get; public set; }
    [ParameterAttribute]
public String[] PSDrive { get; public set; }
    [ParameterAttribute]
public SwitchParameter Stack { get; public set; }
    [ParameterAttribute]
public String[] StackName { get; public set; }
    public String[] get_PSProvider();
    public void set_PSProvider(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_PSDrive();
    [CompilerGeneratedAttribute]
public void set_PSDrive(String[] value);
    public SwitchParameter get_Stack();
    public void set_Stack(SwitchParameter value);
    public String[] get_StackName();
    public void set_StackName(String[] value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.Commands.GetProcessCommand : ProcessBaseCommand {
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Int32[] Id { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public Process[] InputObject { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter IncludeUserName { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ValidateNotNullAttribute]
public SwitchParameter Module { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullAttribute]
public SwitchParameter FileVersionInfo { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public Int32[] get_Id();
    public void set_Id(Int32[] value);
    public virtual Process[] get_InputObject();
    public virtual void set_InputObject(Process[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_IncludeUserName();
    [CompilerGeneratedAttribute]
public void set_IncludeUserName(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Module();
    [CompilerGeneratedAttribute]
public void set_Module(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_FileVersionInfo();
    [CompilerGeneratedAttribute]
public void set_FileVersionInfo(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "PSDrive")]
[OutputTypeAttribute("System.Management.Automation.PSDriveInfo")]
public class Microsoft.PowerShell.Commands.GetPSDriveCommand : DriveMatchingCoreCommandBase {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
public String[] LiteralName { get; public set; }
    [ParameterAttribute]
public string Scope { get; public set; }
    [ParameterAttribute]
public String[] PSProvider { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public String[] get_LiteralName();
    public void set_LiteralName(String[] value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    public String[] get_PSProvider();
    public void set_PSProvider(String[] value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "PSProvider")]
[OutputTypeAttribute("System.Management.Automation.ProviderInfo")]
public class Microsoft.PowerShell.Commands.GetPSProviderCommand : CoreCommandBase {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] PSProvider { get; public set; }
    public String[] get_PSProvider();
    public void set_PSProvider(String[] value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Get", "TimeZone")]
[OutputTypeAttribute("System.TimeZoneInfo")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.Commands.GetTimeZoneCommand : PSCmdlet {
    [ParameterAttribute]
public String[] Id { get; public set; }
    [ParameterAttribute]
public SwitchParameter ListAvailable { get; public set; }
    [ParameterAttribute]
public String[] Name { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_ListAvailable();
    [CompilerGeneratedAttribute]
public void set_ListAvailable(SwitchParameter value);
    [CompilerGeneratedAttribute]
public String[] get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(String[] value);
    protected virtual void ProcessRecord();
}
internal static class Microsoft.PowerShell.Commands.Internal.Clipboard : object {
    public static string GetText();
    public static void SetText(string text);
    public static void SetRtf(string plainText, string rtfText);
}
[CmdletAttribute("Invoke", "Item")]
public class Microsoft.PowerShell.Commands.InvokeItemCommand : CoreCommandWithCredentialsBase {
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.ItemPropertyCommandBase : CoreCommandWithCredentialsBase {
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
}
[CmdletAttribute("Join", "Path")]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.JoinPathCommand : CoreCommandWithCredentialsBase {
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AllowNullAttribute]
[AllowEmptyStringAttribute]
public string ChildPath { get; public set; }
    [ParameterAttribute]
[AllowNullAttribute]
[AllowEmptyStringAttribute]
[AllowEmptyCollectionAttribute]
public String[] AdditionalChildPath { get; public set; }
    [ParameterAttribute]
public SwitchParameter Resolve { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(String[] value);
    [CompilerGeneratedAttribute]
public string get_ChildPath();
    [CompilerGeneratedAttribute]
public void set_ChildPath(string value);
    [CompilerGeneratedAttribute]
public String[] get_AdditionalChildPath();
    [CompilerGeneratedAttribute]
public void set_AdditionalChildPath(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Resolve();
    [CompilerGeneratedAttribute]
public void set_Resolve(SwitchParameter value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Move", "Item")]
public class Microsoft.PowerShell.Commands.MoveItemCommand : CoreCommandWithCredentialsBase {
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public string Destination { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public string get_Destination();
    [CompilerGeneratedAttribute]
public void set_Destination(string value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Move", "ItemProperty")]
public class Microsoft.PowerShell.Commands.MoveItemPropertyCommand : PassThroughItemPropertyCommandBase {
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Name { get; public set; }
    [ParameterAttribute]
public string Destination { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public String[] get_Name();
    public void set_Name(String[] value);
    [CompilerGeneratedAttribute]
public string get_Destination();
    [CompilerGeneratedAttribute]
public void set_Destination(string value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("New", "Item")]
public class Microsoft.PowerShell.Commands.NewItemCommand : CoreCommandWithCredentialsBase {
    [ParameterAttribute]
[ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AllowNullAttribute]
[AllowEmptyStringAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ItemType { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public object Value { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    [CompilerGeneratedAttribute]
public String[] get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(String[] value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
public void set_ItemType(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("New", "ItemProperty")]
public class Microsoft.PowerShell.Commands.NewItemPropertyCommand : ItemPropertyCommandBase {
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Name { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PropertyType { get; public set; }
    [ParameterAttribute]
public object Value { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_PropertyType();
    [CompilerGeneratedAttribute]
public void set_PropertyType(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
[CmdletAttribute]
public class Microsoft.PowerShell.Commands.NewPSDriveCommand : CoreCommandWithCredentialsBase {
    [ParameterAttribute]
public string Name { get; public set; }
    [ParameterAttribute]
public string PSProvider { get; public set; }
    [ParameterAttribute]
[AllowEmptyStringAttribute]
public string Root { get; public set; }
    [ParameterAttribute]
public string Description { get; public set; }
    [ParameterAttribute]
public string Scope { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public string get_Name();
    public void set_Name(string value);
    public string get_PSProvider();
    public void set_PSProvider(string value);
    public string get_Root();
    public void set_Root(string value);
    public string get_Description();
    public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected virtual void ProcessRecord();
}
public class Microsoft.PowerShell.Commands.PassThroughContentCommandBase : ContentCommandBase {
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    protected virtual bool get_ProviderSupportsShouldProcess();
}
public class Microsoft.PowerShell.Commands.PassThroughItemPropertyCommandBase : ItemPropertyCommandBase {
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    protected virtual bool get_ProviderSupportsShouldProcess();
}
[CmdletAttribute("Pop", "Location")]
public class Microsoft.PowerShell.Commands.PopLocationCommand : CoreCommandBase {
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
public string StackName { get; public set; }
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    public string get_StackName();
    public void set_StackName(string value);
    protected virtual void ProcessRecord();
}
public abstract class Microsoft.PowerShell.Commands.ProcessBaseCommand : Cmdlet {
    [ParameterAttribute]
public Process[] InputObject { get; public set; }
    public virtual Process[] get_InputObject();
    public virtual void set_InputObject(Process[] value);
}
public class Microsoft.PowerShell.Commands.ProcessCommandException : SystemException {
    public string ProcessName { get; public set; }
    public ProcessCommandException(string message);
    public ProcessCommandException(string message, Exception innerException);
    [ObsoleteAttribute("Legacy serialization support is deprecated since .NET 8")]
protected ProcessCommandException(SerializationInfo info, StreamingContext context);
    public string get_ProcessName();
    public void set_ProcessName(string value);
}
[CmdletAttribute("Push", "Location")]
public class Microsoft.PowerShell.Commands.PushLocationCommand : CoreCommandBase {
    [ParameterAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string LiteralPath { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
public string StackName { get; public set; }
    public string get_Path();
    public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    public string get_StackName();
    public void set_StackName(string value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Remove", "Item")]
public class Microsoft.PowerShell.Commands.RemoveItemCommand : CoreCommandWithCredentialsBase {
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
public SwitchParameter Recurse { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    public SwitchParameter get_Recurse();
    public void set_Recurse(SwitchParameter value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Remove", "ItemProperty")]
public class Microsoft.PowerShell.Commands.RemoveItemPropertyCommand : ItemPropertyCommandBase {
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Name { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public String[] get_Name();
    public void set_Name(String[] value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Remove", "PSDrive")]
public class Microsoft.PowerShell.Commands.RemovePSDriveCommand : DriveMatchingCoreCommandBase {
    [ParameterAttribute]
[AllowNullAttribute]
[AllowEmptyCollectionAttribute]
public String[] Name { get; public set; }
    [ParameterAttribute]
public String[] LiteralName { get; public set; }
    [ParameterAttribute]
public String[] PSProvider { get; public set; }
    [ParameterAttribute]
public string Scope { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public String[] get_LiteralName();
    public void set_LiteralName(String[] value);
    public String[] get_PSProvider();
    public void set_PSProvider(String[] value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Rename", "Item")]
public class Microsoft.PowerShell.Commands.RenameItemCommand : CoreCommandWithCredentialsBase {
    [ParameterAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string LiteralPath { get; public set; }
    [ParameterAttribute]
public string NewName { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public string get_Path();
    public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    [CompilerGeneratedAttribute]
public string get_NewName();
    [CompilerGeneratedAttribute]
public void set_NewName(string value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Rename", "ItemProperty")]
public class Microsoft.PowerShell.Commands.RenameItemPropertyCommand : PassThroughItemPropertyCommandBase {
    [ParameterAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string LiteralPath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Name { get; public set; }
    [ParameterAttribute]
public string NewName { get; public set; }
    public string get_Path();
    public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_NewName();
    [CompilerGeneratedAttribute]
public void set_NewName(string value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Resolve", "Path")]
public class Microsoft.PowerShell.Commands.ResolvePathCommand : CoreCommandWithCredentialsBase {
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public SwitchParameter Relative { get; public set; }
    [ParameterAttribute]
public string RelativeBasePath { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public SwitchParameter get_Relative();
    public void set_Relative(SwitchParameter value);
    public string get_RelativeBasePath();
    public void set_RelativeBasePath(string value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
[CmdletAttribute]
public class Microsoft.PowerShell.Commands.RestartComputerCommand : CommandLineCmdletBase {
    protected virtual void BeginProcessing();
}
[CmdletAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.SetClipboardCommand : PSCmdlet {
    [ParameterAttribute]
[AllowNullAttribute]
[AllowEmptyCollectionAttribute]
[AllowEmptyStringAttribute]
public String[] Value { get; public set; }
    [ParameterAttribute]
public SwitchParameter Append { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter AsOSC52 { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Append();
    [CompilerGeneratedAttribute]
public void set_Append(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_AsOSC52();
    [CompilerGeneratedAttribute]
public void set_AsOSC52(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
[CmdletAttribute("Set", "Content")]
public class Microsoft.PowerShell.Commands.SetContentCommand : WriteContentCommandBase {
    internal virtual void BeforeOpenStreams(String[] paths);
    internal virtual bool CallShouldProcess(string path);
}
[CmdletAttribute("Set", "Item")]
public class Microsoft.PowerShell.Commands.SetItemCommand : CoreCommandWithCredentialsBase {
    [ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public object Value { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    protected bool ProviderSupportsShouldProcess { get; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    public virtual SwitchParameter get_Force();
    public virtual void set_Force(SwitchParameter value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual bool get_ProviderSupportsShouldProcess();
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Set", "ItemProperty")]
public class Microsoft.PowerShell.Commands.SetItemPropertyCommand : PassThroughItemPropertyCommandBase {
    [ParameterAttribute]
[ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Name { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AllowNullAttribute]
public object Value { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public PSObject InputObject { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public PSObject get_InputObject();
    [CompilerGeneratedAttribute]
public void set_InputObject(PSObject value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Set", "Location")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.PowerShell.Commands.SetLocationCommand : CoreCommandBase {
    [ParameterAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string LiteralPath { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
public string StackName { get; public set; }
    public string get_Path();
    public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    [CompilerGeneratedAttribute]
public string get_StackName();
    [CompilerGeneratedAttribute]
public void set_StackName(string value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Split", "Path")]
[OutputTypeAttribute("System.String")]
[OutputTypeAttribute("System.Boolean")]
public class Microsoft.PowerShell.Commands.SplitPathCommand : CoreCommandWithCredentialsBase {
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public SwitchParameter Qualifier { get; public set; }
    [ParameterAttribute]
public SwitchParameter NoQualifier { get; public set; }
    [ParameterAttribute]
public SwitchParameter Parent { get; public set; }
    [ParameterAttribute]
public SwitchParameter Leaf { get; public set; }
    [ParameterAttribute]
public SwitchParameter LeafBase { get; public set; }
    [ParameterAttribute]
public SwitchParameter Extension { get; public set; }
    [ParameterAttribute]
public SwitchParameter Resolve { get; public set; }
    [ParameterAttribute]
public SwitchParameter IsAbsolute { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Qualifier();
    [CompilerGeneratedAttribute]
public void set_Qualifier(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_NoQualifier();
    [CompilerGeneratedAttribute]
public void set_NoQualifier(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Leaf();
    [CompilerGeneratedAttribute]
public void set_Leaf(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_LeafBase();
    [CompilerGeneratedAttribute]
public void set_LeafBase(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Extension();
    [CompilerGeneratedAttribute]
public void set_Extension(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Resolve();
    [CompilerGeneratedAttribute]
public void set_Resolve(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_IsAbsolute();
    [CompilerGeneratedAttribute]
public void set_IsAbsolute(SwitchParameter value);
    protected virtual void ProcessRecord();
}
[CmdletAttribute("Start", "Process")]
[OutputTypeAttribute("System.Diagnostics.Process")]
public class Microsoft.PowerShell.Commands.StartProcessCommand : PSCmdlet {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string FilePath { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] ArgumentList { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
[CredentialAttribute]
public PSCredential Credential { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string WorkingDirectory { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter LoadUserProfile { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter NoNewWindow { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public string RedirectStandardError { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public string RedirectStandardInput { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public string RedirectStandardOutput { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Verb { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public ProcessWindowStyle WindowStyle { get; public set; }
    [ParameterAttribute]
public SwitchParameter Wait { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseNewEnvironment { get; public set; }
    [ParameterAttribute]
public Hashtable Environment { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public String[] get_ArgumentList();
    [CompilerGeneratedAttribute]
public void set_ArgumentList(String[] value);
    public PSCredential get_Credential();
    public void set_Credential(PSCredential value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    public SwitchParameter get_LoadUserProfile();
    public void set_LoadUserProfile(SwitchParameter value);
    public SwitchParameter get_NoNewWindow();
    public void set_NoNewWindow(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    public string get_RedirectStandardError();
    public void set_RedirectStandardError(string value);
    public string get_RedirectStandardInput();
    public void set_RedirectStandardInput(string value);
    public string get_RedirectStandardOutput();
    public void set_RedirectStandardOutput(string value);
    [CompilerGeneratedAttribute]
public string get_Verb();
    [CompilerGeneratedAttribute]
public void set_Verb(string value);
    public ProcessWindowStyle get_WindowStyle();
    public void set_WindowStyle(ProcessWindowStyle value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Wait();
    [CompilerGeneratedAttribute]
public void set_Wait(SwitchParameter value);
    public SwitchParameter get_UseNewEnvironment();
    public void set_UseNewEnvironment(SwitchParameter value);
    public Hashtable get_Environment();
    public void set_Environment(Hashtable value);
    protected virtual void BeginProcessing();
    protected virtual void StopProcessing();
    public sealed virtual void Dispose();
}
[CmdletAttribute]
public class Microsoft.PowerShell.Commands.StopComputerCommand : CommandLineCmdletBase {
    protected virtual void BeginProcessing();
}
[CmdletAttribute("Stop", "Process")]
[OutputTypeAttribute("System.Diagnostics.Process")]
public class Microsoft.PowerShell.Commands.StopProcessCommand : ProcessBaseCommand {
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Name { get; public set; }
    [ParameterAttribute]
public Int32[] Id { get; public set; }
    [ParameterAttribute]
public Process[] InputObject { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public SwitchParameter Force { get; public set; }
    public String[] get_Name();
    public void set_Name(String[] value);
    public Int32[] get_Id();
    public void set_Id(Int32[] value);
    public Process[] get_InputObject();
    public void set_InputObject(Process[] value);
    public SwitchParameter get_PassThru();
    public void set_PassThru(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(SwitchParameter value);
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CmdletAttribute("Test", "Connection")]
[OutputTypeAttribute("Microsoft.PowerShell.Commands.TestConnectionCommand/PingStatus")]
[OutputTypeAttribute("Microsoft.PowerShell.Commands.TestConnectionCommand/PingStatus")]
[OutputTypeAttribute("System.Boolean")]
[OutputTypeAttribute("Microsoft.PowerShell.Commands.TestConnectionCommand/PingMtuStatus")]
[OutputTypeAttribute("System.Int32")]
[OutputTypeAttribute("Microsoft.PowerShell.Commands.TestConnectionCommand/TraceStatus")]
[OutputTypeAttribute("Microsoft.PowerShell.Commands.TestConnectionCommand/TcpPortStatus")]
public class Microsoft.PowerShell.Commands.TestConnectionCommand : PSCmdlet {
    [ParameterAttribute]
public SwitchParameter Detailed;
    [ParameterAttribute]
[ParameterAttribute]
public SwitchParameter Ping { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter IPv4 { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter IPv6 { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter ResolveDestination { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public string Source { get; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int MaxHops { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ValidateRangeAttribute]
public int Count { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ValidateRangeAttribute]
public int Delay { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int BufferSize { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public SwitchParameter DontFragment { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter Repeat { get; public set; }
    [ParameterAttribute]
public SwitchParameter Quiet { get; public set; }
    [ParameterAttribute]
[ValidateRangeAttribute]
public int TimeoutSeconds { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] TargetName { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter MtuSize { get; public set; }
    [ParameterAttribute]
public SwitchParameter Traceroute { get; public set; }
    [ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
[ParameterAttribute]
public int TcpPort { get; public set; }
    [CompilerGeneratedAttribute]
public SwitchParameter get_Ping();
    [CompilerGeneratedAttribute]
public void set_Ping(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_IPv4();
    [CompilerGeneratedAttribute]
public void set_IPv4(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_IPv6();
    [CompilerGeneratedAttribute]
public void set_IPv6(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_ResolveDestination();
    [CompilerGeneratedAttribute]
public void set_ResolveDestination(SwitchParameter value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public int get_MaxHops();
    [CompilerGeneratedAttribute]
public void set_MaxHops(int value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public int get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(int value);
    [CompilerGeneratedAttribute]
public int get_BufferSize();
    [CompilerGeneratedAttribute]
public void set_BufferSize(int value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_DontFragment();
    [CompilerGeneratedAttribute]
public void set_DontFragment(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Repeat();
    [CompilerGeneratedAttribute]
public void set_Repeat(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(SwitchParameter value);
    [CompilerGeneratedAttribute]
public int get_TimeoutSeconds();
    [CompilerGeneratedAttribute]
public void set_TimeoutSeconds(int value);
    [CompilerGeneratedAttribute]
public String[] get_TargetName();
    [CompilerGeneratedAttribute]
public void set_TargetName(String[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_MtuSize();
    [CompilerGeneratedAttribute]
public void set_MtuSize(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Traceroute();
    [CompilerGeneratedAttribute]
public void set_Traceroute(SwitchParameter value);
    [CompilerGeneratedAttribute]
public int get_TcpPort();
    [CompilerGeneratedAttribute]
public void set_TcpPort(int value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void StopProcessing();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
[CmdletAttribute("Test", "Path")]
[OutputTypeAttribute("System.Boolean")]
public class Microsoft.PowerShell.Commands.TestPathCommand : CoreCommandWithCredentialsBase {
    [ParameterAttribute]
[AllowNullAttribute]
[AllowEmptyCollectionAttribute]
[AllowEmptyStringAttribute]
public String[] Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[AllowNullAttribute]
[AllowEmptyCollectionAttribute]
[AllowEmptyStringAttribute]
public String[] LiteralPath { get; public set; }
    [ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
public String[] Include { get; public set; }
    [ParameterAttribute]
public String[] Exclude { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public TestPathType PathType { get; public set; }
    [ParameterAttribute]
public SwitchParameter IsValid { get; public set; }
    public String[] get_Path();
    public void set_Path(String[] value);
    public String[] get_LiteralPath();
    public void set_LiteralPath(String[] value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual String[] get_Include();
    public virtual void set_Include(String[] value);
    public virtual String[] get_Exclude();
    public virtual void set_Exclude(String[] value);
    [CompilerGeneratedAttribute]
public TestPathType get_PathType();
    [CompilerGeneratedAttribute]
public void set_PathType(TestPathType value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_IsValid();
    [CompilerGeneratedAttribute]
public void set_IsValid(SwitchParameter value);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
    protected virtual void ProcessRecord();
}
public enum Microsoft.PowerShell.Commands.TestPathType : Enum {
    public int value__;
    public static TestPathType Any;
    public static TestPathType Container;
    public static TestPathType Leaf;
}
internal static class Microsoft.PowerShell.Commands.TimeZoneHelper : object {
}
[CmdletAttribute("Wait", "Process")]
[OutputTypeAttribute("System.Diagnostics.Process")]
public class Microsoft.PowerShell.Commands.WaitProcessCommand : ProcessBaseCommand {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Int32[] Id { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Name { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
[ValidateRangeAttribute("Mono.Cecil.CustomAttributeArgument", "Mono.Cecil.CustomAttributeArgument")]
public int Timeout { get; public set; }
    [ParameterAttribute]
public SwitchParameter Any { get; public set; }
    [ParameterAttribute]
public SwitchParameter PassThru { get; public set; }
    public Int32[] get_Id();
    public void set_Id(Int32[] value);
    public String[] get_Name();
    public void set_Name(String[] value);
    public int get_Timeout();
    public void set_Timeout(int value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_Any();
    [CompilerGeneratedAttribute]
public void set_Any(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    public void Dispose();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    protected virtual void StopProcessing();
}
public class Microsoft.PowerShell.Commands.WriteContentCommandBase : PassThroughContentCommandBase {
    [ParameterAttribute]
[AllowNullAttribute]
[AllowEmptyCollectionAttribute]
public Object[] Value { get; public set; }
    public Object[] get_Value();
    public void set_Value(Object[] value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    internal virtual void SeekContentPosition(List`1<ContentHolder> contentHolders);
    internal virtual void BeforeOpenStreams(String[] paths);
    internal virtual object GetDynamicParameters(CmdletProviderContext context);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class NavigationResources : object {
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ProcessCommandHelpResources : object {
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ProcessResources : object {
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ServiceResources : object {
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class TestConnectionResources : object {
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class TestPathResources : object {
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class TimeZoneResources : object {
}
