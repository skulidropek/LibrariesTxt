[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class CommandLineParameterParserStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CommandAlreadySpecified { get; }
    internal static string MissingCommandParameter { get; }
    internal static string UnknownParameter { get; }
    internal static string TooManyParametersToCommand { get; }
    internal static string StdinNotRedirected { get; }
    internal static string MissingOutputFormatParameter { get; }
    internal static string MissingInputFormatParameter { get; }
    internal static string BadFormatParameterValue { get; }
    internal static string ArgsAlreadySpecified { get; }
    internal static string MissingArgsValue { get; }
    internal static string MissingFileArgument { get; }
    internal static string MissingWindowStyleArgument { get; }
    internal static string InvalidFileArgument { get; }
    internal static string InvalidWindowStyleArgument { get; }
    internal static string InvalidFileArgumentExtension { get; }
    internal static string ArgumentFileDoesNotExist { get; }
    internal static string BadArgsValue { get; }
    internal static string BadCommandValue { get; }
    internal static string MissingExecutionPolicyParameter { get; }
    internal static string MtaStaMutuallyExclusive { get; }
    internal static string MissingConfigurationNameArgument { get; }
    internal static string MissingConfigurationFileArgument { get; }
    internal static string MissingCustomPipeNameArgument { get; }
    internal static string CustomPipeNameTooLong { get; }
    internal static string MissingSettingsFileArgument { get; }
    internal static string InvalidSettingsFileArgument { get; }
    internal static string SettingsFileNotExists { get; }
    internal static string InvalidArgument { get; }
    internal static string WindowStyleArgumentNotImplemented { get; }
    internal static string MissingWorkingDirectoryArgument { get; }
    internal static string MTANotImplemented { get; }
    internal static string STANotImplemented { get; }
    internal static string NullElementInArgs { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CommandAlreadySpecified();
    internal static string get_MissingCommandParameter();
    internal static string get_UnknownParameter();
    internal static string get_TooManyParametersToCommand();
    internal static string get_StdinNotRedirected();
    internal static string get_MissingOutputFormatParameter();
    internal static string get_MissingInputFormatParameter();
    internal static string get_BadFormatParameterValue();
    internal static string get_ArgsAlreadySpecified();
    internal static string get_MissingArgsValue();
    internal static string get_MissingFileArgument();
    internal static string get_MissingWindowStyleArgument();
    internal static string get_InvalidFileArgument();
    internal static string get_InvalidWindowStyleArgument();
    internal static string get_InvalidFileArgumentExtension();
    internal static string get_ArgumentFileDoesNotExist();
    internal static string get_BadArgsValue();
    internal static string get_BadCommandValue();
    internal static string get_MissingExecutionPolicyParameter();
    internal static string get_MtaStaMutuallyExclusive();
    internal static string get_MissingConfigurationNameArgument();
    internal static string get_MissingConfigurationFileArgument();
    internal static string get_MissingCustomPipeNameArgument();
    internal static string get_CustomPipeNameTooLong();
    internal static string get_MissingSettingsFileArgument();
    internal static string get_InvalidSettingsFileArgument();
    internal static string get_SettingsFileNotExists();
    internal static string get_InvalidArgument();
    internal static string get_WindowStyleArgumentNotImplemented();
    internal static string get_MissingWorkingDirectoryArgument();
    internal static string get_MTANotImplemented();
    internal static string get_STANotImplemented();
    internal static string get_NullElementInArgs();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ConsoleControlStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AddBreakHandlerExceptionMessage { get; }
    internal static string RemoveBreakHandlerExceptionTemplate { get; }
    internal static string GetInputModeExceptionTemplate { get; }
    internal static string GetActiveScreenBufferHandleExceptionTemplate { get; }
    internal static string GetModeExceptionTemplate { get; }
    internal static string SetModeExceptionTemplate { get; }
    internal static string ReadConsoleExceptionTemplate { get; }
    internal static string ReadConsoleInputExceptionTemplate { get; }
    internal static string PeekConsoleInputExceptionTemplate { get; }
    internal static string GetNumberOfConsoleInputEventsExceptionTemplate { get; }
    internal static string FlushConsoleInputBufferExceptionTemplate { get; }
    internal static string GetConsoleScreenBufferInfoExceptionTemplate { get; }
    internal static string SetConsoleScreenBufferSizeExceptionTemplate { get; }
    internal static string WriteConsoleOutputExceptionTemplate { get; }
    internal static string ReadConsoleOutputExceptionTemplate { get; }
    internal static string FillConsoleOutputCharacterExceptionTemplate { get; }
    internal static string FillConsoleOutputAttributeExceptionTemplate { get; }
    internal static string ScrollConsoleScreenBufferExceptionTemplate { get; }
    internal static string SetConsoleWindowInfoExceptionTemplate { get; }
    internal static string GetLargestConsoleWindowSizeExceptionTemplate { get; }
    internal static string SetConsoleWindowTitleExceptionTemplate { get; }
    internal static string WriteConsoleExceptionTemplate { get; }
    internal static string SetConsoleTextAttributeExceptionTemplate { get; }
    internal static string GetConsoleCursorInfoExceptionTemplate { get; }
    internal static string SetConsoleCursorInfoExceptionTemplate { get; }
    internal static string GetConsoleFontInfoExceptionTemplate { get; }
    internal static string SendKeyPressInputExceptionTemplate { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AddBreakHandlerExceptionMessage();
    internal static string get_RemoveBreakHandlerExceptionTemplate();
    internal static string get_GetInputModeExceptionTemplate();
    internal static string get_GetActiveScreenBufferHandleExceptionTemplate();
    internal static string get_GetModeExceptionTemplate();
    internal static string get_SetModeExceptionTemplate();
    internal static string get_ReadConsoleExceptionTemplate();
    internal static string get_ReadConsoleInputExceptionTemplate();
    internal static string get_PeekConsoleInputExceptionTemplate();
    internal static string get_GetNumberOfConsoleInputEventsExceptionTemplate();
    internal static string get_FlushConsoleInputBufferExceptionTemplate();
    internal static string get_GetConsoleScreenBufferInfoExceptionTemplate();
    internal static string get_SetConsoleScreenBufferSizeExceptionTemplate();
    internal static string get_WriteConsoleOutputExceptionTemplate();
    internal static string get_ReadConsoleOutputExceptionTemplate();
    internal static string get_FillConsoleOutputCharacterExceptionTemplate();
    internal static string get_FillConsoleOutputAttributeExceptionTemplate();
    internal static string get_ScrollConsoleScreenBufferExceptionTemplate();
    internal static string get_SetConsoleWindowInfoExceptionTemplate();
    internal static string get_GetLargestConsoleWindowSizeExceptionTemplate();
    internal static string get_SetConsoleWindowTitleExceptionTemplate();
    internal static string get_WriteConsoleExceptionTemplate();
    internal static string get_SetConsoleTextAttributeExceptionTemplate();
    internal static string get_GetConsoleCursorInfoExceptionTemplate();
    internal static string get_SetConsoleCursorInfoExceptionTemplate();
    internal static string get_GetConsoleFontInfoExceptionTemplate();
    internal static string get_SendKeyPressInputExceptionTemplate();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ConsoleHostRawUserInterfaceStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CoordinateOutOfBufferErrorTemplate { get; }
    internal static string InvalidBufferSizeError { get; }
    internal static string InvalidConsoleColorError { get; }
    internal static string InvalidCursorSizeError { get; }
    internal static string InvalidReadKeyOptionsError { get; }
    internal static string InvalidRegionErrorTemplate { get; }
    internal static string InvalidXWindowPositionError { get; }
    internal static string InvalidYWindowPositionError { get; }
    internal static string WindowWidthTooSmallError { get; }
    internal static string WindowHeightTooSmallError { get; }
    internal static string WindowWidthLargerThanBufferError { get; }
    internal static string WindowHeightLargerThanBufferError { get; }
    internal static string WindowWidthTooLargeErrorTemplate { get; }
    internal static string WindowHeightTooLargeErrorTemplate { get; }
    internal static string WindowTooNarrowError { get; }
    internal static string WindowTooShortError { get; }
    internal static string WindowTitleTooShortError { get; }
    internal static string WindowTitleTooLongErrorTemplate { get; }
    internal static string WindowTitleElevatedPrefix { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CoordinateOutOfBufferErrorTemplate();
    internal static string get_InvalidBufferSizeError();
    internal static string get_InvalidConsoleColorError();
    internal static string get_InvalidCursorSizeError();
    internal static string get_InvalidReadKeyOptionsError();
    internal static string get_InvalidRegionErrorTemplate();
    internal static string get_InvalidXWindowPositionError();
    internal static string get_InvalidYWindowPositionError();
    internal static string get_WindowWidthTooSmallError();
    internal static string get_WindowHeightTooSmallError();
    internal static string get_WindowWidthLargerThanBufferError();
    internal static string get_WindowHeightLargerThanBufferError();
    internal static string get_WindowWidthTooLargeErrorTemplate();
    internal static string get_WindowHeightTooLargeErrorTemplate();
    internal static string get_WindowTooNarrowError();
    internal static string get_WindowTooShortError();
    internal static string get_WindowTitleTooShortError();
    internal static string get_WindowTitleTooLongErrorTemplate();
    internal static string get_WindowTitleElevatedPrefix();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ConsoleHostStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string TooManyNestedPromptsError { get; }
    internal static string InputExitCurrentLoopOutOfSyncError { get; }
    internal static string DefaultPrompt { get; }
    internal static string ShellCannotBeStarted { get; }
    internal static string ShellCannotBeStartedWithConfigConflict { get; }
    internal static string UnhandledExceptionShutdownMessage { get; }
    internal static string TranscriptPrologue { get; }
    internal static string TranscriptEpilogue { get; }
    internal static string InitialCommandNotExecuted { get; }
    internal static string CommandNotExecuted { get; }
    internal static string EnteringDebugger { get; }
    internal static string HitBreakpoint { get; }
    internal static string DebuggerSourceCodeFormat { get; }
    internal static string SessionDoesNotSupportDebugger { get; }
    internal static string CannotLoadPSReadline { get; }
    internal static string ConflictingServerModeParameters { get; }
    internal static string SlowProfileLoadingMessage { get; }
    internal static string RunAsAdministrator { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_TooManyNestedPromptsError();
    internal static string get_InputExitCurrentLoopOutOfSyncError();
    internal static string get_DefaultPrompt();
    internal static string get_ShellCannotBeStarted();
    internal static string get_ShellCannotBeStartedWithConfigConflict();
    internal static string get_UnhandledExceptionShutdownMessage();
    internal static string get_TranscriptPrologue();
    internal static string get_TranscriptEpilogue();
    internal static string get_InitialCommandNotExecuted();
    internal static string get_CommandNotExecuted();
    internal static string get_EnteringDebugger();
    internal static string get_HitBreakpoint();
    internal static string get_DebuggerSourceCodeFormat();
    internal static string get_SessionDoesNotSupportDebugger();
    internal static string get_CannotLoadPSReadline();
    internal static string get_ConflictingServerModeParameters();
    internal static string get_SlowProfileLoadingMessage();
    internal static string get_RunAsAdministrator();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ConsoleHostUserInterfaceSecurityResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string PromptForCredential_User { get; }
    internal static string PromptForCredential_Password { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_PromptForCredential_User();
    internal static string get_PromptForCredential_Password();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ConsoleHostUserInterfaceStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string PromptEmptyDescriptionsErrorTemplate { get; }
    internal static string PromptParseOverflowErrorTemplate { get; }
    internal static string PromptParseFormatErrorTemplate { get; }
    internal static string PromptUnrecognizedCommandErrorTemplate { get; }
    internal static string PromptNoHelpAvailableErrorTemplate { get; }
    internal static string PromptFieldPromptInputSeparatorTemplate { get; }
    internal static string RankZeroArrayErrorTemplate { get; }
    internal static string EmptyChoicesErrorTemplate { get; }
    internal static string InvalidDefaultChoiceErrorTemplate { get; }
    internal static string InvalidDefaultChoiceForMultipleSelection { get; }
    internal static string PromptForChoiceHelp { get; }
    internal static string PromptCanceledError { get; }
    internal static string InvalidChoiceHotKeyError { get; }
    internal static string PromptTypeLoadErrorTemplate { get; }
    internal static string NullOrEmptyErrorTemplate { get; }
    internal static string NullErrorTemplate { get; }
    internal static string PromptHelp { get; }
    internal static string DefaultChoicePrompt { get; }
    internal static string DefaultChoiceForMultipleChoices { get; }
    internal static string DefaultChoicesForMultipleChoices { get; }
    internal static string ChoiceMessage { get; }
    internal static string DebugFormatString { get; }
    internal static string VerboseFormatString { get; }
    internal static string WarningFormatString { get; }
    internal static string ReadFailsOnNonInteractiveFlag { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_PromptEmptyDescriptionsErrorTemplate();
    internal static string get_PromptParseOverflowErrorTemplate();
    internal static string get_PromptParseFormatErrorTemplate();
    internal static string get_PromptUnrecognizedCommandErrorTemplate();
    internal static string get_PromptNoHelpAvailableErrorTemplate();
    internal static string get_PromptFieldPromptInputSeparatorTemplate();
    internal static string get_RankZeroArrayErrorTemplate();
    internal static string get_EmptyChoicesErrorTemplate();
    internal static string get_InvalidDefaultChoiceErrorTemplate();
    internal static string get_InvalidDefaultChoiceForMultipleSelection();
    internal static string get_PromptForChoiceHelp();
    internal static string get_PromptCanceledError();
    internal static string get_InvalidChoiceHotKeyError();
    internal static string get_PromptTypeLoadErrorTemplate();
    internal static string get_NullOrEmptyErrorTemplate();
    internal static string get_NullErrorTemplate();
    internal static string get_PromptHelp();
    internal static string get_DefaultChoicePrompt();
    internal static string get_DefaultChoiceForMultipleChoices();
    internal static string get_DefaultChoicesForMultipleChoices();
    internal static string get_ChoiceMessage();
    internal static string get_DebugFormatString();
    internal static string get_VerboseFormatString();
    internal static string get_WarningFormatString();
    internal static string get_ReadFailsOnNonInteractiveFlag();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ManagedEntranceStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ShellBannerNonWindowsPowerShell { get; }
    internal static string ShellBannerCLMode { get; }
    internal static string ShellBannerCLAuditMode { get; }
    internal static string ShellBannerNLMode { get; }
    internal static string ShellBannerRLMode { get; }
    internal static string PSReadLineDisabledWhenScreenReaderIsActive { get; }
    internal static string PreviewUpdateNotificationMessage { get; }
    internal static string StableUpdateNotificationMessage { get; }
    internal static string LTSUpdateNotificationMessage { get; }
    internal static string UsageHelp { get; }
    internal static string ExtendedHelp { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ShellBannerNonWindowsPowerShell();
    internal static string get_ShellBannerCLMode();
    internal static string get_ShellBannerCLAuditMode();
    internal static string get_ShellBannerNLMode();
    internal static string get_ShellBannerRLMode();
    internal static string get_PSReadLineDisabledWhenScreenReaderIsActive();
    internal static string get_PreviewUpdateNotificationMessage();
    internal static string get_StableUpdateNotificationMessage();
    internal static string get_LTSUpdateNotificationMessage();
    internal static string get_UsageHelp();
    internal static string get_ExtendedHelp();
}
internal static class Microsoft.PowerShell.ComInterfaces : object {
    internal static void GetStartupInfo(StartUpInfo& lpStartupInfo);
    internal static HResult CoCreateInstance(Guid& clsid, object inner, UInt32 context, Guid& uuid, Object& rReturnedComObject);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.PowerShell.CommandLineParameterParser : object {
    private static int MaxPipePathLengthLinux;
    private static int MaxPipePathLengthMacOS;
    internal Nullable`1<bool> InputRedirectedTestHook;
    [NullableAttribute("1")]
private static String[] s_validParameters;
    internal ParameterBitmap ParametersUsed;
    private bool _socketServerMode;
    private bool _serverMode;
    private bool _namedPipeServerMode;
    private bool _sshServerMode;
    private bool _noProfileLoadTime;
    private bool _showVersion;
    private string _configurationFile;
    private string _configurationName;
    private string _error;
    private bool _showHelp;
    private bool _showExtendedHelp;
    private bool _showBanner;
    private bool _noInteractive;
    private bool _abortStartup;
    private bool _skipUserInit;
    private string _customPipeName;
    private Nullable`1<bool> _staMode;
    private bool _noExit;
    private bool _explicitReadCommandsFromStdin;
    private bool _noPrompt;
    private string _commandLineCommand;
    private bool _wasCommandEncoded;
    private bool _commandHasArgs;
    private UInt32 _exitCode;
    private bool _dirty;
    private DataFormat _outFormat;
    private bool _outputFormatSpecified;
    private DataFormat _inFormat;
    [NullableAttribute("1")]
private Collection`1<CommandParameter> _collectedArgs;
    private string _file;
    private string _executionPolicy;
    private string _settingsFile;
    private string _workingDirectory;
    private Nullable`1<ProcessWindowStyle> _windowStyle;
    private bool _removeWorkingDirectoryTrailingCharacter;
    internal double ParametersUsedAsDouble { get; }
    internal bool AbortStartup { get; }
    internal string SettingsFile { get; }
    internal string InitialCommand { get; }
    internal bool WasInitialCommandEncoded { get; }
    internal Nullable`1<ProcessWindowStyle> WindowStyle { get; }
    internal bool ShowBanner { get; }
    internal bool NoExit { get; }
    internal bool SkipProfiles { get; }
    internal UInt32 ExitCode { get; }
    internal bool ExplicitReadCommandsFromStdin { get; }
    internal bool NoPrompt { get; }
    [NullableAttribute("1")]
internal Collection`1<CommandParameter> Args { get; }
    internal string ConfigurationFile { get; }
    internal string ConfigurationName { get; internal set; }
    internal bool SocketServerMode { get; }
    internal bool NamedPipeServerMode { get; }
    internal bool SSHServerMode { get; }
    internal bool ServerMode { get; }
    internal string ErrorMessage { get; }
    internal bool ShowShortHelp { get; }
    internal bool ShowExtendedHelp { get; }
    internal bool NoProfileLoadTime { get; }
    internal bool ShowVersion { get; }
    internal string CustomPipeName { get; }
    internal DataFormat OutputFormat { get; }
    internal bool OutputFormatSpecified { get; }
    internal DataFormat InputFormat { get; }
    internal string File { get; }
    internal string ExecutionPolicy { get; }
    internal bool StaMode { get; }
    internal bool ThrowOnReadAndPrompt { get; }
    internal bool NonInteractive { get; }
    internal string WorkingDirectory { get; }
    internal bool RemoveWorkingDirectoryTrailingCharacter { get; }
    private static CommandLineParameterParser();
    internal static int MaxNameLength();
    internal double get_ParametersUsedAsDouble();
    [ConditionalAttribute("DEBUG")]
private void AssertArgumentsParsed();
    internal bool get_AbortStartup();
    internal string get_SettingsFile();
    internal string get_InitialCommand();
    internal bool get_WasInitialCommandEncoded();
    internal Nullable`1<ProcessWindowStyle> get_WindowStyle();
    internal bool get_ShowBanner();
    internal bool get_NoExit();
    internal bool get_SkipProfiles();
    internal UInt32 get_ExitCode();
    internal bool get_ExplicitReadCommandsFromStdin();
    internal bool get_NoPrompt();
    [NullableContextAttribute("1")]
internal Collection`1<CommandParameter> get_Args();
    internal string get_ConfigurationFile();
    internal string get_ConfigurationName();
    internal void set_ConfigurationName(string value);
    internal bool get_SocketServerMode();
    internal bool get_NamedPipeServerMode();
    internal bool get_SSHServerMode();
    internal bool get_ServerMode();
    internal string get_ErrorMessage();
    internal bool get_ShowShortHelp();
    internal bool get_ShowExtendedHelp();
    internal bool get_NoProfileLoadTime();
    internal bool get_ShowVersion();
    internal string get_CustomPipeName();
    internal DataFormat get_OutputFormat();
    internal bool get_OutputFormatSpecified();
    internal DataFormat get_InputFormat();
    internal string get_File();
    internal string get_ExecutionPolicy();
    internal bool get_StaMode();
    internal bool get_ThrowOnReadAndPrompt();
    internal bool get_NonInteractive();
    internal string get_WorkingDirectory();
    internal bool get_RemoveWorkingDirectoryTrailingCharacter();
    [NullableContextAttribute("1")]
private bool TryParseSettingFileHelper(String[] args, int settingFileArgIndex);
    [NullableContextAttribute("1")]
internal static string GetConfigurationNameFromGroupPolicy();
    [NullableContextAttribute("1")]
private ValueTuple`2<string, bool> GetSwitchKey(String[] args, Int32& argIndex, Boolean& noexitSeen);
    [NullableContextAttribute("1")]
internal static string NormalizeFilePath(string path);
    private static ParameterBitmap GetExecutionPolicy(string _executionPolicy);
    [NullableContextAttribute("1")]
private static bool MatchSwitch(string switchKey, string match, string smallestUnambiguousMatch);
    [NullableContextAttribute("1")]
private void ShowError(PSHostUserInterface hostUI);
    [NullableContextAttribute("1")]
private void ShowHelp(PSHostUserInterface hostUI, string helpText);
    [NullableContextAttribute("1")]
private void DisplayBanner(PSHostUserInterface hostUI, string bannerText);
    [NullableContextAttribute("1")]
internal void Parse(String[] args);
    [NullableContextAttribute("1")]
private void ParseHelper(String[] args);
    internal void ShowErrorHelpBanner(PSHostUserInterface hostUI, string bannerText, string helpText);
    [NullableContextAttribute("1")]
private void SetCommandLineError(string msg, bool showHelp, bool showBanner);
    [NullableContextAttribute("1")]
private void ParseFormat(String[] args, Int32& i, DataFormat& format, string resourceStr);
    [NullableContextAttribute("1")]
private void ParseExecutionPolicy(String[] args, Int32& i, String& executionPolicy, string resourceStr);
    [NullableContextAttribute("1")]
private bool ParseFile(String[] args, Int32& i, bool noexitSeen);
    [NullableContextAttribute("1")]
private void CollectPSArgs(String[] args, Int32& i);
    [NullableContextAttribute("1")]
private bool ParseCommand(String[] args, Int32& i, bool noexitSeen, bool isEncoded);
    [NullableContextAttribute("1")]
private bool CollectArgs(String[] args, Int32& i);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static object <CollectPSArgs>g__ConvertToBoolIfPossible|96_0(string arg);
}
[CmdletAttribute("Start", "Transcript")]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.StartTranscriptCommand : PSCmdlet {
    private bool _isLiteralPath;
    [CompilerGeneratedAttribute]
private string <OutputDirectory>k__BackingField;
    private bool _force;
    private bool _noclobber;
    [CompilerGeneratedAttribute]
private SwitchParameter <IncludeInvocationHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private SwitchParameter <UseMinimalHeader>k__BackingField;
    private bool _shouldAppend;
    private string _outFilename;
    private bool _isFilenameSet;
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public string LiteralPath { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string OutputDirectory { get; public set; }
    [ParameterAttribute]
public SwitchParameter Append { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter NoClobber { get; public set; }
    [ParameterAttribute]
public SwitchParameter IncludeInvocationHeader { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseMinimalHeader { get; public set; }
    public string get_Path();
    public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    [CompilerGeneratedAttribute]
public string get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(string value);
    public SwitchParameter get_Append();
    public void set_Append(SwitchParameter value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_NoClobber();
    public void set_NoClobber(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_IncludeInvocationHeader();
    [CompilerGeneratedAttribute]
public void set_IncludeInvocationHeader(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_UseMinimalHeader();
    [CompilerGeneratedAttribute]
public void set_UseMinimalHeader(SwitchParameter value);
    protected virtual void BeginProcessing();
    private string ResolveFilePath(string filePath, bool isLiteralPath);
    private void ReportWrongProviderType(string providerId);
    private void ReportMultipleFilesNotSupported();
}
[CmdletAttribute]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.StopTranscriptCommand : PSCmdlet {
    protected virtual void BeginProcessing();
}
internal static class Microsoft.PowerShell.ConsoleControl : object {
    internal static int SW_HIDE;
    internal static int SW_SHOWNORMAL;
    internal static int SW_NORMAL;
    internal static int SW_SHOWMINIMIZED;
    internal static int SW_SHOWMAXIMIZED;
    internal static int SW_MAXIMIZE;
    internal static int SW_SHOWNOACTIVATE;
    internal static int SW_SHOW;
    internal static int SW_MINIMIZE;
    internal static int SW_SHOWMINNOACTIVE;
    internal static int SW_SHOWNA;
    internal static int SW_RESTORE;
    internal static int SW_SHOWDEFAULT;
    internal static int SW_FORCEMINIMIZE;
    internal static int SW_MAX;
    private static Lazy`1<SafeFileHandle> _keyboardInputHandle;
    private static Lazy`1<SafeFileHandle> _outputHandle;
    private static bool s_dontsetConsoleWindowTitle;
    [TraceSourceAttribute("ConsoleControl", "Console control methods")]
private static PSTraceSource tracer;
    private static ConsoleControl();
    internal static IntPtr GetConsoleWindow();
    internal static bool ShowWindow(IntPtr hWnd, int nCmdShow);
    internal static void SetConsoleMode(ProcessWindowStyle style);
    internal static void AddBreakHandler(BreakHandler handlerDelegate);
    internal static void RemoveBreakHandler();
    internal static SafeFileHandle GetConioDeviceHandle();
    internal static SafeFileHandle GetActiveScreenBufferHandle();
    internal static ConsoleModes GetMode(SafeFileHandle consoleHandle);
    internal static void SetMode(SafeFileHandle consoleHandle, ConsoleModes mode);
    internal static string ReadConsole(SafeFileHandle consoleHandle, int initialContentLength, Span`1<char> editBuffer, int charactersToRead, bool endOnTab, UInt32& keyState);
    internal static int ReadConsoleInput(SafeFileHandle consoleHandle, INPUT_RECORD[]& buffer);
    internal static int PeekConsoleInput(SafeFileHandle consoleHandle, INPUT_RECORD[]& buffer);
    internal static int GetNumberOfConsoleInputEvents(SafeFileHandle consoleHandle);
    internal static void FlushConsoleInputBuffer(SafeFileHandle consoleHandle);
    internal static CONSOLE_SCREEN_BUFFER_INFO GetConsoleScreenBufferInfo(SafeFileHandle consoleHandle);
    internal static void SetConsoleScreenBufferSize(SafeFileHandle consoleHandle, Size newSize);
    internal static bool IsConsoleColor(ConsoleColor c);
    internal static void WORDToColor(ushort attribute, ConsoleColor& foreground, ConsoleColor& background);
    internal static ushort ColorToWORD(ConsoleColor foreground, ConsoleColor background);
    internal static void WriteConsoleOutput(SafeFileHandle consoleHandle, Coordinates origin, BufferCell[0...,0...] contents);
    private static void BuildEdgeTypeInfo(Rectangle contentsRegion, BufferCell[0...,0...] contents, List`1<BufferCellArrayRowTypeRange> sameEdgeAreas, Int32& firstLeftTrailingRow, Int32& firstRightLeadingRow);
    private static BufferCellArrayRowType GetEdgeType(BufferCell left, BufferCell right);
    internal static void CheckWriteEdges(SafeFileHandle consoleHandle, UInt32 codePage, Coordinates origin, BufferCell[0...,0...] contents, Rectangle contentsRegion, CONSOLE_SCREEN_BUFFER_INFO bufferInfo, int firstLeftTrailingRow, int firstRightLeadingRow);
    private static void CheckWriteConsoleOutputContents(BufferCell[0...,0...] contents, Rectangle contentsRegion);
    private static void WriteConsoleOutputCJK(SafeFileHandle consoleHandle, Coordinates origin, Rectangle contentsRegion, BufferCell[0...,0...] contents, BufferCellArrayRowType rowType);
    private static void WriteConsoleOutputPlain(SafeFileHandle consoleHandle, Coordinates origin, BufferCell[0...,0...] contents);
    internal static void ReadConsoleOutput(SafeFileHandle consoleHandle, Coordinates origin, Rectangle contentsRegion, BufferCell[0...,0...]& contents);
    private static bool ShouldCheck(int edge, BufferCell[0...,0...] contents, Rectangle contentsRegion);
    private static bool ReadConsoleOutputCJKSmall(SafeFileHandle consoleHandle, UInt32 codePage, Coordinates origin, Rectangle contentsRegion, BufferCell[0...,0...]& contents);
    internal static void ReadConsoleOutputCJK(SafeFileHandle consoleHandle, UInt32 codePage, Coordinates origin, Rectangle contentsRegion, BufferCell[0...,0...]& contents);
    private static void ReadConsoleOutputPlain(SafeFileHandle consoleHandle, Coordinates origin, Rectangle contentsRegion, BufferCell[0...,0...]& contents);
    internal static void FillConsoleOutputCharacter(SafeFileHandle consoleHandle, char character, int numberToWrite, Coordinates origin);
    internal static void FillConsoleOutputAttribute(SafeFileHandle consoleHandle, ushort attribute, int numberToWrite, Coordinates origin);
    internal static void ScrollConsoleScreenBuffer(SafeFileHandle consoleHandle, SMALL_RECT scrollRectangle, SMALL_RECT clipRectangle, COORD destOrigin, CHAR_INFO fill);
    internal static void SetConsoleWindowInfo(SafeFileHandle consoleHandle, bool absolute, SMALL_RECT windowInfo);
    internal static Size GetLargestConsoleWindowSize(SafeFileHandle consoleHandle);
    internal static string GetConsoleWindowTitle();
    internal static void SetConsoleWindowTitle(string consoleTitle);
    internal static void WriteConsole(SafeFileHandle consoleHandle, ReadOnlySpan`1<char> output, bool newLine);
    private static void WriteConsole(SafeFileHandle consoleHandle, ReadOnlySpan`1<char> buffer);
    internal static void SetConsoleTextAttribute(SafeFileHandle consoleHandle, ushort attribute);
    internal static int ControlSequenceLength(string str, Int32& offset);
    internal static int LengthInBufferCells(string str, int offset, bool checkEscapeSequences);
    internal static int LengthInBufferCells(char c);
    internal static bool IsCJKOutputCodePage(UInt32& codePage);
    internal static CONSOLE_CURSOR_INFO GetConsoleCursorInfo(SafeFileHandle consoleHandle);
    internal static CONSOLE_FONT_INFO_EX GetConsoleFontInfo(SafeFileHandle consoleHandle);
    internal static void SetConsoleCursorInfo(SafeFileHandle consoleHandle, CONSOLE_CURSOR_INFO cursorInfo);
    private static HostException CreateHostException(int win32Error, string errorId, ErrorCategory category, string resourceStr);
    internal static void MimicKeyPress(INPUT[] inputs);
}
internal class Microsoft.PowerShell.ConsoleHost : PSHost {
    internal static int ExitCodeSuccess;
    internal static int ExitCodeCtrlBreak;
    internal static int ExitCodeInitFailure;
    internal static int ExitCodeBadCommandLineParameter;
    private static UInt32 SPI_GETSCREENREADER;
    private static CommandLineParameterParser s_cpp;
    [CompilerGeneratedAttribute]
private Guid <InstanceId>k__BackingField;
    private bool _isRunspacePushed;
    private PSObject _consoleColorProxy;
    private double _profileLoadTimeInMS;
    [CompilerGeneratedAttribute]
private DataFormat <OutputFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutputFormatSpecified>k__BackingField;
    [CompilerGeneratedAttribute]
private DataFormat <InputFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNested>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler RunspacePopped;
    [CompilerGeneratedAttribute]
private EventHandler RunspacePushed;
    [CompilerGeneratedAttribute]
private bool <InDebugMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DebuggerCanStopCommand>k__BackingField;
    private Exception _lastRunspaceInitializationException;
    internal UInt32 ExitCode;
    private RunspaceRef _runspaceRef;
    private GCHandle breakHandlerGcHandle;
    private ConsoleModes _savedConsoleMode;
    private ConsoleModes _initialConsoleMode;
    private Thread _breakHandlerThread;
    private bool _isDisposed;
    internal ConsoleHostUserInterface ui;
    [CompilerGeneratedAttribute]
private Lazy`1<TextReader> <ConsoleIn>k__BackingField;
    private string _savedWindowTitle;
    private Version _ver;
    private int _exitCodeFromRunspace;
    private bool _noExit;
    private bool _setShouldExitCalled;
    private bool _isRunningPromptLoop;
    private bool _wasInitialCommandEncoded;
    private Nullable`1<bool> _screenReaderActive;
    internal object hostGlobalLock;
    private bool _shouldEndSession;
    private int _beginApplicationNotifyCount;
    private ConsoleTextWriter _consoleWriter;
    private WrappedSerializer _outputSerializer;
    private WrappedSerializer _errorSerializer;
    private bool _displayDebuggerBanner;
    private DebuggerStopEventArgs _debuggerStopEventArgs;
    private bool _inPushedConfiguredSession;
    internal Pipeline runningCmd;
    private static ConsoleHost s_theConsoleHost;
    internal static InitialSessionState DefaultInitialSessionState;
    [TraceSourceAttribute("ConsoleHost", "ConsoleHost subclass of S.M.A.PSHost")]
private static PSTraceSource s_tracer;
    [TraceSourceAttribute("ConsoleHostRunspaceInit", "Initialization code for ConsoleHost's Runspace")]
private static PSTraceSource s_runspaceInitTracer;
    private bool _isTranscribing;
    private string _transcriptFileName;
    private StreamWriter _transcriptionWriter;
    private object _transcriptionStateLock;
    internal static ConsoleHost SingletonInstance { get; }
    public string Name { get; }
    public Version Version { get; }
    public Guid InstanceId { get; }
    public PSHostUserInterface UI { get; }
    public bool IsRunspacePushed { get; }
    public Runspace Runspace { get; }
    internal LocalRunspace LocalRunspace { get; }
    public PSObject PrivateData { get; }
    public CultureInfo CurrentCulture { get; }
    public CultureInfo CurrentUICulture { get; }
    internal bool ShouldEndSession { get; internal set; }
    internal RunspaceRef RunspaceRef { get; }
    internal DataFormat OutputFormat { get; private set; }
    internal bool OutputFormatSpecified { get; private set; }
    internal DataFormat InputFormat { get; private set; }
    internal DataFormat ErrorFormat { get; }
    internal bool IsRunningAsync { get; }
    internal bool IsNested { get; private set; }
    internal WrappedSerializer OutputSerializer { get; }
    internal WrappedSerializer ErrorSerializer { get; }
    internal bool IsInteractive { get; }
    internal TextWriter ConsoleTextWriter { get; }
    private bool InDebugMode { get; private set; }
    internal bool DebuggerCanStopCommand { get; internal set; }
    internal Lazy`1<TextReader> ConsoleIn { get; }
    internal bool IsTranscribing { get; internal set; }
    private static ConsoleHost();
    private static bool SystemParametersInfo(UInt32 uiAction, UInt32 uiParam, Boolean& pvParam, UInt32 fWinIni);
    internal static int Start(string bannerText, string helpText, bool issProvidedExternally);
    internal static void ParseCommandLine(String[] args);
    private static bool MyBreakHandler(ConsoleBreakSignal signal);
    private static bool BreakIntoDebugger();
    private static void SpinUpBreakHandlerThread(bool shouldEndSession);
    private static void HandleBreak();
    private static bool StopPipeline(Pipeline cmd);
    internal static ConsoleHost CreateSingletonInstance();
    internal static ConsoleHost get_SingletonInstance();
    public virtual string get_Name();
    public virtual Version get_Version();
    [CompilerGeneratedAttribute]
public virtual Guid get_InstanceId();
    public virtual PSHostUserInterface get_UI();
    public sealed virtual void PushRunspace(Runspace newRunspace);
    private void HandleRemoteRunspaceStateChanged(object sender, RunspaceStateEventArgs eventArgs);
    public sealed virtual void PopRunspace();
    public sealed virtual bool get_IsRunspacePushed();
    public sealed virtual Runspace get_Runspace();
    internal LocalRunspace get_LocalRunspace();
    public virtual PSObject get_PrivateData();
    public virtual CultureInfo get_CurrentCulture();
    public virtual CultureInfo get_CurrentUICulture();
    public virtual void SetShouldExit(int exitCode);
    public virtual void EnterNestedPrompt();
    public virtual void ExitNestedPrompt();
    public virtual void NotifyBeginApplication();
    public virtual void NotifyEndApplication();
    private void BindBreakHandler();
    private void UnhandledExceptionHandler(object sender, UnhandledExceptionEventArgs args);
    public sealed virtual void Dispose();
    private void Dispose(bool isDisposingNotFinalizing);
    protected virtual override void Finalize();
    internal bool get_ShouldEndSession();
    internal void set_ShouldEndSession(bool value);
    internal RunspaceRef get_RunspaceRef();
    [CompilerGeneratedAttribute]
internal DataFormat get_OutputFormat();
    [CompilerGeneratedAttribute]
private void set_OutputFormat(DataFormat value);
    [CompilerGeneratedAttribute]
internal bool get_OutputFormatSpecified();
    [CompilerGeneratedAttribute]
private void set_OutputFormatSpecified(bool value);
    [CompilerGeneratedAttribute]
internal DataFormat get_InputFormat();
    [CompilerGeneratedAttribute]
private void set_InputFormat(DataFormat value);
    internal DataFormat get_ErrorFormat();
    internal bool get_IsRunningAsync();
    [CompilerGeneratedAttribute]
internal bool get_IsNested();
    [CompilerGeneratedAttribute]
private void set_IsNested(bool value);
    internal WrappedSerializer get_OutputSerializer();
    internal WrappedSerializer get_ErrorSerializer();
    internal bool get_IsInteractive();
    internal TextWriter get_ConsoleTextWriter();
    private UInt32 Run(CommandLineParameterParser cpp, bool isPrestartWarned);
    private UInt32 DoRunspaceLoop(string initialCommand, bool skipProfiles, Collection`1<CommandParameter> initialCommandArgs, bool staMode, string configurationName, string configurationFilePath);
    private Exception InitializeRunspaceHelper(string command, Executor exec, ExecutionOptions options);
    private void CreateRunspace(RunspaceCreationEventArgs runspaceCreationArgs);
    private bool IsScreenReaderActive();
    private static bool LoadPSReadline();
    private void DoCreateRunspace(RunspaceCreationEventArgs args);
    private static void OpenConsoleRunspace(Runspace runspace, bool staMode);
    private void DoRunspaceInitialization(RunspaceCreationEventArgs args);
    private void RunProfile(string profileFileName, Executor exec);
    internal static string EscapeSingleQuotes(string str);
    private void WriteErrorLine(string line);
    private void ReportException(Exception e, Executor exec);
    private void ReportExceptionFallback(Exception e, string header);
    [CompilerGeneratedAttribute]
internal void add_RunspacePopped(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_RunspacePopped(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_RunspacePushed(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_RunspacePushed(EventHandler value);
    private void OnExecutionSuspended(object sender, DebuggerStopEventArgs e);
    [CompilerGeneratedAttribute]
private bool get_InDebugMode();
    [CompilerGeneratedAttribute]
private void set_InDebugMode(bool value);
    [CompilerGeneratedAttribute]
internal bool get_DebuggerCanStopCommand();
    [CompilerGeneratedAttribute]
internal void set_DebuggerCanStopCommand(bool value);
    private void EnterDebugMode();
    private void ExitDebugMode(DebuggerResumeAction resumeAction);
    private void WriteDebuggerMessage(string line);
    [CompilerGeneratedAttribute]
internal Lazy`1<TextReader> get_ConsoleIn();
    internal bool get_IsTranscribing();
    internal void set_IsTranscribing(bool value);
    internal string StopTranscribing();
    internal void WriteToTranscript(ReadOnlySpan`1<char> text);
    internal void WriteLineToTranscript(ReadOnlySpan`1<char> text);
    internal void WriteToTranscript(ReadOnlySpan`1<char> text, bool newLine);
}
internal class Microsoft.PowerShell.ConsoleHostRawUserInterface : PSHostRawUserInterface {
    private ConsoleColor defaultForeground;
    private ConsoleColor defaultBackground;
    private ConsoleHostUserInterface parent;
    private KEY_EVENT_RECORD cachedKeyEvent;
    [TraceSourceAttribute("ConsoleHostRawUserInterface", "Console host's subclass of S.M.A.Host.RawConsole")]
private static PSTraceSource tracer;
    public ConsoleColor ForegroundColor { get; public set; }
    public ConsoleColor BackgroundColor { get; public set; }
    public Coordinates CursorPosition { get; public set; }
    public int CursorSize { get; public set; }
    public Coordinates WindowPosition { get; public set; }
    public Size BufferSize { get; public set; }
    public Size WindowSize { get; public set; }
    public Size MaxWindowSize { get; }
    public Size MaxPhysicalWindowSize { get; }
    public bool KeyAvailable { get; }
    public string WindowTitle { get; public set; }
    internal ConsoleHostRawUserInterface(ConsoleHostUserInterface mshConsole);
    private static ConsoleHostRawUserInterface();
    public virtual ConsoleColor get_ForegroundColor();
    public virtual void set_ForegroundColor(ConsoleColor value);
    public virtual ConsoleColor get_BackgroundColor();
    public virtual void set_BackgroundColor(ConsoleColor value);
    public virtual Coordinates get_CursorPosition();
    public virtual void set_CursorPosition(Coordinates value);
    public virtual int get_CursorSize();
    public virtual void set_CursorSize(int value);
    public virtual Coordinates get_WindowPosition();
    public virtual void set_WindowPosition(Coordinates value);
    public virtual Size get_BufferSize();
    public virtual void set_BufferSize(Size value);
    public virtual Size get_WindowSize();
    public virtual void set_WindowSize(Size value);
    public virtual Size get_MaxWindowSize();
    public virtual Size get_MaxPhysicalWindowSize();
    private static PipelineStoppedException NewPipelineStoppedException();
    private static void CacheKeyEvent(KEY_EVENT_RECORD input, KEY_EVENT_RECORD& cache);
    public virtual KeyInfo ReadKey(ReadKeyOptions options);
    private static void KEY_EVENT_RECORDToKeyInfo(KEY_EVENT_RECORD keyEventRecord, KeyInfo& keyInfo);
    public virtual void FlushInputBuffer();
    public virtual bool get_KeyAvailable();
    public virtual string get_WindowTitle();
    public virtual void set_WindowTitle(string value);
    public virtual void SetBufferContents(Coordinates origin, BufferCell[0...,0...] contents);
    public virtual void SetBufferContents(Rectangle region, BufferCell fill);
    public virtual BufferCell[0...,0...] GetBufferContents(Rectangle region);
    public virtual void ScrollBufferContents(Rectangle source, Coordinates destination, Rectangle clip, BufferCell fill);
    public virtual int LengthInBufferCells(string s);
    public virtual int LengthInBufferCells(string s, int offset);
    public virtual int LengthInBufferCells(char c);
    internal void ClearKeyCache();
    private static void CheckCoordinateWithinBuffer(Coordinates& c, CONSOLE_SCREEN_BUFFER_INFO& bufferInfo, string paramName);
    private static SafeFileHandle GetBufferInfo(CONSOLE_SCREEN_BUFFER_INFO& bufferInfo);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0();
}
internal class Microsoft.PowerShell.ConsoleHostUserInterface : PSHostUserInterface {
    private static char PrintToken;
    private PowerShell _commandCompletionPowerShell;
    private static PSHostUserInterface s_h;
    [CompilerGeneratedAttribute]
private bool <SupportsVirtualTerminal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadFromStdin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoPrompt>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <FormatAccentColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <ErrorAccentColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <ErrorForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <ErrorBackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <WarningForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <WarningBackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <DebugForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <DebugBackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <VerboseForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <VerboseBackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <ProgressForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <ProgressBackgroundColor>k__BackingField;
    internal static string Crlf;
    private static string Tab;
    private static int MaxInputLineLength;
    private static string CustomReadlineCommand;
    private object _instanceLock;
    private bool _throwOnReadAndPrompt;
    private bool _isInteractiveTestToolListening;
    private ConsoleHostRawUserInterface _rawui;
    private ConsoleHost _parent;
    [TraceSourceAttribute("ConsoleHostUserInterface", "Console host's subclass of S.M.A.Host.Console")]
private static PSTraceSource s_tracer;
    private ProgressPane _progPane;
    private PendingProgress _pendingProgress;
    private Timer _progPaneUpdateTimer;
    private static int UpdateTimerThreshold;
    private int progPaneUpdateFlag;
    private static string PromptCommandPrefix;
    public bool SupportsVirtualTerminal { get; }
    public PSHostRawUserInterface RawUI { get; }
    internal bool IsCommandCompletionRunning { get; }
    internal bool ReadFromStdin { get; internal set; }
    internal bool NoPrompt { get; internal set; }
    public ConsoleColor FormatAccentColor { get; public set; }
    public ConsoleColor ErrorAccentColor { get; public set; }
    public ConsoleColor ErrorForegroundColor { get; public set; }
    public ConsoleColor ErrorBackgroundColor { get; public set; }
    public ConsoleColor WarningForegroundColor { get; public set; }
    public ConsoleColor WarningBackgroundColor { get; public set; }
    public ConsoleColor DebugForegroundColor { get; public set; }
    public ConsoleColor DebugBackgroundColor { get; public set; }
    public ConsoleColor VerboseForegroundColor { get; public set; }
    public ConsoleColor VerboseBackgroundColor { get; public set; }
    public ConsoleColor ProgressForegroundColor { get; public set; }
    public ConsoleColor ProgressBackgroundColor { get; public set; }
    unknown bool ThrowOnReadAndPrompt {internal set; }
    private ConsoleColor PromptColor { get; }
    private ConsoleColor DefaultPromptColor { get; }
    internal ConsoleHostUserInterface(ConsoleHost parent);
    private static ConsoleHostUserInterface();
    [CompilerGeneratedAttribute]
public virtual bool get_SupportsVirtualTerminal();
    internal bool TryTurnOnVirtualTerminal();
    public virtual PSHostRawUserInterface get_RawUI();
    internal bool get_IsCommandCompletionRunning();
    [CompilerGeneratedAttribute]
internal bool get_ReadFromStdin();
    [CompilerGeneratedAttribute]
internal void set_ReadFromStdin(bool value);
    [CompilerGeneratedAttribute]
internal bool get_NoPrompt();
    [CompilerGeneratedAttribute]
internal void set_NoPrompt(bool value);
    public virtual string ReadLine();
    public virtual SecureString ReadLineAsSecureString();
    private object ReadLineSafe(bool isSecureString, Nullable`1<char> printToken);
    private void WritePrintToken(string printToken, Coordinates& originalCursorPosition);
    private void WriteBackSpace(Coordinates originalCursorPosition);
    private void BlankAtCursor(Coordinates cursorPosition);
    private static bool shouldUnsetMode(ConsoleModes flagToUnset, ConsoleModes& m);
    internal void WriteToConsole(char c, bool transcribeResult);
    internal void WriteToConsole(ReadOnlySpan`1<char> value, bool transcribeResult);
    private void WriteToConsole(ReadOnlySpan`1<char> value, bool transcribeResult, bool newLine);
    private void WriteToConsole(ConsoleColor foregroundColor, ConsoleColor backgroundColor, string text, bool newLine);
    private static void ConsoleOutWriteHelper(ReadOnlySpan`1<char> value, bool newLine);
    internal void WriteLineToConsole(ReadOnlySpan`1<char> value, bool transcribeResult);
    private void WriteLineToConsole(ConsoleColor foregroundColor, ConsoleColor backgroundColor, string text);
    private void WriteLineToConsole(string text);
    private void WriteLineToConsole();
    public virtual void Write(string value);
    private void WriteImpl(string value, bool newLine);
    public virtual void Write(ConsoleColor foregroundColor, ConsoleColor backgroundColor, string value);
    public virtual void WriteLine(ConsoleColor foregroundColor, ConsoleColor backgroundColor, string value);
    private void Write(ConsoleColor foregroundColor, ConsoleColor backgroundColor, string value, bool newLine);
    public virtual void WriteLine(string value);
    public virtual void WriteLine();
    internal List`1<string> WrapText(string text, int maxWidthInBufferCells);
    internal List`1<Word> ChopTextIntoWords(string text, int maxWidthInBufferCells);
    internal void AddWord(string text, int startIndex, int endIndex, int maxWidthInBufferCells, bool isWhitespace, List`1& result);
    internal string WrapToCurrentWindowWidth(string text);
    public virtual void WriteDebugLine(string message);
    public virtual void WriteInformation(InformationRecord record);
    public virtual void WriteVerboseLine(string message);
    public virtual void WriteWarningLine(string message);
    public virtual void WriteProgress(long sourceId, ProgressRecord record);
    public virtual void WriteErrorLine(string value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_FormatAccentColor();
    [CompilerGeneratedAttribute]
public void set_FormatAccentColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_ErrorAccentColor();
    [CompilerGeneratedAttribute]
public void set_ErrorAccentColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_ErrorForegroundColor();
    [CompilerGeneratedAttribute]
public void set_ErrorForegroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_ErrorBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_ErrorBackgroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_WarningForegroundColor();
    [CompilerGeneratedAttribute]
public void set_WarningForegroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_WarningBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_WarningBackgroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_DebugForegroundColor();
    [CompilerGeneratedAttribute]
public void set_DebugForegroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_DebugBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_DebugBackgroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_VerboseForegroundColor();
    [CompilerGeneratedAttribute]
public void set_VerboseForegroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_VerboseBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_VerboseBackgroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_ProgressForegroundColor();
    [CompilerGeneratedAttribute]
public void set_ProgressForegroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_ProgressBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_ProgressBackgroundColor(ConsoleColor value);
    internal string ReadLine(bool endOnTab, string initialContent, ReadLineResult& result, bool calledFromPipeline, bool transcribeResult);
    private string ReadLineFromFile(string initialContent);
    private string ReadLineFromConsole(bool endOnTab, string initialContent, bool calledFromPipeline, String& restOfLine, ReadLineResult& result);
    private char GetCharacterUnderCursor(Coordinates cursorPosition);
    private static string RemoveNulls(string input);
    internal string ReadLineWithTabCompletion(Executor exec);
    private static void SendLeftArrows(int length);
    private CommandCompletion GetNewCompletionResults(string input);
    private bool TryInvokeUserDefinedReadLine(String& input);
    internal void set_ThrowOnReadAndPrompt(bool value);
    internal void HandleThrowOnReadAndPrompt();
    internal void ResetProgress();
    private void HandleIncomingProgressRecord(long sourceId, ProgressRecord record);
    private void ProgressPaneUpdateTimerElapsed(object sender);
    private void PreWrite();
    private void PostWrite();
    private void PostWrite(ReadOnlySpan`1<char> value, bool newLine);
    private void PreRead();
    private void PostRead();
    private void PostRead(string value);
    private static bool AtLeastOneHelpMessageIsPresent(Collection`1<FieldDescription> descriptions);
    public virtual Dictionary`2<string, PSObject> Prompt(string caption, string message, Collection`1<FieldDescription> descriptions);
    private string PromptForSingleItem(Type fieldType, string printFieldPrompt, string fieldPrompt, string caption, string message, FieldDescription desc, bool fieldEchoOnPrompt, bool listInput, Boolean& endListInput, Boolean& cancelInput, Object& convertedObj);
    private string PromptReadInput(string fieldPrompt, FieldDescription desc, bool fieldEchoOnPrompt, bool listInput, Boolean& endListInput, Boolean& cancelled);
    private PromptCommonInputErrors PromptTryConvertTo(Type fieldType, bool isFromRemoteHost, string inputString, Object& convertedObj);
    private string PromptCommandMode(string input, FieldDescription desc, Boolean& inputDone);
    private void ReportUnrecognizedPromptCommand(string command);
    public virtual int PromptForChoice(string caption, string message, Collection`1<ChoiceDescription> choices, int defaultChoice);
    public sealed virtual Collection`1<int> PromptForChoice(string caption, string message, Collection`1<ChoiceDescription> choices, IEnumerable`1<int> defaultChoices);
    private void WriteChoicePrompt(String[0...,0...] hotkeysAndPlainLabels, Dictionary`2<int, bool> defaultChoiceKeys, bool shouldEmulateForMultipleChoiceSelection);
    private void WriteChoiceHelper(string text, ConsoleColor fg, ConsoleColor bg, Int32& lineLen, int lineLenMax);
    private string ReadChoiceResponse(ReadLineResult& result);
    private void ShowChoiceHelp(Collection`1<ChoiceDescription> choices, String[0...,0...] hotkeysAndPlainLabels);
    private ConsoleColor get_PromptColor();
    private ConsoleColor get_DefaultPromptColor();
    public virtual PSCredential PromptForCredential(string caption, string message, string userName, string targetName);
    public virtual PSCredential PromptForCredential(string caption, string message, string userName, string targetName, PSCredentialTypes allowedCredentialTypes, PSCredentialUIOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.PowerShell.ConsoleShell : object {
    [NullableContextAttribute("2")]
public static int Start(string bannerText, string helpText, String[] args);
    public static int Start(InitialSessionState initialSessionState, string bannerText, string helpText, String[] args);
    private static int StartImpl(InitialSessionState initialSessionState, string bannerText, string helpText, String[] args, bool issProvided);
}
internal class Microsoft.PowerShell.ConsoleTextWriter : TextWriter {
    private ConsoleHostUserInterface _ui;
    public Encoding Encoding { get; }
    internal ConsoleTextWriter(ConsoleHostUserInterface ui);
    public virtual Encoding get_Encoding();
    public virtual void Write(string value);
    public virtual void Write(ReadOnlySpan`1<char> value);
    public virtual void WriteLine(string value);
    public virtual void WriteLine(ReadOnlySpan`1<char> value);
    public virtual void Write(bool b);
    public virtual void Write(char c);
    public virtual void Write(Char[] a);
}
internal class Microsoft.PowerShell.Executor : object {
    private static Executor s_currentExecutor;
    private static object s_staticStateLock;
    private ConsoleHost _parent;
    private Pipeline _pipeline;
    private bool _cancelled;
    internal bool useNestedPipelines;
    private object _instanceStateLock;
    private bool _isPromptFunctionExecutor;
    internal static Executor CurrentExecutor { get; internal set; }
    internal Executor(ConsoleHost parent, bool useNestedPipelines, bool isPromptFunctionExecutor);
    private static Executor();
    private void OutputObjectStreamHandler(object sender, EventArgs e);
    private void ErrorObjectStreamHandler(object sender, EventArgs e);
    private void AsyncPipelineFailureHandler(Exception ex);
    internal void ExecuteCommandAsync(string command, Exception& exceptionThrown, ExecutionOptions options);
    internal void ExecuteCommandAsyncHelper(Pipeline tempPipeline, Exception& exceptionThrown, ExecutionOptions options);
    internal Pipeline CreatePipeline();
    internal Pipeline CreatePipeline(string command, bool addToHistory);
    internal Collection`1<PSObject> ExecuteCommand(string command, Exception& exceptionThrown, ExecutionOptions options);
    private static Command GetOutDefaultCommand(bool endOfStatement);
    internal Collection`1<PSObject> ExecuteCommandHelper(Pipeline tempPipeline, Exception& exceptionThrown, ExecutionOptions options);
    internal Collection`1<PSObject> ExecuteCommand(string command);
    internal string ExecuteCommandAndGetResultAsString(string command, Exception& exceptionThrown);
    internal Nullable`1<bool> ExecuteCommandAndGetResultAsBool(string command);
    internal Nullable`1<bool> ExecuteCommandAndGetResultAsBool(string command, Exception& exceptionThrown);
    private void Cancel();
    internal void BlockCommandOutput();
    internal void ResumeCommandOutput();
    private void Reset();
    internal static Executor get_CurrentExecutor();
    internal static void set_CurrentExecutor(Executor value);
    internal static void CancelCurrentExecutor();
}
internal enum Microsoft.PowerShell.HResult : Enum {
    public int value__;
    public static HResult Ok;
    public static HResult False;
    public static HResult InvalidArguments;
    public static HResult OutOfMemory;
    public static HResult NoInterface;
    public static HResult Fail;
    public static HResult ElementNotFound;
    public static HResult TypeElementNotFound;
    public static HResult NoObject;
    public static HResult Win32ErrorCanceled;
    public static HResult Canceled;
    public static HResult ResourceInUse;
    public static HResult AccessDenied;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.PowerShell.NullHostUserInterface : PSHostUserInterface {
    [NullableAttribute("2")]
public PSHostRawUserInterface RawUI { get; }
    [NullableContextAttribute("2")]
public virtual PSHostRawUserInterface get_RawUI();
    public virtual Dictionary`2<string, PSObject> Prompt(string caption, string message, Collection`1<FieldDescription> descriptions);
    public virtual int PromptForChoice(string caption, string message, Collection`1<ChoiceDescription> choices, int defaultChoice);
    public virtual PSCredential PromptForCredential(string caption, string message, string userName, string targetName);
    public virtual PSCredential PromptForCredential(string caption, string message, string userName, string targetName, PSCredentialTypes allowedCredentialTypes, PSCredentialUIOptions options);
    public virtual string ReadLine();
    public virtual SecureString ReadLineAsSecureString();
    public virtual void Write(string value);
    public virtual void Write(ConsoleColor foregroundColor, ConsoleColor backgroundColor, string value);
    public virtual void WriteDebugLine(string message);
    public virtual void WriteErrorLine(string value);
    public virtual void WriteLine(string value);
    public virtual void WriteProgress(long sourceId, ProgressRecord record);
    public virtual void WriteVerboseLine(string message);
    public virtual void WriteWarningLine(string message);
}
internal class Microsoft.PowerShell.PendingProgress : object {
    private ArrayList _topLevelNodes;
    private int _nodeCount;
    private static int maxNodeCount;
    internal void Update(long sourceId, ProgressRecord record);
    private void EvictNode();
    private void RemoveNode(ArrayList nodes, int indexToRemove);
    private void RemoveNodeAndPromoteChildren(ArrayList nodes, int indexToRemove);
    private void AddNode(ArrayList nodes, ProgressNode nodeToAdd);
    private ProgressNode FindOldestLeafmostNodeHelper(ArrayList treeToSearch, ArrayList& listWhereFound, Int32& indexWhereFound);
    private ProgressNode FindOldestLeafmostNode(ArrayList& listWhereFound, Int32& indexWhereFound);
    private ProgressNode FindNodeById(long sourceId, int activityId);
    private ProgressNode FindNodeById(long sourceId, int activityId, ArrayList& listWhereFound, Int32& indexWhereFound);
    private static ProgressNode FindOldestNodeOfGivenStyle(ArrayList nodes, int oldestSoFar, RenderStyle style);
    private void AgeNodesAndResetStyle();
    internal String[] Render(int maxWidth, int maxHeight, PSHostRawUserInterface rawUI);
    private static void RenderHelper(ArrayList strings, ArrayList nodes, int indentation, int maxWidth, PSHostRawUserInterface rawUI);
    private int TallyHeight(PSHostRawUserInterface rawUi, int maxHeight, int maxWidth);
    private bool CompressToFitHelper(PSHostRawUserInterface rawUi, int maxHeight, int maxWidth, Int32& nodesCompressed, RenderStyle priorStyle, RenderStyle newStyle);
    private int CompressToFit(PSHostRawUserInterface rawUi, int maxHeight, int maxWidth);
}
internal class Microsoft.PowerShell.ProgressNode : ProgressRecord {
    internal ArrayList Children;
    internal int Age;
    internal RenderStyle Style;
    internal long SourceId;
    private int LinesRequiredInCompactStyle { get; }
    internal ProgressNode(long sourceId, ProgressRecord record);
    internal void Render(ArrayList strCollection, int indentation, int maxWidth, PSHostRawUserInterface rawUI);
    private void RenderFull(ArrayList strCollection, int indentation, int maxWidth, PSHostRawUserInterface rawUI, bool isFullPlus);
    private static void RenderFullDescription(string description, string indent, int maxWidth, PSHostRawUserInterface rawUi, ArrayList strCollection, bool isFullPlus);
    private void RenderCompact(ArrayList strCollection, int indentation, int maxWidth, PSHostRawUserInterface rawUI);
    private void RenderMinimal(ArrayList strCollection, int indentation, int maxWidth, PSHostRawUserInterface rawUI);
    internal static bool IsMinimalProgressRenderingEnabled();
    private void RenderAnsi(ArrayList strCollection, int indentation, int maxWidth);
    internal int LinesRequiredMethod(PSHostRawUserInterface rawUi, int maxWidth);
    private int LinesRequiredInFullStyleMethod(PSHostRawUserInterface rawUi, int maxWidth, bool isFullPlus);
    private int get_LinesRequiredInCompactStyle();
}
internal class Microsoft.PowerShell.ProgressPane : object {
    private Coordinates _location;
    private Coordinates _savedCursor;
    private Size _bufSize;
    private BufferCell[0...,0...] _savedRegion;
    private BufferCell[0...,0...] _progressRegion;
    private String[] _content;
    private PSHostRawUserInterface _rawui;
    private ConsoleHostUserInterface _ui;
    internal bool IsShowing { get; }
    internal ProgressPane(ConsoleHostUserInterface ui);
    internal bool get_IsShowing();
    internal void Show();
    internal void Hide();
    internal void Show(PendingProgress pendingProgress);
    private void WriteContent();
}
[IsReadOnlyAttribute]
internal class Microsoft.PowerShell.PropertyKey : ValueType {
    [CompilerGeneratedAttribute]
private Guid <FormatId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PropertyId>k__BackingField;
    public Guid FormatId { get; }
    public int PropertyId { get; }
    internal PropertyKey(Guid formatId, int propertyId);
    [CompilerGeneratedAttribute]
public Guid get_FormatId();
    [CompilerGeneratedAttribute]
public int get_PropertyId();
    public sealed virtual bool Equals(PropertyKey other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(PropertyKey propKey1, PropertyKey propKey2);
    public static bool op_Inequality(PropertyKey propKey1, PropertyKey propKey2);
    public virtual string ToString();
}
internal class Microsoft.PowerShell.PropVariant : object {
    private ushort _valueType;
    private IntPtr _ptr;
    internal PropVariant(string value);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
internal class Microsoft.PowerShell.RunspaceCreationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <InitialCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipProfiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StaMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<CommandParameter> <InitialCommandArgs>k__BackingField;
    internal string InitialCommand { get; internal set; }
    internal bool SkipProfiles { get; internal set; }
    internal bool StaMode { get; internal set; }
    internal string ConfigurationName { get; internal set; }
    internal string ConfigurationFilePath { get; internal set; }
    internal Collection`1<CommandParameter> InitialCommandArgs { get; internal set; }
    internal RunspaceCreationEventArgs(string initialCommand, bool skipProfiles, bool staMode, string configurationName, string configurationFilePath, Collection`1<CommandParameter> initialCommandArgs);
    [CompilerGeneratedAttribute]
internal string get_InitialCommand();
    [CompilerGeneratedAttribute]
internal void set_InitialCommand(string value);
    [CompilerGeneratedAttribute]
internal bool get_SkipProfiles();
    [CompilerGeneratedAttribute]
internal void set_SkipProfiles(bool value);
    [CompilerGeneratedAttribute]
internal bool get_StaMode();
    [CompilerGeneratedAttribute]
internal void set_StaMode(bool value);
    [CompilerGeneratedAttribute]
internal string get_ConfigurationName();
    [CompilerGeneratedAttribute]
internal void set_ConfigurationName(string value);
    [CompilerGeneratedAttribute]
internal string get_ConfigurationFilePath();
    [CompilerGeneratedAttribute]
internal void set_ConfigurationFilePath(string value);
    [CompilerGeneratedAttribute]
internal Collection`1<CommandParameter> get_InitialCommandArgs();
    [CompilerGeneratedAttribute]
internal void set_InitialCommandArgs(Collection`1<CommandParameter> value);
}
internal class Microsoft.PowerShell.Serialization : object {
    protected static string XmlCliTag;
    protected string streamName;
    protected DataFormat format;
    protected Serialization(DataFormat dataFormat, string streamName);
    private static Serialization();
}
internal static class Microsoft.PowerShell.TaskbarJumpList : object {
    internal static void CreateRunAsAdministratorJumpList();
    private static void CreateElevatedEntry(string title);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.PowerShell.UnmanagedPSEntry : object {
    [ObsoleteAttribute("Callers should now use UnmanagedPSEntry.Start(string[], int)", "True")]
public static int Start(string consoleFilePath, String[] args, int argc);
    public static int Start(String[] args, int argc);
}
internal static class Microsoft.PowerShell.UpdatesNotification : object {
    private static string UpdateCheckEnvVar;
    private static string LTSBuildInfoURL;
    private static string StableBuildInfoURL;
    private static string PreviewBuildInfoURL;
    private static string s_updateFileNameTemplate;
    private static string s_updateFileNamePattern;
    private static string s_sentinelFileName;
    private static string s_doneFileNameTemplate;
    private static string s_doneFileNamePattern;
    private static string s_cacheDirectory;
    private static EnumerationOptions s_enumOptions;
    private static NotificationType s_notificationType;
    internal static bool CanNotifyUpdates;
    private static UpdatesNotification();
    internal static void ShowUpdateNotification(PSHostUserInterface hostUI);
    [AsyncStateMachineAttribute("Microsoft.PowerShell.UpdatesNotification/<CheckForUpdates>d__15")]
internal static Task CheckForUpdates();
    private static bool TryParseUpdateFile(String& updateFilePath, SemanticVersion& lastUpdateVersion, DateTime& lastUpdateDate);
    [AsyncStateMachineAttribute("Microsoft.PowerShell.UpdatesNotification/<QueryNewReleaseAsync>d__17")]
private static Task`1<Release> QueryNewReleaseAsync(SemanticVersion baselineVersion);
    private static NotificationType GetNotificationType();
}
internal class Microsoft.PowerShell.WrappedDeserializer : Serialization {
    internal TextReader textReader;
    private XmlReader _xmlReader;
    private Deserializer _xmlDeserializer;
    private string _firstLine;
    private bool _atEnd;
    internal bool AtEnd { get; }
    internal WrappedDeserializer(DataFormat dataFormat, string streamName, TextReader input);
    internal object Deserialize();
    internal bool get_AtEnd();
    internal void End();
}
internal class Microsoft.PowerShell.WrappedSerializer : Serialization {
    internal TextWriter textWriter;
    private XmlWriter _xmlWriter;
    private Serializer _xmlSerializer;
    private bool _firstCall;
    internal WrappedSerializer(DataFormat dataFormat, string streamName, TextWriter output);
    internal void Serialize(object o);
    internal void Serialize(object o, string streamName);
    internal void End();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ProgressNodeStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string SecondsRemaining { get; }
    internal static string InvisibleNodesMessageSingular { get; }
    internal static string InvisibleNodesMessagePlural { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_SecondsRemaining();
    internal static string get_InvisibleNodesMessageSingular();
    internal static string get_InvisibleNodesMessagePlural();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class TranscriptStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string TranscriptionStarted { get; }
    internal static string TranscriptionStopped { get; }
    internal static string CannotStartTranscription { get; }
    internal static string ReadWriteFileNotFileSystemProvider { get; }
    internal static string TranscriptFileReadOnly { get; }
    internal static string MultipleFilesNotSupported { get; }
    internal static string TranscriptFileExistsNoClobber { get; }
    internal static string ErrorStoppingTranscript { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_TranscriptionStarted();
    internal static string get_TranscriptionStopped();
    internal static string get_CannotStartTranscription();
    internal static string get_ReadWriteFileNotFileSystemProvider();
    internal static string get_TranscriptFileReadOnly();
    internal static string get_MultipleFilesNotSupported();
    internal static string get_TranscriptFileExistsNoClobber();
    internal static string get_ErrorStoppingTranscript();
}
