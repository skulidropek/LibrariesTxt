public enum Microsoft.VisualBasic.AppWinStyle : Enum {
    public short value__;
    public static AppWinStyle Hide;
    public static AppWinStyle NormalFocus;
    public static AppWinStyle MinimizedFocus;
    public static AppWinStyle MaximizedFocus;
    public static AppWinStyle NormalNoFocus;
    public static AppWinStyle MinimizedNoFocus;
}
public enum Microsoft.VisualBasic.CallType : Enum {
    public int value__;
    public static CallType Method;
    public static CallType Get;
    public static CallType Let;
    public static CallType Set;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualBasic.Collection : object {
    public int Count { get; }
    [NullableAttribute("2")]
public object Item { get; }
    [NullableAttribute("2")]
[EditorBrowsableAttribute("2")]
public object Item { get; }
    [NullableAttribute("2")]
public object Item { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    public int get_Count();
    [NullableContextAttribute("2")]
public object get_Item(int Index);
    public object get_Item(object Index);
    public object get_Item(string Key);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    [NullableContextAttribute("2")]
public void Add(object Item, string Key, object Before, object After);
    public void Clear();
    public bool Contains(string Key);
    public IEnumerator GetEnumerator();
    public void Remove(int Index);
    public void Remove(string Key);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.VisualBasic.ComClassAttribute : Attribute {
    public string ClassID { get; }
    public string EventID { get; }
    public string InterfaceID { get; }
    public bool InterfaceShadows { get; public set; }
    public ComClassAttribute(string _ClassID);
    public ComClassAttribute(string _ClassID, string _InterfaceID);
    public ComClassAttribute(string _ClassID, string _InterfaceID, string _EventId);
    public string get_ClassID();
    public string get_EventID();
    public string get_InterfaceID();
    public bool get_InterfaceShadows();
    public void set_InterfaceShadows(bool value);
}
public enum Microsoft.VisualBasic.CompareMethod : Enum {
    public int value__;
    public static CompareMethod Binary;
    public static CompareMethod Text;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.BooleanType : object {
    public static bool FromObject(object Value);
    public static bool FromString(string Value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ByteType : object {
    public static byte FromObject(object Value);
    public static byte FromString(string Value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.CharArrayType : object {
    public static Char[] FromObject(object Value);
    public static Char[] FromString(string Value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.CharType : object {
    public static char FromObject(object Value);
    public static char FromString(string Value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Conversions : object {
    [RequiresUnreferencedCodeAttribute("The Expression origin object cannot be statically analyzed and may be trimmed")]
public static object ChangeType(object Expression, Type TargetType);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("FallbackUserDefinedConversion has been deprecated and is not supported.", "True")]
[RequiresUnreferencedCodeAttribute("The Expression origin object cannot be statically analyzed and may be trimmed")]
public static object FallbackUserDefinedConversion(object Expression, Type TargetType);
    [NullableContextAttribute("1")]
public static string FromCharAndCount(char Value, int Count);
    [NullableContextAttribute("1")]
public static string FromCharArray(Char[] Value);
    [NullableContextAttribute("1")]
public static string FromCharArraySubset(Char[] Value, int StartIndex, int Length);
    public static bool ToBoolean(object Value);
    public static bool ToBoolean(string Value);
    public static byte ToByte(object Value);
    public static byte ToByte(string Value);
    public static char ToChar(object Value);
    public static char ToChar(string Value);
    [NullableContextAttribute("1")]
public static Char[] ToCharArrayRankOne(object Value);
    [NullableContextAttribute("1")]
public static Char[] ToCharArrayRankOne(string Value);
    public static DateTime ToDate(object Value);
    public static DateTime ToDate(string Value);
    public static decimal ToDecimal(bool Value);
    public static decimal ToDecimal(object Value);
    public static decimal ToDecimal(string Value);
    public static double ToDouble(object Value);
    public static double ToDouble(string Value);
    public static T ToGenericParameter(object Value);
    public static int ToInteger(object Value);
    public static int ToInteger(string Value);
    public static long ToLong(object Value);
    public static long ToLong(string Value);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(object Value);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(string Value);
    public static short ToShort(object Value);
    public static short ToShort(string Value);
    public static float ToSingle(object Value);
    public static float ToSingle(string Value);
    [NullableContextAttribute("1")]
public static string ToString(bool Value);
    [NullableContextAttribute("1")]
public static string ToString(byte Value);
    [NullableContextAttribute("1")]
public static string ToString(char Value);
    [NullableContextAttribute("1")]
public static string ToString(DateTime Value);
    [NullableContextAttribute("1")]
public static string ToString(decimal Value);
    [NullableContextAttribute("1")]
public static string ToString(decimal Value, NumberFormatInfo NumberFormat);
    [NullableContextAttribute("1")]
public static string ToString(double Value);
    [NullableContextAttribute("1")]
public static string ToString(double Value, NumberFormatInfo NumberFormat);
    [NullableContextAttribute("1")]
public static string ToString(short Value);
    [NullableContextAttribute("1")]
public static string ToString(int Value);
    [NullableContextAttribute("1")]
public static string ToString(long Value);
    public static string ToString(object Value);
    [NullableContextAttribute("1")]
public static string ToString(float Value);
    [NullableContextAttribute("1")]
public static string ToString(float Value, NumberFormatInfo NumberFormat);
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public static string ToString(UInt32 Value);
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public static string ToString(ulong Value);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInteger(object Value);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInteger(string Value);
    [CLSCompliantAttribute("False")]
public static ulong ToULong(object Value);
    [CLSCompliantAttribute("False")]
public static ulong ToULong(string Value);
    [CLSCompliantAttribute("False")]
public static ushort ToUShort(object Value);
    [CLSCompliantAttribute("False")]
public static ushort ToUShort(string Value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.DateType : object {
    public static DateTime FromObject(object Value);
    public static DateTime FromString(string Value);
    public static DateTime FromString(string Value, CultureInfo culture);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.DecimalType : object {
    public static decimal FromBoolean(bool Value);
    public static decimal FromObject(object Value);
    public static decimal FromObject(object Value, NumberFormatInfo NumberFormat);
    public static decimal FromString(string Value);
    public static decimal FromString(string Value, NumberFormatInfo NumberFormat);
    [NullableContextAttribute("1")]
public static decimal Parse(string Value, NumberFormatInfo NumberFormat);
}
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.DoubleType : object {
    public static double FromObject(object Value);
    public static double FromObject(object Value, NumberFormatInfo NumberFormat);
    public static double FromString(string Value);
    public static double FromString(string Value, NumberFormatInfo NumberFormat);
    [NullableContextAttribute("1")]
public static double Parse(string Value);
    [NullableContextAttribute("1")]
public static double Parse(string Value, NumberFormatInfo NumberFormat);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.IncompleteInitialization : Exception {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.IntegerType : object {
    public static int FromObject(object Value);
    public static int FromString(string Value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.LateBinding : object {
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateCall(object o, Type objType, string name, Object[] args, String[] paramnames, Boolean[] CopyBack);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object LateGet(object o, Type objType, string name, Object[] args, String[] paramnames, Boolean[] CopyBack);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object LateIndexGet(object o, Object[] args, String[] paramnames);
    [NullableContextAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateIndexSet(object o, Object[] args, String[] paramnames);
    [NullableContextAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateIndexSetComplex(object o, Object[] args, String[] paramnames, bool OptimisticSet, bool RValueBase);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateSet(object o, Type objType, string name, Object[] args, String[] paramnames);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateSetComplex(object o, Type objType, string name, Object[] args, String[] paramnames, bool OptimisticSet, bool RValueBase);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.LikeOperator : object {
    [RequiresUnreferencedCodeAttribute("The types of source and pattern cannot be statically analyzed so the like operator may be trimmed")]
public static object LikeObject(object Source, object Pattern, CompareMethod CompareOption);
    public static bool LikeString(string Source, string Pattern, CompareMethod CompareOption);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.LongType : object {
    public static long FromObject(object Value);
    public static long FromString(string Value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.NewLateBinding : object {
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("FallbackCall has been deprecated and is not supported.", "True")]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object FallbackCall(object Instance, string MemberName, Object[] Arguments, String[] ArgumentNames, bool IgnoreReturn);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("FallbackGet has been deprecated and is not supported.", "True")]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object FallbackGet(object Instance, string MemberName, Object[] Arguments, String[] ArgumentNames);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("FallbackIndexSet has been deprecated and is not supported.", "True")]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void FallbackIndexSet(object Instance, Object[] Arguments, String[] ArgumentNames);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("FallbackIndexSetComplex has been deprecated and is not supported.", "True")]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void FallbackIndexSetComplex(object Instance, Object[] Arguments, String[] ArgumentNames, bool OptimisticSet, bool RValueBase);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("FallbackInvokeDefault1 has been deprecated and is not supported.", "True")]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object FallbackInvokeDefault1(object Instance, Object[] Arguments, String[] ArgumentNames, bool ReportErrors);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("FallbackInvokeDefault2 has been deprecated and is not supported.", "True")]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object FallbackInvokeDefault2(object Instance, Object[] Arguments, String[] ArgumentNames, bool ReportErrors);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("FallbackSet has been deprecated and is not supported.", "True")]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void FallbackSet(object Instance, string MemberName, Object[] Arguments);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("FallbackSetComplex has been deprecated and is not supported.", "True")]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void FallbackSetComplex(object Instance, string MemberName, Object[] Arguments, bool OptimisticSet, bool RValueBase);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object LateCall(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, Boolean[] CopyBack, bool IgnoreReturn);
    [EditorBrowsableAttribute("1")]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object LateCallInvokeDefault(object Instance, Object[] Arguments, String[] ArgumentNames, bool ReportErrors);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object LateGet(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, Boolean[] CopyBack);
    [EditorBrowsableAttribute("1")]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object LateGetInvokeDefault(object Instance, Object[] Arguments, String[] ArgumentNames, bool ReportErrors);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object LateIndexGet(object Instance, Object[] Arguments, String[] ArgumentNames);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateIndexSet(object Instance, Object[] Arguments, String[] ArgumentNames);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateIndexSetComplex(object Instance, Object[] Arguments, String[] ArgumentNames, bool OptimisticSet, bool RValueBase);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateSet(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateSet(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, bool OptimisticSet, bool RValueBase, CallType CallType);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateSetComplex(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, bool OptimisticSet, bool RValueBase);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ObjectFlowControl : object {
    [NullableContextAttribute("2")]
public static void CheckForSyncLockOnValueType(object Expression);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ObjectType : object {
    public static object AddObj(object o1, object o2);
    public static object BitAndObj(object obj1, object obj2);
    public static object BitOrObj(object obj1, object obj2);
    public static object BitXorObj(object obj1, object obj2);
    public static object DivObj(object o1, object o2);
    [NullableContextAttribute("1")]
public static object GetObjectValuePrimitive(object o);
    public static object IDivObj(object o1, object o2);
    public static bool LikeObj(object vLeft, object vRight, CompareMethod CompareOption);
    public static object ModObj(object o1, object o2);
    public static object MulObj(object o1, object o2);
    [NullableContextAttribute("1")]
public static object NegObj(object obj);
    [NullableContextAttribute("1")]
public static object NotObj(object obj);
    public static int ObjTst(object o1, object o2, bool TextCompare);
    [NullableContextAttribute("1")]
public static object PlusObj(object obj);
    public static object PowObj(object obj1, object obj2);
    [NullableContextAttribute("1")]
public static object ShiftLeftObj(object o1, int amount);
    [NullableContextAttribute("1")]
public static object ShiftRightObj(object o1, int amount);
    public static object StrCatObj(object vLeft, object vRight);
    public static object SubObj(object o1, object o2);
    public static object XorObj(object obj1, object obj2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Operators : object {
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object AddObject(object Left, object Right);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object AndObject(object Left, object Right);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object CompareObjectEqual(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object CompareObjectGreater(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object CompareObjectGreaterEqual(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object CompareObjectLess(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object CompareObjectLessEqual(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object CompareObjectNotEqual(object Left, object Right, bool TextCompare);
    public static int CompareString(string Left, string Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object ConcatenateObject(object Left, object Right);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static bool ConditionalCompareObjectEqual(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static bool ConditionalCompareObjectGreater(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static bool ConditionalCompareObjectGreaterEqual(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static bool ConditionalCompareObjectLess(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static bool ConditionalCompareObjectLessEqual(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static bool ConditionalCompareObjectNotEqual(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object DivideObject(object Left, object Right);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object ExponentObject(object Left, object Right);
    [ObsoleteAttribute("FallbackInvokeUserDefinedOperator has been deprecated and is not supported.", "True")]
[RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object FallbackInvokeUserDefinedOperator(object vbOp, Object[] arguments);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object IntDivideObject(object Left, object Right);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object LeftShiftObject(object Operand, object Amount);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object ModObject(object Left, object Right);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object MultiplyObject(object Left, object Right);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object NegateObject(object Operand);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object NotObject(object Operand);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object OrObject(object Left, object Right);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object PlusObject(object Operand);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object RightShiftObject(object Operand, object Amount);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object SubtractObject(object Left, object Right);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object XorObject(object Left, object Right);
}
[AttributeUsageAttribute("2048")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.OptionTextAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ProjectData : object {
    public static void ClearProjectError();
    [NullableContextAttribute("1")]
public static Exception CreateProjectError(int hr);
    public static void EndApp();
    public static void SetProjectError(Exception ex);
    public static void SetProjectError(Exception ex, int lErl);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ShortType : object {
    public static short FromObject(object Value);
    public static short FromString(string Value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.SingleType : object {
    public static float FromObject(object Value);
    public static float FromObject(object Value, NumberFormatInfo NumberFormat);
    public static float FromString(string Value);
    public static float FromString(string Value, NumberFormatInfo NumberFormat);
}
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag : object {
    public short State;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.StringType : object {
    public static string FromBoolean(bool Value);
    public static string FromByte(byte Value);
    public static string FromChar(char Value);
    public static string FromDate(DateTime Value);
    public static string FromDecimal(decimal Value);
    public static string FromDecimal(decimal Value, NumberFormatInfo NumberFormat);
    public static string FromDouble(double Value);
    public static string FromDouble(double Value, NumberFormatInfo NumberFormat);
    public static string FromInteger(int Value);
    public static string FromLong(long Value);
    [NullableContextAttribute("2")]
public static string FromObject(object Value);
    public static string FromShort(short Value);
    public static string FromSingle(float Value);
    public static string FromSingle(float Value, NumberFormatInfo NumberFormat);
    public static void MidStmtStr(String& sDest, int StartPosition, int MaxInsertLength, string sInsert);
    [NullableContextAttribute("2")]
public static int StrCmp(string sLeft, string sRight, bool TextCompare);
    [NullableContextAttribute("2")]
public static bool StrLike(string Source, string Pattern, CompareMethod CompareOption);
    [NullableContextAttribute("2")]
public static bool StrLikeBinary(string Source, string Pattern);
    [NullableContextAttribute("2")]
public static bool StrLikeText(string Source, string Pattern);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Utils : object {
    public static Array CopyArray(Array arySrc, Array aryDest);
    public static string GetResourceString(string ResourceKey, String[] Args);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Versioned : object {
    [RequiresUnreferencedCodeAttribute("The method name cannot and type cannot be statically analyzed so it may be trimmed")]
public static object CallByName(object Instance, string MethodName, CallType UseCallType, Object[] Arguments);
    public static bool IsNumeric(object Expression);
    public static string SystemTypeName(string VbName);
    [NullableContextAttribute("1")]
public static string TypeName(object Expression);
    public static string VbTypeName(string SystemName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Constants : object {
    public static MsgBoxResult vbAbort;
    public static MsgBoxStyle vbAbortRetryIgnore;
    public static MsgBoxStyle vbApplicationModal;
    public static FileAttribute vbArchive;
    public static VariantType vbArray;
    public static string vbBack;
    public static CompareMethod vbBinaryCompare;
    public static VariantType vbBoolean;
    public static VariantType vbByte;
    public static MsgBoxResult vbCancel;
    public static string vbCr;
    public static MsgBoxStyle vbCritical;
    public static string vbCrLf;
    public static VariantType vbCurrency;
    public static VariantType vbDate;
    public static VariantType vbDecimal;
    public static MsgBoxStyle vbDefaultButton1;
    public static MsgBoxStyle vbDefaultButton2;
    public static MsgBoxStyle vbDefaultButton3;
    public static FileAttribute vbDirectory;
    public static VariantType vbDouble;
    public static VariantType vbEmpty;
    public static MsgBoxStyle vbExclamation;
    public static TriState vbFalse;
    public static FirstWeekOfYear vbFirstFourDays;
    public static FirstWeekOfYear vbFirstFullWeek;
    public static FirstWeekOfYear vbFirstJan1;
    public static string vbFormFeed;
    public static FirstDayOfWeek vbFriday;
    public static DateFormat vbGeneralDate;
    public static CallType vbGet;
    public static FileAttribute vbHidden;
    public static AppWinStyle vbHide;
    public static VbStrConv vbHiragana;
    public static MsgBoxResult vbIgnore;
    public static MsgBoxStyle vbInformation;
    public static VariantType vbInteger;
    public static VbStrConv vbKatakana;
    public static CallType vbLet;
    public static string vbLf;
    public static VbStrConv vbLinguisticCasing;
    public static VariantType vbLong;
    public static DateFormat vbLongDate;
    public static DateFormat vbLongTime;
    public static VbStrConv vbLowerCase;
    public static AppWinStyle vbMaximizedFocus;
    public static CallType vbMethod;
    public static AppWinStyle vbMinimizedFocus;
    public static AppWinStyle vbMinimizedNoFocus;
    public static FirstDayOfWeek vbMonday;
    public static MsgBoxStyle vbMsgBoxHelp;
    public static MsgBoxStyle vbMsgBoxRight;
    public static MsgBoxStyle vbMsgBoxRtlReading;
    public static MsgBoxStyle vbMsgBoxSetForeground;
    public static VbStrConv vbNarrow;
    [ObsoleteAttribute("vbNewLine has been deprecated. For a carriage return and line feed, use vbCrLf. For the current platform's newline, use System.Environment.NewLine.")]
public static string vbNewLine;
    public static MsgBoxResult vbNo;
    public static FileAttribute vbNormal;
    public static AppWinStyle vbNormalFocus;
    public static AppWinStyle vbNormalNoFocus;
    public static VariantType vbNull;
    public static string vbNullChar;
    [NullableAttribute("2")]
public static string vbNullString;
    public static VariantType vbObject;
    public static int vbObjectError;
    public static MsgBoxResult vbOK;
    public static MsgBoxStyle vbOKCancel;
    public static MsgBoxStyle vbOKOnly;
    public static VbStrConv vbProperCase;
    public static MsgBoxStyle vbQuestion;
    public static FileAttribute vbReadOnly;
    public static MsgBoxResult vbRetry;
    public static MsgBoxStyle vbRetryCancel;
    public static FirstDayOfWeek vbSaturday;
    public static CallType vbSet;
    public static DateFormat vbShortDate;
    public static DateFormat vbShortTime;
    public static VbStrConv vbSimplifiedChinese;
    public static VariantType vbSingle;
    public static VariantType vbString;
    public static FirstDayOfWeek vbSunday;
    public static FileAttribute vbSystem;
    public static MsgBoxStyle vbSystemModal;
    public static string vbTab;
    public static CompareMethod vbTextCompare;
    public static FirstDayOfWeek vbThursday;
    public static VbStrConv vbTraditionalChinese;
    public static TriState vbTrue;
    public static FirstDayOfWeek vbTuesday;
    public static VbStrConv vbUpperCase;
    public static TriState vbUseDefault;
    public static VariantType vbUserDefinedType;
    public static FirstWeekOfYear vbUseSystem;
    public static FirstDayOfWeek vbUseSystemDayOfWeek;
    public static VariantType vbVariant;
    public static string vbVerticalTab;
    public static FileAttribute vbVolume;
    public static FirstDayOfWeek vbWednesday;
    public static VbStrConv vbWide;
    public static MsgBoxResult vbYes;
    public static MsgBoxStyle vbYesNo;
    public static MsgBoxStyle vbYesNoCancel;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualBasic.ControlChars : object {
    public static char Back;
    public static char Cr;
    public static string CrLf;
    public static char FormFeed;
    public static char Lf;
    public static string NewLine;
    public static char NullChar;
    public static char Quote;
    public static char Tab;
    public static char VerticalTab;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Conversion : object {
    [RequiresUnreferencedCodeAttribute("The Expression's underlying type cannot be statically analyzed and its members may be trimmed")]
public static object CTypeDynamic(object Expression, Type TargetType);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("The Expression's underlying type cannot be statically analyzed and its members may be trimmed")]
public static TargetType CTypeDynamic(object Expression);
    public static string ErrorToString();
    public static string ErrorToString(int ErrorNumber);
    public static decimal Fix(decimal Number);
    public static double Fix(double Number);
    public static short Fix(short Number);
    public static int Fix(int Number);
    public static long Fix(long Number);
    public static object Fix(object Number);
    public static float Fix(float Number);
    public static string Hex(byte Number);
    public static string Hex(short Number);
    public static string Hex(int Number);
    public static string Hex(long Number);
    public static string Hex(object Number);
    [CLSCompliantAttribute("False")]
public static string Hex(sbyte Number);
    [CLSCompliantAttribute("False")]
public static string Hex(ushort Number);
    [CLSCompliantAttribute("False")]
public static string Hex(UInt32 Number);
    [CLSCompliantAttribute("False")]
public static string Hex(ulong Number);
    public static decimal Int(decimal Number);
    public static double Int(double Number);
    public static short Int(short Number);
    public static int Int(int Number);
    public static long Int(long Number);
    public static object Int(object Number);
    public static float Int(float Number);
    public static string Oct(byte Number);
    public static string Oct(short Number);
    public static string Oct(int Number);
    public static string Oct(long Number);
    public static string Oct(object Number);
    [CLSCompliantAttribute("False")]
public static string Oct(sbyte Number);
    [CLSCompliantAttribute("False")]
public static string Oct(ushort Number);
    [CLSCompliantAttribute("False")]
public static string Oct(UInt32 Number);
    [CLSCompliantAttribute("False")]
public static string Oct(ulong Number);
    public static string Str(object Number);
    public static int Val(char Expression);
    [NullableContextAttribute("2")]
public static double Val(object Expression);
    [NullableContextAttribute("2")]
public static double Val(string InputStr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[StandardModuleAttribute]
public class Microsoft.VisualBasic.DateAndTime : object {
    public static string DateString { get; public set; }
    public static DateTime Now { get; }
    public static DateTime TimeOfDay { get; public set; }
    public static double Timer { get; }
    public static string TimeString { get; public set; }
    public static DateTime Today { get; public set; }
    public static string get_DateString();
    [SupportedOSPlatformAttribute("windows")]
public static void set_DateString(string value);
    public static DateTime get_Now();
    public static DateTime get_TimeOfDay();
    [SupportedOSPlatformAttribute("windows")]
public static void set_TimeOfDay(DateTime value);
    public static double get_Timer();
    public static string get_TimeString();
    [SupportedOSPlatformAttribute("windows")]
public static void set_TimeString(string value);
    public static DateTime get_Today();
    [SupportedOSPlatformAttribute("windows")]
public static void set_Today(DateTime value);
    public static DateTime DateAdd(DateInterval Interval, double Number, DateTime DateValue);
    public static DateTime DateAdd(string Interval, double Number, object DateValue);
    public static long DateDiff(DateInterval Interval, DateTime Date1, DateTime Date2, FirstDayOfWeek DayOfWeek, FirstWeekOfYear WeekOfYear);
    [NullableContextAttribute("2")]
public static long DateDiff(string Interval, object Date1, object Date2, FirstDayOfWeek DayOfWeek, FirstWeekOfYear WeekOfYear);
    public static int DatePart(DateInterval Interval, DateTime DateValue, FirstDayOfWeek FirstDayOfWeekValue, FirstWeekOfYear FirstWeekOfYearValue);
    public static int DatePart(string Interval, object DateValue, FirstDayOfWeek DayOfWeek, FirstWeekOfYear WeekOfYear);
    public static DateTime DateSerial(int Year, int Month, int Day);
    public static DateTime DateValue(string StringDate);
    public static int Day(DateTime DateValue);
    public static int Hour(DateTime TimeValue);
    public static int Minute(DateTime TimeValue);
    public static int Month(DateTime DateValue);
    public static string MonthName(int Month, bool Abbreviate);
    public static int Second(DateTime TimeValue);
    public static DateTime TimeSerial(int Hour, int Minute, int Second);
    public static DateTime TimeValue(string StringTime);
    public static int Weekday(DateTime DateValue, FirstDayOfWeek DayOfWeek);
    public static string WeekdayName(int Weekday, bool Abbreviate, FirstDayOfWeek FirstDayOfWeekValue);
    public static int Year(DateTime DateValue);
}
public enum Microsoft.VisualBasic.DateFormat : Enum {
    public int value__;
    public static DateFormat GeneralDate;
    public static DateFormat LongDate;
    public static DateFormat ShortDate;
    public static DateFormat LongTime;
    public static DateFormat ShortTime;
}
public enum Microsoft.VisualBasic.DateInterval : Enum {
    public int value__;
    public static DateInterval Year;
    public static DateInterval Quarter;
    public static DateInterval Month;
    public static DateInterval DayOfYear;
    public static DateInterval Day;
    public static DateInterval WeekOfYear;
    public static DateInterval Weekday;
    public static DateInterval Hour;
    public static DateInterval Minute;
    public static DateInterval Second;
}
public enum Microsoft.VisualBasic.DueDate : Enum {
    public int value__;
    public static DueDate EndOfPeriod;
    public static DueDate BegOfPeriod;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualBasic.ErrObject : object {
    public string Description { get; public set; }
    public int Erl { get; }
    public int HelpContext { get; public set; }
    public string HelpFile { get; public set; }
    public int LastDllError { get; }
    public int Number { get; public set; }
    public string Source { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    public int get_Erl();
    public int get_HelpContext();
    public void set_HelpContext(int value);
    public string get_HelpFile();
    public void set_HelpFile(string value);
    public int get_LastDllError();
    public int get_Number();
    public void set_Number(int value);
    public string get_Source();
    public void set_Source(string value);
    public void Clear();
    [NullableContextAttribute("2")]
public Exception GetException();
    [NullableContextAttribute("2")]
public void Raise(int Number, object Source, object Description, object HelpFile, object HelpContext);
}
[FlagsAttribute]
public enum Microsoft.VisualBasic.FileAttribute : Enum {
    public int value__;
    public static FileAttribute Normal;
    public static FileAttribute ReadOnly;
    public static FileAttribute Hidden;
    public static FileAttribute System;
    public static FileAttribute Volume;
    public static FileAttribute Directory;
    public static FileAttribute Archive;
}
public enum Microsoft.VisualBasic.FileIO.DeleteDirectoryOption : Enum {
    public int value__;
    public static DeleteDirectoryOption ThrowIfDirectoryNonEmpty;
    public static DeleteDirectoryOption DeleteAllContents;
}
public enum Microsoft.VisualBasic.FileIO.FieldType : Enum {
    public int value__;
    public static FieldType Delimited;
    public static FieldType FixedWidth;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualBasic.FileIO.FileSystem : object {
    public static string CurrentDirectory { get; public set; }
    public static ReadOnlyCollection`1<DriveInfo> Drives { get; }
    public static string get_CurrentDirectory();
    public static void set_CurrentDirectory(string value);
    public static ReadOnlyCollection`1<DriveInfo> get_Drives();
    public static string CombinePath(string baseDirectory, string relativePath);
    public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName);
    public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI);
    public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI, UICancelOption onUserCancel);
    public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite);
    public static void CopyFile(string sourceFileName, string destinationFileName);
    public static void CopyFile(string sourceFileName, string destinationFileName, UIOption showUI);
    public static void CopyFile(string sourceFileName, string destinationFileName, UIOption showUI, UICancelOption onUserCancel);
    public static void CopyFile(string sourceFileName, string destinationFileName, bool overwrite);
    public static void CreateDirectory(string directory);
    public static void DeleteDirectory(string directory, DeleteDirectoryOption onDirectoryNotEmpty);
    public static void DeleteDirectory(string directory, UIOption showUI, RecycleOption recycle);
    public static void DeleteDirectory(string directory, UIOption showUI, RecycleOption recycle, UICancelOption onUserCancel);
    public static void DeleteFile(string file);
    public static void DeleteFile(string file, UIOption showUI, RecycleOption recycle);
    public static void DeleteFile(string file, UIOption showUI, RecycleOption recycle, UICancelOption onUserCancel);
    public static bool DirectoryExists(string directory);
    public static bool FileExists(string file);
    public static ReadOnlyCollection`1<string> FindInFiles(string directory, string containsText, bool ignoreCase, SearchOption searchType);
    public static ReadOnlyCollection`1<string> FindInFiles(string directory, string containsText, bool ignoreCase, SearchOption searchType, String[] fileWildcards);
    public static ReadOnlyCollection`1<string> GetDirectories(string directory);
    public static ReadOnlyCollection`1<string> GetDirectories(string directory, SearchOption searchType, String[] wildcards);
    public static DirectoryInfo GetDirectoryInfo(string directory);
    public static DriveInfo GetDriveInfo(string drive);
    public static FileInfo GetFileInfo(string file);
    public static ReadOnlyCollection`1<string> GetFiles(string directory);
    public static ReadOnlyCollection`1<string> GetFiles(string directory, SearchOption searchType, String[] wildcards);
    public static string GetName(string path);
    public static string GetParentPath(string path);
    public static string GetTempFileName();
    public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName);
    public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI);
    public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI, UICancelOption onUserCancel);
    public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite);
    public static void MoveFile(string sourceFileName, string destinationFileName);
    public static void MoveFile(string sourceFileName, string destinationFileName, UIOption showUI);
    public static void MoveFile(string sourceFileName, string destinationFileName, UIOption showUI, UICancelOption onUserCancel);
    public static void MoveFile(string sourceFileName, string destinationFileName, bool overwrite);
    public static TextFieldParser OpenTextFieldParser(string file);
    public static TextFieldParser OpenTextFieldParser(string file, Int32[] fieldWidths);
    public static TextFieldParser OpenTextFieldParser(string file, String[] delimiters);
    public static StreamReader OpenTextFileReader(string file);
    public static StreamReader OpenTextFileReader(string file, Encoding encoding);
    public static StreamWriter OpenTextFileWriter(string file, bool append);
    public static StreamWriter OpenTextFileWriter(string file, bool append, Encoding encoding);
    public static Byte[] ReadAllBytes(string file);
    public static string ReadAllText(string file);
    public static string ReadAllText(string file, Encoding encoding);
    public static void RenameDirectory(string directory, string newName);
    public static void RenameFile(string file, string newName);
    public static void WriteAllBytes(string file, Byte[] data, bool append);
    public static void WriteAllText(string file, string text, bool append);
    public static void WriteAllText(string file, string text, bool append, Encoding encoding);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualBasic.FileIO.MalformedLineException : Exception {
    [EditorBrowsableAttribute("0")]
public long LineNumber { get; public set; }
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected MalformedLineException(SerializationInfo info, StreamingContext context);
    public MalformedLineException(string message);
    public MalformedLineException(string message, Exception innerException);
    public MalformedLineException(string message, long lineNumber);
    public MalformedLineException(string message, long lineNumber, Exception innerException);
    public long get_LineNumber();
    public void set_LineNumber(long value);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public enum Microsoft.VisualBasic.FileIO.RecycleOption : Enum {
    public int value__;
    public static RecycleOption DeletePermanently;
    public static RecycleOption SendToRecycleBin;
}
public enum Microsoft.VisualBasic.FileIO.SearchOption : Enum {
    public int value__;
    public static SearchOption SearchTopLevelOnly;
    public static SearchOption SearchAllSubDirectories;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualBasic.FileIO.SpecialDirectories : object {
    public static string AllUsersApplicationData { get; }
    public static string CurrentUserApplicationData { get; }
    public static string Desktop { get; }
    public static string MyDocuments { get; }
    public static string MyMusic { get; }
    public static string MyPictures { get; }
    public static string ProgramFiles { get; }
    public static string Programs { get; }
    public static string Temp { get; }
    public static string get_AllUsersApplicationData();
    public static string get_CurrentUserApplicationData();
    public static string get_Desktop();
    public static string get_MyDocuments();
    public static string get_MyMusic();
    public static string get_MyPictures();
    public static string get_ProgramFiles();
    public static string get_Programs();
    public static string get_Temp();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualBasic.FileIO.TextFieldParser : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[EditorBrowsableAttribute("2")]
public String[] CommentTokens { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Delimiters { get; public set; }
    public bool EndOfData { get; }
    public string ErrorLine { get; }
    public long ErrorLineNumber { get; }
    [NullableAttribute("2")]
public Int32[] FieldWidths { get; public set; }
    [EditorBrowsableAttribute("2")]
public bool HasFieldsEnclosedInQuotes { get; public set; }
    [EditorBrowsableAttribute("2")]
public long LineNumber { get; }
    public FieldType TextFieldType { get; public set; }
    public bool TrimWhiteSpace { get; public set; }
    public TextFieldParser(Stream stream);
    public TextFieldParser(Stream stream, Encoding defaultEncoding);
    public TextFieldParser(Stream stream, Encoding defaultEncoding, bool detectEncoding);
    public TextFieldParser(Stream stream, Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);
    public TextFieldParser(TextReader reader);
    public TextFieldParser(string path);
    public TextFieldParser(string path, Encoding defaultEncoding);
    public TextFieldParser(string path, Encoding defaultEncoding, bool detectEncoding);
    public String[] get_CommentTokens();
    public void set_CommentTokens(String[] value);
    public String[] get_Delimiters();
    public void set_Delimiters(String[] value);
    public bool get_EndOfData();
    public string get_ErrorLine();
    public long get_ErrorLineNumber();
    [NullableContextAttribute("2")]
public Int32[] get_FieldWidths();
    [NullableContextAttribute("2")]
public void set_FieldWidths(Int32[] value);
    public bool get_HasFieldsEnclosedInQuotes();
    public void set_HasFieldsEnclosedInQuotes(bool value);
    public long get_LineNumber();
    public FieldType get_TextFieldType();
    public void set_TextFieldType(FieldType value);
    public bool get_TrimWhiteSpace();
    public void set_TrimWhiteSpace(bool value);
    [EditorBrowsableAttribute("2")]
public void Close();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    [NullableContextAttribute("2")]
public string PeekChars(int numberOfChars);
    public String[] ReadFields();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("2")]
public string ReadLine();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("2")]
public string ReadToEnd();
    public void SetDelimiters(String[] delimiters);
    [NullableContextAttribute("2")]
public void SetFieldWidths(Int32[] fieldWidths);
    public sealed virtual void Dispose();
}
public enum Microsoft.VisualBasic.FileIO.UICancelOption : Enum {
    public int value__;
    public static UICancelOption DoNothing;
    public static UICancelOption ThrowException;
}
public enum Microsoft.VisualBasic.FileIO.UIOption : Enum {
    public int value__;
    public static UIOption OnlyErrorDialogs;
    public static UIOption AllDialogs;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[StandardModuleAttribute]
public class Microsoft.VisualBasic.FileSystem : object {
    public static void ChDir(string Path);
    [SupportedOSPlatformAttribute("windows")]
public static void ChDrive(char Drive);
    [NullableContextAttribute("2")]
[SupportedOSPlatformAttribute("windows")]
public static void ChDrive(string Drive);
    public static string CurDir();
    [SupportedOSPlatformAttribute("windows")]
public static string CurDir(char Drive);
    public static string Dir();
    [SupportedOSPlatformAttribute("windows")]
public static string Dir(string PathName, FileAttribute Attributes);
    public static bool EOF(int FileNumber);
    public static OpenMode FileAttr(int FileNumber);
    public static void FileClose(Int32[] FileNumbers);
    public static void FileCopy(string Source, string Destination);
    public static DateTime FileDateTime(string PathName);
    [RequiresUnreferencedCodeAttribute("The target object type could not be statically analyzed and may be trimmed")]
public static void FileGet(int FileNumber, Array& Value, long RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength);
    public static void FileGet(int FileNumber, Boolean& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Byte& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Char& Value, long RecordNumber);
    public static void FileGet(int FileNumber, DateTime& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Decimal& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Double& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Int16& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Int32& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Int64& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Single& Value, long RecordNumber);
    public static void FileGet(int FileNumber, String& Value, long RecordNumber, bool StringIsFixedLength);
    [RequiresUnreferencedCodeAttribute("The target object type could not be statically analyzed and may be trimmed")]
public static void FileGet(int FileNumber, ValueType& Value, long RecordNumber);
    [RequiresUnreferencedCodeAttribute("The target object type could not be statically analyzed and may be trimmed")]
public static void FileGetObject(int FileNumber, Object& Value, long RecordNumber);
    public static long FileLen(string PathName);
    public static void FileOpen(int FileNumber, string FileName, OpenMode Mode, OpenAccess Access, OpenShare Share, int RecordLength);
    [RequiresUnreferencedCodeAttribute("The origin object type could not be statically analyzed and may be trimmed")]
public static void FilePut(int FileNumber, Array Value, long RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength);
    public static void FilePut(int FileNumber, bool Value, long RecordNumber);
    public static void FilePut(int FileNumber, byte Value, long RecordNumber);
    public static void FilePut(int FileNumber, char Value, long RecordNumber);
    public static void FilePut(int FileNumber, DateTime Value, long RecordNumber);
    public static void FilePut(int FileNumber, decimal Value, long RecordNumber);
    public static void FilePut(int FileNumber, double Value, long RecordNumber);
    public static void FilePut(int FileNumber, short Value, long RecordNumber);
    public static void FilePut(int FileNumber, int Value, long RecordNumber);
    public static void FilePut(int FileNumber, long Value, long RecordNumber);
    public static void FilePut(int FileNumber, float Value, long RecordNumber);
    public static void FilePut(int FileNumber, string Value, long RecordNumber, bool StringIsFixedLength);
    [RequiresUnreferencedCodeAttribute("The origin object type could not be statically analyzed and may be trimmed")]
public static void FilePut(int FileNumber, ValueType Value, long RecordNumber);
    [ObsoleteAttribute("FileSystem.FilePut has been deprecated. Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types.")]
public static void FilePut(object FileNumber, object Value, object RecordNumber);
    [RequiresUnreferencedCodeAttribute("The origin object type could not be statically analyzed and may be trimmed")]
public static void FilePutObject(int FileNumber, object Value, long RecordNumber);
    public static void FileWidth(int FileNumber, int RecordWidth);
    public static int FreeFile();
    public static FileAttribute GetAttr(string PathName);
    public static void Input(int FileNumber, Boolean& Value);
    public static void Input(int FileNumber, Byte& Value);
    public static void Input(int FileNumber, Char& Value);
    public static void Input(int FileNumber, DateTime& Value);
    public static void Input(int FileNumber, Decimal& Value);
    public static void Input(int FileNumber, Double& Value);
    public static void Input(int FileNumber, Int16& Value);
    public static void Input(int FileNumber, Int32& Value);
    public static void Input(int FileNumber, Int64& Value);
    [RequiresUnreferencedCodeAttribute("The target object type could not be statically analyzed and may be trimmed")]
public static void Input(int FileNumber, Object& Value);
    public static void Input(int FileNumber, Single& Value);
    public static void Input(int FileNumber, String& Value);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
public static string InputString(int FileNumber, int CharCount);
    public static void Kill(string PathName);
    public static string LineInput(int FileNumber);
    public static long Loc(int FileNumber);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void Lock(int FileNumber);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void Lock(int FileNumber, long Record);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void Lock(int FileNumber, long FromRecord, long ToRecord);
    public static long LOF(int FileNumber);
    public static void MkDir(string Path);
    public static void Print(int FileNumber, Object[] Output);
    public static void PrintLine(int FileNumber, Object[] Output);
    [SupportedOSPlatformAttribute("windows")]
public static void Rename(string OldPath, string NewPath);
    public static void Reset();
    public static void RmDir(string Path);
    public static long Seek(int FileNumber);
    public static void Seek(int FileNumber, long Position);
    public static void SetAttr(string PathName, FileAttribute Attributes);
    public static SpcInfo SPC(short Count);
    public static TabInfo TAB();
    public static TabInfo TAB(short Column);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void Unlock(int FileNumber);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void Unlock(int FileNumber, long Record);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void Unlock(int FileNumber, long FromRecord, long ToRecord);
    public static void Write(int FileNumber, Object[] Output);
    public static void WriteLine(int FileNumber, Object[] Output);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Financial : object {
    public static double DDB(double Cost, double Salvage, double Life, double Period, double Factor);
    public static double FV(double Rate, double NPer, double Pmt, double PV, DueDate Due);
    public static double IPmt(double Rate, double Per, double NPer, double PV, double FV, DueDate Due);
    public static double IRR(Double[]& ValueArray, double Guess);
    public static double MIRR(Double[]& ValueArray, double FinanceRate, double ReinvestRate);
    public static double NPer(double Rate, double Pmt, double PV, double FV, DueDate Due);
    public static double NPV(double Rate, Double[]& ValueArray);
    public static double Pmt(double Rate, double NPer, double PV, double FV, DueDate Due);
    public static double PPmt(double Rate, double Per, double NPer, double PV, double FV, DueDate Due);
    public static double PV(double Rate, double NPer, double Pmt, double FV, DueDate Due);
    public static double Rate(double NPer, double Pmt, double PV, double FV, DueDate Due, double Guess);
    public static double SLN(double Cost, double Salvage, double Life);
    public static double SYD(double Cost, double Salvage, double Life, double Period);
}
public enum Microsoft.VisualBasic.FirstDayOfWeek : Enum {
    public int value__;
    public static FirstDayOfWeek System;
    public static FirstDayOfWeek Sunday;
    public static FirstDayOfWeek Monday;
    public static FirstDayOfWeek Tuesday;
    public static FirstDayOfWeek Wednesday;
    public static FirstDayOfWeek Thursday;
    public static FirstDayOfWeek Friday;
    public static FirstDayOfWeek Saturday;
}
public enum Microsoft.VisualBasic.FirstWeekOfYear : Enum {
    public int value__;
    public static FirstWeekOfYear System;
    public static FirstWeekOfYear Jan1;
    public static FirstWeekOfYear FirstFourDays;
    public static FirstWeekOfYear FirstFullWeek;
}
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.HideModuleNameAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Information : object {
    public static int Erl();
    [NullableContextAttribute("1")]
public static ErrObject Err();
    public static bool IsArray(object VarName);
    public static bool IsDate(object Expression);
    public static bool IsDBNull(object Expression);
    public static bool IsError(object Expression);
    public static bool IsNothing(object Expression);
    public static bool IsNumeric(object Expression);
    public static bool IsReference(object Expression);
    [NullableContextAttribute("1")]
public static int LBound(Array Array, int Rank);
    public static int QBColor(int Color);
    public static int RGB(int Red, int Green, int Blue);
    public static string SystemTypeName(string VbName);
    [NullableContextAttribute("1")]
public static string TypeName(object VarName);
    [NullableContextAttribute("1")]
public static int UBound(Array Array, int Rank);
    public static VariantType VarType(object VarName);
    public static string VbTypeName(string UrtName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Interaction : object {
    public static void AppActivate(int ProcessId);
    public static void AppActivate(string Title);
    [SupportedOSPlatformAttribute("windows")]
public static void Beep();
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("The type of ObjectRef cannot be statically analyzed and its members may be trimmed.")]
public static object CallByName(object ObjectRef, string ProcName, CallType UseCallType, Object[] Args);
    [NullableContextAttribute("2")]
public static object Choose(double Index, Object[] Choice);
    public static string Command();
    [RequiresUnreferencedCodeAttribute("The COM object to be created cannot be statically analyzed and may be trimmed")]
[SupportedOSPlatformAttribute("windows")]
public static object CreateObject(string ProgId, string ServerName);
    [NullableContextAttribute("2")]
[SupportedOSPlatformAttribute("windows")]
public static void DeleteSetting(string AppName, string Section, string Key);
    public static string Environ(string Expression);
    public static string Environ(int Expression);
    [SupportedOSPlatformAttribute("windows")]
public static String[0...,0...] GetAllSettings(string AppName, string Section);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("The COM component to be returned cannot be statically analyzed and may be trimmed")]
[SupportedOSPlatformAttribute("windows")]
public static object GetObject(string PathName, string Class);
    [SupportedOSPlatformAttribute("windows")]
public static string GetSetting(string AppName, string Section, string Key, string Default);
    [NullableContextAttribute("2")]
public static object IIf(bool Expression, object TruePart, object FalsePart);
    public static string InputBox(string Prompt, string Title, string DefaultResponse, int XPos, int YPos);
    public static MsgBoxResult MsgBox(object Prompt, MsgBoxStyle Buttons, object Title);
    public static string Partition(long Number, long Start, long Stop, long Interval);
    [SupportedOSPlatformAttribute("windows")]
public static void SaveSetting(string AppName, string Section, string Key, string Setting);
    public static int Shell(string PathName, AppWinStyle Style, bool Wait, int Timeout);
    [NullableContextAttribute("2")]
public static object Switch(Object[] VarExpr);
}
public enum Microsoft.VisualBasic.MsgBoxResult : Enum {
    public int value__;
    public static MsgBoxResult Ok;
    public static MsgBoxResult Cancel;
    public static MsgBoxResult Abort;
    public static MsgBoxResult Retry;
    public static MsgBoxResult Ignore;
    public static MsgBoxResult Yes;
    public static MsgBoxResult No;
}
[FlagsAttribute]
public enum Microsoft.VisualBasic.MsgBoxStyle : Enum {
    public int value__;
    public static MsgBoxStyle ApplicationModal;
    public static MsgBoxStyle DefaultButton1;
    public static MsgBoxStyle OkOnly;
    public static MsgBoxStyle OkCancel;
    public static MsgBoxStyle AbortRetryIgnore;
    public static MsgBoxStyle YesNoCancel;
    public static MsgBoxStyle YesNo;
    public static MsgBoxStyle RetryCancel;
    public static MsgBoxStyle Critical;
    public static MsgBoxStyle Question;
    public static MsgBoxStyle Exclamation;
    public static MsgBoxStyle Information;
    public static MsgBoxStyle DefaultButton2;
    public static MsgBoxStyle DefaultButton3;
    public static MsgBoxStyle SystemModal;
    public static MsgBoxStyle MsgBoxHelp;
    public static MsgBoxStyle MsgBoxSetForeground;
    public static MsgBoxStyle MsgBoxRight;
    public static MsgBoxStyle MsgBoxRtlReading;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.MyGroupCollectionAttribute : Attribute {
    public string CreateMethod { get; }
    public string DefaultInstanceAlias { get; }
    public string DisposeMethod { get; }
    public string MyGroupName { get; }
    public MyGroupCollectionAttribute(string typeToCollect, string createInstanceMethodName, string disposeInstanceMethodName, string defaultInstanceAlias);
    public string get_CreateMethod();
    public string get_DefaultInstanceAlias();
    public string get_DisposeMethod();
    public string get_MyGroupName();
}
public enum Microsoft.VisualBasic.OpenAccess : Enum {
    public int value__;
    public static OpenAccess Default;
    public static OpenAccess Read;
    public static OpenAccess Write;
    public static OpenAccess ReadWrite;
}
public enum Microsoft.VisualBasic.OpenMode : Enum {
    public int value__;
    public static OpenMode Input;
    public static OpenMode Output;
    public static OpenMode Random;
    public static OpenMode Append;
    public static OpenMode Binary;
}
public enum Microsoft.VisualBasic.OpenShare : Enum {
    public int value__;
    public static OpenShare Default;
    public static OpenShare LockReadWrite;
    public static OpenShare LockWrite;
    public static OpenShare LockRead;
    public static OpenShare Shared;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.SpcInfo : ValueType {
    public short Count;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Strings : object {
    public static int Asc(char String);
    public static int Asc(string String);
    public static int AscW(char String);
    public static int AscW(string String);
    public static char Chr(int CharCode);
    public static char ChrW(int CharCode);
    [NullableContextAttribute("2")]
public static String[] Filter(Object[] Source, string Match, bool Include, CompareMethod Compare);
    [NullableContextAttribute("2")]
public static String[] Filter(String[] Source, string Match, bool Include, CompareMethod Compare);
    [NullableContextAttribute("2")]
public static string Format(object Expression, string Style);
    public static string FormatCurrency(object Expression, int NumDigitsAfterDecimal, TriState IncludeLeadingDigit, TriState UseParensForNegativeNumbers, TriState GroupDigits);
    public static string FormatDateTime(DateTime Expression, DateFormat NamedFormat);
    public static string FormatNumber(object Expression, int NumDigitsAfterDecimal, TriState IncludeLeadingDigit, TriState UseParensForNegativeNumbers, TriState GroupDigits);
    public static string FormatPercent(object Expression, int NumDigitsAfterDecimal, TriState IncludeLeadingDigit, TriState UseParensForNegativeNumbers, TriState GroupDigits);
    public static char GetChar(string str, int Index);
    [NullableContextAttribute("2")]
public static int InStr(int Start, string String1, string String2, CompareMethod Compare);
    [NullableContextAttribute("2")]
public static int InStr(string String1, string String2, CompareMethod Compare);
    [NullableContextAttribute("2")]
public static int InStrRev(string StringCheck, string StringMatch, int Start, CompareMethod Compare);
    [NullableContextAttribute("2")]
public static string Join(Object[] SourceArray, string Delimiter);
    [NullableContextAttribute("2")]
public static string Join(String[] SourceArray, string Delimiter);
    public static char LCase(char Value);
    [NullableContextAttribute("2")]
public static string LCase(string Value);
    public static string Left(string str, int Length);
    public static int Len(bool Expression);
    public static int Len(byte Expression);
    public static int Len(char Expression);
    public static int Len(DateTime Expression);
    public static int Len(decimal Expression);
    public static int Len(double Expression);
    public static int Len(short Expression);
    public static int Len(int Expression);
    public static int Len(long Expression);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("The object's type cannot be statically analyzed and its members may be trimmed")]
public static int Len(object Expression);
    [CLSCompliantAttribute("False")]
public static int Len(sbyte Expression);
    public static int Len(float Expression);
    [NullableContextAttribute("2")]
public static int Len(string Expression);
    [CLSCompliantAttribute("False")]
public static int Len(ushort Expression);
    [CLSCompliantAttribute("False")]
public static int Len(UInt32 Expression);
    [CLSCompliantAttribute("False")]
public static int Len(ulong Expression);
    public static string LSet(string Source, int Length);
    public static string LTrim(string str);
    [NullableContextAttribute("2")]
public static string Mid(string str, int Start);
    public static string Mid(string str, int Start, int Length);
    [NullableContextAttribute("2")]
public static string Replace(string Expression, string Find, string Replacement, int Start, int Count, CompareMethod Compare);
    public static string Right(string str, int Length);
    public static string RSet(string Source, int Length);
    public static string RTrim(string str);
    public static string Space(int Number);
    [NullableContextAttribute("2")]
public static String[] Split(string Expression, string Delimiter, int Limit, CompareMethod Compare);
    [NullableContextAttribute("2")]
public static int StrComp(string String1, string String2, CompareMethod Compare);
    [NullableContextAttribute("2")]
[SupportedOSPlatformAttribute("windows")]
public static string StrConv(string str, VbStrConv Conversion, int LocaleID);
    public static string StrDup(int Number, char Character);
    public static object StrDup(int Number, object Character);
    public static string StrDup(int Number, string Character);
    public static string StrReverse(string Expression);
    public static string Trim(string str);
    public static char UCase(char Value);
    public static string UCase(string Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.TabInfo : ValueType {
    public short Column;
}
public enum Microsoft.VisualBasic.TriState : Enum {
    public int value__;
    public static TriState UseDefault;
    public static TriState True;
    public static TriState False;
}
public enum Microsoft.VisualBasic.VariantType : Enum {
    public int value__;
    public static VariantType Empty;
    public static VariantType Null;
    public static VariantType Short;
    public static VariantType Integer;
    public static VariantType Single;
    public static VariantType Double;
    public static VariantType Currency;
    public static VariantType Date;
    public static VariantType String;
    public static VariantType Object;
    public static VariantType Error;
    public static VariantType Boolean;
    public static VariantType Variant;
    public static VariantType DataObject;
    public static VariantType Decimal;
    public static VariantType Byte;
    public static VariantType Char;
    public static VariantType Long;
    public static VariantType UserDefinedType;
    public static VariantType Array;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("256")]
public class Microsoft.VisualBasic.VBFixedArrayAttribute : Attribute {
    public Int32[] Bounds { get; }
    public int Length { get; }
    public VBFixedArrayAttribute(int UpperBound1);
    public VBFixedArrayAttribute(int UpperBound1, int UpperBound2);
    public Int32[] get_Bounds();
    public int get_Length();
}
[AttributeUsageAttribute("256")]
public class Microsoft.VisualBasic.VBFixedStringAttribute : Attribute {
    public int Length { get; }
    public VBFixedStringAttribute(int Length);
    public int get_Length();
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.VBMath : object {
    public static void Randomize();
    public static void Randomize(double Number);
    public static float Rnd();
    public static float Rnd(float Number);
}
[FlagsAttribute]
public enum Microsoft.VisualBasic.VbStrConv : Enum {
    public int value__;
    public static VbStrConv None;
    public static VbStrConv Uppercase;
    public static VbStrConv Lowercase;
    public static VbStrConv ProperCase;
    public static VbStrConv Wide;
    public static VbStrConv Narrow;
    public static VbStrConv Katakana;
    public static VbStrConv Hiragana;
    public static VbStrConv SimplifiedChinese;
    public static VbStrConv TraditionalChinese;
    public static VbStrConv LinguisticCasing;
}
