[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Emit.DynamicILInfo : object {
    public DynamicMethod DynamicMethod { get; }
    public DynamicMethod get_DynamicMethod();
    public int GetTokenFor(Byte[] signature);
    public int GetTokenFor(DynamicMethod method);
    public int GetTokenFor(RuntimeFieldHandle field);
    public int GetTokenFor(RuntimeFieldHandle field, RuntimeTypeHandle contextType);
    public int GetTokenFor(RuntimeMethodHandle method);
    public int GetTokenFor(RuntimeMethodHandle method, RuntimeTypeHandle contextType);
    public int GetTokenFor(RuntimeTypeHandle type);
    public int GetTokenFor(string literal);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
public void SetCode(Byte* code, int codeSize, int maxStackSize);
    [NullableContextAttribute("2")]
public void SetCode(Byte[] code, int maxStackSize);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
public void SetExceptions(Byte* exceptions, int exceptionsSize);
    [NullableContextAttribute("2")]
public void SetExceptions(Byte[] exceptions);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
public void SetLocalSignature(Byte* localSignature, int signatureSize);
    [NullableContextAttribute("2")]
public void SetLocalSignature(Byte[] localSignature);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Emit.DynamicMethod : MethodInfo {
    public MethodAttributes Attributes { get; }
    public CallingConventions CallingConvention { get; }
    [NullableAttribute("2")]
public Type DeclaringType { get; }
    public bool InitLocals { get; public set; }
    public bool IsSecurityCritical { get; }
    public bool IsSecuritySafeCritical { get; }
    public bool IsSecurityTransparent { get; }
    public RuntimeMethodHandle MethodHandle { get; }
    public Module Module { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public Type ReflectedType { get; }
    public ParameterInfo ReturnParameter { get; }
    public Type ReturnType { get; }
    public ICustomAttributeProvider ReturnTypeCustomAttributes { get; }
    [RequiresDynamicCodeAttribute("Creating a DynamicMethod requires dynamic code.")]
public DynamicMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Module m, bool skipVisibility);
    [RequiresDynamicCodeAttribute("Creating a DynamicMethod requires dynamic code.")]
public DynamicMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);
    [RequiresDynamicCodeAttribute("Creating a DynamicMethod requires dynamic code.")]
public DynamicMethod(string name, Type returnType, Type[] parameterTypes);
    [RequiresDynamicCodeAttribute("Creating a DynamicMethod requires dynamic code.")]
public DynamicMethod(string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility);
    [RequiresDynamicCodeAttribute("Creating a DynamicMethod requires dynamic code.")]
public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Module m);
    [RequiresDynamicCodeAttribute("Creating a DynamicMethod requires dynamic code.")]
public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Module m, bool skipVisibility);
    [RequiresDynamicCodeAttribute("Creating a DynamicMethod requires dynamic code.")]
public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner);
    [RequiresDynamicCodeAttribute("Creating a DynamicMethod requires dynamic code.")]
public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);
    public virtual MethodAttributes get_Attributes();
    public virtual CallingConventions get_CallingConvention();
    [NullableContextAttribute("2")]
public virtual Type get_DeclaringType();
    public bool get_InitLocals();
    public void set_InitLocals(bool value);
    public virtual bool get_IsSecurityCritical();
    public virtual bool get_IsSecuritySafeCritical();
    public virtual bool get_IsSecurityTransparent();
    public virtual RuntimeMethodHandle get_MethodHandle();
    public virtual Module get_Module();
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual Type get_ReflectedType();
    public virtual ParameterInfo get_ReturnParameter();
    public virtual Type get_ReturnType();
    public virtual ICustomAttributeProvider get_ReturnTypeCustomAttributes();
    public sealed virtual Delegate CreateDelegate(Type delegateType);
    public sealed virtual Delegate CreateDelegate(Type delegateType, object target);
    [NullableContextAttribute("2")]
public ParameterBuilder DefineParameter(int position, ParameterAttributes attributes, string parameterName);
    public virtual MethodInfo GetBaseDefinition();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public DynamicILInfo GetDynamicILInfo();
    public ILGenerator GetILGenerator();
    public ILGenerator GetILGenerator(int streamSize);
    public virtual MethodImplAttributes GetMethodImplementationFlags();
    public virtual ParameterInfo[] GetParameters();
    [NullableContextAttribute("2")]
public virtual object Invoke(object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual string ToString();
}
