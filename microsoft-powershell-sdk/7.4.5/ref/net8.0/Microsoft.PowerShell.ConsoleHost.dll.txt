[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class CommandLineParameterParserStrings : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CommandAlreadySpecified { get; }
    internal static string MissingCommandParameter { get; }
    internal static string UnknownParameter { get; }
    internal static string TooManyParametersToCommand { get; }
    internal static string StdinNotRedirected { get; }
    internal static string MissingOutputFormatParameter { get; }
    internal static string MissingInputFormatParameter { get; }
    internal static string BadFormatParameterValue { get; }
    internal static string ArgsAlreadySpecified { get; }
    internal static string MissingArgsValue { get; }
    internal static string MissingFileArgument { get; }
    internal static string MissingWindowStyleArgument { get; }
    internal static string InvalidFileArgument { get; }
    internal static string InvalidWindowStyleArgument { get; }
    internal static string InvalidFileArgumentExtension { get; }
    internal static string ArgumentFileDoesNotExist { get; }
    internal static string BadArgsValue { get; }
    internal static string BadCommandValue { get; }
    internal static string MissingExecutionPolicyParameter { get; }
    internal static string MtaStaMutuallyExclusive { get; }
    internal static string MissingConfigurationNameArgument { get; }
    internal static string MissingConfigurationFileArgument { get; }
    internal static string MissingCustomPipeNameArgument { get; }
    internal static string CustomPipeNameTooLong { get; }
    internal static string MissingSettingsFileArgument { get; }
    internal static string InvalidSettingsFileArgument { get; }
    internal static string SettingsFileNotExists { get; }
    internal static string InvalidArgument { get; }
    internal static string WindowStyleArgumentNotImplemented { get; }
    internal static string MissingWorkingDirectoryArgument { get; }
    internal static string MTANotImplemented { get; }
    internal static string STANotImplemented { get; }
    internal static string NullElementInArgs { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CommandAlreadySpecified();
    internal static string get_MissingCommandParameter();
    internal static string get_UnknownParameter();
    internal static string get_TooManyParametersToCommand();
    internal static string get_StdinNotRedirected();
    internal static string get_MissingOutputFormatParameter();
    internal static string get_MissingInputFormatParameter();
    internal static string get_BadFormatParameterValue();
    internal static string get_ArgsAlreadySpecified();
    internal static string get_MissingArgsValue();
    internal static string get_MissingFileArgument();
    internal static string get_MissingWindowStyleArgument();
    internal static string get_InvalidFileArgument();
    internal static string get_InvalidWindowStyleArgument();
    internal static string get_InvalidFileArgumentExtension();
    internal static string get_ArgumentFileDoesNotExist();
    internal static string get_BadArgsValue();
    internal static string get_BadCommandValue();
    internal static string get_MissingExecutionPolicyParameter();
    internal static string get_MtaStaMutuallyExclusive();
    internal static string get_MissingConfigurationNameArgument();
    internal static string get_MissingConfigurationFileArgument();
    internal static string get_MissingCustomPipeNameArgument();
    internal static string get_CustomPipeNameTooLong();
    internal static string get_MissingSettingsFileArgument();
    internal static string get_InvalidSettingsFileArgument();
    internal static string get_SettingsFileNotExists();
    internal static string get_InvalidArgument();
    internal static string get_WindowStyleArgumentNotImplemented();
    internal static string get_MissingWorkingDirectoryArgument();
    internal static string get_MTANotImplemented();
    internal static string get_STANotImplemented();
    internal static string get_NullElementInArgs();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ConsoleControlStrings : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AddBreakHandlerExceptionMessage { get; }
    internal static string RemoveBreakHandlerExceptionTemplate { get; }
    internal static string GetInputModeExceptionTemplate { get; }
    internal static string GetActiveScreenBufferHandleExceptionTemplate { get; }
    internal static string GetModeExceptionTemplate { get; }
    internal static string SetModeExceptionTemplate { get; }
    internal static string ReadConsoleExceptionTemplate { get; }
    internal static string ReadConsoleInputExceptionTemplate { get; }
    internal static string PeekConsoleInputExceptionTemplate { get; }
    internal static string GetNumberOfConsoleInputEventsExceptionTemplate { get; }
    internal static string FlushConsoleInputBufferExceptionTemplate { get; }
    internal static string GetConsoleScreenBufferInfoExceptionTemplate { get; }
    internal static string SetConsoleScreenBufferSizeExceptionTemplate { get; }
    internal static string WriteConsoleOutputExceptionTemplate { get; }
    internal static string ReadConsoleOutputExceptionTemplate { get; }
    internal static string FillConsoleOutputCharacterExceptionTemplate { get; }
    internal static string FillConsoleOutputAttributeExceptionTemplate { get; }
    internal static string ScrollConsoleScreenBufferExceptionTemplate { get; }
    internal static string SetConsoleWindowInfoExceptionTemplate { get; }
    internal static string GetLargestConsoleWindowSizeExceptionTemplate { get; }
    internal static string SetConsoleWindowTitleExceptionTemplate { get; }
    internal static string WriteConsoleExceptionTemplate { get; }
    internal static string SetConsoleTextAttributeExceptionTemplate { get; }
    internal static string GetConsoleCursorInfoExceptionTemplate { get; }
    internal static string SetConsoleCursorInfoExceptionTemplate { get; }
    internal static string GetConsoleFontInfoExceptionTemplate { get; }
    internal static string SendKeyPressInputExceptionTemplate { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AddBreakHandlerExceptionMessage();
    internal static string get_RemoveBreakHandlerExceptionTemplate();
    internal static string get_GetInputModeExceptionTemplate();
    internal static string get_GetActiveScreenBufferHandleExceptionTemplate();
    internal static string get_GetModeExceptionTemplate();
    internal static string get_SetModeExceptionTemplate();
    internal static string get_ReadConsoleExceptionTemplate();
    internal static string get_ReadConsoleInputExceptionTemplate();
    internal static string get_PeekConsoleInputExceptionTemplate();
    internal static string get_GetNumberOfConsoleInputEventsExceptionTemplate();
    internal static string get_FlushConsoleInputBufferExceptionTemplate();
    internal static string get_GetConsoleScreenBufferInfoExceptionTemplate();
    internal static string get_SetConsoleScreenBufferSizeExceptionTemplate();
    internal static string get_WriteConsoleOutputExceptionTemplate();
    internal static string get_ReadConsoleOutputExceptionTemplate();
    internal static string get_FillConsoleOutputCharacterExceptionTemplate();
    internal static string get_FillConsoleOutputAttributeExceptionTemplate();
    internal static string get_ScrollConsoleScreenBufferExceptionTemplate();
    internal static string get_SetConsoleWindowInfoExceptionTemplate();
    internal static string get_GetLargestConsoleWindowSizeExceptionTemplate();
    internal static string get_SetConsoleWindowTitleExceptionTemplate();
    internal static string get_WriteConsoleExceptionTemplate();
    internal static string get_SetConsoleTextAttributeExceptionTemplate();
    internal static string get_GetConsoleCursorInfoExceptionTemplate();
    internal static string get_SetConsoleCursorInfoExceptionTemplate();
    internal static string get_GetConsoleFontInfoExceptionTemplate();
    internal static string get_SendKeyPressInputExceptionTemplate();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ConsoleHostRawUserInterfaceStrings : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CoordinateOutOfBufferErrorTemplate { get; }
    internal static string InvalidBufferSizeError { get; }
    internal static string InvalidConsoleColorError { get; }
    internal static string InvalidCursorSizeError { get; }
    internal static string InvalidReadKeyOptionsError { get; }
    internal static string InvalidRegionErrorTemplate { get; }
    internal static string InvalidXWindowPositionError { get; }
    internal static string InvalidYWindowPositionError { get; }
    internal static string WindowWidthTooSmallError { get; }
    internal static string WindowHeightTooSmallError { get; }
    internal static string WindowWidthLargerThanBufferError { get; }
    internal static string WindowHeightLargerThanBufferError { get; }
    internal static string WindowWidthTooLargeErrorTemplate { get; }
    internal static string WindowHeightTooLargeErrorTemplate { get; }
    internal static string WindowTooNarrowError { get; }
    internal static string WindowTooShortError { get; }
    internal static string WindowTitleTooShortError { get; }
    internal static string WindowTitleTooLongErrorTemplate { get; }
    internal static string WindowTitleElevatedPrefix { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CoordinateOutOfBufferErrorTemplate();
    internal static string get_InvalidBufferSizeError();
    internal static string get_InvalidConsoleColorError();
    internal static string get_InvalidCursorSizeError();
    internal static string get_InvalidReadKeyOptionsError();
    internal static string get_InvalidRegionErrorTemplate();
    internal static string get_InvalidXWindowPositionError();
    internal static string get_InvalidYWindowPositionError();
    internal static string get_WindowWidthTooSmallError();
    internal static string get_WindowHeightTooSmallError();
    internal static string get_WindowWidthLargerThanBufferError();
    internal static string get_WindowHeightLargerThanBufferError();
    internal static string get_WindowWidthTooLargeErrorTemplate();
    internal static string get_WindowHeightTooLargeErrorTemplate();
    internal static string get_WindowTooNarrowError();
    internal static string get_WindowTooShortError();
    internal static string get_WindowTitleTooShortError();
    internal static string get_WindowTitleTooLongErrorTemplate();
    internal static string get_WindowTitleElevatedPrefix();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ConsoleHostStrings : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string TooManyNestedPromptsError { get; }
    internal static string InputExitCurrentLoopOutOfSyncError { get; }
    internal static string DefaultPrompt { get; }
    internal static string ShellCannotBeStarted { get; }
    internal static string ShellCannotBeStartedWithConfigConflict { get; }
    internal static string UnhandledExceptionShutdownMessage { get; }
    internal static string TranscriptPrologue { get; }
    internal static string TranscriptEpilogue { get; }
    internal static string InitialCommandNotExecuted { get; }
    internal static string CommandNotExecuted { get; }
    internal static string EnteringDebugger { get; }
    internal static string HitBreakpoint { get; }
    internal static string DebuggerSourceCodeFormat { get; }
    internal static string SessionDoesNotSupportDebugger { get; }
    internal static string CannotLoadPSReadline { get; }
    internal static string ConflictingServerModeParameters { get; }
    internal static string SlowProfileLoadingMessage { get; }
    internal static string RunAsAdministrator { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_TooManyNestedPromptsError();
    internal static string get_InputExitCurrentLoopOutOfSyncError();
    internal static string get_DefaultPrompt();
    internal static string get_ShellCannotBeStarted();
    internal static string get_ShellCannotBeStartedWithConfigConflict();
    internal static string get_UnhandledExceptionShutdownMessage();
    internal static string get_TranscriptPrologue();
    internal static string get_TranscriptEpilogue();
    internal static string get_InitialCommandNotExecuted();
    internal static string get_CommandNotExecuted();
    internal static string get_EnteringDebugger();
    internal static string get_HitBreakpoint();
    internal static string get_DebuggerSourceCodeFormat();
    internal static string get_SessionDoesNotSupportDebugger();
    internal static string get_CannotLoadPSReadline();
    internal static string get_ConflictingServerModeParameters();
    internal static string get_SlowProfileLoadingMessage();
    internal static string get_RunAsAdministrator();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ConsoleHostUserInterfaceSecurityResources : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string PromptForCredential_User { get; }
    internal static string PromptForCredential_Password { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_PromptForCredential_User();
    internal static string get_PromptForCredential_Password();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ConsoleHostUserInterfaceStrings : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string PromptEmptyDescriptionsErrorTemplate { get; }
    internal static string PromptParseOverflowErrorTemplate { get; }
    internal static string PromptParseFormatErrorTemplate { get; }
    internal static string PromptUnrecognizedCommandErrorTemplate { get; }
    internal static string PromptNoHelpAvailableErrorTemplate { get; }
    internal static string PromptFieldPromptInputSeparatorTemplate { get; }
    internal static string RankZeroArrayErrorTemplate { get; }
    internal static string EmptyChoicesErrorTemplate { get; }
    internal static string InvalidDefaultChoiceErrorTemplate { get; }
    internal static string InvalidDefaultChoiceForMultipleSelection { get; }
    internal static string PromptForChoiceHelp { get; }
    internal static string PromptCanceledError { get; }
    internal static string InvalidChoiceHotKeyError { get; }
    internal static string PromptTypeLoadErrorTemplate { get; }
    internal static string NullOrEmptyErrorTemplate { get; }
    internal static string NullErrorTemplate { get; }
    internal static string PromptHelp { get; }
    internal static string DefaultChoicePrompt { get; }
    internal static string DefaultChoiceForMultipleChoices { get; }
    internal static string DefaultChoicesForMultipleChoices { get; }
    internal static string ChoiceMessage { get; }
    internal static string DebugFormatString { get; }
    internal static string VerboseFormatString { get; }
    internal static string WarningFormatString { get; }
    internal static string ReadFailsOnNonInteractiveFlag { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_PromptEmptyDescriptionsErrorTemplate();
    internal static string get_PromptParseOverflowErrorTemplate();
    internal static string get_PromptParseFormatErrorTemplate();
    internal static string get_PromptUnrecognizedCommandErrorTemplate();
    internal static string get_PromptNoHelpAvailableErrorTemplate();
    internal static string get_PromptFieldPromptInputSeparatorTemplate();
    internal static string get_RankZeroArrayErrorTemplate();
    internal static string get_EmptyChoicesErrorTemplate();
    internal static string get_InvalidDefaultChoiceErrorTemplate();
    internal static string get_InvalidDefaultChoiceForMultipleSelection();
    internal static string get_PromptForChoiceHelp();
    internal static string get_PromptCanceledError();
    internal static string get_InvalidChoiceHotKeyError();
    internal static string get_PromptTypeLoadErrorTemplate();
    internal static string get_NullOrEmptyErrorTemplate();
    internal static string get_NullErrorTemplate();
    internal static string get_PromptHelp();
    internal static string get_DefaultChoicePrompt();
    internal static string get_DefaultChoiceForMultipleChoices();
    internal static string get_DefaultChoicesForMultipleChoices();
    internal static string get_ChoiceMessage();
    internal static string get_DebugFormatString();
    internal static string get_VerboseFormatString();
    internal static string get_WarningFormatString();
    internal static string get_ReadFailsOnNonInteractiveFlag();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ManagedEntranceStrings : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ShellBannerNonWindowsPowerShell { get; }
    internal static string ShellBannerCLMode { get; }
    internal static string ShellBannerCLAuditMode { get; }
    internal static string ShellBannerNLMode { get; }
    internal static string ShellBannerRLMode { get; }
    internal static string PSReadLineDisabledWhenScreenReaderIsActive { get; }
    internal static string PreviewUpdateNotificationMessage { get; }
    internal static string StableUpdateNotificationMessage { get; }
    internal static string LTSUpdateNotificationMessage { get; }
    internal static string UsageHelp { get; }
    internal static string ExtendedHelp { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ShellBannerNonWindowsPowerShell();
    internal static string get_ShellBannerCLMode();
    internal static string get_ShellBannerCLAuditMode();
    internal static string get_ShellBannerNLMode();
    internal static string get_ShellBannerRLMode();
    internal static string get_PSReadLineDisabledWhenScreenReaderIsActive();
    internal static string get_PreviewUpdateNotificationMessage();
    internal static string get_StableUpdateNotificationMessage();
    internal static string get_LTSUpdateNotificationMessage();
    internal static string get_UsageHelp();
    internal static string get_ExtendedHelp();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.PowerShell.CommandLineParameterParser : object {
    internal Nullable`1<bool> InputRedirectedTestHook;
    internal ParameterBitmap ParametersUsed;
    internal double ParametersUsedAsDouble { get; }
    internal bool AbortStartup { get; }
    internal string SettingsFile { get; }
    internal string InitialCommand { get; }
    internal bool WasInitialCommandEncoded { get; }
    internal bool ShowBanner { get; }
    internal bool NoExit { get; }
    internal bool SkipProfiles { get; }
    internal UInt32 ExitCode { get; }
    internal bool ExplicitReadCommandsFromStdin { get; }
    internal bool NoPrompt { get; }
    [NullableAttribute("1")]
internal Collection`1<CommandParameter> Args { get; }
    internal string ConfigurationFile { get; }
    internal string ConfigurationName { get; internal set; }
    internal bool SocketServerMode { get; }
    internal bool NamedPipeServerMode { get; }
    internal bool SSHServerMode { get; }
    internal bool ServerMode { get; }
    internal string ErrorMessage { get; }
    internal bool ShowShortHelp { get; }
    internal bool ShowExtendedHelp { get; }
    internal bool NoProfileLoadTime { get; }
    internal bool ShowVersion { get; }
    internal string CustomPipeName { get; }
    internal DataFormat OutputFormat { get; }
    internal bool OutputFormatSpecified { get; }
    internal DataFormat InputFormat { get; }
    internal string File { get; }
    internal string ExecutionPolicy { get; }
    internal bool StaMode { get; }
    internal bool ThrowOnReadAndPrompt { get; }
    internal bool NonInteractive { get; }
    internal string WorkingDirectory { get; }
    internal static int MaxNameLength();
    internal double get_ParametersUsedAsDouble();
    internal bool get_AbortStartup();
    internal string get_SettingsFile();
    internal string get_InitialCommand();
    internal bool get_WasInitialCommandEncoded();
    internal bool get_ShowBanner();
    internal bool get_NoExit();
    internal bool get_SkipProfiles();
    internal UInt32 get_ExitCode();
    internal bool get_ExplicitReadCommandsFromStdin();
    internal bool get_NoPrompt();
    [NullableContextAttribute("1")]
internal Collection`1<CommandParameter> get_Args();
    internal string get_ConfigurationFile();
    internal string get_ConfigurationName();
    internal void set_ConfigurationName(string value);
    internal bool get_SocketServerMode();
    internal bool get_NamedPipeServerMode();
    internal bool get_SSHServerMode();
    internal bool get_ServerMode();
    internal string get_ErrorMessage();
    internal bool get_ShowShortHelp();
    internal bool get_ShowExtendedHelp();
    internal bool get_NoProfileLoadTime();
    internal bool get_ShowVersion();
    internal string get_CustomPipeName();
    internal DataFormat get_OutputFormat();
    internal bool get_OutputFormatSpecified();
    internal DataFormat get_InputFormat();
    internal string get_File();
    internal string get_ExecutionPolicy();
    internal bool get_StaMode();
    internal bool get_ThrowOnReadAndPrompt();
    internal bool get_NonInteractive();
    internal string get_WorkingDirectory();
    [NullableContextAttribute("1")]
internal static string GetConfigurationNameFromGroupPolicy();
    [NullableContextAttribute("1")]
internal static string NormalizeFilePath(string path);
    [NullableContextAttribute("1")]
internal void Parse(String[] args);
    internal void ShowErrorHelpBanner(PSHostUserInterface hostUI, string bannerText, string helpText);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static object <CollectPSArgs>g__ConvertToBoolIfPossible|92_0(string arg);
}
[CmdletAttribute("Start", "Transcript")]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.StartTranscriptCommand : PSCmdlet {
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string Path { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ValidateNotNullOrEmptyAttribute]
public string LiteralPath { get; public set; }
    [ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public string OutputDirectory { get; public set; }
    [ParameterAttribute]
public SwitchParameter Append { get; public set; }
    [ParameterAttribute]
public SwitchParameter Force { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SwitchParameter NoClobber { get; public set; }
    [ParameterAttribute]
public SwitchParameter IncludeInvocationHeader { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseMinimalHeader { get; public set; }
    public string get_Path();
    public void set_Path(string value);
    public string get_LiteralPath();
    public void set_LiteralPath(string value);
    [CompilerGeneratedAttribute]
public string get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(string value);
    public SwitchParameter get_Append();
    public void set_Append(SwitchParameter value);
    public SwitchParameter get_Force();
    public void set_Force(SwitchParameter value);
    public SwitchParameter get_NoClobber();
    public void set_NoClobber(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_IncludeInvocationHeader();
    [CompilerGeneratedAttribute]
public void set_IncludeInvocationHeader(SwitchParameter value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_UseMinimalHeader();
    [CompilerGeneratedAttribute]
public void set_UseMinimalHeader(SwitchParameter value);
    protected virtual void BeginProcessing();
}
[CmdletAttribute("Stop", "Transcript")]
[OutputTypeAttribute("System.String")]
public class Microsoft.PowerShell.Commands.StopTranscriptCommand : PSCmdlet {
    protected virtual void BeginProcessing();
}
internal static class Microsoft.PowerShell.ConsoleControl : object {
    internal static int ControlSequenceLength(string str, Int32& offset);
    internal static int LengthInBufferCells(string str, int offset, bool checkEscapeSequences);
    internal static int LengthInBufferCells(char c);
}
internal class Microsoft.PowerShell.ConsoleHost : PSHost {
    internal static int ExitCodeSuccess;
    internal static int ExitCodeCtrlBreak;
    internal static int ExitCodeInitFailure;
    internal static int ExitCodeBadCommandLineParameter;
    internal static string DECCKM_ON;
    internal static string DECCKM_OFF;
    internal UInt32 ExitCode;
    internal ConsoleHostUserInterface ui;
    internal object hostGlobalLock;
    internal Pipeline runningCmd;
    internal static InitialSessionState DefaultInitialSessionState;
    internal static ConsoleHost SingletonInstance { get; }
    public string Name { get; }
    public Version Version { get; }
    public Guid InstanceId { get; }
    public PSHostUserInterface UI { get; }
    public bool IsRunspacePushed { get; }
    public Runspace Runspace { get; }
    internal LocalRunspace LocalRunspace { get; }
    public PSObject PrivateData { get; }
    public CultureInfo CurrentCulture { get; }
    public CultureInfo CurrentUICulture { get; }
    internal bool ShouldEndSession { get; internal set; }
    internal RunspaceRef RunspaceRef { get; }
    internal DataFormat OutputFormat { get; }
    internal bool OutputFormatSpecified { get; }
    internal DataFormat InputFormat { get; }
    internal DataFormat ErrorFormat { get; }
    internal bool IsRunningAsync { get; }
    internal bool IsNested { get; }
    internal WrappedSerializer OutputSerializer { get; }
    internal WrappedSerializer ErrorSerializer { get; }
    internal bool IsInteractive { get; }
    internal TextWriter ConsoleTextWriter { get; }
    internal bool DebuggerCanStopCommand { get; internal set; }
    internal Lazy`1<TextReader> ConsoleIn { get; }
    internal bool IsTranscribing { get; internal set; }
    internal static int Start(string bannerText, string helpText, bool issProvidedExternally);
    internal static void ParseCommandLine(String[] args);
    internal static ConsoleHost CreateSingletonInstance();
    internal static ConsoleHost get_SingletonInstance();
    public virtual string get_Name();
    public virtual Version get_Version();
    [CompilerGeneratedAttribute]
public virtual Guid get_InstanceId();
    public virtual PSHostUserInterface get_UI();
    public sealed virtual void PushRunspace(Runspace newRunspace);
    public sealed virtual void PopRunspace();
    public sealed virtual bool get_IsRunspacePushed();
    public sealed virtual Runspace get_Runspace();
    internal LocalRunspace get_LocalRunspace();
    public virtual PSObject get_PrivateData();
    public virtual CultureInfo get_CurrentCulture();
    public virtual CultureInfo get_CurrentUICulture();
    public virtual void SetShouldExit(int exitCode);
    public virtual void EnterNestedPrompt();
    public virtual void ExitNestedPrompt();
    public virtual void NotifyBeginApplication();
    public virtual void NotifyEndApplication();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    internal bool get_ShouldEndSession();
    internal void set_ShouldEndSession(bool value);
    internal RunspaceRef get_RunspaceRef();
    [CompilerGeneratedAttribute]
internal DataFormat get_OutputFormat();
    [CompilerGeneratedAttribute]
internal bool get_OutputFormatSpecified();
    [CompilerGeneratedAttribute]
internal DataFormat get_InputFormat();
    internal DataFormat get_ErrorFormat();
    internal bool get_IsRunningAsync();
    [CompilerGeneratedAttribute]
internal bool get_IsNested();
    internal WrappedSerializer get_OutputSerializer();
    internal WrappedSerializer get_ErrorSerializer();
    internal bool get_IsInteractive();
    internal TextWriter get_ConsoleTextWriter();
    internal static string EscapeSingleQuotes(string str);
    [CompilerGeneratedAttribute]
internal void add_RunspacePopped(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_RunspacePopped(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_RunspacePushed(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_RunspacePushed(EventHandler value);
    [CompilerGeneratedAttribute]
internal bool get_DebuggerCanStopCommand();
    [CompilerGeneratedAttribute]
internal void set_DebuggerCanStopCommand(bool value);
    [CompilerGeneratedAttribute]
internal Lazy`1<TextReader> get_ConsoleIn();
    internal bool get_IsTranscribing();
    internal void set_IsTranscribing(bool value);
    internal string StopTranscribing();
    internal void WriteToTranscript(ReadOnlySpan`1<char> text);
    internal void WriteLineToTranscript(ReadOnlySpan`1<char> text);
    internal void WriteToTranscript(ReadOnlySpan`1<char> text, bool newLine);
}
internal class Microsoft.PowerShell.ConsoleHostRawUserInterface : PSHostRawUserInterface {
    public ConsoleColor BackgroundColor { get; public set; }
    public Size BufferSize { get; public set; }
    public Coordinates CursorPosition { get; public set; }
    public int CursorSize { get; public set; }
    public ConsoleColor ForegroundColor { get; public set; }
    public bool KeyAvailable { get; }
    public Size MaxPhysicalWindowSize { get; }
    public Size MaxWindowSize { get; }
    public Coordinates WindowPosition { get; public set; }
    public Size WindowSize { get; public set; }
    public string WindowTitle { get; public set; }
    internal ConsoleHostRawUserInterface(ConsoleHostUserInterface mshConsole);
    public virtual ConsoleColor get_BackgroundColor();
    public virtual void set_BackgroundColor(ConsoleColor value);
    public virtual Size get_BufferSize();
    public virtual void set_BufferSize(Size value);
    public virtual Coordinates get_CursorPosition();
    public virtual void set_CursorPosition(Coordinates value);
    public virtual int get_CursorSize();
    public virtual void set_CursorSize(int value);
    public virtual ConsoleColor get_ForegroundColor();
    public virtual void set_ForegroundColor(ConsoleColor value);
    public virtual bool get_KeyAvailable();
    public virtual Size get_MaxPhysicalWindowSize();
    public virtual Size get_MaxWindowSize();
    public virtual Coordinates get_WindowPosition();
    public virtual void set_WindowPosition(Coordinates value);
    public virtual Size get_WindowSize();
    public virtual void set_WindowSize(Size value);
    public virtual string get_WindowTitle();
    public virtual void set_WindowTitle(string value);
    public virtual void FlushInputBuffer();
    public void ScrollBuffer(int lines);
    public virtual BufferCell[0...,0...] GetBufferContents(Rectangle rectangle);
    public virtual KeyInfo ReadKey(ReadKeyOptions options);
    public virtual void ScrollBufferContents(Rectangle source, Coordinates destination, Rectangle clip, BufferCell fill);
    public virtual void SetBufferContents(Coordinates origin, BufferCell[0...,0...] contents);
    public virtual void SetBufferContents(Rectangle rectangle, BufferCell fill);
    public virtual int LengthInBufferCells(string s);
    public virtual int LengthInBufferCells(string s, int offset);
}
internal class Microsoft.PowerShell.ConsoleHostUserInterface : PSHostUserInterface {
    internal static string Crlf;
    public bool SupportsVirtualTerminal { get; }
    public PSHostRawUserInterface RawUI { get; }
    internal bool IsCommandCompletionRunning { get; }
    internal bool ReadFromStdin { get; internal set; }
    internal bool NoPrompt { get; internal set; }
    public ConsoleColor FormatAccentColor { get; public set; }
    public ConsoleColor ErrorAccentColor { get; public set; }
    public ConsoleColor ErrorForegroundColor { get; public set; }
    public ConsoleColor ErrorBackgroundColor { get; public set; }
    public ConsoleColor WarningForegroundColor { get; public set; }
    public ConsoleColor WarningBackgroundColor { get; public set; }
    public ConsoleColor DebugForegroundColor { get; public set; }
    public ConsoleColor DebugBackgroundColor { get; public set; }
    public ConsoleColor VerboseForegroundColor { get; public set; }
    public ConsoleColor VerboseBackgroundColor { get; public set; }
    public ConsoleColor ProgressForegroundColor { get; public set; }
    public ConsoleColor ProgressBackgroundColor { get; public set; }
    unknown bool ThrowOnReadAndPrompt {internal set; }
    internal ConsoleHostUserInterface(ConsoleHost parent);
    [CompilerGeneratedAttribute]
public virtual bool get_SupportsVirtualTerminal();
    internal bool TryTurnOnVirtualTerminal();
    public virtual PSHostRawUserInterface get_RawUI();
    internal bool get_IsCommandCompletionRunning();
    [CompilerGeneratedAttribute]
internal bool get_ReadFromStdin();
    [CompilerGeneratedAttribute]
internal void set_ReadFromStdin(bool value);
    [CompilerGeneratedAttribute]
internal bool get_NoPrompt();
    [CompilerGeneratedAttribute]
internal void set_NoPrompt(bool value);
    public virtual string ReadLine();
    public virtual SecureString ReadLineAsSecureString();
    internal void WriteToConsole(char c, bool transcribeResult);
    internal void WriteToConsole(ReadOnlySpan`1<char> value, bool transcribeResult);
    internal void WriteLineToConsole(ReadOnlySpan`1<char> value, bool transcribeResult);
    public virtual void Write(string value);
    public virtual void Write(ConsoleColor foregroundColor, ConsoleColor backgroundColor, string value);
    public virtual void WriteLine(ConsoleColor foregroundColor, ConsoleColor backgroundColor, string value);
    public virtual void WriteLine(string value);
    public virtual void WriteLine();
    internal List`1<string> WrapText(string text, int maxWidthInBufferCells);
    internal List`1<Word> ChopTextIntoWords(string text, int maxWidthInBufferCells);
    internal void AddWord(string text, int startIndex, int endIndex, int maxWidthInBufferCells, bool isWhitespace, List`1& result);
    internal string WrapToCurrentWindowWidth(string text);
    public virtual void WriteDebugLine(string message);
    public virtual void WriteInformation(InformationRecord record);
    public virtual void WriteVerboseLine(string message);
    public virtual void WriteWarningLine(string message);
    public virtual void WriteProgress(long sourceId, ProgressRecord record);
    public virtual void WriteErrorLine(string value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_FormatAccentColor();
    [CompilerGeneratedAttribute]
public void set_FormatAccentColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_ErrorAccentColor();
    [CompilerGeneratedAttribute]
public void set_ErrorAccentColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_ErrorForegroundColor();
    [CompilerGeneratedAttribute]
public void set_ErrorForegroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_ErrorBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_ErrorBackgroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_WarningForegroundColor();
    [CompilerGeneratedAttribute]
public void set_WarningForegroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_WarningBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_WarningBackgroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_DebugForegroundColor();
    [CompilerGeneratedAttribute]
public void set_DebugForegroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_DebugBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_DebugBackgroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_VerboseForegroundColor();
    [CompilerGeneratedAttribute]
public void set_VerboseForegroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_VerboseBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_VerboseBackgroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_ProgressForegroundColor();
    [CompilerGeneratedAttribute]
public void set_ProgressForegroundColor(ConsoleColor value);
    [CompilerGeneratedAttribute]
public ConsoleColor get_ProgressBackgroundColor();
    [CompilerGeneratedAttribute]
public void set_ProgressBackgroundColor(ConsoleColor value);
    internal string ReadLine(bool endOnTab, string initialContent, ReadLineResult& result, bool calledFromPipeline, bool transcribeResult);
    internal string ReadLineWithTabCompletion(Executor exec);
    internal void set_ThrowOnReadAndPrompt(bool value);
    internal void HandleThrowOnReadAndPrompt();
    internal void ResetProgress();
    public virtual Dictionary`2<string, PSObject> Prompt(string caption, string message, Collection`1<FieldDescription> descriptions);
    public virtual int PromptForChoice(string caption, string message, Collection`1<ChoiceDescription> choices, int defaultChoice);
    public sealed virtual Collection`1<int> PromptForChoice(string caption, string message, Collection`1<ChoiceDescription> choices, IEnumerable`1<int> defaultChoices);
    public virtual PSCredential PromptForCredential(string caption, string message, string userName, string targetName);
    public virtual PSCredential PromptForCredential(string caption, string message, string userName, string targetName, PSCredentialTypes allowedCredentialTypes, PSCredentialUIOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.PowerShell.ConsoleShell : object {
    [NullableContextAttribute("2")]
public static int Start(string bannerText, string helpText, String[] args);
    public static int Start(InitialSessionState initialSessionState, string bannerText, string helpText, String[] args);
}
internal class Microsoft.PowerShell.ConsoleTextWriter : TextWriter {
    public Encoding Encoding { get; }
    internal ConsoleTextWriter(ConsoleHostUserInterface ui);
    public virtual Encoding get_Encoding();
    public virtual void Write(string value);
    public virtual void Write(ReadOnlySpan`1<char> value);
    public virtual void WriteLine(string value);
    public virtual void WriteLine(ReadOnlySpan`1<char> value);
    public virtual void Write(bool b);
    public virtual void Write(char c);
    public virtual void Write(Char[] a);
}
internal class Microsoft.PowerShell.Executor : object {
    internal bool useNestedPipelines;
    internal static Executor CurrentExecutor { get; internal set; }
    internal Executor(ConsoleHost parent, bool useNestedPipelines, bool isPromptFunctionExecutor);
    internal void ExecuteCommandAsync(string command, Exception& exceptionThrown, ExecutionOptions options);
    internal void ExecuteCommandAsyncHelper(Pipeline tempPipeline, Exception& exceptionThrown, ExecutionOptions options);
    internal Pipeline CreatePipeline();
    internal Pipeline CreatePipeline(string command, bool addToHistory);
    internal Collection`1<PSObject> ExecuteCommand(string command, Exception& exceptionThrown, ExecutionOptions options);
    internal Collection`1<PSObject> ExecuteCommandHelper(Pipeline tempPipeline, Exception& exceptionThrown, ExecutionOptions options);
    internal Collection`1<PSObject> ExecuteCommand(string command);
    internal string ExecuteCommandAndGetResultAsString(string command, Exception& exceptionThrown);
    internal Nullable`1<bool> ExecuteCommandAndGetResultAsBool(string command);
    internal Nullable`1<bool> ExecuteCommandAndGetResultAsBool(string command, Exception& exceptionThrown);
    internal void BlockCommandOutput();
    internal void ResumeCommandOutput();
    internal static Executor get_CurrentExecutor();
    internal static void set_CurrentExecutor(Executor value);
    internal static void CancelCurrentExecutor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.PowerShell.NullHostUserInterface : PSHostUserInterface {
    [NullableAttribute("2")]
public PSHostRawUserInterface RawUI { get; }
    [NullableContextAttribute("2")]
public virtual PSHostRawUserInterface get_RawUI();
    public virtual Dictionary`2<string, PSObject> Prompt(string caption, string message, Collection`1<FieldDescription> descriptions);
    public virtual int PromptForChoice(string caption, string message, Collection`1<ChoiceDescription> choices, int defaultChoice);
    public virtual PSCredential PromptForCredential(string caption, string message, string userName, string targetName);
    public virtual PSCredential PromptForCredential(string caption, string message, string userName, string targetName, PSCredentialTypes allowedCredentialTypes, PSCredentialUIOptions options);
    public virtual string ReadLine();
    public virtual SecureString ReadLineAsSecureString();
    public virtual void Write(string value);
    public virtual void Write(ConsoleColor foregroundColor, ConsoleColor backgroundColor, string value);
    public virtual void WriteDebugLine(string message);
    public virtual void WriteErrorLine(string value);
    public virtual void WriteLine(string value);
    public virtual void WriteProgress(long sourceId, ProgressRecord record);
    public virtual void WriteVerboseLine(string message);
    public virtual void WriteWarningLine(string message);
}
internal class Microsoft.PowerShell.PendingProgress : object {
    internal void Update(long sourceId, ProgressRecord record);
    internal String[] Render(int maxWidth, int maxHeight, PSHostRawUserInterface rawUI);
}
internal class Microsoft.PowerShell.ProgressNode : ProgressRecord {
    internal ArrayList Children;
    internal int Age;
    internal RenderStyle Style;
    internal long SourceId;
    internal ProgressNode(long sourceId, ProgressRecord record);
    internal void Render(ArrayList strCollection, int indentation, int maxWidth, PSHostRawUserInterface rawUI);
    internal static bool IsMinimalProgressRenderingEnabled();
    internal int LinesRequiredMethod(PSHostRawUserInterface rawUi, int maxWidth);
}
internal class Microsoft.PowerShell.ProgressPane : object {
    internal bool IsShowing { get; }
    internal ProgressPane(ConsoleHostUserInterface ui);
    internal bool get_IsShowing();
    internal void Show();
    internal void Hide();
    internal void Show(PendingProgress pendingProgress);
}
internal class Microsoft.PowerShell.RunspaceCreationEventArgs : EventArgs {
    internal string InitialCommand { get; internal set; }
    internal bool SkipProfiles { get; internal set; }
    internal bool StaMode { get; internal set; }
    internal string ConfigurationName { get; internal set; }
    internal string ConfigurationFilePath { get; internal set; }
    internal Collection`1<CommandParameter> InitialCommandArgs { get; internal set; }
    internal RunspaceCreationEventArgs(string initialCommand, bool skipProfiles, bool staMode, string configurationName, string configurationFilePath, Collection`1<CommandParameter> initialCommandArgs);
    [CompilerGeneratedAttribute]
internal string get_InitialCommand();
    [CompilerGeneratedAttribute]
internal void set_InitialCommand(string value);
    [CompilerGeneratedAttribute]
internal bool get_SkipProfiles();
    [CompilerGeneratedAttribute]
internal void set_SkipProfiles(bool value);
    [CompilerGeneratedAttribute]
internal bool get_StaMode();
    [CompilerGeneratedAttribute]
internal void set_StaMode(bool value);
    [CompilerGeneratedAttribute]
internal string get_ConfigurationName();
    [CompilerGeneratedAttribute]
internal void set_ConfigurationName(string value);
    [CompilerGeneratedAttribute]
internal string get_ConfigurationFilePath();
    [CompilerGeneratedAttribute]
internal void set_ConfigurationFilePath(string value);
    [CompilerGeneratedAttribute]
internal Collection`1<CommandParameter> get_InitialCommandArgs();
    [CompilerGeneratedAttribute]
internal void set_InitialCommandArgs(Collection`1<CommandParameter> value);
}
internal class Microsoft.PowerShell.Serialization : object {
    protected static string XmlCliTag;
    protected string streamName;
    protected DataFormat format;
    protected Serialization(DataFormat dataFormat, string streamName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.PowerShell.UnmanagedPSEntry : object {
    [ObsoleteAttribute("Callers should now use UnmanagedPSEntry.Start(string[], int)", "True")]
public static int Start(string consoleFilePath, String[] args, int argc);
    public static int Start(String[] args, int argc);
}
internal static class Microsoft.PowerShell.UpdatesNotification : object {
    internal static bool CanNotifyUpdates;
    internal static void ShowUpdateNotification(PSHostUserInterface hostUI);
    [AsyncStateMachineAttribute("Microsoft.PowerShell.UpdatesNotification/<CheckForUpdates>d__15")]
internal static Task CheckForUpdates();
}
internal class Microsoft.PowerShell.WrappedDeserializer : Serialization {
    internal TextReader textReader;
    internal bool AtEnd { get; }
    internal WrappedDeserializer(DataFormat dataFormat, string streamName, TextReader input);
    internal object Deserialize();
    internal bool get_AtEnd();
    internal void End();
}
internal class Microsoft.PowerShell.WrappedSerializer : Serialization {
    internal TextWriter textWriter;
    internal WrappedSerializer(DataFormat dataFormat, string streamName, TextWriter output);
    internal void Serialize(object o);
    internal void Serialize(object o, string streamName);
    internal void End();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class ProgressNodeStrings : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string SecondsRemaining { get; }
    internal static string InvisibleNodesMessageSingular { get; }
    internal static string InvisibleNodesMessagePlural { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_SecondsRemaining();
    internal static string get_InvisibleNodesMessageSingular();
    internal static string get_InvisibleNodesMessagePlural();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class TranscriptStrings : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string TranscriptionStarted { get; }
    internal static string TranscriptionStopped { get; }
    internal static string CannotStartTranscription { get; }
    internal static string ReadWriteFileNotFileSystemProvider { get; }
    internal static string TranscriptFileReadOnly { get; }
    internal static string MultipleFilesNotSupported { get; }
    internal static string TranscriptFileExistsNoClobber { get; }
    internal static string ErrorStoppingTranscript { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_TranscriptionStarted();
    internal static string get_TranscriptionStopped();
    internal static string get_CannotStartTranscription();
    internal static string get_ReadWriteFileNotFileSystemProvider();
    internal static string get_TranscriptFileReadOnly();
    internal static string get_MultipleFilesNotSupported();
    internal static string get_TranscriptFileExistsNoClobber();
    internal static string get_ErrorStoppingTranscript();
}
