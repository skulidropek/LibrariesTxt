public class Microsoft.Recognizers.Text.Choice.Arabic.ArabicBooleanExtractorConfiguration : BaseBooleanExtractorConfiguration {
    public ArabicBooleanExtractorConfiguration(bool onlyTopMatch);
}
public class Microsoft.Recognizers.Text.Choice.BooleanExtractor : ChoiceExtractor {
    public BooleanExtractor(IBooleanExtractorConfiguration config);
}
public class Microsoft.Recognizers.Text.Choice.BooleanModel : ChoiceModel {
    public string ModelTypeName { get; }
    public BooleanModel(IParser parser, IExtractor extractor);
    public virtual string get_ModelTypeName();
    protected virtual SortedDictionary`2<string, object> GetResolution(ParseResult parseResult);
}
public class Microsoft.Recognizers.Text.Choice.BooleanParser : ChoiceParser`1<bool> {
}
public class Microsoft.Recognizers.Text.Choice.BooleanParserConfiguration : object {
    [CompilerGeneratedAttribute]
private static IDictionary`2<string, bool> <Resolutions>k__BackingField;
    public static IDictionary`2<string, bool> Resolutions { get; }
    private IDictionary`2<string, bool> Microsoft.Recognizers.Text.Choice.IChoiceParserConfiguration<System.Boolean>.Resolutions { get; }
    private static BooleanParserConfiguration();
    [CompilerGeneratedAttribute]
public static IDictionary`2<string, bool> get_Resolutions();
    private sealed virtual override IDictionary`2<string, bool> Microsoft.Recognizers.Text.Choice.IChoiceParserConfiguration<System.Boolean>.get_Resolutions();
}
public class Microsoft.Recognizers.Text.Choice.Bulgarian.BulgarianBooleanExtractorConfiguration : BaseBooleanExtractorConfiguration {
    public BulgarianBooleanExtractorConfiguration(bool onlyTopMatch);
}
public class Microsoft.Recognizers.Text.Choice.Chinese.ChineseBooleanExtractorConfiguration : BaseBooleanExtractorConfiguration {
    public ChineseBooleanExtractorConfiguration(bool onlyTopMatch);
}
public class Microsoft.Recognizers.Text.Choice.ChoiceExtractDataResult : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ExtractResult> <OtherMatches>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Score>k__BackingField;
    public IEnumerable`1<ExtractResult> OtherMatches { get; public set; }
    public string Source { get; public set; }
    public double Score { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<ExtractResult> get_OtherMatches();
    [CompilerGeneratedAttribute]
public void set_OtherMatches(IEnumerable`1<ExtractResult> value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public double get_Score();
    [CompilerGeneratedAttribute]
public void set_Score(double value);
}
public class Microsoft.Recognizers.Text.Choice.ChoiceExtractor : object {
    private IChoiceExtractorConfiguration config;
    public ChoiceExtractor(IChoiceExtractorConfiguration config);
    public sealed virtual List`1<ExtractResult> Extract(string text);
    private static int IndexOfToken(List`1<string> tokens, string token, int startPos);
    private double MatchValue(IEnumerable`1<string> source, IEnumerable`1<string> match, int startPosition);
    private IList`1<string> Tokenize(string text);
}
public abstract class Microsoft.Recognizers.Text.Choice.ChoiceModel : object {
    private string culture;
    private string requestedCulture;
    [CompilerGeneratedAttribute]
private IExtractor <Extractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <Parser>k__BackingField;
    public string ModelTypeName { get; }
    public string Culture { get; }
    public string RequestedCulture { get; }
    protected IExtractor Extractor { get; private set; }
    protected IParser Parser { get; private set; }
    protected ChoiceModel(IParser parser, IExtractor extractor);
    public abstract virtual string get_ModelTypeName();
    public sealed virtual string get_Culture();
    public sealed virtual string get_RequestedCulture();
    [CompilerGeneratedAttribute]
protected IExtractor get_Extractor();
    [CompilerGeneratedAttribute]
private void set_Extractor(IExtractor value);
    [CompilerGeneratedAttribute]
protected IParser get_Parser();
    [CompilerGeneratedAttribute]
private void set_Parser(IParser value);
    public sealed virtual List`1<ModelResult> Parse(string query);
    public sealed virtual void SetCultureInfo(string culture, string requestedCulture);
    protected abstract virtual SortedDictionary`2<string, object> GetResolution(ParseResult parseResult);
    [CompilerGeneratedAttribute]
private ParseResult <Parse>b__17_1(ExtractResult r);
    [CompilerGeneratedAttribute]
private ModelResult <Parse>b__17_0(ParseResult pr);
}
[FlagsAttribute]
public enum Microsoft.Recognizers.Text.Choice.ChoiceOptions : Enum {
    public int value__;
    public static ChoiceOptions None;
}
public class Microsoft.Recognizers.Text.Choice.ChoiceParseDataResult : object {
    [CompilerGeneratedAttribute]
private double <Score>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<OtherMatchParseResult> <OtherMatches>k__BackingField;
    public double Score { get; public set; }
    public IEnumerable`1<OtherMatchParseResult> OtherMatches { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Score();
    [CompilerGeneratedAttribute]
public void set_Score(double value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<OtherMatchParseResult> get_OtherMatches();
    [CompilerGeneratedAttribute]
public void set_OtherMatches(IEnumerable`1<OtherMatchParseResult> value);
}
public class Microsoft.Recognizers.Text.Choice.ChoiceParser`1 : object {
    private IChoiceParserConfiguration`1<T> config;
    public ChoiceParser`1(IChoiceParserConfiguration`1<T> config);
    public sealed virtual ParseResult Parse(ExtractResult extResult);
    private OtherMatchParseResult ToOtherMatchResult(ExtractResult extResult);
    [CompilerGeneratedAttribute]
private OtherMatchParseResult <Parse>b__2_0(ExtractResult er);
}
public class Microsoft.Recognizers.Text.Choice.ChoiceRecognizer : Recognizer`1<ChoiceOptions> {
    public ChoiceRecognizer(string targetCulture, ChoiceOptions options, bool lazyInitialization, int timeoutInSeconds);
    public ChoiceRecognizer(string targetCulture, ChoiceOptions options, bool lazyInitialization);
    public ChoiceRecognizer(string targetCulture, int options, bool lazyInitialization);
    public ChoiceRecognizer(ChoiceOptions options, bool lazyInitialization);
    public ChoiceRecognizer(int options, bool lazyInitialization, int timeoutInSeconds);
    public static List`1<ModelResult> RecognizeBoolean(string query, string culture, ChoiceOptions options, bool fallbackToDefaultCulture);
    public IModel GetBooleanModel(string culture, bool fallbackToDefaultCulture);
    protected virtual List`1<Type> GetRelatedTypes();
    protected virtual void InitializeConfiguration();
}
public static class Microsoft.Recognizers.Text.Choice.Constants : object {
    public static string SYS_BOOLEAN_TRUE;
    public static string SYS_BOOLEAN_FALSE;
    public static string MODEL_BOOLEAN;
}
public class Microsoft.Recognizers.Text.Choice.Dutch.DutchBooleanExtractorConfiguration : BaseBooleanExtractorConfiguration {
    public DutchBooleanExtractorConfiguration(bool onlyTopMatch);
}
public class Microsoft.Recognizers.Text.Choice.English.EnglishBooleanExtractorConfiguration : BaseBooleanExtractorConfiguration {
    public EnglishBooleanExtractorConfiguration(bool onlyTopMatch);
}
public abstract class Microsoft.Recognizers.Text.Choice.Extractors.BaseBooleanExtractorConfiguration : object {
    [CompilerGeneratedAttribute]
private Regex <TrueRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FalseRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<Regex, string> <MapRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TokenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPartialMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnlyTopMatch>k__BackingField;
    public static TimeSpan RegexTimeOut { get; }
    public Regex TrueRegex { get; public set; }
    public Regex FalseRegex { get; public set; }
    public IDictionary`2<Regex, string> MapRegexes { get; public set; }
    public Regex TokenRegex { get; public set; }
    public bool AllowPartialMatch { get; public set; }
    public int MaxDistance { get; public set; }
    public bool OnlyTopMatch { get; public set; }
    public BaseBooleanExtractorConfiguration(string trueRegex, string falseRegex, string tokenRegex, RegexOptions options, bool allowPartialMatch, int maxDistance, bool onlyTopMatch);
    public static TimeSpan get_RegexTimeOut();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TrueRegex();
    [CompilerGeneratedAttribute]
public void set_TrueRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FalseRegex();
    [CompilerGeneratedAttribute]
public void set_FalseRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<Regex, string> get_MapRegexes();
    [CompilerGeneratedAttribute]
public void set_MapRegexes(IDictionary`2<Regex, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TokenRegex();
    [CompilerGeneratedAttribute]
public void set_TokenRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowPartialMatch();
    [CompilerGeneratedAttribute]
public void set_AllowPartialMatch(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxDistance();
    [CompilerGeneratedAttribute]
public void set_MaxDistance(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_OnlyTopMatch();
    [CompilerGeneratedAttribute]
public void set_OnlyTopMatch(bool value);
}
public class Microsoft.Recognizers.Text.Choice.French.FrenchBooleanExtractorConfiguration : BaseBooleanExtractorConfiguration {
    public FrenchBooleanExtractorConfiguration(bool onlyTopMatch);
}
public class Microsoft.Recognizers.Text.Choice.German.GermanBooleanExtractorConfiguration : BaseBooleanExtractorConfiguration {
    public GermanBooleanExtractorConfiguration(bool onlyTopMatch);
}
public class Microsoft.Recognizers.Text.Choice.Hindi.HindiBooleanExtractorConfiguration : BaseBooleanExtractorConfiguration {
    public HindiBooleanExtractorConfiguration(bool onlyTopMatch);
}
public interface Microsoft.Recognizers.Text.Choice.IBooleanExtractorConfiguration {
    public Regex TrueRegex { get; }
    public Regex FalseRegex { get; }
    public abstract virtual Regex get_TrueRegex();
    public abstract virtual Regex get_FalseRegex();
}
public interface Microsoft.Recognizers.Text.Choice.IChoiceExtractorConfiguration {
    public IDictionary`2<Regex, string> MapRegexes { get; }
    public Regex TokenRegex { get; }
    public bool AllowPartialMatch { get; }
    public int MaxDistance { get; }
    public bool OnlyTopMatch { get; }
    public abstract virtual IDictionary`2<Regex, string> get_MapRegexes();
    public abstract virtual Regex get_TokenRegex();
    public abstract virtual bool get_AllowPartialMatch();
    public abstract virtual int get_MaxDistance();
    public abstract virtual bool get_OnlyTopMatch();
}
public interface Microsoft.Recognizers.Text.Choice.IChoiceParserConfiguration`1 {
    public IDictionary`2<string, T> Resolutions { get; }
    public abstract virtual IDictionary`2<string, T> get_Resolutions();
}
public class Microsoft.Recognizers.Text.Choice.Italian.ItalianBooleanExtractorConfiguration : BaseBooleanExtractorConfiguration {
    public ItalianBooleanExtractorConfiguration(bool onlyTopMatch);
}
public class Microsoft.Recognizers.Text.Choice.Japanese.JapaneseBooleanExtractorConfiguration : BaseBooleanExtractorConfiguration {
    public JapaneseBooleanExtractorConfiguration(bool onlyTopMatch);
}
public class Microsoft.Recognizers.Text.Choice.OtherMatchParseResult : object {
    [CompilerGeneratedAttribute]
private double <Score>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public double Score { get; public set; }
    public string Text { get; public set; }
    public object Value { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Score();
    [CompilerGeneratedAttribute]
public void set_Score(double value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
public class Microsoft.Recognizers.Text.Choice.Portuguese.PortugueseBooleanExtractorConfiguration : BaseBooleanExtractorConfiguration {
    public PortugueseBooleanExtractorConfiguration(bool onlyTopMatch);
}
public class Microsoft.Recognizers.Text.Choice.Spanish.SpanishBooleanExtractorConfiguration : BaseBooleanExtractorConfiguration {
    public SpanishBooleanExtractorConfiguration(bool onlyTopMatch);
}
public class Microsoft.Recognizers.Text.Choice.Swedish.SwedishBooleanExtractorConfiguration : BaseBooleanExtractorConfiguration {
    public SwedishBooleanExtractorConfiguration(bool onlyTopMatch);
}
public class Microsoft.Recognizers.Text.Choice.Turkish.TurkishBooleanExtractorConfiguration : BaseBooleanExtractorConfiguration {
    public TurkishBooleanExtractorConfiguration(bool onlyTopMatch);
}
public static class Microsoft.Recognizers.Text.Choice.Utilities.UnicodeUtils : object {
    public static bool IsEmoji(string letter);
    [IteratorStateMachineAttribute("Microsoft.Recognizers.Text.Choice.Utilities.UnicodeUtils/<Letters>d__1")]
public static IEnumerable`1<string> Letters(string text);
}
