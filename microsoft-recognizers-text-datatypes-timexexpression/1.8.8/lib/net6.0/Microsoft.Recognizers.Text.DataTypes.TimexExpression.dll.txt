public static class Microsoft.Recognizers.Text.DataTypes.TimexExpression.Constants : object {
    public static string TimexYear;
    public static string TimexMonth;
    public static string TimexMonthFull;
    public static string TimexWeek;
    public static string TimexDay;
    public static string TimexBusinessDay;
    public static string TimexWeekend;
    public static string TimexHour;
    public static string TimexMinute;
    public static string TimexSecond;
    public static string TimexNight;
    public static char TimexFuzzy;
    public static string TimexFuzzyYear;
    public static string TimexFuzzyMonth;
    public static string TimexFuzzyWeek;
    public static string TimexFuzzyDay;
    public static string DateTimexConnector;
    public static string TimeTimexConnector;
    public static string GeneralPeriodPrefix;
    public static string TimeTimexPrefix;
    public static string YearUnit;
    public static string MonthUnit;
    public static string WeekUnit;
    public static string DayUnit;
    public static string HourUnit;
    public static string MinuteUnit;
    public static string SecondUnit;
    public static string TimeDurationUnit;
    public static string AM;
    public static string PM;
    public static int InvalidValue;
}
public class Microsoft.Recognizers.Text.DataTypes.TimexExpression.DateRange : object {
    [CompilerGeneratedAttribute]
private DateTime <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <End>k__BackingField;
    public DateTime Start { get; public set; }
    public DateTime End { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_End();
    [CompilerGeneratedAttribute]
public void set_End(DateTime value);
}
public class Microsoft.Recognizers.Text.DataTypes.TimexExpression.Resolution : object {
    [CompilerGeneratedAttribute]
private List`1<Entry> <Values>k__BackingField;
    public List`1<Entry> Values { get; private set; }
    [CompilerGeneratedAttribute]
public List`1<Entry> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(List`1<Entry> value);
}
public class Microsoft.Recognizers.Text.DataTypes.TimexExpression.Time : object {
    [CompilerGeneratedAttribute]
private int <Hour>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minute>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Second>k__BackingField;
    public int Hour { get; public set; }
    public int Minute { get; public set; }
    public int Second { get; public set; }
    public Time(int seconds);
    public Time(int hour, int minute, int second);
    [CompilerGeneratedAttribute]
public int get_Hour();
    [CompilerGeneratedAttribute]
public void set_Hour(int value);
    [CompilerGeneratedAttribute]
public int get_Minute();
    [CompilerGeneratedAttribute]
public void set_Minute(int value);
    [CompilerGeneratedAttribute]
public int get_Second();
    [CompilerGeneratedAttribute]
public void set_Second(int value);
    public int GetTime();
}
public class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimeRange : object {
    [CompilerGeneratedAttribute]
private Time <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Time <End>k__BackingField;
    public Time Start { get; public set; }
    public Time End { get; public set; }
    [CompilerGeneratedAttribute]
public Time get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(Time value);
    [CompilerGeneratedAttribute]
public Time get_End();
    [CompilerGeneratedAttribute]
public void set_End(Time value);
}
internal static class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexConstantsEnglish : object {
    public static string Every;
    public static string Now;
    public static string Midnight;
    public static string Midday;
    public static string Today;
    public static string Tomorrow;
    public static string Yesterday;
    public static string Weekend;
    public static string Tonight;
    public static string This;
    public static string Last;
    public static string Next;
    public static String[] Days;
    public static String[] Months;
    public static String[] DateAbbreviation;
    public static String[] Hours;
    public static IDictionary`2<string, string> Seasons;
    public static String[] Weeks;
    public static IDictionary`2<string, string> DayParts;
    private static TimexConstantsEnglish();
}
public static class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexConstraintsHelper : object {
    public static IEnumerable`1<TimeRange> Collapse(IEnumerable`1<TimeRange> ranges);
    public static IEnumerable`1<DateRange> Collapse(IEnumerable`1<DateRange> ranges);
    public static bool IsOverlapping(TimeRange r1, TimeRange r2);
    private static TimeRange CollapseOverlapping(TimeRange r1, TimeRange r2);
    private static bool InnerCollapse(List`1<TimeRange> ranges);
    private static bool IsOverlapping(DateRange r1, DateRange r2);
    private static DateRange CollapseOverlapping(DateRange r1, DateRange r2);
    private static bool InnerCollapse(List`1<DateRange> ranges);
}
public static class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexConvert : object {
    public static string ConvertTimexToString(TimexProperty timex);
    public static string ConvertTimexSetToString(TimexSet timexSet);
}
internal static class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexConvertEnglish : object {
    public static string ConvertTimexToString(TimexProperty timex);
    public static string ConvertTimexSetToString(TimexSet timexSet);
    public static string ConvertTime(TimexProperty timex);
    public static string ConvertDate(TimexProperty timex);
    private static string ConvertDurationPropertyToString(decimal value, string property, bool includeSingleCount);
    private static string ConvertTimexDurationToString(TimexProperty timex, bool includeSingleCount);
    private static string ConvertDuration(TimexProperty timex);
    private static string ConvertDateRange(TimexProperty timex);
    private static string ConvertTimeRange(TimexProperty timex);
    private static string ConvertDateTime(TimexProperty timex);
    private static string ConvertDateTimeRange(TimexProperty timex);
}
public static class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexCreator : object {
    public static string Monday;
    public static string Tuesday;
    public static string Wednesday;
    public static string Thursday;
    public static string Friday;
    public static string Saturday;
    public static string Sunday;
    public static string Morning;
    public static string Afternoon;
    public static string Evening;
    public static string Daytime;
    public static string Night;
    private static TimexCreator();
    public static string Today(DateTime date);
    public static string Tomorrow(DateTime date);
    public static string Yesterday(DateTime date);
    public static string WeekFromToday(DateTime date);
    public static string WeekBackFromToday(DateTime date);
    public static string ThisWeek(DateTime date);
    public static string NextWeek(DateTime date);
    public static string LastWeek(DateTime date);
    public static string NextWeeksFromToday(int n, DateTime date);
}
public static class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexDateHelpers : object {
    public static DateTime Tomorrow(DateTime date);
    public static DateTime Yesterday(DateTime date);
    public static bool DatePartEquals(DateTime dateX, DateTime dateY);
    public static bool IsDateInWeek(DateTime date, DateTime startOfWeek);
    public static bool IsThisWeek(DateTime date, DateTime referenceDate);
    public static bool IsNextWeek(DateTime date, DateTime referenceDate);
    public static bool IsLastWeek(DateTime date, DateTime referenceDate);
    public static int WeekOfYear(DateTime date);
    public static string FixedFormatNumber(Nullable`1<int> n, int size);
    public static DateTime DateOfLastDay(DayOfWeek day, DateTime referenceDate);
    public static DateTime DateOfNextDay(DayOfWeek day, DateTime referenceDate);
    public static List`1<DateTime> DatesMatchingDay(DayOfWeek day, DateTime start, DateTime end);
}
public static class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexFormat : object {
    public static string Format(TimexProperty timex);
    private static string FormatDuration(TimexProperty timex);
    private static string FormatTime(TimexProperty timex);
    private static string FormatDate(TimexProperty timex);
    private static string FormatDateRange(TimexProperty timex);
    private static string FormatTimeRange(TimexProperty timex);
}
public static class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexHelpers : object {
    public static Dictionary`2<TimexUnit, string> TimexUnitToStringMap;
    public static List`1<TimexUnit> TimeTimexUnitList;
    private static TimexHelpers();
    public static TimexRange ExpandDateTimeRange(TimexProperty timex);
    public static TimexRange ExpandTimeRange(TimexProperty timex);
    public static TimexProperty TimexDateAdd(TimexProperty start, TimexProperty duration);
    public static string GenerateDateTimex(int year, int monthOrWeekOfYear, int day, int weekOfMonth, bool byWeek);
    public static TimexProperty TimexTimeAdd(TimexProperty start, TimexProperty duration);
    public static TimexProperty TimexDateTimeAdd(TimexProperty start, TimexProperty duration);
    public static DateTime DateFromTimex(TimexProperty timex);
    public static Time TimeFromTimex(TimexProperty timex);
    public static DateRange DateRangeFromTimex(TimexProperty timex);
    public static TimeRange TimeRangeFromTimex(TimexProperty timex);
    public static string GenerateCompoundDurationTimex(List`1<string> timexList);
    public static string GenerateDateTimex(int year, int month, int day, bool byWeek);
    public static string GenerateDurationTimex(TimexUnit unit, decimal value);
    public static string FormatResolvedDateValue(string dateValue, string timeValue);
    public static Tuple`2<TimexProperty, TimexProperty> MonthWeekDateRange(int year, int month, int weekOfMonth);
    public static Tuple`2<TimexProperty, TimexProperty> MonthDateRange(int year, int month);
    public static Tuple`2<TimexProperty, TimexProperty> YearDateRange(int year);
    public static Tuple`2<TimexProperty, TimexProperty> YearWeekDateRange(int year, int weekOfYear, Nullable`1<bool> isWeekend);
    public static DateTime FirstDateOfWeek(int year, int weekOfYear, CultureInfo cultureInfo);
    public static DateTime GenerateMonthWeekDateStart(int year, int month, int weekOfMonth);
    private static TimexProperty TimeAdd(TimexProperty start, TimexProperty duration);
    private static TimexProperty CloneDateTime(TimexProperty timex);
    private static TimexProperty CloneDuration(TimexProperty timex);
    private static bool IsTimeDurationTimex(string timex);
    private static string GetDurationTimexWithoutPrefix(string timex);
}
public static class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexInference : object {
    public static HashSet`1<string> Infer(TimexProperty timexProperty);
    private static bool IsPresent(TimexProperty timexProperty);
    private static bool IsDuration(TimexProperty timexProperty);
    private static bool IsTime(TimexProperty timexProperty);
    private static bool IsDate(TimexProperty timexProperty);
    private static bool IsTimeRange(TimexProperty timexProperty);
    private static bool IsDateRange(TimexProperty timexProperty);
    private static bool IsDefinite(TimexProperty timexProperty);
}
public static class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexParsing : object {
    public static void ParseString(string timex, TimexProperty timexProperty);
    private static void ExtractDuration(string s, TimexProperty timexProperty);
    private static void ExtractStartEndRange(string s, TimexProperty timexProperty);
    private static void ExtractDateTime(string s, TimexProperty timexProperty);
}
public class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexProperty : object {
    private Time time;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Now>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Years>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Months>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Weeks>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Days>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Hours>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Minutes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <Seconds>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Year>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Month>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Season>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <WeekOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Weekend>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <WeekOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartOfDay>k__BackingField;
    public string TimexValue { get; }
    public HashSet`1<string> Types { get; }
    public Nullable`1<bool> Now { get; public set; }
    public Nullable`1<decimal> Years { get; public set; }
    public Nullable`1<decimal> Months { get; public set; }
    public Nullable`1<decimal> Weeks { get; public set; }
    public Nullable`1<decimal> Days { get; public set; }
    public Nullable`1<decimal> Hours { get; public set; }
    public Nullable`1<decimal> Minutes { get; public set; }
    public Nullable`1<decimal> Seconds { get; public set; }
    public Nullable`1<int> Year { get; public set; }
    public Nullable`1<int> Month { get; public set; }
    public Nullable`1<int> DayOfMonth { get; public set; }
    public Nullable`1<int> DayOfWeek { get; public set; }
    public string Season { get; public set; }
    public Nullable`1<int> WeekOfYear { get; public set; }
    public Nullable`1<bool> Weekend { get; public set; }
    public Nullable`1<int> WeekOfMonth { get; public set; }
    public Nullable`1<int> Hour { get; public set; }
    public Nullable`1<int> Minute { get; public set; }
    public Nullable`1<int> Second { get; public set; }
    public string PartOfDay { get; public set; }
    public TimexProperty(string timex);
    public string get_TimexValue();
    public HashSet`1<string> get_Types();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Now();
    [CompilerGeneratedAttribute]
public void set_Now(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Years();
    [CompilerGeneratedAttribute]
public void set_Years(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Months();
    [CompilerGeneratedAttribute]
public void set_Months(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Weeks();
    [CompilerGeneratedAttribute]
public void set_Weeks(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Days();
    [CompilerGeneratedAttribute]
public void set_Days(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Hours();
    [CompilerGeneratedAttribute]
public void set_Hours(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Minutes();
    [CompilerGeneratedAttribute]
public void set_Minutes(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_Seconds();
    [CompilerGeneratedAttribute]
public void set_Seconds(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Year();
    [CompilerGeneratedAttribute]
public void set_Year(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Month();
    [CompilerGeneratedAttribute]
public void set_Month(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public void set_DayOfMonth(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DayOfWeek();
    [CompilerGeneratedAttribute]
public void set_DayOfWeek(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Season();
    [CompilerGeneratedAttribute]
public void set_Season(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_WeekOfYear();
    [CompilerGeneratedAttribute]
public void set_WeekOfYear(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Weekend();
    [CompilerGeneratedAttribute]
public void set_Weekend(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_WeekOfMonth();
    [CompilerGeneratedAttribute]
public void set_WeekOfMonth(Nullable`1<int> value);
    public Nullable`1<int> get_Hour();
    public void set_Hour(Nullable`1<int> value);
    public Nullable`1<int> get_Minute();
    public void set_Minute(Nullable`1<int> value);
    public Nullable`1<int> get_Second();
    public void set_Second(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_PartOfDay();
    [CompilerGeneratedAttribute]
public void set_PartOfDay(string value);
    public static TimexProperty FromDate(DateTime date);
    public static TimexProperty FromDateTime(DateTime datetime);
    public static TimexProperty FromTime(Time time);
    public virtual string ToString();
    public string ToNaturalLanguage(DateTime referenceDate);
    public TimexProperty Clone();
    public void AssignProperties(IDictionary`2<string, string> source);
    private void AssignDateDuration(IDictionary`2<string, string> source);
}
public class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexRange : object {
    [CompilerGeneratedAttribute]
private TimexProperty <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private TimexProperty <End>k__BackingField;
    [CompilerGeneratedAttribute]
private TimexProperty <Duration>k__BackingField;
    public TimexProperty Start { get; public set; }
    public TimexProperty End { get; public set; }
    public TimexProperty Duration { get; public set; }
    [CompilerGeneratedAttribute]
public TimexProperty get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(TimexProperty value);
    [CompilerGeneratedAttribute]
public TimexProperty get_End();
    [CompilerGeneratedAttribute]
public void set_End(TimexProperty value);
    [CompilerGeneratedAttribute]
public TimexProperty get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimexProperty value);
}
public static class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexRangeResolver : object {
    public static List`1<TimexProperty> Evaluate(IEnumerable`1<string> candidates, IEnumerable`1<string> constraints);
    private static List`1<string> ResolveDurations(IEnumerable`1<string> candidates, IEnumerable`1<TimexProperty> constraints);
    private static List`1<TimexProperty> ResolveDuration(TimexProperty candidate, IEnumerable`1<TimexProperty> constraints);
    private static IEnumerable`1<string> ResolveByDateRangeConstraints(IEnumerable`1<string> candidates, IEnumerable`1<TimexProperty> timexConstraints);
    private static IEnumerable`1<string> ResolveDate(TimexProperty timex, IEnumerable`1<DateRange> constraints);
    private static IEnumerable`1<string> ResolveByTimeRangeConstraints(IEnumerable`1<string> candidates, IEnumerable`1<TimexProperty> timexConstraints);
    private static IEnumerable`1<string> ResolveTimeRange(TimexProperty timex, IEnumerable`1<TimeRange> constraints);
    private static IEnumerable`1<string> ResolveTime(TimexProperty timex, IEnumerable`1<TimeRange> constraints);
    private static IEnumerable`1<string> ResolveTimeAgainstConstraint(TimexProperty timex, TimeRange constraint);
    private static IEnumerable`1<string> RemoveDuplicates(IEnumerable`1<string> original);
    private static IEnumerable`1<string> ResolveDefiniteAgainstConstraint(TimexProperty timex, DateRange constraint);
    private static IEnumerable`1<string> ResolveDateAgainstConstraint(TimexProperty timex, DateRange constraint);
    private static IEnumerable`1<string> ResolveByTimeConstraints(IEnumerable`1<string> candidates, IEnumerable`1<TimexProperty> timexConstraints);
}
public static class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexRegex : object {
    private static string DateTimeCollectionName;
    private static string DateCollectionName;
    private static string TimeCollectionName;
    private static string PeriodCollectionName;
    private static IDictionary`2<string, Regex[]> timexRegex;
    private static TimexRegex();
    public static bool Extract(string name, string timex, IDictionary`2<string, string> result);
    private static bool TryExtract(Regex regex, string timex, IDictionary`2<string, string> result);
}
public static class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexRelativeConvert : object {
    public static string ConvertTimexToStringRelative(TimexProperty timex, DateTime referenceDate);
}
internal static class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexRelativeConvertEnglish : object {
    public static string ConvertTimexToStringRelative(TimexProperty timex, DateTime date);
    private static string GetDateDay(DayOfWeek day);
    private static string ConvertDate(TimexProperty timex, DateTime date);
    private static string ConvertDateTime(TimexProperty timex, DateTime date);
    private static string ConvertDateRange(TimexProperty timex, DateTime date);
    private static string ConvertDateTimeRange(TimexProperty timex, DateTime date);
}
public static class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexResolver : object {
    public static Resolution Resolve(String[] timexArray, DateTime date);
    private static List`1<Entry> ResolveTimex(TimexProperty timex, DateTime date);
    private static List`1<Entry> ResolveDefiniteTime(TimexProperty timex, DateTime date);
    private static List`1<Entry> ResolveDefinite(TimexProperty timex);
    private static List`1<Entry> ResolveDefiniteDateRange(TimexProperty timex, DateTime date);
    private static List`1<Entry> ResolveDate(TimexProperty timex, DateTime date);
    private static string LastDateValue(TimexProperty timex, DateTime date);
    private static string NextDateValue(TimexProperty timex, DateTime date);
    private static List`1<Entry> ResolveTime(TimexProperty timex, DateTime date);
    private static List`1<Entry> ResolveDuration(TimexProperty timex);
    private static Tuple`2<string, string> YearDateRange(int year);
    private static Tuple`2<string, string> MonthDateRange(int year, int month);
    private static Tuple`2<string, string> YearWeekDateRange(int year, int weekOfYear, Nullable`1<bool> isWeekend);
    private static Tuple`2<string, string> MonthWeekDateRange(int year, int month, int weekOfMonth);
    private static DateTime GenerateWeekDate(TimexProperty timex, DateTime date, bool isBefore);
    private static List`1<Entry> ResolveDateRange(TimexProperty timex, DateTime date);
    private static Tuple`2<string, string> PartOfDayTimeRange(TimexProperty timex);
    private static List`1<Entry> ResolveTimeRange(TimexProperty timex, DateTime date);
    private static List`1<Entry> ResolveDateTime(TimexProperty timex, DateTime date);
    private static List`1<string> GetDateValues(TimexProperty timex, DateTime date);
    private static List`1<Tuple`2<string, string>> GetMonthWeekDateRange(int year, int month, int weekOfMonth, int referYear);
    private static List`1<Entry> ResolveDateTimeRange(TimexProperty timex, DateTime date);
}
public class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexSet : object {
    [CompilerGeneratedAttribute]
private TimexProperty <Timex>k__BackingField;
    public TimexProperty Timex { get; public set; }
    public TimexSet(string timex);
    [CompilerGeneratedAttribute]
public TimexProperty get_Timex();
    [CompilerGeneratedAttribute]
public void set_Timex(TimexProperty value);
}
public enum Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexUnit : Enum {
    public int value__;
    public static TimexUnit Year;
    public static TimexUnit Month;
    public static TimexUnit Week;
    public static TimexUnit Day;
    public static TimexUnit Hour;
    public static TimexUnit Minute;
    public static TimexUnit Second;
}
public static class Microsoft.Recognizers.Text.DataTypes.TimexExpression.TimexValue : object {
    public static string DateValue(TimexProperty timexProperty);
    public static string TimeValue(TimexProperty timexProperty, DateTime date);
    public static string DatetimeValue(TimexProperty timexProperty, DateTime date);
    public static string DurationValue(TimexProperty timexProperty);
}
