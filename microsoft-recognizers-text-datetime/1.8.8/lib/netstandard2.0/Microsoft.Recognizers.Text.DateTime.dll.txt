public abstract class Microsoft.Recognizers.Text.DateTime.AbstractYearExtractor : object {
    [CompilerGeneratedAttribute]
private IDateExtractorConfiguration <Config>k__BackingField;
    protected IDateExtractorConfiguration Config { get; private set; }
    protected AbstractYearExtractor(IDateExtractorConfiguration config);
    [CompilerGeneratedAttribute]
protected IDateExtractorConfiguration get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(IDateExtractorConfiguration value);
    public abstract virtual List`1<ExtractResult> Extract(string input);
    public abstract virtual List`1<ExtractResult> Extract(string input, DateTime reference);
    public sealed virtual int GetYearFromText(Match match);
}
public enum Microsoft.Recognizers.Text.DateTime.AgoLaterMode : Enum {
    public int value__;
    public static AgoLaterMode Date;
    public static AgoLaterMode DateTime;
}
public static class Microsoft.Recognizers.Text.DateTime.AgoLaterUtil : object {
    public static List`1<Token> ExtractorDurationWithBeforeAndAfter(string text, ExtractResult er, List`1<Token> ret, IDateTimeUtilityConfiguration utilityConfiguration);
    public static DateTimeResolutionResult ParseDurationWithAgoAndLater(string text, DateTime referenceTime, IDateTimeExtractor durationExtractor, IDateTimeParser durationParser, IParser numberParser, IImmutableDictionary`2<string, string> unitMap, Regex unitRegex, IDateTimeUtilityConfiguration utilityConfiguration, SwiftDayDelegate swiftDay);
    private static DateTimeResolutionResult GetAgoLaterResult(DateTimeParseResult durationParseResult, string afterStr, string beforeStr, DateTime referenceTime, IParser numberParser, IDateTimeUtilityConfiguration utilityConfiguration, AgoLaterMode mode, SwiftDayDelegate swiftDay);
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicCommonDateTimeParserConfiguration : BaseDateParserConfiguration {
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public ArabicCommonDateTimeParserConfiguration(IDateTimeOptionsConfiguration config);
    public virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicDateExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MonthRegex;
    public static Regex MonthNumRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex SingleWeekDayRegex;
    public static Regex OnRegex;
    public static Regex RelaxedOnRegex;
    public static Regex ThisRegex;
    public static Regex LastDateRegex;
    public static Regex NextDateRegex;
    public static Regex DateUnitRegex;
    public static Regex SpecialDayRegex;
    public static Regex WeekDayOfMonthRegex;
    public static Regex RelativeWeekDayRegex;
    public static Regex SpecialDate;
    public static Regex SpecialDayWithNumRegex;
    public static Regex ForTheRegex;
    public static Regex WeekDayAndDayOfMothRegex;
    public static Regex WeekDayAndDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex StrictRelativeRegex;
    public static Regex PrefixArticleRegex;
    public static Regex OfMonth;
    public static Regex MonthEnd;
    public static Regex WeekDayEnd;
    public static Regex WeekDayStart;
    public static Regex YearSuffix;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex InConnectorRegex;
    public static Regex SinceYearSuffixRegex;
    public static Regex RangeUnitRegex;
    public static Regex RangeConnectorSymbolRegex;
    public static Regex BeforeAfterRegex;
    public static ImmutableDictionary`2<string, int> DayOfWeek;
    public static ImmutableDictionary`2<string, int> MonthOfYear;
    private static RegexOptions RegexFlags;
    private static Regex DayRegex;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <ImplicitDateList>k__BackingField;
    public IEnumerable`1<Regex> DateRegexList { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IEnumerable`1<Regex> ImplicitDateList { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DayOfWeek { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthOfYear { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.OfMonth { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayStart { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.ForTheRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayOfMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RelativeMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.StrictRelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.PrefixArticleRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.SinceYearSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeConnectorSymbolRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.BeforeAfterRegex { get; }
    public ArabicDateExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ArabicDateExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_ImplicitDateList();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DayOfWeek();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthOfYear();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_OfMonth();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayStart();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_ForTheRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayOfMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RelativeMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_StrictRelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_PrefixArticleRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_SinceYearSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeConnectorSymbolRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_BeforeAfterRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicDateParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <DateTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OnRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayWithNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ThisRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ForTheRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayOfMothRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <StrictRelativeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UpcomingPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeDurationToDatePatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <SameDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public string DateTokenPrefix { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public IEnumerable`1<Regex> DateRegexes { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex OnRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex SpecialDayWithNumRegex { get; }
    public Regex NextRegex { get; }
    public Regex ThisRegex { get; }
    public Regex LastRegex { get; }
    public Regex UnitRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex MonthRegex { get; }
    public Regex WeekDayOfMonthRegex { get; }
    public Regex ForTheRegex { get; }
    public Regex WeekDayAndDayOfMothRegex { get; }
    public Regex WeekDayAndDayRegex { get; }
    public Regex RelativeMonthRegex { get; }
    public Regex StrictRelativeRegex { get; }
    public Regex YearSuffix { get; }
    public Regex RelativeWeekDayRegex { get; }
    public Regex RelativeDayRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex UpcomingPrefixRegex { get; }
    public Regex PastPrefixRegex { get; }
    public Regex BeforeAfterRegex { get; }
    public Regex TasksModeDurationToDatePatterns { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableList`1<string> SameDayTerms { get; }
    public IImmutableList`1<string> PlusOneDayTerms { get; }
    public IImmutableList`1<string> MinusOneDayTerms { get; }
    public IImmutableList`1<string> PlusTwoDayTerms { get; }
    public IImmutableList`1<string> MinusTwoDayTerms { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.CheckBothBeforeAfter { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public ArabicDateParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DateTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OnRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayWithNumRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ThisRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ForTheRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayOfMothRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_StrictRelativeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearSuffix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UpcomingPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeDurationToDatePatterns();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_SameDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusTwoDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusTwoDayTerms();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual int GetSwiftMonthOrYear(string text);
    public sealed virtual bool IsCardinalLast(string text);
    public sealed virtual string Normalize(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicDatePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex RangeConnectorRegex;
    public static Regex DayRegex;
    public static Regex MonthNumRegex;
    public static Regex IllegalYearRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex WrittenMonthRegex;
    public static Regex MonthSuffixRegex;
    public static Regex DateUnitRegex;
    public static Regex TimeUnitRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex FutureSuffixRegex;
    public static Regex NowRegex;
    public static Regex SimpleCasesRegex;
    public static Regex MonthFrontSimpleCasesRegex;
    public static Regex MonthFrontBetweenRegex;
    public static Regex BetweenRegex;
    public static Regex MonthWithYear;
    public static Regex OneWordPeriodRegex;
    public static Regex MonthNumWithYear;
    public static Regex WeekOfMonthRegex;
    public static Regex WeekOfYearRegex;
    public static Regex FollowedDateUnit;
    public static Regex NumberCombinedWithDateUnit;
    public static Regex QuarterRegex;
    public static Regex QuarterRegexYearFront;
    public static Regex AllHalfYearRegex;
    public static Regex SeasonRegex;
    public static Regex WhichWeekRegex;
    public static Regex WeekOfRegex;
    public static Regex MonthOfRegex;
    public static Regex RangeUnitRegex;
    public static Regex InConnectorRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex RestOfDateRegex;
    public static Regex LaterEarlyPeriodRegex;
    public static Regex WeekWithWeekDayRangeRegex;
    public static Regex YearPlusNumberRegex;
    public static Regex DecadeWithCenturyRegex;
    public static Regex YearPeriodRegex;
    public static Regex ComplexDatePeriodRegex;
    public static Regex RelativeDecadeRegex;
    public static Regex ReferenceDatePeriodRegex;
    public static Regex AgoRegex;
    public static Regex LaterRegex;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex CenturySuffixRegex;
    public static Regex FirstLastRegex;
    public static Regex OfYearRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromTokenRegex;
    private static Regex BetweenTokenRegex;
    private static Regex[] SimpleCasesRegexes;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    public IDateExtractor DatePointExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.SimpleCasesRegexes { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.IllegalYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FollowedDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NumberCombinedWithDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WeekOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearPeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ComplexDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RelativeDecadeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ReferenceDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.AgoRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LaterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CenturySuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthNumRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FirstLastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.OfYearRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DurationDateRestrictions { get; }
    public ArabicDatePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ArabicDatePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_SimpleCasesRegexes();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_IllegalYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FollowedDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NumberCombinedWithDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WeekOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearPeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ComplexDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RelativeDecadeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ReferenceDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_AgoRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LaterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CenturySuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthNumRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FirstLastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_OfYearRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DurationDateRestrictions();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicDatePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PreviousPrefixRegex;
    public static Regex ThisPrefixRegex;
    public static Regex AfterNextSuffixRegex;
    public static Regex RelativeRegex;
    public static Regex UnspecificEndOfRangeRegex;
    public static Regex NowParseRegex;
    private static RegexOptions RegexFlags;
    private static IList`1<string> monthTermsPadded;
    private static IList`1<string> weekendTermsPadded;
    private static IList`1<string> weekTermsPadded;
    private static IList`1<string> yearTermsPadded;
    private static Regex NextPrefixRegex;
    [CompilerGeneratedAttribute]
private int <MinYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontBetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontSimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OneWordPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthNumWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegexYearFront>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllHalfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SeasonRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WhichWeekRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterEarlyPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekWithWeekDayRangeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPlusNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DecadeWithCenturyRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ComplexDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDecadeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ReferenceDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AgoRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LessThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MoreThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <CenturySuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TodayNowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FirstLastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SeasonMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SpecialYearPrefixesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <WrittenDecades>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <SpecialDecadeCases>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <InStringList>k__BackingField;
    public int MinYearNum { get; }
    public int MaxYearNum { get; }
    public string TokenBeforeDate { get; }
    public IDateExtractor DateExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser DurationParser { get; }
    public Regex MonthFrontBetweenRegex { get; }
    public Regex BetweenRegex { get; }
    public Regex MonthFrontSimpleCasesRegex { get; }
    public Regex SimpleCasesRegex { get; }
    public Regex OneWordPeriodRegex { get; }
    public Regex MonthWithYear { get; }
    public Regex MonthNumWithYear { get; }
    public Regex YearRegex { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex WeekOfMonthRegex { get; }
    public Regex WeekOfYearRegex { get; }
    public Regex QuarterRegex { get; }
    public Regex QuarterRegexYearFront { get; }
    public Regex AllHalfYearRegex { get; }
    public Regex SeasonRegex { get; }
    public Regex WhichWeekRegex { get; }
    public Regex WeekOfRegex { get; }
    public Regex MonthOfRegex { get; }
    public Regex InConnectorRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex RestOfDateRegex { get; }
    public Regex LaterEarlyPeriodRegex { get; }
    public Regex WeekWithWeekDayRangeRegex { get; }
    public Regex YearPlusNumberRegex { get; }
    public Regex DecadeWithCenturyRegex { get; }
    public Regex YearPeriodRegex { get; }
    public Regex ComplexDatePeriodRegex { get; }
    public Regex RelativeDecadeRegex { get; }
    public Regex ReferenceDatePeriodRegex { get; }
    public Regex AgoRegex { get; }
    public Regex LaterRegex { get; }
    public Regex LessThanRegex { get; }
    public Regex MoreThanRegex { get; }
    public Regex CenturySuffixRegex { get; }
    public Regex NowRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex TodayNowRegex { get; }
    public Regex FirstLastRegex { get; }
    public Regex OfYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.RelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.NextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.UnspecificEndOfRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.AmbiguousPointRangeRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; }
    public IImmutableDictionary`2<string, string> SpecialYearPrefixesMap { get; }
    public IImmutableDictionary`2<string, int> WrittenDecades { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IImmutableDictionary`2<string, int> SpecialDecadeCases { get; }
    public IImmutableList`1<string> InStringList { get; }
    public ArabicDatePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static ArabicDatePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public int get_MinYearNum();
    [CompilerGeneratedAttribute]
public int get_MaxYearNum();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontBetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontSimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OneWordPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthNumWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegexYearFront();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllHalfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SeasonRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WhichWeekRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterEarlyPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekWithWeekDayRangeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPlusNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DecadeWithCenturyRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ComplexDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDecadeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ReferenceDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AgoRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LessThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MoreThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_CenturySuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TodayNowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FirstLastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OfYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.get_RelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_NextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_UnspecificEndOfRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_AmbiguousPointRangeRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SpecialYearPrefixesMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_WrittenDecades();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_SpecialDecadeCases();
    [CompilerGeneratedAttribute]
public IImmutableList`1<string> get_InStringList();
    public sealed virtual int GetSwiftDayOrMonth(string text);
    public sealed virtual int GetSwiftYear(string text);
    public sealed virtual bool IsFuture(string text);
    public sealed virtual bool IsLastCardinal(string text);
    public sealed virtual bool IsMonthOnly(string text);
    public sealed virtual bool IsMonthToDate(string text);
    public sealed virtual bool IsWeekend(string text);
    public sealed virtual bool IsWeekOnly(string text);
    public sealed virtual bool IsFortnight(string text);
    public sealed virtual bool IsYearOnly(string text);
    public sealed virtual bool IsYearToDate(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicDateTimeAltExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex ThisPrefixRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex AmRegex;
    public static Regex PmRegex;
    public static Regex RangePrefixRegex;
    public static Regex[] RelativePrefixList;
    public static Regex[] AmPmRegexList;
    private static RegexOptions RegexFlags;
    private static Regex OrRegex;
    private static Regex DayRegex;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RelativePrefixList { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.AmPmRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.OrRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.DayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RangePrefixRegex { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public ArabicDateTimeAltExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ArabicDateTimeAltExtractorConfiguration();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RelativePrefixList();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_AmPmRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_OrRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_DayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RangePrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicDateTimeAltParserConfiguration : object {
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public ArabicDateTimeAltParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicDateTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrepositionRegex;
    public static Regex NowRegex;
    public static Regex SuffixRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeOfTodayAfterRegex;
    public static Regex TimeOfTodayBeforeRegex;
    public static Regex SimpleTimeOfTodayAfterRegex;
    public static Regex SimpleTimeOfTodayBeforeRegex;
    public static Regex SpecificEndOfRegex;
    public static Regex UnspecificEndOfRegex;
    public static Regex UnitRegex;
    public static Regex ConnectorRegex;
    public static Regex NumberAsTimeRegex;
    public static Regex DateNumberConnectorRegex;
    public static Regex YearRegex;
    public static Regex YearSuffix;
    public static Regex SuffixAfterRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    public IExtractor IntegerExtractor { get; }
    public IDateExtractor DatePointExtractor { get; }
    public IDateTimeExtractor TimePointExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SpecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnspecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NumberAsTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.DateNumberConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public ArabicDateTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ArabicDateTimeExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SpecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnspecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NumberAsTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_DateNumberConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    public sealed virtual bool IsConnector(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicDateTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex AmTimeRegex;
    public static Regex PmTimeRegex;
    public static Regex NightTimeRegex;
    private static RegexOptions RegexFlags;
    private static Regex NowTimeRegex;
    private static Regex RecentlyTimeRegex;
    private static Regex AsapTimeRegex;
    private static Regex NextPrefixRegex;
    private static Regex PreviousPrefixRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayBeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnspecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DateNumberConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrepositionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex NowRegex { get; }
    public Regex AMTimeRegex { get; }
    public Regex PMTimeRegex { get; }
    public Regex SimpleTimeOfTodayAfterRegex { get; }
    public Regex SimpleTimeOfTodayBeforeRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex SpecificEndOfRegex { get; }
    public Regex UnspecificEndOfRegex { get; }
    public Regex UnitRegex { get; }
    public Regex DateNumberConnectorRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex ConnectorRegex { get; }
    public Regex YearRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public ArabicDateTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static ArabicDateTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    public sealed virtual Regex get_AMTimeRegex();
    public sealed virtual Regex get_PMTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayBeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnspecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DateNumberConnectorRegex();
    [CompilerGeneratedAttribute]
public Regex get_PrepositionRegex();
    [CompilerGeneratedAttribute]
public Regex get_ConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual int GetHour(string text, int hour);
    public sealed virtual bool GetMatchedNowTimex(string text, String& timex);
    public sealed virtual int GetSwiftDay(string text);
    public sealed virtual bool ContainsAmbiguousToken(string text, string matchedText);
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicDateTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TimeNumberCombinedWithUnit;
    public static Regex HyphenDateRegex;
    public static Regex PeriodTimeOfDayWithDateRegex;
    public static Regex RelativeTimeUnitRegex;
    public static Regex RestOfDateTimeRegex;
    public static Regex AmDescRegex;
    public static Regex PmDescRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex DateUnitRegex;
    public static Regex PrefixDayRegex;
    public static Regex SuffixRegex;
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex WeekDaysRegex;
    public static Regex PeriodSpecificTimeOfDayRegex;
    private static RegexOptions RegexFlags;
    private static Regex[] SimpleCases;
    private static Regex PeriodTimeOfDayRegex;
    private static Regex TimeUnitRegex;
    private static Regex TimeFollowedUnit;
    private static Regex GeneralEndingRegex;
    private static Regex MiddlePauseRegex;
    private static Regex RangeConnectorRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex TillRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex FollowedUnit { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PrefixDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RelativeTimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RestOfDateTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.MiddlePauseRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PeriodTimeOfDayWithDateRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public string TokenBeforeDate { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor SingleDateExtractor { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor SingleDateTimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public ArabicDateTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ArabicDateTimePeriodExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual Regex get_PrepositionRegex();
    public sealed virtual Regex get_TillRegex();
    public sealed virtual Regex get_TimeOfDayRegex();
    public sealed virtual Regex get_SpecificTimeOfDayRegex();
    public sealed virtual Regex get_PreviousPrefixRegex();
    public sealed virtual Regex get_NextPrefixRegex();
    public sealed virtual Regex get_FutureSuffixRegex();
    public sealed virtual Regex get_WeekDayRegex();
    public sealed virtual Regex get_FollowedUnit();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PrefixDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RelativeTimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RestOfDateTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_MiddlePauseRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PeriodTimeOfDayWithDateRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TasksmodeMealTimeofDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicDateTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MorningStartEndRegex;
    public static Regex AfternoonStartEndRegex;
    public static Regex EveningStartEndRegex;
    public static Regex NightStartEndRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HyphenDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodTimeOfDayWithDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeTimeUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrefixDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex HyphenDateRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnitRegex { get; }
    public Regex UnitRegex { get; }
    public Regex PeriodTimeOfDayWithDateRegex { get; }
    public Regex RelativeTimeUnitRegex { get; }
    public Regex RestOfDateTimeRegex { get; }
    public Regex AmDescRegex { get; }
    public Regex PmDescRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex PrefixDayRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.TasksmodeMealTimeofDayRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public ArabicDateTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static ArabicDateTimePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HyphenDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodTimeOfDayWithDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeTimeUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PrefixDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_TasksmodeMealTimeofDayRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual bool GetMatchedTimeRange(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMin);
    public sealed virtual int GetSwiftPrefix(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicDurationExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DurationUnitRegex;
    public static Regex SuffixAndRegex;
    public static Regex DurationFollowedUnit;
    public static Regex NumberCombinedWithDurationUnit;
    public static Regex AnUnitRegex;
    public static Regex DuringRegex;
    public static Regex AllRegex;
    public static Regex HalfRegex;
    public static Regex ConjunctionRegex;
    public static Regex InexactNumberRegex;
    public static Regex InexactNumberUnitRegex;
    public static Regex RelativeDurationUnitRegex;
    public static Regex DurationConnectorRegex;
    public static Regex ModPrefixRegex;
    public static Regex ModSuffixRegex;
    public static Regex SpecialNumberUnitRegex;
    public static Regex MoreThanRegex;
    public static Regex LessThanRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.FollowedUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DuringRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AllRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.HalfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SuffixAndRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ConjunctionRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.RelativeDurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SpecialNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModSuffixRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public ArabicDurationExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ArabicDurationExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_FollowedUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DuringRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AllRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_HalfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SuffixAndRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ConjunctionRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_RelativeDurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SpecialNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModSuffixRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicDurationParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrefixArticleRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AnUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DuringRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HalfDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FollowedUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConjunctionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, double> <DoubleNumbers>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.PrefixArticleRegex { get; }
    public Regex DuringRegex { get; }
    public Regex AllDateUnitRegex { get; }
    public Regex HalfDateUnitRegex { get; }
    public Regex SuffixAndRegex { get; }
    public Regex FollowedUnit { get; }
    public Regex ConjunctionRegex { get; }
    public Regex InexactNumberRegex { get; }
    public Regex InexactNumberUnitRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex SpecialNumberUnitRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public IImmutableDictionary`2<string, double> DoubleNumbers { get; }
    public ArabicDurationParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static ArabicDurationParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_PrefixArticleRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DuringRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HalfDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FollowedUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ConjunctionRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialNumberUnitRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, double> get_DoubleNumbers();
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicHolidayExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex YearRegex;
    public static Regex H;
    public static Regex[] HolidayRegexList;
    private static RegexOptions RegexFlags;
    public IEnumerable`1<Regex> HolidayRegexes { get; }
    public ArabicHolidayExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ArabicHolidayExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_HolidayRegexes();
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicHolidayParserConfiguration : BaseHolidayParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private Regex <ThisPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    public Regex ThisPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public ArabicHolidayParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public Regex get_ThisPrefixRegex();
    [CompilerGeneratedAttribute]
public Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public Regex get_PreviousPrefixRegex();
    public virtual int GetSwiftYear(string text);
    public virtual string SanitizeHolidayToken(string holiday);
    protected virtual IDictionary`2<string, Func`2<int, DateTime>> InitHolidayFuncs();
    private static DateTime NewYear(int year);
    private static DateTime NewYearEve(int year);
    private static DateTime ChristmasDay(int year);
    private static DateTime ChristmasEve(int year);
    private static DateTime ValentinesDay(int year);
    private static DateTime WhiteLoverDay(int year);
    private static DateTime FoolDay(int year);
    private static DateTime EarthDay(int year);
    private static DateTime GirlsDay(int year);
    private static DateTime TreePlantDay(int year);
    private static DateTime FemaleDay(int year);
    private static DateTime ChildrenDay(int year);
    private static DateTime YouthDay(int year);
    private static DateTime TeacherDay(int year);
    private static DateTime SinglesDay(int year);
    private static DateTime MaoBirthday(int year);
    private static DateTime InaugurationDay(int year);
    private static DateTime GroundhogDay(int year);
    private static DateTime StPatrickDay(int year);
    private static DateTime StGeorgeDay(int year);
    private static DateTime Mayday(int year);
    private static DateTime CincoDeMayoDay(int year);
    private static DateTime BaptisteDay(int year);
    private static DateTime UsaIndependenceDay(int year);
    private static DateTime BastilleDay(int year);
    private static DateTime HalloweenDay(int year);
    private static DateTime AllHallowDay(int year);
    private static DateTime AllSoulsDay(int year);
    private static DateTime GuyFawkesDay(int year);
    private static DateTime VeteransDay(int year);
    private static DateTime Juneteenth(int year);
    private static DateTime EasterDay(int year);
    private static DateTime AshWednesday(int year);
    private static DateTime PalmSunday(int year);
    private static DateTime MaundyThursday(int year);
    private static DateTime GoodFriday(int year);
    private static DateTime EasterSaturday(int year);
    private static DateTime EasterMonday(int year);
    private static DateTime AscensionDay(int year);
    private static DateTime WhiteSunday(int year);
    private static DateTime WhiteMonday(int year);
    private static DateTime TrinitySunday(int year);
    private static DateTime CorpusChristi(int year);
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicMergedExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex AroundRegex;
    public static Regex EqualRegex;
    public static Regex FromToRegex;
    public static Regex SingleAmbiguousMonthRegex;
    public static Regex PrepositionSuffixRegex;
    public static Regex AmbiguousRangeModifierPrefix;
    public static Regex NumberEndingPattern;
    public static Regex SuffixAfterRegex;
    public static Regex UnspecificDatePeriodRegex;
    public static Regex UnspecificTimePeriodRegex;
    public static Regex FailFastRegex;
    public static Regex YearRegex;
    public static Regex[] TermFilterRegexes;
    public static StringMatcher SuperfluousWordMatcher;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private static Regex <SinceRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private static Regex <SinceRegexExp>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SetExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeZoneExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeListExtractor <DateTimeAltExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeMentionFilters>k__BackingField;
    public static Regex SinceRegex { get; public set; }
    public static Regex SinceRegexExp { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor SetExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeZoneExtractor TimeZoneExtractor { get; }
    public IDateTimeListExtractor DateTimeAltExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SinceRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AroundRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.EqualRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.FromToRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SingleAmbiguousMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PrepositionSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AmbiguousRangeModifierPrefix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PotentialAmbiguousRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.NumberEndingPattern { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuffixAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificTimePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.FailFastRegex { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.TermFilterRegexes { get; }
    private StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.CheckBothBeforeAfter { get; }
    public Regex TasksModeMentionFilters { get; }
    public ArabicMergedExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ArabicMergedExtractorConfiguration();
    [CompilerGeneratedAttribute]
public static Regex get_SinceRegex();
    [CompilerGeneratedAttribute]
public static void set_SinceRegex(Regex value);
    [CompilerGeneratedAttribute]
public static Regex get_SinceRegexExp();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SetExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeZoneExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeListExtractor get_DateTimeAltExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SinceRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AroundRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_EqualRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_FromToRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SingleAmbiguousMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PrepositionSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AmbiguousRangeModifierPrefix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PotentialAmbiguousRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_NumberEndingPattern();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuffixAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificTimePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_FailFastRegex();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_TermFilterRegexes();
    private sealed virtual override StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeMentionFilters();
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicMergedParserConfiguration : ArabicCommonDateTimeParserConfiguration {
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SinceRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AroundRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EqualRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <SetParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <SuperfluousWordMatcher>k__BackingField;
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex SinceRegex { get; }
    public Regex AroundRegex { get; }
    public Regex EqualRegex { get; }
    public Regex SuffixAfter { get; }
    public Regex YearRegex { get; }
    public IDateTimeParser SetParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public StringMatcher SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.CheckBothBeforeAfter { get; }
    public ArabicMergedParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SinceRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AroundRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EqualRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_SetParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.get_CheckBothBeforeAfter();
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicSetExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex SetUnitRegex;
    public static Regex PeriodicRegex;
    public static Regex EachUnitRegex;
    public static Regex EachPrefixRegex;
    public static Regex SetLastRegex;
    public static Regex EachDayRegex;
    public static Regex SetWeekDayRegex;
    public static Regex SetEachRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.LastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.PeriodicRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.BeforeEachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetWeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetEachRegex { get; }
    public ArabicSetExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ArabicSetExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_LastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_PeriodicRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_BeforeEachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetWeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetEachRegex();
    public sealed virtual Tuple`2<string, int> WeekDayGroupMatchTuple(Match match);
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicSetParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex DoubleMultiplierRegex;
    private static Regex HalfMultiplierRegex;
    private static Regex DayTypeRegex;
    private static Regex WeekTypeRegex;
    private static Regex WeekendTypeRegex;
    private static Regex MonthTypeRegex;
    private static Regex QuarterTypeRegex;
    private static Regex YearTypeRegex;
    private static List`1<string> ThisTerms;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodicRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetEachRegex>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex EachPrefixRegex { get; }
    public Regex PeriodicRegex { get; }
    public Regex EachUnitRegex { get; }
    public Regex EachDayRegex { get; }
    public Regex SetWeekDayRegex { get; }
    public Regex SetEachRegex { get; }
    public ArabicSetParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static ArabicSetParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodicRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetEachRegex();
    public sealed virtual bool GetMatchedDailyTimex(string text, String& timex);
    public sealed virtual bool GetMatchedUnitTimex(string text, String& timex);
    public sealed virtual string WeekDayGroupMatchString(Match match);
    public sealed virtual string ReplaceValueInTextWithFutTerm(string text, string value);
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DescRegex;
    public static Regex HourNumRegex;
    public static Regex MinuteNumRegex;
    public static Regex OclockRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex LessThanOneHour;
    public static Regex WrittenTimeRegex;
    public static Regex TimePrefix;
    public static Regex TimeSuffix;
    public static Regex BasicTime;
    public static Regex MidnightRegex;
    public static Regex MidmorningRegex;
    public static Regex MidafternoonRegex;
    public static Regex MiddayRegex;
    public static Regex MidTimeRegex;
    public static Regex AtRegex;
    public static Regex IshRegex;
    public static Regex TimeUnitRegex;
    public static Regex ConnectNumRegex;
    public static Regex TimeBeforeAfterRegex;
    public static Regex[] TimeRegexList;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.AtRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.IshRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeBeforeAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public string TimeTokenPrefix { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public ArabicTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ArabicTimeExtractorConfiguration();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_AtRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_IshRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeBeforeAfterRegex();
    [CompilerGeneratedAttribute]
public IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    public sealed virtual string get_TimeTokenPrefix();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex TimeSuffixFull;
    private static Regex LunchRegex;
    private static Regex NightRegex;
    private static Regex HalfTokenRegex;
    private static Regex QuarterTokenRegex;
    private static Regex ThreeQuarterTokenRegex;
    private static Regex ToTokenRegex;
    private static Regex ToHalfTokenRegex;
    private static Regex ForHalfTokenRegex;
    [CompilerGeneratedAttribute]
private string <TimeTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AtRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MealTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <TimeRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    public string TimeTokenPrefix { get; }
    public Regex AtRegex { get; }
    public Regex MealTimeRegex { get; }
    public IEnumerable`1<Regex> TimeRegexes { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public ArabicTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static ArabicTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TimeTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AtRegex();
    [CompilerGeneratedAttribute]
public Regex get_MealTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_TimeRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    public sealed virtual void AdjustByPrefix(string prefix, Int32& hour, Int32& min, Boolean& hasMin);
    public sealed virtual void AdjustBySuffix(string suffix, Int32& hour, Int32& min, Boolean& hasMin, Boolean& hasAm, Boolean& hasPm);
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex HourRegex;
    public static Regex PeriodHourNumRegex;
    public static Regex PeriodDescRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex PureNumFromTo;
    public static Regex PureNumBetweenAnd;
    public static Regex SpecificTimeFromTo;
    public static Regex SpecificTimeBetweenAnd;
    public static Regex PrepositionRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeUnitRegex;
    public static Regex TimeFollowedUnit;
    public static Regex TimeNumberCombinedWithUnit;
    public static Regex GeneralEndingRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    public string TokenBeforeDate { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public IEnumerable`1<Regex> PureNumberRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    public ArabicTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ArabicTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual IEnumerable`1<Regex> get_PureNumberRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool IsConnectorToken(string text);
    public sealed virtual List`1<ExtractResult> ApplyPotentialPeriodAmbiguityHotfix(string text, List`1<ExtractResult> timePeriodErs);
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <GeneralEndingRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TillRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex SpecificTimeFromToRegex { get; }
    public Regex SpecificTimeBetweenAndRegex { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex GeneralEndingRegex { get; }
    public Regex TillRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public ArabicTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_GeneralEndingRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TillRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual bool GetMatchedTimeRange(string text, String& timex, Int32& beginHour, Int32& endHour, Int32& endMin);
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.ArabicTimeZoneParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static string TimeZoneEndRegex;
    public static Dictionary`2<string, int> FullToMinMapping;
    public static Regex DirectUtcRegex;
    public static Dictionary`2<string, int> AbbrToMinMapping;
    private string Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.TimeZoneEndRegex { get; }
    private Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.FullToMinMapping { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.DirectUtcRegex { get; }
    private Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.AbbrToMinMapping { get; }
    public ArabicTimeZoneParserConfiguration(IDateTimeOptionsConfiguration config);
    private static ArabicTimeZoneParserConfiguration();
    private sealed virtual override string Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_TimeZoneEndRegex();
    private sealed virtual override Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_FullToMinMapping();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_DirectUtcRegex();
    private sealed virtual override Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_AbbrToMinMapping();
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.TimeParser : BaseTimeParser {
    public TimeParser(ITimeParserConfiguration configuration);
    protected virtual DateTimeResolutionResult InternalParse(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseIsh(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.Arabic.Utilities.ArabicDatetimeUtilityConfiguration : BaseDatetimeUtilityConfiguration {
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKDateExtractor : object {
    public static string ExtractorName;
    private static ResultsCache`1<ExtractResult> ResultsCache;
    private ICJKDateExtractorConfiguration config;
    public BaseCJKDateExtractor(ICJKDateExtractorConfiguration config);
    private static BaseCJKDateExtractor();
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public sealed virtual List`1<ExtractResult> Extract(string text, DateTime referenceTime);
    private List`1<Token> BasicRegexMatch(string text);
    private List`1<Token> ImplicitDate(string text);
    private List`1<Token> DurationWithAgoAndLater(string text, DateTime referenceTime);
    private List`1<Token> ExtendWithWeekDay(List`1<Token> ret, string text);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKDateParser : object {
    public static string ParserName;
    public static DateTime NoDate;
    private ICJKDateParserConfiguration config;
    public BaseCJKDateParser(ICJKDateParserConfiguration config);
    private static BaseCJKDateParser();
    public sealed virtual ParseResult Parse(ExtractResult extResult);
    public virtual DateTimeParseResult Parse(ExtractResult er, DateTime referenceDate);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    protected DateTimeResolutionResult InnerParser(string text, DateTime reference);
    protected DateTimeResolutionResult ParseBasicRegexMatch(string text, DateTime referenceDate);
    protected DateTimeResolutionResult ParseImplicitDate(string text, DateTime referenceDate);
    protected DateTimeResolutionResult MatchWeekdayAndDay(string text, DateTime reference);
    protected DateTimeResolutionResult MatchNextWeekday(string text, DateTime reference);
    protected DateTimeResolutionResult MatchThisWeekday(string text, DateTime reference);
    protected DateTimeResolutionResult MatchLastWeekday(string text, DateTime reference);
    protected DateTimeResolutionResult MatchWeekdayAlone(string text, DateTime reference);
    protected virtual DateTimeResolutionResult ParseWeekdayOfMonth(string text, DateTime referenceDate);
    protected DateTimeResolutionResult Match2Date(Match match, DateTime referenceDate);
    private static DateTime ComputeDate(int cardinal, int weekday, int month, int year);
    private static bool IsValidDate(int year, int month, int day);
    private bool IsLunarCalendar(string text);
    private DateTimeResolutionResult ParserDurationWithAgoAndLater(string text, DateTime referenceDate);
    private int ConvertCJKToNum(string numStr);
    private int ConvertCJKYearToInteger(string yearCJKStr);
}
public abstract class Microsoft.Recognizers.Text.DateTime.BaseCJKDateParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SetExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <SetParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeAltParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, double> <DoubleNumbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SeasonMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SpecialYearPrefixesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <WrittenDecades>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <SpecialDecadeCases>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public IExtractor CardinalExtractor { get; protected set; }
    public IExtractor IntegerExtractor { get; protected set; }
    public IExtractor OrdinalExtractor { get; protected set; }
    public IParser NumberParser { get; protected set; }
    public IDateTimeExtractor DateExtractor { get; protected set; }
    public IDateTimeExtractor TimeExtractor { get; protected set; }
    public IDateTimeExtractor DateTimeExtractor { get; protected set; }
    public IDateTimeExtractor DurationExtractor { get; protected set; }
    public IDateTimeExtractor DatePeriodExtractor { get; protected set; }
    public IDateTimeExtractor TimePeriodExtractor { get; protected set; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; protected set; }
    public IDateTimeExtractor SetExtractor { get; protected set; }
    public IDateTimeExtractor HolidayExtractor { get; protected set; }
    public IDateTimeParser DateParser { get; protected set; }
    public IDateTimeParser TimeParser { get; protected set; }
    public IDateTimeParser DateTimeParser { get; protected set; }
    public IDateTimeParser DurationParser { get; protected set; }
    public IDateTimeParser DatePeriodParser { get; protected set; }
    public IDateTimeParser TimePeriodParser { get; protected set; }
    public IDateTimeParser DateTimePeriodParser { get; protected set; }
    public IDateTimeParser SetParser { get; protected set; }
    public IDateTimeParser HolidayParser { get; protected set; }
    public IDateTimeParser DateTimeAltParser { get; protected set; }
    public IDateTimeParser TimeZoneParser { get; protected set; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; protected set; }
    public IImmutableDictionary`2<string, int> Numbers { get; protected set; }
    public IImmutableDictionary`2<string, double> DoubleNumbers { get; protected set; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; protected set; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; protected set; }
    public IImmutableDictionary`2<string, string> SpecialYearPrefixesMap { get; protected set; }
    public IImmutableDictionary`2<string, string> UnitMap { get; protected set; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; protected set; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; protected set; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; protected set; }
    public IImmutableDictionary`2<string, int> WrittenDecades { get; protected set; }
    public IImmutableDictionary`2<string, int> SpecialDecadeCases { get; protected set; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; protected set; }
    protected BaseCJKDateParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_CardinalExtractor(IExtractor value);
    [CompilerGeneratedAttribute]
public virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_IntegerExtractor(IExtractor value);
    [CompilerGeneratedAttribute]
public virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_OrdinalExtractor(IExtractor value);
    [CompilerGeneratedAttribute]
public virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
protected virtual void set_NumberParser(IParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_DateExtractor(IDateTimeExtractor value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_TimeExtractor(IDateTimeExtractor value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_DateTimeExtractor(IDateTimeExtractor value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_DurationExtractor(IDateTimeExtractor value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_DatePeriodExtractor(IDateTimeExtractor value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_TimePeriodExtractor(IDateTimeExtractor value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_DateTimePeriodExtractor(IDateTimeExtractor value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeExtractor get_SetExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_SetExtractor(IDateTimeExtractor value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_HolidayExtractor(IDateTimeExtractor value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
protected virtual void set_DateParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
protected virtual void set_TimeParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
protected virtual void set_DateTimeParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
protected virtual void set_DurationParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_DatePeriodParser();
    [CompilerGeneratedAttribute]
protected virtual void set_DatePeriodParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
protected virtual void set_TimePeriodParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
protected virtual void set_DateTimePeriodParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_SetParser();
    [CompilerGeneratedAttribute]
protected virtual void set_SetParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
protected virtual void set_HolidayParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_DateTimeAltParser();
    [CompilerGeneratedAttribute]
protected virtual void set_DateTimeAltParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
protected virtual void set_TimeZoneParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
protected virtual void set_MonthOfYear(IImmutableDictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
protected virtual void set_Numbers(IImmutableDictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, double> get_DoubleNumbers();
    [CompilerGeneratedAttribute]
protected virtual void set_DoubleNumbers(IImmutableDictionary`2<string, double> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    [CompilerGeneratedAttribute]
protected virtual void set_UnitValueMap(IImmutableDictionary`2<string, long> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    [CompilerGeneratedAttribute]
protected virtual void set_SeasonMap(IImmutableDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, string> get_SpecialYearPrefixesMap();
    [CompilerGeneratedAttribute]
protected virtual void set_SpecialYearPrefixesMap(IImmutableDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
protected virtual void set_UnitMap(IImmutableDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
protected virtual void set_CardinalMap(IImmutableDictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    [CompilerGeneratedAttribute]
protected virtual void set_DayOfWeek(IImmutableDictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
protected virtual void set_DayOfMonth(IImmutableDictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, int> get_WrittenDecades();
    [CompilerGeneratedAttribute]
protected virtual void set_WrittenDecades(IImmutableDictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, int> get_SpecialDecadeCases();
    [CompilerGeneratedAttribute]
protected virtual void set_SpecialDecadeCases(IImmutableDictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
protected virtual void set_UtilityConfiguration(IDateTimeUtilityConfiguration value);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKDatePeriodExtractor : object {
    private static string ExtractorName;
    private static ResultsCache`1<ExtractResult> ResultsCache;
    private ICJKDatePeriodExtractorConfiguration config;
    private string keyPrefix;
    public BaseCJKDatePeriodExtractor(ICJKDatePeriodExtractorConfiguration config);
    private static BaseCJKDatePeriodExtractor();
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public sealed virtual List`1<ExtractResult> Extract(string text, DateTime referenceTime);
    private List`1<Token> MatchSimpleCases(string text);
    private List`1<Token> MatchDurations(string text, DateTime reference);
    private List`1<Token> MergeTwoTimePoints(string text, DateTime referenceTime);
    private List`1<Token> MatchNumberWithUnit(string text);
    private List`1<Token> MatchComplexCases(string text, List`1<ExtractResult> simpleDateRangeResults, DateTime reference);
    private List`1<Token> MergeMultipleExtractions(string text, List`1<ExtractResult> extractionResults);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKDatePeriodParser : object {
    public static string ParserName;
    private static bool inclusiveEndPeriod;
    private static Calendar Cal;
    private ICJKDatePeriodParserConfiguration config;
    public BaseCJKDatePeriodParser(ICJKDatePeriodParserConfiguration configuration);
    private static BaseCJKDatePeriodParser();
    public DateContext GetYearContext(string startDateStr, string endDateStr, string text);
    public sealed virtual ParseResult Parse(ExtractResult extResult);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refDate);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    public int GetYearFromText(Match match);
    private static DateTime ShiftResolution(Tuple`2<DateTime, DateTime> date, Match match, bool start);
    private int ConvertCJKToNum(string numStr);
    private int ConvertCJKToInteger(string yearCJKStr);
    private DateTimeResolutionResult ParseSingleTimePoint(string text, DateTime referenceDate, DateContext dateContext);
    private DateTimeResolutionResult ParseSimpleCases(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseYearToYear(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseMonthToMonth(string text, DateTime referenceDate);
    private int ParseNumYear(string yearNum);
    private DateTimeResolutionResult ParseDayToDay(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseYearAndMonth(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseOneWordPeriod(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseLaterEarlyPeriod(string text, DateTime referenceDate);
    private DateTimeResolutionResult HandleWithHalfTag(string text, DateTime referenceDate, DateTimeResolutionResult ret, int swift);
    private DateTimeResolutionResult ParseYear(string text, DateTime referenceDate);
    private string HandleWithHalfYear(ConditionalMatch match, string text, Boolean& hasHalf, Boolean& isFirstHalf);
    private DateTimeResolutionResult HandleYearResult(DateTimeResolutionResult ret, bool hasHalf, bool isFirstHalf, bool isReferenceDatePeriod, int year);
    private DateTimeResolutionResult MergeTwoTimePoints(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseNumberWithUnit(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseDuration(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseMultipleDatesDuration(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseWeekOfMonth(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseWeekOfDate(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseMonthOfDate(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseWhichWeek(string text, DateTime referenceDate);
    private DateTimeResolutionResult GetWeekOfMonth(string cardinalStr, int month, int year, DateTime referenceDate, bool noYear);
    private DateTime GetMondayOfTargetWeek(string cardinalStr, int month, int year);
    private int GetWeekNumberForMonth(string cardinalStr);
    private DateTimeResolutionResult ParseWeekOfYear(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseSeason(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseQuarter(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseDecade(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseCentury(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseDatePointWithAgoAndLater(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseComplexDatePeriod(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseBaseDatePeriod(string text, DateTime referenceDate, DateContext dateContext);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKDateTimeExtractor : object {
    public static string ExtractorName;
    private ICJKDateTimeExtractorConfiguration config;
    public BaseCJKDateTimeExtractor(ICJKDateTimeExtractorConfiguration config);
    private static BaseCJKDateTimeExtractor();
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public sealed virtual List`1<ExtractResult> Extract(string text, DateTime referenceTime);
    public List`1<Token> BasicRegexMatch(string text);
    public List`1<Token> MergeDateAndTime(string text, DateTime referenceTime);
    public List`1<Token> TimeOfToday(string text, DateTime referenceTime);
    private List`1<Token> DurationWithAgoAndLater(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKDateTimeParser : object {
    public static string ParserName;
    private ICJKDateTimeParserConfiguration config;
    public BaseCJKDateTimeParser(ICJKDateTimeParserConfiguration configuration);
    private static BaseCJKDateTimeParser();
    public sealed virtual ParseResult Parse(ExtractResult extResult);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refDate);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    private DateTimeResolutionResult ParseBasicRegex(string text, DateTime referenceTime);
    private bool IsLunarCalendar(string text);
    private DateTimeResolutionResult MergeDateAndTime(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseTimeOfSpecialDayRegex(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseSpecialTimeOfDate(string text, DateTime refDateTime);
    private DateTimeResolutionResult ParserDurationWithAgoAndLater(string text, DateTime referenceDate);
    private int ConvertCJKToNum(string numStr);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKDateTimePeriodExtractor : object {
    public static string ExtractorName;
    private ICJKDateTimePeriodExtractorConfiguration config;
    public BaseCJKDateTimePeriodExtractor(ICJKDateTimePeriodExtractorConfiguration config);
    private static BaseCJKDateTimePeriodExtractor();
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public sealed virtual List`1<ExtractResult> Extract(string text, DateTime referenceTime);
    private List`1<Token> MergeDateAndTimePeriod(string text, List`1<ExtractResult> dateErs, List`1<ExtractResult> timeRangeErs);
    private List`1<Token> MergeTwoTimePoints(string text, List`1<ExtractResult> dateTimeErs, List`1<ExtractResult> timeErs);
    private List`1<Token> MatchNight(string text, DateTime referenceTime);
    private IEnumerable`1<Token> MergeDateWithTimePeriodSuffix(string text, List`1<ExtractResult> dateErs, List`1<ExtractResult> timeErs);
    private List`1<Token> MatchDuration(string text, DateTime reference);
    private List`1<Token> MatchRelativeUnit(string text);
    private IEnumerable`1<Token> MatchDateWithPeriodSuffix(string text, List`1<ExtractResult> dateErs);
    private List`1<Token> MatchNumberWithUnit(string text);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKDateTimePeriodParser : object {
    public static string ParserName;
    private ICJKDateTimePeriodParserConfiguration config;
    public BaseCJKDateTimePeriodParser(ICJKDateTimePeriodParserConfiguration configuration);
    private static BaseCJKDateTimePeriodParser();
    public sealed virtual ParseResult Parse(ExtractResult extResult);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refDate);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    private DateTimeResolutionResult MergeDateAndTimePeriod(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseDateWithTimePeriodSuffix(string text, DateTime referenceTime);
    private DateTimeResolutionResult MergeTwoTimePoints(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseDuration(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseSpecificNight(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseNumberWithUnit(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseRelativeUnit(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseDateWithPeriodSuffix(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKDurationExtractor : object {
    public static string ExtractorName;
    private ICJKDurationExtractorConfiguration config;
    private bool merge;
    public BaseCJKDurationExtractor(ICJKDurationExtractorConfiguration config, bool merge);
    private static BaseCJKDurationExtractor();
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public sealed virtual List`1<ExtractResult> Extract(string source, DateTime referenceTime);
    private List`1<ExtractResult> MergeMultipleDuration(string text, List`1<ExtractResult> extractorResults);
    private List`1<ExtractResult> ImplicitDuration(string text);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKDurationParser : object {
    public static string ParserName;
    private ICJKDurationParserConfiguration config;
    public BaseCJKDurationParser(ICJKDurationParserConfiguration configuration);
    private static BaseCJKDurationParser();
    public sealed virtual ParseResult Parse(ExtractResult extResult);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refDate);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    private DateTimeResolutionResult ParseAnUnit(string text);
    private DateTimeResolutionResult ParseMergedDuration(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKHolidayExtractor : object {
    private static string ExtractorName;
    private ICJKHolidayExtractorConfiguration config;
    public BaseCJKHolidayExtractor(ICJKHolidayExtractorConfiguration config);
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public sealed virtual List`1<ExtractResult> Extract(string text, DateTime reference);
    private List`1<Token> HolidayMatch(string text);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKHolidayParser : object {
    public static string ParserName;
    private ICJKHolidayParserConfiguration config;
    public BaseCJKHolidayParser(ICJKHolidayParserConfiguration config);
    private static BaseCJKHolidayParser();
    public sealed virtual ParseResult Parse(ExtractResult extResult);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refDate);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    private DateTime GetFutureValue(DateTime value, DateTime referenceDate, string holiday);
    private DateTime GetPastValue(DateTime value, DateTime referenceDate, string holiday);
    private DateTimeResolutionResult ParseHolidayRegexMatch(string text, DateTime referenceDate);
    private DateTimeResolutionResult Match2Date(Match match, DateTime referenceDate);
    private int ConvertToInteger(string yearCJKStr);
    private bool IsLunarCalendar(string text);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKMergedDateTimeExtractor : object {
    private ICJKMergedExtractorConfiguration config;
    public BaseCJKMergedDateTimeExtractor(ICJKMergedExtractorConfiguration config);
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public sealed virtual List`1<ExtractResult> Extract(string text, DateTime referenceTime);
    private static List`1<ExtractResult> MoveOverlap(List`1<ExtractResult> dst, ExtractResult result);
    private List`1<ExtractResult> FilterUnspecificDatePeriod(List`1<ExtractResult> ers);
    private List`1<ExtractResult> AddMod(List`1<ExtractResult> ers, string text);
    private void AddTo(List`1<ExtractResult> dst, List`1<ExtractResult> src);
    private bool AmbiguousRangeChecker(string beforeStr, string text, ExtractResult er);
    private Metadata AssignModMetadata(Metadata metadata);
    [CompilerGeneratedAttribute]
private bool <FilterUnspecificDatePeriod>b__5_0(ExtractResult o);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKMergedDateTimeParser : object {
    private ICJKMergedParserConfiguration config;
    public BaseCJKMergedDateTimeParser(ICJKMergedParserConfiguration configuration);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    public sealed virtual ParseResult Parse(ExtractResult er);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refTime);
    private DateTimeParseResult ParseResult(ExtractResult extractResult, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKSetExtractor : object {
    public static string ExtractorName;
    private ICJKSetExtractorConfiguration config;
    public BaseCJKSetExtractor(ICJKSetExtractorConfiguration config);
    private static BaseCJKSetExtractor();
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public sealed virtual List`1<ExtractResult> Extract(string text, DateTime referenceTime);
    public List`1<Token> MatchEachDuration(string text, DateTime referenceTime);
    public List`1<Token> MatchEachUnit(string text);
    public List`1<Token> MatchEach(IDateTimeExtractor extractor, string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKSetParser : object {
    public static string ParserName;
    private ICJKSetParserConfiguration config;
    public BaseCJKSetParser(ICJKSetParserConfiguration configuration);
    private static BaseCJKSetParser();
    public sealed virtual ParseResult Parse(ExtractResult extResult);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refDate);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    private DateTimeResolutionResult ParseEachDuration(string text, DateTime refDate);
    private DateTimeResolutionResult ParseEachUnit(string text);
    private DateTimeResolutionResult ParseEach(IDateTimeExtractor extractor, IDateTimeParser parser, string text, DateTime refDate);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKTimeExtractor : object {
    public static Regex HourRegex;
    public static Regex MinuteRegex;
    public static Regex SecondRegex;
    private static string ExtractorName;
    private static ResultsCache`1<ExtractResult> ResultsCache;
    private string keyPrefix;
    private ICJKTimeExtractorConfiguration config;
    protected static TimeSpan RegexTimeOut { get; }
    public BaseCJKTimeExtractor(ICJKTimeExtractorConfiguration config);
    private static BaseCJKTimeExtractor();
    protected static TimeSpan get_RegexTimeOut();
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public virtual List`1<ExtractResult> Extract(string source, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKTimeParser : object {
    public static string ParserName;
    private ICJKTimeParserConfiguration config;
    public BaseCJKTimeParser(ICJKTimeParserConfiguration configuration);
    private static BaseCJKTimeParser();
    public sealed virtual ParseResult Parse(ExtractResult extResult);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refDate);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKTimePeriodExtractor : object {
    public static string ExtractorName;
    private static ResultsCache`1<ExtractResult> ResultsCache;
    private ICJKTimePeriodExtractorConfiguration config;
    private string keyPrefix;
    public BaseCJKTimePeriodExtractor(ICJKTimePeriodExtractorConfiguration config);
    private static BaseCJKTimePeriodExtractor();
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public virtual List`1<ExtractResult> Extract(string source, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.BaseCJKTimePeriodParser : object {
    public static string ParserName;
    private ICJKTimePeriodParserConfiguration config;
    public BaseCJKTimePeriodParser(ICJKTimePeriodParserConfiguration configuration);
    private static BaseCJKTimePeriodParser();
    public sealed virtual ParseResult Parse(ExtractResult extResult);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refDate);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    private DateTimeResolutionResult ParseTimeOfDay(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.BaseDateExtractor : AbstractYearExtractor {
    public static string ExtractorName;
    private static ResultsCache`1<ExtractResult> ResultsCache;
    private string keyPrefix;
    public BaseDateExtractor(IDateExtractorConfiguration config);
    private static BaseDateExtractor();
    public static bool IsOverlapWithExistExtractions(Token er, List`1<Token> existErs);
    public virtual List`1<ExtractResult> Extract(string text);
    public virtual List`1<ExtractResult> Extract(string text, DateTime reference);
    public List`1<Token> ExtractRelativeDurationDateWithInPrefix(string text, List`1<ExtractResult> durationEr, DateTime reference);
    private static void StripInequality(ExtractResult er, Regex regex, bool inPrefix);
    private static bool IsMultipleDurationDate(ExtractResult er);
    private static bool IsMultipleDuration(ExtractResult er);
    private static bool IsInequalityDuration(ExtractResult er);
    private List`1<ExtractResult> ExtractImpl(string text, DateTime reference);
    private List`1<Token> BasicRegexMatch(string text);
    private List`1<Token> ImplicitDate(string text);
    private List`1<Token> NumberWithMonth(string text, DateTime reference);
    private void ExtendWithWeekdayAndYear(Int32& startIndex, Int32& endIndex, int month, int day, string text, DateTime reference);
    private List`1<Token> ExtractRelativeDurationDate(string text, List`1<Token> tokens, DateTime reference);
    private void StripInequalityDuration(ExtractResult er);
    private List`1<Token> ExtractInConnector(string text, string firstStr, string secondStr, Token duration, Boolean& success, bool inPrefix);
    private int GetYearIndex(string affix, Int32& year, Boolean& success, bool inPrefix);
    private List`1<Token> ExtendWithWeekDay(List`1<Token> ret, string text);
}
public class Microsoft.Recognizers.Text.DateTime.BaseDateParser : object {
    public static string ParserName;
    public static DateTime NoDate;
    private IDateParserConfiguration config;
    public BaseDateParser(IDateParserConfiguration config);
    private static BaseDateParser();
    public sealed virtual ParseResult Parse(ExtractResult extResult);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime reference);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    private static DateTime ComputeDate(int cardinal, int weekday, int month, int year);
    private static bool EndsWithTerms(string text, IImmutableList`1<string> terms);
    private DateTimeResolutionResult ParseBasicRegexMatch(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseImplicitDate(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseTasksModeDurationToDatePattern(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseNumberWithMonth(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseSingleNumber(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseDurationWithAgoAndLater(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseDurationWithDate(string text, DateTime referenceDate);
    private DateTimeResolutionResult Match2Date(Match match, DateTime referenceDate, string relativeStr);
    private DateTimeResolutionResult ParseWeekdayOfMonth(string text, DateTime referenceDate);
    private int GetSwiftDay(string text);
    private int GetSwift(string text);
    private void GetYearInAffix(string affix, Int32& year, Boolean& ambiguous, Boolean& success);
    private DateTimeResolutionResult SwiftResolutionByWeekday(DateTimeResolutionResult ret, string text);
}
public abstract class Microsoft.Recognizers.Text.DateTime.BaseDateParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeAltParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, double> <DoubleNumbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SeasonMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SpecialYearPrefixesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <WrittenDecades>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <SpecialDecadeCases>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public IExtractor CardinalExtractor { get; protected set; }
    public IExtractor IntegerExtractor { get; protected set; }
    public IExtractor OrdinalExtractor { get; protected set; }
    public IParser NumberParser { get; protected set; }
    public IDateExtractor DateExtractor { get; protected set; }
    public IDateTimeExtractor TimeExtractor { get; protected set; }
    public IDateTimeExtractor DateTimeExtractor { get; protected set; }
    public IDateTimeExtractor DurationExtractor { get; protected set; }
    public IDateTimeExtractor DatePeriodExtractor { get; protected set; }
    public IDateTimeExtractor TimePeriodExtractor { get; protected set; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; protected set; }
    public IDateTimeParser DateParser { get; protected set; }
    public IDateTimeParser TimeParser { get; protected set; }
    public IDateTimeParser DateTimeParser { get; protected set; }
    public IDateTimeParser DurationParser { get; protected set; }
    public IDateTimeParser DatePeriodParser { get; protected set; }
    public IDateTimeParser TimePeriodParser { get; protected set; }
    public IDateTimeExtractor HolidayExtractor { get; protected set; }
    public IDateTimeParser DateTimePeriodParser { get; protected set; }
    public IDateTimeParser DateTimeAltParser { get; protected set; }
    public IDateTimeParser TimeZoneParser { get; protected set; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; protected set; }
    public IImmutableDictionary`2<string, int> Numbers { get; protected set; }
    public IImmutableDictionary`2<string, double> DoubleNumbers { get; protected set; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; protected set; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; protected set; }
    public IImmutableDictionary`2<string, string> SpecialYearPrefixesMap { get; protected set; }
    public IImmutableDictionary`2<string, string> UnitMap { get; protected set; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; protected set; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; protected set; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> WrittenDecades { get; protected set; }
    public IImmutableDictionary`2<string, int> SpecialDecadeCases { get; protected set; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; protected set; }
    public IDateTimeParser HolidayTimeParser { get; protected set; }
    protected BaseDateParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_CardinalExtractor(IExtractor value);
    [CompilerGeneratedAttribute]
public virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_IntegerExtractor(IExtractor value);
    [CompilerGeneratedAttribute]
public virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_OrdinalExtractor(IExtractor value);
    [CompilerGeneratedAttribute]
public virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
protected virtual void set_NumberParser(IParser value);
    [CompilerGeneratedAttribute]
public virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_DateExtractor(IDateExtractor value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_TimeExtractor(IDateTimeExtractor value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_DateTimeExtractor(IDateTimeExtractor value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_DurationExtractor(IDateTimeExtractor value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_DatePeriodExtractor(IDateTimeExtractor value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_TimePeriodExtractor(IDateTimeExtractor value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_DateTimePeriodExtractor(IDateTimeExtractor value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
protected virtual void set_DateParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
protected virtual void set_TimeParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
protected virtual void set_DateTimeParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
protected virtual void set_DurationParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_DatePeriodParser();
    [CompilerGeneratedAttribute]
protected virtual void set_DatePeriodParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
protected virtual void set_TimePeriodParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
protected virtual void set_HolidayExtractor(IDateTimeExtractor value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
protected virtual void set_DateTimePeriodParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_DateTimeAltParser();
    [CompilerGeneratedAttribute]
protected virtual void set_DateTimeAltParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
protected virtual void set_TimeZoneParser(IDateTimeParser value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
protected virtual void set_MonthOfYear(IImmutableDictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
protected virtual void set_Numbers(IImmutableDictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, double> get_DoubleNumbers();
    [CompilerGeneratedAttribute]
protected virtual void set_DoubleNumbers(IImmutableDictionary`2<string, double> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    [CompilerGeneratedAttribute]
protected virtual void set_UnitValueMap(IImmutableDictionary`2<string, long> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    [CompilerGeneratedAttribute]
protected virtual void set_SeasonMap(IImmutableDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, string> get_SpecialYearPrefixesMap();
    [CompilerGeneratedAttribute]
protected virtual void set_SpecialYearPrefixesMap(IImmutableDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
protected virtual void set_UnitMap(IImmutableDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
protected virtual void set_CardinalMap(IImmutableDictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    [CompilerGeneratedAttribute]
protected virtual void set_DayOfWeek(IImmutableDictionary`2<string, int> value);
    public virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, int> get_WrittenDecades();
    [CompilerGeneratedAttribute]
protected virtual void set_WrittenDecades(IImmutableDictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public virtual IImmutableDictionary`2<string, int> get_SpecialDecadeCases();
    [CompilerGeneratedAttribute]
protected virtual void set_SpecialDecadeCases(IImmutableDictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
protected virtual void set_UtilityConfiguration(IDateTimeUtilityConfiguration value);
    [CompilerGeneratedAttribute]
public virtual IDateTimeParser get_HolidayTimeParser();
    [CompilerGeneratedAttribute]
protected virtual void set_HolidayTimeParser(IDateTimeParser value);
}
public class Microsoft.Recognizers.Text.DateTime.BaseDatePeriodExtractor : object {
    private static string ExtractorName;
    private static ResultsCache`1<ExtractResult> ResultsCache;
    private IDatePeriodExtractorConfiguration config;
    private string keyPrefix;
    public BaseDatePeriodExtractor(IDatePeriodExtractorConfiguration config);
    private static BaseDatePeriodExtractor();
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public sealed virtual List`1<ExtractResult> Extract(string text, DateTime reference);
    public List`1<Token> MatchDuration(string text, DateTime reference);
    private static List`1<Token> GetTokenForRegexMatching(string text, Regex regex, ExtractResult er, bool inPrefix);
    private static bool InfixBoundaryCheck(Match match, string source);
    private static bool IsDigitChar(char ch);
    private static bool HasDashPrefix(Match match, string source, Int32& dashPrefixIndex);
    private static bool HasDashSuffix(Match match, string source, Int32& dashSuffixIndex);
    private static bool HasDigitNumberBeforeDash(string source, int dashPrefixIndex, Int32& numberStartIndex);
    private static bool HasDigitNumberAfterDash(string source, int dashSuffixIndex, Int32& numberEndIndex);
    private List`1<ExtractResult> ExtractImpl(string text, DateTime reference);
    private List`1<Token> MatchOrdinalNumberWithCenturySuffix(string text, List`1<ExtractResult> ordinalExtractions);
    private List`1<Token> MatchYearPeriod(string text, DateTime referenceDate);
    private List`1<Token> MatchSimpleCases(string text);
    private bool HasInvalidDashContext(Match match, string text);
    private List`1<Token> MatchComplexCases(string text, List`1<ExtractResult> simpleDateRangeResults, DateTime reference);
    private List`1<Token> MergeTwoTimePoints(string text, DateTime reference);
    private List`1<Token> MergeMultipleExtractions(string text, List`1<ExtractResult> extractionResults);
    private List`1<Token> SingleTimePointWithPatterns(string text, List`1<ExtractResult> ordinalExtractions, DateTime reference);
    private bool IsRelativeDurationDate(ExtractResult er);
    private bool IsAgoRelativeDurationDate(ExtractResult er);
    private bool IsDateRelativeToNowOrToday(ExtractResult er);
    private Token MatchWithinNextAffixRegex(string text, Token duration, bool inPrefix);
    private List`1<Token> ExtractWithinNextPrefix(string subStr, ExtractResult extractionResult, bool inPrefix);
    private List`1<ExtractResult> MatchNow(string text, List`1<ExtractResult> er);
}
public class Microsoft.Recognizers.Text.DateTime.BaseDatePeriodParser : object {
    public static string ParserName;
    private static bool inclusiveEndPeriod;
    private static Calendar Cal;
    private IDatePeriodParserConfiguration config;
    public BaseDatePeriodParser(IDatePeriodParserConfiguration configuration);
    private static BaseDatePeriodParser();
    public static bool IsPresent(int swift);
    public static Tuple`2<DateTime, DateTime> GetWeekRangeFromDate(DateTime date);
    public static Tuple`2<DateTime, DateTime> GetMonthRangeFromDate(DateTime date);
    public static DateContext GetYearContext(ISimpleDatePeriodParserConfiguration config, string startDateStr, string endDateStr, string text);
    public sealed virtual ParseResult Parse(ExtractResult result);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refDate);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    private static DateTime ShiftResolution(Tuple`2<DateTime, DateTime> date, Match match, bool start);
    private DateTimeResolutionResult ParseComplexDatePeriod(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseBaseDatePeriod(string text, DateTime referenceDate, DateContext dateContext);
    private DateTimeResolutionResult ParseOrdinalNumberWithCenturySuffix(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseDatePointWithAgoAndLater(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseSingleTimePoint(string text, DateTime referenceDate, DateContext dateContext);
    private DateTimeResolutionResult ParseSimpleCases(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseOneWordPeriod(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseMonthWithYear(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseYear(string text, DateTime referenceDate);
    private DateTimeResolutionResult MergeTwoTimePoints(string text, DateTime referenceDate);
    private DateTimeParseResult ParseNowAsDate(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseDuration(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseWeekOfMonth(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseWeekOfYear(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseHalfYear(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseQuarter(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseSeason(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseWeekOfDate(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseMonthOfDate(string text, DateTime referenceDate);
    private DateTimeResolutionResult ParseWhichWeek(string text, DateTime referenceDate);
    private DateTimeResolutionResult GetWeekOfMonth(string cardinalStr, int month, int year, DateTime referenceDate, bool noYear);
    private DateTime GetMondayOfTargetWeek(string cardinalStr, int month, int year);
    private int GetWeekNumberForMonth(string cardinalStr);
    private DateTimeResolutionResult ParseDecade(string text, DateTime referenceDate);
    private void MatchWithinNextPrefix(string subStr, bool isAgo, Boolean& isLessThanOrWithIn, Boolean& isMoreThan);
}
public class Microsoft.Recognizers.Text.DateTime.BaseDateTimeAltExtractor : object {
    private static string ExtractorName;
    private IDateTimeAltExtractorConfiguration config;
    public BaseDateTimeAltExtractor(IDateTimeAltExtractorConfiguration config);
    public sealed virtual List`1<ExtractResult> Extract(List`1<ExtractResult> extractResult, string text, DateTime reference);
    public List`1<ExtractResult> ExtractAlt(List`1<ExtractResult> extractResult, string text, DateTime reference);
    private static void PruneInvalidImplicitDate(List`1<ExtractResult> ers);
    private static bool IsSupportedAltEntitySequence(List`1<ExtractResult> altEntities);
    private static ExtractResult ExtractContext(ExtractResult er, List`1<Func`2<string, List`1<ExtractResult>>> extractMethods, Action`2<ExtractResult, ExtractResult> postProcessMethod);
    private static bool ShouldCreateMetadata(List`1<ExtractResult> originalErs, ExtractResult contextEr);
    private static Dictionary`2<string, object> MergeMetadata(object originalMetadata, Dictionary`2<string, object> newMetadata);
    private static Dictionary`2<string, object> CreateMetadata(string subType, string parentText, ExtractResult contextEr);
    private static Action`2<ExtractResult, ExtractResult> GetPostProcessMethod(string firstEntityType, string lastEntityType);
    private static bool ShouldApplyParentText(List`1<ExtractResult> extractResults);
    private static bool ApplyParentTextMetadata(List`1<ExtractResult> extractResults, string parentText);
    private static void ApplyMetadata(List`1<ExtractResult> ers, Dictionary`2<string, object> metadata, string parentText);
    private List`1<ExtractResult> GetAltErsWithSameParentText(List`1<ExtractResult> ers, int startIndex, string text);
    private List`1<ExtractResult> AddImplicitDates(List`1<ExtractResult> originalErs, string text);
    private void ResolveImplicitRelativeDatePeriod(List`1<ExtractResult> ers, string text);
    private bool IsConnectorOrWhiteSpace(int start, int end, string text, bool isRelativeTerm);
    private bool IsEndsWithRangePrefix(string prefixText);
    private bool ExtractAndApplyMetadata(List`1<ExtractResult> extractResults, string parentText);
    private bool ExtractAndApplyMetadata(List`1<ExtractResult> extractResults, string parentText, bool reverse);
    private Dictionary`2<string, object> ExtractMetadata(ExtractResult targetEr, string parentText, List`1<ExtractResult> ers);
    private List`1<ExtractResult> ExtractRelativePrefixContext(string entityText);
    private List`1<ExtractResult> ExtractAmPmContext(string entityText);
    private List`1<Func`2<string, List`1<ExtractResult>>> GetExtractMethods(string firstEntityType, string lastEntityType);
}
public class Microsoft.Recognizers.Text.DateTime.BaseDateTimeAltParser : object {
    public static string ParserName;
    private IDateTimeAltParserConfiguration config;
    public BaseDateTimeAltParser(IDateTimeAltParserConfiguration configuration);
    private static BaseDateTimeAltParser();
    public sealed virtual ParseResult Parse(ExtractResult result);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refTime);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    private static DateTimeResolutionResult GetResolution(ExtractResult er, DateTimeParseResult pr, DateTimeResolutionResult ret);
    private DateTimeResolutionResult ParseDateTimeAndTimeAlt(ExtractResult er, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.BaseDateTimeExtractor : object {
    public static string ExtractorName;
    private IDateTimeExtractorConfiguration config;
    public BaseDateTimeExtractor(IDateTimeExtractorConfiguration config);
    private static BaseDateTimeExtractor();
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public sealed virtual List`1<ExtractResult> Extract(string text, DateTime reference);
    public List`1<Token> BasicRegexMatch(string text);
    public List`1<Token> MergeDateAndTime(string text, DateTime reference);
    public List`1<Token> MergeHolidayAndTime(string text, DateTime reference);
    public List`1<Token> TimeOfTodayAfter(string text, DateTime reference);
    public List`1<Token> TimeOfTodayBefore(string text, DateTime reference);
    public List`1<Token> SpecialTimeOfDate(string text, DateTime reference);
    private List`1<Token> DurationWithBeforeAndAfter(string text, DateTime reference);
    private void ExtendWithDateTimeAndYear(Int32& startIndex, Int32& endIndex, string text, DateTime reference);
}
public class Microsoft.Recognizers.Text.DateTime.BaseDateTimeOptionsConfiguration : object {
    [CompilerGeneratedAttribute]
private DateTimeOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DmyDateFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LanguageMarker>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    public DateTimeOptions Options { get; }
    public bool DmyDateFormat { get; }
    public string LanguageMarker { get; public set; }
    public string Culture { get; }
    protected static TimeSpan RegexTimeOut { get; }
    public BaseDateTimeOptionsConfiguration(string culture, DateTimeOptions options, bool dmyDateFormat);
    public BaseDateTimeOptionsConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual DateTimeOptions get_Options();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DmyDateFormat();
    [CompilerGeneratedAttribute]
public sealed virtual string get_LanguageMarker();
    [CompilerGeneratedAttribute]
public void set_LanguageMarker(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Culture();
    protected static TimeSpan get_RegexTimeOut();
}
public class Microsoft.Recognizers.Text.DateTime.BaseDateTimeParser : object {
    public static string ParserName;
    private IDateTimeParserConfiguration config;
    public BaseDateTimeParser(IDateTimeParserConfiguration configuration);
    private static BaseDateTimeParser();
    public sealed virtual ParseResult Parse(ExtractResult result);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refTime);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    private static bool WithinAfternoonHours(int hour);
    private static bool WithinMorningHoursAndNoon(int hour, int min, int sec);
    private DateTimeResolutionResult ParseBasicRegex(string text, DateTime referenceTime);
    private DateTimeResolutionResult MergeDateAndTime(string text, DateTime referenceTime);
    private DateTimeResolutionResult MergeHolidayAndTime(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseTimeOfToday(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseSpecialTimeOfDate(string text, DateTime refDateTime);
    private DateTimeResolutionResult ParseUnspecificTimeOfDate(string text, DateTime refDateTime);
    private DateTimeResolutionResult ParserDurationWithAgoAndLater(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.BaseDateTimePeriodExtractor : object {
    public static string ExtractorName;
    private IDateTimePeriodExtractorConfiguration config;
    public BaseDateTimePeriodExtractor(IDateTimePeriodExtractorConfiguration config);
    private static BaseDateTimePeriodExtractor();
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public sealed virtual List`1<ExtractResult> Extract(string text, DateTime reference);
    private static bool MatchPrefixRegexInSegment(string text, Match match, bool inPrefix);
    private IEnumerable`1<Token> MergeDateWithTimePeriodSuffix(string text, List`1<ExtractResult> dateErs, List`1<ExtractResult> timeErs);
    private int GetValidConnectorIndexForDateAndTimePeriod(string text, bool inPrefix);
    private IEnumerable`1<Token> MatchDateWithPeriodPrefix(string text, DateTime reference, List`1<ExtractResult> dateErs);
    private List`1<Token> MatchSimpleCases(string text, DateTime reference);
    private List`1<Token> MergeTwoTimePoints(string text, DateTime reference, List`1<ExtractResult> dateErs, List`1<ExtractResult> timeErs);
    private List`1<Token> MatchTimeOfDay(string text, DateTime reference, List`1<ExtractResult> dateErs);
    private List`1<Token> MatchDuration(string text, DateTime reference);
    private List`1<Token> MatchRelativeUnit(string text);
    private Token MatchWithinNextPrefix(string subStr, string text, Token duration, bool inPrefix);
    private List`1<Token> MatchPureNumberCases(string text, Token tok, bool before);
}
public class Microsoft.Recognizers.Text.DateTime.BaseDateTimePeriodParser : object {
    public static string ParserName;
    [CompilerGeneratedAttribute]
private IDateTimePeriodParserConfiguration <Config>k__BackingField;
    protected static TimeSpan RegexTimeOut { get; }
    protected IDateTimePeriodParserConfiguration Config { get; private set; }
    public BaseDateTimePeriodParser(IDateTimePeriodParserConfiguration configuration);
    private static BaseDateTimePeriodParser();
    protected static TimeSpan get_RegexTimeOut();
    [CompilerGeneratedAttribute]
protected IDateTimePeriodParserConfiguration get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(IDateTimePeriodParserConfiguration value);
    public sealed virtual ParseResult Parse(ExtractResult result);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refTime);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    protected DateTimeResolutionResult InternalParse(string entityText, DateTime referenceTime);
    protected virtual DateTimeResolutionResult ParseSpecificTimeOfDay(string text, DateTime referenceTime);
    private bool IsBeforeOrAfterMod(string mod);
    private DateTimeResolutionResult ParseDateWithTimePeriodSuffix(string text, DateTime referenceTime);
    private string GetValidConnectorModForDateAndTimePeriod(string text, bool inPrefix);
    private DateTimeResolutionResult ParseDateWithPeriodPrefix(string text, DateTime referenceTime);
    private DateTimeResolutionResult MergeDateWithSingleTimePeriod(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParsePureNumberCases(string text, DateTime referenceTime);
    private string ParseTimePeriod(Match match, Int32& beginHour, Int32& endHour);
    private DateTimeResolutionResult MergeTwoTimePoints(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseDuration(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseRelativeUnit(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.BaseDurationExtractor : object {
    public static string ExtractorName;
    private IDurationExtractorConfiguration config;
    private bool merge;
    public BaseDurationExtractor(IDurationExtractorConfiguration config, bool merge);
    private static BaseDurationExtractor();
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public sealed virtual List`1<ExtractResult> Extract(string text, DateTime reference);
    private List`1<ExtractResult> TagInequalityPrefix(string text, List`1<ExtractResult> ers);
    private List`1<Token> NumberWithUnitAndSuffix(string text, List`1<Token> ers);
    private List`1<Token> NumberWithUnit(string text);
    private List`1<ExtractResult> ExtractNumbersBeforeUnit(string text);
    private List`1<Token> ImplicitDuration(string text);
    private List`1<ExtractResult> MergeMultipleDuration(string text, List`1<ExtractResult> extractorResults);
}
public class Microsoft.Recognizers.Text.DateTime.BaseDurationParser : object {
    public static string ParserName;
    private IDurationParserConfiguration config;
    public BaseDurationParser(IDurationParserConfiguration configuration);
    private static BaseDurationParser();
    public sealed virtual ParseResult Parse(ExtractResult result);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refTime);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    private double ParseNumberWithUnitAndSuffix(string text);
    private DateTimeResolutionResult ParseNumberWithUnit(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseNumberSpaceUnit(string text);
    private List`1<ExtractResult> ExtractNumbersBeforeUnit(string text);
    private DateTimeResolutionResult ParseNumberCombinedUnit(string text);
    private DateTimeResolutionResult ParseAnUnit(string text);
    private DateTimeResolutionResult ParseImplicitDuration(string text, DateTime referenceTime);
    private bool TryGetResultFromRegex(Regex regex, string text, string numStr, DateTimeResolutionResult& ret);
    private DateTimeResolutionResult ParseMergedDuration(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.BaseHolidayExtractor : object {
    private static string ExtractorName;
    private static string RangeExtractorName;
    private IHolidayExtractorConfiguration config;
    public BaseHolidayExtractor(IHolidayExtractorConfiguration config);
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public sealed virtual List`1<ExtractResult> Extract(string text, DateTime reference);
    private List`1<Token> HolidayMatch(string text);
}
public class Microsoft.Recognizers.Text.DateTime.BaseHolidayParser : object {
    public static string ParserName;
    private static bool inclusiveEndPeriod;
    private IHolidayParserConfiguration config;
    public BaseHolidayParser(IHolidayParserConfiguration config);
    private static BaseHolidayParser();
    public sealed virtual ParseResult Parse(ExtractResult result);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refDate);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    private DateTimeParseResult ParseSingleDate(ExtractResult er, DateTime refDate);
    private DateTimeParseResult ParseHolidayWeekend(ExtractResult er, DateTime referenceDate);
    private Tuple`2<DateTime, DateTime> GetClosestHolidayWeekend(DateTime dateTimeObject);
    private DateTimeResolutionResult ParseHolidayRegexMatch(ExtractResult er, DateTime referenceDate);
    private DateTimeResolutionResult Match2Date(Match match, DateTime referenceDate);
    private DateTime GetFutureValue(DateTime value, DateTime referenceDate, string holiday);
    private DateTime GetPastValue(DateTime value, DateTime referenceDate, string holiday);
}
public abstract class Microsoft.Recognizers.Text.DateTime.BaseHolidayParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <VariableHolidaysTimexDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, Func`2<int, DateTime>> <HolidayFuncDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, IEnumerable`1<string>> <HolidayNames>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <HolidayRegexList>k__BackingField;
    public IImmutableDictionary`2<string, string> VariableHolidaysTimexDictionary { get; protected set; }
    public IImmutableDictionary`2<string, Func`2<int, DateTime>> HolidayFuncDictionary { get; protected set; }
    public IImmutableDictionary`2<string, IEnumerable`1<string>> HolidayNames { get; protected set; }
    public IEnumerable`1<Regex> HolidayRegexList { get; protected set; }
    protected BaseHolidayParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_VariableHolidaysTimexDictionary();
    [CompilerGeneratedAttribute]
protected void set_VariableHolidaysTimexDictionary(IImmutableDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, Func`2<int, DateTime>> get_HolidayFuncDictionary();
    [CompilerGeneratedAttribute]
protected void set_HolidayFuncDictionary(IImmutableDictionary`2<string, Func`2<int, DateTime>> value);
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, IEnumerable`1<string>> get_HolidayNames();
    [CompilerGeneratedAttribute]
protected void set_HolidayNames(IImmutableDictionary`2<string, IEnumerable`1<string>> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_HolidayRegexList();
    [CompilerGeneratedAttribute]
protected void set_HolidayRegexList(IEnumerable`1<Regex> value);
    public abstract virtual int GetSwiftYear(string text);
    public abstract virtual string SanitizeHolidayToken(string holiday);
    protected static DateTime MothersDay(int year);
    protected static DateTime FathersDay(int year);
    protected static DateTime MemorialDay(int year);
    protected static DateTime UsLabourDay(int year);
    protected static DateTime InternationalWorkersDay(int year);
    protected static DateTime ColumbusDay(int year);
    protected static DateTime ThanksgivingDay(int year);
    protected static DateTime BlackFriday(int year);
    protected static DateTime CyberMonday(int year);
    protected static int GetDay(int year, int month, int week, DayOfWeek dayOfWeek);
    protected static int GetLastDay(int year, int month, DayOfWeek dayOfWeek);
    protected virtual IDictionary`2<string, Func`2<int, DateTime>> InitHolidayFuncs();
    private static DateTime MartinLutherKingDay(int year);
    private static DateTime WashingtonsBirthday(int year);
    private static DateTime CanberraDay(int year);
}
public class Microsoft.Recognizers.Text.DateTime.BaseMergedDateTimeExtractor : object {
    private IMergedExtractorConfiguration config;
    public BaseMergedDateTimeExtractor(IMergedExtractorConfiguration config);
    public static bool HasTokenIndex(string text, Regex regex, Int32& index, bool inPrefix);
    public bool TryMergeModifierToken(ExtractResult er, Regex tokenRegex, string text, bool potentialAmbiguity);
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public sealed virtual List`1<ExtractResult> Extract(string text, DateTime reference);
    private Metadata AssignModMetadata(Metadata metadata);
    private bool IsFailFastCase(string input);
    private List`1<ExtractResult> CheckCalendarModeFilters(List`1<ExtractResult> ers, string text);
    private void AddTo(List`1<ExtractResult> dst, List`1<ExtractResult> src, string text);
    private bool ShouldSkipFromToMerge(ExtractResult er);
    private bool TasksModeFilters(ExtractResult er);
    private bool ShouldSkipOnlyYear(ExtractResult er);
    private List`1<ExtractResult> FilterUnspecificDatePeriod(List`1<ExtractResult> ers);
    private List`1<ExtractResult> NumberEndingRegexMatch(string text, IEnumerable`1<ExtractResult> extractResults);
    private List`1<ExtractResult> AddMod(List`1<ExtractResult> ers, string text);
    [CompilerGeneratedAttribute]
private bool <FilterUnspecificDatePeriod>b__13_0(ExtractResult o);
}
public class Microsoft.Recognizers.Text.DateTime.BaseMergedDateTimeParser : object {
    [CompilerGeneratedAttribute]
private IMergedParserConfiguration <Config>k__BackingField;
    protected IMergedParserConfiguration Config { get; private set; }
    public BaseMergedDateTimeParser(IMergedParserConfiguration configuration);
    [CompilerGeneratedAttribute]
protected IMergedParserConfiguration get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(IMergedParserConfiguration value);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    public sealed virtual ParseResult Parse(ExtractResult er);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refTime);
    private DateTimeParseResult ParseResult(ExtractResult extractResult, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.BaseSetExtractor : object {
    public static string ExtractorName;
    private ISetExtractorConfiguration config;
    public BaseSetExtractor(ISetExtractorConfiguration config);
    private static BaseSetExtractor();
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public sealed virtual List`1<ExtractResult> Extract(string text, DateTime reference);
    public List`1<Token> MatchEachDuration(string text, DateTime reference);
    public List`1<Token> MatchEachUnit(string text);
    public virtual List`1<Token> TimeEveryday(string text, DateTime reference);
    public virtual List`1<Token> DayEveryweek(string text, DateTime reference);
    public List`1<Token> MatchEach(IDateTimeExtractor extractor, string text, DateTime reference);
}
public class Microsoft.Recognizers.Text.DateTime.BaseSetParser : object {
    public static string ParserName;
    private ISetParserConfiguration config;
    public BaseSetParser(ISetParserConfiguration configuration);
    private static BaseSetParser();
    public sealed virtual ParseResult Parse(ExtractResult result);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refDate);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    private DateTimeResolutionResult ParseEachDuration(string text, DateTime refDate);
    private DateTimeResolutionResult ParseEachUnit(string text);
    private DateTimeResolutionResult ParserTimeEveryday(string text, DateTime refDate);
    private DateTimeResolutionResult ParserDayEveryweek(string text, DateTime refDate);
    private DateTimeResolutionResult ParserSingleNumberMonth(string text, DateTime refDate);
    private DateTimeResolutionResult ParseEach(IDateTimeExtractor extractor, IDateTimeParser parser, string text, DateTime refDate);
}
public class Microsoft.Recognizers.Text.DateTime.BaseTimeExtractor : object {
    public static Regex HourRegex;
    public static Regex MinuteRegex;
    public static Regex SecondRegex;
    private static string ExtractorName;
    private static ResultsCache`1<ExtractResult> ResultsCache;
    private string keyPrefix;
    private ITimeExtractorConfiguration config;
    protected static TimeSpan RegexTimeOut { get; }
    public BaseTimeExtractor(ITimeExtractorConfiguration config);
    private static BaseTimeExtractor();
    protected static TimeSpan get_RegexTimeOut();
    public virtual List`1<ExtractResult> Extract(string text);
    public virtual List`1<ExtractResult> Extract(string text, DateTime reference);
    public virtual List`1<ExtractResult> ExtractImpl(string text, DateTime reference);
    private List`1<Token> BasicRegexMatch(string text);
    private List`1<Token> AtRegexMatch(string text);
    private List`1<Token> BeforeAfterRegexMatch(string text);
    private List`1<Token> SpecialCasesRegexMatch(string text, DateTime reference);
}
public class Microsoft.Recognizers.Text.DateTime.BaseTimeParser : object {
    public static string ParserName;
    private ITimeParserConfiguration config;
    public BaseTimeParser(ITimeParserConfiguration configuration);
    private static BaseTimeParser();
    public sealed virtual ParseResult Parse(ExtractResult result);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime referenceTime);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    protected virtual DateTimeResolutionResult InternalParse(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseBasicRegexMatch(string text, DateTime referenceTime);
    private DateTimeResolutionResult Match2Time(Match match, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.BaseTimePeriodExtractor : object {
    public static string ExtractorName;
    private static ResultsCache`1<ExtractResult> ResultsCache;
    private ITimePeriodExtractorConfiguration config;
    private string keyPrefix;
    public BaseTimePeriodExtractor(ITimePeriodExtractorConfiguration config);
    private static BaseTimePeriodExtractor();
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public sealed virtual List`1<ExtractResult> Extract(string text, DateTime reference);
    private List`1<ExtractResult> ExtractImpl(string text, DateTime reference);
    private List`1<Token> MatchSimpleCases(string text);
    private bool StartsWithTimeZone(string afterText);
    private List`1<Token> MergeTwoTimePoints(string text, DateTime reference);
    private List`1<Token> MatchTimeOfDay(string text);
    private List`1<Token> MatchPureNumberCases(string text);
}
public class Microsoft.Recognizers.Text.DateTime.BaseTimePeriodParser : object {
    public static string ParserName;
    private ITimePeriodParserConfiguration config;
    public BaseTimePeriodParser(ITimePeriodParserConfiguration configuration);
    private static BaseTimePeriodParser();
    public sealed virtual ParseResult Parse(ExtractResult result);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refTime);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    private DateTimeResolutionResult InternalParse(string entityText, DateTime referenceTime);
    private DateTimeResolutionResult ParseSimpleCases(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParsePureDigitNumCases(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParsePureNumCases(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseSpecificTimeCases(string text, DateTime referenceTime);
    private DateTimeResolutionResult MergeTwoTimePoints(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseTimeOfDay(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.BaseTimeZoneExtractor : object {
    private static string ExtractorName;
    private ITimeZoneExtractorConfiguration config;
    public BaseTimeZoneExtractor(ITimeZoneExtractorConfiguration config);
    public sealed virtual List`1<ExtractResult> Extract(string text);
    public sealed virtual List`1<ExtractResult> Extract(string text, DateTime reference);
    public sealed virtual List`1<ExtractResult> RemoveAmbiguousTimezone(List`1<ExtractResult> ers);
    private IEnumerable`1<Token> MatchLocationTimes(string text, List`1<Token> tokens, string originalText, bool reIndex);
    private List`1<Token> MatchTimeZones(string text, string originalText, bool reIndex);
    [CompilerGeneratedAttribute]
private bool <RemoveAmbiguousTimezone>b__5_0(ExtractResult o);
}
public class Microsoft.Recognizers.Text.DateTime.BaseTimeZoneParser : object {
    public static string ParserName;
    private ITimeZoneParserConfiguration config;
    [CompilerGeneratedAttribute]
private Regex <TimeZoneEndRegex>k__BackingField;
    public Regex TimeZoneEndRegex { get; }
    public BaseTimeZoneParser(ITimeZoneParserConfiguration config);
    private static BaseTimeZoneParser();
    [CompilerGeneratedAttribute]
public Regex get_TimeZoneEndRegex();
    public static int ComputeMinutes(string utcOffset);
    public static string ConvertOffsetInMinsToOffsetString(int offsetMins);
    public static string ConvertMinsToRegularFormat(int offsetMins);
    public string NormalizeText(string text);
    public sealed virtual ParseResult Parse(ExtractResult result);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refDate);
    public DateTimeResolutionResult GetDateTimeResolutionResult(int offsetMins, string text);
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseCommonDateTimeParserConfiguration : BaseCJKDateParserConfiguration {
    public ChineseCommonDateTimeParserConfiguration(IDateTimeOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseDateExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex WeekDayRegex;
    public static Regex LunarRegex;
    public static Regex ThisRegex;
    public static Regex LastRegex;
    public static Regex NextRegex;
    public static Regex SpecialDayRegex;
    public static Regex WeekDayOfMonthRegex;
    public static Regex WeekDayAndDayRegex;
    public static Regex DurationRelativeDurationUnitRegex;
    public static Regex SpecialDayWithNumRegex;
    public static Regex SpecialDate;
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex WeekDayStartEnd;
    public static Regex DateTimePeriodUnitRegex;
    public static Regex RangeConnectorSymbolRegex;
    public static Regex MonthRegex;
    public static Regex DayRegex;
    public static Regex DayRegexInCJK;
    public static Regex DayRegexNumInCJK;
    public static Regex MonthNumRegex;
    public static Regex YearRegex;
    public static Regex RelativeRegex;
    public static Regex RelativeMonthRegex;
    public static Regex ZeroToNineIntegerRegexCJK;
    public static Regex YearInCJKRegex;
    public static Regex ThisRe;
    public static Regex LastRe;
    public static Regex NextRe;
    public static Regex UnitRegex;
    public static Regex DynastyYearRegex;
    public static string DynastyStartYear;
    public static ImmutableDictionary`2<string, int> DynastyYearMap;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <ImplicitDateList>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    public IEnumerable`1<Regex> DateRegexList { get; }
    public IEnumerable`1<Regex> ImplicitDateList { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.DateTimePeriodUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.WeekDayStartEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.RangeConnectorSymbolRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityDateFiltersDict { get; }
    public ChineseDateExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ChineseDateExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_ImplicitDateList();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.get_DateTimePeriodUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.get_WeekDayStartEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.get_RangeConnectorSymbolRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityDateFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseDateParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex NextMonthRegex;
    public static Regex LastMonthRegex;
    public static Regex LastWeekDayRegex;
    public static string ParserName;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRe>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRe>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <StrictWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LunarRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ThisRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationRelativeDurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayWithNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DynastyYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, int> <DynastyYearMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DynastyStartYear>k__BackingField;
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IEnumerable`1<Regex> DateRegexList { get; }
    public Regex SpecialDate { get; }
    public Regex NextRe { get; }
    public Regex LastRe { get; }
    public Regex SpecialDayRegex { get; }
    public Regex StrictWeekDayRegex { get; }
    public Regex LunarRegex { get; }
    public Regex UnitRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex NextRegex { get; }
    public Regex ThisRegex { get; }
    public Regex LastRegex { get; }
    public Regex WeekDayOfMonthRegex { get; }
    public Regex WeekDayAndDayRegex { get; }
    public Regex DurationRelativeDurationUnitRegex { get; }
    public Regex SpecialDayWithNumRegex { get; }
    public Regex DynastyYearRegex { get; }
    public ImmutableDictionary`2<string, int> DynastyYearMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public string DynastyStartYear { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration.LastWeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration.NextMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration.LastMonthRegex { get; }
    public ChineseDateParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static ChineseDateParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDate();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRe();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRe();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_StrictWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LunarRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ThisRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationRelativeDurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayWithNumRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DynastyYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<string, int> get_DynastyYearMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DynastyStartYear();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration.get_LastWeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration.get_NextMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration.get_LastMonthRegex();
    public sealed virtual int GetSwiftDay(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseDatePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex RangePrefixRegex;
    public static Regex RangeSuffixRegex;
    public static Regex StrictYearRegex;
    public static Regex YearInCJKRegex;
    public static Regex SimpleCasesRegex;
    public static Regex YearAndMonth;
    public static Regex PureNumYearAndMonth;
    public static Regex SimpleYearAndMonth;
    public static Regex OneWordPeriodRegex;
    public static Regex WeekOfMonthRegex;
    public static Regex WeekOfYearRegex;
    public static Regex WeekOfDateRegex;
    public static Regex MonthOfDateRegex;
    public static Regex WhichWeekRegex;
    public static Regex FollowedUnit;
    public static Regex NumberCombinedWithUnit;
    public static Regex YearToYear;
    public static Regex YearToYearSuffixRequired;
    public static Regex MonthToMonth;
    public static Regex MonthToMonthSuffixRequired;
    public static Regex DayToDay;
    public static Regex MonthDayRange;
    public static Regex DayRegexForPeriod;
    public static Regex PastRegex;
    public static Regex FutureRegex;
    public static Regex WeekWithWeekDayRangeRegex;
    public static Regex FirstLastOfYearRegex;
    public static Regex SeasonWithYear;
    public static Regex QuarterRegex;
    public static Regex DecadeRegex;
    public static Regex CenturyRegex;
    public static Regex ComplexDatePeriodRegex;
    public static Regex SpecialMonthRegex;
    public static Regex SpecialYearRegex;
    public static Regex DayRegex;
    public static Regex DayRegexInCJK;
    public static Regex MonthNumRegex;
    public static Regex ThisRegex;
    public static Regex DateUnitRegex;
    public static Regex LastRegex;
    public static Regex NextRegex;
    public static Regex RelativeMonthRegex;
    public static Regex LaterEarlyPeriodRegex;
    public static Regex DatePointWithAgoAndLater;
    public static Regex ReferenceDatePeriodRegex;
    public static Regex MonthRegex;
    public static Regex YearRegex;
    public static Regex YearRegexInNumber;
    public static Regex ZeroToNineIntegerRegexCJK;
    public static Regex MonthSuffixRegex;
    public static Regex UnitRegex;
    public static Regex DurationUnitRegex;
    public static Regex SeasonRegex;
    private static RegexOptions RegexFlags;
    private static Regex[] SimpleCasesRegexes;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    public IDateTimeExtractor DatePointExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.SimpleCasesRegexes { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.FutureRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.PastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.FirstLastOfYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.FollowedUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.RangePrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.RangeSuffixRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public ChineseDatePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ChineseDatePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_SimpleCasesRegexes();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_FutureRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_PastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_FirstLastOfYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_FollowedUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_RangePrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_RangeSuffixRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseDatePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex WoMLastRegex;
    public static Regex WoMPreviousRegex;
    public static Regex WoMNextRegex;
    public static ImmutableDictionary`2<string, int> MonthOfYear;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, int> <DynastyYearMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SeasonMap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DynastyStartYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DynastyYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ThisRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearToYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearToYearSuffixRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterEarlyPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DatePointWithAgoAndLater>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ReferenceDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationRelativeDurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearInCJKRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthToMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthToMonthSuffixRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearAndMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumYearAndMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OneWordPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekWithWeekDayRangeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WhichWeekRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FirstLastOfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SeasonWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DecadeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <CenturyRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ComplexDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DayToDay>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthDayRange>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DayRegexForPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleYearAndMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialYearRegex>k__BackingField;
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser DateParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IParser NumberParser { get; }
    public ImmutableDictionary`2<string, int> DynastyYearMap { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.MonthOfYear { get; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; }
    public string DynastyStartYear { get; }
    public string TokenBeforeDate { get; }
    public Regex DynastyYearRegex { get; }
    public Regex SimpleCasesRegex { get; }
    public Regex ThisRegex { get; }
    public Regex NextRegex { get; }
    public Regex LastRegex { get; }
    public Regex YearToYear { get; }
    public Regex YearToYearSuffixRequired { get; }
    public Regex YearRegex { get; }
    public Regex RelativeRegex { get; }
    public Regex RelativeMonthRegex { get; }
    public Regex LaterEarlyPeriodRegex { get; }
    public Regex DatePointWithAgoAndLater { get; }
    public Regex ReferenceDatePeriodRegex { get; }
    public Regex DurationRelativeDurationUnitRegex { get; }
    public Regex YearInCJKRegex { get; }
    public Regex MonthToMonth { get; }
    public Regex MonthToMonthSuffixRequired { get; }
    public Regex MonthRegex { get; }
    public Regex YearAndMonth { get; }
    public Regex PureNumYearAndMonth { get; }
    public Regex OneWordPeriodRegex { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex WeekWithWeekDayRangeRegex { get; }
    public Regex UnitRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex WeekOfMonthRegex { get; }
    public Regex WeekOfYearRegex { get; }
    public Regex WeekOfDateRegex { get; }
    public Regex MonthOfDateRegex { get; }
    public Regex WhichWeekRegex { get; }
    public Regex FirstLastOfYearRegex { get; }
    public Regex SeasonWithYear { get; }
    public Regex QuarterRegex { get; }
    public Regex DecadeRegex { get; }
    public Regex CenturyRegex { get; }
    public Regex ComplexDatePeriodRegex { get; }
    public Regex DayToDay { get; }
    public Regex MonthDayRange { get; }
    public Regex DayRegexForPeriod { get; }
    public Regex SimpleYearAndMonth { get; }
    public Regex SpecialMonthRegex { get; }
    public Regex SpecialYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.WoMLastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.WoMPreviousRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.WoMNextRegex { get; }
    public int TwoNumYear { get; }
    public ChineseDatePeriodParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static ChineseDatePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<string, int> get_DynastyYearMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DynastyStartYear();
    public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DynastyYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ThisRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearToYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearToYearSuffixRequired();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterEarlyPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DatePointWithAgoAndLater();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ReferenceDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationRelativeDurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearInCJKRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthToMonth();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthToMonthSuffixRequired();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearAndMonth();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumYearAndMonth();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OneWordPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekWithWeekDayRangeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WhichWeekRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FirstLastOfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SeasonWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DecadeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_CenturyRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ComplexDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DayToDay();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthDayRange();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DayRegexForPeriod();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleYearAndMonth();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.get_WoMLastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.get_WoMPreviousRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.get_WoMNextRegex();
    public sealed virtual int get_TwoNumYear();
    public sealed virtual int ToMonthNumber(string monthStr);
    public sealed virtual bool IsMonthOnly(string text);
    public sealed virtual bool IsWeekend(string text);
    public sealed virtual bool IsWeekOnly(string text);
    public sealed virtual bool IsYearOnly(string text);
    public sealed virtual bool IsThisYear(string text);
    public sealed virtual bool IsYearToDate(string text);
    public sealed virtual bool IsLastYear(string text);
    public sealed virtual bool IsNextYear(string text);
    public sealed virtual bool IsYearAfterNext(string text);
    public sealed virtual bool IsYearBeforeLast(string text);
    public sealed virtual int GetSwiftMonth(string text);
    public sealed virtual int GetSwiftYear(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseDateTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static string ExtractorName;
    public static Regex PrepositionRegex;
    public static Regex NowRegex;
    public static Regex NightRegex;
    public static Regex TimeOfSpecialDayRegex;
    public static Regex TimeOfDayRegex;
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex DurationRelativeDurationUnitRegex;
    public static Regex AgoLaterRegex;
    public static Regex DateTimePeriodUnitRegex;
    public static Regex ConnectorRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    public IDateTimeExtractor DatePointExtractor { get; }
    public IDateTimeExtractor TimePointExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.PrepositionRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.NightRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.TimeOfSpecialDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.ConnectorRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityDateTimeFiltersDict { get; }
    public ChineseDateTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ChineseDateTimeExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_PrepositionRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_NightRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_TimeOfSpecialDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_ConnectorRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityDateTimeFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseDateTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex LunarRegex;
    public static Regex LunarHolidayRegex;
    public static Regex SimpleAmRegex;
    public static Regex SimplePmRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfSpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DateTimePeriodUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationRelativeDurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AgoLaterRegex>k__BackingField;
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public ImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex NowRegex { get; }
    public Regex TimeOfSpecialDayRegex { get; }
    public Regex DateTimePeriodUnitRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex DurationRelativeDurationUnitRegex { get; }
    public Regex AgoLaterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.LunarRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.LunarHolidayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.SimpleAmRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.SimplePmRegex { get; }
    public ChineseDateTimeParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static ChineseDateTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfSpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DateTimePeriodUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationRelativeDurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AgoLaterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.get_LunarRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.get_LunarHolidayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.get_SimpleAmRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.get_SimplePmRegex();
    public sealed virtual bool GetMatchedNowTimex(string text, String& timex);
    public sealed virtual int GetSwiftDay(string text);
    public sealed virtual void AdjustByTimeOfDay(string matchStr, Int32& hour, Int32& swift);
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseDateTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex PrepositionRegex;
    public static Regex ZhijianRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex UnitRegex;
    public static Regex FollowedUnit;
    public static Regex PastRegex;
    public static Regex FutureRegex;
    public static Regex WeekDayRegex;
    public static Regex TimePeriodLeftRegex;
    public static Regex RelativeRegex;
    public static Regex RestOfDateRegex;
    public static Regex AmPmDescRegex;
    public static Regex BeforeAfterRegex;
    public static Regex HourRegex;
    public static Regex HourNumRegex;
    public static Regex ThisRegex;
    public static Regex LastRegex;
    public static Regex NextRegex;
    public static Regex NumberCombinedWithUnit;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor SingleDateExtractor { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor SingleDateTimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.PrepositionRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.SpecificTimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.FollowedUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.PastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.FutureRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.TimePeriodLeftRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.RelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.RestOfDateRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.AmPmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.ThisRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.BeforeAfterRegex { get; }
    public ChineseDateTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ChineseDateTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_PrepositionRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_SpecificTimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_FollowedUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_PastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_FutureRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_TimePeriodLeftRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_RelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_RestOfDateRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_AmPmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_ThisRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_BeforeAfterRegex();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseDateTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MORegex;
    public static Regex MIRegex;
    public static Regex AFRegex;
    public static Regex EVRegex;
    public static Regex NIRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <CardinalParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimePeriodLeftRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmPmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser CardinalParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DurationParser { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex NextRegex { get; }
    public Regex LastRegex { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex TimePeriodLeftRegex { get; }
    public Regex UnitRegex { get; }
    public Regex RestOfDateRegex { get; }
    public Regex AmPmDescRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public ChineseDateTimePeriodParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static ChineseDateTimePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_CardinalParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimePeriodLeftRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AmPmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public sealed virtual bool GetMatchedTimeRangeAndSwift(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMinute, Int32& swift);
    public sealed virtual bool GetMatchedTimeRange(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMin);
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseDurationExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex YearRegex;
    public static Regex DurationUnitRegex;
    public static Regex AnUnitRegex;
    public static Regex DurationConnectorRegex;
    public static Regex AllRegex;
    public static Regex HalfRegex;
    public static Regex RelativeDurationUnitRegex;
    public static Regex DuringRegex;
    public static Regex SomeRegex;
    public static Regex MoreOrLessRegex;
    private static RegexOptions RegexFlags;
    private bool merge;
    [CompilerGeneratedAttribute]
private IExtractor <InternalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, long> <UnitValueMap>k__BackingField;
    public IExtractor InternalExtractor { get; }
    public Dictionary`2<string, string> UnitMap { get; }
    public Dictionary`2<string, long> UnitValueMap { get; }
    public Dictionary`2<Regex, Regex> AmbiguityDurationFiltersDict { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.DurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.DurationConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.AllRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.HalfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.RelativeDurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.DuringRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.SomeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.MoreOrLessRegex { get; }
    public ChineseDurationExtractorConfiguration(IDateTimeOptionsConfiguration config, bool merge);
    private static ChineseDurationExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_InternalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, long> get_UnitValueMap();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityDurationFiltersDict();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_DurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_DurationConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_AllRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_HalfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_RelativeDurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_DuringRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_SomeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_MoreOrLessRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseDurationParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <InternalParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SomeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MoreOrLessRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AnUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser InternalParser { get; }
    public Regex YearRegex { get; }
    public Regex SomeRegex { get; }
    public Regex MoreOrLessRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex AnUnitRegex { get; }
    public Regex DurationConnectorRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public ChineseDurationParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_InternalParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SomeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MoreOrLessRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AnUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseHolidayExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex LunarHolidayRegex;
    public static Regex[] HolidayRegexList;
    private static RegexOptions RegexFlags;
    public IEnumerable`1<Regex> HolidayRegexes { get; }
    public ChineseHolidayExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ChineseHolidayExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_HolidayRegexes();
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseHolidayParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Dictionary`2<string, Func`2<int, DateTime>> FixedHolidaysDict;
    public static Dictionary`2<string, Func`2<int, DateTime>> HolidayFuncDict;
    public static Dictionary`2<string, string> NoFixedTimex;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <HolidayRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LunarHolidayRegex>k__BackingField;
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    private Dictionary`2<string, Func`2<int, DateTime>> Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration.FixedHolidaysDict { get; }
    private Dictionary`2<string, Func`2<int, DateTime>> Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration.HolidayFuncDict { get; }
    private Dictionary`2<string, string> Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration.NoFixedTimex { get; }
    public IEnumerable`1<Regex> HolidayRegexList { get; }
    public Regex LunarHolidayRegex { get; }
    public ChineseHolidayParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static ChineseHolidayParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    private sealed virtual override Dictionary`2<string, Func`2<int, DateTime>> Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration.get_FixedHolidaysDict();
    private sealed virtual override Dictionary`2<string, Func`2<int, DateTime>> Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration.get_HolidayFuncDict();
    private sealed virtual override Dictionary`2<string, string> Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration.get_NoFixedTimex();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_HolidayRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LunarHolidayRegex();
    public sealed virtual int GetSwiftYear(string text);
    public sealed virtual string SanitizeYearToken(string yearStr);
    private static DateTime NewYear(int year);
    private static DateTime TeacherDay(int year);
    private static DateTime YouthDay(int year);
    private static DateTime ChildrenDay(int year);
    private static DateTime FemaleDay(int year);
    private static DateTime TreePlantDay(int year);
    private static DateTime LoverDay(int year);
    private static DateTime ChristmasEve(int year);
    private static DateTime ChristmasDay(int year);
    private static DateTime FoolDay(int year);
    private static DateTime LaborDay(int year);
    private static DateTime HalloweenDay(int year);
    private static DateTime MidautumnDay(int year);
    private static DateTime SpringDay(int year);
    private static DateTime NewYearEve(int year);
    private static DateTime LanternDay(int year);
    private static DateTime QingMingDay(int year);
    private static DateTime DragonBoatDay(int year);
    private static DateTime ChsNationalDay(int year);
    private static DateTime ChsMilBuildDay(int year);
    private static DateTime GirlsDay(int year);
    private static DateTime SinglesDay(int year);
    private static DateTime ChongYangDay(int year);
    private static DateTime GetMothersDayOfYear(int year);
    private static DateTime GetFathersDayOfYear(int year);
    private static DateTime GetMartinLutherKingDayOfYear(int year);
    private static DateTime GetWashingtonsBirthdayOfYear(int year);
    private static DateTime GetCanberraDayOfYear(int year);
    private static DateTime GetMemorialDayOfYear(int year);
    private static DateTime GetLabourDayOfYear(int year);
    private static DateTime GetColumbusDayOfYear(int year);
    private static DateTime GetThanksgivingDayOfYear(int year);
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseMergedExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex BeforeRegex;
    public static Regex UnspecificDatePeriodRegex;
    public static Regex AfterRegex;
    public static Regex UntilRegex;
    public static Regex SincePrefixRegex;
    public static Regex SinceSuffixRegex;
    public static Regex AroundPrefixRegex;
    public static Regex AroundSuffixRegex;
    public static Regex EqualRegex;
    public static Regex PotentialAmbiguousRangeRegex;
    public static Regex AmbiguousRangeModifierPrefix;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SetExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor SetExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.UnspecificDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.SincePrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.SinceSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.AroundPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.AroundSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.UntilRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.EqualRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.PotentialAmbiguousRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.AmbiguousRangeModifierPrefix { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public ChineseMergedExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ChineseMergedExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SetExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_UnspecificDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_SincePrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_SinceSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_AroundPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_AroundSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_UntilRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_EqualRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_PotentialAmbiguousRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_AmbiguousRangeModifierPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseMergedParserConfiguration : ChineseCommonDateTimeParserConfiguration {
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SincePrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SinceSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AroundPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AroundSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UntilRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EqualRegex>k__BackingField;
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex SincePrefixRegex { get; }
    public Regex SinceSuffixRegex { get; }
    public Regex AroundPrefixRegex { get; }
    public Regex AroundSuffixRegex { get; }
    public Regex UntilRegex { get; }
    public Regex EqualRegex { get; }
    public ChineseMergedParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SincePrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SinceSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AroundPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AroundSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UntilRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EqualRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseSetExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex UnitRegex;
    public static Regex EachUnitRegex;
    public static Regex EachPrefixRegex;
    public static Regex EachSuffixRegex;
    public static Regex LastRegex;
    public static Regex EachDayRegex;
    public static Regex EachDateUnitRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.LastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.EachPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.EachSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.EachUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.EachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.EachDateUnitRegex { get; }
    public ChineseSetExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ChineseSetExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_LastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_EachPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_EachSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_EachUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_EachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_EachDateUnitRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseSetParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public Regex EachPrefixRegex { get; }
    public Regex EachUnitRegex { get; }
    public Regex EachDayRegex { get; }
    public Regex EachDateUnitRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public ChineseSetParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public sealed virtual bool GetMatchedUnitTimex(string text, String& timex);
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static string HourNumRegex;
    public static string MinuteNumRegex;
    public static string SecondNumRegex;
    public static string HourCJKRegex;
    public static string MinuteCJKRegex;
    public static string SecondCJKRegex;
    public static string ClockDescRegex;
    public static string MinuteDescRegex;
    public static string SecondDescRegex;
    public static string BanHourPrefixRegex;
    public static string HourRegex;
    public static string MinuteRegex;
    public static string SecondRegex;
    public static string HalfRegex;
    public static string QuarterRegex;
    public static string CJKTimeRegex;
    public static string DigitTimeRegex;
    public static string DayDescRegex;
    public static string ApproximateDescPreffixRegex;
    public static string ApproximateDescSuffixRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TimeType> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Regex> <AmbiguityTimeFiltersDict>k__BackingField;
    public ImmutableDictionary`2<Regex, TimeType> Regexes { get; }
    public Dictionary`2<Regex, Regex> AmbiguityTimeFiltersDict { get; }
    public ChineseTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ChineseTimeExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<Regex, TimeType> get_Regexes();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityTimeFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static TimeFunctions timeFunc;
    private static Dictionary`2<TimeType, TimeFunction> FunctionMap;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    public IDateTimeExtractor TimeExtractor { get; }
    private TimeFunctions Microsoft.Recognizers.Text.DateTime.ICJKTimeParserConfiguration.TimeFunc { get; }
    private Dictionary`2<TimeType, TimeFunction> Microsoft.Recognizers.Text.DateTime.ICJKTimeParserConfiguration.FunctionMap { get; }
    public ChineseTimeParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static ChineseTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    private sealed virtual override TimeFunctions Microsoft.Recognizers.Text.DateTime.ICJKTimeParserConfiguration.get_TimeFunc();
    private sealed virtual override Dictionary`2<TimeType, TimeFunction> Microsoft.Recognizers.Text.DateTime.ICJKTimeParserConfiguration.get_FunctionMap();
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static string TimePeriodConnectWords;
    public static string CJKTimeRegex;
    public static string LeftCJKTimeRegex;
    public static string RightCJKTimeRegex;
    public static string DigitTimeRegex;
    public static string LeftDigitTimeRegex;
    public static string RightDigitTimeRegex;
    public static string ShortLeftCJKTimeRegex;
    public static string ShortLeftDigitTimeRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, PeriodType> <Regexes>k__BackingField;
    public ImmutableDictionary`2<Regex, PeriodType> Regexes { get; }
    public Dictionary`2<Regex, Regex> AmbiguityTimePeriodFiltersDict { get; }
    public ChineseTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ChineseTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<Regex, PeriodType> get_Regexes();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityTimePeriodFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Chinese.ChineseTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static TimeFunctions timeFunc;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    private TimeFunctions Microsoft.Recognizers.Text.DateTime.ICJKTimePeriodParserConfiguration.TimeFunc { get; }
    public ChineseTimePeriodParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static ChineseTimePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    private sealed virtual override TimeFunctions Microsoft.Recognizers.Text.DateTime.ICJKTimePeriodParserConfiguration.get_TimeFunc();
    public sealed virtual bool GetMatchedTimexRange(string text, String& timex, Int32& beginHour, Int32& endHour, Int32& endMin);
}
public static class Microsoft.Recognizers.Text.DateTime.Constants : object {
    public static string SYS_DATETIME_DATE;
    public static string SYS_DATETIME_TIME;
    public static string SYS_DATETIME_DATEPERIOD;
    public static string SYS_DATETIME_DATETIME;
    public static string SYS_DATETIME_TIMEPERIOD;
    public static string SYS_DATETIME_DATETIMEPERIOD;
    public static string SYS_DATETIME_DURATION;
    public static string SYS_DATETIME_SET;
    public static string SYS_DATETIME_DATETIMEALT;
    public static string SYS_DATETIME_TIMEZONE;
    public static string SYS_DATETIME_DATETIMEPOINT;
    public static string SYS_NUMBER_ORDINAL;
    public static string MODEL_DATETIME;
    public static string MultipleDuration_Prefix;
    public static string MultipleDuration_Type;
    public static string MultipleDuration_DateTime;
    public static string MultipleDuration_Date;
    public static string MultipleDuration_Time;
    public static string Resolve;
    public static string ResolveToPast;
    public static string ResolveToFuture;
    public static string Context;
    public static string ContextType_RelativePrefix;
    public static string ContextType_RelativeSuffix;
    public static string ContextType_AmPm;
    public static string SubType;
    public static string Comment;
    public static string Comment_AmPm;
    public static string Comment_Am;
    public static string Comment_Early;
    public static string Comment_Late;
    public static string Comment_WeekOf;
    public static string Comment_MonthOf;
    public static string Comment_DoubleTimex;
    public static string BEFORE_MOD;
    public static string AFTER_MOD;
    public static string SINCE_MOD;
    public static string UNTIL_MOD;
    public static string EARLY_MOD;
    public static string MID_MOD;
    public static string LATE_MOD;
    public static string MORE_THAN_MOD;
    public static string LESS_THAN_MOD;
    public static string REF_UNDEF_MOD;
    public static string APPROX_MOD;
    public static string HAS_MOD;
    public static string AGO_LABEL;
    public static string LATER_LABEL;
    public static int InvalidOffsetValue;
    public static string UtcOffsetMinsKey;
    public static string TimeZoneText;
    public static string TimeZone;
    public static string ResolveTimeZone;
    public static int PositiveSign;
    public static int NegativeSign;
    public static int TrimesterMonthCount;
    public static int QuarterCount;
    public static int SemesterMonthCount;
    public static int WeekDayCount;
    public static int CenturyYearsCount;
    public static int MaxWeekOfMonth;
    public static int MaxMonth;
    public static int MinMonth;
    public static int MaxDayMonth;
    public static int DayHourStart;
    public static int DayHourCount;
    public static int HalfDayHourCount;
    public static int QuarterDayHourCount;
    public static int HalfMidDayDurationHourCount;
    public static int HourMinuteCount;
    public static int FourDigitsYearLength;
    public static int EarlyMorningBeginHour;
    public static int EarlyMorningEndHour;
    public static int MorningBeginHour;
    public static int MorningEndHour;
    public static int MidDayBeginHour;
    public static int MidDayEndHour;
    public static int AfternoonBeginHour;
    public static int AfternoonEndHour;
    public static int EveningBeginHour;
    public static int EveningEndHour;
    public static int DaytimeBeginHour;
    public static int DaytimeEndHour;
    public static int NighttimeBeginHour;
    public static int NighttimeEndHour;
    public static int BusinessBeginHour;
    public static int BusinessEndHour;
    public static int NightBeginHour;
    public static int NightEndHour;
    public static int NightEndMin;
    public static int MealtimeBreakfastBeginHour;
    public static int MealtimeBreakfastEndHour;
    public static int MealtimeBrunchBeginHour;
    public static int MealtimeBrunchEndHour;
    public static int MealtimeLunchBeginHour;
    public static int MealtimeLunchEndHour;
    public static int MealtimeDinnerBeginHour;
    public static int MealtimeDinnerEndHour;
    public static int EARLY_LATE_TIME_DELTA;
    public static string DefaultLanguageFallback_MDY;
    public static string DefaultLanguageFallback_DMY;
    public static string DefaultLanguageFallback_YMD;
    public static string NextGroupName;
    public static string AmGroupName;
    public static string PmGroupName;
    public static string ImplicitAmGroupName;
    public static string ImplicitPmGroupName;
    public static string PrefixGroupName;
    public static string SuffixGroupName;
    public static string DescGroupName;
    public static string SecondGroupName;
    public static string MinuteGroupName;
    public static string HourGroupName;
    public static string YearGroupName;
    public static string YearRelGroupName;
    public static string FullYearGroupName;
    public static string FourDigitYearGroupName;
    public static string FirstTwoYearGroupName;
    public static string LastTwoYearGroupName;
    public static string DayGroupName;
    public static string WeekdayGroupName;
    public static string WeekGroupName;
    public static string MonthGroupName;
    public static string RelMonthGroupName;
    public static string MonthFromGroupName;
    public static string MonthToGroupName;
    public static string SeasonGroupName;
    public static string DecadeGroupName;
    public static string CenturyGroupName;
    public static string RelCenturyGroupName;
    public static string AnotherGroupName;
    public static string HalfGroupName;
    public static string HalfTagGroupName;
    public static string FirstHalfGroupName;
    public static string SecondHalfGroupName;
    public static string QuarterGroupName;
    public static string ThreeQuarterGroupName;
    public static string CardinalGroupName;
    public static string TimeOfDayGroupName;
    public static string BusinessDayGroupName;
    public static string LeftAmPmGroupName;
    public static string RightAmPmGroupName;
    public static string MealTimeGroupName;
    public static string NegativeGroupName;
    public static string YearCJKGroupName;
    public static string UnitOfYearGroupName;
    public static string UnitGroupName;
    public static string NumGroupName;
    public static string FirstGroupName;
    public static string LastGroupName;
    public static string LatestGroupName;
    public static string AfterGroupName;
    public static string RelEarlyGroupName;
    public static string RelLateGroupName;
    public static string EarlyPrefixGroupName;
    public static string LessGroupName;
    public static string MoreGroupName;
    public static string FewGroupName;
    public static string LaterGroupName;
    public static string SpecificEndOfGroupName;
    public static string TomorrowGroupName;
    public static string LatePrefixGroupName;
    public static string MidPrefixGroupName;
    public static string RestOfGroupName;
    public static string DurationGroupName;
    public static string ToDateGroupName;
    public static string SpecialGroupName;
    public static string StartGroupName;
    public static string EndGroupName;
    public static string WithinGroupName;
    public static string NumberGroupName;
    public static string OrdinalGroupName;
    public static string OrderGroupName;
    public static string AgoGroupName;
    public static string YesterdayGroupName;
    public static string PluralUnit;
    public static string AmbiguousPattern;
    public static string HolidayWeekend;
    public static string IncludeGroupName;
    public static string DECADE_UNIT;
    public static string FORTNIGHT_UNIT;
    public static string QUARTER_UNIT;
    public static string WEEKEND_UNIT;
    public static string TimexYear;
    public static string TimexMonth;
    public static string TimexMonthFull;
    public static string TimexWeek;
    public static string TimexFortnight;
    public static string TimexDay;
    public static string TimexBusinessDay;
    public static string TimexWeekend;
    public static string TimexHour;
    public static string TimexMinute;
    public static string TimexSecond;
    public static string TimexNow;
    public static char TimexFuzzy;
    public static string TimexFuzzyYear;
    public static string TimexFuzzyTwoDigitYear;
    public static string TimexFuzzyMonth;
    public static string TimexFuzzyWeek;
    public static string TimexFuzzyDay;
    public static string DateTimexConnector;
    public static string TimeTimexConnector;
    public static string TimexSeparator;
    public static string GeneralPeriodPrefix;
    public static string TimeTimexPrefix;
    public static string EarlyMorning;
    public static string Morning;
    public static string MidDay;
    public static string Afternoon;
    public static string Evening;
    public static string Daytime;
    public static string Nighttime;
    public static string Night;
    public static string BusinessHour;
    public static string MealtimeBreakfast;
    public static string MealtimeBrunch;
    public static string MealtimeLunch;
    public static string MealtimeDinner;
    public static string InvalidDateString;
    public static char CompositeTimexDelimiter;
    public static int InvalidYear;
    public static int InvalidMonth;
    public static int InvalidDay;
    public static int InvalidHour;
    public static int InvalidMinute;
    public static int InvalidSecond;
    public static int INVALID_CONNECTOR_CODE;
    public static int MinYearNum;
    public static int MaxYearNum;
    public static int MaxTwoDigitYearFutureNum;
    public static int MinTwoDigitYearPastNum;
    public static DateTime InvalidDate;
    public static int BASE_YEAR_PAST_CENTURY;
    public static int BASE_YEAR_CURRENT_CENTURY;
    public static String[] DatePeriodTimexSplitter;
    public static Char[] DurationUnitChar;
    private static Constants();
}
public class Microsoft.Recognizers.Text.DateTime.DateContext : object {
    [CompilerGeneratedAttribute]
private int <Year>k__BackingField;
    public int Year { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Year();
    [CompilerGeneratedAttribute]
public void set_Year(int value);
    public static ValueTuple`2<DateTime, DateTime> GenerateDates(bool noYear, DateTime referenceDate, int year, int month, int day);
    public static DateTime SwiftDateObject(DateTime beginDate, DateTime endDate);
    public static bool IsFeb29th(DateTime date);
    public static bool IsFeb29th(int year, int month, int day);
    public static bool ValidateMatch(Match match, string text, IEnumerable`1<Regex> dateRegexList, Regex rangeConnectorSymbolRegex);
    public ValueTuple`2<DateTimeParseResult, DateTimeParseResult> SyncYear(DateTimeParseResult pr1, DateTimeParseResult pr2);
    public DateTimeResolutionResult SyncDateEntityResolutionInFeb29th(DateTimeResolutionResult resolutionResult, int futureYear, int pastYear);
    public DateTimeParseResult ProcessDateEntityParsingResult(DateTimeParseResult originalResult);
    public DateTimeResolutionResult ProcessDateEntityResolution(DateTimeResolutionResult resolutionResult);
    public DateTimeResolutionResult ProcessDatePeriodEntityResolution(DateTimeResolutionResult resolutionResult);
    public bool IsEmpty();
    private static string TrimStartRangeConnectorSymbols(string text, Regex rangeConnectorSymbolRegex);
    private static bool StartsWithBasicDate(string text, IEnumerable`1<Regex> dateRegexList);
    private DateTime SetDateWithContext(DateTime originalDate, int year);
    private Tuple`2<DateTime, DateTime> SetDateRangeWithContext(Tuple`2<DateTime, DateTime> originalDateRange);
}
[ExtensionAttribute]
public static class Microsoft.Recognizers.Text.DateTime.DateObjectExtension : object {
    private static short IndexOfLeapMonth;
    private static List`1<int> MonthValidDays;
    private static DateObjectExtension();
    [ExtensionAttribute]
public static DateTime Next(DateTime from, DayOfWeek dayOfWeek);
    [ExtensionAttribute]
public static DateTime Upcoming(DateTime from, DayOfWeek dayOfWeek);
    [ExtensionAttribute]
public static DateTime This(DateTime from, DayOfWeek dayOfWeek);
    [ExtensionAttribute]
public static DateTime Last(DateTime from, DayOfWeek dayOfWeek);
    [ExtensionAttribute]
public static DateTime Past(DateTime from, DayOfWeek dayOfWeek);
    public static DateTime GetFirstThursday(int year, int month);
    public static DateTime GetLastThursday(int year, int month);
    public static DateTime GetLastDay(int year, int month);
    [ExtensionAttribute]
public static DateTime SafeCreateFromValue(DateTime datetime, int year, int month, int day);
    [ExtensionAttribute]
public static DateTime SafeCreateFromValue(DateTime datetime, int year, int month, int day, int hour, int minute, int second);
    public static bool IsValidDate(int year, int month, int day);
    public static int GetMonthMaxDay(int year, int month);
    public static bool IsValidTime(int hour, int minute, int second);
    [ExtensionAttribute]
public static bool IsDefaultValue(DateTime datetime);
    private static int LeapMonthDays(int year);
}
public enum Microsoft.Recognizers.Text.DateTime.DatePeriodTimexType : Enum {
    public int value__;
    public static DatePeriodTimexType ByDay;
    public static DatePeriodTimexType ByWeek;
    public static DatePeriodTimexType ByFortnight;
    public static DatePeriodTimexType ByMonth;
    public static DatePeriodTimexType ByYear;
}
public static class Microsoft.Recognizers.Text.DateTime.DateTimeFormatUtil : object {
    private static Regex HourTimexRegex;
    private static Regex WeekDayTimexRegex;
    private static DateTimeFormatUtil();
    public static int ParseDynastyYear(string yearStr, Regex dynastyYearRegex, string dynastyStartYear, ImmutableDictionary`2<string, int> dynastyYearMap, IExtractor integerExtractor, IParser numberParser);
    public static string LuisDate(int year);
    public static string LuisDate(int year, int month);
    public static string LuisDate(int year, int month, int day);
    public static string LuisDate(DateTime date, DateTime alternativeDate);
    public static string ShortTime(int hour, int min, int second);
    public static string LuisTime(int hour, int min, int second);
    public static string LuisTime(DateTime time);
    public static string LuisDateTime(DateTime time);
    public static string LuisDateShortTime(DateTime time, string timex);
    public static string LuisTimeSpan(TimeSpan timeSpan);
    public static string FormatDate(DateTime date);
    public static string FormatTime(DateTime time);
    public static string FormatShortTime(DateTime time, bool keepMin, bool keepSec);
    public static string FormatDateTime(DateTime datetime);
    public static string AllStringToPm(string timeStr);
    public static string ToPm(string timeStr);
    public static string ToIsoWeekTimex(DateTime date);
    public static DateTimeResolutionResult ResolveEndOfDay(string timexPrefix, DateTime futureDate, DateTime pastDate);
}
public class Microsoft.Recognizers.Text.DateTime.DateTimeModel : object {
    private string culture;
    private string requestedCulture;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <Extractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <Parser>k__BackingField;
    public string ModelTypeName { get; }
    public string Culture { get; }
    public string RequestedCulture { get; }
    protected IDateTimeExtractor Extractor { get; private set; }
    protected IDateTimeParser Parser { get; private set; }
    public DateTimeModel(IDateTimeParser parser, IDateTimeExtractor extractor);
    public sealed virtual string get_ModelTypeName();
    public sealed virtual string get_Culture();
    public sealed virtual string get_RequestedCulture();
    [CompilerGeneratedAttribute]
protected IDateTimeExtractor get_Extractor();
    [CompilerGeneratedAttribute]
private void set_Extractor(IDateTimeExtractor value);
    [CompilerGeneratedAttribute]
protected IDateTimeParser get_Parser();
    [CompilerGeneratedAttribute]
private void set_Parser(IDateTimeParser value);
    public sealed virtual List`1<ModelResult> Parse(string query);
    public List`1<ModelResult> Parse(string query, DateTime refTime);
    public sealed virtual void SetCultureInfo(string culture, string requestedCulture);
    private static string GetParentText(DateTimeParseResult parsedDateTime);
    private ModelResult GetModelResult(DateTimeParseResult parsedDateTime);
    [CompilerGeneratedAttribute]
private ModelResult <Parse>b__18_0(DateTimeParseResult o);
}
[FlagsAttribute]
public enum Microsoft.Recognizers.Text.DateTime.DateTimeOptions : Enum {
    public int value__;
    public static DateTimeOptions None;
    public static DateTimeOptions SkipFromToMerge;
    public static DateTimeOptions SplitDateAndTime;
    public static DateTimeOptions CalendarMode;
    public static DateTimeOptions ExtendedTypes;
    public static DateTimeOptions NoProtoCache;
    public static DateTimeOptions TasksMode;
    public static DateTimeOptions FailFast;
    public static DateTimeOptions ExperimentalMode;
    public static DateTimeOptions EnablePreview;
}
public class Microsoft.Recognizers.Text.DateTime.DateTimeParseResult : ParseResult {
    [CompilerGeneratedAttribute]
private string <TimexStr>k__BackingField;
    public string TimexStr { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TimexStr();
    [CompilerGeneratedAttribute]
public void set_TimexStr(string value);
}
public class Microsoft.Recognizers.Text.DateTime.DateTimeRecognizer : Recognizer`1<DateTimeOptions> {
    public DateTimeRecognizer(string targetCulture, DateTimeOptions options, bool lazyInitialization, int timeoutInSeconds);
    public DateTimeRecognizer(string targetCulture, DateTimeOptions options, bool lazyInitialization);
    public DateTimeRecognizer(string targetCulture, int options, bool lazyInitialization);
    public DateTimeRecognizer(DateTimeOptions options, bool lazyInitialization);
    public DateTimeRecognizer(int options, bool lazyInitialization);
    public static List`1<ModelResult> RecognizeDateTime(string query, string culture, DateTimeOptions options, Nullable`1<DateTime> refTime, bool fallbackToDefaultCulture);
    public DateTimeModel GetDateTimeModel(string culture, bool fallbackToDefaultCulture);
    protected virtual void InitializeConfiguration();
    protected virtual List`1<Type> GetRelatedTypes();
}
public static class Microsoft.Recognizers.Text.DateTime.DateTimeResolutionKey : object {
    public static string Timex;
    public static string Mod;
    public static string IsLunar;
    public static string Value;
    public static string Start;
    public static string End;
    public static string List;
    public static string SourceEntity;
}
public class Microsoft.Recognizers.Text.DateTime.DateTimeResolutionResult : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Timex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLunar>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasRangeChangingMod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <FutureResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <PastResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FutureValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <PastValue>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <SubDateTimeEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeZoneResolutionResult <TimeZoneResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <List>k__BackingField;
    public bool Success { get; public set; }
    public string Timex { get; public set; }
    public bool IsLunar { get; public set; }
    public string Mod { get; public set; }
    public bool HasRangeChangingMod { get; public set; }
    public string Comment { get; public set; }
    public Dictionary`2<string, string> FutureResolution { get; public set; }
    public Dictionary`2<string, string> PastResolution { get; public set; }
    public object FutureValue { get; public set; }
    public object PastValue { get; public set; }
    public List`1<object> SubDateTimeEntities { get; public set; }
    public TimeZoneResolutionResult TimeZoneResolution { get; public set; }
    public List`1<object> List { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
    [CompilerGeneratedAttribute]
public string get_Timex();
    [CompilerGeneratedAttribute]
public void set_Timex(string value);
    [CompilerGeneratedAttribute]
public bool get_IsLunar();
    [CompilerGeneratedAttribute]
public void set_IsLunar(bool value);
    [CompilerGeneratedAttribute]
public string get_Mod();
    [CompilerGeneratedAttribute]
public void set_Mod(string value);
    [CompilerGeneratedAttribute]
public bool get_HasRangeChangingMod();
    [CompilerGeneratedAttribute]
public void set_HasRangeChangingMod(bool value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_FutureResolution();
    [CompilerGeneratedAttribute]
public void set_FutureResolution(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_PastResolution();
    [CompilerGeneratedAttribute]
public void set_PastResolution(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public object get_FutureValue();
    [CompilerGeneratedAttribute]
public void set_FutureValue(object value);
    [CompilerGeneratedAttribute]
public object get_PastValue();
    [CompilerGeneratedAttribute]
public void set_PastValue(object value);
    [CompilerGeneratedAttribute]
public List`1<object> get_SubDateTimeEntities();
    [CompilerGeneratedAttribute]
public void set_SubDateTimeEntities(List`1<object> value);
    [CompilerGeneratedAttribute]
public TimeZoneResolutionResult get_TimeZoneResolution();
    [CompilerGeneratedAttribute]
public void set_TimeZoneResolution(TimeZoneResolutionResult value);
    [CompilerGeneratedAttribute]
public List`1<object> get_List();
    [CompilerGeneratedAttribute]
public void set_List(List`1<object> value);
}
public class Microsoft.Recognizers.Text.DateTime.DummyTimeZoneParser : object {
    public sealed virtual ParseResult Parse(ExtractResult result);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refDate);
}
internal class Microsoft.Recognizers.Text.DateTime.DurationParsingUtil : object {
    public static bool IsTimeDurationUnit(string unitStr);
    public static bool IsMultipleDuration(string timex);
    public static bool IsDateDuration(string timex);
    public static DateTime ShiftDateTime(string timex, DateTime referenceDateTime, bool future);
    public static DateTime GetNthBusinessDay(DateTime startDate, int n, bool isFuture, List`1& dateList);
    public static DateTime GetNextBusinessDay(DateTime startDate, bool isFuture);
    public static bool IsLessThanDay(string unit);
    public static DateTimeResolutionResult ParseInexactNumberUnit(string text, IDurationParserConfiguration config);
    public static DateTimeResolutionResult ParseInexactNumberUnit(string text, ICJKDurationParserConfiguration config);
    private static DateTimeResolutionResult ParseInexactNumberUnit(string text, Regex inexactNumberUnitRegex, IImmutableDictionary`2<string, string> unitMap, IImmutableDictionary`2<string, long> unitValueMap, bool isCJK);
    private static DateTime GetShiftResult(List`1<ValueTuple`2<string, double>> timexUnitMap, DateTime referenceDate, bool future);
    private static List`1<ValueTuple`2<string, double>> ResolveDurationTimex(string timexStr);
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchCommonDateTimeParserConfiguration : BaseDateParserConfiguration {
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public DutchCommonDateTimeParserConfiguration(IDateTimeOptionsConfiguration config);
    public virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchDateExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MonthRegex;
    public static Regex MonthNumRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex SingleWeekDayRegex;
    public static Regex OnRegex;
    public static Regex RelaxedOnRegex;
    public static Regex ThisRegex;
    public static Regex LastDateRegex;
    public static Regex NextDateRegex;
    public static Regex DateUnitRegex;
    public static Regex SpecialDayRegex;
    public static Regex WeekDayOfMonthRegex;
    public static Regex RelativeWeekDayRegex;
    public static Regex SpecialDate;
    public static Regex SpecialDayWithNumRegex;
    public static Regex ForTheRegex;
    public static Regex WeekDayAndDayOfMothRegex;
    public static Regex WeekDayAndDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex StrictRelativeRegex;
    public static Regex PrefixArticleRegex;
    public static Regex OfMonth;
    public static Regex MonthEnd;
    public static Regex WeekDayEnd;
    public static Regex WeekDayStart;
    public static Regex YearSuffix;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex InConnectorRegex;
    public static Regex SinceYearSuffixRegex;
    public static Regex RangeUnitRegex;
    public static Regex RangeConnectorSymbolRegex;
    public static ImmutableDictionary`2<string, int> DayOfWeek;
    public static ImmutableDictionary`2<string, int> MonthOfYear;
    public static Regex BeforeAfterRegex;
    private static RegexOptions RegexFlags;
    private static Regex DayRegex;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <ImplicitDateList>k__BackingField;
    public IEnumerable`1<Regex> DateRegexList { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IEnumerable`1<Regex> ImplicitDateList { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DayOfWeek { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthOfYear { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.OfMonth { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayStart { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.ForTheRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayOfMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RelativeMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.StrictRelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.PrefixArticleRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.SinceYearSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeConnectorSymbolRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.BeforeAfterRegex { get; }
    public DutchDateExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static DutchDateExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_ImplicitDateList();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DayOfWeek();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthOfYear();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_OfMonth();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayStart();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_ForTheRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayOfMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RelativeMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_StrictRelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_PrefixArticleRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_SinceYearSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeConnectorSymbolRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_BeforeAfterRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchDateParserConfiguration : BaseDateTimeOptionsConfiguration {
    private IImmutableList`1<string> lastCardinalTerms;
    [CompilerGeneratedAttribute]
private string <DateTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OnRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayWithNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ThisRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ForTheRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayOfMothRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <StrictRelativeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UpcomingPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeDurationToDatePatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <SameDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public string DateTokenPrefix { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public IEnumerable`1<Regex> DateRegexes { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex OnRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex SpecialDayWithNumRegex { get; }
    public Regex NextRegex { get; }
    public Regex ThisRegex { get; }
    public Regex LastRegex { get; }
    public Regex UnitRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex MonthRegex { get; }
    public Regex WeekDayOfMonthRegex { get; }
    public Regex ForTheRegex { get; }
    public Regex WeekDayAndDayOfMothRegex { get; }
    public Regex WeekDayAndDayRegex { get; }
    public Regex RelativeMonthRegex { get; }
    public Regex StrictRelativeRegex { get; }
    public Regex YearSuffix { get; }
    public Regex RelativeWeekDayRegex { get; }
    public Regex RelativeDayRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex UpcomingPrefixRegex { get; }
    public Regex PastPrefixRegex { get; }
    public Regex BeforeAfterRegex { get; }
    public Regex TasksModeDurationToDatePatterns { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableList`1<string> SameDayTerms { get; }
    public IImmutableList`1<string> PlusOneDayTerms { get; }
    public IImmutableList`1<string> MinusOneDayTerms { get; }
    public IImmutableList`1<string> PlusTwoDayTerms { get; }
    public IImmutableList`1<string> MinusTwoDayTerms { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.CheckBothBeforeAfter { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public DutchDateParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DateTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OnRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayWithNumRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ThisRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ForTheRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayOfMothRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_StrictRelativeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearSuffix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UpcomingPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeDurationToDatePatterns();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_SameDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusTwoDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusTwoDayTerms();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual int GetSwiftMonthOrYear(string text);
    public sealed virtual bool IsCardinalLast(string text);
    public sealed virtual string Normalize(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchDatePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex RangeConnectorRegex;
    public static Regex DayRegex;
    public static Regex MonthNumRegex;
    public static Regex IllegalYearRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex WrittenMonthRegex;
    public static Regex MonthSuffixRegex;
    public static Regex DateUnitRegex;
    public static Regex TimeUnitRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex FutureSuffixRegex;
    public static Regex SimpleCasesRegex;
    public static Regex MonthFrontSimpleCasesRegex;
    public static Regex MonthFrontBetweenRegex;
    public static Regex BetweenRegex;
    public static Regex MonthWithYear;
    public static Regex OneWordPeriodRegex;
    public static Regex MonthNumWithYear;
    public static Regex WeekOfMonthRegex;
    public static Regex WeekOfYearRegex;
    public static Regex FollowedDateUnit;
    public static Regex NumberCombinedWithDateUnit;
    public static Regex QuarterRegex;
    public static Regex QuarterRegexYearFront;
    public static Regex AllHalfYearRegex;
    public static Regex SeasonRegex;
    public static Regex WhichWeekRegex;
    public static Regex WeekOfRegex;
    public static Regex MonthOfRegex;
    public static Regex RangeUnitRegex;
    public static Regex InConnectorRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex RestOfDateRegex;
    public static Regex LaterEarlyPeriodRegex;
    public static Regex WeekWithWeekDayRangeRegex;
    public static Regex YearPlusNumberRegex;
    public static Regex DecadeWithCenturyRegex;
    public static Regex YearPeriodRegex;
    public static Regex ComplexDatePeriodRegex;
    public static Regex RelativeDecadeRegex;
    public static Regex ReferenceDatePeriodRegex;
    public static Regex AgoRegex;
    public static Regex LaterRegex;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex CenturySuffixRegex;
    public static Regex NowRegex;
    public static Regex FirstLastRegex;
    public static Regex OfYearRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromTokenRegex;
    private static Regex BetweenTokenRegex;
    private static Regex[] SimpleCasesRegexes;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    public IDateExtractor DatePointExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.SimpleCasesRegexes { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.IllegalYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FollowedDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NumberCombinedWithDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WeekOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearPeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ComplexDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RelativeDecadeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ReferenceDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.AgoRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LaterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CenturySuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthNumRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FirstLastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.OfYearRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DurationDateRestrictions { get; }
    public DutchDatePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static DutchDatePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_SimpleCasesRegexes();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_IllegalYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FollowedDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NumberCombinedWithDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WeekOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearPeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ComplexDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RelativeDecadeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ReferenceDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_AgoRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LaterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CenturySuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthNumRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FirstLastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_OfYearRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DurationDateRestrictions();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchDatePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex NextPrefixRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex ThisPrefixRegex;
    public static Regex AfterNextSuffixRegex;
    public static Regex RelativeRegex;
    public static Regex UnspecificEndOfRangeRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private static IList`1<string> <MonthTermsPadded>k__BackingField;
    [CompilerGeneratedAttribute]
private static IList`1<string> <WeekendTermsPadded>k__BackingField;
    [CompilerGeneratedAttribute]
private static IList`1<string> <WeekTermsPadded>k__BackingField;
    [CompilerGeneratedAttribute]
private static IList`1<string> <YearTermsPadded>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontBetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontSimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OneWordPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthNumWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegexYearFront>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllHalfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SeasonRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WhichWeekRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterEarlyPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekWithWeekDayRangeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPlusNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DecadeWithCenturyRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ComplexDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDecadeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ReferenceDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AgoRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LessThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MoreThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <CenturySuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TodayNowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FirstLastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SeasonMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SpecialYearPrefixesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <WrittenDecades>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <SpecialDecadeCases>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <InStringList>k__BackingField;
    public static IList`1<string> MonthTermsPadded { get; private set; }
    public static IList`1<string> WeekendTermsPadded { get; private set; }
    public static IList`1<string> WeekTermsPadded { get; private set; }
    public static IList`1<string> YearTermsPadded { get; private set; }
    public int MinYearNum { get; }
    public int MaxYearNum { get; }
    public string TokenBeforeDate { get; }
    public IDateExtractor DateExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser DurationParser { get; }
    public Regex MonthFrontBetweenRegex { get; }
    public Regex BetweenRegex { get; }
    public Regex MonthFrontSimpleCasesRegex { get; }
    public Regex SimpleCasesRegex { get; }
    public Regex OneWordPeriodRegex { get; }
    public Regex MonthWithYear { get; }
    public Regex MonthNumWithYear { get; }
    public Regex YearRegex { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex WeekOfMonthRegex { get; }
    public Regex WeekOfYearRegex { get; }
    public Regex QuarterRegex { get; }
    public Regex QuarterRegexYearFront { get; }
    public Regex AllHalfYearRegex { get; }
    public Regex SeasonRegex { get; }
    public Regex WhichWeekRegex { get; }
    public Regex WeekOfRegex { get; }
    public Regex MonthOfRegex { get; }
    public Regex InConnectorRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex RestOfDateRegex { get; }
    public Regex LaterEarlyPeriodRegex { get; }
    public Regex WeekWithWeekDayRangeRegex { get; }
    public Regex YearPlusNumberRegex { get; }
    public Regex DecadeWithCenturyRegex { get; }
    public Regex YearPeriodRegex { get; }
    public Regex ComplexDatePeriodRegex { get; }
    public Regex RelativeDecadeRegex { get; }
    public Regex ReferenceDatePeriodRegex { get; }
    public Regex AgoRegex { get; }
    public Regex LaterRegex { get; }
    public Regex LessThanRegex { get; }
    public Regex MoreThanRegex { get; }
    public Regex CenturySuffixRegex { get; }
    public Regex NowRegex { get; }
    public Regex TodayNowRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex FirstLastRegex { get; }
    public Regex OfYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.RelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.NextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.UnspecificEndOfRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.AmbiguousPointRangeRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; }
    public IImmutableDictionary`2<string, string> SpecialYearPrefixesMap { get; }
    public IImmutableDictionary`2<string, int> WrittenDecades { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IImmutableDictionary`2<string, int> SpecialDecadeCases { get; }
    public IImmutableList`1<string> InStringList { get; }
    public DutchDatePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static DutchDatePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public static IList`1<string> get_MonthTermsPadded();
    [CompilerGeneratedAttribute]
private static void set_MonthTermsPadded(IList`1<string> value);
    [CompilerGeneratedAttribute]
public static IList`1<string> get_WeekendTermsPadded();
    [CompilerGeneratedAttribute]
private static void set_WeekendTermsPadded(IList`1<string> value);
    [CompilerGeneratedAttribute]
public static IList`1<string> get_WeekTermsPadded();
    [CompilerGeneratedAttribute]
private static void set_WeekTermsPadded(IList`1<string> value);
    [CompilerGeneratedAttribute]
public static IList`1<string> get_YearTermsPadded();
    [CompilerGeneratedAttribute]
private static void set_YearTermsPadded(IList`1<string> value);
    [CompilerGeneratedAttribute]
public int get_MinYearNum();
    [CompilerGeneratedAttribute]
public int get_MaxYearNum();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontBetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontSimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OneWordPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthNumWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegexYearFront();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllHalfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SeasonRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WhichWeekRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterEarlyPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekWithWeekDayRangeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPlusNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DecadeWithCenturyRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ComplexDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDecadeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ReferenceDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AgoRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LessThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MoreThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_CenturySuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TodayNowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FirstLastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OfYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.get_RelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_NextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_UnspecificEndOfRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_AmbiguousPointRangeRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SpecialYearPrefixesMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_WrittenDecades();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_SpecialDecadeCases();
    [CompilerGeneratedAttribute]
public IImmutableList`1<string> get_InStringList();
    public sealed virtual int GetSwiftDayOrMonth(string text);
    public sealed virtual int GetSwiftYear(string text);
    public sealed virtual bool IsFuture(string text);
    public sealed virtual bool IsLastCardinal(string text);
    public sealed virtual bool IsMonthOnly(string text);
    public sealed virtual bool IsMonthToDate(string text);
    public sealed virtual bool IsWeekend(string text);
    public sealed virtual bool IsWeekOnly(string text);
    public sealed virtual bool IsYearOnly(string text);
    public sealed virtual bool IsFortnight(string text);
    public sealed virtual bool IsYearToDate(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchDateTimeAltExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex ThisPrefixRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex AmRegex;
    public static Regex PmRegex;
    public static Regex RangePrefixRegex;
    public static Regex[] RelativePrefixList;
    public static Regex[] AmPmRegexList;
    private static RegexOptions RegexFlags;
    private static Regex OrRegex;
    private static Regex DayRegex;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RelativePrefixList { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.AmPmRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.OrRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.DayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RangePrefixRegex { get; }
    public DutchDateTimeAltExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static DutchDateTimeAltExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RelativePrefixList();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_AmPmRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_OrRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_DayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RangePrefixRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchDateTimeAltParserConfiguration : object {
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public DutchDateTimeAltParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchDateTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrepositionRegex;
    public static Regex NowRegex;
    public static Regex SuffixRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeOfTodayAfterRegex;
    public static Regex TimeOfTodayBeforeRegex;
    public static Regex SimpleTimeOfTodayAfterRegex;
    public static Regex SimpleTimeOfTodayBeforeRegex;
    public static Regex SpecificEndOfRegex;
    public static Regex UnspecificEndOfRegex;
    public static Regex UnitRegex;
    public static Regex ConnectorRegex;
    public static Regex NumberAsTimeRegex;
    public static Regex DateNumberConnectorRegex;
    public static Regex YearRegex;
    public static Regex YearSuffix;
    public static Regex SuffixAfterRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    public IExtractor IntegerExtractor { get; }
    public IDateExtractor DatePointExtractor { get; }
    public IDateTimeExtractor TimePointExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SpecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnspecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NumberAsTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.DateNumberConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public DutchDateTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static DutchDateTimeExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SpecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnspecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NumberAsTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_DateNumberConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    public sealed virtual bool IsConnector(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchDateTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex AmTimeRegex;
    public static Regex PmTimeRegex;
    public static Regex NightTimeRegex;
    public static Regex MorningTimeRegex;
    private static RegexOptions RegexFlags;
    private static Regex NowTimeRegex;
    private static Regex RecentlyTimeRegex;
    private static Regex AsapTimeRegex;
    private static Regex NextPrefixRegex;
    private static Regex PreviousPrefixRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayBeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnspecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DateNumberConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrepositionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex NowRegex { get; }
    public Regex AMTimeRegex { get; }
    public Regex PMTimeRegex { get; }
    public Regex SimpleTimeOfTodayAfterRegex { get; }
    public Regex SimpleTimeOfTodayBeforeRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex SpecificEndOfRegex { get; }
    public Regex UnspecificEndOfRegex { get; }
    public Regex UnitRegex { get; }
    public Regex DateNumberConnectorRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex ConnectorRegex { get; }
    public Regex YearRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public DutchDateTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static DutchDateTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    public sealed virtual Regex get_AMTimeRegex();
    public sealed virtual Regex get_PMTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayBeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnspecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DateNumberConnectorRegex();
    [CompilerGeneratedAttribute]
public Regex get_PrepositionRegex();
    [CompilerGeneratedAttribute]
public Regex get_ConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual int GetHour(string text, int hour);
    public sealed virtual bool GetMatchedNowTimex(string text, String& timex);
    public sealed virtual int GetSwiftDay(string text);
    public sealed virtual bool ContainsAmbiguousToken(string text, string matchedText);
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchDateTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex AmDescRegex;
    public static Regex PmDescRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex DateUnitRegex;
    public static Regex PrefixDayRegex;
    public static Regex SuffixRegex;
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex WeekDaysRegex;
    public static Regex TimeNumberCombinedWithUnit;
    public static Regex HyphenDateRegex;
    public static Regex PeriodTimeOfDayWithDateRegex;
    public static Regex RelativeTimeUnitRegex;
    public static Regex RestOfDateTimeRegex;
    private static RegexOptions RegexFlags;
    private static Regex GeneralEndingRegex;
    private static Regex MiddlePauseRegex;
    private static Regex PeriodTimeOfDayRegex;
    private static Regex PeriodSpecificTimeOfDayRegex;
    private static Regex TimeUnitRegex;
    private static Regex TimeFollowedUnit;
    private static Regex FromTokenRegex;
    private static Regex BetweenTokenRegex;
    private static Regex RangeConnectorRegex;
    private static Regex[] SimpleCases;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    public string TokenBeforeDate { get; }
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex TillRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex FollowedUnit { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PrefixDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RelativeTimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RestOfDateTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.MiddlePauseRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PeriodTimeOfDayWithDateRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor SingleDateExtractor { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor SingleDateTimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public DutchDateTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static DutchDateTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual Regex get_PrepositionRegex();
    public sealed virtual Regex get_TillRegex();
    public sealed virtual Regex get_TimeOfDayRegex();
    public sealed virtual Regex get_SpecificTimeOfDayRegex();
    public sealed virtual Regex get_PreviousPrefixRegex();
    public sealed virtual Regex get_NextPrefixRegex();
    public sealed virtual Regex get_FutureSuffixRegex();
    public sealed virtual Regex get_WeekDayRegex();
    public sealed virtual Regex get_FollowedUnit();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PrefixDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RelativeTimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RestOfDateTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_MiddlePauseRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PeriodTimeOfDayWithDateRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TasksmodeMealTimeofDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchDateTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MorningStartEndRegex;
    public static Regex AfternoonStartEndRegex;
    public static Regex EveningStartEndRegex;
    public static Regex NightStartEndRegex;
    public static Regex PeriodTimeOfDayWithDateRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HyphenDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeTimeUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrefixDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeZoneParser { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex HyphenDateRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnitRegex { get; }
    public Regex UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.PeriodTimeOfDayWithDateRegex { get; }
    public Regex RelativeTimeUnitRegex { get; }
    public Regex RestOfDateTimeRegex { get; }
    public Regex AmDescRegex { get; }
    public Regex PmDescRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex PrefixDayRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public DutchDateTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static DutchDateTimePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_TasksmodeMealTimeofDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HyphenDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_PeriodTimeOfDayWithDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeTimeUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PrefixDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual bool GetMatchedTimeRange(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMin);
    public sealed virtual int GetSwiftPrefix(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchDurationExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DurationUnitRegex;
    public static Regex SuffixAndRegex;
    public static Regex DurationFollowedUnit;
    public static Regex NumberCombinedWithDurationUnit;
    public static Regex AnUnitRegex;
    public static Regex DuringRegex;
    public static Regex AllRegex;
    public static Regex HalfRegex;
    public static Regex ConjunctionRegex;
    public static Regex InexactNumberRegex;
    public static Regex InexactNumberUnitRegex;
    public static Regex RelativeDurationUnitRegex;
    public static Regex DurationConnectorRegex;
    public static Regex ModPrefixRegex;
    public static Regex ModSuffixRegex;
    public static Regex SpecialNumberUnitRegex;
    public static Regex MoreThanRegex;
    public static Regex LessThanRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.FollowedUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DuringRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AllRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.HalfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SuffixAndRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ConjunctionRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.RelativeDurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SpecialNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModSuffixRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public DutchDurationExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static DutchDurationExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_FollowedUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DuringRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AllRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_HalfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SuffixAndRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ConjunctionRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_RelativeDurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SpecialNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModSuffixRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchDurationParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrefixArticleRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AnUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DuringRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HalfDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FollowedUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConjunctionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, double> <DoubleNumbers>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.PrefixArticleRegex { get; }
    public Regex DuringRegex { get; }
    public Regex AllDateUnitRegex { get; }
    public Regex HalfDateUnitRegex { get; }
    public Regex SuffixAndRegex { get; }
    public Regex FollowedUnit { get; }
    public Regex ConjunctionRegex { get; }
    public Regex InexactNumberRegex { get; }
    public Regex InexactNumberUnitRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex SpecialNumberUnitRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public IImmutableDictionary`2<string, double> DoubleNumbers { get; }
    public DutchDurationParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static DutchDurationParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_PrefixArticleRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DuringRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HalfDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FollowedUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ConjunctionRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialNumberUnitRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, double> get_DoubleNumbers();
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchHolidayExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex YearRegex;
    public static Regex H;
    public static Regex[] HolidayRegexList;
    private static RegexOptions RegexFlags;
    public IEnumerable`1<Regex> HolidayRegexes { get; }
    public DutchHolidayExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static DutchHolidayExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_HolidayRegexes();
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchHolidayParserConfiguration : BaseHolidayParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private Regex <ThisPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    public Regex ThisPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public DutchHolidayParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public Regex get_ThisPrefixRegex();
    [CompilerGeneratedAttribute]
public Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public Regex get_PreviousPrefixRegex();
    public virtual int GetSwiftYear(string text);
    public virtual string SanitizeHolidayToken(string holiday);
    protected virtual IDictionary`2<string, Func`2<int, DateTime>> InitHolidayFuncs();
    private static DateTime NewYear(int year);
    private static DateTime NewYearEve(int year);
    private static DateTime ChristmasDay(int year);
    private static DateTime SecondChristmasDay(int year);
    private static DateTime StMartinsDay(int year);
    private static DateTime ChristmasEve(int year);
    private static DateTime ValentinesDay(int year);
    private static DateTime WhiteLoverDay(int year);
    private static DateTime FoolDay(int year);
    private static DateTime GirlsDay(int year);
    private static DateTime DutchTreePlantDay(int year);
    private static DateTime FemaleDay(int year);
    private static DateTime ChildrenDay(int year);
    private static DateTime YouthDay(int year);
    private static DateTime TeacherDay(int year);
    private static DateTime SinglesDay(int year);
    private static DateTime MaoBirthday(int year);
    private static DateTime InaugurationDay(int year);
    private static DateTime GroundhogDay(int year);
    private static DateTime StPatrickDay(int year);
    private static DateTime StGeorgeDay(int year);
    private static DateTime Mayday(int year);
    private static DateTime CincoDeMayoday(int year);
    private static DateTime BaptisteDay(int year);
    private static DateTime UsaIndependenceDay(int year);
    private static DateTime BastilleDay(int year);
    private static DateTime HalloweenDay(int year);
    private static DateTime AllHallowDay(int year);
    private static DateTime AllSoulsday(int year);
    private static DateTime GuyFawkesDay(int year);
    private static DateTime GoodFriday(int year);
    private static DateTime EasterDay(int year);
    private static DateTime EasterMonday(int year);
    private static DateTime KingsDay(int year);
    private static DateTime QueensDay(int year);
    private static DateTime Prinsjesdag(int year);
    private static DateTime Dodenherdenking(int year);
    private static DateTime Bevrijdingsdag(int year);
    private static DateTime Sinterklaas(int year);
    private static DateTime DutchTeachersDay(int year);
    private static DateTime DutchVeteransday(int year);
    private static DateTime Dagvandearbeid(int year);
    private static DateTime AscensionDay(int year);
    private static DateTime WhiteSunday(int year);
    private static DateTime Driekoningen(int year);
    private static DateTime KetiKoti(int year);
    private static DateTime EarthDay(int year);
    private static DateTime Juneteenth(int year);
    private static DateTime Ramadan(int year);
    private static DateTime Sacrifice(int year);
    private static DateTime EidAlFitr(int year);
    private static DateTime IslamicNewYear(int year);
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchMergedExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex SinceRegex;
    public static Regex AroundRegex;
    public static Regex EqualRegex;
    public static Regex FromToRegex;
    public static Regex SingleAmbiguousMonthRegex;
    public static Regex PrepositionSuffixRegex;
    public static Regex AmbiguousRangeModifierPrefix;
    public static Regex NumberEndingPattern;
    public static Regex SuffixAfterRegex;
    public static Regex UnspecificDatePeriodRegex;
    public static Regex PotentialAmbiguousRangeRegex;
    public static Regex YearRegex;
    public static Regex[] TermFilterRegexes;
    public static StringMatcher SuperfluousWordMatcher;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SetExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeZoneExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeListExtractor <DateTimeAltExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FailFastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeMentionFilters>k__BackingField;
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor SetExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeZoneExtractor TimeZoneExtractor { get; }
    public IDateTimeListExtractor DateTimeAltExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SinceRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AroundRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.EqualRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.FromToRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SingleAmbiguousMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PrepositionSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AmbiguousRangeModifierPrefix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PotentialAmbiguousRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.NumberEndingPattern { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuffixAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificTimePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.YearRegex { get; }
    public Regex FailFastRegex { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.TermFilterRegexes { get; }
    private StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.CheckBothBeforeAfter { get; }
    public Regex TasksModeMentionFilters { get; }
    public DutchMergedExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static DutchMergedExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SetExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeZoneExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeListExtractor get_DateTimeAltExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SinceRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AroundRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_EqualRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_FromToRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SingleAmbiguousMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PrepositionSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AmbiguousRangeModifierPrefix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PotentialAmbiguousRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_NumberEndingPattern();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuffixAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificTimePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FailFastRegex();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_TermFilterRegexes();
    private sealed virtual override StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeMentionFilters();
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchMergedParserConfiguration : DutchCommonDateTimeParserConfiguration {
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SinceRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AroundRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EqualRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <SetParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <SuperfluousWordMatcher>k__BackingField;
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex SinceRegex { get; }
    public Regex AroundRegex { get; }
    public Regex EqualRegex { get; }
    public Regex SuffixAfter { get; }
    public Regex YearRegex { get; }
    public IDateTimeParser SetParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public StringMatcher SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.CheckBothBeforeAfter { get; }
    public DutchMergedParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SinceRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AroundRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EqualRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_SetParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.get_CheckBothBeforeAfter();
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchSetExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex SetUnitRegex;
    public static Regex PeriodicRegex;
    public static Regex EachUnitRegex;
    public static Regex EachPrefixRegex;
    public static Regex SetLastRegex;
    public static Regex EachDayRegex;
    public static Regex SetWeekDayRegex;
    public static Regex SetEachRegex;
    public static Regex BeforeEachDayRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.LastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.PeriodicRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.BeforeEachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetWeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetEachRegex { get; }
    public DutchSetExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static DutchSetExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_LastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_PeriodicRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_BeforeEachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetWeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetEachRegex();
    public sealed virtual Tuple`2<string, int> WeekDayGroupMatchTuple(Match match);
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchSetParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex DayTypeRegex;
    private static Regex WeekTypeRegex;
    private static Regex BiWeekTypeRegex;
    private static Regex MonthTypeRegex;
    private static Regex QuarterTypeRegex;
    private static Regex YearTypeRegex;
    private static Regex SemiYearTypeRegex;
    private static Regex WeekendTypeRegex;
    private static List`1<string> ThisTerms;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodicRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetEachRegex>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex EachPrefixRegex { get; }
    public Regex PeriodicRegex { get; }
    public Regex EachUnitRegex { get; }
    public Regex EachDayRegex { get; }
    public Regex SetWeekDayRegex { get; }
    public Regex SetEachRegex { get; }
    public DutchSetParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static DutchSetParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodicRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetEachRegex();
    public sealed virtual bool GetMatchedDailyTimex(string text, String& timex);
    public sealed virtual bool GetMatchedUnitTimex(string text, String& timex);
    public sealed virtual string WeekDayGroupMatchString(Match match);
    public sealed virtual string ReplaceValueInTextWithFutTerm(string text, string value);
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DescRegex;
    public static Regex HourNumRegex;
    public static Regex MinuteNumRegex;
    public static Regex OclockRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex LessThanOneHour;
    public static Regex WrittenTimeRegex;
    public static Regex TimePrefix;
    public static Regex TimeSuffix;
    public static Regex BasicTime;
    public static Regex MidnightRegex;
    public static Regex MidmorningRegex;
    public static Regex MidafternoonRegex;
    public static Regex MiddayRegex;
    public static Regex MidTimeRegex;
    public static Regex AtRegex;
    public static Regex IshRegex;
    public static Regex TimeUnitRegex;
    public static Regex ConnectNumRegex;
    public static Regex TimeBeforeAfterRegex;
    public static Regex[] TimeRegexList;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.AtRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.IshRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeBeforeAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public string TimeTokenPrefix { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public DutchTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static DutchTimeExtractorConfiguration();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_AtRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_IshRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeBeforeAfterRegex();
    [CompilerGeneratedAttribute]
public IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    public sealed virtual string get_TimeTokenPrefix();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex TimeSuffixFull;
    private static Regex LunchRegex;
    private static Regex NightRegex;
    private static Regex HalfTokenRegex;
    private static Regex QuarterTokenRegex;
    private static Regex ThreeQuarterTokenRegex;
    private static Regex ToTokenRegex;
    private static Regex ToHalfTokenRegex;
    private static Regex ForHalfTokenRegex;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <TimeRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AtRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MealTimeRegex>k__BackingField;
    public IEnumerable`1<Regex> TimeRegexes { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public string TimeTokenPrefix { get; }
    public Regex AtRegex { get; }
    public Regex MealTimeRegex { get; }
    public DutchTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static DutchTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_TimeRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TimeTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AtRegex();
    [CompilerGeneratedAttribute]
public Regex get_MealTimeRegex();
    public sealed virtual void AdjustByPrefix(string prefix, Int32& hour, Int32& min, Boolean& hasMin);
    public sealed virtual void AdjustBySuffix(string suffix, Int32& hour, Int32& min, Boolean& hasMin, Boolean& hasAm, Boolean& hasPm);
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex HourRegex;
    public static Regex PeriodHourNumRegex;
    public static Regex PeriodDescRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex PureNumFromTo;
    public static Regex TimeDateFromTo;
    public static Regex PureNumBetweenAnd;
    public static Regex SpecificTimeFromTo;
    public static Regex SpecificTimeBetweenAnd;
    public static Regex PrepositionRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeUnitRegex;
    public static Regex TimeFollowedUnit;
    public static Regex TimeNumberCombinedWithUnit;
    public static Regex GeneralEndingRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromRegex;
    private static Regex BetweenRegex;
    private static Regex RangeConnectorRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    public string TokenBeforeDate { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public IEnumerable`1<Regex> PureNumberRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    public DutchTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static DutchTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual IEnumerable`1<Regex> get_PureNumberRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool IsConnectorToken(string text);
    public sealed virtual List`1<ExtractResult> ApplyPotentialPeriodAmbiguityHotfix(string text, List`1<ExtractResult> timePeriodErs);
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <GeneralEndingRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TillRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex SpecificTimeFromToRegex { get; }
    public Regex SpecificTimeBetweenAndRegex { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex GeneralEndingRegex { get; }
    public Regex TillRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public DutchTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_GeneralEndingRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TillRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual bool GetMatchedTimeRange(string text, String& timex, Int32& beginHour, Int32& endHour, Int32& endMin);
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchTimeZoneExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DirectUtcRegex;
    public static List`1<string> AbbreviationsList;
    public static List`1<string> FullNameList;
    public static StringMatcher TimeZoneMatcher;
    public static Regex LocationTimeSuffixRegex;
    public static StringMatcher LocationMatcher;
    public static List`1<string> AmbiguousTimezoneList;
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.DirectUtcRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.LocationTimeSuffixRegex { get; }
    private StringMatcher Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.LocationMatcher { get; }
    private StringMatcher Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.TimeZoneMatcher { get; }
    private List`1<string> Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.AmbiguousTimezoneList { get; }
    public DutchTimeZoneExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static DutchTimeZoneExtractorConfiguration();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.get_DirectUtcRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.get_LocationTimeSuffixRegex();
    private sealed virtual override StringMatcher Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.get_LocationMatcher();
    private sealed virtual override StringMatcher Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.get_TimeZoneMatcher();
    private sealed virtual override List`1<string> Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.get_AmbiguousTimezoneList();
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.DutchTimeZoneParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static string TimeZoneEndRegex;
    public static Dictionary`2<string, int> FullToMinMapping;
    public static Regex DirectUtcRegex;
    public static Dictionary`2<string, int> AbbrToMinMapping;
    private string Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.TimeZoneEndRegex { get; }
    private Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.FullToMinMapping { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.DirectUtcRegex { get; }
    private Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.AbbrToMinMapping { get; }
    public DutchTimeZoneParserConfiguration(IDateTimeOptionsConfiguration config);
    private static DutchTimeZoneParserConfiguration();
    private sealed virtual override string Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_TimeZoneEndRegex();
    private sealed virtual override Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_FullToMinMapping();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_DirectUtcRegex();
    private sealed virtual override Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_AbbrToMinMapping();
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.TimeParser : BaseTimeParser {
    public TimeParser(ITimeParserConfiguration configuration);
    protected virtual DateTimeResolutionResult InternalParse(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseIsh(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.Dutch.Utilities.DutchDatetimeUtilityConfiguration : BaseDatetimeUtilityConfiguration {
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishCommonDateTimeParserConfiguration : BaseDateParserConfiguration {
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public EnglishCommonDateTimeParserConfiguration(IDateTimeOptionsConfiguration config);
    public virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishDateExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MonthRegex;
    public static Regex MonthNumRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex SingleWeekDayRegex;
    public static Regex OnRegex;
    public static Regex RelaxedOnRegex;
    public static Regex ThisRegex;
    public static Regex LastDateRegex;
    public static Regex NextDateRegex;
    public static Regex DateUnitRegex;
    public static Regex SpecialDayRegex;
    public static Regex WeekDayOfMonthRegex;
    public static Regex RelativeWeekDayRegex;
    public static Regex SpecialDate;
    public static Regex SpecialDayWithNumRegex;
    public static Regex ForTheRegex;
    public static Regex WeekDayAndDayOfMothRegex;
    public static Regex WeekDayAndDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex StrictRelativeRegex;
    public static Regex PrefixArticleRegex;
    public static Regex OfMonth;
    public static Regex MonthEnd;
    public static Regex WeekDayEnd;
    public static Regex WeekDayStart;
    public static Regex YearSuffix;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex InConnectorRegex;
    public static Regex SinceYearSuffixRegex;
    public static Regex RangeUnitRegex;
    public static Regex RangeConnectorSymbolRegex;
    public static Regex BeforeAfterRegex;
    public static ImmutableDictionary`2<string, int> DayOfWeek;
    public static ImmutableDictionary`2<string, int> MonthOfYear;
    private static RegexOptions RegexFlags;
    private static Regex DayRegex;
    private static Regex TasksModeDurationToDatePatterns;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <ImplicitDateList>k__BackingField;
    public IEnumerable`1<Regex> DateRegexList { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IEnumerable`1<Regex> ImplicitDateList { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DayOfWeek { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthOfYear { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.OfMonth { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayStart { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.ForTheRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayOfMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RelativeMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.StrictRelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.PrefixArticleRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.SinceYearSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeConnectorSymbolRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.BeforeAfterRegex { get; }
    public EnglishDateExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static EnglishDateExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_ImplicitDateList();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DayOfWeek();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthOfYear();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_OfMonth();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayStart();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_ForTheRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayOfMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RelativeMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_StrictRelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_PrefixArticleRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_SinceYearSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeConnectorSymbolRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_BeforeAfterRegex();
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishDateParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <DateTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OnRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayWithNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ThisRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ForTheRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayOfMothRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <StrictRelativeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UpcomingPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeDurationToDatePatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <SameDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public string DateTokenPrefix { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public IEnumerable`1<Regex> DateRegexes { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex OnRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex SpecialDayWithNumRegex { get; }
    public Regex NextRegex { get; }
    public Regex ThisRegex { get; }
    public Regex LastRegex { get; }
    public Regex UnitRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex MonthRegex { get; }
    public Regex WeekDayOfMonthRegex { get; }
    public Regex ForTheRegex { get; }
    public Regex WeekDayAndDayOfMothRegex { get; }
    public Regex WeekDayAndDayRegex { get; }
    public Regex RelativeMonthRegex { get; }
    public Regex StrictRelativeRegex { get; }
    public Regex YearSuffix { get; }
    public Regex RelativeWeekDayRegex { get; }
    public Regex RelativeDayRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex UpcomingPrefixRegex { get; }
    public Regex PastPrefixRegex { get; }
    public Regex BeforeAfterRegex { get; }
    public Regex TasksModeDurationToDatePatterns { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableList`1<string> SameDayTerms { get; }
    public IImmutableList`1<string> PlusOneDayTerms { get; }
    public IImmutableList`1<string> MinusOneDayTerms { get; }
    public IImmutableList`1<string> PlusTwoDayTerms { get; }
    public IImmutableList`1<string> MinusTwoDayTerms { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.CheckBothBeforeAfter { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public EnglishDateParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DateTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OnRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayWithNumRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ThisRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ForTheRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayOfMothRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_StrictRelativeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearSuffix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UpcomingPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeDurationToDatePatterns();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_SameDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusTwoDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusTwoDayTerms();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual int GetSwiftMonthOrYear(string text);
    public sealed virtual bool IsCardinalLast(string text);
    public sealed virtual string Normalize(string text);
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishDatePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex RangeConnectorRegex;
    public static Regex DayRegex;
    public static Regex MonthNumRegex;
    public static Regex IllegalYearRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex WrittenMonthRegex;
    public static Regex MonthSuffixRegex;
    public static Regex DateUnitRegex;
    public static Regex TimeUnitRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex FutureSuffixRegex;
    public static Regex NowRegex;
    public static Regex SimpleCasesRegex;
    public static Regex MonthFrontSimpleCasesRegex;
    public static Regex MonthFrontBetweenRegex;
    public static Regex BetweenRegex;
    public static Regex MonthWithYear;
    public static Regex OneWordPeriodRegex;
    public static Regex MonthNumWithYear;
    public static Regex WeekOfMonthRegex;
    public static Regex WeekOfYearRegex;
    public static Regex FollowedDateUnit;
    public static Regex NumberCombinedWithDateUnit;
    public static Regex QuarterRegex;
    public static Regex QuarterRegexYearFront;
    public static Regex AllHalfYearRegex;
    public static Regex SeasonRegex;
    public static Regex WhichWeekRegex;
    public static Regex WeekOfRegex;
    public static Regex MonthOfRegex;
    public static Regex RangeUnitRegex;
    public static Regex InConnectorRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex RestOfDateRegex;
    public static Regex LaterEarlyPeriodRegex;
    public static Regex WeekWithWeekDayRangeRegex;
    public static Regex YearPlusNumberRegex;
    public static Regex DecadeWithCenturyRegex;
    public static Regex YearPeriodRegex;
    public static Regex ComplexDatePeriodRegex;
    public static Regex RelativeDecadeRegex;
    public static Regex ReferenceDatePeriodRegex;
    public static Regex AgoRegex;
    public static Regex LaterRegex;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex CenturySuffixRegex;
    public static Regex FirstLastRegex;
    public static Regex OfYearRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromTokenRegex;
    private static Regex BetweenTokenRegex;
    private static Regex[] SimpleCasesRegexes;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    public IDateExtractor DatePointExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.SimpleCasesRegexes { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.IllegalYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FollowedDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NumberCombinedWithDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WeekOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearPeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ComplexDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RelativeDecadeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ReferenceDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.AgoRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LaterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CenturySuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthNumRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FirstLastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.OfYearRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DurationDateRestrictions { get; }
    public EnglishDatePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static EnglishDatePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_SimpleCasesRegexes();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_IllegalYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FollowedDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NumberCombinedWithDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WeekOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearPeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ComplexDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RelativeDecadeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ReferenceDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_AgoRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LaterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CenturySuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthNumRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FirstLastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_OfYearRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DurationDateRestrictions();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishDatePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PreviousPrefixRegex;
    public static Regex ThisPrefixRegex;
    public static Regex AfterNextSuffixRegex;
    public static Regex RelativeRegex;
    public static Regex UnspecificEndOfRangeRegex;
    public static Regex NowParseRegex;
    private static RegexOptions RegexFlags;
    private static IList`1<string> monthTermsPadded;
    private static IList`1<string> weekendTermsPadded;
    private static IList`1<string> weekTermsPadded;
    private static IList`1<string> fortnightTermsPadded;
    private static IList`1<string> yearTermsPadded;
    private static Regex NextPrefixRegex;
    [CompilerGeneratedAttribute]
private int <MinYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontBetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontSimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OneWordPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthNumWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegexYearFront>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllHalfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SeasonRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WhichWeekRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterEarlyPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekWithWeekDayRangeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPlusNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DecadeWithCenturyRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ComplexDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDecadeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ReferenceDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AgoRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LessThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MoreThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <CenturySuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TodayNowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FirstLastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SeasonMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SpecialYearPrefixesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <WrittenDecades>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <SpecialDecadeCases>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <InStringList>k__BackingField;
    public int MinYearNum { get; }
    public int MaxYearNum { get; }
    public string TokenBeforeDate { get; }
    public IDateExtractor DateExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser DurationParser { get; }
    public Regex MonthFrontBetweenRegex { get; }
    public Regex BetweenRegex { get; }
    public Regex MonthFrontSimpleCasesRegex { get; }
    public Regex SimpleCasesRegex { get; }
    public Regex OneWordPeriodRegex { get; }
    public Regex MonthWithYear { get; }
    public Regex MonthNumWithYear { get; }
    public Regex YearRegex { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex WeekOfMonthRegex { get; }
    public Regex WeekOfYearRegex { get; }
    public Regex QuarterRegex { get; }
    public Regex QuarterRegexYearFront { get; }
    public Regex AllHalfYearRegex { get; }
    public Regex SeasonRegex { get; }
    public Regex WhichWeekRegex { get; }
    public Regex WeekOfRegex { get; }
    public Regex MonthOfRegex { get; }
    public Regex InConnectorRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex RestOfDateRegex { get; }
    public Regex LaterEarlyPeriodRegex { get; }
    public Regex WeekWithWeekDayRangeRegex { get; }
    public Regex YearPlusNumberRegex { get; }
    public Regex DecadeWithCenturyRegex { get; }
    public Regex YearPeriodRegex { get; }
    public Regex ComplexDatePeriodRegex { get; }
    public Regex RelativeDecadeRegex { get; }
    public Regex ReferenceDatePeriodRegex { get; }
    public Regex AgoRegex { get; }
    public Regex LaterRegex { get; }
    public Regex LessThanRegex { get; }
    public Regex MoreThanRegex { get; }
    public Regex CenturySuffixRegex { get; }
    public Regex NowRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex TodayNowRegex { get; }
    public Regex FirstLastRegex { get; }
    public Regex OfYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.RelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.NextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.UnspecificEndOfRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.AmbiguousPointRangeRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; }
    public IImmutableDictionary`2<string, string> SpecialYearPrefixesMap { get; }
    public IImmutableDictionary`2<string, int> WrittenDecades { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IImmutableDictionary`2<string, int> SpecialDecadeCases { get; }
    public IImmutableList`1<string> InStringList { get; }
    public EnglishDatePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static EnglishDatePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public int get_MinYearNum();
    [CompilerGeneratedAttribute]
public int get_MaxYearNum();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontBetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontSimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OneWordPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthNumWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegexYearFront();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllHalfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SeasonRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WhichWeekRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterEarlyPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekWithWeekDayRangeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPlusNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DecadeWithCenturyRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ComplexDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDecadeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ReferenceDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AgoRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LessThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MoreThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_CenturySuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TodayNowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FirstLastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OfYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.get_RelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_NextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_UnspecificEndOfRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_AmbiguousPointRangeRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SpecialYearPrefixesMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_WrittenDecades();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_SpecialDecadeCases();
    [CompilerGeneratedAttribute]
public IImmutableList`1<string> get_InStringList();
    public sealed virtual int GetSwiftDayOrMonth(string text);
    public sealed virtual int GetSwiftYear(string text);
    public sealed virtual bool IsFuture(string text);
    public sealed virtual bool IsLastCardinal(string text);
    public sealed virtual bool IsMonthOnly(string text);
    public sealed virtual bool IsMonthToDate(string text);
    public sealed virtual bool IsWeekend(string text);
    public sealed virtual bool IsWeekOnly(string text);
    public sealed virtual bool IsFortnight(string text);
    public sealed virtual bool IsYearOnly(string text);
    public sealed virtual bool IsYearToDate(string text);
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishDateTimeAltExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex ThisPrefixRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex AmRegex;
    public static Regex PmRegex;
    public static Regex RangePrefixRegex;
    public static Regex[] RelativePrefixList;
    public static Regex[] AmPmRegexList;
    private static RegexOptions RegexFlags;
    private static Regex OrRegex;
    private static Regex DayRegex;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RelativePrefixList { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.AmPmRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.OrRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.DayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RangePrefixRegex { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public EnglishDateTimeAltExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static EnglishDateTimeAltExtractorConfiguration();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RelativePrefixList();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_AmPmRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_OrRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_DayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RangePrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishDateTimeAltParserConfiguration : object {
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public EnglishDateTimeAltParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishDateTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrepositionRegex;
    public static Regex NowRegex;
    public static Regex SuffixRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeOfTodayAfterRegex;
    public static Regex TimeOfTodayBeforeRegex;
    public static Regex SimpleTimeOfTodayAfterRegex;
    public static Regex SimpleTimeOfTodayBeforeRegex;
    public static Regex SpecificEndOfRegex;
    public static Regex UnspecificEndOfRegex;
    public static Regex UnitRegex;
    public static Regex ConnectorRegex;
    public static Regex NumberAsTimeRegex;
    public static Regex DateNumberConnectorRegex;
    public static Regex YearRegex;
    public static Regex YearSuffix;
    public static Regex SuffixAfterRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    public IExtractor IntegerExtractor { get; }
    public IDateExtractor DatePointExtractor { get; }
    public IDateTimeExtractor TimePointExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SpecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnspecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NumberAsTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.DateNumberConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public EnglishDateTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static EnglishDateTimeExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SpecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnspecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NumberAsTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_DateNumberConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    public sealed virtual bool IsConnector(string text);
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishDateTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex AmTimeRegex;
    public static Regex PmTimeRegex;
    public static Regex NightTimeRegex;
    private static RegexOptions RegexFlags;
    private static Regex NowTimeRegex;
    private static Regex RecentlyTimeRegex;
    private static Regex AsapTimeRegex;
    private static Regex NextPrefixRegex;
    private static Regex PreviousPrefixRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayBeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnspecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DateNumberConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrepositionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex NowRegex { get; }
    public Regex AMTimeRegex { get; }
    public Regex PMTimeRegex { get; }
    public Regex SimpleTimeOfTodayAfterRegex { get; }
    public Regex SimpleTimeOfTodayBeforeRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex SpecificEndOfRegex { get; }
    public Regex UnspecificEndOfRegex { get; }
    public Regex UnitRegex { get; }
    public Regex DateNumberConnectorRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex ConnectorRegex { get; }
    public Regex YearRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public EnglishDateTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static EnglishDateTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    public sealed virtual Regex get_AMTimeRegex();
    public sealed virtual Regex get_PMTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayBeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnspecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DateNumberConnectorRegex();
    [CompilerGeneratedAttribute]
public Regex get_PrepositionRegex();
    [CompilerGeneratedAttribute]
public Regex get_ConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual int GetHour(string text, int hour);
    public sealed virtual bool GetMatchedNowTimex(string text, String& timex);
    public sealed virtual int GetSwiftDay(string text);
    public sealed virtual bool ContainsAmbiguousToken(string text, string matchedText);
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishDateTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TimeNumberCombinedWithUnit;
    public static Regex HyphenDateRegex;
    public static Regex PeriodTimeOfDayWithDateRegex;
    public static Regex RelativeTimeUnitRegex;
    public static Regex RestOfDateTimeRegex;
    public static Regex AmDescRegex;
    public static Regex PmDescRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex DateUnitRegex;
    public static Regex PrefixDayRegex;
    public static Regex SuffixRegex;
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex WeekDaysRegex;
    public static Regex PeriodSpecificTimeOfDayRegex;
    public static Regex TasksmodeMealTimeofDayRegex;
    private static RegexOptions RegexFlags;
    private static Regex[] SimpleCases;
    private static Regex PeriodTimeOfDayRegex;
    private static Regex TimeUnitRegex;
    private static Regex TimeFollowedUnit;
    private static Regex GeneralEndingRegex;
    private static Regex MiddlePauseRegex;
    private static Regex RangeConnectorRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex TillRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex FollowedUnit { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PrefixDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RelativeTimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RestOfDateTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.MiddlePauseRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PeriodTimeOfDayWithDateRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TasksmodeMealTimeofDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AfterRegex { get; }
    public string TokenBeforeDate { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor SingleDateExtractor { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor SingleDateTimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public EnglishDateTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static EnglishDateTimePeriodExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual Regex get_PrepositionRegex();
    public sealed virtual Regex get_TillRegex();
    public sealed virtual Regex get_TimeOfDayRegex();
    public sealed virtual Regex get_SpecificTimeOfDayRegex();
    public sealed virtual Regex get_PreviousPrefixRegex();
    public sealed virtual Regex get_NextPrefixRegex();
    public sealed virtual Regex get_FutureSuffixRegex();
    public sealed virtual Regex get_WeekDayRegex();
    public sealed virtual Regex get_FollowedUnit();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PrefixDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RelativeTimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RestOfDateTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_MiddlePauseRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PeriodTimeOfDayWithDateRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TasksmodeMealTimeofDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishDateTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MorningStartEndRegex;
    public static Regex AfternoonStartEndRegex;
    public static Regex EveningStartEndRegex;
    public static Regex NightStartEndRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HyphenDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodTimeOfDayWithDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeTimeUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrefixDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksmodeMealTimeofDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex HyphenDateRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnitRegex { get; }
    public Regex UnitRegex { get; }
    public Regex PeriodTimeOfDayWithDateRegex { get; }
    public Regex RelativeTimeUnitRegex { get; }
    public Regex RestOfDateTimeRegex { get; }
    public Regex AmDescRegex { get; }
    public Regex PmDescRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex PrefixDayRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex TasksmodeMealTimeofDayRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public EnglishDateTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static EnglishDateTimePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HyphenDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodTimeOfDayWithDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeTimeUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PrefixDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksmodeMealTimeofDayRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual bool GetMatchedTimeRange(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMin);
    public sealed virtual int GetSwiftPrefix(string text);
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishDurationExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DurationUnitRegex;
    public static Regex SuffixAndRegex;
    public static Regex DurationFollowedUnit;
    public static Regex NumberCombinedWithDurationUnit;
    public static Regex AnUnitRegex;
    public static Regex DuringRegex;
    public static Regex AllRegex;
    public static Regex HalfRegex;
    public static Regex ConjunctionRegex;
    public static Regex InexactNumberRegex;
    public static Regex InexactNumberUnitRegex;
    public static Regex RelativeDurationUnitRegex;
    public static Regex DurationConnectorRegex;
    public static Regex ModPrefixRegex;
    public static Regex ModSuffixRegex;
    public static Regex SpecialNumberUnitRegex;
    public static Regex MoreThanRegex;
    public static Regex LessThanRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.FollowedUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DuringRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AllRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.HalfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SuffixAndRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ConjunctionRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.RelativeDurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SpecialNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModSuffixRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public EnglishDurationExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static EnglishDurationExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_FollowedUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DuringRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AllRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_HalfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SuffixAndRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ConjunctionRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_RelativeDurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SpecialNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModSuffixRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishDurationParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrefixArticleRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AnUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DuringRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HalfDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FollowedUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConjunctionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, double> <DoubleNumbers>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.PrefixArticleRegex { get; }
    public Regex DuringRegex { get; }
    public Regex AllDateUnitRegex { get; }
    public Regex HalfDateUnitRegex { get; }
    public Regex SuffixAndRegex { get; }
    public Regex FollowedUnit { get; }
    public Regex ConjunctionRegex { get; }
    public Regex InexactNumberRegex { get; }
    public Regex InexactNumberUnitRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex SpecialNumberUnitRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public IImmutableDictionary`2<string, double> DoubleNumbers { get; }
    public EnglishDurationParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static EnglishDurationParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_PrefixArticleRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DuringRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HalfDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FollowedUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ConjunctionRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialNumberUnitRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, double> get_DoubleNumbers();
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishHolidayExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex YearRegex;
    public static Regex H;
    public static Regex[] HolidayRegexList;
    private static RegexOptions RegexFlags;
    public IEnumerable`1<Regex> HolidayRegexes { get; }
    public EnglishHolidayExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static EnglishHolidayExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_HolidayRegexes();
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishHolidayParserConfiguration : BaseHolidayParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private Regex <ThisPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    public Regex ThisPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public EnglishHolidayParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public Regex get_ThisPrefixRegex();
    [CompilerGeneratedAttribute]
public Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public Regex get_PreviousPrefixRegex();
    public virtual int GetSwiftYear(string text);
    public virtual string SanitizeHolidayToken(string holiday);
    protected virtual IDictionary`2<string, Func`2<int, DateTime>> InitHolidayFuncs();
    private static DateTime NewYear(int year);
    private static DateTime NewYearEve(int year);
    private static DateTime ChristmasDay(int year);
    private static DateTime ChristmasEve(int year);
    private static DateTime ValentinesDay(int year);
    private static DateTime WhiteLoverDay(int year);
    private static DateTime FoolDay(int year);
    private static DateTime EarthDay(int year);
    private static DateTime GirlsDay(int year);
    private static DateTime TreePlantDay(int year);
    private static DateTime FemaleDay(int year);
    private static DateTime ChildrenDay(int year);
    private static DateTime YouthDay(int year);
    private static DateTime TeacherDay(int year);
    private static DateTime SinglesDay(int year);
    private static DateTime MaoBirthday(int year);
    private static DateTime InaugurationDay(int year);
    private static DateTime GroundhogDay(int year);
    private static DateTime StPatrickDay(int year);
    private static DateTime StGeorgeDay(int year);
    private static DateTime Mayday(int year);
    private static DateTime CincoDeMayoDay(int year);
    private static DateTime BaptisteDay(int year);
    private static DateTime UsaIndependenceDay(int year);
    private static DateTime BastilleDay(int year);
    private static DateTime HalloweenDay(int year);
    private static DateTime AllHallowDay(int year);
    private static DateTime AllSoulsDay(int year);
    private static DateTime GuyFawkesDay(int year);
    private static DateTime VeteransDay(int year);
    private static DateTime Juneteenth(int year);
    private static DateTime EasterDay(int year);
    private static DateTime AshWednesday(int year);
    private static DateTime PalmSunday(int year);
    private static DateTime MaundyThursday(int year);
    private static DateTime GoodFriday(int year);
    private static DateTime EasterSaturday(int year);
    private static DateTime EasterMonday(int year);
    private static DateTime AscensionDay(int year);
    private static DateTime WhiteSunday(int year);
    private static DateTime WhiteMonday(int year);
    private static DateTime TrinitySunday(int year);
    private static DateTime CorpusChristi(int year);
    private static DateTime Ramadan(int year);
    private static DateTime Sacrifice(int year);
    private static DateTime EidAlFitr(int year);
    private static DateTime IslamicNewYear(int year);
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishMergedExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex AroundRegex;
    public static Regex EqualRegex;
    public static Regex FromToRegex;
    public static Regex SingleAmbiguousMonthRegex;
    public static Regex PrepositionSuffixRegex;
    public static Regex AmbiguousRangeModifierPrefix;
    public static Regex NumberEndingPattern;
    public static Regex SuffixAfterRegex;
    public static Regex UnspecificDatePeriodRegex;
    public static Regex UnspecificTimePeriodRegex;
    public static Regex FailFastRegex;
    public static Regex YearRegex;
    public static Regex[] TermFilterRegexes;
    public static StringMatcher SuperfluousWordMatcher;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private static Regex <SinceRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private static Regex <SinceRegexExp>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SetExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeZoneExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeListExtractor <DateTimeAltExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeMentionFilters>k__BackingField;
    public static Regex SinceRegex { get; public set; }
    public static Regex SinceRegexExp { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor SetExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeZoneExtractor TimeZoneExtractor { get; }
    public IDateTimeListExtractor DateTimeAltExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SinceRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AroundRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.EqualRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.FromToRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SingleAmbiguousMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PrepositionSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AmbiguousRangeModifierPrefix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PotentialAmbiguousRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.NumberEndingPattern { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuffixAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificTimePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.FailFastRegex { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.TermFilterRegexes { get; }
    private StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.CheckBothBeforeAfter { get; }
    public Regex TasksModeMentionFilters { get; }
    public EnglishMergedExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static EnglishMergedExtractorConfiguration();
    [CompilerGeneratedAttribute]
public static Regex get_SinceRegex();
    [CompilerGeneratedAttribute]
public static void set_SinceRegex(Regex value);
    [CompilerGeneratedAttribute]
public static Regex get_SinceRegexExp();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SetExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeZoneExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeListExtractor get_DateTimeAltExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SinceRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AroundRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_EqualRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_FromToRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SingleAmbiguousMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PrepositionSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AmbiguousRangeModifierPrefix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PotentialAmbiguousRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_NumberEndingPattern();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuffixAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificTimePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_FailFastRegex();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_TermFilterRegexes();
    private sealed virtual override StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeMentionFilters();
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishMergedParserConfiguration : EnglishCommonDateTimeParserConfiguration {
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SinceRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AroundRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EqualRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <SetParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <SuperfluousWordMatcher>k__BackingField;
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex SinceRegex { get; }
    public Regex AroundRegex { get; }
    public Regex EqualRegex { get; }
    public Regex SuffixAfter { get; }
    public Regex YearRegex { get; }
    public IDateTimeParser SetParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public StringMatcher SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.CheckBothBeforeAfter { get; }
    public EnglishMergedParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SinceRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AroundRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EqualRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_SetParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.get_CheckBothBeforeAfter();
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishSetExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex SetUnitRegex;
    public static Regex PeriodicRegex;
    public static Regex EachUnitRegex;
    public static Regex EachPrefixRegex;
    public static Regex SetLastRegex;
    public static Regex EachDayRegex;
    public static Regex BeforeEachDayRegex;
    public static Regex SetWeekDayRegex;
    public static Regex SetEachRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.LastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.PeriodicRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.BeforeEachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetWeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetEachRegex { get; }
    public EnglishSetExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static EnglishSetExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_LastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_PeriodicRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_BeforeEachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetWeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetEachRegex();
    public sealed virtual Tuple`2<string, int> WeekDayGroupMatchTuple(Match match);
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishSetParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex DoubleMultiplierRegex;
    private static Regex HalfMultiplierRegex;
    private static Regex DayTypeRegex;
    private static Regex WeekTypeRegex;
    private static Regex WeekendTypeRegex;
    private static Regex MonthTypeRegex;
    private static Regex QuarterTypeRegex;
    private static Regex YearTypeRegex;
    private static Regex FortNightRegex;
    private static Regex WeekDayTypeRegex;
    private static List`1<string> ThisTerms;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodicRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetEachRegex>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex EachPrefixRegex { get; }
    public Regex PeriodicRegex { get; }
    public Regex EachUnitRegex { get; }
    public Regex EachDayRegex { get; }
    public Regex SetWeekDayRegex { get; }
    public Regex SetEachRegex { get; }
    public EnglishSetParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static EnglishSetParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodicRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetEachRegex();
    public sealed virtual bool GetMatchedDailyTimex(string text, String& timex);
    public sealed virtual bool GetMatchedUnitTimex(string text, String& timex);
    public sealed virtual string WeekDayGroupMatchString(Match match);
    public sealed virtual string ReplaceValueInTextWithFutTerm(string text, string value);
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DescRegex;
    public static Regex HourNumRegex;
    public static Regex MinuteNumRegex;
    public static Regex OclockRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex LessThanOneHour;
    public static Regex WrittenTimeRegex;
    public static Regex TimePrefix;
    public static Regex TimeSuffix;
    public static Regex BasicTime;
    public static Regex MidnightRegex;
    public static Regex MidmorningRegex;
    public static Regex MidafternoonRegex;
    public static Regex MiddayRegex;
    public static Regex MidTimeRegex;
    public static Regex AtRegex;
    public static Regex IshRegex;
    public static Regex TimeUnitRegex;
    public static Regex ConnectNumRegex;
    public static Regex TimeBeforeAfterRegex;
    public static Regex[] TimeRegexList;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.AtRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.IshRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeBeforeAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public string TimeTokenPrefix { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public EnglishTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static EnglishTimeExtractorConfiguration();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_AtRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_IshRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeBeforeAfterRegex();
    [CompilerGeneratedAttribute]
public IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    public sealed virtual string get_TimeTokenPrefix();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex TimeSuffixFull;
    private static Regex LunchRegex;
    private static Regex NightRegex;
    private static Regex HalfTokenRegex;
    private static Regex QuarterTokenRegex;
    private static Regex ThreeQuarterTokenRegex;
    private static Regex ToTokenRegex;
    [CompilerGeneratedAttribute]
private string <TimeTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AtRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MealTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <TimeRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    public string TimeTokenPrefix { get; }
    public Regex AtRegex { get; }
    public Regex MealTimeRegex { get; }
    public IEnumerable`1<Regex> TimeRegexes { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public EnglishTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static EnglishTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TimeTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AtRegex();
    [CompilerGeneratedAttribute]
public Regex get_MealTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_TimeRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    public sealed virtual void AdjustByPrefix(string prefix, Int32& hour, Int32& min, Boolean& hasMin);
    public sealed virtual void AdjustBySuffix(string suffix, Int32& hour, Int32& min, Boolean& hasMin, Boolean& hasAm, Boolean& hasPm);
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex HourRegex;
    public static Regex PeriodHourNumRegex;
    public static Regex PeriodDescRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex PureNumFromTo;
    public static Regex PureNumBetweenAnd;
    public static Regex SpecificTimeFromTo;
    public static Regex SpecificTimeBetweenAnd;
    public static Regex PrepositionRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeUnitRegex;
    public static Regex TimeFollowedUnit;
    public static Regex TimeNumberCombinedWithUnit;
    public static Regex GeneralEndingRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    public string TokenBeforeDate { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public IEnumerable`1<Regex> PureNumberRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    public EnglishTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static EnglishTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual IEnumerable`1<Regex> get_PureNumberRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool IsConnectorToken(string text);
    public sealed virtual List`1<ExtractResult> ApplyPotentialPeriodAmbiguityHotfix(string text, List`1<ExtractResult> timePeriodErs);
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <GeneralEndingRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TillRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex SpecificTimeFromToRegex { get; }
    public Regex SpecificTimeBetweenAndRegex { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex GeneralEndingRegex { get; }
    public Regex TillRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public EnglishTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_GeneralEndingRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TillRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual bool GetMatchedTimeRange(string text, String& timex, Int32& beginHour, Int32& endHour, Int32& endMin);
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishTimeZoneExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DirectUtcRegex;
    public static List`1<string> AbbreviationsList;
    public static List`1<string> FullNameList;
    public static StringMatcher TimeZoneMatcher;
    public static Regex LocationTimeSuffixRegex;
    public static StringMatcher LocationMatcher;
    public static List`1<string> AmbiguousTimezoneList;
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.DirectUtcRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.LocationTimeSuffixRegex { get; }
    private StringMatcher Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.LocationMatcher { get; }
    private StringMatcher Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.TimeZoneMatcher { get; }
    private List`1<string> Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.AmbiguousTimezoneList { get; }
    public EnglishTimeZoneExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static EnglishTimeZoneExtractorConfiguration();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.get_DirectUtcRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.get_LocationTimeSuffixRegex();
    private sealed virtual override StringMatcher Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.get_LocationMatcher();
    private sealed virtual override StringMatcher Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.get_TimeZoneMatcher();
    private sealed virtual override List`1<string> Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.get_AmbiguousTimezoneList();
}
public class Microsoft.Recognizers.Text.DateTime.English.EnglishTimeZoneParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static string TimeZoneEndRegex;
    public static Dictionary`2<string, int> FullToMinMapping;
    public static Regex DirectUtcRegex;
    public static Dictionary`2<string, int> AbbrToMinMapping;
    private string Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.TimeZoneEndRegex { get; }
    private Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.FullToMinMapping { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.DirectUtcRegex { get; }
    private Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.AbbrToMinMapping { get; }
    public EnglishTimeZoneParserConfiguration(IDateTimeOptionsConfiguration config);
    private static EnglishTimeZoneParserConfiguration();
    private sealed virtual override string Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_TimeZoneEndRegex();
    private sealed virtual override Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_FullToMinMapping();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_DirectUtcRegex();
    private sealed virtual override Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_AbbrToMinMapping();
}
public class Microsoft.Recognizers.Text.DateTime.English.TimeParser : BaseTimeParser {
    public TimeParser(ITimeParserConfiguration configuration);
    protected virtual DateTimeResolutionResult InternalParse(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseIsh(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.English.Utilities.EnglishDatetimeUtilityConfiguration : BaseDatetimeUtilityConfiguration {
}
[ExtensionAttribute]
public static class Microsoft.Recognizers.Text.DateTime.ExtractResultExtension : object {
    [ExtensionAttribute]
public static bool IsOverlap(ExtractResult er1, ExtractResult er2);
    [ExtensionAttribute]
public static bool IsCover(ExtractResult er1, ExtractResult er2);
    public static List`1<ExtractResult> MergeAllResults(List`1<ExtractResult> results);
    public static List`1<ExtractResult> FilterAmbiguity(List`1<ExtractResult> extractResults, string text, Dictionary`2<Regex, Regex> ambiguityFiltersDict);
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchCommonDateTimeParserConfiguration : BaseDateParserConfiguration {
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public FrenchCommonDateTimeParserConfiguration(IDateTimeOptionsConfiguration config);
    public virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchDateExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MonthRegex;
    public static Regex DayRegex;
    public static Regex MonthNumRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex OnRegex;
    public static Regex RelaxedOnRegex;
    public static Regex ThisRegex;
    public static Regex LastDateRegex;
    public static Regex NextDateRegex;
    public static Regex UnitRegex;
    public static Regex SpecialDayRegex;
    public static Regex SpecialDayWithNumRegex;
    public static Regex DateUnitRegex;
    public static Regex StrictWeekDay;
    public static Regex WeekDayOfMonthRegex;
    public static Regex SpecialDate;
    public static Regex RelativeWeekDayRegex;
    public static Regex ForTheRegex;
    public static Regex WeekDayAndDayOfMothRegex;
    public static Regex WeekDayAndDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex StrictRelativeRegex;
    public static Regex PrefixArticleRegex;
    public static Regex[] ImplicitDateList;
    public static Regex OfMonth;
    public static Regex MonthEnd;
    public static Regex WeekDayEnd;
    public static Regex WeekDayStart;
    public static Regex YearSuffix;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex InConnectorRegex;
    public static Regex SinceYearSuffixRegex;
    public static Regex RangeUnitRegex;
    public static Regex RangeConnectorSymbolRegex;
    public static ImmutableDictionary`2<string, int> DayOfWeek;
    public static ImmutableDictionary`2<string, int> MonthOfYear;
    public static Regex NonDateUnitRegex;
    public static Regex BeforeAfterRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public IEnumerable`1<Regex> DateRegexList { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.ImplicitDateList { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DayOfWeek { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthOfYear { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.OfMonth { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayStart { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayOfMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.ForTheRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RelativeMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.StrictRelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.PrefixArticleRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.SinceYearSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeConnectorSymbolRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.BeforeAfterRegex { get; }
    public FrenchDateExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static FrenchDateExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_ImplicitDateList();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DayOfWeek();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthOfYear();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_OfMonth();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayStart();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayOfMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_ForTheRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RelativeMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_StrictRelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_PrefixArticleRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_SinceYearSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeConnectorSymbolRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_BeforeAfterRegex();
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchDateParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private string <DateTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OnRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayWithNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ThisRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <StrictWeekDay>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ForTheRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayOfMothRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <StrictRelativeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UpcomingPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeDurationToDatePatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <SameDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public string DateTokenPrefix { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IEnumerable`1<Regex> DateRegexes { get; }
    public Regex OnRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex SpecialDayWithNumRegex { get; }
    public Regex NextRegex { get; }
    public Regex ThisRegex { get; }
    public Regex LastRegex { get; }
    public Regex UnitRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex StrictWeekDay { get; }
    public Regex MonthRegex { get; }
    public Regex WeekDayOfMonthRegex { get; }
    public Regex ForTheRegex { get; }
    public Regex WeekDayAndDayOfMothRegex { get; }
    public Regex WeekDayAndDayRegex { get; }
    public Regex RelativeMonthRegex { get; }
    public Regex StrictRelativeRegex { get; }
    public Regex YearSuffix { get; }
    public Regex RelativeWeekDayRegex { get; }
    public Regex RelativeDayRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex UpcomingPrefixRegex { get; }
    public Regex PastPrefixRegex { get; }
    public Regex BeforeAfterRegex { get; }
    public Regex TasksModeDurationToDatePatterns { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableList`1<string> SameDayTerms { get; }
    public IImmutableList`1<string> PlusOneDayTerms { get; }
    public IImmutableList`1<string> MinusOneDayTerms { get; }
    public IImmutableList`1<string> PlusTwoDayTerms { get; }
    public IImmutableList`1<string> MinusTwoDayTerms { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.CheckBothBeforeAfter { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public FrenchDateParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DateTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OnRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayWithNumRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ThisRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayRegex();
    [CompilerGeneratedAttribute]
public Regex get_StrictWeekDay();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ForTheRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayOfMothRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_StrictRelativeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearSuffix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UpcomingPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeDurationToDatePatterns();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_SameDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusTwoDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusTwoDayTerms();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public static int GetSwiftDay(string text);
    public sealed virtual int GetSwiftMonthOrYear(string text);
    public sealed virtual bool IsCardinalLast(string text);
    public sealed virtual string Normalize(string text);
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchDatePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex RangeConnectorRegex;
    public static Regex DayRegex;
    public static Regex MonthNumRegex;
    public static Regex IllegalYearRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex WrittenMonthRegex;
    public static Regex MonthSuffixRegex;
    public static Regex DateUnitRegex;
    public static Regex TimeUnitRegex;
    public static Regex PastPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex FutureSuffixRegex;
    public static Regex ThisPrefixRegex;
    public static Regex SimpleCasesRegex;
    public static Regex MonthFrontSimpleCasesRegex;
    public static Regex MonthFrontBetweenRegex;
    public static Regex BetweenRegex;
    public static Regex MonthWithYear;
    public static Regex OneWordPeriodRegex;
    public static Regex MonthNumWithYear;
    public static Regex WeekOfMonthRegex;
    public static Regex WeekOfYearRegex;
    public static Regex FollowedDateUnit;
    public static Regex NumberCombinedWithDateUnit;
    public static Regex QuarterRegex;
    public static Regex QuarterRegexYearFront;
    public static Regex AllHalfYearRegex;
    public static Regex SeasonRegex;
    public static Regex WhichWeekRegex;
    public static Regex WeekOfRegex;
    public static Regex MonthOfRegex;
    public static Regex RangeUnitRegex;
    public static Regex InConnectorRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex RestOfDateRegex;
    public static Regex LaterEarlyPeriodRegex;
    public static Regex WeekWithWeekDayRangeRegex;
    public static Regex YearPlusNumberRegex;
    public static Regex DecadeWithCenturyRegex;
    public static Regex YearPeriodRegex;
    public static Regex ComplexDatePeriodRegex;
    public static Regex RelativeDecadeRegex;
    public static Regex ReferenceDatePeriodRegex;
    public static Regex AgoRegex;
    public static Regex LaterRegex;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex CenturySuffixRegex;
    public static Regex NowRegex;
    public static Regex FirstLastRegex;
    public static Regex OfYearRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromRegex;
    private static Regex ConnectorAndRegex;
    private static Regex BeforeRegex;
    private static Regex[] SimpleCasesRegexes;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    public IDateExtractor DatePointExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.SimpleCasesRegexes { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.IllegalYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FollowedDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NumberCombinedWithDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WeekOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearPeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ComplexDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RelativeDecadeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ReferenceDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.AgoRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LaterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CenturySuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthNumRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FirstLastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.OfYearRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DurationDateRestrictions { get; }
    public FrenchDatePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static FrenchDatePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_SimpleCasesRegexes();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_IllegalYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FollowedDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NumberCombinedWithDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WeekOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearPeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ComplexDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RelativeDecadeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ReferenceDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_AgoRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LaterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CenturySuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthNumRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FirstLastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_OfYearRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DurationDateRestrictions();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchDatePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex NextPrefixRegex;
    public static Regex PastPrefixRegex;
    public static Regex ThisPrefixRegex;
    public static Regex NextSuffixRegex;
    public static Regex PastSuffixRegex;
    public static Regex RelativeRegex;
    public static Regex UnspecificEndOfRangeRegex;
    public static Regex AmbiguousPointRangeRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private int <MinYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontBetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontSimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OneWordPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthNumWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegexYearFront>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllHalfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SeasonRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WhichWeekRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterEarlyPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekWithWeekDayRangeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPlusNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DecadeWithCenturyRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ComplexDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDecadeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ReferenceDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AgoRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LessThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MoreThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <CenturySuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TodayNowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FirstLastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SeasonMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SpecialYearPrefixesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <WrittenDecades>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <SpecialDecadeCases>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <InStringList>k__BackingField;
    public int MinYearNum { get; }
    public int MaxYearNum { get; }
    public string TokenBeforeDate { get; }
    public IDateExtractor DateExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser DurationParser { get; }
    public Regex MonthFrontBetweenRegex { get; }
    public Regex BetweenRegex { get; }
    public Regex MonthFrontSimpleCasesRegex { get; }
    public Regex SimpleCasesRegex { get; }
    public Regex OneWordPeriodRegex { get; }
    public Regex MonthWithYear { get; }
    public Regex MonthNumWithYear { get; }
    public Regex YearRegex { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex WeekOfMonthRegex { get; }
    public Regex WeekOfYearRegex { get; }
    public Regex QuarterRegex { get; }
    public Regex QuarterRegexYearFront { get; }
    public Regex AllHalfYearRegex { get; }
    public Regex SeasonRegex { get; }
    public Regex WhichWeekRegex { get; }
    public Regex WeekOfRegex { get; }
    public Regex MonthOfRegex { get; }
    public Regex InConnectorRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex RestOfDateRegex { get; }
    public Regex LaterEarlyPeriodRegex { get; }
    public Regex WeekWithWeekDayRangeRegex { get; }
    public Regex YearPlusNumberRegex { get; }
    public Regex DecadeWithCenturyRegex { get; }
    public Regex YearPeriodRegex { get; }
    public Regex ComplexDatePeriodRegex { get; }
    public Regex RelativeDecadeRegex { get; }
    public Regex ReferenceDatePeriodRegex { get; }
    public Regex AgoRegex { get; }
    public Regex LaterRegex { get; }
    public Regex LessThanRegex { get; }
    public Regex MoreThanRegex { get; }
    public Regex CenturySuffixRegex { get; }
    public Regex NowRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex TodayNowRegex { get; }
    public Regex FirstLastRegex { get; }
    public Regex OfYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.RelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.NextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.UnspecificEndOfRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.AmbiguousPointRangeRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; }
    public IImmutableDictionary`2<string, string> SpecialYearPrefixesMap { get; }
    public IImmutableDictionary`2<string, int> WrittenDecades { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IImmutableDictionary`2<string, int> SpecialDecadeCases { get; }
    public IImmutableList`1<string> InStringList { get; }
    public FrenchDatePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static FrenchDatePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public int get_MinYearNum();
    [CompilerGeneratedAttribute]
public int get_MaxYearNum();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontBetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontSimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OneWordPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthNumWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegexYearFront();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllHalfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SeasonRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WhichWeekRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterEarlyPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekWithWeekDayRangeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPlusNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DecadeWithCenturyRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ComplexDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDecadeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ReferenceDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AgoRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LessThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MoreThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_CenturySuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TodayNowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FirstLastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OfYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.get_RelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_NextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_UnspecificEndOfRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_AmbiguousPointRangeRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SpecialYearPrefixesMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_WrittenDecades();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_SpecialDecadeCases();
    [CompilerGeneratedAttribute]
public IImmutableList`1<string> get_InStringList();
    public sealed virtual int GetSwiftDayOrMonth(string text);
    public sealed virtual int GetSwiftYear(string text);
    public sealed virtual bool IsFuture(string text);
    public sealed virtual bool IsLastCardinal(string text);
    public sealed virtual bool IsMonthOnly(string text);
    public sealed virtual bool IsMonthToDate(string text);
    public sealed virtual bool IsWeekend(string text);
    public sealed virtual bool IsWeekOnly(string text);
    public sealed virtual bool IsFortnight(string text);
    public sealed virtual bool IsYearOnly(string text);
    public sealed virtual bool IsYearToDate(string text);
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchDateTimeAltExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex ThisPrefixRegex;
    public static Regex AmRegex;
    public static Regex PmRegex;
    public static Regex RangePrefixRegex;
    public static Regex[] RelativePrefixList;
    public static Regex[] AmPmRegexList;
    private static RegexOptions RegexFlags;
    private static Regex OrRegex;
    private static Regex DayRegex;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RelativePrefixList { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.AmPmRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.OrRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.DayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RangePrefixRegex { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public FrenchDateTimeAltExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static FrenchDateTimeAltExtractorConfiguration();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RelativePrefixList();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_AmPmRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_OrRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_DayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RangePrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchDateTimeAltParserConfiguration : object {
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public FrenchDateTimeAltParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchDateTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrepositionRegex;
    public static Regex NowRegex;
    public static Regex SuffixRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeOfTodayAfterRegex;
    public static Regex TimeOfTodayBeforeRegex;
    public static Regex SimpleTimeOfTodayAfterRegex;
    public static Regex SimpleTimeOfTodayBeforeRegex;
    public static Regex SpecificEndOfRegex;
    public static Regex UnspecificEndOfRegex;
    public static Regex UnitRegex;
    public static Regex ConnectorRegex;
    public static Regex NumberAsTimeRegex;
    public static Regex DateNumberConnectorRegex;
    public static Regex YearRegex;
    public static Regex YearSuffix;
    public static Regex SuffixAfterRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    public IExtractor IntegerExtractor { get; }
    public IDateExtractor DatePointExtractor { get; }
    public IDateTimeExtractor TimePointExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SpecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnspecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NumberAsTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.DateNumberConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public FrenchDateTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static FrenchDateTimeExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SpecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnspecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NumberAsTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_DateNumberConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    public sealed virtual bool IsConnector(string text);
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchDateTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex AmTimeRegex;
    public static Regex PmTimeRegex;
    private static RegexOptions RegexFlags;
    private static Regex AsapTimeRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayBeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnspecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DateNumberConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrepositionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex NowRegex { get; }
    public Regex AMTimeRegex { get; }
    public Regex PMTimeRegex { get; }
    public Regex SimpleTimeOfTodayAfterRegex { get; }
    public Regex SimpleTimeOfTodayBeforeRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex SpecificEndOfRegex { get; }
    public Regex UnspecificEndOfRegex { get; }
    public Regex UnitRegex { get; }
    public Regex DateNumberConnectorRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex YearRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public FrenchDateTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static FrenchDateTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    public sealed virtual Regex get_AMTimeRegex();
    public sealed virtual Regex get_PMTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayBeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnspecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DateNumberConnectorRegex();
    [CompilerGeneratedAttribute]
public Regex get_PrepositionRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual int GetHour(string text, int hour);
    public sealed virtual bool GetMatchedNowTimex(string text, String& timex);
    public sealed virtual int GetSwiftDay(string text);
    public sealed virtual bool ContainsAmbiguousToken(string text, string matchedText);
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchDateTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TimeNumberCombinedWithUnit;
    public static Regex HyphenDateRegex;
    public static Regex PeriodTimeOfDayWithDateRegex;
    public static Regex RelativeTimeUnitRegex;
    public static Regex RestOfDateTimeRegex;
    public static Regex GeneralEndingRegex;
    public static Regex MiddlePauseRegex;
    public static Regex AmDescRegex;
    public static Regex PmDescRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex DateUnitRegex;
    public static Regex PrefixDayRegex;
    public static Regex SuffixRegex;
    public static Regex AfterRegex;
    public static Regex BeforeRegex;
    public static Regex WeekDaysRegex;
    private static RegexOptions RegexFlags;
    private static Regex[] SimpleCases;
    private static Regex FromRegex;
    private static Regex ConnectorAndRegex;
    private static Regex PeriodTimeOfDayRegex;
    private static Regex PeriodSpecificTimeOfDayRegex;
    private static Regex TimeTimeUnitRegex;
    private static Regex TimeFollowedUnit;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex TillRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex FollowedUnit { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex WeekDayRegex { get; }
    public string TokenBeforeDate { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor SingleDateExtractor { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor SingleDateTimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PrefixDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RelativeTimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RestOfDateTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PeriodTimeOfDayWithDateRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.MiddlePauseRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public FrenchDateTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static FrenchDateTimePeriodExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual Regex get_PrepositionRegex();
    public sealed virtual Regex get_TillRegex();
    public sealed virtual Regex get_TimeOfDayRegex();
    public sealed virtual Regex get_SpecificTimeOfDayRegex();
    public sealed virtual Regex get_FollowedUnit();
    public sealed virtual Regex get_PreviousPrefixRegex();
    public sealed virtual Regex get_NextPrefixRegex();
    public sealed virtual Regex get_FutureSuffixRegex();
    public sealed virtual Regex get_WeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PrefixDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RelativeTimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RestOfDateTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PeriodTimeOfDayWithDateRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_MiddlePauseRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TasksmodeMealTimeofDayRegex();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchDateTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MorningStartEndRegex;
    public static Regex AfternoonStartEndRegex;
    public static Regex EveningStartEndRegex;
    public static Regex NightStartEndRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HyphenDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodTimeOfDayWithDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeTimeUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrefixDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex HyphenDateRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnitRegex { get; }
    public Regex UnitRegex { get; }
    public Regex PeriodTimeOfDayWithDateRegex { get; }
    public Regex RelativeTimeUnitRegex { get; }
    public Regex RestOfDateTimeRegex { get; }
    public Regex AmDescRegex { get; }
    public Regex PmDescRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex PrefixDayRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public FrenchDateTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static FrenchDateTimePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HyphenDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodTimeOfDayWithDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeTimeUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PrefixDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_TasksmodeMealTimeofDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual bool GetMatchedTimeRange(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMin);
    public sealed virtual int GetSwiftPrefix(string text);
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchDurationExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DurationUnitRegex;
    public static Regex SuffixAndRegex;
    public static Regex DurationFollowedUnit;
    public static Regex NumberCombinedWithDurationUnit;
    public static Regex AnUnitRegex;
    public static Regex DuringRegex;
    public static Regex AllRegex;
    public static Regex HalfRegex;
    public static Regex ConjunctionRegex;
    public static Regex InexactNumberRegex;
    public static Regex InexactNumberUnitRegex;
    public static Regex RelativeDurationUnitRegex;
    public static Regex DurationConnectorRegex;
    public static Regex ModPrefixRegex;
    public static Regex ModSuffixRegex;
    public static Regex SpecialNumberUnitRegex;
    public static Regex MoreThanRegex;
    public static Regex LessThanRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.FollowedUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DuringRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AllRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.HalfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SuffixAndRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ConjunctionRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.RelativeDurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SpecialNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModSuffixRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public FrenchDurationExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static FrenchDurationExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_FollowedUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DuringRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AllRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_HalfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SuffixAndRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ConjunctionRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_RelativeDurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SpecialNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModSuffixRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchDurationParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrefixArticleRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AnUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DuringRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HalfDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FollowedUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConjunctionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, double> <DoubleNumbers>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.PrefixArticleRegex { get; }
    public Regex DuringRegex { get; }
    public Regex AllDateUnitRegex { get; }
    public Regex HalfDateUnitRegex { get; }
    public Regex SuffixAndRegex { get; }
    public Regex FollowedUnit { get; }
    public Regex ConjunctionRegex { get; }
    public Regex InexactNumberRegex { get; }
    public Regex InexactNumberUnitRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex SpecialNumberUnitRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public IImmutableDictionary`2<string, double> DoubleNumbers { get; }
    public FrenchDurationParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static FrenchDurationParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_PrefixArticleRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DuringRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HalfDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FollowedUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ConjunctionRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialNumberUnitRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, double> get_DoubleNumbers();
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchHolidayExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex YearRegex;
    public static Regex H1;
    public static Regex H2;
    public static Regex H3;
    public static Regex H4;
    public static Regex[] HolidayRegexList;
    private static RegexOptions RegexFlags;
    public IEnumerable`1<Regex> HolidayRegexes { get; }
    public FrenchHolidayExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static FrenchHolidayExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_HolidayRegexes();
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchHolidayParserConfiguration : BaseHolidayParserConfiguration {
    public FrenchHolidayParserConfiguration(IDateTimeOptionsConfiguration config);
    public virtual int GetSwiftYear(string text);
    public virtual string SanitizeHolidayToken(string holiday);
    protected virtual IDictionary`2<string, Func`2<int, DateTime>> InitHolidayFuncs();
    private static DateTime NewYear(int year);
    private static DateTime NewYearEve(int year);
    private static DateTime ChristmasDay(int year);
    private static DateTime ChristmasEve(int year);
    private static DateTime ValentinesDay(int year);
    private static DateTime WhiteLoverDay(int year);
    private static DateTime FoolDay(int year);
    private static DateTime GirlsDay(int year);
    private static DateTime TreePlantDay(int year);
    private static DateTime FemaleDay(int year);
    private static DateTime ChildrenDay(int year);
    private static DateTime YouthDay(int year);
    private static DateTime TeacherDay(int year);
    private static DateTime SinglesDay(int year);
    private static DateTime MaoBirthday(int year);
    private static DateTime InaugurationDay(int year);
    private static DateTime GroundhogDay(int year);
    private static DateTime StPatrickDay(int year);
    private static DateTime StGeorgeDay(int year);
    private static DateTime Mayday(int year);
    private static DateTime CincoDeMayoDay(int year);
    private static DateTime BaptisteDay(int year);
    private static DateTime UsaIndependenceDay(int year);
    private static DateTime BastilleDay(int year);
    private static DateTime HalloweenDay(int year);
    private static DateTime AllHallowsDay(int year);
    private static DateTime AllSoulsDay(int year);
    private static DateTime GuyFawkesDay(int year);
    private static DateTime VeteransDay(int year);
    private static DateTime FathersDay(int year);
    private static DateTime MothersDay(int year);
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchMergedExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex SinceRegex;
    public static Regex AroundRegex;
    public static Regex EqualRegex;
    public static Regex FromToRegex;
    public static Regex SingleAmbiguousMonthRegex;
    public static Regex PrepositionSuffixRegex;
    public static Regex AmbiguousRangeModifierPrefix;
    public static Regex NumberEndingPattern;
    public static Regex SuffixAfterRegex;
    public static Regex UnspecificDatePeriodRegex;
    public static Regex[] TermFilterRegexes;
    public static StringMatcher SuperfluousWordMatcher;
    public static Regex YearRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SetExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeZoneExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeListExtractor <DateTimeAltExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FailFastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeMentionFilters>k__BackingField;
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor SetExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeZoneExtractor TimeZoneExtractor { get; }
    public IDateTimeListExtractor DateTimeAltExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SinceRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AroundRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.EqualRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.FromToRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SingleAmbiguousMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PrepositionSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AmbiguousRangeModifierPrefix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PotentialAmbiguousRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.NumberEndingPattern { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuffixAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificTimePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.YearRegex { get; }
    public Regex FailFastRegex { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.TermFilterRegexes { get; }
    private StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.CheckBothBeforeAfter { get; }
    public Regex TasksModeMentionFilters { get; }
    public FrenchMergedExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static FrenchMergedExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SetExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeZoneExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeListExtractor get_DateTimeAltExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SinceRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AroundRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_EqualRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_FromToRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SingleAmbiguousMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PrepositionSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AmbiguousRangeModifierPrefix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PotentialAmbiguousRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_NumberEndingPattern();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuffixAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificTimePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FailFastRegex();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_TermFilterRegexes();
    private sealed virtual override StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeMentionFilters();
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchMergedParserConfiguration : FrenchCommonDateTimeParserConfiguration {
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SinceRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AroundRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EqualRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <SetParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <SuperfluousWordMatcher>k__BackingField;
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex SinceRegex { get; }
    public Regex AroundRegex { get; }
    public Regex EqualRegex { get; }
    public Regex SuffixAfter { get; }
    public Regex YearRegex { get; }
    public IDateTimeParser SetParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public StringMatcher SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.CheckBothBeforeAfter { get; }
    public FrenchMergedParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SinceRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AroundRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EqualRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_SetParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.get_CheckBothBeforeAfter();
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchSetExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static string ExtractorName;
    public static Regex SetUnitRegex;
    public static Regex PeriodicRegex;
    public static Regex EachUnitRegex;
    public static Regex EachPrefixRegex;
    public static Regex EachDayRegex;
    public static Regex SetLastRegex;
    public static Regex SetWeekDayRegex;
    public static Regex SetEachRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.LastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.PeriodicRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.BeforeEachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetWeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetEachRegex { get; }
    public FrenchSetExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static FrenchSetExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_LastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_PeriodicRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_BeforeEachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetWeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetEachRegex();
    public sealed virtual Tuple`2<string, int> WeekDayGroupMatchTuple(Match match);
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchSetParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static List`1<string> ThisTerms;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodicRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetEachRegex>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex EachPrefixRegex { get; }
    public Regex PeriodicRegex { get; }
    public Regex EachUnitRegex { get; }
    public Regex EachDayRegex { get; }
    public Regex SetWeekDayRegex { get; }
    public Regex SetEachRegex { get; }
    public FrenchSetParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static FrenchSetParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodicRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetEachRegex();
    public sealed virtual bool GetMatchedDailyTimex(string text, String& timex);
    public sealed virtual bool GetMatchedUnitTimex(string text, String& timex);
    public sealed virtual string WeekDayGroupMatchString(Match match);
    public sealed virtual string ReplaceValueInTextWithFutTerm(string text, string value);
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DescRegex;
    public static Regex HourNumRegex;
    public static Regex MinuteNumRegex;
    public static Regex OclockRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex LessThanOneHour;
    public static Regex WrittenTimeRegex;
    public static Regex TimePrefix;
    public static Regex TimeSuffix;
    public static Regex BasicTime;
    public static Regex MidnightRegex;
    public static Regex MidmorningRegex;
    public static Regex MidafternoonRegex;
    public static Regex MiddayRegex;
    public static Regex MidTimeRegex;
    public static Regex AtRegex;
    public static Regex IshRegex;
    public static Regex TimeUnitRegex;
    public static Regex ConnectNumRegex;
    public static Regex TimeBeforeAfterRegex;
    public static Regex[] TimeRegexList;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.IshRegex { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.AtRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeBeforeAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public string TimeTokenPrefix { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public FrenchTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static FrenchTimeExtractorConfiguration();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_IshRegex();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_AtRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeBeforeAfterRegex();
    [CompilerGeneratedAttribute]
public IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    public sealed virtual string get_TimeTokenPrefix();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex HalfTokenRegex;
    private static Regex QuarterTokenRegex;
    private static Regex ThreeQuarterTokenRegex;
    private static Regex ToTokenRegex;
    [CompilerGeneratedAttribute]
private string <TimeTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AtRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <TimeRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    public string TimeTokenPrefix { get; }
    public Regex AtRegex { get; }
    public IEnumerable`1<Regex> TimeRegexes { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public FrenchTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static FrenchTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TimeTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AtRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_TimeRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    public sealed virtual void AdjustByPrefix(string prefix, Int32& hour, Int32& min, Boolean& hasMin);
    public sealed virtual void AdjustBySuffix(string suffix, Int32& hour, Int32& min, Boolean& hasMin, Boolean& hasAm, Boolean& hasPm);
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static string ExtractorName;
    public static Regex TillRegex;
    public static Regex HourRegex;
    public static Regex PeriodHourNumRegex;
    public static Regex PeriodDescRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex PureNumFromTo;
    public static Regex PureNumBetweenAnd;
    public static Regex SpecificTimeFromTo;
    public static Regex SpecificTimeBetweenAnd;
    public static Regex PrepositionRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeUnitRegex;
    public static Regex TimeFollowedUnit;
    public static Regex TimeNumberCombinedWithUnit;
    public static Regex GeneralEndingRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromRegex;
    private static Regex ConnectorAndRegex;
    private static Regex BeforeRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    public string TokenBeforeDate { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public IEnumerable`1<Regex> PureNumberRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    public FrenchTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static FrenchTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual IEnumerable`1<Regex> get_PureNumberRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool IsConnectorToken(string text);
    public sealed virtual List`1<ExtractResult> ApplyPotentialPeriodAmbiguityHotfix(string text, List`1<ExtractResult> timePeriodErs);
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <GeneralEndingRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TillRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex SpecificTimeFromToRegex { get; }
    public Regex SpecificTimeBetweenAndRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex GeneralEndingRegex { get; }
    public Regex TillRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public FrenchTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_GeneralEndingRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TillRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual bool GetMatchedTimeRange(string text, String& timex, Int32& beginHour, Int32& endHour, Int32& endMin);
}
public class Microsoft.Recognizers.Text.DateTime.French.FrenchTimeZoneExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private Regex <DirectUtcRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LocationTimeSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <LocationMatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <TimeZoneMatcher>k__BackingField;
    public Regex DirectUtcRegex { get; }
    public Regex LocationTimeSuffixRegex { get; }
    public StringMatcher LocationMatcher { get; }
    public StringMatcher TimeZoneMatcher { get; }
    public List`1<string> AmbiguousTimezoneList { get; }
    public FrenchTimeZoneExtractorConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DirectUtcRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LocationTimeSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_LocationMatcher();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_TimeZoneMatcher();
    public sealed virtual List`1<string> get_AmbiguousTimezoneList();
}
public class Microsoft.Recognizers.Text.DateTime.French.TimeParser : BaseTimeParser {
    public TimeParser(ITimeParserConfiguration configuration);
    protected virtual DateTimeResolutionResult InternalParse(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseIsh(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.French.Utilities.FrenchDatetimeUtilityConfiguration : BaseDatetimeUtilityConfiguration {
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanCommonDateTimeParserConfiguration : BaseDateParserConfiguration {
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public GermanCommonDateTimeParserConfiguration(IDateTimeOptionsConfiguration config);
    public virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanDateExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MonthRegex;
    public static Regex DayRegex;
    public static Regex MonthNumRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex SingleWeekDayRegex;
    public static Regex OnRegex;
    public static Regex RelaxedOnRegex;
    public static Regex ThisRegex;
    public static Regex LastDateRegex;
    public static Regex NextDateRegex;
    public static Regex DateUnitRegex;
    public static Regex SpecialDayRegex;
    public static Regex SpecialDayWithNumRegex;
    public static Regex WeekDayOfMonthRegex;
    public static Regex RelativeWeekDayRegex;
    public static Regex SpecialDate;
    public static Regex ForTheRegex;
    public static Regex WeekDayAndDayOfMothRegex;
    public static Regex WeekDayAndDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex StrictRelativeRegex;
    public static Regex PrefixArticleRegex;
    public static Regex[] ImplicitDateList;
    public static Regex OfMonth;
    public static Regex MonthEnd;
    public static Regex WeekDayEnd;
    public static Regex WeekDayStart;
    public static Regex YearSuffix;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex InConnectorRegex;
    public static Regex SinceYearSuffixRegex;
    public static Regex RangeUnitRegex;
    public static Regex RangeConnectorSymbolRegex;
    public static ImmutableDictionary`2<string, int> DayOfWeek;
    public static ImmutableDictionary`2<string, int> MonthOfYear;
    public static Regex BeforeAfterRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public IEnumerable`1<Regex> DateRegexList { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.PrefixArticleRegex { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.ImplicitDateList { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DayOfWeek { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthOfYear { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.OfMonth { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayStart { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.ForTheRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayOfMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RelativeMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.StrictRelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.SinceYearSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeConnectorSymbolRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.BeforeAfterRegex { get; }
    public GermanDateExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static GermanDateExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_PrefixArticleRegex();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_ImplicitDateList();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DayOfWeek();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthOfYear();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_OfMonth();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayStart();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_ForTheRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayOfMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RelativeMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_StrictRelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_SinceYearSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeConnectorSymbolRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_BeforeAfterRegex();
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanDateParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private string <DateTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OnRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayWithNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ThisRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ForTheRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayOfMothRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <StrictRelativeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UpcomingPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeDurationToDatePatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <SameDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public string DateTokenPrefix { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public IEnumerable`1<Regex> DateRegexes { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex OnRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex SpecialDayWithNumRegex { get; }
    public Regex NextRegex { get; }
    public Regex ThisRegex { get; }
    public Regex LastRegex { get; }
    public Regex UnitRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex MonthRegex { get; }
    public Regex WeekDayOfMonthRegex { get; }
    public Regex ForTheRegex { get; }
    public Regex WeekDayAndDayOfMothRegex { get; }
    public Regex WeekDayAndDayRegex { get; }
    public Regex RelativeMonthRegex { get; }
    public Regex StrictRelativeRegex { get; }
    public Regex YearSuffix { get; }
    public Regex RelativeWeekDayRegex { get; }
    public Regex RelativeDayRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex AfterNextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex UpcomingPrefixRegex { get; }
    public Regex PastPrefixRegex { get; }
    public Regex BeforeAfterRegex { get; }
    public Regex TasksModeDurationToDatePatterns { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableList`1<string> SameDayTerms { get; }
    public IImmutableList`1<string> PlusOneDayTerms { get; }
    public IImmutableList`1<string> MinusOneDayTerms { get; }
    public IImmutableList`1<string> PlusTwoDayTerms { get; }
    public IImmutableList`1<string> MinusTwoDayTerms { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.CheckBothBeforeAfter { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public GermanDateParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DateTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OnRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayWithNumRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ThisRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ForTheRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayOfMothRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_StrictRelativeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearSuffix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public Regex get_AfterNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UpcomingPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeDurationToDatePatterns();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_SameDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusTwoDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusTwoDayTerms();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual int GetSwiftMonthOrYear(string text);
    public sealed virtual bool IsCardinalLast(string text);
    public sealed virtual string Normalize(string text);
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanDatePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex RangeConnectorRegex;
    public static Regex DayRegex;
    public static Regex MonthNumRegex;
    public static Regex IllegalYearRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex WrittenMonthRegex;
    public static Regex MonthSuffixRegex;
    public static Regex DateUnitRegex;
    public static Regex TimeUnitRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex FutureSuffixRegex;
    public static Regex SimpleCasesRegex;
    public static Regex MonthFrontSimpleCasesRegex;
    public static Regex MonthFrontBetweenRegex;
    public static Regex BetweenRegex;
    public static Regex MonthWithYear;
    public static Regex OneWordPeriodRegex;
    public static Regex MonthNumWithYear;
    public static Regex WeekOfMonthRegex;
    public static Regex WeekOfYearRegex;
    public static Regex FollowedDateUnit;
    public static Regex NumberCombinedWithDateUnit;
    public static Regex QuarterRegex;
    public static Regex QuarterRegexYearFront;
    public static Regex AllHalfYearRegex;
    public static Regex SeasonRegex;
    public static Regex WhichWeekRegex;
    public static Regex WeekOfRegex;
    public static Regex MonthOfRegex;
    public static Regex RangeUnitRegex;
    public static Regex InConnectorRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex RestOfDateRegex;
    public static Regex LaterEarlyPeriodRegex;
    public static Regex WeekWithWeekDayRangeRegex;
    public static Regex YearPlusNumberRegex;
    public static Regex DecadeWithCenturyRegex;
    public static Regex YearPeriodRegex;
    public static Regex ComplexDatePeriodRegex;
    public static Regex RelativeDecadeRegex;
    public static Regex ReferenceDatePeriodRegex;
    public static Regex AgoRegex;
    public static Regex LaterRegex;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex CenturySuffixRegex;
    public static Regex NowRegex;
    public static Regex FirstLastRegex;
    public static Regex OfYearRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromTokenRegex;
    private static Regex BetweenTokenRegex;
    private static Regex[] SimpleCasesRegexes;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    public IDateExtractor DatePointExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.SimpleCasesRegexes { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.IllegalYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FollowedDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NumberCombinedWithDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WeekOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearPeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ComplexDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RelativeDecadeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ReferenceDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.AgoRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LaterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CenturySuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthNumRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FirstLastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.OfYearRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DurationDateRestrictions { get; }
    public GermanDatePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static GermanDatePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_SimpleCasesRegexes();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_IllegalYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FollowedDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NumberCombinedWithDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WeekOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearPeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ComplexDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RelativeDecadeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ReferenceDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_AgoRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LaterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CenturySuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthNumRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FirstLastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_OfYearRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DurationDateRestrictions();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanDatePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex NextPrefixRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex PenultimatePrefixRegex;
    public static Regex ThisPrefixRegex;
    public static Regex RelativeRegex;
    public static Regex UnspecificEndOfRangeRegex;
    public static Regex AfterNextPrefixRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private int <MinYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontBetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontSimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OneWordPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthNumWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegexYearFront>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllHalfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SeasonRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WhichWeekRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterEarlyPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekWithWeekDayRangeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPlusNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DecadeWithCenturyRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ComplexDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDecadeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ReferenceDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AgoRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LessThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MoreThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <CenturySuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TodayNowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FirstLastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SeasonMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SpecialYearPrefixesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <WrittenDecades>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <SpecialDecadeCases>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <InStringList>k__BackingField;
    public int MinYearNum { get; }
    public int MaxYearNum { get; }
    public string TokenBeforeDate { get; }
    public IDateExtractor DateExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser DurationParser { get; }
    public Regex MonthFrontBetweenRegex { get; }
    public Regex BetweenRegex { get; }
    public Regex MonthFrontSimpleCasesRegex { get; }
    public Regex SimpleCasesRegex { get; }
    public Regex OneWordPeriodRegex { get; }
    public Regex MonthWithYear { get; }
    public Regex MonthNumWithYear { get; }
    public Regex YearRegex { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex WeekOfMonthRegex { get; }
    public Regex WeekOfYearRegex { get; }
    public Regex QuarterRegex { get; }
    public Regex QuarterRegexYearFront { get; }
    public Regex AllHalfYearRegex { get; }
    public Regex SeasonRegex { get; }
    public Regex WhichWeekRegex { get; }
    public Regex WeekOfRegex { get; }
    public Regex MonthOfRegex { get; }
    public Regex InConnectorRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex RestOfDateRegex { get; }
    public Regex LaterEarlyPeriodRegex { get; }
    public Regex WeekWithWeekDayRangeRegex { get; }
    public Regex YearPlusNumberRegex { get; }
    public Regex DecadeWithCenturyRegex { get; }
    public Regex YearPeriodRegex { get; }
    public Regex ComplexDatePeriodRegex { get; }
    public Regex RelativeDecadeRegex { get; }
    public Regex ReferenceDatePeriodRegex { get; }
    public Regex AgoRegex { get; }
    public Regex LaterRegex { get; }
    public Regex LessThanRegex { get; }
    public Regex MoreThanRegex { get; }
    public Regex CenturySuffixRegex { get; }
    public Regex NowRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex TodayNowRegex { get; }
    public Regex FirstLastRegex { get; }
    public Regex OfYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.RelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.NextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.UnspecificEndOfRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.AmbiguousPointRangeRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; }
    public IImmutableDictionary`2<string, string> SpecialYearPrefixesMap { get; }
    public IImmutableDictionary`2<string, int> WrittenDecades { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IImmutableDictionary`2<string, int> SpecialDecadeCases { get; }
    public IImmutableList`1<string> InStringList { get; }
    public GermanDatePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static GermanDatePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public int get_MinYearNum();
    [CompilerGeneratedAttribute]
public int get_MaxYearNum();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontBetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontSimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OneWordPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthNumWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegexYearFront();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllHalfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SeasonRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WhichWeekRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterEarlyPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekWithWeekDayRangeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPlusNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DecadeWithCenturyRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ComplexDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDecadeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ReferenceDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AgoRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LessThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MoreThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_CenturySuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TodayNowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FirstLastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OfYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.get_RelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_NextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_UnspecificEndOfRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_AmbiguousPointRangeRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SpecialYearPrefixesMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_WrittenDecades();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_SpecialDecadeCases();
    [CompilerGeneratedAttribute]
public IImmutableList`1<string> get_InStringList();
    public sealed virtual int GetSwiftDayOrMonth(string text);
    public sealed virtual int GetSwiftYear(string text);
    public sealed virtual bool IsFuture(string text);
    public sealed virtual bool IsLastCardinal(string text);
    public sealed virtual bool IsMonthOnly(string text);
    public sealed virtual bool IsMonthToDate(string text);
    public sealed virtual bool IsWeekend(string text);
    public sealed virtual bool IsWeekOnly(string text);
    public sealed virtual bool IsFortnight(string text);
    public sealed virtual bool IsYearOnly(string text);
    public sealed virtual bool IsYearToDate(string text);
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanDateTimeAltExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex ThisPrefixRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex AmRegex;
    public static Regex PmRegex;
    public static Regex RangePrefixRegex;
    public static Regex[] RelativePrefixList;
    public static Regex[] AmPmRegexList;
    private static RegexOptions RegexFlags;
    private static Regex OrRegex;
    private static Regex DayRegex;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RelativePrefixList { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.AmPmRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.OrRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.DayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RangePrefixRegex { get; }
    public GermanDateTimeAltExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static GermanDateTimeAltExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RelativePrefixList();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_AmPmRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_OrRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_DayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RangePrefixRegex();
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanDateTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrepositionRegex;
    public static Regex NowRegex;
    public static Regex SuffixRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeOfTodayAfterRegex;
    public static Regex TimeOfTodayBeforeRegex;
    public static Regex SimpleTimeOfTodayAfterRegex;
    public static Regex SimpleTimeOfTodayBeforeRegex;
    public static Regex SpecificEndOfRegex;
    public static Regex UnspecificEndOfRegex;
    public static Regex UnitRegex;
    public static Regex ConnectorRegex;
    public static Regex NumberAsTimeRegex;
    public static Regex DateNumberConnectorRegex;
    public static Regex YearSuffix;
    public static Regex YearRegex;
    public static Regex SuffixAfterRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    public IExtractor IntegerExtractor { get; }
    public IDateExtractor DatePointExtractor { get; }
    public IDateTimeExtractor TimePointExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SpecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnspecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NumberAsTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.DateNumberConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public GermanDateTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static GermanDateTimeExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SpecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnspecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NumberAsTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_DateNumberConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    public sealed virtual bool IsConnector(string text);
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanDateTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AMTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PMTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayBeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnspecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DateNumberConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex NowRegex { get; }
    public Regex AMTimeRegex { get; }
    public Regex PMTimeRegex { get; }
    public Regex SimpleTimeOfTodayAfterRegex { get; }
    public Regex SimpleTimeOfTodayBeforeRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex SpecificEndOfRegex { get; }
    public Regex UnspecificEndOfRegex { get; }
    public Regex UnitRegex { get; }
    public Regex DateNumberConnectorRegex { get; }
    public Regex YearRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public GermanDateTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AMTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PMTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayBeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnspecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DateNumberConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual int GetHour(string text, int hour);
    public sealed virtual bool GetMatchedNowTimex(string text, String& timex);
    public sealed virtual int GetSwiftDay(string text);
    public sealed virtual bool ContainsAmbiguousToken(string text, string matchedText);
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanDateTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TimeNumberCombinedWithUnit;
    public static Regex HyphenDateRegex;
    public static Regex PeriodTimeOfDayWithDateRegex;
    public static Regex RelativeTimeUnitRegex;
    public static Regex RestOfDateTimeRegex;
    public static Regex AmDescRegex;
    public static Regex PmDescRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex DateUnitRegex;
    public static Regex PrefixDayRegex;
    public static Regex SuffixRegex;
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    private static RegexOptions RegexFlags;
    private static Regex[] SimpleCases;
    private static Regex PeriodTimeOfDayRegex;
    private static Regex PeriodSpecificTimeOfDayRegex;
    private static Regex TimeUnitRegex;
    private static Regex TimeFollowedUnit;
    private static Regex GeneralEndingRegex;
    private static Regex MiddlePauseRegex;
    private static Regex FromTokenRegex;
    private static Regex BetweenTokenRegex;
    private static Regex RangeConnectorRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex TillRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex FollowedUnit { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex WeekDayRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PrefixDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RelativeTimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RestOfDateTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.MiddlePauseRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PeriodTimeOfDayWithDateRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public string TokenBeforeDate { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor SingleDateExtractor { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor SingleDateTimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public GermanDateTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static GermanDateTimePeriodExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual Regex get_PrepositionRegex();
    public sealed virtual Regex get_TillRegex();
    public sealed virtual Regex get_TimeOfDayRegex();
    public sealed virtual Regex get_SpecificTimeOfDayRegex();
    public sealed virtual Regex get_FollowedUnit();
    public sealed virtual Regex get_PreviousPrefixRegex();
    public sealed virtual Regex get_NextPrefixRegex();
    public sealed virtual Regex get_FutureSuffixRegex();
    public sealed virtual Regex get_WeekDayRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PrefixDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RelativeTimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RestOfDateTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_MiddlePauseRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PeriodTimeOfDayWithDateRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TasksmodeMealTimeofDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanDateTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MorningStartEndRegex;
    public static Regex AfternoonStartEndRegex;
    public static Regex EveningStartEndRegex;
    public static Regex NightStartEndRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HyphenDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodTimeOfDayWithDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeTimeUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrefixDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex HyphenDateRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnitRegex { get; }
    public Regex UnitRegex { get; }
    public Regex PeriodTimeOfDayWithDateRegex { get; }
    public Regex RelativeTimeUnitRegex { get; }
    public Regex RestOfDateTimeRegex { get; }
    public Regex AmDescRegex { get; }
    public Regex PmDescRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex PrefixDayRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public GermanDateTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static GermanDateTimePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HyphenDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodTimeOfDayWithDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeTimeUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PrefixDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_TasksmodeMealTimeofDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual bool GetMatchedTimeRange(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMin);
    public sealed virtual int GetSwiftPrefix(string text);
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanDurationExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DurationUnitRegex;
    public static Regex SuffixAndRegex;
    public static Regex DurationFollowedUnit;
    public static Regex NumberCombinedWithDurationUnit;
    public static Regex AnUnitRegex;
    public static Regex DuringRegex;
    public static Regex AllRegex;
    public static Regex HalfRegex;
    public static Regex ConjunctionRegex;
    public static Regex InexactNumberRegex;
    public static Regex InexactNumberUnitRegex;
    public static Regex RelativeDurationUnitRegex;
    public static Regex DurationConnectorRegex;
    public static Regex ModPrefixRegex;
    public static Regex ModSuffixRegex;
    public static Regex SpecialNumberUnitRegex;
    public static Regex MoreThanRegex;
    public static Regex LessThanRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.FollowedUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DuringRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AllRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.HalfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SuffixAndRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ConjunctionRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.RelativeDurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SpecialNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModSuffixRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public GermanDurationExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static GermanDurationExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_FollowedUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DuringRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AllRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_HalfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SuffixAndRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ConjunctionRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_RelativeDurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SpecialNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModSuffixRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanDurationParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AnUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrefixArticleRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DuringRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HalfDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FollowedUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConjunctionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, double> <DoubleNumbers>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex AnUnitRegex { get; }
    public Regex PrefixArticleRegex { get; }
    public Regex DuringRegex { get; }
    public Regex AllDateUnitRegex { get; }
    public Regex HalfDateUnitRegex { get; }
    public Regex SuffixAndRegex { get; }
    public Regex FollowedUnit { get; }
    public Regex ConjunctionRegex { get; }
    public Regex InexactNumberRegex { get; }
    public Regex InexactNumberUnitRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex SpecialNumberUnitRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public IImmutableDictionary`2<string, double> DoubleNumbers { get; }
    public GermanDurationParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AnUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PrefixArticleRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DuringRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HalfDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FollowedUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ConjunctionRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialNumberUnitRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, double> get_DoubleNumbers();
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanHolidayExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex YearRegex;
    public static Regex H1;
    public static Regex H2;
    public static Regex H3;
    public static Regex[] HolidayRegexList;
    private static RegexOptions RegexFlags;
    public IEnumerable`1<Regex> HolidayRegexes { get; }
    public GermanHolidayExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static GermanHolidayExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_HolidayRegexes();
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanHolidayParserConfiguration : BaseHolidayParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private Regex <ThisPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    public Regex ThisPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public GermanHolidayParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public Regex get_ThisPrefixRegex();
    [CompilerGeneratedAttribute]
public Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public Regex get_PreviousPrefixRegex();
    public virtual int GetSwiftYear(string text);
    public virtual string SanitizeHolidayToken(string holiday);
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanMergedExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex SinceRegex;
    public static Regex AroundRegex;
    public static Regex EqualRegex;
    public static Regex FromToRegex;
    public static Regex SingleAmbiguousMonthRegex;
    public static Regex PrepositionSuffixRegex;
    public static Regex AmbiguousRangeModifierPrefix;
    public static Regex NumberEndingPattern;
    public static Regex SuffixAfterRegex;
    public static Regex UnspecificDatePeriodRegex;
    public static Regex YearRegex;
    public static StringMatcher SuperfluousWordMatcher;
    public static Regex[] TermFilterRegexes;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SetExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeZoneExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeListExtractor <DateTimeAltExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FailFastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeMentionFilters>k__BackingField;
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor SetExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeZoneExtractor TimeZoneExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IDateTimeListExtractor DateTimeAltExtractor { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SinceRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AroundRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.EqualRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.FromToRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SingleAmbiguousMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PrepositionSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AmbiguousRangeModifierPrefix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PotentialAmbiguousRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.NumberEndingPattern { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuffixAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificTimePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.YearRegex { get; }
    public Regex FailFastRegex { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.TermFilterRegexes { get; }
    private StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.CheckBothBeforeAfter { get; }
    public Regex TasksModeMentionFilters { get; }
    public GermanMergedExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static GermanMergedExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SetExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeZoneExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeListExtractor get_DateTimeAltExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SinceRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AroundRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_EqualRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_FromToRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SingleAmbiguousMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PrepositionSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AmbiguousRangeModifierPrefix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PotentialAmbiguousRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_NumberEndingPattern();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuffixAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificTimePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FailFastRegex();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_TermFilterRegexes();
    private sealed virtual override StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeMentionFilters();
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanMergedParserConfiguration : GermanCommonDateTimeParserConfiguration {
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SinceRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AroundRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EqualRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <SetParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <SuperfluousWordMatcher>k__BackingField;
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex SinceRegex { get; }
    public Regex AroundRegex { get; }
    public Regex EqualRegex { get; }
    public Regex SuffixAfter { get; }
    public Regex YearRegex { get; }
    public IDateTimeParser SetParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public StringMatcher SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.CheckBothBeforeAfter { get; }
    public GermanMergedParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SinceRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AroundRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EqualRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_SetParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.get_CheckBothBeforeAfter();
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanSetExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex SetUnitRegex;
    public static Regex PeriodicRegex;
    public static Regex EachUnitRegex;
    public static Regex EachPrefixRegex;
    public static Regex SetLastRegex;
    public static Regex EachDayRegex;
    public static Regex BeforeEachDayRegex;
    public static Regex SetWeekDayRegex;
    public static Regex SetEachRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.LastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.PeriodicRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.BeforeEachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetWeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetEachRegex { get; }
    public GermanSetExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static GermanSetExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_LastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_PeriodicRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_BeforeEachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetWeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetEachRegex();
    public sealed virtual Tuple`2<string, int> WeekDayGroupMatchTuple(Match match);
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanSetParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static List`1<string> ThisTerms;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodicRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetEachRegex>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex EachPrefixRegex { get; }
    public Regex PeriodicRegex { get; }
    public Regex EachUnitRegex { get; }
    public Regex EachDayRegex { get; }
    public Regex SetWeekDayRegex { get; }
    public Regex SetEachRegex { get; }
    public GermanSetParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static GermanSetParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodicRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetEachRegex();
    public sealed virtual bool GetMatchedDailyTimex(string text, String& timex);
    public sealed virtual bool GetMatchedUnitTimex(string text, String& timex);
    public sealed virtual string WeekDayGroupMatchString(Match match);
    public sealed virtual string ReplaceValueInTextWithFutTerm(string text, string value);
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DescRegex;
    public static Regex HourNumRegex;
    public static Regex MinuteNumRegex;
    public static Regex OclockRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex LessThanOneHour;
    public static Regex WrittenTimeRegex;
    public static Regex TimePrefix;
    public static Regex TimeSuffix;
    public static Regex BasicTime;
    public static Regex MidnightRegex;
    public static Regex MidmorningRegex;
    public static Regex MidafternoonRegex;
    public static Regex MiddayRegex;
    public static Regex MidTimeRegex;
    public static Regex AtRegex;
    public static Regex IshRegex;
    public static Regex TimeUnitRegex;
    public static Regex ConnectNumRegex;
    public static Regex TimeBeforeAfterRegex;
    public static Regex[] TimeRegexList;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.AtRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.IshRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeBeforeAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public string TimeTokenPrefix { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public GermanTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static GermanTimeExtractorConfiguration();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_AtRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_IshRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeBeforeAfterRegex();
    [CompilerGeneratedAttribute]
public IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    public sealed virtual string get_TimeTokenPrefix();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex TimeSuffixFull;
    private static Regex LunchRegex;
    private static Regex NightRegex;
    private static Regex HalfTokenRegex;
    private static Regex QuarterToTokenRegex;
    private static Regex QuarterPastTokenRegex;
    private static Regex ThreeQuarterToTokenRegex;
    private static Regex ThreeQuarterPastTokenRegex;
    [CompilerGeneratedAttribute]
private string <TimeTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AtRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MealTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <TimeRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    public string TimeTokenPrefix { get; }
    public Regex AtRegex { get; }
    public Regex MealTimeRegex { get; }
    public IEnumerable`1<Regex> TimeRegexes { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public GermanTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static GermanTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TimeTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AtRegex();
    [CompilerGeneratedAttribute]
public Regex get_MealTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_TimeRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    public sealed virtual void AdjustByPrefix(string prefix, Int32& hour, Int32& min, Boolean& hasMin);
    public sealed virtual void AdjustBySuffix(string suffix, Int32& hour, Int32& min, Boolean& hasMin, Boolean& hasAm, Boolean& hasPm);
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex HourRegex;
    public static Regex PeriodHourNumRegex;
    public static Regex PeriodDescRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex PureNumFromTo;
    public static Regex PureNumBetweenAnd;
    public static Regex SpecificTimeFromTo;
    public static Regex SpecificTimeBetweenAnd;
    public static Regex PrepositionRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeUnitRegex;
    public static Regex TimeFollowedUnit;
    public static Regex TimeNumberCombinedWithUnit;
    public static Regex GeneralEndingRegex;
    public static Regex AmbiguousTimePeriodRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    public string TokenBeforeDate { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public IEnumerable`1<Regex> PureNumberRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    public GermanTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static GermanTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual IEnumerable`1<Regex> get_PureNumberRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool IsConnectorToken(string text);
    public sealed virtual List`1<ExtractResult> ApplyPotentialPeriodAmbiguityHotfix(string text, List`1<ExtractResult> timePeriodErs);
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <GeneralEndingRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TillRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex SpecificTimeFromToRegex { get; }
    public Regex SpecificTimeBetweenAndRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex GeneralEndingRegex { get; }
    public Regex TillRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public GermanTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_GeneralEndingRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TillRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual bool GetMatchedTimeRange(string text, String& timex, Int32& beginHour, Int32& endHour, Int32& endMin);
}
public class Microsoft.Recognizers.Text.DateTime.German.GermanTimeZoneExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private Regex <DirectUtcRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LocationTimeSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <LocationMatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <TimeZoneMatcher>k__BackingField;
    public Regex DirectUtcRegex { get; }
    public Regex LocationTimeSuffixRegex { get; }
    public StringMatcher LocationMatcher { get; }
    public StringMatcher TimeZoneMatcher { get; }
    public List`1<string> AmbiguousTimezoneList { get; }
    public GermanTimeZoneExtractorConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DirectUtcRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LocationTimeSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_LocationMatcher();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_TimeZoneMatcher();
    public sealed virtual List`1<string> get_AmbiguousTimezoneList();
}
public class Microsoft.Recognizers.Text.DateTime.German.HolidayParserGer : object {
    public static string ParserName;
    public static Dictionary`2<string, Func`2<int, DateTime>> FixedHolidaysDict;
    public static Dictionary`2<string, Func`2<int, DateTime>> HolidayFuncDict;
    private IHolidayParserConfiguration config;
    public HolidayParserGer(IHolidayParserConfiguration config);
    private static HolidayParserGer();
    public sealed virtual ParseResult Parse(ExtractResult result);
    public sealed virtual DateTimeParseResult Parse(ExtractResult er, DateTime refDate);
    public sealed virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    private static DateTime GetFutureValue(DateTime value, DateTime referenceDate, string holiday);
    private static DateTime GetPastValue(DateTime value, DateTime referenceDate, string holiday);
    private static DateTime AssumptionOfMary(int year);
    private static DateTime GermanUnityDay(int year);
    private static DateTime ReformationDay(int year);
    private static DateTime StMartinsDay(int year);
    private static DateTime SaintNicholasDay(int year);
    private static DateTime BiblicalMagiDay(int year);
    private static DateTime WalpurgisNight(int year);
    private static DateTime AustrianNationalDay(int year);
    private static DateTime ImmaculateConception(int year);
    private static DateTime SecondChristmasDay(int year);
    private static DateTime BerchtoldDay(int year);
    private static DateTime SaintJosephsDay(int year);
    private static DateTime SwissNationalDay(int year);
    private static DateTime LoverDay(int year);
    private static DateTime LaborDay(int year);
    private static DateTime MidAutumnDay(int year);
    private static DateTime SpringDay(int year);
    private static DateTime LanternDay(int year);
    private static DateTime QingMingDay(int year);
    private static DateTime DragonBoatDay(int year);
    private static DateTime ChsNationalDay(int year);
    private static DateTime ChsMilBuildDay(int year);
    private static DateTime ChongYangDay(int year);
    private static DateTime NewYear(int year);
    private static DateTime NewYearEve(int year);
    private static DateTime ChristmasDay(int year);
    private static DateTime ChristmasEve(int year);
    private static DateTime ValentinesDay(int year);
    private static DateTime WhiteLoverDay(int year);
    private static DateTime FoolDay(int year);
    private static DateTime GirlsDay(int year);
    private static DateTime TreePlantDay(int year);
    private static DateTime FemaleDay(int year);
    private static DateTime ChildrenDay(int year);
    private static DateTime YouthDay(int year);
    private static DateTime TeacherDay(int year);
    private static DateTime SinglesDay(int year);
    private static DateTime MaoBirthday(int year);
    private static DateTime InaugurationDay(int year);
    private static DateTime GroundhogDay(int year);
    private static DateTime StPatrickDay(int year);
    private static DateTime StGeorgeDay(int year);
    private static DateTime Mayday(int year);
    private static DateTime CincoDeMayo(int year);
    private static DateTime BaptisteDay(int year);
    private static DateTime UsaIndependenceDay(int year);
    private static DateTime BastilleDay(int year);
    private static DateTime HalloweenDay(int year);
    private static DateTime AllHallowDay(int year);
    private static DateTime AllSoulsDay(int year);
    private static DateTime GuyFawkesDay(int year);
    private static DateTime VeteransDay(int year);
    private static DateTime PiDay(int year);
    private static DateTime BeginningOfWinter(int year);
    private static DateTime BeginningOfSummer(int year);
    private static DateTime BeginningOfSpring(int year);
    private static DateTime BeginningOfFall(int year);
    private static DateTime BarbaraTag(int year);
    private static DateTime AugsburgerFriedensFest(int year);
    private static DateTime PeterUndPaul(int year);
    private static DateTime JohannisTag(int year);
    private static DateTime HeiligeDreiKönige(int year);
    private static DateTime GetMothersDayOfYear(int year);
    private static DateTime GetFathersDayOfYear(int year);
    private static DateTime GetMartinLutherKingDayOfYear(int year);
    private static DateTime GetWashingtonsBirthdayOfYear(int year);
    private static DateTime GetCanberraDayOfYear(int year);
    private static DateTime GetMemorialDayOfYear(int year);
    private static DateTime GetLabourDayOfYear(int year);
    private static DateTime GetColumbusDayOfYear(int year);
    private static DateTime GetThanksgivingDayOfYear(int year);
    private static DateTime GetEasterDay(int year);
    private static DateTime GetEasterMondayOfYear(int year);
    private static DateTime GetCheDayOfRepentance(int year);
    private static DateTime GetFourthAdvent(int year);
    private static DateTime GetThirdAdvent(int year);
    private static DateTime GetSecondAdvent(int year);
    private static DateTime GetFirstAdvent(int year);
    private static DateTime GetTotenSonntag(int year);
    private static DateTime GetDayOfRepentance(int year);
    private static DateTime GetMemorialDayGermany(int year);
    private static DateTime GetHolyThursday(int year);
    private static DateTime GetFastnacht(int year);
    private static DateTime GetRosenmontag(int year);
    private static DateTime GetCorpusChristi(int year);
    private static DateTime GetWhiteSunday(int year);
    private static DateTime GetWhiteMonday(int year);
    private static DateTime GetAscensionOfChrist(int year);
    private static DateTime GetGoodFriday(int year);
    private static DateTime GetPalmSunday(int year);
    private static DateTime GetAshWednesday(int year);
    private static DateTime GetCarnival(int year);
    private static DateTime GetWeiberfastnacht(int year);
    private static DateTime GetEasterSaturday(int year);
    private static DateTime GetFastnachtSaturday(int year);
    private static DateTime GetFastnachtSunday(int year);
    private DateTimeResolutionResult ParseHolidayRegexMatch(string text, DateTime referenceDate);
    private DateTimeResolutionResult Match2Date(Match match, DateTime referenceDate);
}
public class Microsoft.Recognizers.Text.DateTime.German.TimeParser : BaseTimeParser {
    public TimeParser(ITimeParserConfiguration configuration);
    protected virtual DateTimeResolutionResult InternalParse(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseIsh(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.German.Utilities.GermanDatetimeUtilityConfiguration : BaseDatetimeUtilityConfiguration {
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiCommonDateTimeParserConfiguration : BaseDateParserConfiguration {
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public HindiCommonDateTimeParserConfiguration(IDateTimeOptionsConfiguration config);
    public virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiDateExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MonthRegex;
    public static Regex MonthNumRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex SingleWeekDayRegex;
    public static Regex OnRegex;
    public static Regex RelaxedOnRegex;
    public static Regex ThisRegex;
    public static Regex LastDateRegex;
    public static Regex NextDateRegex;
    public static Regex DateUnitRegex;
    public static Regex SpecialDayRegex;
    public static Regex WeekDayOfMonthRegex;
    public static Regex RelativeWeekDayRegex;
    public static Regex SpecialDate;
    public static Regex SpecialDayWithNumRegex;
    public static Regex ForTheRegex;
    public static Regex WeekDayAndDayOfMothRegex;
    public static Regex WeekDayAndDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex StrictRelativeRegex;
    public static Regex PrefixArticleRegex;
    public static Regex OfMonth;
    public static Regex MonthEnd;
    public static Regex WeekDayEnd;
    public static Regex WeekDayStart;
    public static Regex YearSuffix;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex InConnectorRegex;
    public static Regex SinceYearSuffixRegex;
    public static Regex RangeUnitRegex;
    public static Regex RangeConnectorSymbolRegex;
    public static Regex BeforeAfterRegex;
    public static ImmutableDictionary`2<string, int> DayOfWeek;
    public static ImmutableDictionary`2<string, int> MonthOfYear;
    private static RegexOptions RegexFlags;
    private static Regex DayRegex;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <ImplicitDateList>k__BackingField;
    public IEnumerable`1<Regex> DateRegexList { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IEnumerable`1<Regex> ImplicitDateList { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DayOfWeek { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthOfYear { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.OfMonth { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayStart { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.ForTheRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayOfMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RelativeMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.StrictRelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.PrefixArticleRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.SinceYearSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeConnectorSymbolRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.BeforeAfterRegex { get; }
    public HindiDateExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static HindiDateExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_ImplicitDateList();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DayOfWeek();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthOfYear();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_OfMonth();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayStart();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_ForTheRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayOfMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RelativeMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_StrictRelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_PrefixArticleRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_SinceYearSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeConnectorSymbolRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_BeforeAfterRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiDateParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private IImmutableList`1<string> lastCardinalTerms;
    [CompilerGeneratedAttribute]
private string <DateTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OnRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayWithNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ThisRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ForTheRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayOfMothRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <StrictRelativeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UpcomingPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeDurationToDatePatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <SameDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public string DateTokenPrefix { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public IEnumerable`1<Regex> DateRegexes { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex OnRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex SpecialDayWithNumRegex { get; }
    public Regex NextRegex { get; }
    public Regex ThisRegex { get; }
    public Regex LastRegex { get; }
    public Regex UnitRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex MonthRegex { get; }
    public Regex WeekDayOfMonthRegex { get; }
    public Regex ForTheRegex { get; }
    public Regex WeekDayAndDayOfMothRegex { get; }
    public Regex WeekDayAndDayRegex { get; }
    public Regex RelativeMonthRegex { get; }
    public Regex StrictRelativeRegex { get; }
    public Regex YearSuffix { get; }
    public Regex RelativeWeekDayRegex { get; }
    public Regex RelativeDayRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex UpcomingPrefixRegex { get; }
    public Regex PastPrefixRegex { get; }
    public Regex BeforeAfterRegex { get; }
    public Regex TasksModeDurationToDatePatterns { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableList`1<string> SameDayTerms { get; }
    public IImmutableList`1<string> PlusOneDayTerms { get; }
    public IImmutableList`1<string> MinusOneDayTerms { get; }
    public IImmutableList`1<string> PlusTwoDayTerms { get; }
    public IImmutableList`1<string> MinusTwoDayTerms { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.CheckBothBeforeAfter { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public HindiDateParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DateTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OnRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayWithNumRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ThisRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ForTheRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayOfMothRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_StrictRelativeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearSuffix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UpcomingPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeDurationToDatePatterns();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_SameDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusTwoDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusTwoDayTerms();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual int GetSwiftMonthOrYear(string text);
    public sealed virtual bool IsCardinalLast(string text);
    public sealed virtual string Normalize(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiDatePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex RangeConnectorRegex;
    public static Regex DayRegex;
    public static Regex MonthNumRegex;
    public static Regex IllegalYearRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex WrittenMonthRegex;
    public static Regex MonthSuffixRegex;
    public static Regex DateUnitRegex;
    public static Regex TimeUnitRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex FutureSuffixRegex;
    public static Regex NowRegex;
    public static Regex SimpleCasesRegex;
    public static Regex NumberBeforeWeekRegex;
    public static Regex MonthFrontSimpleCasesRegex;
    public static Regex MonthFrontBetweenRegex;
    public static Regex BetweenRegex;
    public static Regex MonthWithYear;
    public static Regex OneWordPeriodRegex;
    public static Regex MonthNumWithYear;
    public static Regex WeekOfMonthRegex;
    public static Regex WeekOfYearRegex;
    public static Regex FollowedDateUnit;
    public static Regex NumberCombinedWithDateUnit;
    public static Regex QuarterRegex;
    public static Regex QuarterRegexYearFront;
    public static Regex AllHalfYearRegex;
    public static Regex SeasonRegex;
    public static Regex WhichWeekRegex;
    public static Regex WeekOfRegex;
    public static Regex MonthOfRegex;
    public static Regex RangeUnitRegex;
    public static Regex InConnectorRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex RestOfDateRegex;
    public static Regex LaterEarlyPeriodRegex;
    public static Regex WeekWithWeekDayRangeRegex;
    public static Regex YearPlusNumberRegex;
    public static Regex DecadeWithCenturyRegex;
    public static Regex YearPeriodRegex;
    public static Regex ComplexDatePeriodRegex;
    public static Regex RelativeDecadeRegex;
    public static Regex ReferenceDatePeriodRegex;
    public static Regex AgoRegex;
    public static Regex LaterRegex;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex CenturySuffixRegex;
    public static Regex FirstLastRegex;
    public static Regex OfYearRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromTokenRegex;
    private static Regex RangePrefixRegex;
    private static Regex[] SimpleCasesRegexes;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    public IDateExtractor DatePointExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.SimpleCasesRegexes { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.IllegalYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FollowedDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NumberCombinedWithDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WeekOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearPeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ComplexDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RelativeDecadeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ReferenceDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.AgoRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LaterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CenturySuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthNumRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FirstLastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.OfYearRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DurationDateRestrictions { get; }
    public HindiDatePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static HindiDatePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_SimpleCasesRegexes();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_IllegalYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FollowedDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NumberCombinedWithDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WeekOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearPeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ComplexDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RelativeDecadeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ReferenceDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_AgoRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LaterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CenturySuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthNumRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FirstLastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_OfYearRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DurationDateRestrictions();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiDatePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PreviousPrefixRegex;
    public static Regex ThisPrefixRegex;
    public static Regex AfterNextSuffixRegex;
    public static Regex RelativeRegex;
    public static Regex UnspecificEndOfRangeRegex;
    private static RegexOptions RegexFlags;
    private static IList`1<string> monthTermsPadded;
    private static IList`1<string> weekendTermsPadded;
    private static IList`1<string> weekTermsPadded;
    private static IList`1<string> yearTermsPadded;
    private static Regex NextPrefixRegex;
    private static Regex NextPrefixRegexNoWeek;
    [CompilerGeneratedAttribute]
private int <MinYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontBetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontSimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OneWordPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthNumWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegexYearFront>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllHalfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SeasonRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WhichWeekRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterEarlyPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekWithWeekDayRangeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPlusNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DecadeWithCenturyRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ComplexDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDecadeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ReferenceDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AgoRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LessThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MoreThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <CenturySuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TodayNowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FirstLastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SeasonMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SpecialYearPrefixesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <WrittenDecades>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <SpecialDecadeCases>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <InStringList>k__BackingField;
    public int MinYearNum { get; }
    public int MaxYearNum { get; }
    public string TokenBeforeDate { get; }
    public IDateExtractor DateExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser DurationParser { get; }
    public Regex MonthFrontBetweenRegex { get; }
    public Regex BetweenRegex { get; }
    public Regex MonthFrontSimpleCasesRegex { get; }
    public Regex SimpleCasesRegex { get; }
    public Regex OneWordPeriodRegex { get; }
    public Regex MonthWithYear { get; }
    public Regex MonthNumWithYear { get; }
    public Regex YearRegex { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex WeekOfMonthRegex { get; }
    public Regex WeekOfYearRegex { get; }
    public Regex QuarterRegex { get; }
    public Regex QuarterRegexYearFront { get; }
    public Regex AllHalfYearRegex { get; }
    public Regex SeasonRegex { get; }
    public Regex WhichWeekRegex { get; }
    public Regex WeekOfRegex { get; }
    public Regex MonthOfRegex { get; }
    public Regex InConnectorRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex RestOfDateRegex { get; }
    public Regex LaterEarlyPeriodRegex { get; }
    public Regex WeekWithWeekDayRangeRegex { get; }
    public Regex YearPlusNumberRegex { get; }
    public Regex DecadeWithCenturyRegex { get; }
    public Regex YearPeriodRegex { get; }
    public Regex ComplexDatePeriodRegex { get; }
    public Regex RelativeDecadeRegex { get; }
    public Regex ReferenceDatePeriodRegex { get; }
    public Regex AgoRegex { get; }
    public Regex LaterRegex { get; }
    public Regex LessThanRegex { get; }
    public Regex MoreThanRegex { get; }
    public Regex CenturySuffixRegex { get; }
    public Regex NowRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex TodayNowRegex { get; }
    public Regex FirstLastRegex { get; }
    public Regex OfYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.RelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.NextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.UnspecificEndOfRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.AmbiguousPointRangeRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; }
    public IImmutableDictionary`2<string, string> SpecialYearPrefixesMap { get; }
    public IImmutableDictionary`2<string, int> WrittenDecades { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IImmutableDictionary`2<string, int> SpecialDecadeCases { get; }
    public IImmutableList`1<string> InStringList { get; }
    public HindiDatePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static HindiDatePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public int get_MinYearNum();
    [CompilerGeneratedAttribute]
public int get_MaxYearNum();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontBetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontSimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OneWordPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthNumWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegexYearFront();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllHalfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SeasonRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WhichWeekRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterEarlyPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekWithWeekDayRangeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPlusNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DecadeWithCenturyRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ComplexDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDecadeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ReferenceDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AgoRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LessThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MoreThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_CenturySuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TodayNowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FirstLastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OfYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.get_RelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_NextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_UnspecificEndOfRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_AmbiguousPointRangeRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SpecialYearPrefixesMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_WrittenDecades();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_SpecialDecadeCases();
    [CompilerGeneratedAttribute]
public IImmutableList`1<string> get_InStringList();
    public sealed virtual int GetSwiftDayOrMonth(string text);
    public sealed virtual int GetSwiftYear(string text);
    public sealed virtual bool IsFuture(string text);
    public sealed virtual bool IsLastCardinal(string text);
    public sealed virtual bool IsMonthOnly(string text);
    public sealed virtual bool IsMonthToDate(string text);
    public sealed virtual bool IsWeekend(string text);
    public sealed virtual bool IsWeekOnly(string text);
    public sealed virtual bool IsFortnight(string text);
    public sealed virtual bool IsYearOnly(string text);
    public sealed virtual bool IsYearToDate(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiDateTimeAltExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex ThisPrefixRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex AmRegex;
    public static Regex PmRegex;
    public static Regex RangePrefixRegex;
    public static Regex[] RelativePrefixList;
    public static Regex[] AmPmRegexList;
    private static RegexOptions RegexFlags;
    private static Regex OrRegex;
    private static Regex DayRegex;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RelativePrefixList { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.AmPmRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.OrRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.DayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RangePrefixRegex { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public HindiDateTimeAltExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static HindiDateTimeAltExtractorConfiguration();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RelativePrefixList();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_AmPmRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_OrRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_DayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RangePrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiDateTimeAltParserConfiguration : object {
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public HindiDateTimeAltParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiDateTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrepositionRegex;
    public static Regex NowRegex;
    public static Regex SuffixRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeOfTodayAfterRegex;
    public static Regex TimeOfTodayBeforeRegex;
    public static Regex SimpleTimeOfTodayAfterRegex;
    public static Regex SimpleTimeOfTodayBeforeRegex;
    public static Regex SpecificEndOfRegex;
    public static Regex UnspecificEndOfRegex;
    public static Regex UnitRegex;
    public static Regex ConnectorRegex;
    public static Regex NumberAsTimeRegex;
    public static Regex DateNumberConnectorRegex;
    public static Regex YearRegex;
    public static Regex YearSuffix;
    public static Regex SuffixAfterRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    public IExtractor IntegerExtractor { get; }
    public IDateExtractor DatePointExtractor { get; }
    public IDateTimeExtractor TimePointExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SpecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnspecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NumberAsTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.DateNumberConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public HindiDateTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static HindiDateTimeExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SpecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnspecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NumberAsTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_DateNumberConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    public sealed virtual bool IsConnector(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiDateTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex AmTimeRegex;
    public static Regex PmTimeRegex;
    private static RegexOptions RegexFlags;
    private static Regex NowTimeRegex;
    private static Regex RecentlyTimeRegex;
    private static Regex AsapTimeRegex;
    private static Regex NextPrefixRegex;
    private static Regex PreviousPrefixRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayBeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnspecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DateNumberConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrepositionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex NowRegex { get; }
    public Regex AMTimeRegex { get; }
    public Regex PMTimeRegex { get; }
    public Regex SimpleTimeOfTodayAfterRegex { get; }
    public Regex SimpleTimeOfTodayBeforeRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex SpecificEndOfRegex { get; }
    public Regex UnspecificEndOfRegex { get; }
    public Regex UnitRegex { get; }
    public Regex DateNumberConnectorRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex ConnectorRegex { get; }
    public Regex YearRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public HindiDateTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static HindiDateTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    public sealed virtual Regex get_AMTimeRegex();
    public sealed virtual Regex get_PMTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayBeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnspecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DateNumberConnectorRegex();
    [CompilerGeneratedAttribute]
public Regex get_PrepositionRegex();
    [CompilerGeneratedAttribute]
public Regex get_ConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual int GetHour(string text, int hour);
    public sealed virtual bool GetMatchedNowTimex(string text, String& timex);
    public sealed virtual int GetSwiftDay(string text);
    public sealed virtual bool ContainsAmbiguousToken(string text, string matchedText);
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiDateTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TimeNumberCombinedWithUnit;
    public static Regex HyphenDateRegex;
    public static Regex PeriodTimeOfDayWithDateRegex;
    public static Regex RelativeTimeUnitRegex;
    public static Regex RestOfDateTimeRegex;
    public static Regex AmDescRegex;
    public static Regex PmDescRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex DateUnitRegex;
    public static Regex PrefixDayRegex;
    public static Regex SuffixRegex;
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex WeekDaysRegex;
    public static Regex PeriodSpecificTimeOfDayRegex;
    private static RegexOptions RegexFlags;
    private static Regex[] SimpleCases;
    private static Regex PeriodTimeOfDayRegex;
    private static Regex TimeUnitRegex;
    private static Regex TimeFollowedUnit;
    private static Regex GeneralEndingRegex;
    private static Regex MiddlePauseRegex;
    private static Regex FromRegex;
    private static Regex BetweenRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex TillRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex FollowedUnit { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PrefixDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RelativeTimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RestOfDateTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.MiddlePauseRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PeriodTimeOfDayWithDateRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public string TokenBeforeDate { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor SingleDateExtractor { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor SingleDateTimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public HindiDateTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static HindiDateTimePeriodExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual Regex get_PrepositionRegex();
    public sealed virtual Regex get_TillRegex();
    public sealed virtual Regex get_TimeOfDayRegex();
    public sealed virtual Regex get_SpecificTimeOfDayRegex();
    public sealed virtual Regex get_PreviousPrefixRegex();
    public sealed virtual Regex get_NextPrefixRegex();
    public sealed virtual Regex get_FutureSuffixRegex();
    public sealed virtual Regex get_WeekDayRegex();
    public sealed virtual Regex get_FollowedUnit();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PrefixDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RelativeTimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RestOfDateTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_MiddlePauseRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PeriodTimeOfDayWithDateRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TasksmodeMealTimeofDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiDateTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MorningStartEndRegex;
    public static Regex AfternoonStartEndRegex;
    public static Regex EveningStartEndRegex;
    public static Regex NightStartEndRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HyphenDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodTimeOfDayWithDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeTimeUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrefixDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex HyphenDateRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnitRegex { get; }
    public Regex UnitRegex { get; }
    public Regex PeriodTimeOfDayWithDateRegex { get; }
    public Regex RelativeTimeUnitRegex { get; }
    public Regex RestOfDateTimeRegex { get; }
    public Regex AmDescRegex { get; }
    public Regex PmDescRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex PrefixDayRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public HindiDateTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static HindiDateTimePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HyphenDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodTimeOfDayWithDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeTimeUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PrefixDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_TasksmodeMealTimeofDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual bool GetMatchedTimeRange(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMin);
    public sealed virtual int GetSwiftPrefix(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiDurationExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DurationUnitRegex;
    public static Regex SuffixAndRegex;
    public static Regex DurationFollowedUnit;
    public static Regex NumberCombinedWithDurationUnit;
    public static Regex AnUnitRegex;
    public static Regex DuringRegex;
    public static Regex AllRegex;
    public static Regex HalfRegex;
    public static Regex ConjunctionRegex;
    public static Regex InexactNumberRegex;
    public static Regex InexactNumberUnitRegex;
    public static Regex RelativeDurationUnitRegex;
    public static Regex DurationConnectorRegex;
    public static Regex ModPrefixRegex;
    public static Regex ModSuffixRegex;
    public static Regex SpecialNumberUnitRegex;
    public static Regex MoreThanRegex;
    public static Regex LessThanRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.FollowedUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DuringRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AllRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.HalfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SuffixAndRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ConjunctionRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.RelativeDurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SpecialNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModSuffixRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public HindiDurationExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static HindiDurationExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_FollowedUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DuringRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AllRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_HalfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SuffixAndRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ConjunctionRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_RelativeDurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SpecialNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModSuffixRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiDurationParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrefixArticleRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AnUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DuringRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HalfDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FollowedUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConjunctionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, double> <DoubleNumbers>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.PrefixArticleRegex { get; }
    public Regex DuringRegex { get; }
    public Regex AllDateUnitRegex { get; }
    public Regex HalfDateUnitRegex { get; }
    public Regex SuffixAndRegex { get; }
    public Regex FollowedUnit { get; }
    public Regex ConjunctionRegex { get; }
    public Regex InexactNumberRegex { get; }
    public Regex InexactNumberUnitRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex SpecialNumberUnitRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public IImmutableDictionary`2<string, double> DoubleNumbers { get; }
    public HindiDurationParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static HindiDurationParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_PrefixArticleRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DuringRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HalfDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FollowedUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ConjunctionRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialNumberUnitRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, double> get_DoubleNumbers();
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiHolidayExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex YearRegex;
    public static Regex H1;
    public static Regex H2;
    public static Regex H3;
    public static Regex[] HolidayRegexList;
    private static RegexOptions RegexFlags;
    public IEnumerable`1<Regex> HolidayRegexes { get; }
    public HindiHolidayExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static HindiHolidayExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_HolidayRegexes();
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiHolidayParserConfiguration : BaseHolidayParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private Regex <ThisPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    public Regex ThisPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public HindiHolidayParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public Regex get_ThisPrefixRegex();
    [CompilerGeneratedAttribute]
public Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public Regex get_PreviousPrefixRegex();
    public virtual int GetSwiftYear(string text);
    public virtual string SanitizeHolidayToken(string holiday);
    protected virtual IDictionary`2<string, Func`2<int, DateTime>> InitHolidayFuncs();
    private static DateTime IndianIndependence(int year);
    private static DateTime RepublicDay(int year);
    private static DateTime YogaDay(int year);
    private static DateTime HoliDay(int year);
    private static DateTime DiwaliDay(int year);
    private static DateTime GandhiJayanti(int year);
    private static DateTime NewYear(int year);
    private static DateTime NewYearEve(int year);
    private static DateTime ChristmasDay(int year);
    private static DateTime ChristmasEve(int year);
    private static DateTime ValentinesDay(int year);
    private static DateTime WhiteLoverDay(int year);
    private static DateTime FoolDay(int year);
    private static DateTime EarthDay(int year);
    private static DateTime GirlsDay(int year);
    private static DateTime TreePlantDay(int year);
    private static DateTime FemaleDay(int year);
    private static DateTime ChildrenDay(int year);
    private static DateTime YouthDay(int year);
    private static DateTime TeacherDay(int year);
    private static DateTime SinglesDay(int year);
    private static DateTime MaoBirthday(int year);
    private static DateTime InaugurationDay(int year);
    private static DateTime GroundhogDay(int year);
    private static DateTime StPatrickDay(int year);
    private static DateTime StGeorgeDay(int year);
    private static DateTime Mayday(int year);
    private static DateTime CincoDeMayoday(int year);
    private static DateTime BaptisteDay(int year);
    private static DateTime UsaIndependenceDay(int year);
    private static DateTime BastilleDay(int year);
    private static DateTime HalloweenDay(int year);
    private static DateTime AllHallowDay(int year);
    private static DateTime AllSoulsday(int year);
    private static DateTime GuyFawkesDay(int year);
    private static DateTime Veteransday(int year);
    private static DateTime EasterDay(int year);
    private static DateTime AshWednesday(int year);
    private static DateTime PalmSunday(int year);
    private static DateTime MaundyThursday(int year);
    private static DateTime GoodFriday(int year);
    private static DateTime EasterSaturday(int year);
    private static DateTime EasterMonday(int year);
    private static DateTime AscensionDay(int year);
    private static DateTime WhiteSunday(int year);
    private static DateTime WhiteMonday(int year);
    private static DateTime TrinitySunday(int year);
    private static DateTime CorpusChristi(int year);
    private static DateTime RakshaBandhanDay(int year);
    private static DateTime VaishakhiDay(int year);
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiMergedExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex SinceRegex;
    public static Regex AroundRegex;
    public static Regex EqualRegex;
    public static Regex FromToRegex;
    public static Regex SingleAmbiguousMonthRegex;
    public static Regex PrepositionSuffixRegex;
    public static Regex AmbiguousRangeModifierPrefix;
    public static Regex NumberEndingPattern;
    public static Regex SuffixAfterRegex;
    public static Regex UnspecificDatePeriodRegex;
    public static Regex FailFastRegex;
    public static Regex YearRegex;
    public static Regex[] TermFilterRegexes;
    public static StringMatcher SuperfluousWordMatcher;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SetExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeZoneExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeListExtractor <DateTimeAltExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeMentionFilters>k__BackingField;
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor SetExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeZoneExtractor TimeZoneExtractor { get; }
    public IDateTimeListExtractor DateTimeAltExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SinceRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AroundRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.EqualRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.FromToRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SingleAmbiguousMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PrepositionSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AmbiguousRangeModifierPrefix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PotentialAmbiguousRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.NumberEndingPattern { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuffixAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificTimePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.FailFastRegex { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.TermFilterRegexes { get; }
    private StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.CheckBothBeforeAfter { get; }
    public Regex TasksModeMentionFilters { get; }
    public HindiMergedExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static HindiMergedExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SetExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeZoneExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeListExtractor get_DateTimeAltExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SinceRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AroundRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_EqualRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_FromToRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SingleAmbiguousMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PrepositionSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AmbiguousRangeModifierPrefix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PotentialAmbiguousRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_NumberEndingPattern();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuffixAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificTimePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_FailFastRegex();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_TermFilterRegexes();
    private sealed virtual override StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeMentionFilters();
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiMergedParserConfiguration : HindiCommonDateTimeParserConfiguration {
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SinceRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AroundRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EqualRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <SetParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <SuperfluousWordMatcher>k__BackingField;
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex SinceRegex { get; }
    public Regex AroundRegex { get; }
    public Regex EqualRegex { get; }
    public Regex SuffixAfter { get; }
    public Regex YearRegex { get; }
    public IDateTimeParser SetParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public StringMatcher SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.CheckBothBeforeAfter { get; }
    public HindiMergedParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SinceRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AroundRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EqualRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_SetParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.get_CheckBothBeforeAfter();
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiSetExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex SetUnitRegex;
    public static Regex PeriodicRegex;
    public static Regex EachUnitRegex;
    public static Regex EachPrefixRegex;
    public static Regex SetLastRegex;
    public static Regex EachDayRegex;
    public static Regex SetWeekDayRegex;
    public static Regex SetEachRegex;
    private static RegexOptions RegexFlags;
    private static Regex EachDayRegexPrefix;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.LastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.PeriodicRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.BeforeEachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetWeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetEachRegex { get; }
    public HindiSetExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static HindiSetExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_LastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_PeriodicRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_BeforeEachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetWeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetEachRegex();
    public sealed virtual Tuple`2<string, int> WeekDayGroupMatchTuple(Match match);
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiSetParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex DateUnitRegex;
    private static List`1<string> ThisTerms;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodicRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetEachRegex>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex EachPrefixRegex { get; }
    public Regex PeriodicRegex { get; }
    public Regex EachUnitRegex { get; }
    public Regex EachDayRegex { get; }
    public Regex SetWeekDayRegex { get; }
    public Regex SetEachRegex { get; }
    public HindiSetParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static HindiSetParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodicRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetEachRegex();
    public sealed virtual bool GetMatchedDailyTimex(string text, String& timex);
    public sealed virtual bool GetMatchedUnitTimex(string text, String& timex);
    public sealed virtual string WeekDayGroupMatchString(Match match);
    public sealed virtual string ReplaceValueInTextWithFutTerm(string text, string value);
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DescRegex;
    public static Regex HourNumRegex;
    public static Regex MinuteNumRegex;
    public static Regex OclockRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex LessThanOneHour;
    public static Regex WrittenTimeRegex;
    public static Regex TimePrefix;
    public static Regex TimeSuffix;
    public static Regex BasicTime;
    public static Regex MidnightRegex;
    public static Regex MidmorningRegex;
    public static Regex MidafternoonRegex;
    public static Regex MiddayRegex;
    public static Regex MidTimeRegex;
    public static Regex AtRegex;
    public static Regex IshRegex;
    public static Regex TimeUnitRegex;
    public static Regex ConnectNumRegex;
    public static Regex TimeBeforeAfterRegex;
    public static Regex[] TimeRegexList;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.AtRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.IshRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeBeforeAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public string TimeTokenPrefix { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public HindiTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static HindiTimeExtractorConfiguration();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_AtRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_IshRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeBeforeAfterRegex();
    [CompilerGeneratedAttribute]
public IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    public sealed virtual string get_TimeTokenPrefix();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex TimeSuffixFull;
    private static Regex LunchRegex;
    private static Regex NightRegex;
    private static Regex HalfTokenRegex;
    private static Regex QuarterTokenRegex;
    private static Regex ThreeQuarterTokenRegex;
    private static Regex ToTokenRegex;
    [CompilerGeneratedAttribute]
private string <TimeTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AtRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MealTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <TimeRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    public string TimeTokenPrefix { get; }
    public Regex AtRegex { get; }
    public Regex MealTimeRegex { get; }
    public IEnumerable`1<Regex> TimeRegexes { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public HindiTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static HindiTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TimeTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AtRegex();
    [CompilerGeneratedAttribute]
public Regex get_MealTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_TimeRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    public sealed virtual void AdjustByPrefix(string prefix, Int32& hour, Int32& min, Boolean& hasMin);
    public sealed virtual void AdjustBySuffix(string suffix, Int32& hour, Int32& min, Boolean& hasMin, Boolean& hasAm, Boolean& hasPm);
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex HourRegex;
    public static Regex PeriodHourNumRegex;
    public static Regex PeriodDescRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex PureNumFromTo;
    public static Regex PureNumBetweenAnd;
    public static Regex SpecificTimeFromTo;
    public static Regex SpecificTimeBetweenAnd;
    public static Regex PrepositionRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeUnitRegex;
    public static Regex TimeFollowedUnit;
    public static Regex TimeNumberCombinedWithUnit;
    public static Regex GeneralEndingRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromRegex;
    private static Regex BetweenRegex;
    private static Regex RangeConnectorRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    public string TokenBeforeDate { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public IEnumerable`1<Regex> PureNumberRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    public HindiTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static HindiTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual IEnumerable`1<Regex> get_PureNumberRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool IsConnectorToken(string text);
    public sealed virtual List`1<ExtractResult> ApplyPotentialPeriodAmbiguityHotfix(string text, List`1<ExtractResult> timePeriodErs);
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex PluralTokenRegex;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <GeneralEndingRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TillRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex SpecificTimeFromToRegex { get; }
    public Regex SpecificTimeBetweenAndRegex { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex GeneralEndingRegex { get; }
    public Regex TillRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public HindiTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static HindiTimePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_GeneralEndingRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TillRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual bool GetMatchedTimeRange(string text, String& timex, Int32& beginHour, Int32& endHour, Int32& endMin);
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.HindiTimeZoneParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static string TimeZoneEndRegex;
    public static Dictionary`2<string, int> FullToMinMapping;
    public static Regex DirectUtcRegex;
    public static Dictionary`2<string, int> AbbrToMinMapping;
    private string Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.TimeZoneEndRegex { get; }
    private Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.FullToMinMapping { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.DirectUtcRegex { get; }
    private Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.AbbrToMinMapping { get; }
    public HindiTimeZoneParserConfiguration(IDateTimeOptionsConfiguration config);
    private static HindiTimeZoneParserConfiguration();
    private sealed virtual override string Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_TimeZoneEndRegex();
    private sealed virtual override Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_FullToMinMapping();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_DirectUtcRegex();
    private sealed virtual override Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_AbbrToMinMapping();
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.TimeParser : BaseTimeParser {
    public TimeParser(ITimeParserConfiguration configuration);
    protected virtual DateTimeResolutionResult InternalParse(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseIsh(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.Hindi.Utilities.HindiDatetimeUtilityConfiguration : BaseDatetimeUtilityConfiguration {
}
internal static class Microsoft.Recognizers.Text.DateTime.HolidayFunctions : object {
    private static IDictionary`2<int, IEnumerable`1<int>> HoliDiwaliRakshabandhanBaisakhiDates;
    private static HolidayFunctions();
    public static DateTime CalculateHolidayByEaster(int year, int days);
    public static DateTime CalculateAdventDate(int year, int days);
    public static DateTime CalculateHoliDiwaliDate(int year, bool isHoli);
    public static DateTime CalculateRakshaBandhanVaishakhiDate(int year, bool isRakshabandhan);
    public static DateTime IslamicHoliday(int year, IslamicHolidayType holidayType);
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKCommonDateTimeParserConfiguration {
    public IExtractor CardinalExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeExtractor SetExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IDateTimeParser SetParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public IDateTimeParser DateTimeAltParser { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; }
    public IImmutableDictionary`2<string, string> SpecialYearPrefixesMap { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, double> DoubleNumbers { get; }
    public IImmutableDictionary`2<string, int> WrittenDecades { get; }
    public IImmutableDictionary`2<string, int> SpecialDecadeCases { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public abstract virtual IExtractor get_CardinalExtractor();
    public abstract virtual IExtractor get_IntegerExtractor();
    public abstract virtual IExtractor get_OrdinalExtractor();
    public abstract virtual IParser get_NumberParser();
    public abstract virtual IDateTimeExtractor get_DateExtractor();
    public abstract virtual IDateTimeExtractor get_TimeExtractor();
    public abstract virtual IDateTimeExtractor get_DateTimeExtractor();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IDateTimeExtractor get_DatePeriodExtractor();
    public abstract virtual IDateTimeExtractor get_TimePeriodExtractor();
    public abstract virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    public abstract virtual IDateTimeExtractor get_SetExtractor();
    public abstract virtual IDateTimeExtractor get_HolidayExtractor();
    public abstract virtual IDateTimeParser get_DateParser();
    public abstract virtual IDateTimeParser get_TimeParser();
    public abstract virtual IDateTimeParser get_DateTimeParser();
    public abstract virtual IDateTimeParser get_DurationParser();
    public abstract virtual IDateTimeParser get_DatePeriodParser();
    public abstract virtual IDateTimeParser get_TimePeriodParser();
    public abstract virtual IDateTimeParser get_DateTimePeriodParser();
    public abstract virtual IDateTimeParser get_SetParser();
    public abstract virtual IDateTimeParser get_HolidayParser();
    public abstract virtual IDateTimeParser get_DateTimeAltParser();
    public abstract virtual IDateTimeParser get_TimeZoneParser();
    public abstract virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    public abstract virtual IImmutableDictionary`2<string, int> get_Numbers();
    public abstract virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    public abstract virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    public abstract virtual IImmutableDictionary`2<string, string> get_SpecialYearPrefixesMap();
    public abstract virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public abstract virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    public abstract virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    public abstract virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    public abstract virtual IImmutableDictionary`2<string, double> get_DoubleNumbers();
    public abstract virtual IImmutableDictionary`2<string, int> get_WrittenDecades();
    public abstract virtual IImmutableDictionary`2<string, int> get_SpecialDecadeCases();
    public abstract virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration {
    public IEnumerable`1<Regex> DateRegexList { get; }
    public IEnumerable`1<Regex> ImplicitDateList { get; }
    public Regex DateTimePeriodUnitRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex WeekDayStartEnd { get; }
    public Regex RangeConnectorSymbolRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public Dictionary`2<Regex, Regex> AmbiguityDateFiltersDict { get; }
    public abstract virtual IEnumerable`1<Regex> get_DateRegexList();
    public abstract virtual IEnumerable`1<Regex> get_ImplicitDateList();
    public abstract virtual Regex get_DateTimePeriodUnitRegex();
    public abstract virtual Regex get_BeforeRegex();
    public abstract virtual Regex get_AfterRegex();
    public abstract virtual Regex get_WeekDayStartEnd();
    public abstract virtual Regex get_RangeConnectorSymbolRegex();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual Dictionary`2<Regex, Regex> get_AmbiguityDateFiltersDict();
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration {
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeExtractor DateExtractor { get; }
    public IEnumerable`1<Regex> DateRegexList { get; }
    public Regex SpecialDate { get; }
    public Regex NextRe { get; }
    public Regex LastRe { get; }
    public Regex SpecialDayRegex { get; }
    public Regex StrictWeekDayRegex { get; }
    public Regex SpecialDayWithNumRegex { get; }
    public Regex LunarRegex { get; }
    public Regex UnitRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex DynastyYearRegex { get; }
    public ImmutableDictionary`2<string, int> DynastyYearMap { get; }
    public string DynastyStartYear { get; }
    public Regex NextRegex { get; }
    public Regex ThisRegex { get; }
    public Regex LastRegex { get; }
    public Regex WeekDayOfMonthRegex { get; }
    public Regex WeekDayAndDayRegex { get; }
    public Regex DurationRelativeDurationUnitRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public Regex LastWeekDayRegex { get; }
    public Regex NextMonthRegex { get; }
    public Regex LastMonthRegex { get; }
    public abstract virtual IExtractor get_IntegerExtractor();
    public abstract virtual IExtractor get_OrdinalExtractor();
    public abstract virtual IParser get_NumberParser();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IDateTimeParser get_DurationParser();
    public abstract virtual IDateTimeExtractor get_DateExtractor();
    public abstract virtual IEnumerable`1<Regex> get_DateRegexList();
    public abstract virtual Regex get_SpecialDate();
    public abstract virtual Regex get_NextRe();
    public abstract virtual Regex get_LastRe();
    public abstract virtual Regex get_SpecialDayRegex();
    public abstract virtual Regex get_StrictWeekDayRegex();
    public abstract virtual Regex get_SpecialDayWithNumRegex();
    public abstract virtual Regex get_LunarRegex();
    public abstract virtual Regex get_UnitRegex();
    public abstract virtual Regex get_BeforeRegex();
    public abstract virtual Regex get_AfterRegex();
    public abstract virtual Regex get_DynastyYearRegex();
    public abstract virtual ImmutableDictionary`2<string, int> get_DynastyYearMap();
    public abstract virtual string get_DynastyStartYear();
    public abstract virtual Regex get_NextRegex();
    public abstract virtual Regex get_ThisRegex();
    public abstract virtual Regex get_LastRegex();
    public abstract virtual Regex get_WeekDayOfMonthRegex();
    public abstract virtual Regex get_WeekDayAndDayRegex();
    public abstract virtual Regex get_DurationRelativeDurationUnitRegex();
    public abstract virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public abstract virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    public abstract virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    public abstract virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    public abstract virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    public abstract virtual Regex get_LastWeekDayRegex();
    public abstract virtual Regex get_NextMonthRegex();
    public abstract virtual Regex get_LastMonthRegex();
    public abstract virtual int GetSwiftDay(string text);
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration {
    public IEnumerable`1<Regex> SimpleCasesRegexes { get; }
    public Regex TillRegex { get; }
    public Regex DateUnitRegex { get; }
    public Regex RangePrefixRegex { get; }
    public Regex RangeSuffixRegex { get; }
    public Regex FutureRegex { get; }
    public Regex PastRegex { get; }
    public Regex FirstLastOfYearRegex { get; }
    public Regex UnitRegex { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex FollowedUnit { get; }
    public IDateTimeExtractor DatePointExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public abstract virtual IEnumerable`1<Regex> get_SimpleCasesRegexes();
    public abstract virtual Regex get_TillRegex();
    public abstract virtual Regex get_DateUnitRegex();
    public abstract virtual Regex get_RangePrefixRegex();
    public abstract virtual Regex get_RangeSuffixRegex();
    public abstract virtual Regex get_FutureRegex();
    public abstract virtual Regex get_PastRegex();
    public abstract virtual Regex get_FirstLastOfYearRegex();
    public abstract virtual Regex get_UnitRegex();
    public abstract virtual Regex get_NumberCombinedWithUnit();
    public abstract virtual Regex get_FollowedUnit();
    public abstract virtual IDateTimeExtractor get_DatePointExtractor();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IExtractor get_IntegerExtractor();
    public abstract virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration {
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser DateParser { get; }
    public ImmutableDictionary`2<string, int> DynastyYearMap { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; }
    public string DynastyStartYear { get; }
    public string TokenBeforeDate { get; }
    public int TwoNumYear { get; }
    public Regex SimpleCasesRegex { get; }
    public Regex DynastyYearRegex { get; }
    public Regex YearRegex { get; }
    public Regex RelativeRegex { get; }
    public Regex RelativeMonthRegex { get; }
    public Regex DurationRelativeDurationUnitRegex { get; }
    public Regex ThisRegex { get; }
    public Regex LastRegex { get; }
    public Regex NextRegex { get; }
    public Regex YearToYear { get; }
    public Regex YearToYearSuffixRequired { get; }
    public Regex YearInCJKRegex { get; }
    public Regex MonthToMonth { get; }
    public Regex MonthToMonthSuffixRequired { get; }
    public Regex MonthRegex { get; }
    public Regex YearAndMonth { get; }
    public Regex PureNumYearAndMonth { get; }
    public Regex OneWordPeriodRegex { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex WeekWithWeekDayRangeRegex { get; }
    public Regex UnitRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex WeekOfMonthRegex { get; }
    public Regex WeekOfYearRegex { get; }
    public Regex WeekOfDateRegex { get; }
    public Regex MonthOfDateRegex { get; }
    public Regex WhichWeekRegex { get; }
    public Regex FirstLastOfYearRegex { get; }
    public Regex SeasonWithYear { get; }
    public Regex QuarterRegex { get; }
    public Regex DecadeRegex { get; }
    public Regex CenturyRegex { get; }
    public Regex DayToDay { get; }
    public Regex MonthDayRange { get; }
    public Regex DayRegexForPeriod { get; }
    public Regex SimpleYearAndMonth { get; }
    public Regex SpecialMonthRegex { get; }
    public Regex SpecialYearRegex { get; }
    public Regex LaterEarlyPeriodRegex { get; }
    public Regex DatePointWithAgoAndLater { get; }
    public Regex ReferenceDatePeriodRegex { get; }
    public Regex WoMLastRegex { get; }
    public Regex WoMPreviousRegex { get; }
    public Regex WoMNextRegex { get; }
    public Regex ComplexDatePeriodRegex { get; }
    public abstract virtual IExtractor get_IntegerExtractor();
    public abstract virtual IParser get_NumberParser();
    public abstract virtual IDateTimeExtractor get_DateExtractor();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IExtractor get_CardinalExtractor();
    public abstract virtual IDateTimeParser get_DurationParser();
    public abstract virtual IDateTimeParser get_DateParser();
    public abstract virtual ImmutableDictionary`2<string, int> get_DynastyYearMap();
    public abstract virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public abstract virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    public abstract virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    public abstract virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    public abstract virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    public abstract virtual string get_DynastyStartYear();
    public abstract virtual string get_TokenBeforeDate();
    public abstract virtual int get_TwoNumYear();
    public abstract virtual Regex get_SimpleCasesRegex();
    public abstract virtual Regex get_DynastyYearRegex();
    public abstract virtual Regex get_YearRegex();
    public abstract virtual Regex get_RelativeRegex();
    public abstract virtual Regex get_RelativeMonthRegex();
    public abstract virtual Regex get_DurationRelativeDurationUnitRegex();
    public abstract virtual Regex get_ThisRegex();
    public abstract virtual Regex get_LastRegex();
    public abstract virtual Regex get_NextRegex();
    public abstract virtual Regex get_YearToYear();
    public abstract virtual Regex get_YearToYearSuffixRequired();
    public abstract virtual Regex get_YearInCJKRegex();
    public abstract virtual Regex get_MonthToMonth();
    public abstract virtual Regex get_MonthToMonthSuffixRequired();
    public abstract virtual Regex get_MonthRegex();
    public abstract virtual Regex get_YearAndMonth();
    public abstract virtual Regex get_PureNumYearAndMonth();
    public abstract virtual Regex get_OneWordPeriodRegex();
    public abstract virtual Regex get_NumberCombinedWithUnit();
    public abstract virtual Regex get_PastRegex();
    public abstract virtual Regex get_FutureRegex();
    public abstract virtual Regex get_WeekWithWeekDayRangeRegex();
    public abstract virtual Regex get_UnitRegex();
    public abstract virtual Regex get_DurationUnitRegex();
    public abstract virtual Regex get_WeekOfMonthRegex();
    public abstract virtual Regex get_WeekOfYearRegex();
    public abstract virtual Regex get_WeekOfDateRegex();
    public abstract virtual Regex get_MonthOfDateRegex();
    public abstract virtual Regex get_WhichWeekRegex();
    public abstract virtual Regex get_FirstLastOfYearRegex();
    public abstract virtual Regex get_SeasonWithYear();
    public abstract virtual Regex get_QuarterRegex();
    public abstract virtual Regex get_DecadeRegex();
    public abstract virtual Regex get_CenturyRegex();
    public abstract virtual Regex get_DayToDay();
    public abstract virtual Regex get_MonthDayRange();
    public abstract virtual Regex get_DayRegexForPeriod();
    public abstract virtual Regex get_SimpleYearAndMonth();
    public abstract virtual Regex get_SpecialMonthRegex();
    public abstract virtual Regex get_SpecialYearRegex();
    public abstract virtual Regex get_LaterEarlyPeriodRegex();
    public abstract virtual Regex get_DatePointWithAgoAndLater();
    public abstract virtual Regex get_ReferenceDatePeriodRegex();
    public abstract virtual Regex get_WoMLastRegex();
    public abstract virtual Regex get_WoMPreviousRegex();
    public abstract virtual Regex get_WoMNextRegex();
    public abstract virtual Regex get_ComplexDatePeriodRegex();
    public abstract virtual int ToMonthNumber(string monthStr);
    public abstract virtual bool IsMonthOnly(string text);
    public abstract virtual bool IsWeekend(string text);
    public abstract virtual bool IsWeekOnly(string text);
    public abstract virtual bool IsYearOnly(string text);
    public abstract virtual bool IsThisYear(string text);
    public abstract virtual bool IsYearToDate(string text);
    public abstract virtual bool IsLastYear(string text);
    public abstract virtual bool IsNextYear(string text);
    public abstract virtual bool IsYearAfterNext(string text);
    public abstract virtual bool IsYearBeforeLast(string text);
    public abstract virtual int GetSwiftMonth(string text);
    public abstract virtual int GetSwiftYear(string text);
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration {
    public Regex NowRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex NightRegex { get; }
    public Regex TimeOfSpecialDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex ConnectorRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor DatePointExtractor { get; }
    public IDateTimeExtractor TimePointExtractor { get; }
    public Dictionary`2<Regex, Regex> AmbiguityDateTimeFiltersDict { get; }
    public abstract virtual Regex get_NowRegex();
    public abstract virtual Regex get_PrepositionRegex();
    public abstract virtual Regex get_NightRegex();
    public abstract virtual Regex get_TimeOfSpecialDayRegex();
    public abstract virtual Regex get_TimeOfDayRegex();
    public abstract virtual Regex get_BeforeRegex();
    public abstract virtual Regex get_AfterRegex();
    public abstract virtual Regex get_ConnectorRegex();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IDateTimeExtractor get_DatePointExtractor();
    public abstract virtual IDateTimeExtractor get_TimePointExtractor();
    public abstract virtual Dictionary`2<Regex, Regex> get_AmbiguityDateTimeFiltersDict();
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration {
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public Regex NowRegex { get; }
    public Regex LunarRegex { get; }
    public Regex LunarHolidayRegex { get; }
    public Regex SimplePmRegex { get; }
    public Regex SimpleAmRegex { get; }
    public Regex TimeOfSpecialDayRegex { get; }
    public Regex DateTimePeriodUnitRegex { get; }
    public Regex DurationRelativeDurationUnitRegex { get; }
    public Regex AgoLaterRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public ImmutableDictionary`2<string, string> UnitMap { get; }
    public abstract virtual IDateTimeExtractor get_DateExtractor();
    public abstract virtual IDateTimeExtractor get_TimeExtractor();
    public abstract virtual IDateTimeParser get_DateParser();
    public abstract virtual IDateTimeParser get_DurationParser();
    public abstract virtual IDateTimeParser get_TimeParser();
    public abstract virtual IExtractor get_IntegerExtractor();
    public abstract virtual IParser get_NumberParser();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual Regex get_NowRegex();
    public abstract virtual Regex get_LunarRegex();
    public abstract virtual Regex get_LunarHolidayRegex();
    public abstract virtual Regex get_SimplePmRegex();
    public abstract virtual Regex get_SimpleAmRegex();
    public abstract virtual Regex get_TimeOfSpecialDayRegex();
    public abstract virtual Regex get_DateTimePeriodUnitRegex();
    public abstract virtual Regex get_DurationRelativeDurationUnitRegex();
    public abstract virtual Regex get_AgoLaterRegex();
    public abstract virtual Regex get_BeforeRegex();
    public abstract virtual Regex get_AfterRegex();
    public abstract virtual ImmutableDictionary`2<string, string> get_UnitMap();
    public abstract virtual bool GetMatchedNowTimex(string text, String& timex);
    public abstract virtual int GetSwiftDay(string text);
    public abstract virtual void AdjustByTimeOfDay(string matchStr, Int32& hour, Int32& swift);
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration {
    public Regex PrepositionRegex { get; }
    public Regex TillRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex FollowedUnit { get; }
    public Regex UnitRegex { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex TimePeriodLeftRegex { get; }
    public Regex RelativeRegex { get; }
    public Regex RestOfDateRegex { get; }
    public Regex AmPmDescRegex { get; }
    public Regex ThisRegex { get; }
    public Regex BeforeAfterRegex { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor SingleDateExtractor { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor SingleDateTimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public abstract virtual Regex get_PrepositionRegex();
    public abstract virtual Regex get_TillRegex();
    public abstract virtual Regex get_SpecificTimeOfDayRegex();
    public abstract virtual Regex get_TimeOfDayRegex();
    public abstract virtual Regex get_FollowedUnit();
    public abstract virtual Regex get_UnitRegex();
    public abstract virtual Regex get_PastRegex();
    public abstract virtual Regex get_FutureRegex();
    public abstract virtual Regex get_TimePeriodLeftRegex();
    public abstract virtual Regex get_RelativeRegex();
    public abstract virtual Regex get_RestOfDateRegex();
    public abstract virtual Regex get_AmPmDescRegex();
    public abstract virtual Regex get_ThisRegex();
    public abstract virtual Regex get_BeforeAfterRegex();
    public abstract virtual IExtractor get_CardinalExtractor();
    public abstract virtual IDateTimeExtractor get_SingleDateExtractor();
    public abstract virtual IDateTimeExtractor get_SingleTimeExtractor();
    public abstract virtual IDateTimeExtractor get_SingleDateTimeExtractor();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IDateTimeExtractor get_TimePeriodExtractor();
    public abstract virtual bool GetFromTokenIndex(string text, Int32& index);
    public abstract virtual bool HasConnectorToken(string text);
    public abstract virtual bool GetBetweenTokenIndex(string text, Int32& index);
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodParserConfiguration {
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IExtractor CardinalExtractor { get; }
    public IParser CardinalParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex NextRegex { get; }
    public Regex LastRegex { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex TimePeriodLeftRegex { get; }
    public Regex UnitRegex { get; }
    public Regex RestOfDateRegex { get; }
    public Regex AmPmDescRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public abstract virtual IDateTimeExtractor get_DateExtractor();
    public abstract virtual IDateTimeExtractor get_TimeExtractor();
    public abstract virtual IDateTimeExtractor get_DateTimeExtractor();
    public abstract virtual IDateTimeExtractor get_TimePeriodExtractor();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IDateTimeParser get_DurationParser();
    public abstract virtual IExtractor get_CardinalExtractor();
    public abstract virtual IParser get_CardinalParser();
    public abstract virtual IDateTimeParser get_DateParser();
    public abstract virtual IDateTimeParser get_TimeParser();
    public abstract virtual IDateTimeParser get_DateTimeParser();
    public abstract virtual IDateTimeParser get_TimePeriodParser();
    public abstract virtual Regex get_SpecificTimeOfDayRegex();
    public abstract virtual Regex get_TimeOfDayRegex();
    public abstract virtual Regex get_NextRegex();
    public abstract virtual Regex get_LastRegex();
    public abstract virtual Regex get_PastRegex();
    public abstract virtual Regex get_FutureRegex();
    public abstract virtual Regex get_WeekDayRegex();
    public abstract virtual Regex get_TimePeriodLeftRegex();
    public abstract virtual Regex get_UnitRegex();
    public abstract virtual Regex get_RestOfDateRegex();
    public abstract virtual Regex get_AmPmDescRegex();
    public abstract virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public abstract virtual bool GetMatchedTimeRange(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMinute);
    public abstract virtual bool GetMatchedTimeRangeAndSwift(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMinute, Int32& swift);
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration {
    public Regex DurationUnitRegex { get; }
    public Regex DurationConnectorRegex { get; }
    public Regex YearRegex { get; }
    public Regex AllRegex { get; }
    public Regex HalfRegex { get; }
    public Regex RelativeDurationUnitRegex { get; }
    public Regex DuringRegex { get; }
    public Regex SomeRegex { get; }
    public Regex MoreOrLessRegex { get; }
    public IExtractor InternalExtractor { get; }
    public Dictionary`2<string, string> UnitMap { get; }
    public Dictionary`2<string, long> UnitValueMap { get; }
    public Dictionary`2<Regex, Regex> AmbiguityDurationFiltersDict { get; }
    public abstract virtual Regex get_DurationUnitRegex();
    public abstract virtual Regex get_DurationConnectorRegex();
    public abstract virtual Regex get_YearRegex();
    public abstract virtual Regex get_AllRegex();
    public abstract virtual Regex get_HalfRegex();
    public abstract virtual Regex get_RelativeDurationUnitRegex();
    public abstract virtual Regex get_DuringRegex();
    public abstract virtual Regex get_SomeRegex();
    public abstract virtual Regex get_MoreOrLessRegex();
    public abstract virtual IExtractor get_InternalExtractor();
    public abstract virtual Dictionary`2<string, string> get_UnitMap();
    public abstract virtual Dictionary`2<string, long> get_UnitValueMap();
    public abstract virtual Dictionary`2<Regex, Regex> get_AmbiguityDurationFiltersDict();
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKDurationParserConfiguration {
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser InternalParser { get; }
    public Regex YearRegex { get; }
    public Regex SomeRegex { get; }
    public Regex MoreOrLessRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex AnUnitRegex { get; }
    public Regex DurationConnectorRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IParser get_InternalParser();
    public abstract virtual Regex get_YearRegex();
    public abstract virtual Regex get_SomeRegex();
    public abstract virtual Regex get_MoreOrLessRegex();
    public abstract virtual Regex get_DurationUnitRegex();
    public abstract virtual Regex get_AnUnitRegex();
    public abstract virtual Regex get_DurationConnectorRegex();
    public abstract virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public abstract virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKHolidayExtractorConfiguration {
    public IEnumerable`1<Regex> HolidayRegexes { get; }
    public abstract virtual IEnumerable`1<Regex> get_HolidayRegexes();
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration {
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public Dictionary`2<string, Func`2<int, DateTime>> FixedHolidaysDict { get; }
    public Dictionary`2<string, Func`2<int, DateTime>> HolidayFuncDict { get; }
    public Dictionary`2<string, string> NoFixedTimex { get; }
    public IEnumerable`1<Regex> HolidayRegexList { get; }
    public Regex LunarHolidayRegex { get; }
    public abstract virtual IExtractor get_IntegerExtractor();
    public abstract virtual IParser get_NumberParser();
    public abstract virtual Dictionary`2<string, Func`2<int, DateTime>> get_FixedHolidaysDict();
    public abstract virtual Dictionary`2<string, Func`2<int, DateTime>> get_HolidayFuncDict();
    public abstract virtual Dictionary`2<string, string> get_NoFixedTimex();
    public abstract virtual IEnumerable`1<Regex> get_HolidayRegexList();
    public abstract virtual Regex get_LunarHolidayRegex();
    public abstract virtual int GetSwiftYear(string text);
    public abstract virtual string SanitizeYearToken(string holiday);
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration {
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor SetExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public Regex AfterRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex UnspecificDatePeriodRegex { get; }
    public Regex SinceSuffixRegex { get; }
    public Regex SincePrefixRegex { get; }
    public Regex AroundSuffixRegex { get; }
    public Regex AroundPrefixRegex { get; }
    public Regex UntilRegex { get; }
    public Regex EqualRegex { get; }
    public Regex PotentialAmbiguousRangeRegex { get; }
    public Regex AmbiguousRangeModifierPrefix { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public abstract virtual IDateTimeExtractor get_DateExtractor();
    public abstract virtual IDateTimeExtractor get_TimeExtractor();
    public abstract virtual IDateTimeExtractor get_DateTimeExtractor();
    public abstract virtual IDateTimeExtractor get_DatePeriodExtractor();
    public abstract virtual IDateTimeExtractor get_TimePeriodExtractor();
    public abstract virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IDateTimeExtractor get_SetExtractor();
    public abstract virtual IDateTimeExtractor get_HolidayExtractor();
    public abstract virtual Regex get_AfterRegex();
    public abstract virtual Regex get_BeforeRegex();
    public abstract virtual Regex get_UnspecificDatePeriodRegex();
    public abstract virtual Regex get_SinceSuffixRegex();
    public abstract virtual Regex get_SincePrefixRegex();
    public abstract virtual Regex get_AroundSuffixRegex();
    public abstract virtual Regex get_AroundPrefixRegex();
    public abstract virtual Regex get_UntilRegex();
    public abstract virtual Regex get_EqualRegex();
    public abstract virtual Regex get_PotentialAmbiguousRangeRegex();
    public abstract virtual Regex get_AmbiguousRangeModifierPrefix();
    public abstract virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKMergedParserConfiguration {
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex SincePrefixRegex { get; }
    public Regex SinceSuffixRegex { get; }
    public Regex UntilRegex { get; }
    public Regex EqualRegex { get; }
    public Regex AroundPrefixRegex { get; }
    public Regex AroundSuffixRegex { get; }
    public abstract virtual Regex get_BeforeRegex();
    public abstract virtual Regex get_AfterRegex();
    public abstract virtual Regex get_SincePrefixRegex();
    public abstract virtual Regex get_SinceSuffixRegex();
    public abstract virtual Regex get_UntilRegex();
    public abstract virtual Regex get_EqualRegex();
    public abstract virtual Regex get_AroundPrefixRegex();
    public abstract virtual Regex get_AroundSuffixRegex();
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration {
    public Regex LastRegex { get; }
    public Regex EachPrefixRegex { get; }
    public Regex EachSuffixRegex { get; }
    public Regex EachUnitRegex { get; }
    public Regex UnitRegex { get; }
    public Regex EachDayRegex { get; }
    public Regex EachDateUnitRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public abstract virtual Regex get_LastRegex();
    public abstract virtual Regex get_EachPrefixRegex();
    public abstract virtual Regex get_EachSuffixRegex();
    public abstract virtual Regex get_EachUnitRegex();
    public abstract virtual Regex get_UnitRegex();
    public abstract virtual Regex get_EachDayRegex();
    public abstract virtual Regex get_EachDateUnitRegex();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IDateTimeExtractor get_TimeExtractor();
    public abstract virtual IDateTimeExtractor get_DateExtractor();
    public abstract virtual IDateTimeExtractor get_DateTimeExtractor();
    public abstract virtual IDateTimeExtractor get_DatePeriodExtractor();
    public abstract virtual IDateTimeExtractor get_TimePeriodExtractor();
    public abstract virtual IDateTimeExtractor get_DateTimePeriodExtractor();
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKSetParserConfiguration {
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex EachPrefixRegex { get; }
    public Regex EachUnitRegex { get; }
    public Regex EachDayRegex { get; }
    public Regex EachDateUnitRegex { get; }
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IDateTimeParser get_DurationParser();
    public abstract virtual IDateTimeExtractor get_TimeExtractor();
    public abstract virtual IDateTimeParser get_TimeParser();
    public abstract virtual IDateTimeExtractor get_TimePeriodExtractor();
    public abstract virtual IDateTimeParser get_TimePeriodParser();
    public abstract virtual IDateTimeExtractor get_DateExtractor();
    public abstract virtual IDateTimeParser get_DateParser();
    public abstract virtual IDateTimeExtractor get_DateTimeExtractor();
    public abstract virtual IDateTimeParser get_DateTimeParser();
    public abstract virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public abstract virtual Regex get_EachPrefixRegex();
    public abstract virtual Regex get_EachUnitRegex();
    public abstract virtual Regex get_EachDayRegex();
    public abstract virtual Regex get_EachDateUnitRegex();
    public abstract virtual bool GetMatchedUnitTimex(string text, String& timex);
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKTimeExtractorConfiguration {
    public ImmutableDictionary`2<Regex, TimeType> Regexes { get; }
    public Dictionary`2<Regex, Regex> AmbiguityTimeFiltersDict { get; }
    public abstract virtual ImmutableDictionary`2<Regex, TimeType> get_Regexes();
    public abstract virtual Dictionary`2<Regex, Regex> get_AmbiguityTimeFiltersDict();
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKTimeParserConfiguration {
    public IDateTimeExtractor TimeExtractor { get; }
    public TimeFunctions TimeFunc { get; }
    public Dictionary`2<TimeType, TimeFunction> FunctionMap { get; }
    public abstract virtual IDateTimeExtractor get_TimeExtractor();
    public abstract virtual TimeFunctions get_TimeFunc();
    public abstract virtual Dictionary`2<TimeType, TimeFunction> get_FunctionMap();
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKTimePeriodExtractorConfiguration {
    public ImmutableDictionary`2<Regex, PeriodType> Regexes { get; }
    public Dictionary`2<Regex, Regex> AmbiguityTimePeriodFiltersDict { get; }
    public abstract virtual ImmutableDictionary`2<Regex, PeriodType> get_Regexes();
    public abstract virtual Dictionary`2<Regex, Regex> get_AmbiguityTimePeriodFiltersDict();
}
public interface Microsoft.Recognizers.Text.DateTime.ICJKTimePeriodParserConfiguration {
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public TimeFunctions TimeFunc { get; }
    public abstract virtual IDateTimeExtractor get_TimeExtractor();
    public abstract virtual IDateTimeParser get_TimeParser();
    public abstract virtual TimeFunctions get_TimeFunc();
    public abstract virtual bool GetMatchedTimexRange(string text, String& timex, Int32& beginHour, Int32& endHour, Int32& endMin);
}
public interface Microsoft.Recognizers.Text.DateTime.ICommonDateTimeParserConfiguration {
    public IExtractor CardinalExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IDateTimeParser DateTimeAltParser { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; }
    public IImmutableDictionary`2<string, string> SpecialYearPrefixesMap { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, double> DoubleNumbers { get; }
    public IImmutableDictionary`2<string, int> WrittenDecades { get; }
    public IImmutableDictionary`2<string, int> SpecialDecadeCases { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public abstract virtual IExtractor get_CardinalExtractor();
    public abstract virtual IExtractor get_IntegerExtractor();
    public abstract virtual IExtractor get_OrdinalExtractor();
    public abstract virtual IParser get_NumberParser();
    public abstract virtual IDateExtractor get_DateExtractor();
    public abstract virtual IDateTimeExtractor get_TimeExtractor();
    public abstract virtual IDateTimeExtractor get_DateTimeExtractor();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IDateTimeExtractor get_DatePeriodExtractor();
    public abstract virtual IDateTimeExtractor get_TimePeriodExtractor();
    public abstract virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    public abstract virtual IDateTimeParser get_DateParser();
    public abstract virtual IDateTimeParser get_TimeParser();
    public abstract virtual IDateTimeParser get_DateTimeParser();
    public abstract virtual IDateTimeParser get_DurationParser();
    public abstract virtual IDateTimeParser get_DatePeriodParser();
    public abstract virtual IDateTimeParser get_TimePeriodParser();
    public abstract virtual IDateTimeParser get_DateTimePeriodParser();
    public abstract virtual IDateTimeParser get_DateTimeAltParser();
    public abstract virtual IDateTimeParser get_TimeZoneParser();
    public abstract virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    public abstract virtual IImmutableDictionary`2<string, int> get_Numbers();
    public abstract virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    public abstract virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    public abstract virtual IImmutableDictionary`2<string, string> get_SpecialYearPrefixesMap();
    public abstract virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public abstract virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    public abstract virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    public abstract virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    public abstract virtual IImmutableDictionary`2<string, double> get_DoubleNumbers();
    public abstract virtual IImmutableDictionary`2<string, int> get_WrittenDecades();
    public abstract virtual IImmutableDictionary`2<string, int> get_SpecialDecadeCases();
    public abstract virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public abstract virtual IDateTimeExtractor get_HolidayExtractor();
    public abstract virtual IDateTimeParser get_HolidayTimeParser();
}
public interface Microsoft.Recognizers.Text.DateTime.IDateExtractor {
    public abstract virtual int GetYearFromText(Match match);
}
public interface Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration {
    public IEnumerable`1<Regex> DateRegexList { get; }
    public IEnumerable`1<Regex> ImplicitDateList { get; }
    public bool CheckBothBeforeAfter { get; }
    public Regex OfMonth { get; }
    public Regex MonthEnd { get; }
    public Regex WeekDayEnd { get; }
    public Regex WeekDayStart { get; }
    public Regex DateUnitRegex { get; }
    public Regex ForTheRegex { get; }
    public Regex WeekDayAndDayOfMonthRegex { get; }
    public Regex WeekDayAndDayRegex { get; }
    public Regex RelativeMonthRegex { get; }
    public Regex StrictRelativeRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex PrefixArticleRegex { get; }
    public Regex YearSuffix { get; }
    public Regex MoreThanRegex { get; }
    public Regex LessThanRegex { get; }
    public Regex InConnectorRegex { get; }
    public Regex SinceYearSuffixRegex { get; }
    public Regex RangeUnitRegex { get; }
    public Regex RangeConnectorSymbolRegex { get; }
    public Regex BeforeAfterRegex { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public abstract virtual IEnumerable`1<Regex> get_DateRegexList();
    public abstract virtual IEnumerable`1<Regex> get_ImplicitDateList();
    public abstract virtual bool get_CheckBothBeforeAfter();
    public abstract virtual Regex get_OfMonth();
    public abstract virtual Regex get_MonthEnd();
    public abstract virtual Regex get_WeekDayEnd();
    public abstract virtual Regex get_WeekDayStart();
    public abstract virtual Regex get_DateUnitRegex();
    public abstract virtual Regex get_ForTheRegex();
    public abstract virtual Regex get_WeekDayAndDayOfMonthRegex();
    public abstract virtual Regex get_WeekDayAndDayRegex();
    public abstract virtual Regex get_RelativeMonthRegex();
    public abstract virtual Regex get_StrictRelativeRegex();
    public abstract virtual Regex get_WeekDayRegex();
    public abstract virtual Regex get_PrefixArticleRegex();
    public abstract virtual Regex get_YearSuffix();
    public abstract virtual Regex get_MoreThanRegex();
    public abstract virtual Regex get_LessThanRegex();
    public abstract virtual Regex get_InConnectorRegex();
    public abstract virtual Regex get_SinceYearSuffixRegex();
    public abstract virtual Regex get_RangeUnitRegex();
    public abstract virtual Regex get_RangeConnectorSymbolRegex();
    public abstract virtual Regex get_BeforeAfterRegex();
    public abstract virtual IExtractor get_IntegerExtractor();
    public abstract virtual IExtractor get_OrdinalExtractor();
    public abstract virtual IParser get_NumberParser();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IDateTimeExtractor get_HolidayExtractor();
    public abstract virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public abstract virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    public abstract virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
}
public interface Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration {
    public string DateTokenPrefix { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public IEnumerable`1<Regex> DateRegexes { get; }
    public Regex OnRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex SpecialDayWithNumRegex { get; }
    public Regex NextRegex { get; }
    public Regex ThisRegex { get; }
    public Regex LastRegex { get; }
    public Regex UnitRegex { get; }
    public Regex UpcomingPrefixRegex { get; }
    public Regex PastPrefixRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex MonthRegex { get; }
    public Regex WeekDayOfMonthRegex { get; }
    public Regex ForTheRegex { get; }
    public Regex WeekDayAndDayOfMothRegex { get; }
    public Regex WeekDayAndDayRegex { get; }
    public Regex RelativeMonthRegex { get; }
    public Regex StrictRelativeRegex { get; }
    public Regex YearSuffix { get; }
    public Regex RelativeWeekDayRegex { get; }
    public Regex RelativeDayRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex BeforeAfterRegex { get; }
    public Regex TasksModeDurationToDatePatterns { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableList`1<string> SameDayTerms { get; }
    public IImmutableList`1<string> PlusOneDayTerms { get; }
    public IImmutableList`1<string> MinusOneDayTerms { get; }
    public IImmutableList`1<string> PlusTwoDayTerms { get; }
    public IImmutableList`1<string> MinusTwoDayTerms { get; }
    public bool CheckBothBeforeAfter { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public abstract virtual string get_DateTokenPrefix();
    public abstract virtual IExtractor get_IntegerExtractor();
    public abstract virtual IExtractor get_OrdinalExtractor();
    public abstract virtual IExtractor get_CardinalExtractor();
    public abstract virtual IParser get_NumberParser();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IDateExtractor get_DateExtractor();
    public abstract virtual IDateTimeParser get_DurationParser();
    public abstract virtual IDateTimeParser get_HolidayParser();
    public abstract virtual IEnumerable`1<Regex> get_DateRegexes();
    public abstract virtual Regex get_OnRegex();
    public abstract virtual Regex get_SpecialDayRegex();
    public abstract virtual Regex get_SpecialDayWithNumRegex();
    public abstract virtual Regex get_NextRegex();
    public abstract virtual Regex get_ThisRegex();
    public abstract virtual Regex get_LastRegex();
    public abstract virtual Regex get_UnitRegex();
    public abstract virtual Regex get_UpcomingPrefixRegex();
    public abstract virtual Regex get_PastPrefixRegex();
    public abstract virtual Regex get_WeekDayRegex();
    public abstract virtual Regex get_MonthRegex();
    public abstract virtual Regex get_WeekDayOfMonthRegex();
    public abstract virtual Regex get_ForTheRegex();
    public abstract virtual Regex get_WeekDayAndDayOfMothRegex();
    public abstract virtual Regex get_WeekDayAndDayRegex();
    public abstract virtual Regex get_RelativeMonthRegex();
    public abstract virtual Regex get_StrictRelativeRegex();
    public abstract virtual Regex get_YearSuffix();
    public abstract virtual Regex get_RelativeWeekDayRegex();
    public abstract virtual Regex get_RelativeDayRegex();
    public abstract virtual Regex get_NextPrefixRegex();
    public abstract virtual Regex get_PreviousPrefixRegex();
    public abstract virtual Regex get_BeforeAfterRegex();
    public abstract virtual Regex get_TasksModeDurationToDatePatterns();
    public abstract virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public abstract virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    public abstract virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    public abstract virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    public abstract virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    public abstract virtual IImmutableList`1<string> get_SameDayTerms();
    public abstract virtual IImmutableList`1<string> get_PlusOneDayTerms();
    public abstract virtual IImmutableList`1<string> get_MinusOneDayTerms();
    public abstract virtual IImmutableList`1<string> get_PlusTwoDayTerms();
    public abstract virtual IImmutableList`1<string> get_MinusTwoDayTerms();
    public abstract virtual bool get_CheckBothBeforeAfter();
    public abstract virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public abstract virtual int GetSwiftMonthOrYear(string text);
    public abstract virtual bool IsCardinalLast(string text);
    public abstract virtual string Normalize(string text);
}
public interface Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration {
    public IEnumerable`1<Regex> SimpleCasesRegexes { get; }
    public Regex IllegalYearRegex { get; }
    public Regex YearRegex { get; }
    public Regex TillRegex { get; }
    public Regex DateUnitRegex { get; }
    public Regex TimeUnitRegex { get; }
    public Regex FollowedDateUnit { get; }
    public Regex NumberCombinedWithDateUnit { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex WeekOfRegex { get; }
    public Regex MonthOfRegex { get; }
    public Regex RangeUnitRegex { get; }
    public Regex InConnectorRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex YearPeriodRegex { get; }
    public Regex RelativeDecadeRegex { get; }
    public Regex ComplexDatePeriodRegex { get; }
    public Regex ReferenceDatePeriodRegex { get; }
    public Regex AgoRegex { get; }
    public Regex LaterRegex { get; }
    public Regex LessThanRegex { get; }
    public Regex MoreThanRegex { get; }
    public Regex CenturySuffixRegex { get; }
    public Regex MonthNumRegex { get; }
    public Regex NowRegex { get; }
    public Regex FirstLastRegex { get; }
    public Regex OfYearRegex { get; }
    public bool CheckBothBeforeAfter { get; }
    public IDateExtractor DatePointExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public String[] DurationDateRestrictions { get; }
    public abstract virtual IEnumerable`1<Regex> get_SimpleCasesRegexes();
    public abstract virtual Regex get_IllegalYearRegex();
    public abstract virtual Regex get_YearRegex();
    public abstract virtual Regex get_TillRegex();
    public abstract virtual Regex get_DateUnitRegex();
    public abstract virtual Regex get_TimeUnitRegex();
    public abstract virtual Regex get_FollowedDateUnit();
    public abstract virtual Regex get_NumberCombinedWithDateUnit();
    public abstract virtual Regex get_PreviousPrefixRegex();
    public abstract virtual Regex get_FutureRegex();
    public abstract virtual Regex get_FutureSuffixRegex();
    public abstract virtual Regex get_WeekOfRegex();
    public abstract virtual Regex get_MonthOfRegex();
    public abstract virtual Regex get_RangeUnitRegex();
    public abstract virtual Regex get_InConnectorRegex();
    public abstract virtual Regex get_WithinNextPrefixRegex();
    public abstract virtual Regex get_YearPeriodRegex();
    public abstract virtual Regex get_RelativeDecadeRegex();
    public abstract virtual Regex get_ComplexDatePeriodRegex();
    public abstract virtual Regex get_ReferenceDatePeriodRegex();
    public abstract virtual Regex get_AgoRegex();
    public abstract virtual Regex get_LaterRegex();
    public abstract virtual Regex get_LessThanRegex();
    public abstract virtual Regex get_MoreThanRegex();
    public abstract virtual Regex get_CenturySuffixRegex();
    public abstract virtual Regex get_MonthNumRegex();
    public abstract virtual Regex get_NowRegex();
    public abstract virtual Regex get_FirstLastRegex();
    public abstract virtual Regex get_OfYearRegex();
    public abstract virtual bool get_CheckBothBeforeAfter();
    public abstract virtual IDateExtractor get_DatePointExtractor();
    public abstract virtual IExtractor get_CardinalExtractor();
    public abstract virtual IExtractor get_OrdinalExtractor();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IParser get_NumberParser();
    public abstract virtual String[] get_DurationDateRestrictions();
    public abstract virtual bool GetFromTokenIndex(string text, Int32& index);
    public abstract virtual bool HasConnectorToken(string text);
    public abstract virtual bool GetBetweenTokenIndex(string text, Int32& index);
}
public interface Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration {
    public string TokenBeforeDate { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser DateParser { get; }
    public Regex MonthFrontBetweenRegex { get; }
    public Regex BetweenRegex { get; }
    public Regex MonthFrontSimpleCasesRegex { get; }
    public Regex SimpleCasesRegex { get; }
    public Regex OneWordPeriodRegex { get; }
    public Regex MonthWithYear { get; }
    public Regex MonthNumWithYear { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex WeekOfMonthRegex { get; }
    public Regex WeekOfYearRegex { get; }
    public Regex QuarterRegex { get; }
    public Regex QuarterRegexYearFront { get; }
    public Regex AllHalfYearRegex { get; }
    public Regex SeasonRegex { get; }
    public Regex WhichWeekRegex { get; }
    public Regex WeekOfRegex { get; }
    public Regex MonthOfRegex { get; }
    public Regex InConnectorRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex ThisPrefixRegex { get; }
    public Regex RestOfDateRegex { get; }
    public Regex LaterEarlyPeriodRegex { get; }
    public Regex WeekWithWeekDayRangeRegex { get; }
    public Regex YearPlusNumberRegex { get; }
    public Regex DecadeWithCenturyRegex { get; }
    public Regex YearPeriodRegex { get; }
    public Regex ComplexDatePeriodRegex { get; }
    public Regex RelativeDecadeRegex { get; }
    public Regex ReferenceDatePeriodRegex { get; }
    public Regex AgoRegex { get; }
    public Regex LaterRegex { get; }
    public Regex LessThanRegex { get; }
    public Regex MoreThanRegex { get; }
    public Regex CenturySuffixRegex { get; }
    public Regex UnspecificEndOfRangeRegex { get; }
    public Regex AmbiguousPointRangeRegex { get; }
    public Regex NowRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex TodayNowRegex { get; }
    public Regex FirstLastRegex { get; }
    public Regex OfYearRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; }
    public IImmutableDictionary`2<string, string> SpecialYearPrefixesMap { get; }
    public IImmutableDictionary`2<string, int> WrittenDecades { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IImmutableDictionary`2<string, int> SpecialDecadeCases { get; }
    public bool CheckBothBeforeAfter { get; }
    public abstract virtual string get_TokenBeforeDate();
    public abstract virtual IExtractor get_CardinalExtractor();
    public abstract virtual IExtractor get_OrdinalExtractor();
    public abstract virtual IExtractor get_IntegerExtractor();
    public abstract virtual IParser get_NumberParser();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IDateTimeParser get_DurationParser();
    public abstract virtual IDateTimeParser get_DateParser();
    public abstract virtual Regex get_MonthFrontBetweenRegex();
    public abstract virtual Regex get_BetweenRegex();
    public abstract virtual Regex get_MonthFrontSimpleCasesRegex();
    public abstract virtual Regex get_SimpleCasesRegex();
    public abstract virtual Regex get_OneWordPeriodRegex();
    public abstract virtual Regex get_MonthWithYear();
    public abstract virtual Regex get_MonthNumWithYear();
    public abstract virtual Regex get_PastRegex();
    public abstract virtual Regex get_FutureRegex();
    public abstract virtual Regex get_FutureSuffixRegex();
    public abstract virtual Regex get_NumberCombinedWithUnit();
    public abstract virtual Regex get_WeekOfMonthRegex();
    public abstract virtual Regex get_WeekOfYearRegex();
    public abstract virtual Regex get_QuarterRegex();
    public abstract virtual Regex get_QuarterRegexYearFront();
    public abstract virtual Regex get_AllHalfYearRegex();
    public abstract virtual Regex get_SeasonRegex();
    public abstract virtual Regex get_WhichWeekRegex();
    public abstract virtual Regex get_WeekOfRegex();
    public abstract virtual Regex get_MonthOfRegex();
    public abstract virtual Regex get_InConnectorRegex();
    public abstract virtual Regex get_WithinNextPrefixRegex();
    public abstract virtual Regex get_NextPrefixRegex();
    public abstract virtual Regex get_PreviousPrefixRegex();
    public abstract virtual Regex get_ThisPrefixRegex();
    public abstract virtual Regex get_RestOfDateRegex();
    public abstract virtual Regex get_LaterEarlyPeriodRegex();
    public abstract virtual Regex get_WeekWithWeekDayRangeRegex();
    public abstract virtual Regex get_YearPlusNumberRegex();
    public abstract virtual Regex get_DecadeWithCenturyRegex();
    public abstract virtual Regex get_YearPeriodRegex();
    public abstract virtual Regex get_ComplexDatePeriodRegex();
    public abstract virtual Regex get_RelativeDecadeRegex();
    public abstract virtual Regex get_ReferenceDatePeriodRegex();
    public abstract virtual Regex get_AgoRegex();
    public abstract virtual Regex get_LaterRegex();
    public abstract virtual Regex get_LessThanRegex();
    public abstract virtual Regex get_MoreThanRegex();
    public abstract virtual Regex get_CenturySuffixRegex();
    public abstract virtual Regex get_UnspecificEndOfRangeRegex();
    public abstract virtual Regex get_AmbiguousPointRangeRegex();
    public abstract virtual Regex get_NowRegex();
    public abstract virtual Regex get_SpecialDayRegex();
    public abstract virtual Regex get_TodayNowRegex();
    public abstract virtual Regex get_FirstLastRegex();
    public abstract virtual Regex get_OfYearRegex();
    public abstract virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public abstract virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    public abstract virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    public abstract virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    public abstract virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    public abstract virtual IImmutableDictionary`2<string, string> get_SpecialYearPrefixesMap();
    public abstract virtual IImmutableDictionary`2<string, int> get_WrittenDecades();
    public abstract virtual IImmutableDictionary`2<string, int> get_Numbers();
    public abstract virtual IImmutableDictionary`2<string, int> get_SpecialDecadeCases();
    public abstract virtual bool get_CheckBothBeforeAfter();
    public abstract virtual bool IsFuture(string text);
    public abstract virtual bool IsYearToDate(string text);
    public abstract virtual bool IsMonthToDate(string text);
    public abstract virtual bool IsWeekOnly(string text);
    public abstract virtual bool IsFortnight(string text);
    public abstract virtual bool IsWeekend(string text);
    public abstract virtual bool IsMonthOnly(string text);
    public abstract virtual bool IsYearOnly(string text);
    public abstract virtual int GetSwiftYear(string text);
    public abstract virtual int GetSwiftDayOrMonth(string text);
    public abstract virtual bool IsLastCardinal(string text);
}
public interface Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration {
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IEnumerable`1<Regex> RelativePrefixList { get; }
    public IEnumerable`1<Regex> AmPmRegexList { get; }
    public Regex OrRegex { get; }
    public Regex ThisPrefixRegex { get; }
    public Regex DayRegex { get; }
    public Regex RangePrefixRegex { get; }
    public abstract virtual IDateExtractor get_DateExtractor();
    public abstract virtual IDateTimeExtractor get_DatePeriodExtractor();
    public abstract virtual IEnumerable`1<Regex> get_RelativePrefixList();
    public abstract virtual IEnumerable`1<Regex> get_AmPmRegexList();
    public abstract virtual Regex get_OrRegex();
    public abstract virtual Regex get_ThisPrefixRegex();
    public abstract virtual Regex get_DayRegex();
    public abstract virtual Regex get_RangePrefixRegex();
}
public interface Microsoft.Recognizers.Text.DateTime.IDateTimeAltParserConfiguration {
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public abstract virtual IDateTimeParser get_DateTimeParser();
    public abstract virtual IDateTimeParser get_DateParser();
    public abstract virtual IDateTimeParser get_TimeParser();
    public abstract virtual IDateTimeParser get_DateTimePeriodParser();
    public abstract virtual IDateTimeParser get_TimePeriodParser();
    public abstract virtual IDateTimeParser get_DatePeriodParser();
}
public interface Microsoft.Recognizers.Text.DateTime.IDateTimeExtractor {
    public abstract virtual List`1<ExtractResult> Extract(string input, DateTime reference);
}
public interface Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration {
    public Regex NowRegex { get; }
    public Regex SuffixRegex { get; }
    public Regex TimeOfTodayAfterRegex { get; }
    public Regex SimpleTimeOfTodayAfterRegex { get; }
    public Regex TimeOfTodayBeforeRegex { get; }
    public Regex SimpleTimeOfTodayBeforeRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex SpecificEndOfRegex { get; }
    public Regex UnspecificEndOfRegex { get; }
    public Regex UnitRegex { get; }
    public Regex NumberAsTimeRegex { get; }
    public Regex DateNumberConnectorRegex { get; }
    public Regex YearRegex { get; }
    public Regex YearSuffix { get; }
    public Regex SuffixAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateExtractor DatePointExtractor { get; }
    public IDateTimeExtractor TimePointExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public abstract virtual Regex get_NowRegex();
    public abstract virtual Regex get_SuffixRegex();
    public abstract virtual Regex get_TimeOfTodayAfterRegex();
    public abstract virtual Regex get_SimpleTimeOfTodayAfterRegex();
    public abstract virtual Regex get_TimeOfTodayBeforeRegex();
    public abstract virtual Regex get_SimpleTimeOfTodayBeforeRegex();
    public abstract virtual Regex get_TimeOfDayRegex();
    public abstract virtual Regex get_SpecificEndOfRegex();
    public abstract virtual Regex get_UnspecificEndOfRegex();
    public abstract virtual Regex get_UnitRegex();
    public abstract virtual Regex get_NumberAsTimeRegex();
    public abstract virtual Regex get_DateNumberConnectorRegex();
    public abstract virtual Regex get_YearRegex();
    public abstract virtual Regex get_YearSuffix();
    public abstract virtual Regex get_SuffixAfterRegex();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IDateExtractor get_DatePointExtractor();
    public abstract virtual IDateTimeExtractor get_TimePointExtractor();
    public abstract virtual IExtractor get_IntegerExtractor();
    public abstract virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public abstract virtual IDateTimeExtractor get_HolidayExtractor();
    public abstract virtual bool IsConnector(string text);
}
public interface Microsoft.Recognizers.Text.DateTime.IDateTimeListExtractor {
    public abstract virtual List`1<ExtractResult> Extract(List`1<ExtractResult> extractResult, string text, DateTime reference);
}
public interface Microsoft.Recognizers.Text.DateTime.IDateTimeOptionsConfiguration {
    public DateTimeOptions Options { get; }
    public bool DmyDateFormat { get; }
    public string LanguageMarker { get; }
    public abstract virtual DateTimeOptions get_Options();
    public abstract virtual bool get_DmyDateFormat();
    public abstract virtual string get_LanguageMarker();
}
public interface Microsoft.Recognizers.Text.DateTime.IDateTimeParser {
    public abstract virtual DateTimeParseResult Parse(ExtractResult er, DateTime reference);
    public abstract virtual List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
}
public interface Microsoft.Recognizers.Text.DateTime.IDateTimeParserConfiguration {
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public Regex NowRegex { get; }
    public Regex AMTimeRegex { get; }
    public Regex PMTimeRegex { get; }
    public Regex SimpleTimeOfTodayAfterRegex { get; }
    public Regex SimpleTimeOfTodayBeforeRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex SpecificEndOfRegex { get; }
    public Regex UnspecificEndOfRegex { get; }
    public Regex UnitRegex { get; }
    public Regex DateNumberConnectorRegex { get; }
    public Regex YearRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public abstract virtual string get_TokenBeforeDate();
    public abstract virtual string get_TokenBeforeTime();
    public abstract virtual IDateExtractor get_DateExtractor();
    public abstract virtual IDateTimeExtractor get_HolidayExtractor();
    public abstract virtual IDateTimeExtractor get_TimeExtractor();
    public abstract virtual IDateTimeParser get_DateParser();
    public abstract virtual IDateTimeParser get_TimeParser();
    public abstract virtual IDateTimeParser get_HolidayTimeParser();
    public abstract virtual IExtractor get_CardinalExtractor();
    public abstract virtual IExtractor get_IntegerExtractor();
    public abstract virtual IParser get_NumberParser();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IDateTimeParser get_DurationParser();
    public abstract virtual Regex get_NowRegex();
    public abstract virtual Regex get_AMTimeRegex();
    public abstract virtual Regex get_PMTimeRegex();
    public abstract virtual Regex get_SimpleTimeOfTodayAfterRegex();
    public abstract virtual Regex get_SimpleTimeOfTodayBeforeRegex();
    public abstract virtual Regex get_SpecificTimeOfDayRegex();
    public abstract virtual Regex get_SpecificEndOfRegex();
    public abstract virtual Regex get_UnspecificEndOfRegex();
    public abstract virtual Regex get_UnitRegex();
    public abstract virtual Regex get_DateNumberConnectorRegex();
    public abstract virtual Regex get_YearRegex();
    public abstract virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public abstract virtual IImmutableDictionary`2<string, int> get_Numbers();
    public abstract virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public abstract virtual bool ContainsAmbiguousToken(string text, string matchedText);
    public abstract virtual bool GetMatchedNowTimex(string text, String& timex);
    public abstract virtual int GetSwiftDay(string text);
    public abstract virtual int GetHour(string text, int hour);
}
public interface Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration {
    public string TokenBeforeDate { get; }
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex TillRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex FollowedUnit { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex TimeUnitRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex PeriodTimeOfDayWithDateRegex { get; }
    public Regex RelativeTimeUnitRegex { get; }
    public Regex RestOfDateTimeRegex { get; }
    public Regex GeneralEndingRegex { get; }
    public Regex MiddlePauseRegex { get; }
    public Regex AmDescRegex { get; }
    public Regex PmDescRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex DateUnitRegex { get; }
    public Regex PrefixDayRegex { get; }
    public Regex SuffixRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex TasksmodeMealTimeofDayRegex { get; }
    public bool CheckBothBeforeAfter { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor SingleDateExtractor { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor SingleDateTimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public abstract virtual string get_TokenBeforeDate();
    public abstract virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public abstract virtual Regex get_PrepositionRegex();
    public abstract virtual Regex get_TillRegex();
    public abstract virtual Regex get_SpecificTimeOfDayRegex();
    public abstract virtual Regex get_TimeOfDayRegex();
    public abstract virtual Regex get_FollowedUnit();
    public abstract virtual Regex get_NumberCombinedWithUnit();
    public abstract virtual Regex get_TimeUnitRegex();
    public abstract virtual Regex get_PreviousPrefixRegex();
    public abstract virtual Regex get_NextPrefixRegex();
    public abstract virtual Regex get_FutureSuffixRegex();
    public abstract virtual Regex get_WeekDayRegex();
    public abstract virtual Regex get_PeriodTimeOfDayWithDateRegex();
    public abstract virtual Regex get_RelativeTimeUnitRegex();
    public abstract virtual Regex get_RestOfDateTimeRegex();
    public abstract virtual Regex get_GeneralEndingRegex();
    public abstract virtual Regex get_MiddlePauseRegex();
    public abstract virtual Regex get_AmDescRegex();
    public abstract virtual Regex get_PmDescRegex();
    public abstract virtual Regex get_WithinNextPrefixRegex();
    public abstract virtual Regex get_DateUnitRegex();
    public abstract virtual Regex get_PrefixDayRegex();
    public abstract virtual Regex get_SuffixRegex();
    public abstract virtual Regex get_BeforeRegex();
    public abstract virtual Regex get_AfterRegex();
    public abstract virtual Regex get_TasksmodeMealTimeofDayRegex();
    public abstract virtual bool get_CheckBothBeforeAfter();
    public abstract virtual IExtractor get_CardinalExtractor();
    public abstract virtual IDateTimeExtractor get_SingleDateExtractor();
    public abstract virtual IDateTimeExtractor get_SingleTimeExtractor();
    public abstract virtual IDateTimeExtractor get_SingleDateTimeExtractor();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IDateTimeExtractor get_TimePeriodExtractor();
    public abstract virtual IDateTimeExtractor get_TimeZoneExtractor();
    public abstract virtual IDateTimeExtractor get_HolidayExtractor();
    public abstract virtual bool GetFromTokenIndex(string text, Int32& index);
    public abstract virtual bool HasConnectorToken(string text);
    public abstract virtual bool GetBetweenTokenIndex(string text, Int32& index);
}
public interface Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration {
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex HyphenDateRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnitRegex { get; }
    public Regex UnitRegex { get; }
    public Regex PeriodTimeOfDayWithDateRegex { get; }
    public Regex RelativeTimeUnitRegex { get; }
    public Regex RestOfDateTimeRegex { get; }
    public Regex AmDescRegex { get; }
    public Regex PmDescRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex PrefixDayRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex TasksmodeMealTimeofDayRegex { get; }
    public bool CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public abstract virtual string get_TokenBeforeDate();
    public abstract virtual string get_TokenBeforeTime();
    public abstract virtual IDateExtractor get_DateExtractor();
    public abstract virtual IDateTimeExtractor get_HolidayExtractor();
    public abstract virtual IDateTimeExtractor get_TimeExtractor();
    public abstract virtual IDateTimeExtractor get_DateTimeExtractor();
    public abstract virtual IDateTimeExtractor get_TimePeriodExtractor();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IExtractor get_CardinalExtractor();
    public abstract virtual IParser get_NumberParser();
    public abstract virtual IDateTimeParser get_DateParser();
    public abstract virtual IDateTimeParser get_HolidayTimeParser();
    public abstract virtual IDateTimeParser get_TimeParser();
    public abstract virtual IDateTimeParser get_DateTimeParser();
    public abstract virtual IDateTimeParser get_TimePeriodParser();
    public abstract virtual IDateTimeParser get_DurationParser();
    public abstract virtual IDateTimeParser get_TimeZoneParser();
    public abstract virtual Regex get_PureNumberFromToRegex();
    public abstract virtual Regex get_HyphenDateRegex();
    public abstract virtual Regex get_PureNumberBetweenAndRegex();
    public abstract virtual Regex get_SpecificTimeOfDayRegex();
    public abstract virtual Regex get_TimeOfDayRegex();
    public abstract virtual Regex get_PreviousPrefixRegex();
    public abstract virtual Regex get_FutureRegex();
    public abstract virtual Regex get_FutureSuffixRegex();
    public abstract virtual Regex get_NumberCombinedWithUnitRegex();
    public abstract virtual Regex get_UnitRegex();
    public abstract virtual Regex get_PeriodTimeOfDayWithDateRegex();
    public abstract virtual Regex get_RelativeTimeUnitRegex();
    public abstract virtual Regex get_RestOfDateTimeRegex();
    public abstract virtual Regex get_AmDescRegex();
    public abstract virtual Regex get_PmDescRegex();
    public abstract virtual Regex get_WithinNextPrefixRegex();
    public abstract virtual Regex get_PrefixDayRegex();
    public abstract virtual Regex get_BeforeRegex();
    public abstract virtual Regex get_AfterRegex();
    public abstract virtual Regex get_TasksmodeMealTimeofDayRegex();
    public abstract virtual bool get_CheckBothBeforeAfter();
    public abstract virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public abstract virtual IImmutableDictionary`2<string, int> get_Numbers();
    public abstract virtual bool GetMatchedTimeRange(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMin);
    public abstract virtual int GetSwiftPrefix(string text);
}
public interface Microsoft.Recognizers.Text.DateTime.IDateTimeZoneExtractor {
    public abstract virtual List`1<ExtractResult> RemoveAmbiguousTimezone(List`1<ExtractResult> extractResult);
}
public interface Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration {
    public Regex FollowedUnit { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex AnUnitRegex { get; }
    public Regex DuringRegex { get; }
    public Regex AllRegex { get; }
    public Regex HalfRegex { get; }
    public Regex SuffixAndRegex { get; }
    public Regex ConjunctionRegex { get; }
    public Regex InexactNumberRegex { get; }
    public Regex InexactNumberUnitRegex { get; }
    public Regex RelativeDurationUnitRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex DurationConnectorRegex { get; }
    public Regex LessThanRegex { get; }
    public Regex MoreThanRegex { get; }
    public Regex ModPrefixRegex { get; }
    public Regex ModSuffixRegex { get; }
    public Regex SpecialNumberUnitRegex { get; }
    public bool CheckBothBeforeAfter { get; }
    public IExtractor CardinalExtractor { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public abstract virtual Regex get_FollowedUnit();
    public abstract virtual Regex get_NumberCombinedWithUnit();
    public abstract virtual Regex get_AnUnitRegex();
    public abstract virtual Regex get_DuringRegex();
    public abstract virtual Regex get_AllRegex();
    public abstract virtual Regex get_HalfRegex();
    public abstract virtual Regex get_SuffixAndRegex();
    public abstract virtual Regex get_ConjunctionRegex();
    public abstract virtual Regex get_InexactNumberRegex();
    public abstract virtual Regex get_InexactNumberUnitRegex();
    public abstract virtual Regex get_RelativeDurationUnitRegex();
    public abstract virtual Regex get_DurationUnitRegex();
    public abstract virtual Regex get_DurationConnectorRegex();
    public abstract virtual Regex get_LessThanRegex();
    public abstract virtual Regex get_MoreThanRegex();
    public abstract virtual Regex get_ModPrefixRegex();
    public abstract virtual Regex get_ModSuffixRegex();
    public abstract virtual Regex get_SpecialNumberUnitRegex();
    public abstract virtual bool get_CheckBothBeforeAfter();
    public abstract virtual IExtractor get_CardinalExtractor();
    public abstract virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public abstract virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    public abstract virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public interface Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration {
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex AnUnitRegex { get; }
    public Regex PrefixArticleRegex { get; }
    public Regex DuringRegex { get; }
    public Regex AllDateUnitRegex { get; }
    public Regex HalfDateUnitRegex { get; }
    public Regex SuffixAndRegex { get; }
    public Regex FollowedUnit { get; }
    public Regex ConjunctionRegex { get; }
    public Regex InexactNumberRegex { get; }
    public Regex InexactNumberUnitRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex SpecialNumberUnitRegex { get; }
    public bool CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public IImmutableDictionary`2<string, double> DoubleNumbers { get; }
    public abstract virtual IExtractor get_CardinalExtractor();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IParser get_NumberParser();
    public abstract virtual Regex get_NumberCombinedWithUnit();
    public abstract virtual Regex get_AnUnitRegex();
    public abstract virtual Regex get_PrefixArticleRegex();
    public abstract virtual Regex get_DuringRegex();
    public abstract virtual Regex get_AllDateUnitRegex();
    public abstract virtual Regex get_HalfDateUnitRegex();
    public abstract virtual Regex get_SuffixAndRegex();
    public abstract virtual Regex get_FollowedUnit();
    public abstract virtual Regex get_ConjunctionRegex();
    public abstract virtual Regex get_InexactNumberRegex();
    public abstract virtual Regex get_InexactNumberUnitRegex();
    public abstract virtual Regex get_DurationUnitRegex();
    public abstract virtual Regex get_SpecialNumberUnitRegex();
    public abstract virtual bool get_CheckBothBeforeAfter();
    public abstract virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public abstract virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    public abstract virtual IImmutableDictionary`2<string, double> get_DoubleNumbers();
}
public interface Microsoft.Recognizers.Text.DateTime.IHolidayExtractorConfiguration {
    public IEnumerable`1<Regex> HolidayRegexes { get; }
    public abstract virtual IEnumerable`1<Regex> get_HolidayRegexes();
}
public interface Microsoft.Recognizers.Text.DateTime.IHolidayParserConfiguration {
    public IImmutableDictionary`2<string, string> VariableHolidaysTimexDictionary { get; }
    public IImmutableDictionary`2<string, Func`2<int, DateTime>> HolidayFuncDictionary { get; }
    public IImmutableDictionary`2<string, IEnumerable`1<string>> HolidayNames { get; }
    public IEnumerable`1<Regex> HolidayRegexList { get; }
    public abstract virtual IImmutableDictionary`2<string, string> get_VariableHolidaysTimexDictionary();
    public abstract virtual IImmutableDictionary`2<string, Func`2<int, DateTime>> get_HolidayFuncDictionary();
    public abstract virtual IImmutableDictionary`2<string, IEnumerable`1<string>> get_HolidayNames();
    public abstract virtual IEnumerable`1<Regex> get_HolidayRegexList();
    public abstract virtual int GetSwiftYear(string text);
    public abstract virtual string SanitizeHolidayToken(string holiday);
}
public interface Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration {
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor SetExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeZoneExtractor TimeZoneExtractor { get; }
    public IDateTimeListExtractor DateTimeAltExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IEnumerable`1<Regex> TermFilterRegexes { get; }
    public Regex TasksModeMentionFilters { get; }
    public Regex AfterRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex SinceRegex { get; }
    public Regex AroundRegex { get; }
    public Regex EqualRegex { get; }
    public Regex FromToRegex { get; }
    public Regex SingleAmbiguousMonthRegex { get; }
    public Regex AmbiguousRangeModifierPrefix { get; }
    public Regex PotentialAmbiguousRangeRegex { get; }
    public Regex PrepositionSuffixRegex { get; }
    public Regex NumberEndingPattern { get; }
    public Regex SuffixAfterRegex { get; }
    public Regex UnspecificDatePeriodRegex { get; }
    public Regex UnspecificTimePeriodRegex { get; }
    public Regex FailFastRegex { get; }
    public Regex YearRegex { get; }
    public StringMatcher SuperfluousWordMatcher { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public bool CheckBothBeforeAfter { get; }
    public abstract virtual IDateExtractor get_DateExtractor();
    public abstract virtual IDateTimeExtractor get_TimeExtractor();
    public abstract virtual IDateTimeExtractor get_DateTimeExtractor();
    public abstract virtual IDateTimeExtractor get_DatePeriodExtractor();
    public abstract virtual IDateTimeExtractor get_TimePeriodExtractor();
    public abstract virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IDateTimeExtractor get_SetExtractor();
    public abstract virtual IDateTimeExtractor get_HolidayExtractor();
    public abstract virtual IDateTimeZoneExtractor get_TimeZoneExtractor();
    public abstract virtual IDateTimeListExtractor get_DateTimeAltExtractor();
    public abstract virtual IExtractor get_IntegerExtractor();
    public abstract virtual IEnumerable`1<Regex> get_TermFilterRegexes();
    public abstract virtual Regex get_TasksModeMentionFilters();
    public abstract virtual Regex get_AfterRegex();
    public abstract virtual Regex get_BeforeRegex();
    public abstract virtual Regex get_SinceRegex();
    public abstract virtual Regex get_AroundRegex();
    public abstract virtual Regex get_EqualRegex();
    public abstract virtual Regex get_FromToRegex();
    public abstract virtual Regex get_SingleAmbiguousMonthRegex();
    public abstract virtual Regex get_AmbiguousRangeModifierPrefix();
    public abstract virtual Regex get_PotentialAmbiguousRangeRegex();
    public abstract virtual Regex get_PrepositionSuffixRegex();
    public abstract virtual Regex get_NumberEndingPattern();
    public abstract virtual Regex get_SuffixAfterRegex();
    public abstract virtual Regex get_UnspecificDatePeriodRegex();
    public abstract virtual Regex get_UnspecificTimePeriodRegex();
    public abstract virtual Regex get_FailFastRegex();
    public abstract virtual Regex get_YearRegex();
    public abstract virtual StringMatcher get_SuperfluousWordMatcher();
    public abstract virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    public abstract virtual bool get_CheckBothBeforeAfter();
}
public interface Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration {
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex SinceRegex { get; }
    public Regex AroundRegex { get; }
    public Regex EqualRegex { get; }
    public Regex SuffixAfter { get; }
    public Regex YearRegex { get; }
    public IDateTimeParser SetParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public StringMatcher SuperfluousWordMatcher { get; }
    public bool CheckBothBeforeAfter { get; }
    public abstract virtual Regex get_BeforeRegex();
    public abstract virtual Regex get_AfterRegex();
    public abstract virtual Regex get_SinceRegex();
    public abstract virtual Regex get_AroundRegex();
    public abstract virtual Regex get_EqualRegex();
    public abstract virtual Regex get_SuffixAfter();
    public abstract virtual Regex get_YearRegex();
    public abstract virtual IDateTimeParser get_SetParser();
    public abstract virtual IDateTimeParser get_HolidayParser();
    public abstract virtual StringMatcher get_SuperfluousWordMatcher();
    public abstract virtual bool get_CheckBothBeforeAfter();
}
public interface Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration {
    public Regex LastRegex { get; }
    public Regex EachPrefixRegex { get; }
    public Regex PeriodicRegex { get; }
    public Regex EachUnitRegex { get; }
    public Regex EachDayRegex { get; }
    public Regex BeforeEachDayRegex { get; }
    public Regex SetWeekDayRegex { get; }
    public Regex SetEachRegex { get; }
    public bool CheckBothBeforeAfter { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public abstract virtual Regex get_LastRegex();
    public abstract virtual Regex get_EachPrefixRegex();
    public abstract virtual Regex get_PeriodicRegex();
    public abstract virtual Regex get_EachUnitRegex();
    public abstract virtual Regex get_EachDayRegex();
    public abstract virtual Regex get_BeforeEachDayRegex();
    public abstract virtual Regex get_SetWeekDayRegex();
    public abstract virtual Regex get_SetEachRegex();
    public abstract virtual bool get_CheckBothBeforeAfter();
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IDateTimeExtractor get_TimeExtractor();
    public abstract virtual IDateExtractor get_DateExtractor();
    public abstract virtual IDateTimeExtractor get_DateTimeExtractor();
    public abstract virtual IDateTimeExtractor get_DatePeriodExtractor();
    public abstract virtual IDateTimeExtractor get_TimePeriodExtractor();
    public abstract virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    public abstract virtual Tuple`2<string, int> WeekDayGroupMatchTuple(Match match);
}
public interface Microsoft.Recognizers.Text.DateTime.ISetParserConfiguration {
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex EachPrefixRegex { get; }
    public Regex PeriodicRegex { get; }
    public Regex EachUnitRegex { get; }
    public Regex EachDayRegex { get; }
    public Regex SetWeekDayRegex { get; }
    public Regex SetEachRegex { get; }
    public abstract virtual IDateTimeExtractor get_DurationExtractor();
    public abstract virtual IDateTimeParser get_DurationParser();
    public abstract virtual IDateTimeExtractor get_TimeExtractor();
    public abstract virtual IDateTimeParser get_TimeParser();
    public abstract virtual IDateExtractor get_DateExtractor();
    public abstract virtual IDateTimeParser get_DateParser();
    public abstract virtual IDateTimeExtractor get_DateTimeExtractor();
    public abstract virtual IDateTimeParser get_DateTimeParser();
    public abstract virtual IDateTimeExtractor get_DatePeriodExtractor();
    public abstract virtual IDateTimeParser get_DatePeriodParser();
    public abstract virtual IDateTimeExtractor get_TimePeriodExtractor();
    public abstract virtual IDateTimeParser get_TimePeriodParser();
    public abstract virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    public abstract virtual IDateTimeParser get_DateTimePeriodParser();
    public abstract virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public abstract virtual Regex get_EachPrefixRegex();
    public abstract virtual Regex get_PeriodicRegex();
    public abstract virtual Regex get_EachUnitRegex();
    public abstract virtual Regex get_EachDayRegex();
    public abstract virtual Regex get_SetWeekDayRegex();
    public abstract virtual Regex get_SetEachRegex();
    public abstract virtual bool GetMatchedDailyTimex(string text, String& timex);
    public abstract virtual bool GetMatchedUnitTimex(string text, String& timex);
    public abstract virtual string WeekDayGroupMatchString(Match match);
    public abstract virtual string ReplaceValueInTextWithFutTerm(string text, string value);
}
public interface Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration {
    public Regex YearRegex { get; }
    public Regex RelativeRegex { get; }
    public IDateExtractor DateExtractor { get; }
    public abstract virtual Regex get_YearRegex();
    public abstract virtual Regex get_RelativeRegex();
    public abstract virtual IDateExtractor get_DateExtractor();
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianCommonDateTimeParserConfiguration : BaseDateParserConfiguration {
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public ItalianCommonDateTimeParserConfiguration(IDateTimeOptionsConfiguration config);
    public virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianDateExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MonthRegex;
    public static Regex DayRegex;
    public static Regex MonthNumRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex OnRegex;
    public static Regex RelaxedOnRegex;
    public static Regex ThisRegex;
    public static Regex LastDateRegex;
    public static Regex NextDateRegex;
    public static Regex UnitRegex;
    public static Regex SpecialDayRegex;
    public static Regex SpecialDayWithNumRegex;
    public static Regex DateUnitRegex;
    public static Regex StrictWeekDay;
    public static Regex WeekDayOfMonthRegex;
    public static Regex SpecialDate;
    public static Regex RelativeWeekDayRegex;
    public static Regex ForTheRegex;
    public static Regex WeekDayAndDayOfMothRegex;
    public static Regex WeekDayAndDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex StrictRelativeRegex;
    public static Regex PrefixArticleRegex;
    public static Regex[] ImplicitDateList;
    public static Regex OfMonth;
    public static Regex MonthEnd;
    public static Regex WeekDayEnd;
    public static Regex WeekDayStart;
    public static Regex YearSuffix;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex InConnectorRegex;
    public static Regex SinceYearSuffixRegex;
    public static Regex RangeUnitRegex;
    public static Regex RangeConnectorSymbolRegex;
    public static ImmutableDictionary`2<string, int> DayOfWeek;
    public static ImmutableDictionary`2<string, int> MonthOfYear;
    public static Regex BeforeAfterRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public IEnumerable`1<Regex> DateRegexList { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.ImplicitDateList { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DayOfWeek { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthOfYear { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.OfMonth { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayStart { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayOfMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.ForTheRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.StrictRelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RelativeMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.PrefixArticleRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.SinceYearSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeConnectorSymbolRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.BeforeAfterRegex { get; }
    public ItalianDateExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ItalianDateExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_ImplicitDateList();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DayOfWeek();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthOfYear();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_OfMonth();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayStart();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayOfMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_ForTheRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_StrictRelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RelativeMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_PrefixArticleRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_SinceYearSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeConnectorSymbolRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_BeforeAfterRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianDateParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <DateTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OnRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayWithNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ThisRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <StrictWeekDay>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ForTheRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayOfMothRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <StrictRelativeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UpcomingPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeDurationToDatePatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <SameDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public string DateTokenPrefix { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IEnumerable`1<Regex> DateRegexes { get; }
    public Regex OnRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex SpecialDayWithNumRegex { get; }
    public Regex NextRegex { get; }
    public Regex ThisRegex { get; }
    public Regex LastRegex { get; }
    public Regex UnitRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex StrictWeekDay { get; }
    public Regex MonthRegex { get; }
    public Regex WeekDayOfMonthRegex { get; }
    public Regex ForTheRegex { get; }
    public Regex WeekDayAndDayOfMothRegex { get; }
    public Regex WeekDayAndDayRegex { get; }
    public Regex RelativeMonthRegex { get; }
    public Regex StrictRelativeRegex { get; }
    public Regex YearSuffix { get; }
    public Regex RelativeWeekDayRegex { get; }
    public Regex RelativeDayRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex UpcomingPrefixRegex { get; }
    public Regex PastPrefixRegex { get; }
    public Regex BeforeAfterRegex { get; }
    public Regex TasksModeDurationToDatePatterns { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableList`1<string> SameDayTerms { get; }
    public IImmutableList`1<string> PlusOneDayTerms { get; }
    public IImmutableList`1<string> MinusOneDayTerms { get; }
    public IImmutableList`1<string> PlusTwoDayTerms { get; }
    public IImmutableList`1<string> MinusTwoDayTerms { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.CheckBothBeforeAfter { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public ItalianDateParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DateTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OnRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayWithNumRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ThisRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayRegex();
    [CompilerGeneratedAttribute]
public Regex get_StrictWeekDay();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ForTheRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayOfMothRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_StrictRelativeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearSuffix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UpcomingPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeDurationToDatePatterns();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_SameDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusTwoDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusTwoDayTerms();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual int GetSwiftMonthOrYear(string text);
    public sealed virtual bool IsCardinalLast(string text);
    public sealed virtual string Normalize(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianDatePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex FullTillRegex;
    public static Regex RangeConnectorRegex;
    public static Regex DayRegex;
    public static Regex MonthNumRegex;
    public static Regex IllegalYearRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex TimeUnitRegex;
    public static Regex EngMonthRegex;
    public static Regex MonthSuffixRegex;
    public static Regex DateUnitRegex;
    public static Regex PastPrefixRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex FutureSuffixRegex;
    public static Regex ThisPrefixRegex;
    public static Regex SimpleCasesRegex;
    public static Regex MonthFrontSimpleCasesRegex;
    public static Regex MonthFrontBetweenRegex;
    public static Regex BetweenRegex;
    public static Regex MonthWithYear;
    public static Regex OneWordPeriodRegex;
    public static Regex MonthNumWithYear;
    public static Regex WeekOfMonthRegex;
    public static Regex WeekOfYearRegex;
    public static Regex FollowedDateUnit;
    public static Regex NumberCombinedWithDateUnit;
    public static Regex QuarterRegex;
    public static Regex QuarterRegexYearFront;
    public static Regex AllHalfYearRegex;
    public static Regex SeasonRegex;
    public static Regex WhichWeekRegex;
    public static Regex WeekOfRegex;
    public static Regex MonthOfRegex;
    public static Regex RangeUnitRegex;
    public static Regex InConnectorRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex RestOfDateRegex;
    public static Regex LaterEarlyPeriodRegex;
    public static Regex WeekWithWeekDayRangeRegex;
    public static Regex YearPlusNumberRegex;
    public static Regex DecadeWithCenturyRegex;
    public static Regex YearPeriodRegex;
    public static Regex ComplexDatePeriodRegex;
    public static Regex RelativeDecadeRegex;
    public static Regex ReferenceDatePeriodRegex;
    public static Regex AgoRegex;
    public static Regex LaterRegex;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex CenturySuffixRegex;
    public static Regex NowRegex;
    public static Regex FirstLastRegex;
    public static Regex OfYearRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromRegex;
    private static Regex ConnectorAndRegex;
    private static Regex RangePrefixRegex;
    private static Regex BeforeRegex;
    private static Regex[] SimpleCasesRegexes;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    public IDateExtractor DatePointExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.SimpleCasesRegexes { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.IllegalYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FollowedDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NumberCombinedWithDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WeekOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearPeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ComplexDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RelativeDecadeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ReferenceDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.AgoRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LaterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CenturySuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthNumRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FirstLastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.OfYearRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DurationDateRestrictions { get; }
    public ItalianDatePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ItalianDatePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_SimpleCasesRegexes();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_IllegalYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FollowedDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NumberCombinedWithDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WeekOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearPeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ComplexDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RelativeDecadeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ReferenceDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_AgoRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LaterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CenturySuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthNumRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FirstLastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_OfYearRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DurationDateRestrictions();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianDatePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex UpcomingPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex PastPrefixRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex ThisPrefixRegex;
    public static Regex NextSuffixRegex;
    public static Regex PastSuffixRegex;
    public static Regex AfterNextSuffixRegex;
    public static Regex RelativeRegex;
    public static Regex UnspecificEndOfRangeRegex;
    public static Regex AmbiguousPointRangeRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private int <MinYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontBetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontSimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OneWordPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthNumWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegexYearFront>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllHalfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SeasonRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WhichWeekRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterEarlyPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekWithWeekDayRangeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPlusNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DecadeWithCenturyRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ComplexDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDecadeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ReferenceDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AgoRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LessThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MoreThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <CenturySuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TodayNowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FirstLastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SeasonMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SpecialYearPrefixesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <WrittenDecades>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <SpecialDecadeCases>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <InStringList>k__BackingField;
    public int MinYearNum { get; }
    public int MaxYearNum { get; }
    public string TokenBeforeDate { get; }
    public IDateExtractor DateExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser DurationParser { get; }
    public Regex MonthFrontBetweenRegex { get; }
    public Regex BetweenRegex { get; }
    public Regex MonthFrontSimpleCasesRegex { get; }
    public Regex SimpleCasesRegex { get; }
    public Regex OneWordPeriodRegex { get; }
    public Regex MonthWithYear { get; }
    public Regex MonthNumWithYear { get; }
    public Regex YearRegex { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex WeekOfMonthRegex { get; }
    public Regex WeekOfYearRegex { get; }
    public Regex QuarterRegex { get; }
    public Regex QuarterRegexYearFront { get; }
    public Regex AllHalfYearRegex { get; }
    public Regex SeasonRegex { get; }
    public Regex WhichWeekRegex { get; }
    public Regex WeekOfRegex { get; }
    public Regex MonthOfRegex { get; }
    public Regex InConnectorRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex RestOfDateRegex { get; }
    public Regex LaterEarlyPeriodRegex { get; }
    public Regex WeekWithWeekDayRangeRegex { get; }
    public Regex YearPlusNumberRegex { get; }
    public Regex DecadeWithCenturyRegex { get; }
    public Regex YearPeriodRegex { get; }
    public Regex ComplexDatePeriodRegex { get; }
    public Regex RelativeDecadeRegex { get; }
    public Regex ReferenceDatePeriodRegex { get; }
    public Regex AgoRegex { get; }
    public Regex LaterRegex { get; }
    public Regex LessThanRegex { get; }
    public Regex MoreThanRegex { get; }
    public Regex CenturySuffixRegex { get; }
    public Regex NowRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex TodayNowRegex { get; }
    public Regex FirstLastRegex { get; }
    public Regex OfYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.RelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.NextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.UnspecificEndOfRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.AmbiguousPointRangeRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; }
    public IImmutableDictionary`2<string, string> SpecialYearPrefixesMap { get; }
    public IImmutableDictionary`2<string, int> WrittenDecades { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IImmutableDictionary`2<string, int> SpecialDecadeCases { get; }
    public IImmutableList`1<string> InStringList { get; }
    public ItalianDatePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static ItalianDatePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public int get_MinYearNum();
    [CompilerGeneratedAttribute]
public int get_MaxYearNum();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontBetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontSimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OneWordPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthNumWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegexYearFront();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllHalfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SeasonRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WhichWeekRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterEarlyPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekWithWeekDayRangeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPlusNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DecadeWithCenturyRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ComplexDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDecadeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ReferenceDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AgoRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LessThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MoreThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_CenturySuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TodayNowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FirstLastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OfYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.get_RelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_NextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_UnspecificEndOfRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_AmbiguousPointRangeRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SpecialYearPrefixesMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_WrittenDecades();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_SpecialDecadeCases();
    [CompilerGeneratedAttribute]
public IImmutableList`1<string> get_InStringList();
    public sealed virtual int GetSwiftDayOrMonth(string text);
    public sealed virtual int GetSwiftYear(string text);
    public sealed virtual bool IsFuture(string text);
    public sealed virtual bool IsLastCardinal(string text);
    public sealed virtual bool IsMonthOnly(string text);
    public sealed virtual bool IsFortnight(string text);
    public sealed virtual bool IsMonthToDate(string text);
    public sealed virtual bool IsWeekend(string text);
    public sealed virtual bool IsWeekOnly(string text);
    public sealed virtual bool IsYearOnly(string text);
    public sealed virtual bool IsYearToDate(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianDateTimeAltExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex ThisPrefixRegex;
    public static Regex AmRegex;
    public static Regex PmRegex;
    public static Regex RangePrefixRegex;
    public static Regex[] RelativePrefixList;
    public static Regex[] AmPmRegexList;
    private static RegexOptions RegexFlags;
    private static Regex OrRegex;
    private static Regex DayRegex;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RelativePrefixList { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.AmPmRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.OrRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.DayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RangePrefixRegex { get; }
    public ItalianDateTimeAltExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ItalianDateTimeAltExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RelativePrefixList();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_AmPmRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_OrRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_DayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RangePrefixRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianDateTimeAltParserConfiguration : object {
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public ItalianDateTimeAltParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianDateTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrepositionRegex;
    public static Regex NowRegex;
    public static Regex SuffixRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeOfTodayAfterRegex;
    public static Regex TimeOfTodayBeforeRegex;
    public static Regex SimpleTimeOfTodayAfterRegex;
    public static Regex SimpleTimeOfTodayBeforeRegex;
    public static Regex SpecificEndOfRegex;
    public static Regex UnspecificEndOfRegex;
    public static Regex UnitRegex;
    public static Regex ConnectorRegex;
    public static Regex NumberAsTimeRegex;
    public static Regex DateNumberConnectorRegex;
    public static Regex YearSuffix;
    public static Regex YearRegex;
    public static Regex SuffixAfterRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    public IExtractor IntegerExtractor { get; }
    public IDateExtractor DatePointExtractor { get; }
    public IDateTimeExtractor TimePointExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SpecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnspecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NumberAsTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.DateNumberConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public ItalianDateTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ItalianDateTimeExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SpecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnspecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NumberAsTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_DateNumberConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    public sealed virtual bool IsConnector(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianDateTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AMTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PMTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayBeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnspecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DateNumberConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrepositionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex NowRegex { get; }
    public Regex AMTimeRegex { get; }
    public Regex PMTimeRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex SimpleTimeOfTodayAfterRegex { get; }
    public Regex SimpleTimeOfTodayBeforeRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex SpecificEndOfRegex { get; }
    public Regex UnspecificEndOfRegex { get; }
    public Regex UnitRegex { get; }
    public Regex DateNumberConnectorRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex ConnectorRegex { get; }
    public Regex YearRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public ItalianDateTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AMTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PMTimeRegex();
    [CompilerGeneratedAttribute]
public Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayBeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnspecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DateNumberConnectorRegex();
    [CompilerGeneratedAttribute]
public Regex get_PrepositionRegex();
    [CompilerGeneratedAttribute]
public Regex get_ConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual int GetHour(string text, int hour);
    public sealed virtual bool GetMatchedNowTimex(string text, String& timex);
    public sealed virtual int GetSwiftDay(string text);
    public sealed virtual bool ContainsAmbiguousToken(string text, string matchedText);
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianDateTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex SuffixRegex;
    public static Regex AfterRegex;
    public static Regex BeforeRegex;
    public static Regex TimeNumberCombinedWithUnit;
    public static Regex HyphenDateRegex;
    public static Regex PeriodTimeOfDayWithDateRegex;
    public static Regex RelativeTimeUnitRegex;
    public static Regex RestOfDateTimeRegex;
    public static Regex GeneralEndingRegex;
    public static Regex MiddlePauseRegex;
    public static Regex AmDescRegex;
    public static Regex PmDescRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex DateUnitRegex;
    public static Regex PrefixDayRegex;
    private static RegexOptions RegexFlags;
    private static Regex[] SimpleCases;
    private static Regex FromRegex;
    private static Regex ConnectorAndRegex;
    private static Regex RangePrefixRegex;
    private static Regex PeriodTimeOfDayRegex;
    private static Regex PeriodSpecificTimeOfDayRegex;
    private static Regex TimeUnitRegex;
    private static Regex TimeFollowedUnit;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex TillRegex { get; }
    public Regex FullTillRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex FollowedUnit { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RelativeTimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RestOfDateTimeRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex WeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PeriodTimeOfDayWithDateRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.MiddlePauseRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public string TokenBeforeDate { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor SingleDateExtractor { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor SingleDateTimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PrefixDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AfterRegex { get; }
    public ItalianDateTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ItalianDateTimePeriodExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual Regex get_PrepositionRegex();
    public sealed virtual Regex get_TillRegex();
    public Regex get_FullTillRegex();
    public sealed virtual Regex get_TimeOfDayRegex();
    public sealed virtual Regex get_SpecificTimeOfDayRegex();
    public sealed virtual Regex get_FollowedUnit();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RelativeTimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RestOfDateTimeRegex();
    public sealed virtual Regex get_PreviousPrefixRegex();
    public sealed virtual Regex get_NextPrefixRegex();
    public sealed virtual Regex get_FutureSuffixRegex();
    public sealed virtual Regex get_WeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PeriodTimeOfDayWithDateRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_MiddlePauseRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TasksmodeMealTimeofDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PrefixDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AfterRegex();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianDateTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MorningStartEndRegex;
    public static Regex AfternoonStartEndRegex;
    public static Regex EveningStartEndRegex;
    public static Regex NightStartEndRegex;
    public static Regex PastSuffixRegex;
    public static Regex NextSuffixRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HyphenDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodTimeOfDayWithDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeTimeUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrefixDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex HyphenDateRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnitRegex { get; }
    public Regex UnitRegex { get; }
    public Regex PeriodTimeOfDayWithDateRegex { get; }
    public Regex RelativeTimeUnitRegex { get; }
    public Regex RestOfDateTimeRegex { get; }
    public Regex AmDescRegex { get; }
    public Regex PmDescRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex PrefixDayRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public ItalianDateTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static ItalianDateTimePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HyphenDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodTimeOfDayWithDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeTimeUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PrefixDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_TasksmodeMealTimeofDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual bool GetMatchedTimeRange(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMin);
    public sealed virtual int GetSwiftPrefix(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianDurationExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DurationUnitRegex;
    public static Regex SuffixAndRegex;
    public static Regex DurationFollowedUnit;
    public static Regex NumberCombinedWithDurationUnit;
    public static Regex AnUnitRegex;
    public static Regex DuringRegex;
    public static Regex AllRegex;
    public static Regex HalfRegex;
    public static Regex ConjunctionRegex;
    public static Regex InexactNumberRegex;
    public static Regex InexactNumberUnitRegex;
    public static Regex RelativeDurationUnitRegex;
    public static Regex DurationConnectorRegex;
    public static Regex ModPrefixRegex;
    public static Regex ModSuffixRegex;
    public static Regex SpecialNumberUnitRegex;
    public static Regex MoreThanRegex;
    public static Regex LessThanRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.FollowedUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DuringRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AllRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.HalfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SuffixAndRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ConjunctionRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.RelativeDurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SpecialNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModSuffixRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public ItalianDurationExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ItalianDurationExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_FollowedUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DuringRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AllRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_HalfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SuffixAndRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ConjunctionRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_RelativeDurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SpecialNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModSuffixRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianDurationParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex InexactNumberUnitRegex2;
    public static Regex PrefixArticleRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AnUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DuringRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HalfDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FollowedUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConjunctionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, double> <DoubleNumbers>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.PrefixArticleRegex { get; }
    public Regex DuringRegex { get; }
    public Regex AllDateUnitRegex { get; }
    public Regex HalfDateUnitRegex { get; }
    public Regex SuffixAndRegex { get; }
    public Regex FollowedUnit { get; }
    public Regex ConjunctionRegex { get; }
    public Regex InexactNumberRegex { get; }
    public Regex InexactNumberUnitRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex SpecialNumberUnitRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public IImmutableDictionary`2<string, double> DoubleNumbers { get; }
    public ItalianDurationParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static ItalianDurationParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_PrefixArticleRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DuringRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HalfDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FollowedUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ConjunctionRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialNumberUnitRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, double> get_DoubleNumbers();
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianHolidayExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex YearRegex;
    public static Regex H1;
    public static Regex H2;
    public static Regex H3;
    public static Regex[] HolidayRegexList;
    private static RegexOptions RegexFlags;
    public IEnumerable`1<Regex> HolidayRegexes { get; }
    public ItalianHolidayExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ItalianHolidayExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_HolidayRegexes();
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianHolidayParserConfiguration : BaseHolidayParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private Regex <ThisPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    public Regex ThisPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public ItalianHolidayParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public Regex get_ThisPrefixRegex();
    [CompilerGeneratedAttribute]
public Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public Regex get_PreviousPrefixRegex();
    public virtual int GetSwiftYear(string text);
    public virtual string SanitizeHolidayToken(string holiday);
    protected virtual IDictionary`2<string, Func`2<int, DateTime>> InitHolidayFuncs();
    private static DateTime NewYear(int year);
    private static DateTime NewYearEve(int year);
    private static DateTime ChristmasDay(int year);
    private static DateTime ChristmasEve(int year);
    private static DateTime ValentinesDay(int year);
    private static DateTime WhiteLoverDay(int year);
    private static DateTime FoolDay(int year);
    private static DateTime GirlsDay(int year);
    private static DateTime TreePlantDay(int year);
    private static DateTime FemaleDay(int year);
    private static DateTime ChildrenDay(int year);
    private static DateTime YouthDay(int year);
    private static DateTime TeacherDay(int year);
    private static DateTime SinglesDay(int year);
    private static DateTime MaoBirthday(int year);
    private static DateTime InaugurationDay(int year);
    private static DateTime GroundhogDay(int year);
    private static DateTime StPatrickDay(int year);
    private static DateTime StGeorgeDay(int year);
    private static DateTime Mayday(int year);
    private static DateTime CincoDeMayoday(int year);
    private static DateTime BaptisteDay(int year);
    private static DateTime UsaIndependenceDay(int year);
    private static DateTime BastilleDay(int year);
    private static DateTime HalloweenDay(int year);
    private static DateTime AllHallowDay(int year);
    private static DateTime AllSoulsday(int year);
    private static DateTime GuyFawkesDay(int year);
    private static DateTime Veteransday(int year);
    private static DateTime FathersDay(int year);
    private static DateTime MothersDay(int year);
    private static DateTime MemorialDay(int year);
    private static DateTime Ferragosto(int year);
    private static DateTime LiberationDay(int year);
    private static DateTime RepublicDay(int year);
    private static DateTime EasterDay(int year);
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianMergedExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex SinceRegex;
    public static Regex TillRegex;
    public static Regex AroundRegex;
    public static Regex EqualRegex;
    public static Regex FromToRegex;
    public static Regex SingleAmbiguousMonthRegex;
    public static Regex PrepositionSuffixRegex;
    public static Regex AmbiguousRangeModifierPrefix;
    public static Regex NumberEndingPattern;
    public static Regex SuffixAfterRegex;
    public static Regex UnspecificDatePeriodRegex;
    public static Regex[] TermFilterRegexes;
    public static StringMatcher SuperfluousWordMatcher;
    public static Regex YearRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SetExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeZoneExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeListExtractor <DateTimeAltExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FailFastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeMentionFilters>k__BackingField;
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor SetExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeZoneExtractor TimeZoneExtractor { get; }
    public IDateTimeListExtractor DateTimeAltExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SinceRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AroundRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.EqualRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.FromToRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SingleAmbiguousMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PrepositionSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AmbiguousRangeModifierPrefix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PotentialAmbiguousRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.NumberEndingPattern { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuffixAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificTimePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.YearRegex { get; }
    public Regex FailFastRegex { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.TermFilterRegexes { get; }
    private StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.CheckBothBeforeAfter { get; }
    public Regex TasksModeMentionFilters { get; }
    public ItalianMergedExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ItalianMergedExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SetExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeZoneExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeListExtractor get_DateTimeAltExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SinceRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AroundRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_EqualRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_FromToRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SingleAmbiguousMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PrepositionSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AmbiguousRangeModifierPrefix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PotentialAmbiguousRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_NumberEndingPattern();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuffixAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificTimePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FailFastRegex();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_TermFilterRegexes();
    private sealed virtual override StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeMentionFilters();
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianMergedParserConfiguration : ItalianCommonDateTimeParserConfiguration {
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SinceRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AroundRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EqualRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <SetParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <SuperfluousWordMatcher>k__BackingField;
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex SinceRegex { get; }
    public Regex AroundRegex { get; }
    public Regex EqualRegex { get; }
    public Regex SuffixAfter { get; }
    public Regex YearRegex { get; }
    public IDateTimeParser SetParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public StringMatcher SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.CheckBothBeforeAfter { get; }
    public ItalianMergedParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SinceRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AroundRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EqualRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_SetParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.get_CheckBothBeforeAfter();
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianSetExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static string ExtractorName;
    public static Regex SetUnitRegex;
    public static Regex PeriodicRegex;
    public static Regex EachUnitRegex;
    public static Regex EachPrefixRegex;
    public static Regex EachDayRegex;
    public static Regex SetLastRegex;
    public static Regex SetWeekDayRegex;
    public static Regex SetEachRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.LastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.PeriodicRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.BeforeEachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetWeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetEachRegex { get; }
    public ItalianSetExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ItalianSetExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_LastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_PeriodicRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_BeforeEachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetWeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetEachRegex();
    public sealed virtual Tuple`2<string, int> WeekDayGroupMatchTuple(Match match);
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianSetParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static List`1<string> ThisTerms;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodicRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetEachRegex>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex EachPrefixRegex { get; }
    public Regex PeriodicRegex { get; }
    public Regex EachUnitRegex { get; }
    public Regex EachDayRegex { get; }
    public Regex SetWeekDayRegex { get; }
    public Regex SetEachRegex { get; }
    public ItalianSetParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static ItalianSetParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodicRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetEachRegex();
    public sealed virtual bool GetMatchedDailyTimex(string text, String& timex);
    public sealed virtual bool GetMatchedUnitTimex(string text, String& timex);
    public sealed virtual string WeekDayGroupMatchString(Match match);
    public sealed virtual string ReplaceValueInTextWithFutTerm(string text, string value);
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DescRegex;
    public static Regex HourNumRegex;
    public static Regex MinuteNumRegex;
    public static Regex OclockRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex LessThanOneHour;
    public static Regex FrTimeRegex;
    public static Regex TimePrefix;
    public static Regex TimeSuffix;
    public static Regex BasicTime;
    public static Regex MidnightRegex;
    public static Regex MidmorningRegex;
    public static Regex MidafternoonRegex;
    public static Regex MiddayRegex;
    public static Regex MidTimeRegex;
    public static Regex AtRegex;
    public static Regex IshRegex;
    public static Regex TimeUnitRegex;
    public static Regex ConnectNumRegex;
    public static Regex TimeBeforeAfterRegex;
    public static Regex[] TimeRegexList;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.IshRegex { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.AtRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeBeforeAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public string TimeTokenPrefix { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public ItalianTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ItalianTimeExtractorConfiguration();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_IshRegex();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_AtRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeBeforeAfterRegex();
    [CompilerGeneratedAttribute]
public IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    public sealed virtual string get_TimeTokenPrefix();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static Regex LunchRegex;
    private static Regex NightRegex;
    [CompilerGeneratedAttribute]
private string <TimeTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AtRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <TimeRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    public string TimeTokenPrefix { get; }
    public Regex AtRegex { get; }
    public IEnumerable`1<Regex> TimeRegexes { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public ItalianTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static ItalianTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TimeTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AtRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_TimeRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    public sealed virtual void AdjustByPrefix(string prefix, Int32& hour, Int32& min, Boolean& hasMin);
    public sealed virtual void AdjustBySuffix(string suffix, Int32& hour, Int32& min, Boolean& hasMin, Boolean& hasAm, Boolean& hasPm);
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static string ExtractorName;
    public static Regex TillRegex;
    public static Regex FullTillRegex;
    public static Regex HourRegex;
    public static Regex PeriodHourNumRegex;
    public static Regex PeriodDescRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex PureNumFromTo;
    public static Regex PureNumBetweenAnd;
    public static Regex SpecificTimeFromTo;
    public static Regex SpecificTimeBetweenAnd;
    public static Regex PrepositionRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeUnitRegex;
    public static Regex TimeFollowedUnit;
    public static Regex TimeNumberCombinedWithUnit;
    public static Regex GeneralEndingRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromRegex;
    private static Regex RangePrefixRegex;
    private static Regex ConnectorAndRegex;
    private static Regex BeforeRegex;
    private static Regex RangePmRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    public string TokenBeforeDate { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public IEnumerable`1<Regex> PureNumberRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    public ItalianTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static ItalianTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual IEnumerable`1<Regex> get_PureNumberRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    public static bool HasConnectorToken(string text);
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool IsConnectorToken(string text);
    public sealed virtual List`1<ExtractResult> ApplyPotentialPeriodAmbiguityHotfix(string text, List`1<ExtractResult> timePeriodErs);
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <GeneralEndingRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TillRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex SpecificTimeFromToRegex { get; }
    public Regex SpecificTimeBetweenAndRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex GeneralEndingRegex { get; }
    public Regex TillRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public ItalianTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_GeneralEndingRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TillRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual bool GetMatchedTimeRange(string text, String& timex, Int32& beginHour, Int32& endHour, Int32& endMin);
}
public class Microsoft.Recognizers.Text.DateTime.Italian.ItalianTimeZoneExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private Regex <DirectUtcRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LocationTimeSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <LocationMatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <TimeZoneMatcher>k__BackingField;
    public Regex DirectUtcRegex { get; }
    public Regex LocationTimeSuffixRegex { get; }
    public StringMatcher LocationMatcher { get; }
    public StringMatcher TimeZoneMatcher { get; }
    public List`1<string> AmbiguousTimezoneList { get; }
    public ItalianTimeZoneExtractorConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DirectUtcRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LocationTimeSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_LocationMatcher();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_TimeZoneMatcher();
    public sealed virtual List`1<string> get_AmbiguousTimezoneList();
}
public class Microsoft.Recognizers.Text.DateTime.Italian.TimeParser : BaseTimeParser {
    public TimeParser(ITimeParserConfiguration configuration);
    protected virtual DateTimeResolutionResult InternalParse(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseIsh(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.Italian.Utilities.ItalianDatetimeUtilityConfiguration : BaseDatetimeUtilityConfiguration {
}
public interface Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration {
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IEnumerable`1<Regex> TimeRegexList { get; }
    public Regex AtRegex { get; }
    public Regex IshRegex { get; }
    public Regex TimeBeforeAfterRegex { get; }
    public string TimeTokenPrefix { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public abstract virtual IDateTimeExtractor get_TimeZoneExtractor();
    public abstract virtual IEnumerable`1<Regex> get_TimeRegexList();
    public abstract virtual Regex get_AtRegex();
    public abstract virtual Regex get_IshRegex();
    public abstract virtual Regex get_TimeBeforeAfterRegex();
    public abstract virtual string get_TimeTokenPrefix();
    public abstract virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public interface Microsoft.Recognizers.Text.DateTime.ITimeParserConfiguration {
    public string TimeTokenPrefix { get; }
    public Regex AtRegex { get; }
    public IEnumerable`1<Regex> TimeRegexes { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public abstract virtual string get_TimeTokenPrefix();
    public abstract virtual Regex get_AtRegex();
    public abstract virtual IEnumerable`1<Regex> get_TimeRegexes();
    public abstract virtual IImmutableDictionary`2<string, int> get_Numbers();
    public abstract virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public abstract virtual IDateTimeParser get_TimeZoneParser();
    public abstract virtual void AdjustByPrefix(string prefix, Int32& hour, Int32& min, Boolean& hasMin);
    public abstract virtual void AdjustBySuffix(string suffix, Int32& hour, Int32& min, Boolean& hasMin, Boolean& hasAm, Boolean& hasPm);
}
public interface Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration {
    public string TokenBeforeDate { get; }
    public IExtractor IntegerExtractor { get; }
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public IEnumerable`1<Regex> PureNumberRegex { get; }
    public bool CheckBothBeforeAfter { get; }
    public Regex TillRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex GeneralEndingRegex { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public abstract virtual string get_TokenBeforeDate();
    public abstract virtual IExtractor get_IntegerExtractor();
    public abstract virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public abstract virtual IEnumerable`1<Regex> get_PureNumberRegex();
    public abstract virtual bool get_CheckBothBeforeAfter();
    public abstract virtual Regex get_TillRegex();
    public abstract virtual Regex get_TimeOfDayRegex();
    public abstract virtual Regex get_GeneralEndingRegex();
    public abstract virtual IDateTimeExtractor get_SingleTimeExtractor();
    public abstract virtual IDateTimeExtractor get_TimeZoneExtractor();
    public abstract virtual bool GetFromTokenIndex(string text, Int32& index);
    public abstract virtual bool IsConnectorToken(string text);
    public abstract virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public abstract virtual List`1<ExtractResult> ApplyPotentialPeriodAmbiguityHotfix(string text, List`1<ExtractResult> timePeriodErs);
}
public interface Microsoft.Recognizers.Text.DateTime.ITimePeriodParserConfiguration {
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex SpecificTimeFromToRegex { get; }
    public Regex SpecificTimeBetweenAndRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex GeneralEndingRegex { get; }
    public Regex TillRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public abstract virtual IDateTimeExtractor get_TimeExtractor();
    public abstract virtual IDateTimeParser get_TimeParser();
    public abstract virtual IExtractor get_IntegerExtractor();
    public abstract virtual IDateTimeParser get_TimeZoneParser();
    public abstract virtual Regex get_PureNumberFromToRegex();
    public abstract virtual Regex get_PureNumberBetweenAndRegex();
    public abstract virtual Regex get_SpecificTimeFromToRegex();
    public abstract virtual Regex get_SpecificTimeBetweenAndRegex();
    public abstract virtual Regex get_TimeOfDayRegex();
    public abstract virtual Regex get_GeneralEndingRegex();
    public abstract virtual Regex get_TillRegex();
    public abstract virtual IImmutableDictionary`2<string, int> get_Numbers();
    public abstract virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public abstract virtual bool GetMatchedTimeRange(string text, String& timex, Int32& beginHour, Int32& endHour, Int32& endMin);
}
public interface Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration {
    public Regex DirectUtcRegex { get; }
    public Regex LocationTimeSuffixRegex { get; }
    public StringMatcher LocationMatcher { get; }
    public StringMatcher TimeZoneMatcher { get; }
    public List`1<string> AmbiguousTimezoneList { get; }
    public abstract virtual Regex get_DirectUtcRegex();
    public abstract virtual Regex get_LocationTimeSuffixRegex();
    public abstract virtual StringMatcher get_LocationMatcher();
    public abstract virtual StringMatcher get_TimeZoneMatcher();
    public abstract virtual List`1<string> get_AmbiguousTimezoneList();
}
public interface Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration {
    public Dictionary`2<string, int> AbbrToMinMapping { get; }
    public Dictionary`2<string, int> FullToMinMapping { get; }
    public Regex DirectUtcRegex { get; }
    public string TimeZoneEndRegex { get; }
    public abstract virtual Dictionary`2<string, int> get_AbbrToMinMapping();
    public abstract virtual Dictionary`2<string, int> get_FullToMinMapping();
    public abstract virtual Regex get_DirectUtcRegex();
    public abstract virtual string get_TimeZoneEndRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseCommonDateTimeParserConfiguration : BaseCJKDateParserConfiguration {
    public JapaneseCommonDateTimeParserConfiguration(IDateTimeOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseDateExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex WeekDayRegex;
    public static Regex LunarRegex;
    public static Regex ThisRegex;
    public static Regex LastRegex;
    public static Regex NextRegex;
    public static Regex SpecialDayRegex;
    public static Regex WeekDayOfMonthRegex;
    public static Regex SpecialDate;
    public static Regex SpecialDayWithNumRegex;
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex WeekDayStartEnd;
    public static Regex DateTimePeriodUnitRegex;
    public static Regex RangeConnectorSymbolRegex;
    public static Regex MonthRegex;
    public static Regex DayRegex;
    public static Regex DayRegexInCJK;
    public static Regex DayRegexNumInCJK;
    public static Regex MonthNumRegex;
    public static Regex WeekDayAndDayRegex;
    public static Regex DurationRelativeDurationUnitRegex;
    public static Regex YearRegex;
    public static Regex RelativeRegex;
    public static Regex RelativeMonthRegex;
    public static Regex ZeroToNineIntegerRegexCJK;
    public static Regex YearInCJKRegex;
    public static Regex ThisRe;
    public static Regex LastRe;
    public static Regex NextRe;
    public static Regex UnitRegex;
    public static Regex DynastyYearRegex;
    public static string DynastyStartYear;
    public static ImmutableDictionary`2<string, int> DynastyYearMap;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <ImplicitDateList>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    public IEnumerable`1<Regex> DateRegexList { get; }
    public IEnumerable`1<Regex> ImplicitDateList { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.DateTimePeriodUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.WeekDayStartEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.RangeConnectorSymbolRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityDateFiltersDict { get; }
    public JapaneseDateExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static JapaneseDateExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_ImplicitDateList();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.get_DateTimePeriodUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.get_WeekDayStartEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.get_RangeConnectorSymbolRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityDateFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseDateParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PlusOneDayRegex;
    public static Regex MinusOneDayRegex;
    public static Regex PlusTwoDayRegex;
    public static Regex MinusTwoDayRegex;
    public static Regex PlusThreeDayRegex;
    public static Regex MinusThreeDayRegex;
    public static Regex PlusFourDayRegex;
    public static Regex NextMonthRegex;
    public static Regex LastMonthRegex;
    public static Regex LastWeekDayRegex;
    public static string ParserName;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRe>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRe>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <StrictWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LunarRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ThisRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationRelativeDurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayWithNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DynastyYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, int> <DynastyYearMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DynastyStartYear>k__BackingField;
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IEnumerable`1<Regex> DateRegexList { get; }
    public Regex SpecialDate { get; }
    public Regex NextRe { get; }
    public Regex LastRe { get; }
    public Regex SpecialDayRegex { get; }
    public Regex StrictWeekDayRegex { get; }
    public Regex LunarRegex { get; }
    public Regex UnitRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex NextRegex { get; }
    public Regex ThisRegex { get; }
    public Regex LastRegex { get; }
    public Regex WeekDayOfMonthRegex { get; }
    public Regex WeekDayAndDayRegex { get; }
    public Regex DurationRelativeDurationUnitRegex { get; }
    public Regex SpecialDayWithNumRegex { get; }
    public Regex DynastyYearRegex { get; }
    public ImmutableDictionary`2<string, int> DynastyYearMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public string DynastyStartYear { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration.LastWeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration.NextMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration.LastMonthRegex { get; }
    public JapaneseDateParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static JapaneseDateParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDate();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRe();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRe();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_StrictWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LunarRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ThisRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationRelativeDurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayWithNumRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DynastyYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<string, int> get_DynastyYearMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DynastyStartYear();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration.get_LastWeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration.get_NextMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration.get_LastMonthRegex();
    public sealed virtual int GetSwiftDay(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseDatePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex RangePrefixRegex;
    public static Regex RangeSuffixRegex;
    public static Regex StrictYearRegex;
    public static Regex YearInCJKRegex;
    public static Regex SimpleCasesRegex;
    public static Regex YearAndMonth;
    public static Regex PureNumYearAndMonth;
    public static Regex SimpleYearAndMonth;
    public static Regex OneWordPeriodRegex;
    public static Regex WeekOfMonthRegex;
    public static Regex WeekOfYearRegex;
    public static Regex WeekOfDateRegex;
    public static Regex MonthOfDateRegex;
    public static Regex WhichWeekRegex;
    public static Regex FollowedUnit;
    public static Regex NumberCombinedWithUnit;
    public static Regex YearToYear;
    public static Regex YearToYearSuffixRequired;
    public static Regex MonthToMonth;
    public static Regex MonthToMonthSuffixRequired;
    public static Regex DayToDay;
    public static Regex DayRegexForPeriod;
    public static Regex MonthDayRange;
    public static Regex YearMonthRange;
    public static Regex YearMonthDayRange;
    public static Regex PastRegex;
    public static Regex FutureRegex;
    public static Regex WeekWithWeekDayRangeRegex;
    public static Regex FirstLastOfYearRegex;
    public static Regex SeasonWithYear;
    public static Regex QuarterRegex;
    public static Regex DecadeRegex;
    public static Regex CenturyRegex;
    public static Regex SpecialMonthRegex;
    public static Regex SpecialYearRegex;
    public static Regex DayRegex;
    public static Regex DayRegexInCJK;
    public static Regex MonthNumRegex;
    public static Regex ThisRegex;
    public static Regex DateUnitRegex;
    public static Regex LastRegex;
    public static Regex NextRegex;
    public static Regex RelativeMonthRegex;
    public static Regex LaterEarlyPeriodRegex;
    public static Regex DatePointWithAgoAndLater;
    public static Regex ReferenceDatePeriodRegex;
    public static Regex ComplexDatePeriodRegex;
    public static Regex MonthRegex;
    public static Regex YearRegex;
    public static Regex YearRegexInNumber;
    public static Regex ZeroToNineIntegerRegexCJK;
    public static Regex MonthSuffixRegex;
    public static Regex UnitRegex;
    public static Regex DurationUnitRegex;
    public static Regex SeasonRegex;
    private static RegexOptions RegexFlags;
    private static Regex[] SimpleCasesRegexes;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    public IDateTimeExtractor DatePointExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.SimpleCasesRegexes { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.FutureRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.PastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.FirstLastOfYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.FollowedUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.RangePrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.RangeSuffixRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public JapaneseDatePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static JapaneseDatePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_SimpleCasesRegexes();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_FutureRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_PastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_FirstLastOfYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_FollowedUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_RangePrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_RangeSuffixRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseDatePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex WoMLastRegex;
    public static Regex WoMPreviousRegex;
    public static Regex WoMNextRegex;
    public static ImmutableDictionary`2<string, int> MonthOfYear;
    private static RegexOptions RegexFlags;
    private static Regex NextMonthRegex;
    private static Regex AfterNextMonthRegex;
    private static Regex LastMonthRegex;
    private static Regex NextYearRegex;
    private static Regex AfterNextYearRegex;
    private static Regex LastYearRegex;
    private static Regex ThisYearRegex;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, int> <DynastyYearMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SeasonMap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DynastyStartYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DynastyYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ThisRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearToYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearToYearSuffixRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterEarlyPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DatePointWithAgoAndLater>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ReferenceDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ComplexDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationRelativeDurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearInCJKRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthToMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthToMonthSuffixRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearAndMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumYearAndMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OneWordPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekWithWeekDayRangeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WhichWeekRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FirstLastOfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SeasonWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DecadeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <CenturyRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DayToDay>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthDayRange>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DayRegexForPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleYearAndMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialYearRegex>k__BackingField;
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser DateParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public ImmutableDictionary`2<string, int> DynastyYearMap { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.MonthOfYear { get; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; }
    public string DynastyStartYear { get; }
    public string TokenBeforeDate { get; }
    public Regex DynastyYearRegex { get; }
    public Regex SimpleCasesRegex { get; }
    public Regex ThisRegex { get; }
    public Regex NextRegex { get; }
    public Regex LastRegex { get; }
    public Regex YearToYear { get; }
    public Regex YearToYearSuffixRequired { get; }
    public Regex YearRegex { get; }
    public Regex RelativeRegex { get; }
    public Regex RelativeMonthRegex { get; }
    public Regex LaterEarlyPeriodRegex { get; }
    public Regex DatePointWithAgoAndLater { get; }
    public Regex ReferenceDatePeriodRegex { get; }
    public Regex ComplexDatePeriodRegex { get; }
    public Regex DurationRelativeDurationUnitRegex { get; }
    public Regex YearInCJKRegex { get; }
    public Regex MonthToMonth { get; }
    public Regex MonthToMonthSuffixRequired { get; }
    public Regex MonthRegex { get; }
    public Regex YearAndMonth { get; }
    public Regex PureNumYearAndMonth { get; }
    public Regex OneWordPeriodRegex { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex WeekWithWeekDayRangeRegex { get; }
    public Regex UnitRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex WeekOfMonthRegex { get; }
    public Regex WeekOfYearRegex { get; }
    public Regex WeekOfDateRegex { get; }
    public Regex MonthOfDateRegex { get; }
    public Regex WhichWeekRegex { get; }
    public Regex FirstLastOfYearRegex { get; }
    public Regex SeasonWithYear { get; }
    public Regex QuarterRegex { get; }
    public Regex DecadeRegex { get; }
    public Regex CenturyRegex { get; }
    public Regex DayToDay { get; }
    public Regex MonthDayRange { get; }
    public Regex DayRegexForPeriod { get; }
    public Regex SimpleYearAndMonth { get; }
    public Regex SpecialMonthRegex { get; }
    public Regex SpecialYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.WoMLastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.WoMPreviousRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.WoMNextRegex { get; }
    public int TwoNumYear { get; }
    public JapaneseDatePeriodParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static JapaneseDatePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<string, int> get_DynastyYearMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DynastyStartYear();
    public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DynastyYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ThisRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearToYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearToYearSuffixRequired();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterEarlyPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DatePointWithAgoAndLater();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ReferenceDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ComplexDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationRelativeDurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearInCJKRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthToMonth();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthToMonthSuffixRequired();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearAndMonth();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumYearAndMonth();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OneWordPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekWithWeekDayRangeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WhichWeekRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FirstLastOfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SeasonWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DecadeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_CenturyRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DayToDay();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthDayRange();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DayRegexForPeriod();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleYearAndMonth();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.get_WoMLastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.get_WoMPreviousRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.get_WoMNextRegex();
    public sealed virtual int get_TwoNumYear();
    public sealed virtual int ToMonthNumber(string monthStr);
    public sealed virtual bool IsMonthOnly(string text);
    public sealed virtual bool IsWeekend(string text);
    public sealed virtual bool IsWeekOnly(string text);
    public sealed virtual bool IsYearOnly(string text);
    public sealed virtual bool IsThisYear(string text);
    public sealed virtual bool IsYearToDate(string text);
    public sealed virtual bool IsLastYear(string text);
    public sealed virtual bool IsNextYear(string text);
    public sealed virtual bool IsYearAfterNext(string text);
    public sealed virtual bool IsYearBeforeLast(string text);
    public sealed virtual int GetSwiftMonth(string text);
    public sealed virtual int GetSwiftYear(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseDateTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static string ExtractorName;
    public static Regex PrepositionRegex;
    public static Regex NowRegex;
    public static Regex NightRegex;
    public static Regex TimeOfSpecialDayRegex;
    public static Regex TimeOfDayRegex;
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex DateTimePeriodUnitRegex;
    public static Regex DurationRelativeDurationUnitRegex;
    public static Regex AgoLaterRegex;
    public static Regex ConnectorRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    public IDateTimeExtractor DatePointExtractor { get; }
    public IDateTimeExtractor TimePointExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.PrepositionRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.NightRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.TimeOfSpecialDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.ConnectorRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityDateTimeFiltersDict { get; }
    public JapaneseDateTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static JapaneseDateTimeExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_PrepositionRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_NightRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_TimeOfSpecialDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_ConnectorRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityDateTimeFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseDateTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex LunarRegex;
    public static Regex LunarHolidayRegex;
    public static Regex SimpleAmRegex;
    public static Regex SimplePmRegex;
    private static RegexOptions RegexFlags;
    private static Regex NowTimeRegex;
    private static Regex RecentlyTimeRegex;
    private static Regex AsapTimeRegex;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfSpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DateTimePeriodUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationRelativeDurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AgoLaterRegex>k__BackingField;
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public ImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex NowRegex { get; }
    public Regex TimeOfSpecialDayRegex { get; }
    public Regex DateTimePeriodUnitRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex DurationRelativeDurationUnitRegex { get; }
    public Regex AgoLaterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.LunarRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.LunarHolidayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.SimpleAmRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.SimplePmRegex { get; }
    public JapaneseDateTimeParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static JapaneseDateTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfSpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DateTimePeriodUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationRelativeDurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AgoLaterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.get_LunarRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.get_LunarHolidayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.get_SimpleAmRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.get_SimplePmRegex();
    public sealed virtual bool GetMatchedNowTimex(string text, String& timex);
    public sealed virtual int GetSwiftDay(string text);
    public sealed virtual void AdjustByTimeOfDay(string matchStr, Int32& hour, Int32& swift);
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseDateTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex FromPrefixRegex;
    public static Regex FromSuffixRegex;
    public static Regex ConnectorRegex;
    public static Regex PrepositionRegex;
    public static Regex ZhijianRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex UnitRegex;
    public static Regex FollowedUnit;
    public static Regex PastRegex;
    public static Regex FutureRegex;
    public static Regex WeekDayRegex;
    public static Regex TimePeriodLeftRegex;
    public static Regex RelativeRegex;
    public static Regex RestOfDateRegex;
    public static Regex AmPmDescRegex;
    public static Regex BeforeAfterRegex;
    public static Regex HourRegex;
    public static Regex HourNumRegex;
    public static Regex ThisRegex;
    public static Regex LastRegex;
    public static Regex NextRegex;
    public static Regex NumberCombinedWithUnit;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor SingleDateExtractor { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor SingleDateTimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.PrepositionRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.SpecificTimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.FollowedUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.PastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.FutureRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.TimePeriodLeftRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.RelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.RestOfDateRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.AmPmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.ThisRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.BeforeAfterRegex { get; }
    public JapaneseDateTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static JapaneseDateTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_PrepositionRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_SpecificTimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_FollowedUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_PastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_FutureRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_TimePeriodLeftRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_RelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_RestOfDateRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_AmPmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_ThisRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_BeforeAfterRegex();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseDateTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MORegex;
    public static Regex MIRegex;
    public static Regex AFRegex;
    public static Regex EVRegex;
    public static Regex NIRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <CardinalParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimePeriodLeftRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmPmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser CardinalParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DurationParser { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex NextRegex { get; }
    public Regex LastRegex { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex TimePeriodLeftRegex { get; }
    public Regex UnitRegex { get; }
    public Regex RestOfDateRegex { get; }
    public Regex AmPmDescRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public JapaneseDateTimePeriodParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static JapaneseDateTimePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_CardinalParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimePeriodLeftRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AmPmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public sealed virtual bool GetMatchedTimeRangeAndSwift(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMinute, Int32& swift);
    public sealed virtual bool GetMatchedTimeRange(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMin);
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseDurationExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex YearRegex;
    public static Regex DurationUnitRegex;
    public static Regex AnUnitRegex;
    public static Regex DurationConnectorRegex;
    public static Regex AllRegex;
    public static Regex HalfRegex;
    public static Regex RelativeDurationUnitRegex;
    public static Regex DuringRegex;
    public static Regex SomeRegex;
    public static Regex MoreOrLessRegex;
    private static RegexOptions RegexFlags;
    private bool merge;
    [CompilerGeneratedAttribute]
private IExtractor <InternalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, long> <UnitValueMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Regex> <AmbiguityDurationFiltersDict>k__BackingField;
    public IExtractor InternalExtractor { get; }
    public Dictionary`2<string, string> UnitMap { get; }
    public Dictionary`2<string, long> UnitValueMap { get; }
    public Dictionary`2<Regex, Regex> AmbiguityDurationFiltersDict { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.DurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.DurationConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.AllRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.HalfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.RelativeDurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.DuringRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.SomeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.MoreOrLessRegex { get; }
    public JapaneseDurationExtractorConfiguration(IDateTimeOptionsConfiguration config, bool merge);
    private static JapaneseDurationExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_InternalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, long> get_UnitValueMap();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityDurationFiltersDict();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_DurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_DurationConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_AllRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_HalfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_RelativeDurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_DuringRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_SomeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_MoreOrLessRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseDurationParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <InternalParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SomeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MoreOrLessRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AnUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser InternalParser { get; }
    public Regex YearRegex { get; }
    public Regex SomeRegex { get; }
    public Regex MoreOrLessRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex AnUnitRegex { get; }
    public Regex DurationConnectorRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public JapaneseDurationParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_InternalParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SomeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MoreOrLessRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AnUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseHolidayExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex LunarHolidayRegex;
    public static Regex[] HolidayRegexList;
    private static RegexOptions RegexFlags;
    public IEnumerable`1<Regex> HolidayRegexes { get; }
    public JapaneseHolidayExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static JapaneseHolidayExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_HolidayRegexes();
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseHolidayParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Dictionary`2<string, Func`2<int, DateTime>> FixedHolidaysDict;
    public static Dictionary`2<string, Func`2<int, DateTime>> HolidayFuncDict;
    public static Dictionary`2<string, string> NoFixedTimex;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <HolidayRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LunarHolidayRegex>k__BackingField;
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    private Dictionary`2<string, Func`2<int, DateTime>> Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration.FixedHolidaysDict { get; }
    private Dictionary`2<string, Func`2<int, DateTime>> Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration.HolidayFuncDict { get; }
    private Dictionary`2<string, string> Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration.NoFixedTimex { get; }
    public IEnumerable`1<Regex> HolidayRegexList { get; }
    public Regex LunarHolidayRegex { get; }
    public JapaneseHolidayParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static JapaneseHolidayParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    private sealed virtual override Dictionary`2<string, Func`2<int, DateTime>> Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration.get_FixedHolidaysDict();
    private sealed virtual override Dictionary`2<string, Func`2<int, DateTime>> Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration.get_HolidayFuncDict();
    private sealed virtual override Dictionary`2<string, string> Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration.get_NoFixedTimex();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_HolidayRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LunarHolidayRegex();
    public sealed virtual int GetSwiftYear(string text);
    public sealed virtual string SanitizeYearToken(string yearStr);
    private static DateTime NewYear(int year);
    private static DateTime UsaIndependenceDay(int year);
    private static DateTime TeacherDay(int year);
    private static DateTime YouthDay(int year);
    private static DateTime ChildrenDay(int year);
    private static DateTime FemaleDay(int year);
    private static DateTime TreePlantDay(int year);
    private static DateTime LoverDay(int year);
    private static DateTime ChristmasDay(int year);
    private static DateTime ChristmasEve(int year);
    private static DateTime EasterDay(int year);
    private static DateTime FoolDay(int year);
    private static DateTime LaborDay(int year);
    private static DateTime HalloweenDay(int year);
    private static DateTime MidautumnDay(int year);
    private static DateTime SpringDay(int year);
    private static DateTime NewYearEve(int year);
    private static DateTime LanternDay(int year);
    private static DateTime QingMingDay(int year);
    private static DateTime DragonBoatDay(int year);
    private static DateTime BoysFestival(int year);
    private static DateTime JapNationalDay(int year);
    private static DateTime JapMilBuildDay(int year);
    private static DateTime GirlsDay(int year);
    private static DateTime SinglesDay(int year);
    private static DateTime ChongYangDay(int year);
    private static DateTime GetMothersDayOfYear(int year);
    private static DateTime GetFathersDayOfYear(int year);
    private static DateTime GetMartinLutherKingDayOfYear(int year);
    private static DateTime GetWashingtonsBirthdayOfYear(int year);
    private static DateTime GetCanberraDayOfYear(int year);
    private static DateTime GetMemorialDayOfYear(int year);
    private static DateTime GetLabourDayOfYear(int year);
    private static DateTime GetColumbusDayOfYear(int year);
    private static DateTime GetThanksgivingDayOfYear(int year);
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseMergedExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex BeforeRegex;
    public static Regex UnspecificDatePeriodRegex;
    public static Regex AfterRegex;
    public static Regex UntilRegex;
    public static Regex SincePrefixRegex;
    public static Regex SinceSuffixRegex;
    public static Regex AroundPrefixRegex;
    public static Regex AroundSuffixRegex;
    public static Regex EqualRegex;
    public static Regex PotentialAmbiguousRangeRegex;
    public static Regex AmbiguousRangeModifierPrefix;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SetExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor SetExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.UnspecificDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.SincePrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.SinceSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.AroundPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.AroundSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.UntilRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.EqualRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.PotentialAmbiguousRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.AmbiguousRangeModifierPrefix { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public JapaneseMergedExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static JapaneseMergedExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SetExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_UnspecificDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_SincePrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_SinceSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_AroundPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_AroundSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_UntilRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_EqualRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_PotentialAmbiguousRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_AmbiguousRangeModifierPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseMergedParserConfiguration : JapaneseCommonDateTimeParserConfiguration {
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SincePrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SinceSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AroundPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AroundSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UntilRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EqualRegex>k__BackingField;
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex SincePrefixRegex { get; }
    public Regex SinceSuffixRegex { get; }
    public Regex AroundPrefixRegex { get; }
    public Regex AroundSuffixRegex { get; }
    public Regex UntilRegex { get; }
    public Regex EqualRegex { get; }
    public JapaneseMergedParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SincePrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SinceSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AroundPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AroundSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UntilRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EqualRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseSetExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex UnitRegex;
    public static Regex EachUnitRegex;
    public static Regex EachPrefixRegex;
    public static Regex EachSuffixRegex;
    public static Regex LastRegex;
    public static Regex EachDayRegex;
    public static Regex EachDateUnitRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.LastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.EachPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.EachSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.EachUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.EachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.EachDateUnitRegex { get; }
    public JapaneseSetExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static JapaneseSetExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_LastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_EachPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_EachSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_EachUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_EachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_EachDateUnitRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseSetParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex DayTypeRegex;
    private static Regex WeekTypeRegex;
    private static Regex BiWeekTypeRegex;
    private static Regex MonthTypeRegex;
    private static Regex YearTypeRegex;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public Regex EachPrefixRegex { get; }
    public Regex EachUnitRegex { get; }
    public Regex EachDayRegex { get; }
    public Regex EachDateUnitRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public JapaneseSetParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static JapaneseSetParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public sealed virtual bool GetMatchedUnitTimex(string text, String& timex);
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static string HourNumRegex;
    public static string MinuteNumRegex;
    public static string SecondNumRegex;
    public static string HourCJKRegex;
    public static string MinuteCJKRegex;
    public static string SecondCJKRegex;
    public static string ClockDescRegex;
    public static string MinuteDescRegex;
    public static string SecondDescRegex;
    public static string BanHourPrefixRegex;
    public static string HourRegex;
    public static string MinuteRegex;
    public static string SecondRegex;
    public static string HalfRegex;
    public static string QuarterRegex;
    public static string CJKTimeRegex;
    public static string DigitTimeRegex;
    public static string DayDescRegex;
    public static string ApproximateDescPreffixRegex;
    public static string ApproximateDescSuffixRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TimeType> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Regex> <AmbiguityTimeFiltersDict>k__BackingField;
    public ImmutableDictionary`2<Regex, TimeType> Regexes { get; }
    public Dictionary`2<Regex, Regex> AmbiguityTimeFiltersDict { get; }
    public JapaneseTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static JapaneseTimeExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<Regex, TimeType> get_Regexes();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityTimeFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static TimeFunctions timeFunc;
    private static Dictionary`2<TimeType, TimeFunction> FunctionMap;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    public IDateTimeExtractor TimeExtractor { get; }
    private TimeFunctions Microsoft.Recognizers.Text.DateTime.ICJKTimeParserConfiguration.TimeFunc { get; }
    private Dictionary`2<TimeType, TimeFunction> Microsoft.Recognizers.Text.DateTime.ICJKTimeParserConfiguration.FunctionMap { get; }
    public JapaneseTimeParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static JapaneseTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    private sealed virtual override TimeFunctions Microsoft.Recognizers.Text.DateTime.ICJKTimeParserConfiguration.get_TimeFunc();
    private sealed virtual override Dictionary`2<TimeType, TimeFunction> Microsoft.Recognizers.Text.DateTime.ICJKTimeParserConfiguration.get_FunctionMap();
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static string TimePeriodConnectWords;
    public static string CJKTimeRegex;
    public static string LeftCJKTimeRegex;
    public static string RightCJKTimeRegex;
    public static string DigitTimeRegex;
    public static string LeftDigitTimeRegex;
    public static string RightDigitTimeRegex;
    public static string ShortLeftCJKTimeRegex;
    public static string ShortLeftDigitTimeRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, PeriodType> <Regexes>k__BackingField;
    public ImmutableDictionary`2<Regex, PeriodType> Regexes { get; }
    public Dictionary`2<Regex, Regex> AmbiguityTimePeriodFiltersDict { get; }
    public JapaneseTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static JapaneseTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<Regex, PeriodType> get_Regexes();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityTimePeriodFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Japanese.JapaneseTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static TimeFunctions timeFunc;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    private TimeFunctions Microsoft.Recognizers.Text.DateTime.ICJKTimePeriodParserConfiguration.TimeFunc { get; }
    public JapaneseTimePeriodParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static JapaneseTimePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    private sealed virtual override TimeFunctions Microsoft.Recognizers.Text.DateTime.ICJKTimePeriodParserConfiguration.get_TimeFunc();
    public sealed virtual bool GetMatchedTimexRange(string text, String& timex, Int32& beginHour, Int32& endHour, Int32& endMin);
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanCommonDateTimeParserConfiguration : BaseCJKDateParserConfiguration {
    public KoreanCommonDateTimeParserConfiguration(IDateTimeOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanDateExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex WeekDayRegex;
    public static Regex LunarRegex;
    public static Regex ThisRegex;
    public static Regex LastRegex;
    public static Regex NextRegex;
    public static Regex SpecialDayRegex;
    public static Regex WeekDayOfMonthRegex;
    public static Regex WeekDayAndDayRegex;
    public static Regex DurationRelativeDurationUnitRegex;
    public static Regex SpecialDayWithNumRegex;
    public static Regex SpecialDate;
    public static Regex DurationFromSpecialDayRegex;
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex WeekDayStartEnd;
    public static Regex DateTimePeriodUnitRegex;
    public static Regex RangeConnectorSymbolRegex;
    public static Regex MonthRegex;
    public static Regex DayRegex;
    public static Regex DayRegexInCJK;
    public static Regex DayRegexNumInCJK;
    public static Regex MonthNumRegex;
    public static Regex YearRegex;
    public static Regex RelativeRegex;
    public static Regex RelativeMonthRegex;
    public static Regex ZeroToNineIntegerRegexCJK;
    public static Regex YearInCJKRegex;
    public static Regex ThisRe;
    public static Regex LastRe;
    public static Regex NextRe;
    public static Regex UnitRegex;
    public static Regex DynastyYearRegex;
    public static string DynastyStartYear;
    public static ImmutableDictionary`2<string, int> DynastyYearMap;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <ImplicitDateList>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    public IEnumerable`1<Regex> DateRegexList { get; }
    public IEnumerable`1<Regex> ImplicitDateList { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.DateTimePeriodUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.WeekDayStartEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.RangeConnectorSymbolRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityDateFiltersDict { get; }
    public KoreanDateExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static KoreanDateExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_ImplicitDateList();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.get_DateTimePeriodUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.get_WeekDayStartEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateExtractorConfiguration.get_RangeConnectorSymbolRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityDateFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanDateParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex NextMonthRegex;
    public static Regex LastMonthRegex;
    public static Regex LastWeekDayRegex;
    public static string ParserName;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRe>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRe>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <StrictWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LunarRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ThisRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationRelativeDurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayWithNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DynastyYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, int> <DynastyYearMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DynastyStartYear>k__BackingField;
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IEnumerable`1<Regex> DateRegexList { get; }
    public Regex SpecialDate { get; }
    public Regex NextRe { get; }
    public Regex LastRe { get; }
    public Regex SpecialDayRegex { get; }
    public Regex StrictWeekDayRegex { get; }
    public Regex LunarRegex { get; }
    public Regex UnitRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex NextRegex { get; }
    public Regex ThisRegex { get; }
    public Regex LastRegex { get; }
    public Regex WeekDayOfMonthRegex { get; }
    public Regex WeekDayAndDayRegex { get; }
    public Regex DurationRelativeDurationUnitRegex { get; }
    public Regex SpecialDayWithNumRegex { get; }
    public Regex DynastyYearRegex { get; }
    public ImmutableDictionary`2<string, int> DynastyYearMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public string DynastyStartYear { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration.LastWeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration.NextMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration.LastMonthRegex { get; }
    public KoreanDateParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static KoreanDateParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDate();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRe();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRe();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_StrictWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LunarRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ThisRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationRelativeDurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayWithNumRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DynastyYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<string, int> get_DynastyYearMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DynastyStartYear();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration.get_LastWeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration.get_NextMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateParserConfiguration.get_LastMonthRegex();
    public sealed virtual int GetSwiftDay(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanDatePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex RangePrefixRegex;
    public static Regex RangeSuffixRegex;
    public static Regex StrictYearRegex;
    public static Regex YearInCJKRegex;
    public static Regex SimpleCasesRegex;
    public static Regex YearAndMonth;
    public static Regex PureNumYearAndMonth;
    public static Regex SimpleYearAndMonth;
    public static Regex OneWordPeriodRegex;
    public static Regex WeekOfMonthRegex;
    public static Regex WeekOfYearRegex;
    public static Regex WeekOfDateRegex;
    public static Regex MonthOfDateRegex;
    public static Regex WhichWeekRegex;
    public static Regex FollowedUnit;
    public static Regex NumberCombinedWithUnit;
    public static Regex YearToYear;
    public static Regex YearToYearSuffixRequired;
    public static Regex MonthToMonth;
    public static Regex MonthToMonthSuffixRequired;
    public static Regex DayToDay;
    public static Regex MonthDayRange;
    public static Regex WeekToWeek;
    public static Regex DayRegexForPeriod;
    public static Regex PastRegex;
    public static Regex FutureRegex;
    public static Regex WeekWithWeekDayRangeRegex;
    public static Regex FirstLastOfYearRegex;
    public static Regex SeasonWithYear;
    public static Regex QuarterRegex;
    public static Regex DecadeRegex;
    public static Regex CenturyRegex;
    public static Regex RelativePeriodRegex;
    public static Regex SpecialMonthRegex;
    public static Regex SpecialYearRegex;
    public static Regex DayRegex;
    public static Regex DayRegexInCJK;
    public static Regex MonthNumRegex;
    public static Regex ThisRegex;
    public static Regex DateUnitRegex;
    public static Regex LastRegex;
    public static Regex NextRegex;
    public static Regex RelativeMonthRegex;
    public static Regex LaterEarlyPeriodRegex;
    public static Regex DatePointWithAgoAndLater;
    public static Regex ReferenceDatePeriodRegex;
    public static Regex ComplexDatePeriodRegex;
    public static Regex MonthRegex;
    public static Regex YearRegex;
    public static Regex YearRegexInNumber;
    public static Regex ZeroToNineIntegerRegexCJK;
    public static Regex MonthSuffixRegex;
    public static Regex UnitRegex;
    public static Regex DurationUnitRegex;
    public static Regex SeasonRegex;
    private static RegexOptions RegexFlags;
    private static Regex[] SimpleCasesRegexes;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    public IDateTimeExtractor DatePointExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.SimpleCasesRegexes { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.FutureRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.PastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.FirstLastOfYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.FollowedUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.RangePrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.RangeSuffixRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public KoreanDatePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static KoreanDatePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_SimpleCasesRegexes();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_FutureRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_PastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_FirstLastOfYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_FollowedUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_RangePrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodExtractorConfiguration.get_RangeSuffixRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanDatePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex WoMLastRegex;
    public static Regex WoMPreviousRegex;
    public static Regex WoMNextRegex;
    public static ImmutableDictionary`2<string, int> MonthOfYear;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, int> <DynastyYearMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SeasonMap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DynastyStartYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DynastyYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ThisRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearToYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearToYearSuffixRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterEarlyPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DatePointWithAgoAndLater>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ReferenceDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ComplexDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationRelativeDurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearInCJKRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthToMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthToMonthSuffixRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearAndMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumYearAndMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OneWordPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekWithWeekDayRangeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WhichWeekRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FirstLastOfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SeasonWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DecadeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <CenturyRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DayToDay>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthDayRange>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DayRegexForPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleYearAndMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialYearRegex>k__BackingField;
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser DateParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IParser NumberParser { get; }
    public ImmutableDictionary`2<string, int> DynastyYearMap { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.MonthOfYear { get; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; }
    public string DynastyStartYear { get; }
    public string TokenBeforeDate { get; }
    public Regex DynastyYearRegex { get; }
    public Regex SimpleCasesRegex { get; }
    public Regex ThisRegex { get; }
    public Regex NextRegex { get; }
    public Regex LastRegex { get; }
    public Regex YearToYear { get; }
    public Regex YearToYearSuffixRequired { get; }
    public Regex YearRegex { get; }
    public Regex RelativeRegex { get; }
    public Regex RelativeMonthRegex { get; }
    public Regex LaterEarlyPeriodRegex { get; }
    public Regex DatePointWithAgoAndLater { get; }
    public Regex ReferenceDatePeriodRegex { get; }
    public Regex ComplexDatePeriodRegex { get; }
    public Regex DurationRelativeDurationUnitRegex { get; }
    public Regex YearInCJKRegex { get; }
    public Regex MonthToMonth { get; }
    public Regex MonthToMonthSuffixRequired { get; }
    public Regex MonthRegex { get; }
    public Regex YearAndMonth { get; }
    public Regex PureNumYearAndMonth { get; }
    public Regex OneWordPeriodRegex { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex WeekWithWeekDayRangeRegex { get; }
    public Regex UnitRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex WeekOfMonthRegex { get; }
    public Regex WeekOfYearRegex { get; }
    public Regex WeekOfDateRegex { get; }
    public Regex MonthOfDateRegex { get; }
    public Regex WhichWeekRegex { get; }
    public Regex FirstLastOfYearRegex { get; }
    public Regex SeasonWithYear { get; }
    public Regex QuarterRegex { get; }
    public Regex DecadeRegex { get; }
    public Regex CenturyRegex { get; }
    public Regex DayToDay { get; }
    public Regex MonthDayRange { get; }
    public Regex DayRegexForPeriod { get; }
    public Regex SimpleYearAndMonth { get; }
    public Regex SpecialMonthRegex { get; }
    public Regex SpecialYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.WoMLastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.WoMPreviousRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.WoMNextRegex { get; }
    public int TwoNumYear { get; }
    public KoreanDatePeriodParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static KoreanDatePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<string, int> get_DynastyYearMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DynastyStartYear();
    public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DynastyYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ThisRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearToYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearToYearSuffixRequired();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterEarlyPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DatePointWithAgoAndLater();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ReferenceDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ComplexDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationRelativeDurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearInCJKRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthToMonth();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthToMonthSuffixRequired();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearAndMonth();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumYearAndMonth();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OneWordPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekWithWeekDayRangeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WhichWeekRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FirstLastOfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SeasonWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DecadeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_CenturyRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DayToDay();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthDayRange();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DayRegexForPeriod();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleYearAndMonth();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.get_WoMLastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.get_WoMPreviousRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDatePeriodParserConfiguration.get_WoMNextRegex();
    public sealed virtual int get_TwoNumYear();
    public sealed virtual int ToMonthNumber(string monthStr);
    public sealed virtual bool IsMonthOnly(string text);
    public sealed virtual bool IsWeekend(string text);
    public sealed virtual bool IsWeekOnly(string text);
    public sealed virtual bool IsYearOnly(string text);
    public sealed virtual bool IsThisYear(string text);
    public sealed virtual bool IsYearToDate(string text);
    public sealed virtual bool IsLastYear(string text);
    public sealed virtual bool IsNextYear(string text);
    public sealed virtual bool IsYearAfterNext(string text);
    public sealed virtual bool IsYearBeforeLast(string text);
    public sealed virtual int GetSwiftMonth(string text);
    public sealed virtual int GetSwiftYear(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanDateTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static string ExtractorName;
    public static Regex PrepositionRegex;
    public static Regex NowRegex;
    public static Regex NightRegex;
    public static Regex TimeOfSpecialDayRegex;
    public static Regex TimeOfDayRegex;
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex DurationRelativeDurationUnitRegex;
    public static Regex AgoLaterRegex;
    public static Regex DateTimePeriodUnitRegex;
    public static Regex ConnectorRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    public IDateTimeExtractor DatePointExtractor { get; }
    public IDateTimeExtractor TimePointExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.PrepositionRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.NightRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.TimeOfSpecialDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.ConnectorRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityDateTimeFiltersDict { get; }
    public KoreanDateTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static KoreanDateTimeExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_PrepositionRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_NightRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_TimeOfSpecialDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeExtractorConfiguration.get_ConnectorRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityDateTimeFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanDateTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex LunarRegex;
    public static Regex LunarHolidayRegex;
    public static Regex SimpleAmRegex;
    public static Regex SimplePmRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfSpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DateTimePeriodUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationRelativeDurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AgoLaterRegex>k__BackingField;
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public ImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex NowRegex { get; }
    public Regex TimeOfSpecialDayRegex { get; }
    public Regex DateTimePeriodUnitRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex DurationRelativeDurationUnitRegex { get; }
    public Regex AgoLaterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.LunarRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.LunarHolidayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.SimpleAmRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.SimplePmRegex { get; }
    public KoreanDateTimeParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static KoreanDateTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfSpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DateTimePeriodUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationRelativeDurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AgoLaterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.get_LunarRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.get_LunarHolidayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.get_SimpleAmRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimeParserConfiguration.get_SimplePmRegex();
    public sealed virtual bool GetMatchedNowTimex(string text, String& timex);
    public sealed virtual int GetSwiftDay(string text);
    public sealed virtual void AdjustByTimeOfDay(string matchStr, Int32& hour, Int32& swift);
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanDateTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex PrepositionRegex;
    public static Regex ZhijianRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex UnitRegex;
    public static Regex FollowedUnit;
    public static Regex PastRegex;
    public static Regex FutureRegex;
    public static Regex WeekDayRegex;
    public static Regex TimePeriodLeftRegex;
    public static Regex RelativeRegex;
    public static Regex RestOfDateRegex;
    public static Regex AmPmDescRegex;
    public static Regex BeforeAfterRegex;
    public static Regex HourRegex;
    public static Regex HourNumRegex;
    public static Regex ThisRegex;
    public static Regex LastRegex;
    public static Regex NextRegex;
    public static Regex NumberCombinedWithUnit;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor SingleDateExtractor { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor SingleDateTimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.PrepositionRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.SpecificTimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.FollowedUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.PastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.FutureRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.TimePeriodLeftRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.RelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.RestOfDateRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.AmPmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.ThisRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.BeforeAfterRegex { get; }
    public KoreanDateTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static KoreanDateTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_PrepositionRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_SpecificTimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_FollowedUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_PastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_FutureRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_TimePeriodLeftRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_RelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_RestOfDateRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_AmPmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_ThisRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDateTimePeriodExtractorConfiguration.get_BeforeAfterRegex();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanDateTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MORegex;
    public static Regex MIRegex;
    public static Regex AFRegex;
    public static Regex EVRegex;
    public static Regex NIRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <CardinalParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimePeriodLeftRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmPmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser CardinalParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DurationParser { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex NextRegex { get; }
    public Regex LastRegex { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex TimePeriodLeftRegex { get; }
    public Regex UnitRegex { get; }
    public Regex RestOfDateRegex { get; }
    public Regex AmPmDescRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public KoreanDateTimePeriodParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static KoreanDateTimePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_CardinalParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimePeriodLeftRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AmPmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public sealed virtual bool GetMatchedTimeRangeAndSwift(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMinute, Int32& swift);
    public sealed virtual bool GetMatchedTimeRange(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMin);
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanDurationExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex YearRegex;
    public static Regex DurationUnitRegex;
    public static Regex AnUnitRegex;
    public static Regex DurationConnectorRegex;
    public static Regex AllRegex;
    public static Regex HalfRegex;
    public static Regex RelativeDurationUnitRegex;
    public static Regex DuringRegex;
    public static Regex SomeRegex;
    public static Regex MoreOrLessRegex;
    private static RegexOptions RegexFlags;
    private bool merge;
    [CompilerGeneratedAttribute]
private IExtractor <InternalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, long> <UnitValueMap>k__BackingField;
    public IExtractor InternalExtractor { get; }
    public Dictionary`2<string, string> UnitMap { get; }
    public Dictionary`2<string, long> UnitValueMap { get; }
    public Dictionary`2<Regex, Regex> AmbiguityDurationFiltersDict { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.DurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.DurationConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.AllRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.HalfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.RelativeDurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.DuringRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.SomeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.MoreOrLessRegex { get; }
    public KoreanDurationExtractorConfiguration(IDateTimeOptionsConfiguration config, bool merge);
    private static KoreanDurationExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_InternalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, long> get_UnitValueMap();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityDurationFiltersDict();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_DurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_DurationConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_AllRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_HalfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_RelativeDurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_DuringRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_SomeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKDurationExtractorConfiguration.get_MoreOrLessRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanDurationParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <InternalParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SomeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MoreOrLessRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AnUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser InternalParser { get; }
    public Regex YearRegex { get; }
    public Regex SomeRegex { get; }
    public Regex MoreOrLessRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex AnUnitRegex { get; }
    public Regex DurationConnectorRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public KoreanDurationParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_InternalParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SomeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MoreOrLessRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AnUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanHolidayExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex LunarHolidayRegex;
    public static Regex[] HolidayRegexList;
    private static RegexOptions RegexFlags;
    public IEnumerable`1<Regex> HolidayRegexes { get; }
    public KoreanHolidayExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static KoreanHolidayExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_HolidayRegexes();
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanHolidayParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Dictionary`2<string, Func`2<int, DateTime>> FixedHolidaysDict;
    public static Dictionary`2<string, Func`2<int, DateTime>> HolidayFuncDict;
    public static Dictionary`2<string, string> NoFixedTimex;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <HolidayRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LunarHolidayRegex>k__BackingField;
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    private Dictionary`2<string, Func`2<int, DateTime>> Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration.FixedHolidaysDict { get; }
    private Dictionary`2<string, Func`2<int, DateTime>> Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration.HolidayFuncDict { get; }
    private Dictionary`2<string, string> Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration.NoFixedTimex { get; }
    public IEnumerable`1<Regex> HolidayRegexList { get; }
    public Regex LunarHolidayRegex { get; }
    public KoreanHolidayParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static KoreanHolidayParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    private sealed virtual override Dictionary`2<string, Func`2<int, DateTime>> Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration.get_FixedHolidaysDict();
    private sealed virtual override Dictionary`2<string, Func`2<int, DateTime>> Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration.get_HolidayFuncDict();
    private sealed virtual override Dictionary`2<string, string> Microsoft.Recognizers.Text.DateTime.ICJKHolidayParserConfiguration.get_NoFixedTimex();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_HolidayRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LunarHolidayRegex();
    public sealed virtual int GetSwiftYear(string text);
    public sealed virtual string SanitizeYearToken(string yearStr);
    private static DateTime NewYear(int year);
    private static DateTime TeacherDay(int year);
    private static DateTime YouthDay(int year);
    private static DateTime ChildrenDay(int year);
    private static DateTime FemaleDay(int year);
    private static DateTime TreePlantDay(int year);
    private static DateTime LoverDay(int year);
    private static DateTime ChristmasEve(int year);
    private static DateTime ChristmasDay(int year);
    private static DateTime FoolDay(int year);
    private static DateTime LaborDay(int year);
    private static DateTime HalloweenDay(int year);
    private static DateTime MidautumnDay(int year);
    private static DateTime SpringDay(int year);
    private static DateTime NewYearEve(int year);
    private static DateTime LanternDay(int year);
    private static DateTime QingMingDay(int year);
    private static DateTime DragonBoatDay(int year);
    private static DateTime ChsNationalDay(int year);
    private static DateTime ChsMilBuildDay(int year);
    private static DateTime GirlsDay(int year);
    private static DateTime SinglesDay(int year);
    private static DateTime ChongYangDay(int year);
    private static DateTime GetMothersDayOfYear(int year);
    private static DateTime GetFathersDayOfYear(int year);
    private static DateTime GetMartinLutherKingDayOfYear(int year);
    private static DateTime GetWashingtonsBirthdayOfYear(int year);
    private static DateTime GetCanberraDayOfYear(int year);
    private static DateTime GetMemorialDayOfYear(int year);
    private static DateTime GetLabourDayOfYear(int year);
    private static DateTime GetColumbusDayOfYear(int year);
    private static DateTime GetThanksgivingDayOfYear(int year);
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanMergedExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex BeforeRegex;
    public static Regex UnspecificDatePeriodRegex;
    public static Regex AfterRegex;
    public static Regex UntilRegex;
    public static Regex SincePrefixRegex;
    public static Regex SinceSuffixRegex;
    public static Regex AroundPrefixRegex;
    public static Regex AroundSuffixRegex;
    public static Regex EqualRegex;
    public static Regex PotentialAmbiguousRangeRegex;
    public static Regex AmbiguousRangeModifierPrefix;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SetExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor SetExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.UnspecificDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.SincePrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.SinceSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.AroundPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.AroundSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.UntilRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.EqualRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.PotentialAmbiguousRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.AmbiguousRangeModifierPrefix { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public KoreanMergedExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static KoreanMergedExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SetExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_UnspecificDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_SincePrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_SinceSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_AroundPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_AroundSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_UntilRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_EqualRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_PotentialAmbiguousRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKMergedExtractorConfiguration.get_AmbiguousRangeModifierPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanMergedParserConfiguration : KoreanCommonDateTimeParserConfiguration {
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SincePrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SinceSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AroundPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AroundSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UntilRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EqualRegex>k__BackingField;
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex SincePrefixRegex { get; }
    public Regex SinceSuffixRegex { get; }
    public Regex AroundPrefixRegex { get; }
    public Regex AroundSuffixRegex { get; }
    public Regex UntilRegex { get; }
    public Regex EqualRegex { get; }
    public KoreanMergedParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SincePrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SinceSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AroundPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AroundSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UntilRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EqualRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanSetExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex UnitRegex;
    public static Regex EachUnitRegex;
    public static Regex EachPrefixRegex;
    public static Regex EachSuffixRegex;
    public static Regex LastRegex;
    public static Regex EachDayRegex;
    public static Regex EachDateUnitRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.LastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.EachPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.EachSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.EachUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.EachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.EachDateUnitRegex { get; }
    public KoreanSetExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static KoreanSetExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_LastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_EachPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_EachSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_EachUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_EachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ICJKSetExtractorConfiguration.get_EachDateUnitRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanSetParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public Regex EachPrefixRegex { get; }
    public Regex EachUnitRegex { get; }
    public Regex EachDayRegex { get; }
    public Regex EachDateUnitRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public KoreanSetParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    public sealed virtual bool GetMatchedUnitTimex(string text, String& timex);
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static string HourNumRegex;
    public static string MinuteNumRegex;
    public static string SecondNumRegex;
    public static string HourCJKRegex;
    public static string MinuteCJKRegex;
    public static string SecondCJKRegex;
    public static string ClockDescRegex;
    public static string MinuteDescRegex;
    public static string SecondDescRegex;
    public static string BanHourPrefixRegex;
    public static string HourRegex;
    public static string MinuteRegex;
    public static string SecondRegex;
    public static string HalfRegex;
    public static string QuarterRegex;
    public static string CJKTimeRegex;
    public static string DigitTimeRegex;
    public static string DayDescRegex;
    public static string ApproximateDescPreffixRegex;
    public static string ApproximateDescSuffixRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TimeType> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Regex> <AmbiguityTimeFiltersDict>k__BackingField;
    public ImmutableDictionary`2<Regex, TimeType> Regexes { get; }
    public Dictionary`2<Regex, Regex> AmbiguityTimeFiltersDict { get; }
    public KoreanTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static KoreanTimeExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<Regex, TimeType> get_Regexes();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityTimeFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static TimeFunctions timeFunc;
    private static Dictionary`2<TimeType, TimeFunction> FunctionMap;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    public IDateTimeExtractor TimeExtractor { get; }
    private TimeFunctions Microsoft.Recognizers.Text.DateTime.ICJKTimeParserConfiguration.TimeFunc { get; }
    private Dictionary`2<TimeType, TimeFunction> Microsoft.Recognizers.Text.DateTime.ICJKTimeParserConfiguration.FunctionMap { get; }
    public KoreanTimeParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static KoreanTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    private sealed virtual override TimeFunctions Microsoft.Recognizers.Text.DateTime.ICJKTimeParserConfiguration.get_TimeFunc();
    private sealed virtual override Dictionary`2<TimeType, TimeFunction> Microsoft.Recognizers.Text.DateTime.ICJKTimeParserConfiguration.get_FunctionMap();
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static string TimePeriodConnectWords;
    public static string CJKTimeRegex;
    public static string LeftCJKTimeRegex;
    public static string RightCJKTimeRegex;
    public static string DigitTimeRegex;
    public static string LeftDigitTimeRegex;
    public static string RightDigitTimeRegex;
    public static string ShortLeftCJKTimeRegex;
    public static string ShortLeftDigitTimeRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, PeriodType> <Regexes>k__BackingField;
    public ImmutableDictionary`2<Regex, PeriodType> Regexes { get; }
    public Dictionary`2<Regex, Regex> AmbiguityTimePeriodFiltersDict { get; }
    public KoreanTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static KoreanTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<Regex, PeriodType> get_Regexes();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityTimePeriodFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Korean.KoreanTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static TimeFunctions timeFunc;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    private TimeFunctions Microsoft.Recognizers.Text.DateTime.ICJKTimePeriodParserConfiguration.TimeFunc { get; }
    public KoreanTimePeriodParserConfiguration(ICJKCommonDateTimeParserConfiguration config);
    private static KoreanTimePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    private sealed virtual override TimeFunctions Microsoft.Recognizers.Text.DateTime.ICJKTimePeriodParserConfiguration.get_TimeFunc();
    public sealed virtual bool GetMatchedTimexRange(string text, String& timex, Int32& beginHour, Int32& endHour, Int32& endMin);
}
public static class Microsoft.Recognizers.Text.DateTime.MatchingUtil : object {
    private static RegexOptions RegexFlags;
    private static Regex InvalidDayNumberPrefix;
    private static TimeSpan RegexTimeOut { get; }
    private static MatchingUtil();
    private static TimeSpan get_RegexTimeOut();
    public static bool IsInvalidDayNumberPrefix(string prefix);
    public static bool GetAgoLaterIndex(string text, Regex regex, Int32& index, bool inSuffix);
    public static bool GetTermIndex(string text, Regex regex, Int32& index);
    public static bool ContainsAgoLaterIndex(string text, Regex regex, bool inSuffix);
    public static bool ContainsTermIndex(string text, Regex regex);
    public static string PreProcessTextRemoveSuperfluousWords(string text, StringMatcher matcher, List`1& superfluousWordMatches);
    public static List`1<ExtractResult> PostProcessRecoverSuperfluousWords(List`1<ExtractResult> extractResults, List`1<MatchResult`1<string>> superfluousWordMatches, string originText);
    public static List`1<MatchResult`1<string>> RemoveSubMatches(IEnumerable`1<MatchResult`1<string>> matchResults);
}
public static class Microsoft.Recognizers.Text.DateTime.MergedParserUtil : object {
    public static string ParserTypeName;
    public static string DateMinString;
    private static MergedParserUtil();
    public static List`1<DateTimeParseResult> FilterResults(string query, List`1<DateTimeParseResult> candidateResults);
    public static string CombineMod(string originalMod, string newMod);
    public static bool IsDurationWithAgoAndLater(ExtractResult er);
    public static void AddSingleDateTimeToResolution(Dictionary`2<string, string> resolutionDic, string type, string mod, Dictionary`2<string, string> res);
    public static void AddPeriodToResolution(Dictionary`2<string, string> resolutionDic, string startType, string endType, string mod, Dictionary`2<string, string> res);
    public static void AddAltPeriodToResolution(Dictionary`2<string, string> resolutionDic, string mod, Dictionary`2<string, string> res);
    public static void AddAltSingleDateTimeToResolution(Dictionary`2<string, string> resolutionDic, string type, string mod, Dictionary`2<string, string> res);
    public static bool AreUnresolvedDates(string startDate, string endDate);
    public static DateTimeParseResult SetInclusivePeriodEnd(DateTimeParseResult slot);
    public static DateTimeParseResult SetParseResult(DateTimeParseResult slot, bool hasMod, IDateTimeOptionsConfiguration config);
    public static string DetermineDateTimeType(string type, bool hasMod, IDateTimeOptionsConfiguration config);
    public static string DetermineSourceEntityType(string sourceType, string newType, bool hasMod);
    public static SortedDictionary`2<string, object> DateTimeResolution(DateTimeParseResult slot, IDateTimeOptionsConfiguration config);
    public static List`1<DateTimeParseResult> DateTimeResolutionForSplit(DateTimeParseResult slot, IDateTimeOptionsConfiguration config);
    internal static void AddResolutionFields(Dictionary`2<string, string> dic, string key, string value);
    internal static void AddResolutionFields(Dictionary`2<string, object> dic, string key, object value);
    internal static void ResolveAmpm(Dictionary`2<string, object> resolutionDic, string keyName);
    internal static void ResolveWeekOf(Dictionary`2<string, object> resolutionDic, string keyName);
    internal static Dictionary`2<string, string> GenerateResolution(string type, Dictionary`2<string, string> resolutionDic, string mod);
    private static string DetermineResolutionDateTimeType(Dictionary`2<string, string> pastResolutionStr);
}
public enum Microsoft.Recognizers.Text.DateTime.PeriodType : Enum {
    public int value__;
    public static PeriodType ShortTime;
    public static PeriodType FullTime;
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.DateTimePeriodParser : BaseDateTimePeriodParser {
    public DateTimePeriodParser(IDateTimePeriodParserConfiguration configuration);
    protected virtual DateTimeResolutionResult ParseSpecificTimeOfDay(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseCommonDateTimeParserConfiguration : BaseDateParserConfiguration {
    public PortugueseCommonDateTimeParserConfiguration(IDateTimeOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseDateExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MonthRegex;
    public static Regex DayRegex;
    public static Regex MonthNumRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex OnRegex;
    public static Regex RelaxedOnRegex;
    public static Regex ThisRegex;
    public static Regex LastDateRegex;
    public static Regex NextDateRegex;
    public static Regex SpecialDayRegex;
    public static Regex DateUnitRegex;
    public static Regex WeekDayOfMonthRegex;
    public static Regex SpecialDateRegex;
    public static Regex SpecialDayWithNumRegex;
    public static Regex RelativeWeekDayRegex;
    public static Regex ForTheRegex;
    public static Regex WeekDayAndDayOfMothRegex;
    public static Regex WeekDayAndDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex StrictRelativeRegex;
    public static Regex PrefixArticleRegex;
    public static Regex RangeConnectorSymbolRegex;
    public static Regex[] ImplicitDateList;
    public static Regex OfMonth;
    public static Regex MonthEnd;
    public static Regex WeekDayEnd;
    public static Regex WeekDayStart;
    public static Regex YearSuffix;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex InConnectorRegex;
    public static Regex SinceYearSuffixRegex;
    public static Regex RangeUnitRegex;
    public static Regex BeforeAfterRegex;
    public static ImmutableDictionary`2<string, int> DayOfWeek;
    public static ImmutableDictionary`2<string, int> MonthOfYear;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public IEnumerable`1<Regex> DateRegexList { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.ImplicitDateList { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DayOfWeek { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthOfYear { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.OfMonth { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayStart { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.ForTheRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayOfMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RelativeMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.StrictRelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.PrefixArticleRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.SinceYearSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeConnectorSymbolRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.BeforeAfterRegex { get; }
    public PortugueseDateExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static PortugueseDateExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_ImplicitDateList();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DayOfWeek();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthOfYear();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_OfMonth();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayStart();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_ForTheRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayOfMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RelativeMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_StrictRelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_PrefixArticleRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_SinceYearSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeConnectorSymbolRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_BeforeAfterRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseDateParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <DateTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OnRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayWithNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ThisRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ForTheRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayOfMothRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <StrictRelativeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UpcomingPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeDurationToDatePatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <SameDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public string DateTokenPrefix { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IEnumerable`1<Regex> DateRegexes { get; }
    public Regex OnRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex SpecialDayWithNumRegex { get; }
    public Regex NextRegex { get; }
    public Regex ThisRegex { get; }
    public Regex LastRegex { get; }
    public Regex UnitRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex MonthRegex { get; }
    public Regex WeekDayOfMonthRegex { get; }
    public Regex ForTheRegex { get; }
    public Regex WeekDayAndDayOfMothRegex { get; }
    public Regex WeekDayAndDayRegex { get; }
    public Regex RelativeMonthRegex { get; }
    public Regex StrictRelativeRegex { get; }
    public Regex YearSuffix { get; }
    public Regex RelativeWeekDayRegex { get; }
    public Regex RelativeDayRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex UpcomingPrefixRegex { get; }
    public Regex PastPrefixRegex { get; }
    public Regex BeforeAfterRegex { get; }
    public Regex TasksModeDurationToDatePatterns { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableList`1<string> SameDayTerms { get; }
    public IImmutableList`1<string> PlusOneDayTerms { get; }
    public IImmutableList`1<string> MinusOneDayTerms { get; }
    public IImmutableList`1<string> PlusTwoDayTerms { get; }
    public IImmutableList`1<string> MinusTwoDayTerms { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.CheckBothBeforeAfter { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public PortugueseDateParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DateTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OnRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayWithNumRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ThisRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ForTheRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayOfMothRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_StrictRelativeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearSuffix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UpcomingPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeDurationToDatePatterns();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_SameDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusTwoDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusTwoDayTerms();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual int GetSwiftMonthOrYear(string text);
    public sealed virtual bool IsCardinalLast(string text);
    public sealed virtual string Normalize(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseDatePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex DayRegex;
    public static Regex MonthNumRegex;
    public static Regex IllegalYearRegex;
    public static Regex YearRegex;
    public static Regex RelativeMonthRegex;
    public static Regex MonthRegex;
    public static Regex MonthSuffixRegex;
    public static Regex DateUnitRegex;
    public static Regex TimeUnitRegex;
    public static Regex PastRegex;
    public static Regex FutureRegex;
    public static Regex FutureSuffixRegex;
    public static Regex SimpleCasesRegex;
    public static Regex MonthFrontSimpleCasesRegex;
    public static Regex MonthFrontBetweenRegex;
    public static Regex DayBetweenRegex;
    public static Regex OneWordPeriodRegex;
    public static Regex MonthWithYearRegex;
    public static Regex MonthNumWithYearRegex;
    public static Regex WeekOfMonthRegex;
    public static Regex WeekOfYearRegex;
    public static Regex FollowedDateUnit;
    public static Regex NumberCombinedWithDateUnit;
    public static Regex QuarterRegex;
    public static Regex QuarterRegexYearFront;
    public static Regex AllHalfYearRegex;
    public static Regex SeasonRegex;
    public static Regex WhichWeekRegex;
    public static Regex WeekOfRegex;
    public static Regex MonthOfRegex;
    public static Regex RangeUnitRegex;
    public static Regex InConnectorRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex LaterEarlyPeriodRegex;
    public static Regex RestOfDateRegex;
    public static Regex WeekWithWeekDayRangeRegex;
    public static Regex YearPlusNumberRegex;
    public static Regex DecadeWithCenturyRegex;
    public static Regex YearPeriodRegex;
    public static Regex ComplexDatePeriodRegex;
    public static Regex RelativeDecadeRegex;
    public static Regex ReferenceDatePeriodRegex;
    public static Regex AgoRegex;
    public static Regex LaterRegex;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex CenturySuffixRegex;
    public static Regex NowRegex;
    public static Regex FirstLastRegex;
    public static Regex OfYearRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromRegex;
    private static Regex RangeConnectorRegex;
    private static Regex BetweenRegex;
    private static Regex[] SimpleCasesRegexes;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    public IDateExtractor DatePointExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.SimpleCasesRegexes { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.IllegalYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FollowedDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NumberCombinedWithDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WeekOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearPeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ComplexDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RelativeDecadeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ReferenceDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.AgoRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LaterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CenturySuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthNumRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FirstLastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.OfYearRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DurationDateRestrictions { get; }
    public PortugueseDatePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static PortugueseDatePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_SimpleCasesRegexes();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_IllegalYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FollowedDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NumberCombinedWithDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WeekOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearPeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ComplexDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RelativeDecadeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ReferenceDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_AgoRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LaterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CenturySuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthNumRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FirstLastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_OfYearRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DurationDateRestrictions();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseDatePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex NextPrefixRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex ThisPrefixRegex;
    public static Regex RelativeRegex;
    public static Regex UnspecificEndOfRangeRegex;
    public static Regex SpecialYearPrefixes;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private int <MinYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontBetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontSimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OneWordPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthNumWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegexYearFront>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllHalfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SeasonRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WhichWeekRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterEarlyPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekWithWeekDayRangeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPlusNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DecadeWithCenturyRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ComplexDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDecadeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ReferenceDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AgoRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LessThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MoreThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <CenturySuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TodayNowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FirstLastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SeasonMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SpecialYearPrefixesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <WrittenDecades>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <SpecialDecadeCases>k__BackingField;
    public int MinYearNum { get; }
    public int MaxYearNum { get; }
    public string TokenBeforeDate { get; }
    public IDateExtractor DateExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser DurationParser { get; }
    public Regex MonthFrontBetweenRegex { get; }
    public Regex BetweenRegex { get; }
    public Regex MonthFrontSimpleCasesRegex { get; }
    public Regex SimpleCasesRegex { get; }
    public Regex OneWordPeriodRegex { get; }
    public Regex MonthWithYear { get; }
    public Regex MonthNumWithYear { get; }
    public Regex YearRegex { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex WeekOfMonthRegex { get; }
    public Regex WeekOfYearRegex { get; }
    public Regex QuarterRegex { get; }
    public Regex QuarterRegexYearFront { get; }
    public Regex AllHalfYearRegex { get; }
    public Regex SeasonRegex { get; }
    public Regex WhichWeekRegex { get; }
    public Regex WeekOfRegex { get; }
    public Regex MonthOfRegex { get; }
    public Regex InConnectorRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex RestOfDateRegex { get; }
    public Regex LaterEarlyPeriodRegex { get; }
    public Regex WeekWithWeekDayRangeRegex { get; }
    public Regex YearPlusNumberRegex { get; }
    public Regex DecadeWithCenturyRegex { get; }
    public Regex YearPeriodRegex { get; }
    public Regex ComplexDatePeriodRegex { get; }
    public Regex RelativeDecadeRegex { get; }
    public Regex ReferenceDatePeriodRegex { get; }
    public Regex AgoRegex { get; }
    public Regex LaterRegex { get; }
    public Regex LessThanRegex { get; }
    public Regex MoreThanRegex { get; }
    public Regex CenturySuffixRegex { get; }
    public Regex NowRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex TodayNowRegex { get; }
    public Regex FirstLastRegex { get; }
    public Regex OfYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.NextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.RelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.UnspecificEndOfRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.AmbiguousPointRangeRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; }
    public IImmutableDictionary`2<string, string> SpecialYearPrefixesMap { get; }
    public IImmutableDictionary`2<string, int> WrittenDecades { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IImmutableDictionary`2<string, int> SpecialDecadeCases { get; }
    public PortugueseDatePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static PortugueseDatePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public int get_MinYearNum();
    [CompilerGeneratedAttribute]
public int get_MaxYearNum();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontBetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontSimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OneWordPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthNumWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegexYearFront();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllHalfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SeasonRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WhichWeekRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterEarlyPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekWithWeekDayRangeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPlusNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DecadeWithCenturyRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ComplexDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDecadeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ReferenceDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AgoRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LessThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MoreThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_CenturySuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TodayNowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FirstLastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OfYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_NextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.get_RelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_UnspecificEndOfRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_AmbiguousPointRangeRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SpecialYearPrefixesMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_WrittenDecades();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_SpecialDecadeCases();
    public sealed virtual int GetSwiftDayOrMonth(string text);
    public sealed virtual int GetSwiftYear(string text);
    public sealed virtual bool IsFuture(string text);
    public sealed virtual bool IsLastCardinal(string text);
    public sealed virtual bool IsMonthOnly(string text);
    public sealed virtual bool IsMonthToDate(string text);
    public sealed virtual bool IsWeekend(string text);
    public sealed virtual bool IsWeekOnly(string text);
    public sealed virtual bool IsFortnight(string text);
    public sealed virtual bool IsYearOnly(string text);
    public sealed virtual bool IsYearToDate(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseDateTimeAltExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex ThisPrefixRegex;
    public static Regex PastPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex AmRegex;
    public static Regex PmRegex;
    public static Regex RangePrefixRegex;
    public static Regex[] RelativePrefixList;
    public static Regex[] AmPmRegexList;
    private static RegexOptions RegexFlags;
    private static Regex OrRegex;
    private static Regex DayRegex;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RelativePrefixList { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.AmPmRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.OrRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.DayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RangePrefixRegex { get; }
    public PortugueseDateTimeAltExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static PortugueseDateTimeAltExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RelativePrefixList();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_AmPmRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_OrRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_DayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RangePrefixRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseDateTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrepositionRegex;
    public static Regex NowRegex;
    public static Regex SuffixRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeOfTodayAfterRegex;
    public static Regex TimeOfTodayBeforeRegex;
    public static Regex SimpleTimeOfTodayAfterRegex;
    public static Regex SimpleTimeOfTodayBeforeRegex;
    public static Regex SpecificEndOfRegex;
    public static Regex UnspecificEndOfRegex;
    public static Regex YearRegex;
    public static Regex YearSuffix;
    public static Regex UnitRegex;
    public static Regex ConnectorRegex;
    public static Regex NumberAsTimeRegex;
    public static Regex DateNumberConnectorRegex;
    public static Regex SuffixAfterRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    public IExtractor IntegerExtractor { get; }
    public IDateExtractor DatePointExtractor { get; }
    public IDateTimeExtractor TimePointExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SpecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnspecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NumberAsTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.DateNumberConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixAfterRegex { get; }
    public PortugueseDateTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static PortugueseDateTimeExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SpecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnspecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NumberAsTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_DateNumberConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixAfterRegex();
    public sealed virtual bool IsConnector(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseDateTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AMTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PMTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayBeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnspecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DateNumberConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex NowRegex { get; }
    public Regex AMTimeRegex { get; }
    public Regex PMTimeRegex { get; }
    public Regex SimpleTimeOfTodayAfterRegex { get; }
    public Regex SimpleTimeOfTodayBeforeRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex SpecificEndOfRegex { get; }
    public Regex UnspecificEndOfRegex { get; }
    public Regex UnitRegex { get; }
    public Regex DateNumberConnectorRegex { get; }
    public Regex YearRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public PortugueseDateTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AMTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PMTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayBeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnspecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DateNumberConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual int GetHour(string text, int hour);
    public sealed virtual bool GetMatchedNowTimex(string text, String& timex);
    public sealed virtual int GetSwiftDay(string text);
    public sealed virtual bool ContainsAmbiguousToken(string text, string matchedText);
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseDateTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex NumberCombinedWithUnit;
    public static Regex WeekDayRegex;
    public static Regex RestOfDateTimeRegex;
    public static Regex HyphenDateRegex;
    public static Regex PeriodTimeOfDayWithDateRegex;
    public static Regex RelativeTimeUnitRegex;
    public static Regex GeneralEndingRegex;
    public static Regex MiddlePauseRegex;
    public static Regex AmDescRegex;
    public static Regex PmDescRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex DateUnitRegex;
    public static Regex PrefixDayRegex;
    public static Regex SuffixRegex;
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromRegex;
    private static Regex RangeConnectorRegex;
    private static Regex BetweenRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    public string TokenBeforeDate { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor SingleDateExtractor { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor SingleDateTimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex TillRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex FollowedUnit { get; }
    public Regex TimeUnitRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex FutureSuffixRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PrefixDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.WeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PeriodTimeOfDayWithDateRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RelativeTimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RestOfDateTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.MiddlePauseRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public PortugueseDateTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static PortugueseDateTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual Regex get_PrepositionRegex();
    public sealed virtual Regex get_TillRegex();
    public sealed virtual Regex get_SpecificTimeOfDayRegex();
    public sealed virtual Regex get_TimeOfDayRegex();
    public sealed virtual Regex get_FollowedUnit();
    public sealed virtual Regex get_TimeUnitRegex();
    public sealed virtual Regex get_PreviousPrefixRegex();
    public sealed virtual Regex get_NextPrefixRegex();
    public sealed virtual Regex get_FutureSuffixRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PrefixDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_WeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PeriodTimeOfDayWithDateRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RelativeTimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RestOfDateTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_MiddlePauseRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TasksmodeMealTimeofDayRegex();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseDateTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HyphenDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodTimeOfDayWithDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeTimeUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrefixDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex HyphenDateRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnitRegex { get; }
    public Regex UnitRegex { get; }
    public Regex PeriodTimeOfDayWithDateRegex { get; }
    public Regex RelativeTimeUnitRegex { get; }
    public Regex RestOfDateTimeRegex { get; }
    public Regex AmDescRegex { get; }
    public Regex PmDescRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex PrefixDayRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public PortugueseDateTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HyphenDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodTimeOfDayWithDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeTimeUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PrefixDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_TasksmodeMealTimeofDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual bool GetMatchedTimeRange(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMin);
    public sealed virtual int GetSwiftPrefix(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseDurationExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex UnitRegex;
    public static Regex SuffixAndRegex;
    public static Regex FollowedUnit;
    public static Regex NumberCombinedWithUnit;
    public static Regex AnUnitRegex;
    public static Regex AllRegex;
    public static Regex DuringRegex;
    public static Regex HalfRegex;
    public static Regex ConjunctionRegex;
    public static Regex InexactNumberRegex;
    public static Regex InexactNumberUnitRegex;
    public static Regex RelativeDurationUnitRegex;
    public static Regex DurationUnitRegex;
    public static Regex DurationConnectorRegex;
    public static Regex ModPrefixRegex;
    public static Regex ModSuffixRegex;
    public static Regex SpecialNumberUnitRegex;
    public static Regex MoreThanRegex;
    public static Regex LessThanRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.FollowedUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DuringRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AllRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.HalfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SuffixAndRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ConjunctionRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.RelativeDurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SpecialNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModSuffixRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public PortugueseDurationExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static PortugueseDurationExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_FollowedUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DuringRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AllRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_HalfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SuffixAndRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ConjunctionRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_RelativeDurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SpecialNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModSuffixRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseDurationParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrefixArticleRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AnUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DuringRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HalfDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FollowedUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConjunctionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, double> <DoubleNumbers>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.PrefixArticleRegex { get; }
    public Regex DuringRegex { get; }
    public Regex AllDateUnitRegex { get; }
    public Regex HalfDateUnitRegex { get; }
    public Regex SuffixAndRegex { get; }
    public Regex FollowedUnit { get; }
    public Regex ConjunctionRegex { get; }
    public Regex InexactNumberRegex { get; }
    public Regex InexactNumberUnitRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex SpecialNumberUnitRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public IImmutableDictionary`2<string, double> DoubleNumbers { get; }
    public PortugueseDurationParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static PortugueseDurationParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_PrefixArticleRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DuringRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HalfDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FollowedUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ConjunctionRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialNumberUnitRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, double> get_DoubleNumbers();
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseHolidayExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex[] HolidayRegexList;
    private static RegexOptions RegexFlags;
    public IEnumerable`1<Regex> HolidayRegexes { get; }
    public PortugueseHolidayExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static PortugueseHolidayExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_HolidayRegexes();
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseHolidayParserConfiguration : BaseHolidayParserConfiguration {
    public PortugueseHolidayParserConfiguration(IDateTimeOptionsConfiguration config);
    public virtual int GetSwiftYear(string text);
    public virtual string SanitizeHolidayToken(string holiday);
    protected virtual IDictionary`2<string, Func`2<int, DateTime>> InitHolidayFuncs();
    private static DateTime NewYear(int year);
    private static DateTime NewYearEve(int year);
    private static DateTime ChristmasDay(int year);
    private static DateTime ChristmasEve(int year);
    private static DateTime FemaleDay(int year);
    private static DateTime ChildrenDay(int year);
    private static DateTime HalloweenDay(int year);
    private static DateTime TeacherDay(int year);
    private static DateTime Easter(int year);
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseMergedExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex SinceRegex;
    public static Regex AroundRegex;
    public static Regex EqualRegex;
    public static Regex FromToRegex;
    public static Regex SingleAmbiguousMonthRegex;
    public static Regex PrepositionSuffixRegex;
    public static Regex AmbiguousRangeModifierPrefix;
    public static Regex NumberEndingPattern;
    public static Regex SuffixAfterRegex;
    public static Regex UnspecificDatePeriodRegex;
    public static StringMatcher SuperfluousWordMatcher;
    public static Regex YearRegex;
    public static Regex[] TermFilterRegexes;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SetExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeZoneExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeListExtractor <DateTimeAltExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FailFastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeMentionFilters>k__BackingField;
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor SetExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeZoneExtractor TimeZoneExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IDateTimeListExtractor DateTimeAltExtractor { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SinceRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AroundRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.EqualRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.FromToRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SingleAmbiguousMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PrepositionSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AmbiguousRangeModifierPrefix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PotentialAmbiguousRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.NumberEndingPattern { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuffixAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificTimePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.YearRegex { get; }
    public Regex FailFastRegex { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.TermFilterRegexes { get; }
    private StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.CheckBothBeforeAfter { get; }
    public Regex TasksModeMentionFilters { get; }
    public PortugueseMergedExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static PortugueseMergedExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SetExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeZoneExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeListExtractor get_DateTimeAltExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SinceRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AroundRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_EqualRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_FromToRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SingleAmbiguousMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PrepositionSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AmbiguousRangeModifierPrefix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PotentialAmbiguousRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_NumberEndingPattern();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuffixAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificTimePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FailFastRegex();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_TermFilterRegexes();
    private sealed virtual override StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeMentionFilters();
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseMergedParserConfiguration : PortugueseCommonDateTimeParserConfiguration {
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SinceRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AroundRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EqualRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <SetParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <SuperfluousWordMatcher>k__BackingField;
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex SinceRegex { get; }
    public Regex AroundRegex { get; }
    public Regex EqualRegex { get; }
    public Regex SuffixAfter { get; }
    public Regex YearRegex { get; }
    public IDateTimeParser SetParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public StringMatcher SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.CheckBothBeforeAfter { get; }
    public PortugueseMergedParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SinceRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AroundRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EqualRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_SetParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.get_CheckBothBeforeAfter();
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseSetExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static string ExtractorName;
    public static Regex PeriodicRegex;
    public static Regex EachUnitRegex;
    public static Regex EachPrefixRegex;
    public static Regex EachDayRegex;
    public static Regex BeforeEachDayRegex;
    public static Regex SetWeekDayRegex;
    public static Regex SetEachRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.LastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.PeriodicRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.BeforeEachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetWeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetEachRegex { get; }
    public PortugueseSetExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static PortugueseSetExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_LastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_PeriodicRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_BeforeEachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetWeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetEachRegex();
    public sealed virtual Tuple`2<string, int> WeekDayGroupMatchTuple(Match match);
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseSetParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex DayTypeRegex;
    private static Regex WeekTypeRegex;
    private static Regex BiWeekTypeRegex;
    private static Regex MonthTypeRegex;
    private static Regex BiMonthTypeRegex;
    private static Regex QuarterTypeRegex;
    private static Regex SemiAnnualTypeRegex;
    private static Regex YearTypeRegex;
    private static List`1<string> ThisTerms;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodicRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetEachRegex>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex EachPrefixRegex { get; }
    public Regex PeriodicRegex { get; }
    public Regex EachUnitRegex { get; }
    public Regex EachDayRegex { get; }
    public Regex SetWeekDayRegex { get; }
    public Regex SetEachRegex { get; }
    public PortugueseSetParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static PortugueseSetParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodicRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetEachRegex();
    public sealed virtual bool GetMatchedDailyTimex(string text, String& timex);
    public sealed virtual bool GetMatchedUnitTimex(string text, String& timex);
    public sealed virtual string WeekDayGroupMatchString(Match match);
    public sealed virtual string ReplaceValueInTextWithFutTerm(string text, string value);
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DescRegex;
    public static Regex HourNumRegex;
    public static Regex MinuteNumRegex;
    public static Regex OclockRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex LessThanOneHour;
    public static Regex TensTimeRegex;
    public static Regex WrittenTimeRegex;
    public static Regex TimePrefix;
    public static Regex TimeSuffix;
    public static Regex BasicTime;
    public static Regex AtRegex;
    public static Regex ConnectNumRegex;
    public static Regex TimeBeforeAfterRegex;
    public static Regex[] TimeRegexList;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.IshRegex { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.AtRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeBeforeAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public string TimeTokenPrefix { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public PortugueseTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static PortugueseTimeExtractorConfiguration();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_IshRegex();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_AtRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeBeforeAfterRegex();
    [CompilerGeneratedAttribute]
public IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    public sealed virtual string get_TimeTokenPrefix();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private string <TimeTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AtRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MealTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <TimeRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    public string TimeTokenPrefix { get; }
    public Regex AtRegex { get; }
    public Regex MealTimeRegex { get; }
    public IEnumerable`1<Regex> TimeRegexes { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public PortugueseTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TimeTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AtRegex();
    [CompilerGeneratedAttribute]
public Regex get_MealTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_TimeRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    public sealed virtual void AdjustByPrefix(string prefix, Int32& hour, Int32& min, Boolean& hasMin);
    public sealed virtual void AdjustBySuffix(string suffix, Int32& hour, Int32& min, Boolean& hasMin, Boolean& hasAm, Boolean& hasPm);
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static string ExtractorName;
    public static Regex HourNumRegex;
    public static Regex PureNumFromTo;
    public static Regex PureNumBetweenAnd;
    public static Regex SpecificTimeFromTo;
    public static Regex SpecificTimeBetweenAnd;
    public static Regex UnitRegex;
    public static Regex FollowedUnit;
    public static Regex NumberCombinedWithUnit;
    public static Regex TimeOfDayRegex;
    public static Regex GeneralEndingRegex;
    public static Regex TillRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromRegex;
    private static Regex RangeConnectorRegex;
    private static Regex BetweenRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    public string TokenBeforeDate { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public IEnumerable`1<Regex> PureNumberRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    public PortugueseTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static PortugueseTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual IEnumerable`1<Regex> get_PureNumberRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool IsConnectorToken(string text);
    public sealed virtual List`1<ExtractResult> ApplyPotentialPeriodAmbiguityHotfix(string text, List`1<ExtractResult> timePeriodErs);
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <GeneralEndingRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TillRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex SpecificTimeFromToRegex { get; }
    public Regex SpecificTimeBetweenAndRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex GeneralEndingRegex { get; }
    public Regex TillRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public PortugueseTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_GeneralEndingRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TillRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual bool GetMatchedTimeRange(string text, String& timex, Int32& beginHour, Int32& endHour, Int32& endMin);
}
internal class Microsoft.Recognizers.Text.DateTime.Portuguese.PortugueseTimeZoneExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private Regex <DirectUtcRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LocationTimeSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <LocationMatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <TimeZoneMatcher>k__BackingField;
    public Regex DirectUtcRegex { get; }
    public Regex LocationTimeSuffixRegex { get; }
    public StringMatcher LocationMatcher { get; }
    public StringMatcher TimeZoneMatcher { get; }
    public List`1<string> AmbiguousTimezoneList { get; }
    public PortugueseTimeZoneExtractorConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DirectUtcRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LocationTimeSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_LocationMatcher();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_TimeZoneMatcher();
    public sealed virtual List`1<string> get_AmbiguousTimezoneList();
}
public class Microsoft.Recognizers.Text.DateTime.Portuguese.Utilities.PortugueseDatetimeUtilityConfiguration : BaseDatetimeUtilityConfiguration {
}
public class Microsoft.Recognizers.Text.DateTime.RangeTimexComponents : object {
    [CompilerGeneratedAttribute]
private string <BeginTimex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndTimex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DurationTimex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    public string BeginTimex { get; public set; }
    public string EndTimex { get; public set; }
    public string DurationTimex { get; public set; }
    public bool IsValid { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BeginTimex();
    [CompilerGeneratedAttribute]
public void set_BeginTimex(string value);
    [CompilerGeneratedAttribute]
public string get_EndTimex();
    [CompilerGeneratedAttribute]
public void set_EndTimex(string value);
    [CompilerGeneratedAttribute]
public string get_DurationTimex();
    [CompilerGeneratedAttribute]
public void set_DurationTimex(string value);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public void set_IsValid(bool value);
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.DateTimePeriodParser : BaseDateTimePeriodParser {
    public static Regex ConnectorRegex;
    private static RegexOptions RegexFlags;
    public DateTimePeriodParser(IDateTimePeriodParserConfiguration configuration);
    private static DateTimePeriodParser();
    protected virtual DateTimeResolutionResult ParseSpecificTimeOfDay(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishCommonDateTimeParserConfiguration : BaseDateParserConfiguration {
    public SpanishCommonDateTimeParserConfiguration(IDateTimeOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishDateExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MonthRegex;
    public static Regex DayRegex;
    public static Regex MonthNumRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex OnRegex;
    public static Regex RelaxedOnRegex;
    public static Regex ThisRegex;
    public static Regex LastDateRegex;
    public static Regex NextDateRegex;
    public static Regex SpecialDayRegex;
    public static Regex SpecialDayWithNumRegex;
    public static Regex DateUnitRegex;
    public static Regex WeekDayOfMonthRegex;
    public static Regex SpecialDateRegex;
    public static Regex RelativeWeekDayRegex;
    public static Regex ForTheRegex;
    public static Regex WeekDayAndDayOfMothRegex;
    public static Regex WeekDayAndDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex StrictRelativeRegex;
    public static Regex PrefixArticleRegex;
    public static Regex RangeConnectorSymbolRegex;
    public static Regex[] ImplicitDateList;
    public static Regex OfMonth;
    public static Regex MonthEnd;
    public static Regex WeekDayEnd;
    public static Regex WeekDayStart;
    public static Regex YearSuffix;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex InConnectorRegex;
    public static Regex SinceYearSuffixRegex;
    public static Regex RangeUnitRegex;
    public static Regex BeforeAfterRegex;
    public static ImmutableDictionary`2<string, int> DayOfWeek;
    public static ImmutableDictionary`2<string, int> MonthOfYear;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public IEnumerable`1<Regex> DateRegexList { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.ImplicitDateList { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DayOfWeek { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthOfYear { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.OfMonth { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayStart { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.ForTheRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayOfMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RelativeMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.StrictRelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.PrefixArticleRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.SinceYearSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeConnectorSymbolRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.BeforeAfterRegex { get; }
    public SpanishDateExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SpanishDateExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_ImplicitDateList();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DayOfWeek();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthOfYear();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_OfMonth();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayStart();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_ForTheRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayOfMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RelativeMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_StrictRelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_PrefixArticleRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_SinceYearSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeConnectorSymbolRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_BeforeAfterRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishDateParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <DateTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OnRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayWithNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ThisRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ForTheRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayOfMothRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <StrictRelativeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UpcomingPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeDurationToDatePatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <SameDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public string DateTokenPrefix { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IEnumerable`1<Regex> DateRegexes { get; }
    public Regex OnRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex SpecialDayWithNumRegex { get; }
    public Regex NextRegex { get; }
    public Regex ThisRegex { get; }
    public Regex LastRegex { get; }
    public Regex UnitRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex MonthRegex { get; }
    public Regex WeekDayOfMonthRegex { get; }
    public Regex ForTheRegex { get; }
    public Regex WeekDayAndDayOfMothRegex { get; }
    public Regex WeekDayAndDayRegex { get; }
    public Regex RelativeMonthRegex { get; }
    public Regex StrictRelativeRegex { get; }
    public Regex YearSuffix { get; }
    public Regex RelativeWeekDayRegex { get; }
    public Regex RelativeDayRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex UpcomingPrefixRegex { get; }
    public Regex PastPrefixRegex { get; }
    public Regex BeforeAfterRegex { get; }
    public Regex TasksModeDurationToDatePatterns { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableList`1<string> SameDayTerms { get; }
    public IImmutableList`1<string> PlusOneDayTerms { get; }
    public IImmutableList`1<string> MinusOneDayTerms { get; }
    public IImmutableList`1<string> PlusTwoDayTerms { get; }
    public IImmutableList`1<string> MinusTwoDayTerms { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.CheckBothBeforeAfter { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public SpanishDateParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DateTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OnRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayWithNumRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ThisRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ForTheRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayOfMothRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_StrictRelativeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearSuffix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UpcomingPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeDurationToDatePatterns();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_SameDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusTwoDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusTwoDayTerms();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual int GetSwiftMonthOrYear(string text);
    public sealed virtual bool IsCardinalLast(string text);
    public sealed virtual string Normalize(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishDatePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex DayRegex;
    public static Regex MonthNumRegex;
    public static Regex IllegalYearRegex;
    public static Regex YearRegex;
    public static Regex RelativeMonthRegex;
    public static Regex MonthRegex;
    public static Regex MonthSuffixRegex;
    public static Regex DateUnitRegex;
    public static Regex TimeUnitRegex;
    public static Regex PastRegex;
    public static Regex FutureRegex;
    public static Regex FutureSuffixRegex;
    public static Regex SimpleCasesRegex;
    public static Regex MonthFrontSimpleCasesRegex;
    public static Regex MonthFrontBetweenRegex;
    public static Regex DayBetweenRegex;
    public static Regex OneWordPeriodRegex;
    public static Regex MonthWithYearRegex;
    public static Regex MonthNumWithYearRegex;
    public static Regex WeekOfMonthRegex;
    public static Regex WeekOfYearRegex;
    public static Regex FollowedDateUnit;
    public static Regex NumberCombinedWithDateUnit;
    public static Regex QuarterRegex;
    public static Regex QuarterRegexYearFront;
    public static Regex AllHalfYearRegex;
    public static Regex SeasonRegex;
    public static Regex WhichWeekRegex;
    public static Regex WeekOfRegex;
    public static Regex MonthOfRegex;
    public static Regex RangeUnitRegex;
    public static Regex InConnectorRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex LaterEarlyPeriodRegex;
    public static Regex RestOfDateRegex;
    public static Regex WeekWithWeekDayRangeRegex;
    public static Regex YearPlusNumberRegex;
    public static Regex DecadeWithCenturyRegex;
    public static Regex YearPeriodRegex;
    public static Regex ComplexDatePeriodRegex;
    public static Regex RelativeDecadeRegex;
    public static Regex ReferenceDatePeriodRegex;
    public static Regex AgoRegex;
    public static Regex LaterRegex;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex CenturySuffixRegex;
    public static Regex NowRegex;
    public static Regex FirstLastRegex;
    public static Regex OfYearRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromRegex;
    private static Regex RangeConnectorRegex;
    private static Regex BetweenRegex;
    private static Regex[] SimpleCasesRegexes;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    public IDateExtractor DatePointExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.SimpleCasesRegexes { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.IllegalYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FollowedDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NumberCombinedWithDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WeekOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearPeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ComplexDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RelativeDecadeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ReferenceDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.AgoRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LaterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CenturySuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthNumRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FirstLastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.OfYearRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DurationDateRestrictions { get; }
    public SpanishDatePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SpanishDatePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_SimpleCasesRegexes();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_IllegalYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FollowedDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NumberCombinedWithDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WeekOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearPeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ComplexDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RelativeDecadeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ReferenceDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_AgoRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LaterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CenturySuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthNumRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FirstLastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_OfYearRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DurationDateRestrictions();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishDatePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex NextPrefixRegex;
    public static Regex NextSuffixRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex PreviousSuffixRegex;
    public static Regex ThisPrefixRegex;
    public static Regex AfterNextSuffixRegex;
    public static Regex RelativeSuffixRegex;
    public static Regex RelativeRegex;
    public static Regex UnspecificEndOfRangeRegex;
    public static Regex AmbiguousPointRangeRegex;
    public static Regex SpecialYearPrefixes;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private int <MinYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontBetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontSimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OneWordPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthNumWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegexYearFront>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllHalfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SeasonRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WhichWeekRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterEarlyPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekWithWeekDayRangeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPlusNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DecadeWithCenturyRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ComplexDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDecadeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ReferenceDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AgoRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LessThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MoreThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <CenturySuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TodayNowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FirstLastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SeasonMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SpecialYearPrefixesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <WrittenDecades>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <SpecialDecadeCases>k__BackingField;
    public int MinYearNum { get; }
    public int MaxYearNum { get; }
    public string TokenBeforeDate { get; }
    public IDateExtractor DateExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser DurationParser { get; }
    public Regex MonthFrontBetweenRegex { get; }
    public Regex BetweenRegex { get; }
    public Regex MonthFrontSimpleCasesRegex { get; }
    public Regex SimpleCasesRegex { get; }
    public Regex OneWordPeriodRegex { get; }
    public Regex MonthWithYear { get; }
    public Regex MonthNumWithYear { get; }
    public Regex YearRegex { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex WeekOfMonthRegex { get; }
    public Regex WeekOfYearRegex { get; }
    public Regex QuarterRegex { get; }
    public Regex QuarterRegexYearFront { get; }
    public Regex AllHalfYearRegex { get; }
    public Regex SeasonRegex { get; }
    public Regex WhichWeekRegex { get; }
    public Regex WeekOfRegex { get; }
    public Regex MonthOfRegex { get; }
    public Regex InConnectorRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex RestOfDateRegex { get; }
    public Regex LaterEarlyPeriodRegex { get; }
    public Regex WeekWithWeekDayRangeRegex { get; }
    public Regex YearPlusNumberRegex { get; }
    public Regex DecadeWithCenturyRegex { get; }
    public Regex YearPeriodRegex { get; }
    public Regex ComplexDatePeriodRegex { get; }
    public Regex RelativeDecadeRegex { get; }
    public Regex ReferenceDatePeriodRegex { get; }
    public Regex AgoRegex { get; }
    public Regex LaterRegex { get; }
    public Regex LessThanRegex { get; }
    public Regex MoreThanRegex { get; }
    public Regex CenturySuffixRegex { get; }
    public Regex NowRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex TodayNowRegex { get; }
    public Regex FirstLastRegex { get; }
    public Regex OfYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.NextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.RelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.UnspecificEndOfRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.AmbiguousPointRangeRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; }
    public IImmutableDictionary`2<string, string> SpecialYearPrefixesMap { get; }
    public IImmutableDictionary`2<string, int> WrittenDecades { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IImmutableDictionary`2<string, int> SpecialDecadeCases { get; }
    public SpanishDatePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static SpanishDatePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public int get_MinYearNum();
    [CompilerGeneratedAttribute]
public int get_MaxYearNum();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontBetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontSimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OneWordPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthNumWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegexYearFront();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllHalfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SeasonRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WhichWeekRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterEarlyPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekWithWeekDayRangeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPlusNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DecadeWithCenturyRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ComplexDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDecadeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ReferenceDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AgoRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LessThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MoreThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_CenturySuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TodayNowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FirstLastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OfYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_NextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.get_RelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_UnspecificEndOfRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_AmbiguousPointRangeRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SpecialYearPrefixesMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_WrittenDecades();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_SpecialDecadeCases();
    public sealed virtual int GetSwiftDayOrMonth(string text);
    public sealed virtual int GetSwiftYear(string text);
    public sealed virtual bool IsFuture(string text);
    public sealed virtual bool IsLastCardinal(string text);
    public sealed virtual bool IsMonthOnly(string text);
    public sealed virtual bool IsMonthToDate(string text);
    public sealed virtual bool IsWeekend(string text);
    public sealed virtual bool IsWeekOnly(string text);
    public sealed virtual bool IsFortnight(string text);
    public sealed virtual bool IsYearOnly(string text);
    public sealed virtual bool IsYearToDate(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishDateTimeAltExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex ThisPrefixRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex AmRegex;
    public static Regex PmRegex;
    public static Regex RangePrefixRegex;
    public static Regex[] RelativePrefixList;
    public static Regex[] AmPmRegexList;
    private static RegexOptions RegexFlags;
    private static Regex OrRegex;
    private static Regex DayRegex;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RelativePrefixList { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.AmPmRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.OrRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.DayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RangePrefixRegex { get; }
    public SpanishDateTimeAltExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SpanishDateTimeAltExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RelativePrefixList();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_AmPmRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_OrRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_DayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RangePrefixRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishDateTimeAltParserConfiguration : object {
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public SpanishDateTimeAltParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishDateTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrepositionRegex;
    public static Regex NowRegex;
    public static Regex SuffixRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeOfTodayAfterRegex;
    public static Regex TimeOfTodayBeforeRegex;
    public static Regex SimpleTimeOfTodayAfterRegex;
    public static Regex SimpleTimeOfTodayBeforeRegex;
    public static Regex SpecificEndOfRegex;
    public static Regex UnspecificEndOfRegex;
    public static Regex YearRegex;
    public static Regex YearSuffix;
    public static Regex UnitRegex;
    public static Regex ConnectorRegex;
    public static Regex NumberAsTimeRegex;
    public static Regex DateNumberConnectorRegex;
    public static Regex SuffixAfterRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    public IExtractor IntegerExtractor { get; }
    public IDateExtractor DatePointExtractor { get; }
    public IDateTimeExtractor TimePointExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SpecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnspecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NumberAsTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.DateNumberConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixAfterRegex { get; }
    public SpanishDateTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SpanishDateTimeExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SpecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnspecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NumberAsTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_DateNumberConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixAfterRegex();
    public sealed virtual bool IsConnector(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishDateTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AMTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PMTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NightTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastNightTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RecentlyTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AsapTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayBeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnspecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DateNumberConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrepositionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex NowRegex { get; }
    public Regex AMTimeRegex { get; }
    public Regex PMTimeRegex { get; }
    public Regex NightTimeRegex { get; }
    public Regex LastNightTimeRegex { get; }
    public Regex NowTimeRegex { get; }
    public Regex RecentlyTimeRegex { get; }
    public Regex AsapTimeRegex { get; }
    public Regex SimpleTimeOfTodayAfterRegex { get; }
    public Regex SimpleTimeOfTodayBeforeRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex SpecificEndOfRegex { get; }
    public Regex UnspecificEndOfRegex { get; }
    public Regex UnitRegex { get; }
    public Regex DateNumberConnectorRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex ConnectorRegex { get; }
    public Regex YearRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public SpanishDateTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AMTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PMTimeRegex();
    [CompilerGeneratedAttribute]
public Regex get_NightTimeRegex();
    [CompilerGeneratedAttribute]
public Regex get_LastNightTimeRegex();
    [CompilerGeneratedAttribute]
public Regex get_NowTimeRegex();
    [CompilerGeneratedAttribute]
public Regex get_RecentlyTimeRegex();
    [CompilerGeneratedAttribute]
public Regex get_AsapTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayBeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnspecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DateNumberConnectorRegex();
    [CompilerGeneratedAttribute]
public Regex get_PrepositionRegex();
    [CompilerGeneratedAttribute]
public Regex get_ConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual int GetHour(string text, int hour);
    public sealed virtual bool GetMatchedNowTimex(string text, String& timex);
    public sealed virtual int GetSwiftDay(string text);
    public sealed virtual bool ContainsAmbiguousToken(string text, string matchedText);
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishDateTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex NumberCombinedWithUnit;
    public static Regex WeekDayRegex;
    public static Regex RestOfDateTimeRegex;
    public static Regex HyphenDateRegex;
    public static Regex PeriodTimeOfDayWithDateRegex;
    public static Regex RelativeTimeUnitRegex;
    public static Regex GeneralEndingRegex;
    public static Regex MiddlePauseRegex;
    public static Regex AmDescRegex;
    public static Regex PmDescRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex DateUnitRegex;
    public static Regex PrefixDayRegex;
    public static Regex SuffixRegex;
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex PeriodTimeOfDayRegex;
    public static Regex PeriodSpecificTimeOfDayRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromRegex;
    private static Regex RangeConnectorRegex;
    private static Regex BetweenRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    public string TokenBeforeDate { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor SingleDateExtractor { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor SingleDateTimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex TillRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex FollowedUnit { get; }
    public Regex TimeUnitRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex FutureSuffixRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PrefixDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.WeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PeriodTimeOfDayWithDateRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RelativeTimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RestOfDateTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.MiddlePauseRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public SpanishDateTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SpanishDateTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual Regex get_PrepositionRegex();
    public sealed virtual Regex get_TillRegex();
    public sealed virtual Regex get_TimeOfDayRegex();
    public sealed virtual Regex get_SpecificTimeOfDayRegex();
    public sealed virtual Regex get_FollowedUnit();
    public sealed virtual Regex get_TimeUnitRegex();
    public sealed virtual Regex get_PreviousPrefixRegex();
    public sealed virtual Regex get_NextPrefixRegex();
    public sealed virtual Regex get_FutureSuffixRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PrefixDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_WeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PeriodTimeOfDayWithDateRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RelativeTimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RestOfDateTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_MiddlePauseRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TasksmodeMealTimeofDayRegex();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishDateTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex EarlyMorningStartEndRegex;
    public static Regex MorningStartEndRegex;
    public static Regex AfternoonStartEndRegex;
    public static Regex EveningStartEndRegex;
    public static Regex NightStartEndRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HyphenDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodTimeOfDayWithDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeTimeUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrefixDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex HyphenDateRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnitRegex { get; }
    public Regex UnitRegex { get; }
    public Regex PeriodTimeOfDayWithDateRegex { get; }
    public Regex RelativeTimeUnitRegex { get; }
    public Regex RestOfDateTimeRegex { get; }
    public Regex AmDescRegex { get; }
    public Regex PmDescRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex PrefixDayRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public SpanishDateTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static SpanishDateTimePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HyphenDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodTimeOfDayWithDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeTimeUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PrefixDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_TasksmodeMealTimeofDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual bool GetMatchedTimeRange(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMin);
    public sealed virtual int GetSwiftPrefix(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishDurationExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex UnitRegex;
    public static Regex SuffixAndRegex;
    public static Regex FollowedUnit;
    public static Regex NumberCombinedWithUnit;
    public static Regex AnUnitRegex;
    public static Regex DuringRegex;
    public static Regex AllRegex;
    public static Regex HalfRegex;
    public static Regex ConjunctionRegex;
    public static Regex InexactNumberRegex;
    public static Regex InexactNumberUnitRegex;
    public static Regex RelativeDurationUnitRegex;
    public static Regex DurationUnitRegex;
    public static Regex DurationConnectorRegex;
    public static Regex ModPrefixRegex;
    public static Regex ModSuffixRegex;
    public static Regex SpecialNumberUnitRegex;
    public static Regex MoreThanRegex;
    public static Regex LessThanRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.FollowedUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DuringRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AllRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.HalfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SuffixAndRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ConjunctionRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.RelativeDurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SpecialNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModSuffixRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public SpanishDurationExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SpanishDurationExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_FollowedUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DuringRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AllRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_HalfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SuffixAndRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ConjunctionRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_RelativeDurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SpecialNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModSuffixRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishDurationParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrefixArticleRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AnUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DuringRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HalfDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FollowedUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConjunctionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, double> <DoubleNumbers>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.PrefixArticleRegex { get; }
    public Regex DuringRegex { get; }
    public Regex AllDateUnitRegex { get; }
    public Regex HalfDateUnitRegex { get; }
    public Regex SuffixAndRegex { get; }
    public Regex FollowedUnit { get; }
    public Regex ConjunctionRegex { get; }
    public Regex InexactNumberRegex { get; }
    public Regex InexactNumberUnitRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex SpecialNumberUnitRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public IImmutableDictionary`2<string, double> DoubleNumbers { get; }
    public SpanishDurationParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static SpanishDurationParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_PrefixArticleRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DuringRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HalfDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FollowedUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ConjunctionRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialNumberUnitRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, double> get_DoubleNumbers();
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishHolidayExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex[] HolidayRegexList;
    private static RegexOptions RegexFlags;
    public IEnumerable`1<Regex> HolidayRegexes { get; }
    public SpanishHolidayExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SpanishHolidayExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_HolidayRegexes();
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishHolidayParserConfiguration : BaseHolidayParserConfiguration {
    public SpanishHolidayParserConfiguration(IDateTimeOptionsConfiguration config);
    public virtual int GetSwiftYear(string text);
    public virtual string SanitizeHolidayToken(string holiday);
    protected virtual IDictionary`2<string, Func`2<int, DateTime>> InitHolidayFuncs();
    private static DateTime NewYear(int year);
    private static DateTime NewYearEve(int year);
    private static DateTime ChristmasDay(int year);
    private static DateTime ChristmasEve(int year);
    private static DateTime FemaleDay(int year);
    private static DateTime ChildrenDay(int year);
    private static DateTime HalloweenDay(int year);
    private static DateTime TeacherDay(int year);
    private static DateTime Pascuas(int year);
    private static DateTime GoodFriday(int year);
    private static DateTime UsaIndependenceDay(int year);
    private static DateTime EarthDay(int year);
    private static DateTime ValentinesDay(int year);
    private static DateTime StPatrickDay(int year);
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishMergedExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex AroundRegex;
    public static Regex EqualRegex;
    public static Regex FromToRegex;
    public static Regex SingleAmbiguousMonthRegex;
    public static Regex PrepositionSuffixRegex;
    public static Regex AmbiguousRangeModifierPrefix;
    public static Regex NumberEndingPattern;
    public static Regex SuffixAfterRegex;
    public static Regex UnspecificDatePeriodRegex;
    public static Regex[] TermFilterRegexes;
    public static StringMatcher SuperfluousWordMatcher;
    public static Regex YearRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private static Regex <SinceRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private static Regex <SinceRegexExp>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SetExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeZoneExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeListExtractor <DateTimeAltExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FailFastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeMentionFilters>k__BackingField;
    public static Regex SinceRegex { get; public set; }
    public static Regex SinceRegexExp { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor SetExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeZoneExtractor TimeZoneExtractor { get; }
    public IDateTimeListExtractor DateTimeAltExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SinceRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AroundRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.EqualRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.FromToRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SingleAmbiguousMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PrepositionSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AmbiguousRangeModifierPrefix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PotentialAmbiguousRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.NumberEndingPattern { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuffixAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificTimePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.YearRegex { get; }
    public Regex FailFastRegex { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.TermFilterRegexes { get; }
    private StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.CheckBothBeforeAfter { get; }
    public Regex TasksModeMentionFilters { get; }
    public SpanishMergedExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SpanishMergedExtractorConfiguration();
    [CompilerGeneratedAttribute]
public static Regex get_SinceRegex();
    [CompilerGeneratedAttribute]
public static void set_SinceRegex(Regex value);
    [CompilerGeneratedAttribute]
public static Regex get_SinceRegexExp();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SetExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeZoneExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeListExtractor get_DateTimeAltExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SinceRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AroundRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_EqualRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_FromToRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SingleAmbiguousMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PrepositionSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AmbiguousRangeModifierPrefix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PotentialAmbiguousRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_NumberEndingPattern();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuffixAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificTimePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FailFastRegex();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_TermFilterRegexes();
    private sealed virtual override StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeMentionFilters();
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishMergedParserConfiguration : SpanishCommonDateTimeParserConfiguration {
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SinceRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AroundRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EqualRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <SetParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <SuperfluousWordMatcher>k__BackingField;
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex SinceRegex { get; }
    public Regex AroundRegex { get; }
    public Regex EqualRegex { get; }
    public Regex SuffixAfter { get; }
    public Regex YearRegex { get; }
    public IDateTimeParser SetParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public StringMatcher SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.CheckBothBeforeAfter { get; }
    public SpanishMergedParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SinceRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AroundRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EqualRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_SetParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.get_CheckBothBeforeAfter();
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishSetExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static string ExtractorName;
    public static Regex PeriodicRegex;
    public static Regex EachUnitRegex;
    public static Regex EachPrefixRegex;
    public static Regex EachDayRegex;
    public static Regex BeforeEachDayRegex;
    public static Regex SetWeekDayRegex;
    public static Regex SetEachRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.LastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.PeriodicRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.BeforeEachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetWeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetEachRegex { get; }
    public SpanishSetExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SpanishSetExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_LastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_PeriodicRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_BeforeEachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetWeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetEachRegex();
    public sealed virtual Tuple`2<string, int> WeekDayGroupMatchTuple(Match match);
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishSetParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex DoubleMultiplierRegex;
    private static Regex DayTypeRegex;
    private static Regex WeekTypeRegex;
    private static Regex BiWeekTypeRegex;
    private static Regex WeekendTypeRegex;
    private static Regex MonthTypeRegex;
    private static Regex QuarterTypeRegex;
    private static Regex SemiAnnualTypeRegex;
    private static Regex YearTypeRegex;
    private static List`1<string> ThisTerms;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodicRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetEachRegex>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex EachPrefixRegex { get; }
    public Regex PeriodicRegex { get; }
    public Regex EachUnitRegex { get; }
    public Regex EachDayRegex { get; }
    public Regex SetWeekDayRegex { get; }
    public Regex SetEachRegex { get; }
    public SpanishSetParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static SpanishSetParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodicRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetEachRegex();
    public sealed virtual bool GetMatchedDailyTimex(string text, String& timex);
    public sealed virtual bool GetMatchedUnitTimex(string text, String& timex);
    public sealed virtual string WeekDayGroupMatchString(Match match);
    public sealed virtual string ReplaceValueInTextWithFutTerm(string text, string value);
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DescRegex;
    public static Regex HourNumRegex;
    public static Regex MinuteNumRegex;
    public static Regex OclockRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex LessThanOneHour;
    public static Regex TensTimeRegex;
    public static Regex WrittenTimeRegex;
    public static Regex TimePrefix;
    public static Regex TimeSuffix;
    public static Regex BasicTime;
    public static Regex AtRegex;
    public static Regex ConnectNumRegex;
    public static Regex TimeBeforeAfterRegex;
    public static Regex[] TimeRegexList;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.IshRegex { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.AtRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeBeforeAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public string TimeTokenPrefix { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public SpanishTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SpanishTimeExtractorConfiguration();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_IshRegex();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_AtRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeBeforeAfterRegex();
    [CompilerGeneratedAttribute]
public IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    public sealed virtual string get_TimeTokenPrefix();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex HalfTokenRegex;
    private static Regex QuarterTokenRegex;
    private static Regex PastTokenRegex;
    private static Regex ToTokenRegex;
    [CompilerGeneratedAttribute]
private string <TimeTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AtRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MealTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <TimeRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    public string TimeTokenPrefix { get; }
    public Regex AtRegex { get; }
    public Regex MealTimeRegex { get; }
    public IEnumerable`1<Regex> TimeRegexes { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public SpanishTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static SpanishTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TimeTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AtRegex();
    [CompilerGeneratedAttribute]
public Regex get_MealTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_TimeRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    public sealed virtual void AdjustByPrefix(string prefix, Int32& hour, Int32& min, Boolean& hasMin);
    public sealed virtual void AdjustBySuffix(string suffix, Int32& hour, Int32& min, Boolean& hasMin, Boolean& hasAm, Boolean& hasPm);
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static string ExtractorName;
    public static Regex HourNumRegex;
    public static Regex PureNumFromTo;
    public static Regex PureNumBetweenAnd;
    public static Regex SpecificTimeFromTo;
    public static Regex SpecificTimeBetweenAnd;
    public static Regex UnitRegex;
    public static Regex FollowedUnit;
    public static Regex NumberCombinedWithUnit;
    public static Regex TimeOfDayRegex;
    public static Regex GeneralEndingRegex;
    public static Regex TillRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromRegex;
    private static Regex RangeConnectorRegex;
    private static Regex BetweenRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    public string TokenBeforeDate { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public IEnumerable`1<Regex> PureNumberRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    public SpanishTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SpanishTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual IEnumerable`1<Regex> get_PureNumberRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool IsConnectorToken(string text);
    public sealed virtual List`1<ExtractResult> ApplyPotentialPeriodAmbiguityHotfix(string text, List`1<ExtractResult> timePeriodErs);
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <GeneralEndingRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TillRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex SpecificTimeFromToRegex { get; }
    public Regex SpecificTimeBetweenAndRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex GeneralEndingRegex { get; }
    public Regex TillRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public SpanishTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_GeneralEndingRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TillRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual bool GetMatchedTimeRange(string text, String& timex, Int32& beginHour, Int32& endHour, Int32& endMin);
}
internal class Microsoft.Recognizers.Text.DateTime.Spanish.SpanishTimeZoneExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private Regex <DirectUtcRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LocationTimeSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <LocationMatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <TimeZoneMatcher>k__BackingField;
    public Regex DirectUtcRegex { get; }
    public Regex LocationTimeSuffixRegex { get; }
    public StringMatcher LocationMatcher { get; }
    public StringMatcher TimeZoneMatcher { get; }
    public List`1<string> AmbiguousTimezoneList { get; }
    public SpanishTimeZoneExtractorConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DirectUtcRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LocationTimeSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_LocationMatcher();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_TimeZoneMatcher();
    public sealed virtual List`1<string> get_AmbiguousTimezoneList();
}
public class Microsoft.Recognizers.Text.DateTime.Spanish.Utilities.SpanishDatetimeUtilityConfiguration : BaseDatetimeUtilityConfiguration {
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishCommonDateTimeParserConfiguration : BaseDateParserConfiguration {
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public SwedishCommonDateTimeParserConfiguration(IDateTimeOptionsConfiguration config);
    public virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishDateExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MonthRegex;
    public static Regex MonthNumRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex SingleWeekDayRegex;
    public static Regex OnRegex;
    public static Regex RelaxedOnRegex;
    public static Regex ThisRegex;
    public static Regex LastDateRegex;
    public static Regex NextDateRegex;
    public static Regex DateUnitRegex;
    public static Regex SpecialDayRegex;
    public static Regex WeekDayOfMonthRegex;
    public static Regex RelativeWeekDayRegex;
    public static Regex SpecialDate;
    public static Regex SpecialDayWithNumRegex;
    public static Regex ForTheRegex;
    public static Regex WeekDayAndDayOfMothRegex;
    public static Regex WeekDayAndDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex StrictRelativeRegex;
    public static Regex PrefixArticleRegex;
    public static Regex OfMonth;
    public static Regex MonthEnd;
    public static Regex WeekDayEnd;
    public static Regex WeekDayStart;
    public static Regex YearSuffix;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex InConnectorRegex;
    public static Regex SinceYearSuffixRegex;
    public static Regex RangeUnitRegex;
    public static Regex RangeConnectorSymbolRegex;
    public static Regex BeforeAfterRegex;
    public static ImmutableDictionary`2<string, int> DayOfWeek;
    public static ImmutableDictionary`2<string, int> MonthOfYear;
    private static RegexOptions RegexFlags;
    private static Regex DayRegex;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <ImplicitDateList>k__BackingField;
    public IEnumerable`1<Regex> DateRegexList { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IEnumerable`1<Regex> ImplicitDateList { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DayOfWeek { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthOfYear { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.OfMonth { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayStart { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.ForTheRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayOfMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RelativeMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.StrictRelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.PrefixArticleRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.SinceYearSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeConnectorSymbolRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.BeforeAfterRegex { get; }
    public SwedishDateExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SwedishDateExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_ImplicitDateList();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DayOfWeek();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthOfYear();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_OfMonth();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayStart();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_ForTheRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayOfMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RelativeMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_StrictRelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_PrefixArticleRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_SinceYearSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeConnectorSymbolRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_BeforeAfterRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishDateParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <DateTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OnRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayWithNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ThisRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ForTheRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayOfMothRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <StrictRelativeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UpcomingPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeDurationToDatePatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <SameDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public string DateTokenPrefix { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public IEnumerable`1<Regex> DateRegexes { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex OnRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex SpecialDayWithNumRegex { get; }
    public Regex NextRegex { get; }
    public Regex ThisRegex { get; }
    public Regex LastRegex { get; }
    public Regex UnitRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex MonthRegex { get; }
    public Regex WeekDayOfMonthRegex { get; }
    public Regex ForTheRegex { get; }
    public Regex WeekDayAndDayOfMothRegex { get; }
    public Regex WeekDayAndDayRegex { get; }
    public Regex RelativeMonthRegex { get; }
    public Regex StrictRelativeRegex { get; }
    public Regex YearSuffix { get; }
    public Regex RelativeWeekDayRegex { get; }
    public Regex RelativeDayRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex UpcomingPrefixRegex { get; }
    public Regex PastPrefixRegex { get; }
    public Regex BeforeAfterRegex { get; }
    public Regex TasksModeDurationToDatePatterns { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableList`1<string> SameDayTerms { get; }
    public IImmutableList`1<string> PlusOneDayTerms { get; }
    public IImmutableList`1<string> MinusOneDayTerms { get; }
    public IImmutableList`1<string> PlusTwoDayTerms { get; }
    public IImmutableList`1<string> MinusTwoDayTerms { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.CheckBothBeforeAfter { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public SwedishDateParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DateTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OnRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayWithNumRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ThisRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ForTheRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayOfMothRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_StrictRelativeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearSuffix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UpcomingPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeDurationToDatePatterns();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_SameDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusTwoDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusTwoDayTerms();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual int GetSwiftMonthOrYear(string text);
    public sealed virtual bool IsCardinalLast(string text);
    public sealed virtual string Normalize(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishDatePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex RangeConnectorRegex;
    public static Regex DayRegex;
    public static Regex MonthNumRegex;
    public static Regex IllegalYearRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex WrittenMonthRegex;
    public static Regex MonthSuffixRegex;
    public static Regex DateUnitRegex;
    public static Regex TimeUnitRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex FutureSuffixRegex;
    public static Regex NowRegex;
    public static Regex SimpleCasesRegex;
    public static Regex MonthFrontSimpleCasesRegex;
    public static Regex MonthFrontBetweenRegex;
    public static Regex BetweenRegex;
    public static Regex MonthWithYear;
    public static Regex OneWordPeriodRegex;
    public static Regex MonthNumWithYear;
    public static Regex WeekOfMonthRegex;
    public static Regex WeekOfYearRegex;
    public static Regex FollowedDateUnit;
    public static Regex NumberCombinedWithDateUnit;
    public static Regex QuarterRegex;
    public static Regex QuarterRegexYearFront;
    public static Regex AllHalfYearRegex;
    public static Regex SeasonRegex;
    public static Regex WhichWeekRegex;
    public static Regex WeekOfRegex;
    public static Regex MonthOfRegex;
    public static Regex RangeUnitRegex;
    public static Regex InConnectorRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex RestOfDateRegex;
    public static Regex LaterEarlyPeriodRegex;
    public static Regex WeekWithWeekDayRangeRegex;
    public static Regex YearPlusNumberRegex;
    public static Regex DecadeWithCenturyRegex;
    public static Regex YearPeriodRegex;
    public static Regex ComplexDatePeriodRegex;
    public static Regex RelativeDecadeRegex;
    public static Regex ReferenceDatePeriodRegex;
    public static Regex AgoRegex;
    public static Regex LaterRegex;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex CenturySuffixRegex;
    public static Regex FirstLastRegex;
    public static Regex OfYearRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromTokenRegex;
    private static Regex BetweenTokenRegex;
    private static Regex[] SimpleCasesRegexes;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    public IDateExtractor DatePointExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.SimpleCasesRegexes { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.IllegalYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FollowedDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NumberCombinedWithDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WeekOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearPeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ComplexDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RelativeDecadeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ReferenceDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.AgoRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LaterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CenturySuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthNumRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FirstLastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.OfYearRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DurationDateRestrictions { get; }
    public SwedishDatePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SwedishDatePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_SimpleCasesRegexes();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_IllegalYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FollowedDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NumberCombinedWithDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WeekOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearPeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ComplexDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RelativeDecadeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ReferenceDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_AgoRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LaterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CenturySuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthNumRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FirstLastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_OfYearRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DurationDateRestrictions();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishDatePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PreviousPrefixRegex;
    public static Regex ThisPrefixRegex;
    public static Regex AfterNextSuffixRegex;
    public static Regex RelativeRegex;
    public static Regex UnspecificEndOfRangeRegex;
    public static Regex NowParseRegex;
    private static RegexOptions RegexFlags;
    private static IList`1<string> monthTermsPadded;
    private static IList`1<string> weekendTermsPadded;
    private static IList`1<string> weekTermsPadded;
    private static IList`1<string> fortnightTermsPadded;
    private static IList`1<string> yearTermsPadded;
    private static Regex NextPrefixRegex;
    [CompilerGeneratedAttribute]
private int <MinYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontBetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontSimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OneWordPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthNumWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegexYearFront>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllHalfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SeasonRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WhichWeekRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterEarlyPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekWithWeekDayRangeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPlusNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DecadeWithCenturyRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ComplexDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDecadeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ReferenceDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AgoRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LessThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MoreThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <CenturySuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TodayNowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FirstLastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SeasonMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SpecialYearPrefixesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <WrittenDecades>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <SpecialDecadeCases>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <InStringList>k__BackingField;
    public int MinYearNum { get; }
    public int MaxYearNum { get; }
    public string TokenBeforeDate { get; }
    public IDateExtractor DateExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser DurationParser { get; }
    public Regex MonthFrontBetweenRegex { get; }
    public Regex BetweenRegex { get; }
    public Regex MonthFrontSimpleCasesRegex { get; }
    public Regex SimpleCasesRegex { get; }
    public Regex OneWordPeriodRegex { get; }
    public Regex MonthWithYear { get; }
    public Regex MonthNumWithYear { get; }
    public Regex YearRegex { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex WeekOfMonthRegex { get; }
    public Regex WeekOfYearRegex { get; }
    public Regex QuarterRegex { get; }
    public Regex QuarterRegexYearFront { get; }
    public Regex AllHalfYearRegex { get; }
    public Regex SeasonRegex { get; }
    public Regex WhichWeekRegex { get; }
    public Regex WeekOfRegex { get; }
    public Regex MonthOfRegex { get; }
    public Regex InConnectorRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex RestOfDateRegex { get; }
    public Regex LaterEarlyPeriodRegex { get; }
    public Regex WeekWithWeekDayRangeRegex { get; }
    public Regex YearPlusNumberRegex { get; }
    public Regex DecadeWithCenturyRegex { get; }
    public Regex YearPeriodRegex { get; }
    public Regex ComplexDatePeriodRegex { get; }
    public Regex RelativeDecadeRegex { get; }
    public Regex ReferenceDatePeriodRegex { get; }
    public Regex AgoRegex { get; }
    public Regex LaterRegex { get; }
    public Regex LessThanRegex { get; }
    public Regex MoreThanRegex { get; }
    public Regex CenturySuffixRegex { get; }
    public Regex NowRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex TodayNowRegex { get; }
    public Regex FirstLastRegex { get; }
    public Regex OfYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.RelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.NextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.UnspecificEndOfRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.AmbiguousPointRangeRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; }
    public IImmutableDictionary`2<string, string> SpecialYearPrefixesMap { get; }
    public IImmutableDictionary`2<string, int> WrittenDecades { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IImmutableDictionary`2<string, int> SpecialDecadeCases { get; }
    public IImmutableList`1<string> InStringList { get; }
    public SwedishDatePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static SwedishDatePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public int get_MinYearNum();
    [CompilerGeneratedAttribute]
public int get_MaxYearNum();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontBetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontSimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OneWordPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthNumWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegexYearFront();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllHalfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SeasonRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WhichWeekRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterEarlyPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekWithWeekDayRangeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPlusNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DecadeWithCenturyRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ComplexDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDecadeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ReferenceDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AgoRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LessThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MoreThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_CenturySuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TodayNowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FirstLastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OfYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.get_RelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_NextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_UnspecificEndOfRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_AmbiguousPointRangeRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SpecialYearPrefixesMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_WrittenDecades();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_SpecialDecadeCases();
    [CompilerGeneratedAttribute]
public IImmutableList`1<string> get_InStringList();
    public sealed virtual int GetSwiftDayOrMonth(string text);
    public sealed virtual int GetSwiftYear(string text);
    public sealed virtual bool IsFuture(string text);
    public sealed virtual bool IsLastCardinal(string text);
    public sealed virtual bool IsMonthOnly(string text);
    public sealed virtual bool IsMonthToDate(string text);
    public sealed virtual bool IsWeekend(string text);
    public sealed virtual bool IsWeekOnly(string text);
    public sealed virtual bool IsFortnight(string text);
    public sealed virtual bool IsYearOnly(string text);
    public sealed virtual bool IsYearToDate(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishDateTimeAltExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex ThisPrefixRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex AmRegex;
    public static Regex PmRegex;
    public static Regex RangePrefixRegex;
    public static Regex[] RelativePrefixList;
    public static Regex[] AmPmRegexList;
    private static RegexOptions RegexFlags;
    private static Regex OrRegex;
    private static Regex DayRegex;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RelativePrefixList { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.AmPmRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.OrRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.DayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RangePrefixRegex { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public SwedishDateTimeAltExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SwedishDateTimeAltExtractorConfiguration();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RelativePrefixList();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_AmPmRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_OrRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_DayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RangePrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishDateTimeAltParserConfiguration : object {
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public SwedishDateTimeAltParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishDateTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrepositionRegex;
    public static Regex NowRegex;
    public static Regex SuffixRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeOfTodayAfterRegex;
    public static Regex TimeOfTodayBeforeRegex;
    public static Regex SimpleTimeOfTodayAfterRegex;
    public static Regex SimpleTimeOfTodayBeforeRegex;
    public static Regex SpecificEndOfRegex;
    public static Regex UnspecificEndOfRegex;
    public static Regex UnitRegex;
    public static Regex ConnectorRegex;
    public static Regex NumberAsTimeRegex;
    public static Regex DateNumberConnectorRegex;
    public static Regex YearRegex;
    public static Regex YearSuffix;
    public static Regex SuffixAfterRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    public IExtractor IntegerExtractor { get; }
    public IDateExtractor DatePointExtractor { get; }
    public IDateTimeExtractor TimePointExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SpecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnspecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NumberAsTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.DateNumberConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public SwedishDateTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SwedishDateTimeExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SpecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnspecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NumberAsTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_DateNumberConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    public sealed virtual bool IsConnector(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishDateTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex AmTimeRegex;
    public static Regex PmTimeRegex;
    public static Regex NightTimeRegex;
    private static RegexOptions RegexFlags;
    private static Regex NowTimeRegex;
    private static Regex RecentlyTimeRegex;
    private static Regex AsapTimeRegex;
    private static Regex NextPrefixRegex;
    private static Regex PreviousPrefixRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayBeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnspecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DateNumberConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrepositionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex NowRegex { get; }
    public Regex AMTimeRegex { get; }
    public Regex PMTimeRegex { get; }
    public Regex SimpleTimeOfTodayAfterRegex { get; }
    public Regex SimpleTimeOfTodayBeforeRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex SpecificEndOfRegex { get; }
    public Regex UnspecificEndOfRegex { get; }
    public Regex UnitRegex { get; }
    public Regex DateNumberConnectorRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex ConnectorRegex { get; }
    public Regex YearRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public SwedishDateTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static SwedishDateTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    public sealed virtual Regex get_AMTimeRegex();
    public sealed virtual Regex get_PMTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayBeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnspecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DateNumberConnectorRegex();
    [CompilerGeneratedAttribute]
public Regex get_PrepositionRegex();
    [CompilerGeneratedAttribute]
public Regex get_ConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual int GetHour(string text, int hour);
    public sealed virtual bool GetMatchedNowTimex(string text, String& timex);
    public sealed virtual int GetSwiftDay(string text);
    public sealed virtual bool ContainsAmbiguousToken(string text, string matchedText);
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishDateTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TimeNumberCombinedWithUnit;
    public static Regex HyphenDateRegex;
    public static Regex PeriodTimeOfDayWithDateRegex;
    public static Regex RelativeTimeUnitRegex;
    public static Regex RestOfDateTimeRegex;
    public static Regex AmDescRegex;
    public static Regex PmDescRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex DateUnitRegex;
    public static Regex PrefixDayRegex;
    public static Regex SuffixRegex;
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex WeekDaysRegex;
    public static Regex PeriodSpecificTimeOfDayRegex;
    private static RegexOptions RegexFlags;
    private static Regex[] SimpleCases;
    private static Regex PeriodTimeOfDayRegex;
    private static Regex TimeUnitRegex;
    private static Regex TimeFollowedUnit;
    private static Regex GeneralEndingRegex;
    private static Regex MiddlePauseRegex;
    private static Regex RangeConnectorRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex TillRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex FollowedUnit { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PrefixDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RelativeTimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RestOfDateTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.MiddlePauseRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PeriodTimeOfDayWithDateRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public string TokenBeforeDate { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor SingleDateExtractor { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor SingleDateTimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public SwedishDateTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SwedishDateTimePeriodExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual Regex get_PrepositionRegex();
    public sealed virtual Regex get_TillRegex();
    public sealed virtual Regex get_TimeOfDayRegex();
    public sealed virtual Regex get_SpecificTimeOfDayRegex();
    public sealed virtual Regex get_PreviousPrefixRegex();
    public sealed virtual Regex get_NextPrefixRegex();
    public sealed virtual Regex get_FutureSuffixRegex();
    public sealed virtual Regex get_WeekDayRegex();
    public sealed virtual Regex get_FollowedUnit();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PrefixDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RelativeTimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RestOfDateTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_MiddlePauseRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PeriodTimeOfDayWithDateRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TasksmodeMealTimeofDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishDateTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MorningStartEndRegex;
    public static Regex AfternoonStartEndRegex;
    public static Regex EveningStartEndRegex;
    public static Regex NightStartEndRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HyphenDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodTimeOfDayWithDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeTimeUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrefixDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex HyphenDateRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnitRegex { get; }
    public Regex UnitRegex { get; }
    public Regex PeriodTimeOfDayWithDateRegex { get; }
    public Regex RelativeTimeUnitRegex { get; }
    public Regex RestOfDateTimeRegex { get; }
    public Regex AmDescRegex { get; }
    public Regex PmDescRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex PrefixDayRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public SwedishDateTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static SwedishDateTimePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HyphenDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodTimeOfDayWithDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeTimeUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PrefixDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_TasksmodeMealTimeofDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual bool GetMatchedTimeRange(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMin);
    public sealed virtual int GetSwiftPrefix(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishDurationExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DurationUnitRegex;
    public static Regex SuffixAndRegex;
    public static Regex DurationFollowedUnit;
    public static Regex NumberCombinedWithDurationUnit;
    public static Regex AnUnitRegex;
    public static Regex DuringRegex;
    public static Regex AllRegex;
    public static Regex HalfRegex;
    public static Regex ConjunctionRegex;
    public static Regex InexactNumberRegex;
    public static Regex InexactNumberUnitRegex;
    public static Regex RelativeDurationUnitRegex;
    public static Regex DurationConnectorRegex;
    public static Regex ModPrefixRegex;
    public static Regex ModSuffixRegex;
    public static Regex SpecialNumberUnitRegex;
    public static Regex MoreThanRegex;
    public static Regex LessThanRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.FollowedUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DuringRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AllRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.HalfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SuffixAndRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ConjunctionRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.RelativeDurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SpecialNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModSuffixRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public SwedishDurationExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SwedishDurationExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_FollowedUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DuringRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AllRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_HalfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SuffixAndRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ConjunctionRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_RelativeDurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SpecialNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModSuffixRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishDurationParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrefixArticleRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AnUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DuringRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HalfDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FollowedUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConjunctionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, double> <DoubleNumbers>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.PrefixArticleRegex { get; }
    public Regex DuringRegex { get; }
    public Regex AllDateUnitRegex { get; }
    public Regex HalfDateUnitRegex { get; }
    public Regex SuffixAndRegex { get; }
    public Regex FollowedUnit { get; }
    public Regex ConjunctionRegex { get; }
    public Regex InexactNumberRegex { get; }
    public Regex InexactNumberUnitRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex SpecialNumberUnitRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public IImmutableDictionary`2<string, double> DoubleNumbers { get; }
    public SwedishDurationParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static SwedishDurationParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_PrefixArticleRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DuringRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HalfDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FollowedUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ConjunctionRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialNumberUnitRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, double> get_DoubleNumbers();
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishHolidayExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex YearRegex;
    public static Regex H;
    public static Regex[] HolidayRegexList;
    private static RegexOptions RegexFlags;
    public IEnumerable`1<Regex> HolidayRegexes { get; }
    public SwedishHolidayExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SwedishHolidayExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_HolidayRegexes();
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishHolidayParserConfiguration : BaseHolidayParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private Regex <ThisPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    public Regex ThisPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public SwedishHolidayParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public Regex get_ThisPrefixRegex();
    [CompilerGeneratedAttribute]
public Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public Regex get_PreviousPrefixRegex();
    public virtual int GetSwiftYear(string text);
    public virtual string SanitizeHolidayToken(string holiday);
    protected virtual IDictionary`2<string, Func`2<int, DateTime>> InitHolidayFuncs();
    private static DateTime NewYear(int year);
    private static DateTime NewYearEve(int year);
    private static DateTime ChristmasDay(int year);
    private static DateTime ChristmasEve(int year);
    private static DateTime ValentinesDay(int year);
    private static DateTime WhiteLoverDay(int year);
    private static DateTime FoolDay(int year);
    private static DateTime EarthDay(int year);
    private static DateTime GirlsDay(int year);
    private static DateTime TreePlantDay(int year);
    private static DateTime FemaleDay(int year);
    private static DateTime ChildrenDay(int year);
    private static DateTime YouthDay(int year);
    private static DateTime TeacherDay(int year);
    private static DateTime SinglesDay(int year);
    private static DateTime MaoBirthday(int year);
    private static DateTime InaugurationDay(int year);
    private static DateTime GroundhogDay(int year);
    private static DateTime StPatrickDay(int year);
    private static DateTime StGeorgeDay(int year);
    private static DateTime Mayday(int year);
    private static DateTime CincoDeMayoDay(int year);
    private static DateTime BaptisteDay(int year);
    private static DateTime UsaIndependenceDay(int year);
    private static DateTime BastilleDay(int year);
    private static DateTime HalloweenDay(int year);
    private static DateTime AllHallowDay(int year);
    private static DateTime AllSoulsDay(int year);
    private static DateTime GuyFawkesDay(int year);
    private static DateTime VeteransDay(int year);
    private static DateTime Juneteenth(int year);
    private static DateTime EasterDay(int year);
    private static DateTime AshWednesday(int year);
    private static DateTime PalmSunday(int year);
    private static DateTime MaundyThursday(int year);
    private static DateTime GoodFriday(int year);
    private static DateTime EasterSaturday(int year);
    private static DateTime EasterMonday(int year);
    private static DateTime AscensionDay(int year);
    private static DateTime WhiteSunday(int year);
    private static DateTime WhiteMonday(int year);
    private static DateTime TrinitySunday(int year);
    private static DateTime CorpusChristi(int year);
    private static DateTime Ramadan(int year);
    private static DateTime Sacrifice(int year);
    private static DateTime EidAlFitr(int year);
    private static DateTime IslamicNewYear(int year);
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishMergedExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex AroundRegex;
    public static Regex EqualRegex;
    public static Regex FromToRegex;
    public static Regex SingleAmbiguousMonthRegex;
    public static Regex PrepositionSuffixRegex;
    public static Regex AmbiguousRangeModifierPrefix;
    public static Regex NumberEndingPattern;
    public static Regex SuffixAfterRegex;
    public static Regex UnspecificDatePeriodRegex;
    public static Regex UnspecificTimePeriodRegex;
    public static Regex FailFastRegex;
    public static Regex YearRegex;
    public static Regex[] TermFilterRegexes;
    public static StringMatcher SuperfluousWordMatcher;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private static Regex <SinceRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private static Regex <SinceRegexExp>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SetExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeZoneExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeListExtractor <DateTimeAltExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeMentionFilters>k__BackingField;
    public static Regex SinceRegex { get; public set; }
    public static Regex SinceRegexExp { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor SetExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeZoneExtractor TimeZoneExtractor { get; }
    public IDateTimeListExtractor DateTimeAltExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SinceRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AroundRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.EqualRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.FromToRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SingleAmbiguousMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PrepositionSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AmbiguousRangeModifierPrefix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PotentialAmbiguousRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.NumberEndingPattern { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuffixAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificTimePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.FailFastRegex { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.TermFilterRegexes { get; }
    private StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.CheckBothBeforeAfter { get; }
    public Regex TasksModeMentionFilters { get; }
    public SwedishMergedExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SwedishMergedExtractorConfiguration();
    [CompilerGeneratedAttribute]
public static Regex get_SinceRegex();
    [CompilerGeneratedAttribute]
public static void set_SinceRegex(Regex value);
    [CompilerGeneratedAttribute]
public static Regex get_SinceRegexExp();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SetExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeZoneExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeListExtractor get_DateTimeAltExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SinceRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AroundRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_EqualRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_FromToRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SingleAmbiguousMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PrepositionSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AmbiguousRangeModifierPrefix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PotentialAmbiguousRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_NumberEndingPattern();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuffixAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificTimePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_FailFastRegex();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_TermFilterRegexes();
    private sealed virtual override StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeMentionFilters();
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishMergedParserConfiguration : SwedishCommonDateTimeParserConfiguration {
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SinceRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AroundRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EqualRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <SetParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <SuperfluousWordMatcher>k__BackingField;
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    public Regex SinceRegex { get; }
    public Regex AroundRegex { get; }
    public Regex EqualRegex { get; }
    public Regex SuffixAfter { get; }
    public Regex YearRegex { get; }
    public IDateTimeParser SetParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public StringMatcher SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.CheckBothBeforeAfter { get; }
    public SwedishMergedParserConfiguration(IDateTimeOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SinceRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AroundRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EqualRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_SetParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.get_CheckBothBeforeAfter();
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishSetExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex SetUnitRegex;
    public static Regex PeriodicRegex;
    public static Regex EachUnitRegex;
    public static Regex EachPrefixRegex;
    public static Regex SetLastRegex;
    public static Regex EachDayRegex;
    public static Regex SetWeekDayRegex;
    public static Regex SetEachRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.LastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.PeriodicRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.BeforeEachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetWeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetEachRegex { get; }
    public SwedishSetExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SwedishSetExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_LastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_PeriodicRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_BeforeEachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetWeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetEachRegex();
    public sealed virtual Tuple`2<string, int> WeekDayGroupMatchTuple(Match match);
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishSetParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex DoubleMultiplierRegex;
    private static Regex HalfMultiplierRegex;
    private static Regex DayTypeRegex;
    private static Regex WeekTypeRegex;
    private static Regex WeekendTypeRegex;
    private static Regex MonthTypeRegex;
    private static Regex QuarterTypeRegex;
    private static Regex YearTypeRegex;
    private static List`1<string> ThisTerms;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodicRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetEachRegex>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex EachPrefixRegex { get; }
    public Regex PeriodicRegex { get; }
    public Regex EachUnitRegex { get; }
    public Regex EachDayRegex { get; }
    public Regex SetWeekDayRegex { get; }
    public Regex SetEachRegex { get; }
    public SwedishSetParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static SwedishSetParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodicRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetEachRegex();
    public sealed virtual bool GetMatchedDailyTimex(string text, String& timex);
    public sealed virtual bool GetMatchedUnitTimex(string text, String& timex);
    public sealed virtual string WeekDayGroupMatchString(Match match);
    public sealed virtual string ReplaceValueInTextWithFutTerm(string text, string value);
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DescRegex;
    public static Regex HourNumRegex;
    public static Regex MinuteNumRegex;
    public static Regex OclockRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex LessThanOneHour;
    public static Regex WrittenTimeRegex;
    public static Regex TimePrefix;
    public static Regex TimeSuffix;
    public static Regex BasicTime;
    public static Regex MidnightRegex;
    public static Regex MidmorningRegex;
    public static Regex MidafternoonRegex;
    public static Regex MiddayRegex;
    public static Regex MidTimeRegex;
    public static Regex AtRegex;
    public static Regex IshRegex;
    public static Regex TimeUnitRegex;
    public static Regex ConnectNumRegex;
    public static Regex TimeBeforeAfterRegex;
    public static Regex[] TimeRegexList;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.AtRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.IshRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeBeforeAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public string TimeTokenPrefix { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public SwedishTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SwedishTimeExtractorConfiguration();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_AtRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_IshRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeBeforeAfterRegex();
    [CompilerGeneratedAttribute]
public IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    public sealed virtual string get_TimeTokenPrefix();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex TimeSuffixFull;
    private static Regex LunchRegex;
    private static Regex NightRegex;
    private static Regex HalfTokenRegex;
    private static Regex QuarterTokenRegex;
    private static Regex ThreeQuarterTokenRegex;
    private static Regex ToTokenRegex;
    [CompilerGeneratedAttribute]
private string <TimeTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AtRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MealTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <TimeRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    public string TimeTokenPrefix { get; }
    public Regex AtRegex { get; }
    public Regex MealTimeRegex { get; }
    public IEnumerable`1<Regex> TimeRegexes { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public SwedishTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static SwedishTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TimeTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AtRegex();
    [CompilerGeneratedAttribute]
public Regex get_MealTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_TimeRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    public sealed virtual void AdjustByPrefix(string prefix, Int32& hour, Int32& min, Boolean& hasMin);
    public sealed virtual void AdjustBySuffix(string suffix, Int32& hour, Int32& min, Boolean& hasMin, Boolean& hasAm, Boolean& hasPm);
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex HourRegex;
    public static Regex PeriodHourNumRegex;
    public static Regex PeriodDescRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex PureNumFromTo;
    public static Regex PureNumBetweenAnd;
    public static Regex SpecificTimeFromTo;
    public static Regex SpecificTimeBetweenAnd;
    public static Regex PrepositionRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeUnitRegex;
    public static Regex TimeFollowedUnit;
    public static Regex TimeNumberCombinedWithUnit;
    public static Regex GeneralEndingRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    public string TokenBeforeDate { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public IEnumerable`1<Regex> PureNumberRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    public SwedishTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SwedishTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual IEnumerable`1<Regex> get_PureNumberRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool IsConnectorToken(string text);
    public sealed virtual List`1<ExtractResult> ApplyPotentialPeriodAmbiguityHotfix(string text, List`1<ExtractResult> timePeriodErs);
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <GeneralEndingRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TillRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex SpecificTimeFromToRegex { get; }
    public Regex SpecificTimeBetweenAndRegex { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex GeneralEndingRegex { get; }
    public Regex TillRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public SwedishTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_GeneralEndingRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TillRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual bool GetMatchedTimeRange(string text, String& timex, Int32& beginHour, Int32& endHour, Int32& endMin);
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishTimeZoneExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DirectUtcRegex;
    public static List`1<string> AbbreviationsList;
    public static List`1<string> FullNameList;
    public static StringMatcher TimeZoneMatcher;
    public static Regex LocationTimeSuffixRegex;
    public static StringMatcher LocationMatcher;
    public static List`1<string> AmbiguousTimezoneList;
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.DirectUtcRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.LocationTimeSuffixRegex { get; }
    private StringMatcher Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.LocationMatcher { get; }
    private StringMatcher Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.TimeZoneMatcher { get; }
    private List`1<string> Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.AmbiguousTimezoneList { get; }
    public SwedishTimeZoneExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static SwedishTimeZoneExtractorConfiguration();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.get_DirectUtcRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.get_LocationTimeSuffixRegex();
    private sealed virtual override StringMatcher Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.get_LocationMatcher();
    private sealed virtual override StringMatcher Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.get_TimeZoneMatcher();
    private sealed virtual override List`1<string> Microsoft.Recognizers.Text.DateTime.ITimeZoneExtractorConfiguration.get_AmbiguousTimezoneList();
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.SwedishTimeZoneParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static string TimeZoneEndRegex;
    public static Dictionary`2<string, int> FullToMinMapping;
    public static Regex DirectUtcRegex;
    public static Dictionary`2<string, int> AbbrToMinMapping;
    private string Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.TimeZoneEndRegex { get; }
    private Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.FullToMinMapping { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.DirectUtcRegex { get; }
    private Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.AbbrToMinMapping { get; }
    public SwedishTimeZoneParserConfiguration(IDateTimeOptionsConfiguration config);
    private static SwedishTimeZoneParserConfiguration();
    private sealed virtual override string Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_TimeZoneEndRegex();
    private sealed virtual override Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_FullToMinMapping();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_DirectUtcRegex();
    private sealed virtual override Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_AbbrToMinMapping();
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.TimeParser : BaseTimeParser {
    public TimeParser(ITimeParserConfiguration configuration);
    protected virtual DateTimeResolutionResult InternalParse(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseIsh(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.Swedish.Utilities.SwedishDatetimeUtilityConfiguration : BaseDatetimeUtilityConfiguration {
}
public static class Microsoft.Recognizers.Text.DateTime.TasksModeConstants : object {
    public static int WeekDayCount;
    public static int HalfDayHourCount;
    public static int EarlyMorningBeginHour;
    public static int EarlyMorningEndHour;
    public static int MorningBeginHour;
    public static int MorningEndHour;
    public static int MidDayBeginHour;
    public static int MidDayEndHour;
    public static int AfternoonBeginHour;
    public static int AfternoonEndHour;
    public static int EveningBeginHour;
    public static int EveningEndHour;
    public static int DaytimeBeginHour;
    public static int DaytimeEndHour;
    public static int NighttimeBeginHour;
    public static int NighttimeEndHour;
    public static int BusinessBeginHour;
    public static int BusinessEndHour;
    public static int NightBeginHour;
    public static int NightEndHour;
    public static int NightEndMin;
    public static int MealtimeBreakfastBeginHour;
    public static int MealtimeBreakfastEndHour;
    public static int MealtimeBrunchBeginHour;
    public static int MealtimeBrunchEndHour;
    public static int MealtimeLunchBeginHour;
    public static int MealtimeLunchEndHour;
    public static int MealtimeDinnerBeginHour;
    public static int MealtimeDinnerEndHour;
    public static string PeriodDaySuffix;
    public static string YearlyPeriodSuffix;
    public static string WeeklyPeriodSuffix;
    public static string DailyPeriodPrefix;
    public static string AlternatePeriodPrefix;
    public static string WeekEndPrefix;
    public static string WeekDayPrefix;
    public static string FuzzyYearAndMonth;
    public static string FuzzyYearAndWeek;
    public static string FuzzyYear;
    public static string StringMorningHHMMSS;
    public static string StringAfternoonHHMMSS;
    public static string StringEveningHHMMSS;
    public static string StringNightHHMMSS;
    public static string PeriodString;
    public static string AmountString;
    public static string DateUnitString;
    public static string KeyIntSize;
    public static string KeyIntType;
    public static string KeySetTypeName;
    public static string KeySet;
    public static string NextWeekGroupName;
    public static int IntDateStartIdx;
    public static int IntDateEndIdx;
}
public static class Microsoft.Recognizers.Text.DateTime.TasksModeProcessing : object {
    public static string ParserTypeName;
    public static string DateMinString;
    private static TasksModeProcessing();
    public static DateTimeParseResult TasksModeModification(DateTimeParseResult slot, DateTime referenceTime);
    public static TimeOfDayResolutionResult TasksModeResolveTimeOfDay(string tod);
    public static bool GetMatchedTimeRangeForTasksMode(string text, string todSymbol, Int32& beginHour, Int32& endHour, Int32& endMin);
    private static DateTimeParseResult TasksModeModifyDateValue(DateTimeParseResult slot, DateTime referenceTime);
    private static DateTimeParseResult TasksModeModifyDatePeriodValue(DateTimeParseResult slot, DateTime referenceTime);
    private static DateTimeParseResult TasksModeModifyDateTimePeriodValue(DateTimeParseResult slot, DateTime referenceTime);
    private static DateTimeParseResult TasksModeModifyDateTimeValue(DateTimeParseResult slot, DateTime referenceTime);
    private static DateTimeParseResult TasksModeModifyTimeValue(DateTimeParseResult slot, DateTime referenceTime);
    private static DateTimeParseResult TasksModeTimePeriodValue(DateTimeParseResult slot, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.TimeFunction : MulticastDelegate {
    public TimeFunction(object object, IntPtr method);
    public virtual TimeResult Invoke(DateTimeExtra`1<TimeType> extra);
    public virtual IAsyncResult BeginInvoke(DateTimeExtra`1<TimeType> extra, AsyncCallback callback, object object);
    public virtual TimeResult EndInvoke(IAsyncResult result);
}
public class Microsoft.Recognizers.Text.DateTime.TimeOfDayResolutionResult : object {
    [CompilerGeneratedAttribute]
private string <Timex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BeginHour>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndHour>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndMin>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Swift>k__BackingField;
    public string Timex { get; public set; }
    public int BeginHour { get; public set; }
    public int EndHour { get; public set; }
    public int EndMin { get; public set; }
    public int Swift { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Timex();
    [CompilerGeneratedAttribute]
public void set_Timex(string value);
    [CompilerGeneratedAttribute]
public int get_BeginHour();
    [CompilerGeneratedAttribute]
public void set_BeginHour(int value);
    [CompilerGeneratedAttribute]
public int get_EndHour();
    [CompilerGeneratedAttribute]
public void set_EndHour(int value);
    [CompilerGeneratedAttribute]
public int get_EndMin();
    [CompilerGeneratedAttribute]
public void set_EndMin(int value);
    [CompilerGeneratedAttribute]
public int get_Swift();
    [CompilerGeneratedAttribute]
public void set_Swift(int value);
}
public enum Microsoft.Recognizers.Text.DateTime.TimeType : Enum {
    public int value__;
    public static TimeType CjkTime;
    public static TimeType LessTime;
    public static TimeType DigitTime;
}
public static class Microsoft.Recognizers.Text.DateTime.TimeTypeConstants : object {
    public static string DATE;
    public static string DATETIME;
    public static string DATETIMEALT;
    public static string DURATION;
    public static string SET;
    public static string TIME;
    public static string START_DATE;
    public static string END_DATE;
    public static string START_DATETIME;
    public static string END_DATETIME;
    public static string START_TIME;
    public static string END_TIME;
}
public static class Microsoft.Recognizers.Text.DateTime.TimexUtility : object {
    private static Calendar Cal;
    private static HashSet`1<char> NumberComponents;
    private static Dictionary`2<DatePeriodTimexType, string> DatePeriodTimexTypeToTimexSuffix;
    private static TimexUtility();
    public static string GenerateCompoundDurationTimex(Dictionary`2<string, string> unitToTimexComponents, IImmutableDictionary`2<string, long> unitValueMap);
    public static string GenerateDatePeriodTimex(DateTime begin, DateTime end, DatePeriodTimexType timexType, DateTime alternativeBegin, DateTime alternativeEnd, bool hasYear);
    public static string GenerateDatePeriodTimex(DateTime begin, DateTime end, DatePeriodTimexType timexType, UnspecificDateTimeTerms terms);
    public static string GenerateDatePeriodTimex(DateTime begin, DateTime end, DatePeriodTimexType timexType, string timex1, string timex2);
    public static string GenerateWeekTimex(DateTime monday);
    public static string GenerateWeekendTimex(DateTime date);
    public static string GenerateWeekdayTimex(int weekday);
    public static string GenerateMonthTimex(DateTime date);
    public static string GenerateYearTimex(DateTime date, string specialYearPrefixes);
    public static string GenerateYearTimex(int year, string specialYearPrefixes);
    public static string GenerateDatePeriodTimexWithDiff(DateTime beginDate, DateTime& endDate, string durationUnit);
    public static string GenerateDatePeriodTimexWithDuration(DateTime beginDate, DateTime endDate, string durationTimex);
    public static string GenerateDurationTimex(double number, string unitStr, bool isLessThanDay);
    public static string GenerateDurationTimex(DateTime beginDateTime, DateTime endDateTime);
    public static DatePeriodTimexType GetDatePeriodTimexType(string durationTimex);
    public static DateTime OffsetDateObject(DateTime date, int offset, DatePeriodTimexType timexType);
    public static string MergeTimexAlternatives(string timex1, string timex2);
    public static void ProcessDoubleTimex(Dictionary`2<string, object> resolutionDic, string futureKey, string pastKey, string originTimex);
    public static bool HasDoubleTimex(string comment);
    public static TimeOfDayResolutionResult ResolveTimeOfDay(string tod);
    public static string CombineDateAndTimeTimex(string dateTimex, string timeTimex);
    public static string GenerateEndInclusiveTimex(string originalTimex, DatePeriodTimexType datePeriodTimexType, DateTime startDate, DateTime endDate);
    public static string GenerateDecadeTimex(int beginYear, int totalLastYear, int decade, bool inputCentury);
    public static string GenerateWeekOfYearTimex(int year, int weekNum);
    public static string GenerateWeekOfMonthTimex(int year, int month, int weekNum);
    public static string GenerateWeekTimex(int weekNum);
    public static string CombineDateTimeTimex(string timeTimex1, string dateTimeTimex2, DateTime dateTime1);
    public static string GenerateDateTimeTimex(DateTime dateTime);
    public static string GenerateDateTimePeriodTimex(string beginTimex, string endTimex, string durationTimex);
    public static string GenerateDateTimePeriodTimex(string beginTimex, string endTimex, TimeSpan duration);
    public static string GenerateDateTimePeriodTimex(DateTime beginDateTime, DateTime endDateTime, string durationTimex);
    public static string GenerateDateTimePeriodTimex(DateTime beginDateTime, DateTime endDateTime);
    public static string GenerateRelativeUnitDateTimePeriodTimex(DateTime& beginDateTime, DateTime& endDateTime, DateTime referenceTime, string unitStr, int swift);
    public static string GenerateSplitDateTimePeriodTimex(string dateTimex, string timeRangeTimex);
    public static RangeTimexComponents GetRangeTimexComponents(string rangeTimex);
    public static bool IsRangeTimex(string timex);
    public static string SetTimexWithContext(string timex, DateContext context);
    public static string GenerateSetTimex(string durationType, float durationLength, float multiplier);
    public static string ModifyAmbiguousCenturyTimex(string timex);
    public static float ParseNumberFromDurationTimex(string timex);
    public static int ParseHourFromTimeTimex(string timex);
    public static Tuple`2<int, int> ParseHoursFromTimePeriodTimex(string timex);
    private static bool IsTimeDurationTimex(string timex);
    private static string GetDatePeriodTimexUnitCount(DateTime begin, DateTime end, DatePeriodTimexType timexType);
}
public class Microsoft.Recognizers.Text.DateTime.TimeZoneResolutionResult : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UtcOffsetMins>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeZoneText>k__BackingField;
    public string Value { get; public set; }
    public int UtcOffsetMins { get; public set; }
    public string TimeZoneText { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public int get_UtcOffsetMins();
    [CompilerGeneratedAttribute]
public void set_UtcOffsetMins(int value);
    [CompilerGeneratedAttribute]
public string get_TimeZoneText();
    [CompilerGeneratedAttribute]
public void set_TimeZoneText(string value);
}
public static class Microsoft.Recognizers.Text.DateTime.TimeZoneUtility : object {
    private static RegexOptions RegexFlags;
    private static Regex BracketRegex;
    private static TimeSpan RegexTimeOut { get; }
    private static TimeZoneUtility();
    private static TimeSpan get_RegexTimeOut();
    public static List`1<ExtractResult> MergeTimeZones(List`1<ExtractResult> originalErs, List`1<ExtractResult> timeZoneErs, string text);
    public static bool ShouldResolveTimeZone(ExtractResult er, DateTimeOptions options);
    public static StringMatcher BuildMatcherFromLists(List`1[] collections);
    private static ExtractResult ExtendTimeZoneExtraction(ExtractResult timeZoneEr, string text);
}
public class Microsoft.Recognizers.Text.DateTime.Token : object {
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    [CompilerGeneratedAttribute]
private Metadata <Metadata>k__BackingField;
    public int Start { get; }
    public int End { get; }
    public Metadata Metadata { get; }
    public int Length { get; }
    public Token(int s, int e, Metadata metadata);
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public int get_End();
    [CompilerGeneratedAttribute]
public Metadata get_Metadata();
    public int get_Length();
    public static List`1<Token> GetTokenFromRegex(Regex regex, string text);
    public static List`1<ExtractResult> MergeAllTokens(List`1<Token> tokens, string text, string extractorName);
    public sealed virtual Token Clone();
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TimeParser : BaseTimeParser {
    public TimeParser(ITimeParserConfiguration configuration);
    protected virtual DateTimeResolutionResult InternalParse(string text, DateTime referenceTime);
    private DateTimeResolutionResult ParseIsh(string text, DateTime referenceTime);
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishCommonDateTimeParserConfiguration : BaseDateParserConfiguration {
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public TurkishCommonDateTimeParserConfiguration(IDateTimeOptionsConfiguration config);
    public virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishDateExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MonthRegex;
    public static Regex MonthNumRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex SingleWeekDayRegex;
    public static Regex OnRegex;
    public static Regex RelaxedOnRegex;
    public static Regex ThisRegex;
    public static Regex LastDateRegex;
    public static Regex NextDateRegex;
    public static Regex DateUnitRegex;
    public static Regex SpecialDayRegex;
    public static Regex WeekDayOfMonthRegex;
    public static Regex RelativeWeekDayRegex;
    public static Regex SpecialDate;
    public static Regex SpecialDayWithNumRegex;
    public static Regex ForTheRegex;
    public static Regex WeekDayAndDayOfMothRegex;
    public static Regex WeekDayAndDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex StrictRelativeRegex;
    public static Regex PrefixArticleRegex;
    public static Regex OfMonth;
    public static Regex MonthEnd;
    public static Regex WeekDayEnd;
    public static Regex WeekDayStart;
    public static Regex YearSuffix;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex InConnectorRegex;
    public static Regex SinceYearSuffixRegex;
    public static Regex RangeUnitRegex;
    public static Regex RangeConnectorSymbolRegex;
    public static ImmutableDictionary`2<string, int> DayOfWeek;
    public static ImmutableDictionary`2<string, int> MonthOfYear;
    public static Regex BeforeAfterRegex;
    private static RegexOptions RegexFlags;
    private static Regex DayRegex;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexList>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <ImplicitDateList>k__BackingField;
    public IEnumerable`1<Regex> DateRegexList { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IEnumerable`1<Regex> ImplicitDateList { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DayOfWeek { get; }
    private IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthOfYear { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.OfMonth { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MonthEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayEnd { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayStart { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.ForTheRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayOfMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayAndDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RelativeMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.StrictRelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.WeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.PrefixArticleRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.SinceYearSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.RangeConnectorSymbolRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.BeforeAfterRegex { get; }
    public TurkishDateExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static TurkishDateExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexList();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_ImplicitDateList();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DayOfWeek();
    private sealed virtual override IImmutableDictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthOfYear();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_OfMonth();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MonthEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayEnd();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayStart();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_ForTheRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayOfMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayAndDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RelativeMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_StrictRelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_WeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_PrefixArticleRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_SinceYearSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_RangeConnectorSymbolRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateExtractorConfiguration.get_BeforeAfterRegex();
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishDateParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex LastTokenRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <DateTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <DateRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OnRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayWithNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ThisRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ForTheRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayOfMothRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekDayAndDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <StrictRelativeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UpcomingPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeDurationToDatePatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <SameDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusOneDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <PlusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <MinusTwoDayTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public string DateTokenPrefix { get; }
    public IExtractor IntegerExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public IEnumerable`1<Regex> DateRegexes { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex OnRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex SpecialDayWithNumRegex { get; }
    public Regex NextRegex { get; }
    public Regex ThisRegex { get; }
    public Regex LastRegex { get; }
    public Regex UnitRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex MonthRegex { get; }
    public Regex WeekDayOfMonthRegex { get; }
    public Regex ForTheRegex { get; }
    public Regex WeekDayAndDayOfMothRegex { get; }
    public Regex WeekDayAndDayRegex { get; }
    public Regex RelativeMonthRegex { get; }
    public Regex StrictRelativeRegex { get; }
    public Regex YearSuffix { get; }
    public Regex RelativeWeekDayRegex { get; }
    public Regex RelativeDayRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex UpcomingPrefixRegex { get; }
    public Regex PastPrefixRegex { get; }
    public Regex BeforeAfterRegex { get; }
    public Regex TasksModeDurationToDatePatterns { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> DayOfWeek { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableList`1<string> SameDayTerms { get; }
    public IImmutableList`1<string> PlusOneDayTerms { get; }
    public IImmutableList`1<string> MinusOneDayTerms { get; }
    public IImmutableList`1<string> PlusTwoDayTerms { get; }
    public IImmutableList`1<string> MinusTwoDayTerms { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.CheckBothBeforeAfter { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public TurkishDateParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static TurkishDateParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DateTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_DateRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OnRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayWithNumRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ThisRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ForTheRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayOfMothRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekDayAndDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_StrictRelativeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearSuffix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UpcomingPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeDurationToDatePatterns();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfWeek();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_SameDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusOneDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_PlusTwoDayTerms();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableList`1<string> get_MinusTwoDayTerms();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual int GetSwiftMonthOrYear(string text);
    public sealed virtual bool IsCardinalLast(string text);
    public sealed virtual string Normalize(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishDatePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex RangeConnectorRegex;
    public static Regex DayRegex;
    public static Regex MonthNumRegex;
    public static Regex IllegalYearRegex;
    public static Regex YearRegex;
    public static Regex WeekDayRegex;
    public static Regex RelativeMonthRegex;
    public static Regex WrittenMonthRegex;
    public static Regex MonthSuffixRegex;
    public static Regex DateUnitRegex;
    public static Regex TimeUnitRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex FutureSuffixRegex;
    public static Regex NowRegex;
    public static Regex RangePrefixRegex;
    public static Regex SimpleCasesRegex;
    public static Regex MonthFrontSimpleCasesRegex;
    public static Regex MonthFrontBetweenRegex;
    public static Regex BetweenRegex;
    public static Regex MonthWithYear;
    public static Regex OneWordPeriodRegex;
    public static Regex MonthNumWithYear;
    public static Regex WeekOfMonthRegex;
    public static Regex WeekOfYearRegex;
    public static Regex FollowedDateUnit;
    public static Regex NumberCombinedWithDateUnit;
    public static Regex QuarterRegex;
    public static Regex QuarterRegexYearFront;
    public static Regex AllHalfYearRegex;
    public static Regex SeasonRegex;
    public static Regex WhichWeekRegex;
    public static Regex WeekOfRegex;
    public static Regex MonthOfRegex;
    public static Regex RangeUnitRegex;
    public static Regex InConnectorRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex RestOfDateRegex;
    public static Regex LaterEarlyPeriodRegex;
    public static Regex WeekWithWeekDayRangeRegex;
    public static Regex YearPlusNumberRegex;
    public static Regex DecadeWithCenturyRegex;
    public static Regex YearPeriodRegex;
    public static Regex ComplexDatePeriodRegex;
    public static Regex RelativeDecadeRegex;
    public static Regex ReferenceDatePeriodRegex;
    public static Regex AgoRegex;
    public static Regex LaterRegex;
    public static Regex LessThanRegex;
    public static Regex MoreThanRegex;
    public static Regex CenturySuffixRegex;
    public static Regex FirstLastRegex;
    public static Regex OfYearRegex;
    private static RegexOptions RegexFlags;
    private static Regex ExcludeSuffixRegex;
    private static Regex FromRegex;
    private static Regex[] SimpleCasesRegexes;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    public IDateExtractor DatePointExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.SimpleCasesRegexes { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.IllegalYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FollowedDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NumberCombinedWithDateUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FutureSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WeekOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RangeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.InConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.YearPeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ComplexDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.RelativeDecadeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.ReferenceDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.AgoRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LaterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CenturySuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.MonthNumRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.FirstLastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.OfYearRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.DurationDateRestrictions { get; }
    public TurkishDatePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static TurkishDatePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_SimpleCasesRegexes();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_IllegalYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FollowedDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NumberCombinedWithDateUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FutureSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WeekOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RangeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_InConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_YearPeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ComplexDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_RelativeDecadeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_ReferenceDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_AgoRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LaterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CenturySuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_MonthNumRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_FirstLastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_OfYearRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override String[] Microsoft.Recognizers.Text.DateTime.IDatePeriodExtractorConfiguration.get_DurationDateRestrictions();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishDatePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PreviousPrefixRegex;
    public static Regex ThisPrefixRegex;
    public static Regex AfterNextSuffixRegex;
    public static Regex RelativeRegex;
    public static Regex UnspecificEndOfRangeRegex;
    private static RegexOptions RegexFlags;
    private static IList`1<string> monthTermsPadded;
    private static IList`1<string> weekendTermsPadded;
    private static IList`1<string> weekTermsPadded;
    private static IList`1<string> yearTermsPadded;
    private static Regex NextPrefixRegex;
    [CompilerGeneratedAttribute]
private int <MinYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxYearNum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontBetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BetweenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthFrontSimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleCasesRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OneWordPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthNumWithYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfMonthRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <QuarterRegexYearFront>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllHalfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SeasonRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WhichWeekRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MonthOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterEarlyPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WeekWithWeekDayRangeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPlusNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DecadeWithCenturyRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearPeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ComplexDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeDecadeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ReferenceDatePeriodRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AgoRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LessThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MoreThanRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <CenturySuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TodayNowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FirstLastRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OfYearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <CardinalMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <DayOfMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <MonthOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SeasonMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <SpecialYearPrefixesMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <WrittenDecades>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <SpecialDecadeCases>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableList`1<string> <InStringList>k__BackingField;
    public int MinYearNum { get; }
    public int MaxYearNum { get; }
    public string TokenBeforeDate { get; }
    public IDateExtractor DateExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser DurationParser { get; }
    public Regex MonthFrontBetweenRegex { get; }
    public Regex BetweenRegex { get; }
    public Regex MonthFrontSimpleCasesRegex { get; }
    public Regex SimpleCasesRegex { get; }
    public Regex OneWordPeriodRegex { get; }
    public Regex MonthWithYear { get; }
    public Regex MonthNumWithYear { get; }
    public Regex YearRegex { get; }
    public Regex PastRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex WeekOfMonthRegex { get; }
    public Regex WeekOfYearRegex { get; }
    public Regex QuarterRegex { get; }
    public Regex QuarterRegexYearFront { get; }
    public Regex AllHalfYearRegex { get; }
    public Regex SeasonRegex { get; }
    public Regex WhichWeekRegex { get; }
    public Regex WeekOfRegex { get; }
    public Regex MonthOfRegex { get; }
    public Regex InConnectorRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex RestOfDateRegex { get; }
    public Regex LaterEarlyPeriodRegex { get; }
    public Regex WeekWithWeekDayRangeRegex { get; }
    public Regex YearPlusNumberRegex { get; }
    public Regex DecadeWithCenturyRegex { get; }
    public Regex YearPeriodRegex { get; }
    public Regex ComplexDatePeriodRegex { get; }
    public Regex RelativeDecadeRegex { get; }
    public Regex ReferenceDatePeriodRegex { get; }
    public Regex AgoRegex { get; }
    public Regex LaterRegex { get; }
    public Regex LessThanRegex { get; }
    public Regex MoreThanRegex { get; }
    public Regex CenturySuffixRegex { get; }
    public Regex NowRegex { get; }
    public Regex SpecialDayRegex { get; }
    public Regex TodayNowRegex { get; }
    public Regex FirstLastRegex { get; }
    public Regex OfYearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.RelativeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.NextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.PreviousPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.UnspecificEndOfRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.AmbiguousPointRangeRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> CardinalMap { get; }
    public IImmutableDictionary`2<string, int> DayOfMonth { get; }
    public IImmutableDictionary`2<string, int> MonthOfYear { get; }
    public IImmutableDictionary`2<string, string> SeasonMap { get; }
    public IImmutableDictionary`2<string, string> SpecialYearPrefixesMap { get; }
    public IImmutableDictionary`2<string, int> WrittenDecades { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IImmutableDictionary`2<string, int> SpecialDecadeCases { get; }
    public IImmutableList`1<string> InStringList { get; }
    public TurkishDatePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static TurkishDatePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public int get_MinYearNum();
    [CompilerGeneratedAttribute]
public int get_MaxYearNum();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontBetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BetweenRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthFrontSimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleCasesRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OneWordPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthNumWithYear();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfMonthRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_QuarterRegexYearFront();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllHalfYearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SeasonRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WhichWeekRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MonthOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterEarlyPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WeekWithWeekDayRangeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPlusNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DecadeWithCenturyRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearPeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ComplexDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeDecadeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ReferenceDatePeriodRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AgoRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LessThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MoreThanRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_CenturySuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TodayNowRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FirstLastRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_OfYearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISimpleDatePeriodParserConfiguration.get_RelativeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_NextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_PreviousPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_UnspecificEndOfRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_AmbiguousPointRangeRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDatePeriodParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_CardinalMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_DayOfMonth();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_MonthOfYear();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SeasonMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_SpecialYearPrefixesMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_WrittenDecades();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_SpecialDecadeCases();
    [CompilerGeneratedAttribute]
public IImmutableList`1<string> get_InStringList();
    public sealed virtual int GetSwiftDayOrMonth(string text);
    public sealed virtual int GetSwiftYear(string text);
    public sealed virtual bool IsFuture(string text);
    public sealed virtual bool IsLastCardinal(string text);
    public sealed virtual bool IsMonthOnly(string text);
    public sealed virtual bool IsMonthToDate(string text);
    public sealed virtual bool IsWeekend(string text);
    public sealed virtual bool IsWeekOnly(string text);
    public sealed virtual bool IsFortnight(string text);
    public sealed virtual bool IsYearOnly(string text);
    public sealed virtual bool IsYearToDate(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishDateTimeAltExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex ThisPrefixRegex;
    public static Regex PreviousPrefixRegex;
    public static Regex NextPrefixRegex;
    public static Regex AmRegex;
    public static Regex PmRegex;
    public static Regex RangePrefixRegex;
    public static Regex[] RelativePrefixList;
    public static Regex[] AmPmRegexList;
    private static RegexOptions RegexFlags;
    private static Regex OrRegex;
    private static Regex DayRegex;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RelativePrefixList { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.AmPmRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.OrRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.ThisPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.DayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.RangePrefixRegex { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public TurkishDateTimeAltExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static TurkishDateTimeAltExtractorConfiguration();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RelativePrefixList();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_AmPmRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_OrRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_ThisPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_DayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeAltExtractorConfiguration.get_RangePrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishDateTimeAltParserConfiguration : object {
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public TurkishDateTimeAltParserConfiguration(ICommonDateTimeParserConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishDateTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrepositionRegex;
    public static Regex NowRegex;
    public static Regex SuffixRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeOfTodayAfterRegex;
    public static Regex TimeOfTodayBeforeRegex;
    public static Regex SimpleTimeOfTodayAfterRegex;
    public static Regex SimpleTimeOfTodayBeforeRegex;
    public static Regex SpecificEndOfRegex;
    public static Regex UnspecificEndOfRegex;
    public static Regex UnitRegex;
    public static Regex ConnectorRegex;
    public static Regex NumberAsTimeRegex;
    public static Regex DateNumberConnectorRegex;
    public static Regex YearRegex;
    public static Regex YearSuffix;
    public static Regex SuffixAfterRegex;
    private static RegexOptions RegexFlags;
    private static Regex ExcludeSuffixRegex;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DatePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePointExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    public IExtractor IntegerExtractor { get; }
    public IDateExtractor DatePointExtractor { get; }
    public IDateTimeExtractor TimePointExtractor { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NowRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SimpleTimeOfTodayBeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SpecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnspecificEndOfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.UnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.NumberAsTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.DateNumberConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.YearSuffix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.SuffixAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public TurkishDateTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static TurkishDateTimeExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DatePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePointExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NowRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SimpleTimeOfTodayBeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SpecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnspecificEndOfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_UnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_NumberAsTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_DateNumberConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_YearSuffix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimeExtractorConfiguration.get_SuffixAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    public sealed virtual bool IsConnector(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishDateTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex AmTimeRegex;
    public static Regex PmTimeRegex;
    private static RegexOptions RegexFlags;
    private static Regex NowTimeRegex;
    private static Regex RecentlyTimeRegex;
    private static Regex AsapTimeRegex;
    private static Regex NextPrefixRegex;
    private static Regex PreviousPrefixRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NowRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayAfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SimpleTimeOfTodayBeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnspecificEndOfRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DateNumberConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrepositionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor CardinalExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex NowRegex { get; }
    public Regex AMTimeRegex { get; }
    public Regex PMTimeRegex { get; }
    public Regex SimpleTimeOfTodayAfterRegex { get; }
    public Regex SimpleTimeOfTodayBeforeRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex SpecificEndOfRegex { get; }
    public Regex UnspecificEndOfRegex { get; }
    public Regex UnitRegex { get; }
    public Regex DateNumberConnectorRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex ConnectorRegex { get; }
    public Regex YearRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public TurkishDateTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static TurkishDateTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NowRegex();
    public sealed virtual Regex get_AMTimeRegex();
    public sealed virtual Regex get_PMTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayAfterRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SimpleTimeOfTodayBeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnspecificEndOfRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DateNumberConnectorRegex();
    [CompilerGeneratedAttribute]
public Regex get_PrepositionRegex();
    [CompilerGeneratedAttribute]
public Regex get_ConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual int GetHour(string text, int hour);
    public sealed virtual bool GetMatchedNowTimex(string text, String& timex);
    public sealed virtual int GetSwiftDay(string text);
    public sealed virtual bool ContainsAmbiguousToken(string text, string matchedText);
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishDateTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TimeNumberCombinedWithUnit;
    public static Regex HyphenDateRegex;
    public static Regex PeriodTimeOfDayWithDateRegex;
    public static Regex RelativeTimeUnitRegex;
    public static Regex RestOfDateTimeRegex;
    public static Regex AmDescRegex;
    public static Regex PmDescRegex;
    public static Regex WithinNextPrefixRegex;
    public static Regex DateUnitRegex;
    public static Regex PrefixDayRegex;
    public static Regex SuffixRegex;
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex WeekDaysRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromRegex;
    private static Regex ExcludeSuffixRegex;
    private static Regex RangePrefixRegex;
    private static Regex[] SimpleCases;
    private static Regex PeriodTimeOfDayRegex;
    private static Regex PeriodSpecificTimeOfDayRegex;
    private static Regex TimeUnitRegex;
    private static Regex TimeFollowedUnit;
    private static Regex GeneralEndingRegex;
    private static Regex MiddlePauseRegex;
    private static Regex RangeConnectorRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleDateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public Regex PrepositionRegex { get; }
    public Regex TillRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex NextPrefixRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex WeekDayRegex { get; }
    public Regex FollowedUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PrefixDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.DateUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RelativeTimeUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.RestOfDateTimeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.MiddlePauseRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PeriodTimeOfDayWithDateRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.PmDescRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.WithinNextPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.SuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.AfterRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public string TokenBeforeDate { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor SingleDateExtractor { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor SingleDateTimeExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public TurkishDateTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static TurkishDateTimePeriodExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual Regex get_PrepositionRegex();
    public sealed virtual Regex get_TillRegex();
    public sealed virtual Regex get_TimeOfDayRegex();
    public sealed virtual Regex get_SpecificTimeOfDayRegex();
    public sealed virtual Regex get_PreviousPrefixRegex();
    public sealed virtual Regex get_NextPrefixRegex();
    public sealed virtual Regex get_FutureSuffixRegex();
    public sealed virtual Regex get_WeekDayRegex();
    public sealed virtual Regex get_FollowedUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PrefixDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_DateUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RelativeTimeUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_RestOfDateTimeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_MiddlePauseRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PeriodTimeOfDayWithDateRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_PmDescRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_WithinNextPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_SuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_AfterRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodExtractorConfiguration.get_TasksmodeMealTimeofDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleDateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool HasConnectorToken(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishDateTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex MorningStartEndRegex;
    public static Regex AfternoonStartEndRegex;
    public static Regex EveningStartEndRegex;
    public static Regex NightStartEndRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenBeforeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HyphenDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PreviousPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FutureSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <UnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodTimeOfDayWithDateRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeTimeUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RestOfDateTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PrefixDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <BeforeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AfterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayTimeParser>k__BackingField;
    public string TokenBeforeDate { get; }
    public string TokenBeforeTime { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex HyphenDateRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex SpecificTimeOfDayRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex PreviousPrefixRegex { get; }
    public Regex FutureRegex { get; }
    public Regex FutureSuffixRegex { get; }
    public Regex NumberCombinedWithUnitRegex { get; }
    public Regex UnitRegex { get; }
    public Regex PeriodTimeOfDayWithDateRegex { get; }
    public Regex RelativeTimeUnitRegex { get; }
    public Regex RestOfDateTimeRegex { get; }
    public Regex AmDescRegex { get; }
    public Regex PmDescRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex PrefixDayRegex { get; }
    public Regex BeforeRegex { get; }
    public Regex AfterRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.TasksmodeMealTimeofDayRegex { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeParser HolidayTimeParser { get; }
    public TurkishDateTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static TurkishDateTimePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeTime();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HyphenDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PreviousPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FutureSuffixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_UnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodTimeOfDayWithDateRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RelativeTimeUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RestOfDateTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PmDescRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PrefixDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_BeforeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AfterRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDateTimePeriodParserConfiguration.get_TasksmodeMealTimeofDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayTimeParser();
    public sealed virtual bool GetMatchedTimeRange(string text, String& todSymbol, Int32& beginHour, Int32& endHour, Int32& endMin);
    public sealed virtual int GetSwiftPrefix(string text);
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishDurationExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DurationUnitRegex;
    public static Regex SuffixAndRegex;
    public static Regex DurationFollowedUnit;
    public static Regex NumberCombinedWithDurationUnit;
    public static Regex AnUnitRegex;
    public static Regex DuringRegex;
    public static Regex AllRegex;
    public static Regex HalfRegex;
    public static Regex ConjunctionRegex;
    public static Regex InexactNumberRegex;
    public static Regex InexactNumberUnitRegex;
    public static Regex RelativeDurationUnitRegex;
    public static Regex DurationConnectorRegex;
    public static Regex ModPrefixRegex;
    public static Regex ModSuffixRegex;
    public static Regex SpecialNumberUnitRegex;
    public static Regex MoreThanRegex;
    public static Regex LessThanRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.FollowedUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.NumberCombinedWithUnit { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DuringRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.AllRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.HalfRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SuffixAndRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ConjunctionRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.InexactNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.RelativeDurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.DurationConnectorRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.SpecialNumberUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.MoreThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.LessThanRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.ModSuffixRegex { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public TurkishDurationExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static TurkishDurationExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_FollowedUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_NumberCombinedWithUnit();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DuringRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_AllRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_HalfRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SuffixAndRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ConjunctionRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_InexactNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_RelativeDurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_DurationConnectorRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_SpecialNumberUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_MoreThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_LessThanRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationExtractorConfiguration.get_ModSuffixRegex();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishDurationParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex PrefixArticleRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IExtractor <CardinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NumberCombinedWithUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AnUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DuringRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AllDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HalfDateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FollowedUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConjunctionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InexactNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DurationUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecialNumberUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, long> <UnitValueMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, double> <DoubleNumbers>k__BackingField;
    public IExtractor CardinalExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IParser NumberParser { get; }
    public Regex NumberCombinedWithUnit { get; }
    public Regex AnUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.PrefixArticleRegex { get; }
    public Regex DuringRegex { get; }
    public Regex AllDateUnitRegex { get; }
    public Regex HalfDateUnitRegex { get; }
    public Regex SuffixAndRegex { get; }
    public Regex FollowedUnit { get; }
    public Regex ConjunctionRegex { get; }
    public Regex InexactNumberRegex { get; }
    public Regex InexactNumberUnitRegex { get; }
    public Regex DurationUnitRegex { get; }
    public Regex SpecialNumberUnitRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.CheckBothBeforeAfter { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public IImmutableDictionary`2<string, long> UnitValueMap { get; }
    public IImmutableDictionary`2<string, double> DoubleNumbers { get; }
    public TurkishDurationParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static TurkishDurationParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_CardinalExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NumberCombinedWithUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AnUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_PrefixArticleRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DuringRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AllDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HalfDateUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FollowedUnit();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ConjunctionRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InexactNumberUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DurationUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecialNumberUnitRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IDurationParserConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, long> get_UnitValueMap();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, double> get_DoubleNumbers();
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishHolidayExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex YearRegex;
    public static Regex H1;
    public static Regex H2;
    public static Regex H3;
    public static Regex[] HolidayRegexList;
    private static RegexOptions RegexFlags;
    public IEnumerable`1<Regex> HolidayRegexes { get; }
    public TurkishHolidayExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static TurkishHolidayExtractorConfiguration();
    public sealed virtual IEnumerable`1<Regex> get_HolidayRegexes();
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishHolidayParserConfiguration : BaseHolidayParserConfiguration {
    public TurkishHolidayParserConfiguration(IDateTimeOptionsConfiguration config);
    public virtual int GetSwiftYear(string text);
    public virtual string SanitizeHolidayToken(string holiday);
    protected virtual IDictionary`2<string, Func`2<int, DateTime>> InitHolidayFuncs();
    private static DateTime NewYear(int year);
    private static DateTime NewYearEve(int year);
    private static DateTime ChristmasDay(int year);
    private static DateTime ChristmasEve(int year);
    private static DateTime ValentinesDay(int year);
    private static DateTime WhiteLoverDay(int year);
    private static DateTime FoolDay(int year);
    private static DateTime EarthDay(int year);
    private static DateTime GirlsDay(int year);
    private static DateTime TreePlantDay(int year);
    private static DateTime FemaleDay(int year);
    private static DateTime ChildrenDay(int year);
    private static DateTime YouthDay(int year);
    private static DateTime TeacherDay(int year);
    private static DateTime SinglesDay(int year);
    private static DateTime MaoBirthday(int year);
    private static DateTime InaugurationDay(int year);
    private static DateTime GroundhogDay(int year);
    private static DateTime StPatrickDay(int year);
    private static DateTime StGeorgeDay(int year);
    private static DateTime Mayday(int year);
    private static DateTime CincoDeMayoDay(int year);
    private static DateTime BaptisteDay(int year);
    private static DateTime UsaIndependenceDay(int year);
    private static DateTime BastilleDay(int year);
    private static DateTime HalloweenDay(int year);
    private static DateTime AllHallowsDay(int year);
    private static DateTime AllSoulsDay(int year);
    private static DateTime GuyFawkesDay(int year);
    private static DateTime VeteransDay(int year);
    private static DateTime EasterDay(int year);
    private static DateTime AshWednesday(int year);
    private static DateTime PalmSunday(int year);
    private static DateTime MaundyThursday(int year);
    private static DateTime GoodFriday(int year);
    private static DateTime EasterSaturday(int year);
    private static DateTime EasterMonday(int year);
    private static DateTime AscensionDay(int year);
    private static DateTime WhiteSunday(int year);
    private static DateTime WhiteMonday(int year);
    private static DateTime TrinitySunday(int year);
    private static DateTime CorpusChristi(int year);
    private static DateTime Ramadan(int year);
    private static DateTime Sacrifice(int year);
    private static DateTime Republic(int year);
    private static DateTime Victory(int year);
    private static DateTime Children(int year);
    private static DateTime Youth(int year);
    private static DateTime Democracy(int year);
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishMergedExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex SinceRegex;
    public static Regex AroundRegex;
    public static Regex EqualRegex;
    public static Regex FromToRegex;
    public static Regex SingleAmbiguousMonthRegex;
    public static Regex PrepositionSuffixRegex;
    public static Regex AmbiguousRangeModifierPrefix;
    public static Regex NumberEndingPattern;
    public static Regex SuffixAfterRegex;
    public static Regex UnspecificDatePeriodRegex;
    public static Regex FailFastRegex;
    public static Regex YearRegex;
    public static Regex[] TermFilterRegexes;
    public static StringMatcher SuperfluousWordMatcher;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SetExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <HolidayExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeZoneExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeListExtractor <DateTimeAltExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TasksModeMentionFilters>k__BackingField;
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor SetExtractor { get; }
    public IDateTimeExtractor HolidayExtractor { get; }
    public IDateTimeZoneExtractor TimeZoneExtractor { get; }
    public IDateTimeListExtractor DateTimeAltExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SinceRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AroundRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.EqualRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.FromToRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SingleAmbiguousMonthRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PrepositionSuffixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.AmbiguousRangeModifierPrefix { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.PotentialAmbiguousRangeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.NumberEndingPattern { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuffixAfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificDatePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.UnspecificTimePeriodRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.YearRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.FailFastRegex { get; }
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.TermFilterRegexes { get; }
    private StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.CheckBothBeforeAfter { get; }
    public Regex TasksModeMentionFilters { get; }
    public TurkishMergedExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static TurkishMergedExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SetExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_HolidayExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeZoneExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeListExtractor get_DateTimeAltExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SinceRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AroundRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_EqualRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_FromToRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SingleAmbiguousMonthRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PrepositionSuffixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_AmbiguousRangeModifierPrefix();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_PotentialAmbiguousRangeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_NumberEndingPattern();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuffixAfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificDatePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_UnspecificTimePeriodRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_YearRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_FailFastRegex();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_TermFilterRegexes();
    private sealed virtual override StringMatcher Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedExtractorConfiguration.get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TasksModeMentionFilters();
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishMergedParserConfiguration : TurkishCommonDateTimeParserConfiguration {
    public static Regex BeforeRegex;
    public static Regex AfterRegex;
    public static Regex SinceRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private Regex <AroundRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EqualRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SuffixAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <YearRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <SetParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <HolidayParser>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMatcher <SuperfluousWordMatcher>k__BackingField;
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.BeforeRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.AfterRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.SinceRegex { get; }
    public Regex AroundRegex { get; }
    public Regex EqualRegex { get; }
    public Regex SuffixAfter { get; }
    public Regex YearRegex { get; }
    public IDateTimeParser SetParser { get; }
    public IDateTimeParser HolidayParser { get; }
    public StringMatcher SuperfluousWordMatcher { get; }
    private bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.CheckBothBeforeAfter { get; }
    public TurkishMergedParserConfiguration(IDateTimeOptionsConfiguration config);
    private static TurkishMergedParserConfiguration();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.get_BeforeRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.get_AfterRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.get_SinceRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AroundRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EqualRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SuffixAfter();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_YearRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_SetParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_HolidayParser();
    [CompilerGeneratedAttribute]
public sealed virtual StringMatcher get_SuperfluousWordMatcher();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.IMergedParserConfiguration.get_CheckBothBeforeAfter();
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishSetExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex SetUnitRegex;
    public static Regex PeriodicRegex;
    public static Regex EachUnitRegex;
    public static Regex EachPrefixRegex;
    public static Regex SetLastRegex;
    public static Regex EachDayRegex;
    public static Regex SetWeekDayRegex;
    public static Regex SetEachRegex;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.LastRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachPrefixRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.PeriodicRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachUnitRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.EachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.BeforeEachDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetWeekDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.SetEachRegex { get; }
    public TurkishSetExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static TurkishSetExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_LastRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachPrefixRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_PeriodicRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachUnitRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_EachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_BeforeEachDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetWeekDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ISetExtractorConfiguration.get_SetEachRegex();
    public sealed virtual Tuple`2<string, int> WeekDayGroupMatchTuple(Match match);
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishSetParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex DateUnitRegex;
    private static List`1<string> ThisTerms;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DurationParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateExtractor <DateExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DatePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DatePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DateTimePeriodExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <DateTimePeriodParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PeriodicRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <EachDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetWeekDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SetEachRegex>k__BackingField;
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeParser DurationParser { get; }
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IDateExtractor DateExtractor { get; }
    public IDateTimeParser DateParser { get; }
    public IDateTimeExtractor DateTimeExtractor { get; }
    public IDateTimeParser DateTimeParser { get; }
    public IDateTimeExtractor DatePeriodExtractor { get; }
    public IDateTimeParser DatePeriodParser { get; }
    public IDateTimeExtractor TimePeriodExtractor { get; }
    public IDateTimeParser TimePeriodParser { get; }
    public IDateTimeExtractor DateTimePeriodExtractor { get; }
    public IDateTimeParser DateTimePeriodParser { get; }
    public IImmutableDictionary`2<string, string> UnitMap { get; }
    public Regex EachPrefixRegex { get; }
    public Regex PeriodicRegex { get; }
    public Regex EachUnitRegex { get; }
    public Regex EachDayRegex { get; }
    public Regex SetWeekDayRegex { get; }
    public Regex SetEachRegex { get; }
    public TurkishSetParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static TurkishSetParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DurationParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateExtractor get_DateExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DatePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DatePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_DateTimePeriodExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_DateTimePeriodParser();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachPrefixRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PeriodicRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachUnitRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_EachDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetWeekDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SetEachRegex();
    public sealed virtual bool GetMatchedDailyTimex(string text, String& timex);
    public sealed virtual bool GetMatchedUnitTimex(string text, String& timex);
    public sealed virtual string WeekDayGroupMatchString(Match match);
    public sealed virtual string ReplaceValueInTextWithFutTerm(string text, string value);
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishTimeExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex DescRegex;
    public static Regex HourNumRegex;
    public static Regex MinuteNumRegex;
    public static Regex OclockRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex LessThanOneHour;
    public static Regex WrittenTimeRegex;
    public static Regex TimePrefix;
    public static Regex TimeSuffix;
    public static Regex BasicTime;
    public static Regex MidnightRegex;
    public static Regex MidmorningRegex;
    public static Regex MidafternoonRegex;
    public static Regex MiddayRegex;
    public static Regex MidTimeRegex;
    public static Regex AtRegex;
    public static Regex IshRegex;
    public static Regex TimeUnitRegex;
    public static Regex ConnectNumRegex;
    public static Regex TimeBeforeAfterRegex;
    public static Regex[] TimeRegexList;
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <DurationExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    private IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeRegexList { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.AtRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.IshRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.TimeBeforeAfterRegex { get; }
    public IDateTimeExtractor DurationExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public string TimeTokenPrefix { get; }
    public Dictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public TurkishTimeExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static TurkishTimeExtractorConfiguration();
    private sealed virtual override IEnumerable`1<Regex> Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeRegexList();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_AtRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_IshRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeExtractorConfiguration.get_TimeBeforeAfterRegex();
    [CompilerGeneratedAttribute]
public IDateTimeExtractor get_DurationExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    public sealed virtual string get_TimeTokenPrefix();
    public sealed virtual Dictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishTimeParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex TimeSuffixFull;
    private static Regex LunchRegex;
    private static Regex NightRegex;
    private static Regex HalfTokenRegex;
    private static Regex QuarterTokenRegex;
    private static Regex ToTokenRegex;
    [CompilerGeneratedAttribute]
private string <TimeTokenPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AtRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MealTimeRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Regex> <TimeRegexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    public string TimeTokenPrefix { get; }
    public Regex AtRegex { get; }
    public Regex MealTimeRegex { get; }
    public IEnumerable`1<Regex> TimeRegexes { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public TurkishTimeParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static TurkishTimeParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TimeTokenPrefix();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AtRegex();
    [CompilerGeneratedAttribute]
public Regex get_MealTimeRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Regex> get_TimeRegexes();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    public sealed virtual void AdjustByPrefix(string prefix, Int32& hour, Int32& min, Boolean& hasMin);
    public sealed virtual void AdjustBySuffix(string suffix, Int32& hour, Int32& min, Boolean& hasMin, Boolean& hasAm, Boolean& hasPm);
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishTimePeriodExtractorConfiguration : BaseDateTimeOptionsConfiguration {
    public static Regex TillRegex;
    public static Regex HourRegex;
    public static Regex PeriodHourNumRegex;
    public static Regex PeriodDescRegex;
    public static Regex PmRegex;
    public static Regex AmRegex;
    public static Regex PureNumFromTo;
    public static Regex PureNumBetweenAnd;
    public static Regex SpecificTimeFromTo;
    public static Regex SpecificTimeBetweenAnd;
    public static Regex PrepositionRegex;
    public static Regex TimeOfDayRegex;
    public static Regex SpecificTimeOfDayRegex;
    public static Regex TimeUnitRegex;
    public static Regex TimeFollowedUnit;
    public static Regex TimeNumberCombinedWithUnit;
    public static Regex GeneralEndingRegex;
    private static RegexOptions RegexFlags;
    private static Regex FromRegex;
    private static Regex ExcludeSuffixRegex;
    private static Regex RangePrefixRegex;
    private static Regex RangeConnectorRegex;
    [CompilerGeneratedAttribute]
private string <TokenBeforeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <SingleTimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeZoneExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    public string TokenBeforeDate { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public IDateTimeExtractor SingleTimeExtractor { get; }
    public IDateTimeExtractor TimeZoneExtractor { get; }
    public IExtractor IntegerExtractor { get; }
    public IEnumerable`1<Regex> SimpleCasesRegex { get; }
    public IEnumerable`1<Regex> PureNumberRegex { get; }
    private bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.CheckBothBeforeAfter { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TillRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.TimeOfDayRegex { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.GeneralEndingRegex { get; }
    public TurkishTimePeriodExtractorConfiguration(IDateTimeOptionsConfiguration config);
    private static TurkishTimePeriodExtractorConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TokenBeforeDate();
    [CompilerGeneratedAttribute]
public IDateTimeUtilityConfiguration get_UtilityConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_SingleTimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeZoneExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    public sealed virtual IEnumerable`1<Regex> get_SimpleCasesRegex();
    public sealed virtual IEnumerable`1<Regex> get_PureNumberRegex();
    private sealed virtual override bool Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_CheckBothBeforeAfter();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TillRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_TimeOfDayRegex();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimePeriodExtractorConfiguration.get_GeneralEndingRegex();
    public sealed virtual bool GetFromTokenIndex(string text, Int32& index);
    public sealed virtual bool GetBetweenTokenIndex(string text, Int32& index);
    public sealed virtual bool IsConnectorToken(string text);
    public sealed virtual List`1<ExtractResult> ApplyPotentialPeriodAmbiguityHotfix(string text, List`1<ExtractResult> timePeriodErs);
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishTimePeriodParserConfiguration : BaseDateTimeOptionsConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex PluralTokenRegex;
    [CompilerGeneratedAttribute]
private IDateTimeExtractor <TimeExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeParser>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <IntegerExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeParser <TimeZoneParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpecificTimeBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberFromToRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PureNumberBetweenAndRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeOfDayRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <GeneralEndingRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TillRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private IImmutableDictionary`2<string, int> <Numbers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDateTimeUtilityConfiguration <UtilityConfiguration>k__BackingField;
    public IDateTimeExtractor TimeExtractor { get; }
    public IDateTimeParser TimeParser { get; }
    public IExtractor IntegerExtractor { get; }
    public IDateTimeParser TimeZoneParser { get; }
    public Regex SpecificTimeFromToRegex { get; }
    public Regex SpecificTimeBetweenAndRegex { get; }
    public Regex PureNumberFromToRegex { get; }
    public Regex PureNumberBetweenAndRegex { get; }
    public Regex TimeOfDayRegex { get; }
    public Regex GeneralEndingRegex { get; }
    public Regex TillRegex { get; }
    public IImmutableDictionary`2<string, int> Numbers { get; }
    public IDateTimeUtilityConfiguration UtilityConfiguration { get; }
    public TurkishTimePeriodParserConfiguration(ICommonDateTimeParserConfiguration config);
    private static TurkishTimePeriodParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeExtractor get_TimeExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeParser();
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_IntegerExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeParser get_TimeZoneParser();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpecificTimeBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberFromToRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PureNumberBetweenAndRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeOfDayRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_GeneralEndingRegex();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TillRegex();
    [CompilerGeneratedAttribute]
public sealed virtual IImmutableDictionary`2<string, int> get_Numbers();
    [CompilerGeneratedAttribute]
public sealed virtual IDateTimeUtilityConfiguration get_UtilityConfiguration();
    public sealed virtual bool GetMatchedTimeRange(string text, String& timex, Int32& beginHour, Int32& endHour, Int32& endMin);
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.TurkishTimeZoneParserConfiguration : BaseDateTimeOptionsConfiguration {
    public static string TimeZoneEndRegex;
    public static Dictionary`2<string, int> FullToMinMapping;
    public static Regex DirectUtcRegex;
    public static Dictionary`2<string, int> AbbrToMinMapping;
    private string Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.TimeZoneEndRegex { get; }
    private Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.FullToMinMapping { get; }
    private Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.DirectUtcRegex { get; }
    private Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.AbbrToMinMapping { get; }
    public TurkishTimeZoneParserConfiguration(IDateTimeOptionsConfiguration config);
    private static TurkishTimeZoneParserConfiguration();
    private sealed virtual override string Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_TimeZoneEndRegex();
    private sealed virtual override Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_FullToMinMapping();
    private sealed virtual override Regex Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_DirectUtcRegex();
    private sealed virtual override Dictionary`2<string, int> Microsoft.Recognizers.Text.DateTime.ITimeZoneParserConfiguration.get_AbbrToMinMapping();
}
public class Microsoft.Recognizers.Text.DateTime.Turkish.Utilities.TurkishDatetimeUtilityConfiguration : BaseDatetimeUtilityConfiguration {
}
[FlagsAttribute]
public enum Microsoft.Recognizers.Text.DateTime.UnspecificDateTimeTerms : Enum {
    public int value__;
    public static UnspecificDateTimeTerms None;
    public static UnspecificDateTimeTerms NonspecificYear;
    public static UnspecificDateTimeTerms NonspecificMonth;
    public static UnspecificDateTimeTerms NonspecificDay;
}
public abstract class Microsoft.Recognizers.Text.DateTime.Utilities.BaseDatetimeUtilityConfiguration : object {
    [CompilerGeneratedAttribute]
private Regex <AgoRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LaterRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <InConnectorRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SinceYearSuffixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <WithinNextPrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RangeUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TimeUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DateUnitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmPmDescRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <CommonDatePrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RangePrefixRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckBothBeforeAfter>k__BackingField;
    public static TimeSpan RegexTimeOut { get; }
    public Regex AgoRegex { get; public set; }
    public Regex LaterRegex { get; public set; }
    public Regex InConnectorRegex { get; public set; }
    public Regex SinceYearSuffixRegex { get; public set; }
    public Regex WithinNextPrefixRegex { get; public set; }
    public Regex RangeUnitRegex { get; public set; }
    public Regex TimeUnitRegex { get; public set; }
    public Regex DateUnitRegex { get; public set; }
    public Regex AmDescRegex { get; public set; }
    public Regex PmDescRegex { get; public set; }
    public Regex AmPmDescRegex { get; public set; }
    public Regex CommonDatePrefixRegex { get; public set; }
    public Regex RangePrefixRegex { get; public set; }
    public bool CheckBothBeforeAfter { get; public set; }
    public BaseDatetimeUtilityConfiguration(string agoRegex, string laterRegex, string inConnectorRegex, string sinceYearSuffixRegex, string withinNextPrefixRegex, string amDescRegex, string pmDescRegex, string amPmDescRegex, string rangeUnitRegex, string timeUnitRegex, string dateUnitRegex, string commonDatePrefixRegex, string rangePrefixRegex, RegexOptions options, bool checkBothBeforeAfter);
    public static TimeSpan get_RegexTimeOut();
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AgoRegex();
    [CompilerGeneratedAttribute]
public void set_AgoRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LaterRegex();
    [CompilerGeneratedAttribute]
public void set_LaterRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_InConnectorRegex();
    [CompilerGeneratedAttribute]
public void set_InConnectorRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SinceYearSuffixRegex();
    [CompilerGeneratedAttribute]
public void set_SinceYearSuffixRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_WithinNextPrefixRegex();
    [CompilerGeneratedAttribute]
public void set_WithinNextPrefixRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RangeUnitRegex();
    [CompilerGeneratedAttribute]
public void set_RangeUnitRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_TimeUnitRegex();
    [CompilerGeneratedAttribute]
public void set_TimeUnitRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DateUnitRegex();
    [CompilerGeneratedAttribute]
public void set_DateUnitRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AmDescRegex();
    [CompilerGeneratedAttribute]
public void set_AmDescRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PmDescRegex();
    [CompilerGeneratedAttribute]
public void set_PmDescRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AmPmDescRegex();
    [CompilerGeneratedAttribute]
public void set_AmPmDescRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_CommonDatePrefixRegex();
    [CompilerGeneratedAttribute]
public void set_CommonDatePrefixRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RangePrefixRegex();
    [CompilerGeneratedAttribute]
public void set_RangePrefixRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CheckBothBeforeAfter();
    [CompilerGeneratedAttribute]
public void set_CheckBothBeforeAfter(bool value);
}
public class Microsoft.Recognizers.Text.DateTime.Utilities.DateTimeExtra`1 : object {
    [CompilerGeneratedAttribute]
private GroupCollection <NamedEntity>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Type>k__BackingField;
    public GroupCollection NamedEntity { get; public set; }
    public T Type { get; public set; }
    [CompilerGeneratedAttribute]
public GroupCollection get_NamedEntity();
    [CompilerGeneratedAttribute]
public void set_NamedEntity(GroupCollection value);
    [CompilerGeneratedAttribute]
public T get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(T value);
}
public interface Microsoft.Recognizers.Text.DateTime.Utilities.IDateTimeUtilityConfiguration {
    public Regex AgoRegex { get; }
    public Regex LaterRegex { get; }
    public Regex InConnectorRegex { get; }
    public Regex SinceYearSuffixRegex { get; }
    public Regex WithinNextPrefixRegex { get; }
    public Regex RangeUnitRegex { get; }
    public Regex TimeUnitRegex { get; }
    public Regex DateUnitRegex { get; }
    public Regex AmDescRegex { get; }
    public Regex PmDescRegex { get; }
    public Regex AmPmDescRegex { get; }
    public Regex CommonDatePrefixRegex { get; }
    public Regex RangePrefixRegex { get; }
    public bool CheckBothBeforeAfter { get; }
    public abstract virtual Regex get_AgoRegex();
    public abstract virtual Regex get_LaterRegex();
    public abstract virtual Regex get_InConnectorRegex();
    public abstract virtual Regex get_SinceYearSuffixRegex();
    public abstract virtual Regex get_WithinNextPrefixRegex();
    public abstract virtual Regex get_RangeUnitRegex();
    public abstract virtual Regex get_TimeUnitRegex();
    public abstract virtual Regex get_DateUnitRegex();
    public abstract virtual Regex get_AmDescRegex();
    public abstract virtual Regex get_PmDescRegex();
    public abstract virtual Regex get_AmPmDescRegex();
    public abstract virtual Regex get_CommonDatePrefixRegex();
    public abstract virtual Regex get_RangePrefixRegex();
    public abstract virtual bool get_CheckBothBeforeAfter();
}
public class Microsoft.Recognizers.Text.DateTime.Utilities.ModAndDateResult : object {
    [CompilerGeneratedAttribute]
private DateTime <BeginDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mod>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DateTime> <DateList>k__BackingField;
    public DateTime BeginDate { get; public set; }
    public DateTime EndDate { get; public set; }
    public string Mod { get; public set; }
    public List`1<DateTime> DateList { get; public set; }
    public ModAndDateResult(DateTime beginDate, DateTime endDate, string mod, List`1<DateTime> dateList);
    public ModAndDateResult(DateTime beginDate, DateTime endDate);
    [CompilerGeneratedAttribute]
public DateTime get_BeginDate();
    [CompilerGeneratedAttribute]
public void set_BeginDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndDate();
    [CompilerGeneratedAttribute]
public void set_EndDate(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Mod();
    [CompilerGeneratedAttribute]
public void set_Mod(string value);
    [CompilerGeneratedAttribute]
public List`1<DateTime> get_DateList();
    [CompilerGeneratedAttribute]
public void set_DateList(List`1<DateTime> value);
    public static ModAndDateResult GetModAndDate(DateTime beginDate, DateTime endDate, DateTime referenceDate, string timex, bool future);
}
public static class Microsoft.Recognizers.Text.DateTime.Utilities.SetHandler : object {
    public static Tuple`2<string, int> WeekDayGroupMatchTuple(Match match);
    public static string WeekDayGroupMatchString(Match match);
    public static DateTimeResolutionResult ResolveSet(DateTimeResolutionResult& result, string innerTimex);
}
[ExtensionAttribute]
public static class Microsoft.Recognizers.Text.DateTime.Utilities.StringExtension : object {
    [ExtensionAttribute]
public static string Normalized(string text, Dictionary`2<char, char> dic);
}
public static class Microsoft.Recognizers.Text.DateTime.Utilities.TasksModeSetHandler : object {
    public static DateTimeResolutionResult TasksModeResolveSet(DateTimeResolutionResult& result, string innerTimex, DateTimeParseResult pr);
    public static Dictionary`2<string, string> TasksModeGenerateResolutionSetParser(Dictionary`2<string, string> resolutionDic, string mod, string timex);
    public static string TasksModeTimexIntervalExt(string timex);
    public static DateTimeResolutionResult TasksModeAddResolution(DateTimeResolutionResult& result, ExtractResult er, DateTime refDate);
    public static string ReplaceValueInTextWithFutTerm(string text, string value, List`1<string> thisTermList);
    internal static string JoinDateWithValue(DateTime resDate, string value);
    internal static void TasksModeAddAltSingleDateTimeToResolution(Dictionary`2<string, string> resolutionDic, string type, string mod, Dictionary`2<string, string> res);
    internal static string GetStartValue(Resolution timexRes);
    internal static string TasksModeTimexIntervalReplace(string timex);
    internal static string ExtendSetTimex(string timex, string extTimex);
}
public class Microsoft.Recognizers.Text.DateTime.Utilities.TimeFunctions : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<char, int> <NumberDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <LowBoundDesc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DayDescRegex>k__BackingField;
    public Dictionary`2<char, int> NumberDictionary { get; public set; }
    public Dictionary`2<string, int> LowBoundDesc { get; public set; }
    public string DayDescRegex { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<char, int> get_NumberDictionary();
    [CompilerGeneratedAttribute]
public void set_NumberDictionary(Dictionary`2<char, int> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_LowBoundDesc();
    [CompilerGeneratedAttribute]
public void set_LowBoundDesc(Dictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public string get_DayDescRegex();
    [CompilerGeneratedAttribute]
public void set_DayDescRegex(string value);
    public TimeResult HandleLess(DateTimeExtra`1<TimeType> extra);
    public TimeResult HandleKanji(DateTimeExtra`1<TimeType> extra);
    public TimeResult HandleDigit(DateTimeExtra`1<TimeType> extra);
    public DateTimeResolutionResult PackTimeResult(DateTimeExtra`1<TimeType> extra, TimeResult timeResult, DateTime referenceTime);
    public int MatchToValue(string text);
    public void AddDesc(TimeResult result, string dayDesc);
    public TimeResult GetShortLeft(string text);
    private static string NormalizeDayDesc(string dayDesc);
}
public static class Microsoft.Recognizers.Text.DateTime.Utilities.TimePeriodFunctions : object {
    public static DateTimeResolutionResult Handle(IDateTimeParser timeParser, DateTimeExtra`1<PeriodType> extra, DateTime refTime, TimeFunctions timeFunc);
    public static string BuildTimex(TimeResult timeResult);
    public static string BuildSpan(TimeResult left, TimeResult right);
    public static List`1<ExtractResult> ApplyPotentialPeriodAmbiguityHotfix(string text, List`1<ExtractResult> timePeriodErs);
}
public class Microsoft.Recognizers.Text.DateTime.Utilities.TimeResult : object {
    [CompilerGeneratedAttribute]
private int <Hour>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minute>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LowBound>k__BackingField;
    public int Hour { get; public set; }
    public int Minute { get; public set; }
    public int Second { get; public set; }
    public int LowBound { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Hour();
    [CompilerGeneratedAttribute]
public void set_Hour(int value);
    [CompilerGeneratedAttribute]
public int get_Minute();
    [CompilerGeneratedAttribute]
public void set_Minute(int value);
    [CompilerGeneratedAttribute]
public int get_Second();
    [CompilerGeneratedAttribute]
public void set_Second(int value);
    [CompilerGeneratedAttribute]
public int get_LowBound();
    [CompilerGeneratedAttribute]
public void set_LowBound(int value);
}
