public abstract class Microsoft.Recognizers.Text.Number.AbstractNumberModel : object {
    private static List`1<string> ExtractorsSupportingSubtype;
    private string culture;
    private string requestedCulture;
    [CompilerGeneratedAttribute]
private IExtractor <Extractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <Parser>k__BackingField;
    public string ModelTypeName { get; }
    public string Culture { get; }
    public string RequestedCulture { get; }
    protected IExtractor Extractor { get; private set; }
    protected IParser Parser { get; private set; }
    protected AbstractNumberModel(IParser parser, IExtractor extractor);
    private static AbstractNumberModel();
    public abstract virtual string get_ModelTypeName();
    public sealed virtual string get_Culture();
    public sealed virtual string get_RequestedCulture();
    [CompilerGeneratedAttribute]
protected IExtractor get_Extractor();
    [CompilerGeneratedAttribute]
private void set_Extractor(IExtractor value);
    [CompilerGeneratedAttribute]
protected IParser get_Parser();
    [CompilerGeneratedAttribute]
private void set_Parser(IParser value);
    public sealed virtual List`1<ModelResult> Parse(string query);
    public sealed virtual void SetCultureInfo(string culture, string requestedCulture);
    private ModelResult BuildModelResult(ParseResult pn);
    [CompilerGeneratedAttribute]
private bool <BuildModelResult>b__20_0(string e);
}
public static class Microsoft.Recognizers.Text.Number.AgnosticNumberParserFactory : object {
    public static BaseNumberParser GetParser(AgnosticNumberParserType type, INumberParserConfiguration languageConfiguration);
}
public enum Microsoft.Recognizers.Text.Number.AgnosticNumberParserType : Enum {
    public int value__;
    public static AgnosticNumberParserType Cardinal;
    public static AgnosticNumberParserType Double;
    public static AgnosticNumberParserType Fraction;
    public static AgnosticNumberParserType Integer;
    public static AgnosticNumberParserType Number;
    public static AgnosticNumberParserType Ordinal;
    public static AgnosticNumberParserType Percentage;
}
public class Microsoft.Recognizers.Text.Number.Arabic.ArabicNumberParserConfiguration : BaseNumberParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <NonDecimalSeparatorText>k__BackingField;
    public string NonDecimalSeparatorText { get; private set; }
    public ArabicNumberParserConfiguration(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public string get_NonDecimalSeparatorText();
    [CompilerGeneratedAttribute]
private void set_NonDecimalSeparatorText(string value);
    public virtual ValueTuple`2<bool, double> GetLangSpecificIntValue(List`1<string> matchStrs);
}
public class Microsoft.Recognizers.Text.Number.Arabic.ArabicNumberRangeParserConfiguration : BaseNumberRangeParserConfiguration {
    private static RegexOptions RegexFlags;
    public ArabicNumberRangeParserConfiguration(INumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Arabic.CardinalExtractor : BaseNumberExtractor {
    private static ConcurrentDictionary`2<string, CardinalExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private CardinalExtractor(BaseNumberOptionsConfiguration config);
    private static CardinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static CardinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Arabic.DoubleExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, DoubleExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private DoubleExtractor(BaseNumberOptionsConfiguration config);
    private static DoubleExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static DoubleExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Arabic.FractionExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, FractionExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private FractionExtractor(BaseNumberOptionsConfiguration config);
    private static FractionExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static FractionExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Arabic.IntegerExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, IntegerExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private IntegerExtractor(BaseNumberOptionsConfiguration config);
    private static IntegerExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static IntegerExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Arabic.NumberExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, NumberExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NegativeNumberTermsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeReferenceRegex>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected ImmutableDictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    protected string ExtractType { get; }
    protected Regex NegativeNumberTermsRegex { get; }
    protected Regex AmbiguousFractionConnectorsRegex { get; }
    protected Regex RelativeReferenceRegex { get; }
    private NumberExtractor(BaseNumberOptionsConfiguration config);
    private static NumberExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual ImmutableDictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_NegativeNumberTermsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_RelativeReferenceRegex();
    public static NumberExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Arabic.NumberRangeExtractor : BaseNumberRangeExtractor {
    private static RegexOptions RegexFlags;
    private BaseNumberExtractor numberExtractor;
    private BaseNumberExtractor ordinalExtractor;
    private BaseNumberParser numberParser;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, string> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, string> Regexes { get; }
    internal Regex AmbiguousFractionConnectorsRegex { get; }
    protected string ExtractType { get; }
    public NumberRangeExtractor(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, string> get_Regexes();
    [CompilerGeneratedAttribute]
internal sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Arabic.OrdinalExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, OrdinalExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeReferenceRegex>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    protected Regex AmbiguousFractionConnectorsRegex { get; }
    protected Regex RelativeReferenceRegex { get; }
    private OrdinalExtractor(BaseNumberOptionsConfiguration config);
    private static OrdinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_RelativeReferenceRegex();
    public static OrdinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Arabic.PercentageExtractor : BasePercentageExtractor {
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    protected NumberOptions Options { get; }
    public PercentageExtractor(BaseNumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
protected virtual NumberOptions get_Options();
    protected virtual ImmutableHashSet`1<Regex> InitRegexes();
}
public class Microsoft.Recognizers.Text.Number.BaseCJKNumberParser : BaseNumberParser {
    [CompilerGeneratedAttribute]
private ICJKNumberParserConfiguration <Config>k__BackingField;
    protected ICJKNumberParserConfiguration Config { get; private set; }
    public BaseCJKNumberParser(INumberParserConfiguration config);
    [CompilerGeneratedAttribute]
protected ICJKNumberParserConfiguration get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(ICJKNumberParserConfiguration value);
    public virtual ParseResult Parse(ExtractResult extResult);
    protected ParseResult ParseFraction(ExtractResult extResult);
    protected ParseResult ParsePercentage(ExtractResult extResult);
    protected ParseResult ParseOrdinal(ExtractResult extResult);
    protected ParseResult ParseDouble(ExtractResult extResult);
    protected ParseResult ParseInteger(ExtractResult extResult);
    private string ReplaceTraWithSim(string text);
    private double GetDigitValue(string intStr, double power);
    private string NormalizeCharWidth(string text);
    private string ReplaceUnit(string resultText);
    private double GetIntValue(string intStr);
    private double GetPointValue(string pointStr);
    [CompilerGeneratedAttribute]
private bool <GetIntValue>b__15_0(char c);
    [CompilerGeneratedAttribute]
private bool <GetIntValue>b__15_1(char c);
}
public class Microsoft.Recognizers.Text.Number.BaseIndianNumberParser : BaseNumberParser {
    private bool isCompoundNumberLanguage;
    [CompilerGeneratedAttribute]
private IIndianNumberParserConfiguration <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TextNumberRegex>k__BackingField;
    protected IIndianNumberParserConfiguration Config { get; private set; }
    protected Regex TextNumberRegex { get; }
    public BaseIndianNumberParser(INumberParserConfiguration config);
    [CompilerGeneratedAttribute]
protected IIndianNumberParserConfiguration get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(IIndianNumberParserConfiguration value);
    [CompilerGeneratedAttribute]
protected Regex get_TextNumberRegex();
    public virtual ParseResult FracLikeNumberParse(ExtractResult extResult);
    public virtual ParseResult TextNumberParse(ExtractResult extResult);
    public virtual double GetDigitalValue(string digitsStr, double power);
    public virtual double GetIntValue(List`1<string> matchStrs);
    private Regex BuildTextNumberRegex();
}
public class Microsoft.Recognizers.Text.Number.BaseIndianNumberParserConfiguration : BaseNumberParserConfiguration {
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<char, long> <ZeroToNineMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, double> <DecimalUnitsMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FractionPrepositionInverseRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AdditionTermsRegex>k__BackingField;
    public ImmutableDictionary`2<char, long> ZeroToNineMap { get; public set; }
    public ImmutableDictionary`2<string, double> DecimalUnitsMap { get; public set; }
    public Regex FractionPrepositionInverseRegex { get; public set; }
    public Regex AdditionTermsRegex { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<char, long> get_ZeroToNineMap();
    [CompilerGeneratedAttribute]
public void set_ZeroToNineMap(ImmutableDictionary`2<char, long> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<string, double> get_DecimalUnitsMap();
    [CompilerGeneratedAttribute]
public void set_DecimalUnitsMap(ImmutableDictionary`2<string, double> value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FractionPrepositionInverseRegex();
    [CompilerGeneratedAttribute]
public void set_FractionPrepositionInverseRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AdditionTermsRegex();
    [CompilerGeneratedAttribute]
public void set_AdditionTermsRegex(Regex value);
    public virtual double ResolveUnitCompositeNumber(string numberStr);
}
internal abstract class Microsoft.Recognizers.Text.Number.BaseMergedNumberExtractor : object {
    public BaseNumberExtractor NumberExtractor { get; public set; }
    public Regex RoundNumberIntegerRegexWithLocks { get; public set; }
    public Regex ConnectorRegex { get; public set; }
    protected static TimeSpan RegexTimeOut { get; }
    public abstract virtual BaseNumberExtractor get_NumberExtractor();
    public abstract virtual void set_NumberExtractor(BaseNumberExtractor value);
    public abstract virtual Regex get_RoundNumberIntegerRegexWithLocks();
    public abstract virtual void set_RoundNumberIntegerRegexWithLocks(Regex value);
    public abstract virtual Regex get_ConnectorRegex();
    public abstract virtual void set_ConnectorRegex(Regex value);
    protected static TimeSpan get_RegexTimeOut();
    public sealed virtual List`1<ExtractResult> Extract(string source);
}
public abstract class Microsoft.Recognizers.Text.Number.BaseNumberExtractor : object {
    public static Regex CurrencyRegex;
    protected static ResultsCache`1<ExtractResult> ResultsCache;
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private BaseNumberParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NegativeNumberTermsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeReferenceRegex>k__BackingField;
    public NumberOptions Options { get; }
    public BaseNumberParser NumberParser { get; }
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected static TimeSpan RegexTimeOut { get; }
    protected ImmutableDictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    protected string ExtractType { get; }
    protected Regex NegativeNumberTermsRegex { get; }
    protected Regex AmbiguousFractionConnectorsRegex { get; }
    protected Regex RelativeReferenceRegex { get; }
    protected BaseNumberExtractor(NumberOptions options);
    private static BaseNumberExtractor();
    [CompilerGeneratedAttribute]
public virtual NumberOptions get_Options();
    [CompilerGeneratedAttribute]
public virtual BaseNumberParser get_NumberParser();
    internal abstract virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    protected static TimeSpan get_RegexTimeOut();
    [CompilerGeneratedAttribute]
protected virtual ImmutableDictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    [CompilerGeneratedAttribute]
protected virtual string get_ExtractType();
    [CompilerGeneratedAttribute]
protected virtual Regex get_NegativeNumberTermsRegex();
    [CompilerGeneratedAttribute]
protected virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected virtual Regex get_RelativeReferenceRegex();
    public virtual List`1<ExtractResult> Extract(string source);
    protected static Regex GenerateLongFormatNumberRegexes(LongFormatType type, string placeholder, RegexOptions flags);
    private List`1<ExtractResult> FilterAmbiguity(List`1<ExtractResult> extractResults, string text);
    private int ParseNumber(Group numerator);
}
public class Microsoft.Recognizers.Text.Number.BaseNumberOptionsConfiguration : object {
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private NumberMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    public NumberOptions Options { get; }
    public NumberMode Mode { get; }
    public string Placeholder { get; }
    public string Culture { get; }
    public BaseNumberOptionsConfiguration(string culture, NumberOptions options, NumberMode mode, string placeholder);
    public BaseNumberOptionsConfiguration(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public sealed virtual NumberOptions get_Options();
    [CompilerGeneratedAttribute]
public sealed virtual NumberMode get_Mode();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Placeholder();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Culture();
}
public class Microsoft.Recognizers.Text.Number.BaseNumberParser : object {
    private static Regex LongFormRegex;
    private bool isMultiDecimalSeparatorCulture;
    private bool isNonStandardSeparatorVariant;
    private bool isCompoundNumberLanguage;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <SupportedTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private INumberParserConfiguration <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <TextNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <RoundNumberSet>k__BackingField;
    internal IEnumerable`1<string> SupportedTypes { get; internal set; }
    protected static Regex LongFormatRegex { get; }
    protected static TimeSpan RegexTimeOut { get; }
    protected INumberParserConfiguration Config { get; private set; }
    protected Regex TextNumberRegex { get; }
    protected HashSet`1<string> RoundNumberSet { get; }
    public BaseNumberParser(INumberParserConfiguration config);
    private static BaseNumberParser();
    [CompilerGeneratedAttribute]
internal IEnumerable`1<string> get_SupportedTypes();
    [CompilerGeneratedAttribute]
internal void set_SupportedTypes(IEnumerable`1<string> value);
    protected static Regex get_LongFormatRegex();
    protected static TimeSpan get_RegexTimeOut();
    [CompilerGeneratedAttribute]
protected INumberParserConfiguration get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(INumberParserConfiguration value);
    [CompilerGeneratedAttribute]
protected Regex get_TextNumberRegex();
    [CompilerGeneratedAttribute]
protected HashSet`1<string> get_RoundNumberSet();
    public virtual ParseResult Parse(ExtractResult extResult);
    public virtual ParseResult PowerNumberParse(ExtractResult extResult);
    public virtual ParseResult TextNumberParse(ExtractResult extResult);
    public virtual ParseResult FracLikeNumberParse(ExtractResult extResult);
    public virtual ParseResult DigitNumberParse(ExtractResult extResult);
    public virtual double GetDigitalValue(string digitsStr, double power);
    public virtual double GetIntValue(List`1<string> matchStrs);
    protected static string GetKeyRegex(IEnumerable`1<string> keyCollection);
    protected static string DetermineType(ExtractResult er, ParseResult pr);
    protected static bool IsMergeable(double former, double later);
    protected static bool IsComposable(long big, long small);
    protected string GetResolutionStr(object value);
    protected bool SkipNonDecimalSeparator(char ch, int distanceEnd, int distanceStart, bool hasSingleSeparator, char prevCh, char nonDecimalSeparator);
    protected double GetPointValue(List`1<string> matchStrs);
    private Regex BuildTextNumberRegex();
}
public class Microsoft.Recognizers.Text.Number.BaseNumberParserConfiguration : object {
    protected static ValueTuple`2<bool, double> NotApplicable;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, long> <CardinalNumberMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, long> <OrdinalNumberMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, long> <RoundNumberMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, string> <RelativeReferenceMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, string> <RelativeReferenceOffsetMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, string> <RelativeReferenceRelativeToMap>k__BackingField;
    [CompilerGeneratedAttribute]
private INumberOptionsConfiguration <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <CultureInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DigitalNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FractionPrepositionRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RoundMultiplierRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FractionMarkerToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <HalfADozenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HalfADozenText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LanguageMarker>k__BackingField;
    [CompilerGeneratedAttribute]
private char <NonDecimalSeparatorChar>k__BackingField;
    [CompilerGeneratedAttribute]
private char <DecimalSeparatorChar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMultiDecimalSeparatorCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WordSeparatorToken>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <WrittenDecimalSeparatorTexts>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <WrittenGroupSeparatorTexts>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <WrittenIntegerSeparatorTexts>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <WrittenFractionSeparatorTexts>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NegativeNumberSignRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompoundNumberLanguage>k__BackingField;
    public ImmutableDictionary`2<string, long> CardinalNumberMap { get; public set; }
    public ImmutableDictionary`2<string, long> OrdinalNumberMap { get; public set; }
    public ImmutableDictionary`2<string, long> RoundNumberMap { get; public set; }
    public ImmutableDictionary`2<string, string> RelativeReferenceMap { get; public set; }
    public ImmutableDictionary`2<string, string> RelativeReferenceOffsetMap { get; public set; }
    public ImmutableDictionary`2<string, string> RelativeReferenceRelativeToMap { get; public set; }
    public INumberOptionsConfiguration Config { get; public set; }
    public CultureInfo CultureInfo { get; public set; }
    public Regex DigitalNumberRegex { get; public set; }
    public Regex FractionPrepositionRegex { get; public set; }
    public Regex RoundMultiplierRegex { get; public set; }
    public string FractionMarkerToken { get; public set; }
    public Regex HalfADozenRegex { get; public set; }
    public string HalfADozenText { get; public set; }
    public string LanguageMarker { get; public set; }
    public char NonDecimalSeparatorChar { get; public set; }
    public char DecimalSeparatorChar { get; public set; }
    public bool IsMultiDecimalSeparatorCulture { get; public set; }
    public IEnumerable`1<string> NonStandardSeparatorVariants { get; }
    public string WordSeparatorToken { get; public set; }
    public IEnumerable`1<string> WrittenDecimalSeparatorTexts { get; public set; }
    public IEnumerable`1<string> WrittenGroupSeparatorTexts { get; public set; }
    public IEnumerable`1<string> WrittenIntegerSeparatorTexts { get; public set; }
    public IEnumerable`1<string> WrittenFractionSeparatorTexts { get; public set; }
    public Regex NegativeNumberSignRegex { get; public set; }
    public bool IsCompoundNumberLanguage { get; public set; }
    protected static TimeSpan RegexTimeOut { get; }
    private static BaseNumberParserConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<string, long> get_CardinalNumberMap();
    [CompilerGeneratedAttribute]
public void set_CardinalNumberMap(ImmutableDictionary`2<string, long> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<string, long> get_OrdinalNumberMap();
    [CompilerGeneratedAttribute]
public void set_OrdinalNumberMap(ImmutableDictionary`2<string, long> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<string, long> get_RoundNumberMap();
    [CompilerGeneratedAttribute]
public void set_RoundNumberMap(ImmutableDictionary`2<string, long> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<string, string> get_RelativeReferenceMap();
    [CompilerGeneratedAttribute]
public void set_RelativeReferenceMap(ImmutableDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<string, string> get_RelativeReferenceOffsetMap();
    [CompilerGeneratedAttribute]
public void set_RelativeReferenceOffsetMap(ImmutableDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<string, string> get_RelativeReferenceRelativeToMap();
    [CompilerGeneratedAttribute]
public void set_RelativeReferenceRelativeToMap(ImmutableDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual INumberOptionsConfiguration get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(INumberOptionsConfiguration value);
    [CompilerGeneratedAttribute]
public sealed virtual CultureInfo get_CultureInfo();
    [CompilerGeneratedAttribute]
public void set_CultureInfo(CultureInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DigitalNumberRegex();
    [CompilerGeneratedAttribute]
public void set_DigitalNumberRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FractionPrepositionRegex();
    [CompilerGeneratedAttribute]
public void set_FractionPrepositionRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RoundMultiplierRegex();
    [CompilerGeneratedAttribute]
public void set_RoundMultiplierRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FractionMarkerToken();
    [CompilerGeneratedAttribute]
public void set_FractionMarkerToken(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_HalfADozenRegex();
    [CompilerGeneratedAttribute]
public void set_HalfADozenRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_HalfADozenText();
    [CompilerGeneratedAttribute]
public void set_HalfADozenText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LanguageMarker();
    [CompilerGeneratedAttribute]
public void set_LanguageMarker(string value);
    [CompilerGeneratedAttribute]
public sealed virtual char get_NonDecimalSeparatorChar();
    [CompilerGeneratedAttribute]
public void set_NonDecimalSeparatorChar(char value);
    [CompilerGeneratedAttribute]
public sealed virtual char get_DecimalSeparatorChar();
    [CompilerGeneratedAttribute]
public void set_DecimalSeparatorChar(char value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsMultiDecimalSeparatorCulture();
    [CompilerGeneratedAttribute]
public void set_IsMultiDecimalSeparatorCulture(bool value);
    public virtual IEnumerable`1<string> get_NonStandardSeparatorVariants();
    [CompilerGeneratedAttribute]
public sealed virtual string get_WordSeparatorToken();
    [CompilerGeneratedAttribute]
public void set_WordSeparatorToken(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_WrittenDecimalSeparatorTexts();
    [CompilerGeneratedAttribute]
public void set_WrittenDecimalSeparatorTexts(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_WrittenGroupSeparatorTexts();
    [CompilerGeneratedAttribute]
public void set_WrittenGroupSeparatorTexts(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_WrittenIntegerSeparatorTexts();
    [CompilerGeneratedAttribute]
public void set_WrittenIntegerSeparatorTexts(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_WrittenFractionSeparatorTexts();
    [CompilerGeneratedAttribute]
public void set_WrittenFractionSeparatorTexts(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_NegativeNumberSignRegex();
    [CompilerGeneratedAttribute]
public void set_NegativeNumberSignRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCompoundNumberLanguage();
    [CompilerGeneratedAttribute]
public void set_IsCompoundNumberLanguage(bool value);
    protected static TimeSpan get_RegexTimeOut();
    public virtual long ResolveCompositeNumber(string numberStr);
    public virtual ValueTuple`2<bool, double> GetLangSpecificIntValue(List`1<string> matchStrs);
    public virtual IEnumerable`1<string> NormalizeTokenSet(IEnumerable`1<string> tokens, ParseResult context);
    public virtual string ResolveSpecificString(string numberStr);
}
public abstract class Microsoft.Recognizers.Text.Number.BaseNumberRangeExtractor : object {
    private BaseNumberExtractor numberExtractor;
    private BaseNumberExtractor ordinalExtractor;
    private BaseNumberParser numberParser;
    [CompilerGeneratedAttribute]
private INumberOptionsConfiguration <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, string> Regexes { get; }
    internal Regex AmbiguousFractionConnectorsRegex { get; }
    protected static TimeSpan RegexTimeOut { get; }
    protected INumberOptionsConfiguration Config { get; }
    protected string ExtractType { get; }
    protected BaseNumberRangeExtractor(BaseNumberExtractor numberExtractor, BaseNumberExtractor ordinalExtractor, BaseNumberParser numberParser, INumberOptionsConfiguration config);
    internal abstract virtual ImmutableDictionary`2<Regex, string> get_Regexes();
    internal abstract virtual Regex get_AmbiguousFractionConnectorsRegex();
    protected static TimeSpan get_RegexTimeOut();
    [CompilerGeneratedAttribute]
protected virtual INumberOptionsConfiguration get_Config();
    [CompilerGeneratedAttribute]
protected virtual string get_ExtractType();
    public virtual List`1<ExtractResult> Extract(string source);
    private static bool ValidateMatchAndGetStartAndLength(List`1<ExtractResult> extractNumList, string numberStr, Match match, string source, Int32& start, Int32& length);
    private static bool IsAmbiguousRangeOrFraction(Match match, string type, string numberStr);
    private void GetMatchedStartAndLength(Match match, string type, string source, Int32& start, Int32& length);
    private List`1<ExtractResult> ExtractNumberAndOrdinalFromStr(string numberStr, bool isAmbiguousRangeOrFraction);
    private bool ShouldRemoveFractionWithInConnector(string numberStr);
    private bool IsFractionWithInConnector(string numberStr);
    private List`1<ExtractResult> RemoveAmbiguousFractions(List`1<ExtractResult> ers);
}
public class Microsoft.Recognizers.Text.Number.BaseNumberRangeParser : object {
    [CompilerGeneratedAttribute]
private INumberRangeParserConfiguration <Config>k__BackingField;
    protected INumberRangeParserConfiguration Config { get; private set; }
    public BaseNumberRangeParser(INumberRangeParserConfiguration config);
    [CompilerGeneratedAttribute]
protected INumberRangeParserConfiguration get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(INumberRangeParserConfiguration value);
    public virtual ParseResult Parse(ExtractResult extResult);
    private ParseResult ParseNumberRangeWhichHasTwoNum(ExtractResult extResult);
    private ParseResult ParseNumberRangeWhichHasOneNum(ExtractResult extResult);
    [CompilerGeneratedAttribute]
private double <ParseNumberRangeWhichHasTwoNum>b__6_0(ExtractResult r);
    [CompilerGeneratedAttribute]
private double <ParseNumberRangeWhichHasOneNum>b__7_0(ExtractResult r);
}
public abstract class Microsoft.Recognizers.Text.Number.BaseNumberRangeParserConfiguration : object {
    [CompilerGeneratedAttribute]
private CultureInfo <CultureInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <NumberExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtractor <OrdinalExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private IParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MoreOrEqual>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LessOrEqual>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MoreOrEqualSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LessOrEqualSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <MoreOrEqualSeparate>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <LessOrEqualSeparate>k__BackingField;
    public static TimeSpan RegexTimeOut { get; }
    public CultureInfo CultureInfo { get; public set; }
    public IExtractor NumberExtractor { get; public set; }
    public IExtractor OrdinalExtractor { get; public set; }
    public IParser NumberParser { get; public set; }
    public Regex MoreOrEqual { get; public set; }
    public Regex LessOrEqual { get; public set; }
    public Regex MoreOrEqualSuffix { get; public set; }
    public Regex LessOrEqualSuffix { get; public set; }
    public Regex MoreOrEqualSeparate { get; public set; }
    public Regex LessOrEqualSeparate { get; public set; }
    public static TimeSpan get_RegexTimeOut();
    [CompilerGeneratedAttribute]
public sealed virtual CultureInfo get_CultureInfo();
    [CompilerGeneratedAttribute]
public void set_CultureInfo(CultureInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_NumberExtractor();
    [CompilerGeneratedAttribute]
public void set_NumberExtractor(IExtractor value);
    [CompilerGeneratedAttribute]
public sealed virtual IExtractor get_OrdinalExtractor();
    [CompilerGeneratedAttribute]
public void set_OrdinalExtractor(IExtractor value);
    [CompilerGeneratedAttribute]
public sealed virtual IParser get_NumberParser();
    [CompilerGeneratedAttribute]
public void set_NumberParser(IParser value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MoreOrEqual();
    [CompilerGeneratedAttribute]
public void set_MoreOrEqual(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LessOrEqual();
    [CompilerGeneratedAttribute]
public void set_LessOrEqual(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MoreOrEqualSuffix();
    [CompilerGeneratedAttribute]
public void set_MoreOrEqualSuffix(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LessOrEqualSuffix();
    [CompilerGeneratedAttribute]
public void set_LessOrEqualSuffix(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_MoreOrEqualSeparate();
    [CompilerGeneratedAttribute]
public void set_MoreOrEqualSeparate(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_LessOrEqualSeparate();
    [CompilerGeneratedAttribute]
public void set_LessOrEqualSeparate(Regex value);
}
public abstract class Microsoft.Recognizers.Text.Number.BasePercentageExtractor : object {
    protected static string NumExtType;
    protected static string FracNumExtType;
    protected static string NumberPlaceHolder;
    protected static string FractionPlaceHolder;
    private BaseNumberExtractor numberExtractor;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableHashSet`1<Regex> <Regexes>k__BackingField;
    protected static TimeSpan RegexTimeOut { get; }
    protected string ExtractType { get; protected set; }
    protected NumberOptions Options { get; }
    protected ImmutableHashSet`1<Regex> Regexes { get; protected set; }
    protected BasePercentageExtractor(BaseNumberExtractor numberExtractor);
    private static BasePercentageExtractor();
    protected static TimeSpan get_RegexTimeOut();
    [CompilerGeneratedAttribute]
protected string get_ExtractType();
    [CompilerGeneratedAttribute]
protected void set_ExtractType(string value);
    [CompilerGeneratedAttribute]
protected virtual NumberOptions get_Options();
    [CompilerGeneratedAttribute]
protected ImmutableHashSet`1<Regex> get_Regexes();
    [CompilerGeneratedAttribute]
protected void set_Regexes(ImmutableHashSet`1<Regex> value);
    public sealed virtual List`1<ExtractResult> Extract(string source);
    protected static ImmutableHashSet`1<Regex> BuildRegexes(HashSet`1<string> regexStrings, bool ignoreCase);
    protected abstract virtual ImmutableHashSet`1<Regex> InitRegexes();
    private void PostProcessing(List`1<ExtractResult> results, string originSource, Dictionary`2<int, int> positionMap, IList`1<ExtractResult> numExtResults);
    private string PreprocessStrWithNumberExtracted(string str, Dictionary`2& positionMap, IList`1& numExtResults);
}
public class Microsoft.Recognizers.Text.Number.BasePercentageParser : BaseNumberParser {
    public BasePercentageParser(INumberParserConfiguration config);
    public virtual ParseResult Parse(ExtractResult extResult);
}
public abstract class Microsoft.Recognizers.Text.Number.CachedNumberExtractor : BaseNumberExtractor {
    protected CachedNumberExtractor(NumberOptions options);
    public virtual List`1<ExtractResult> Extract(string source);
    protected abstract virtual object GenKey(string input);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private List`1<ExtractResult> <>n__0(string source);
}
public class Microsoft.Recognizers.Text.Number.Chinese.CardinalExtractor : BaseNumberExtractor {
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    public CardinalExtractor(BaseNumberOptionsConfiguration config, CJKNumberExtractorMode mode);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Chinese.ChineseNumberParserConfiguration : BaseNumberParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <NonDecimalSeparatorText>k__BackingField;
    [CompilerGeneratedAttribute]
private char <ZeroChar>k__BackingField;
    [CompilerGeneratedAttribute]
private char <PairChar>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DigitNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DozenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PercentageRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PercentageNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DoubleAndRoundRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FracSplitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PointRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpeGetNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PairRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RoundNumberIntegerRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<char, double> <ZeroToNineMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<char, long> <RoundNumberMapChar>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<char, char> <FullToHalfMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableSortedDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<char, char> <TratoSimMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<char> <RoundDirectList>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<char> <TenChars>k__BackingField;
    public string NonDecimalSeparatorText { get; private set; }
    public char ZeroChar { get; private set; }
    public char PairChar { get; private set; }
    public Regex DigitNumRegex { get; private set; }
    public Regex DozenRegex { get; private set; }
    public Regex PercentageRegex { get; private set; }
    public Regex PercentageNumRegex { get; private set; }
    public Regex DoubleAndRoundRegex { get; private set; }
    public Regex FracSplitRegex { get; private set; }
    public Regex PointRegex { get; private set; }
    public Regex SpeGetNumberRegex { get; private set; }
    public Regex PairRegex { get; private set; }
    public Regex RoundNumberIntegerRegex { get; private set; }
    public ImmutableDictionary`2<char, double> ZeroToNineMap { get; private set; }
    public ImmutableDictionary`2<char, long> RoundNumberMapChar { get; private set; }
    public ImmutableDictionary`2<char, char> FullToHalfMap { get; private set; }
    public ImmutableSortedDictionary`2<string, string> UnitMap { get; private set; }
    public ImmutableDictionary`2<char, char> TratoSimMap { get; private set; }
    public ImmutableList`1<char> RoundDirectList { get; private set; }
    public ImmutableList`1<char> TenChars { get; private set; }
    public ChineseNumberParserConfiguration(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public string get_NonDecimalSeparatorText();
    [CompilerGeneratedAttribute]
private void set_NonDecimalSeparatorText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual char get_ZeroChar();
    [CompilerGeneratedAttribute]
private void set_ZeroChar(char value);
    [CompilerGeneratedAttribute]
public sealed virtual char get_PairChar();
    [CompilerGeneratedAttribute]
private void set_PairChar(char value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DigitNumRegex();
    [CompilerGeneratedAttribute]
private void set_DigitNumRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DozenRegex();
    [CompilerGeneratedAttribute]
private void set_DozenRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PercentageRegex();
    [CompilerGeneratedAttribute]
private void set_PercentageRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PercentageNumRegex();
    [CompilerGeneratedAttribute]
private void set_PercentageNumRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DoubleAndRoundRegex();
    [CompilerGeneratedAttribute]
private void set_DoubleAndRoundRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FracSplitRegex();
    [CompilerGeneratedAttribute]
private void set_FracSplitRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PointRegex();
    [CompilerGeneratedAttribute]
private void set_PointRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpeGetNumberRegex();
    [CompilerGeneratedAttribute]
private void set_SpeGetNumberRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PairRegex();
    [CompilerGeneratedAttribute]
private void set_PairRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RoundNumberIntegerRegex();
    [CompilerGeneratedAttribute]
private void set_RoundNumberIntegerRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<char, double> get_ZeroToNineMap();
    [CompilerGeneratedAttribute]
private void set_ZeroToNineMap(ImmutableDictionary`2<char, double> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<char, long> get_RoundNumberMapChar();
    [CompilerGeneratedAttribute]
private void set_RoundNumberMapChar(ImmutableDictionary`2<char, long> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<char, char> get_FullToHalfMap();
    [CompilerGeneratedAttribute]
private void set_FullToHalfMap(ImmutableDictionary`2<char, char> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableSortedDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
private void set_UnitMap(ImmutableSortedDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<char, char> get_TratoSimMap();
    [CompilerGeneratedAttribute]
private void set_TratoSimMap(ImmutableDictionary`2<char, char> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableList`1<char> get_RoundDirectList();
    [CompilerGeneratedAttribute]
private void set_RoundDirectList(ImmutableList`1<char> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableList`1<char> get_TenChars();
    [CompilerGeneratedAttribute]
private void set_TenChars(ImmutableList`1<char> value);
    public virtual IEnumerable`1<string> NormalizeTokenSet(IEnumerable`1<string> tokens, ParseResult context);
    public virtual long ResolveCompositeNumber(string numberStr);
    public virtual string ResolveSpecificString(string numberStr);
}
public class Microsoft.Recognizers.Text.Number.Chinese.ChineseNumberRangeParserConfiguration : BaseNumberRangeParserConfiguration {
    private static RegexOptions RegexFlags;
    public ChineseNumberRangeParserConfiguration(INumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Chinese.DoubleExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    public DoubleExtractor(BaseNumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Chinese.FractionExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    public FractionExtractor(BaseNumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Chinese.IntegerExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    public IntegerExtractor(BaseNumberOptionsConfiguration config, CJKNumberExtractorMode mode);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Chinese.NumberExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    protected ImmutableDictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    public NumberExtractor(BaseNumberOptionsConfiguration config, CJKNumberExtractorMode mode);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    [CompilerGeneratedAttribute]
protected sealed virtual ImmutableDictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
}
public class Microsoft.Recognizers.Text.Number.Chinese.NumberRangeExtractor : BaseNumberRangeExtractor {
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, string> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, string> Regexes { get; }
    internal Regex AmbiguousFractionConnectorsRegex { get; }
    protected string ExtractType { get; }
    public NumberRangeExtractor(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, string> get_Regexes();
    [CompilerGeneratedAttribute]
internal sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Chinese.OrdinalExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    public OrdinalExtractor(BaseNumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Chinese.PercentageExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    public PercentageExtractor(BaseNumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public enum Microsoft.Recognizers.Text.Number.Config.CJKNumberExtractorMode : Enum {
    public int value__;
    public static CJKNumberExtractorMode Default;
    public static CJKNumberExtractorMode ExtractAll;
}
public static class Microsoft.Recognizers.Text.Number.Constants : object {
    public static string SYS_NUM_CARDINAL;
    public static string SYS_NUM_DOUBLE;
    public static string SYS_NUM_FRACTION;
    public static string SYS_NUM_INTEGER;
    public static string SYS_NUM;
    public static string SYS_NUM_ORDINAL;
    public static string SYS_NUM_PERCENTAGE;
    public static string SYS_NUMRANGE;
    public static string MODEL_NUMBER;
    public static string MODEL_NUMBERRANGE;
    public static string MODEL_ORDINAL;
    public static string MODEL_ORDINAL_RELATIVE;
    public static string MODEL_PERCENTAGE;
    public static char NO_BREAK_SPACE;
    public static string ENGLISH;
    public static string CHINESE;
    public static string FRENCH;
    public static string GERMAN;
    public static string JAPANESE;
    public static string PORTUGUESE;
    public static string SPANISH;
    public static string DUTCH;
    public static string KOREAN;
    public static string ITALIAN;
    public static string SWEDISH;
    public static string BULGARIAN;
    public static string TURKISH;
    public static string HINDI;
    public static string ARABIC;
    public static string JAPANESE_SUBS;
    public static string FRACTION_PREFIX;
    public static string DOUBLE_PREFIX;
    public static string INTEGER_PREFIX;
    public static string ORDINAL_PREFIX;
    public static string PERCENT_PREFIX;
    public static string NUMBER_SUFFIX;
    public static string POWER_SUFFIX;
    public static string SPECIAL_SUFFIX;
    public static string RELATIVE_START;
    public static string RELATIVE_END;
    public static string RELATIVE_CURRENT;
    public static string RelativeOrdinalGroupName;
    public static string FracMultiplierGroupName;
    public static string INTEGER;
    public static string DECIMAL;
    public static string FRACTION;
    public static string POWER;
    public static HashSet`1<string> ValidSubTypes;
    private static Constants();
}
public class Microsoft.Recognizers.Text.Number.Dutch.CardinalExtractor : CachedNumberExtractor {
    private static ConcurrentDictionary`2<string, CardinalExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private CardinalExtractor(BaseNumberOptionsConfiguration config);
    private static CardinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static CardinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.Dutch.DoubleExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, DoubleExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private DoubleExtractor(BaseNumberOptionsConfiguration config);
    private static DoubleExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static DoubleExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Dutch.DutchNumberParserConfiguration : BaseNumberParserConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex FractionHalfRegex;
    private static Regex FractionUnitsRegex;
    private static String[] OneHalfTokens;
    [CompilerGeneratedAttribute]
private string <NonDecimalSeparatorText>k__BackingField;
    public string NonDecimalSeparatorText { get; private set; }
    public DutchNumberParserConfiguration(INumberOptionsConfiguration config);
    private static DutchNumberParserConfiguration();
    [CompilerGeneratedAttribute]
public string get_NonDecimalSeparatorText();
    [CompilerGeneratedAttribute]
private void set_NonDecimalSeparatorText(string value);
    public virtual IEnumerable`1<string> NormalizeTokenSet(IEnumerable`1<string> tokens, ParseResult context);
}
public class Microsoft.Recognizers.Text.Number.Dutch.DutchNumberRangeParserConfiguration : BaseNumberRangeParserConfiguration {
    private static RegexOptions RegexFlags;
    public DutchNumberRangeParserConfiguration(INumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Dutch.FractionExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, FractionExtractor> Instances;
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    public NumberOptions Options { get; }
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private FractionExtractor(BaseNumberOptionsConfiguration config);
    private static FractionExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual NumberOptions get_Options();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static FractionExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Dutch.IntegerExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, IntegerExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private IntegerExtractor(BaseNumberOptionsConfiguration config);
    private static IntegerExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static IntegerExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.Dutch.NumberExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, NumberExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NegativeNumberTermsRegex>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected ImmutableDictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    protected string ExtractType { get; }
    protected Regex NegativeNumberTermsRegex { get; }
    private NumberExtractor(BaseNumberOptionsConfiguration config);
    private static NumberExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual ImmutableDictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_NegativeNumberTermsRegex();
    public static NumberExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.Dutch.NumberRangeExtractor : BaseNumberRangeExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, string> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, string> Regexes { get; }
    internal Regex AmbiguousFractionConnectorsRegex { get; }
    protected string ExtractType { get; }
    public NumberRangeExtractor(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, string> get_Regexes();
    [CompilerGeneratedAttribute]
internal sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Dutch.OrdinalExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, OrdinalExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private OrdinalExtractor(BaseNumberOptionsConfiguration config);
    private static OrdinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static OrdinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.Dutch.PercentageExtractor : BasePercentageExtractor {
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    protected NumberOptions Options { get; }
    public PercentageExtractor(BaseNumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
protected virtual NumberOptions get_Options();
    protected virtual ImmutableHashSet`1<Regex> InitRegexes();
}
public class Microsoft.Recognizers.Text.Number.English.CardinalExtractor : CachedNumberExtractor {
    private static ConcurrentDictionary`2<string, CardinalExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private CardinalExtractor(BaseNumberOptionsConfiguration config);
    private static CardinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static CardinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.English.DoubleExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, DoubleExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private DoubleExtractor(BaseNumberOptionsConfiguration config);
    private static DoubleExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static DoubleExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.English.EnglishNumberParserConfiguration : BaseNumberParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <NonDecimalSeparatorText>k__BackingField;
    public string NonDecimalSeparatorText { get; private set; }
    public IEnumerable`1<string> NonStandardSeparatorVariants { get; }
    public EnglishNumberParserConfiguration(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public string get_NonDecimalSeparatorText();
    [CompilerGeneratedAttribute]
private void set_NonDecimalSeparatorText(string value);
    public virtual IEnumerable`1<string> get_NonStandardSeparatorVariants();
}
public class Microsoft.Recognizers.Text.Number.English.EnglishNumberRangeParserConfiguration : BaseNumberRangeParserConfiguration {
    private static RegexOptions RegexFlags;
    public EnglishNumberRangeParserConfiguration(INumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.English.FractionExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, FractionExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private FractionExtractor(BaseNumberOptionsConfiguration config);
    private static FractionExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static FractionExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.English.IntegerExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, IntegerExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private IntegerExtractor(BaseNumberOptionsConfiguration config);
    private static IntegerExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static IntegerExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
internal class Microsoft.Recognizers.Text.Number.English.MergedNumberExtractor : BaseMergedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, MergedNumberExtractor> Instances;
    [CompilerGeneratedAttribute]
private BaseNumberExtractor <NumberExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RoundNumberIntegerRegexWithLocks>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConnectorRegex>k__BackingField;
    public BaseNumberExtractor NumberExtractor { get; public set; }
    public Regex RoundNumberIntegerRegexWithLocks { get; public set; }
    public Regex ConnectorRegex { get; public set; }
    public MergedNumberExtractor(BaseNumberOptionsConfiguration config);
    private static MergedNumberExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual BaseNumberExtractor get_NumberExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NumberExtractor(BaseNumberExtractor value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RoundNumberIntegerRegexWithLocks();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RoundNumberIntegerRegexWithLocks(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectorRegex(Regex value);
    public static MergedNumberExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.English.NumberExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, NumberExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private BaseNumberParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NegativeNumberTermsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeReferenceRegex>k__BackingField;
    public BaseNumberParser NumberParser { get; }
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected ImmutableDictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    protected string ExtractType { get; }
    protected Regex NegativeNumberTermsRegex { get; }
    protected Regex AmbiguousFractionConnectorsRegex { get; }
    protected Regex RelativeReferenceRegex { get; }
    private NumberExtractor(BaseNumberOptionsConfiguration config);
    private static NumberExtractor();
    [CompilerGeneratedAttribute]
public virtual BaseNumberParser get_NumberParser();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual ImmutableDictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_NegativeNumberTermsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_RelativeReferenceRegex();
    public static NumberExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.English.NumberRangeExtractor : BaseNumberRangeExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, string> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, string> Regexes { get; }
    internal Regex AmbiguousFractionConnectorsRegex { get; }
    protected string ExtractType { get; }
    public NumberRangeExtractor(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, string> get_Regexes();
    [CompilerGeneratedAttribute]
internal sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.English.OrdinalExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, OrdinalExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeReferenceRegex>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    protected Regex AmbiguousFractionConnectorsRegex { get; }
    protected Regex RelativeReferenceRegex { get; }
    private OrdinalExtractor(BaseNumberOptionsConfiguration config);
    private static OrdinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_RelativeReferenceRegex();
    public static OrdinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.English.PercentageExtractor : BasePercentageExtractor {
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    protected NumberOptions Options { get; }
    public PercentageExtractor(BaseNumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
protected virtual NumberOptions get_Options();
    protected virtual ImmutableHashSet`1<Regex> InitRegexes();
}
public class Microsoft.Recognizers.Text.Number.French.CardinalExtractor : CachedNumberExtractor {
    private static ConcurrentDictionary`2<string, CardinalExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private CardinalExtractor(BaseNumberOptionsConfiguration config);
    private static CardinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static CardinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.French.DoubleExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, DoubleExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private DoubleExtractor(BaseNumberOptionsConfiguration config);
    private static DoubleExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static DoubleExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.French.FractionExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, FractionExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private FractionExtractor(BaseNumberOptionsConfiguration config);
    private static FractionExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static FractionExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.French.FrenchNumberParserConfiguration : BaseNumberParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <NonDecimalSeparatorText>k__BackingField;
    public string NonDecimalSeparatorText { get; private set; }
    public FrenchNumberParserConfiguration(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public string get_NonDecimalSeparatorText();
    [CompilerGeneratedAttribute]
private void set_NonDecimalSeparatorText(string value);
    public virtual IEnumerable`1<string> NormalizeTokenSet(IEnumerable`1<string> tokens, ParseResult context);
    public virtual long ResolveCompositeNumber(string numberStr);
}
public class Microsoft.Recognizers.Text.Number.French.FrenchNumberRangeParserConfiguration : BaseNumberRangeParserConfiguration {
    private static RegexOptions RegexFlags;
    public FrenchNumberRangeParserConfiguration(INumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.French.IntegerExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, IntegerExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private IntegerExtractor(BaseNumberOptionsConfiguration config);
    private static IntegerExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static IntegerExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.French.NumberExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, NumberExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private BaseNumberParser <NumberParser>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NegativeNumberTermsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeReferenceRegex>k__BackingField;
    public BaseNumberParser NumberParser { get; }
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected ImmutableDictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    protected string ExtractType { get; }
    protected Regex NegativeNumberTermsRegex { get; }
    protected Regex AmbiguousFractionConnectorsRegex { get; }
    protected Regex RelativeReferenceRegex { get; }
    private NumberExtractor(BaseNumberOptionsConfiguration config);
    private static NumberExtractor();
    [CompilerGeneratedAttribute]
public virtual BaseNumberParser get_NumberParser();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual ImmutableDictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_NegativeNumberTermsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_RelativeReferenceRegex();
    public static NumberExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.French.NumberRangeExtractor : BaseNumberRangeExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, string> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, string> Regexes { get; }
    internal Regex AmbiguousFractionConnectorsRegex { get; }
    protected string ExtractType { get; }
    public NumberRangeExtractor(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, string> get_Regexes();
    [CompilerGeneratedAttribute]
internal sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.French.OrdinalExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, OrdinalExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeReferenceRegex>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    protected Regex AmbiguousFractionConnectorsRegex { get; }
    protected Regex RelativeReferenceRegex { get; }
    private OrdinalExtractor(BaseNumberOptionsConfiguration config);
    private static OrdinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_RelativeReferenceRegex();
    public static OrdinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.French.PercentageExtractor : BasePercentageExtractor {
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    protected NumberOptions Options { get; }
    public PercentageExtractor(BaseNumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
protected virtual NumberOptions get_Options();
    protected virtual ImmutableHashSet`1<Regex> InitRegexes();
}
public class Microsoft.Recognizers.Text.Number.German.CardinalExtractor : CachedNumberExtractor {
    private static ConcurrentDictionary`2<string, CardinalExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private CardinalExtractor(BaseNumberOptionsConfiguration config);
    private static CardinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static CardinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.German.DoubleExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, DoubleExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private DoubleExtractor(BaseNumberOptionsConfiguration config);
    private static DoubleExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static DoubleExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.German.FractionExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, FractionExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private FractionExtractor(BaseNumberOptionsConfiguration config);
    private static FractionExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static FractionExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.German.GermanNumberParserConfiguration : BaseNumberParserConfiguration {
    private static RegexOptions RegexFlags;
    private static Regex FractionHalfRegex;
    private static Regex FractionUnitsRegex;
    private static String[] OneHalfTokens;
    [CompilerGeneratedAttribute]
private string <NonDecimalSeparatorText>k__BackingField;
    public string NonDecimalSeparatorText { get; private set; }
    public GermanNumberParserConfiguration(INumberOptionsConfiguration config);
    private static GermanNumberParserConfiguration();
    [CompilerGeneratedAttribute]
public string get_NonDecimalSeparatorText();
    [CompilerGeneratedAttribute]
private void set_NonDecimalSeparatorText(string value);
    public virtual IEnumerable`1<string> NormalizeTokenSet(IEnumerable`1<string> tokens, ParseResult context);
}
public class Microsoft.Recognizers.Text.Number.German.GermanNumberRangeParserConfiguration : BaseNumberRangeParserConfiguration {
    private static RegexOptions RegexFlags;
    public GermanNumberRangeParserConfiguration(INumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.German.IntegerExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, IntegerExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private IntegerExtractor(BaseNumberOptionsConfiguration config);
    private static IntegerExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static IntegerExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.German.NumberExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, NumberExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected ImmutableDictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    protected string ExtractType { get; }
    private NumberExtractor(BaseNumberOptionsConfiguration config);
    private static NumberExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual ImmutableDictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static NumberExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.German.NumberRangeExtractor : BaseNumberRangeExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, string> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, string> Regexes { get; }
    internal Regex AmbiguousFractionConnectorsRegex { get; }
    protected string ExtractType { get; }
    public NumberRangeExtractor(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, string> get_Regexes();
    [CompilerGeneratedAttribute]
internal sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.German.OrdinalExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, OrdinalExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private OrdinalExtractor(BaseNumberOptionsConfiguration config);
    private static OrdinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static OrdinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.German.PercentageExtractor : BasePercentageExtractor {
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    protected NumberOptions Options { get; }
    public PercentageExtractor(BaseNumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
protected virtual NumberOptions get_Options();
    protected virtual ImmutableHashSet`1<Regex> InitRegexes();
}
public class Microsoft.Recognizers.Text.Number.Hindi.CardinalExtractor : BaseNumberExtractor {
    private static ConcurrentDictionary`2<string, CardinalExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private CardinalExtractor(string placeholder);
    private static CardinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static CardinalExtractor GetInstance(string placeholder);
}
public class Microsoft.Recognizers.Text.Number.Hindi.DoubleExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, DoubleExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private DoubleExtractor(string placeholder);
    private static DoubleExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static DoubleExtractor GetInstance(string placeholder);
}
public class Microsoft.Recognizers.Text.Number.Hindi.FractionExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberOptions, string>, FractionExtractor> Instances;
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    public NumberOptions Options { get; }
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private FractionExtractor(NumberOptions options);
    private static FractionExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual NumberOptions get_Options();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static FractionExtractor GetInstance(NumberOptions options, string placeholder);
}
public class Microsoft.Recognizers.Text.Number.Hindi.HindiNumberParserConfiguration : BaseIndianNumberParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <NonDecimalSeparatorText>k__BackingField;
    public string NonDecimalSeparatorText { get; private set; }
    public HindiNumberParserConfiguration(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public string get_NonDecimalSeparatorText();
    [CompilerGeneratedAttribute]
private void set_NonDecimalSeparatorText(string value);
}
public class Microsoft.Recognizers.Text.Number.Hindi.HindiNumberRangeParserConfiguration : BaseNumberRangeParserConfiguration {
    private static RegexOptions RegexFlags;
    public HindiNumberRangeParserConfiguration(INumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Hindi.IntegerExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, IntegerExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private IntegerExtractor(string placeholder);
    private static IntegerExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static IntegerExtractor GetInstance(string placeholder);
}
internal class Microsoft.Recognizers.Text.Number.Hindi.MergedNumberExtractor : BaseMergedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, MergedNumberExtractor> Instances;
    [CompilerGeneratedAttribute]
private BaseNumberExtractor <NumberExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RoundNumberIntegerRegexWithLocks>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConnectorRegex>k__BackingField;
    public BaseNumberExtractor NumberExtractor { get; public set; }
    public Regex RoundNumberIntegerRegexWithLocks { get; public set; }
    public Regex ConnectorRegex { get; public set; }
    public MergedNumberExtractor(NumberMode mode, NumberOptions options);
    private static MergedNumberExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual BaseNumberExtractor get_NumberExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NumberExtractor(BaseNumberExtractor value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RoundNumberIntegerRegexWithLocks();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RoundNumberIntegerRegexWithLocks(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectorRegex(Regex value);
    public static MergedNumberExtractor GetInstance(NumberMode mode, NumberOptions options);
}
public class Microsoft.Recognizers.Text.Number.Hindi.NumberExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, NumberExtractor> Instances;
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NegativeNumberTermsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeReferenceRegex>k__BackingField;
    public NumberOptions Options { get; }
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected ImmutableDictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    protected string ExtractType { get; }
    protected Regex NegativeNumberTermsRegex { get; }
    protected Regex AmbiguousFractionConnectorsRegex { get; }
    protected Regex RelativeReferenceRegex { get; }
    private NumberExtractor(NumberMode mode, NumberOptions options);
    private static NumberExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual NumberOptions get_Options();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual ImmutableDictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_NegativeNumberTermsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_RelativeReferenceRegex();
    public static NumberExtractor GetInstance(NumberMode mode, NumberOptions options);
}
public class Microsoft.Recognizers.Text.Number.Hindi.NumberRangeExtractor : BaseNumberRangeExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, string> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, string> Regexes { get; }
    internal Regex AmbiguousFractionConnectorsRegex { get; }
    protected string ExtractType { get; }
    public NumberRangeExtractor(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, string> get_Regexes();
    [CompilerGeneratedAttribute]
internal sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Hindi.OrdinalExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, OrdinalExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeReferenceRegex>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    protected Regex AmbiguousFractionConnectorsRegex { get; }
    protected Regex RelativeReferenceRegex { get; }
    private OrdinalExtractor(NumberOptions options);
    private static OrdinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_RelativeReferenceRegex();
    public static OrdinalExtractor GetInstance(NumberOptions options);
}
public class Microsoft.Recognizers.Text.Number.Hindi.PercentageExtractor : BasePercentageExtractor {
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    protected NumberOptions Options { get; }
    public PercentageExtractor(NumberOptions options);
    [CompilerGeneratedAttribute]
protected virtual NumberOptions get_Options();
    protected virtual ImmutableHashSet`1<Regex> InitRegexes();
}
public interface Microsoft.Recognizers.Text.Number.ICJKNumberParserConfiguration {
    public ImmutableDictionary`2<char, double> ZeroToNineMap { get; }
    public ImmutableDictionary`2<char, long> RoundNumberMapChar { get; }
    public ImmutableDictionary`2<char, char> FullToHalfMap { get; }
    public ImmutableSortedDictionary`2<string, string> UnitMap { get; }
    public ImmutableDictionary`2<char, char> TratoSimMap { get; }
    public ImmutableList`1<char> RoundDirectList { get; }
    public ImmutableList`1<char> TenChars { get; }
    public Regex FracSplitRegex { get; }
    public Regex DigitNumRegex { get; }
    public Regex SpeGetNumberRegex { get; }
    public Regex PercentageRegex { get; }
    public Regex PercentageNumRegex { get; }
    public Regex PointRegex { get; }
    public Regex DoubleAndRoundRegex { get; }
    public Regex PairRegex { get; }
    public Regex DozenRegex { get; }
    public Regex RoundNumberIntegerRegex { get; }
    public char ZeroChar { get; }
    public char PairChar { get; }
    public abstract virtual ImmutableDictionary`2<char, double> get_ZeroToNineMap();
    public abstract virtual ImmutableDictionary`2<char, long> get_RoundNumberMapChar();
    public abstract virtual ImmutableDictionary`2<char, char> get_FullToHalfMap();
    public abstract virtual ImmutableSortedDictionary`2<string, string> get_UnitMap();
    public abstract virtual ImmutableDictionary`2<char, char> get_TratoSimMap();
    public abstract virtual ImmutableList`1<char> get_RoundDirectList();
    public abstract virtual ImmutableList`1<char> get_TenChars();
    public abstract virtual Regex get_FracSplitRegex();
    public abstract virtual Regex get_DigitNumRegex();
    public abstract virtual Regex get_SpeGetNumberRegex();
    public abstract virtual Regex get_PercentageRegex();
    public abstract virtual Regex get_PercentageNumRegex();
    public abstract virtual Regex get_PointRegex();
    public abstract virtual Regex get_DoubleAndRoundRegex();
    public abstract virtual Regex get_PairRegex();
    public abstract virtual Regex get_DozenRegex();
    public abstract virtual Regex get_RoundNumberIntegerRegex();
    public abstract virtual char get_ZeroChar();
    public abstract virtual char get_PairChar();
}
public interface Microsoft.Recognizers.Text.Number.IIndianNumberParserConfiguration {
    public ImmutableDictionary`2<string, double> DecimalUnitsMap { get; }
    public ImmutableDictionary`2<char, long> ZeroToNineMap { get; }
    public Regex AdditionTermsRegex { get; }
    public Regex FractionPrepositionInverseRegex { get; }
    public abstract virtual ImmutableDictionary`2<string, double> get_DecimalUnitsMap();
    public abstract virtual ImmutableDictionary`2<char, long> get_ZeroToNineMap();
    public abstract virtual Regex get_AdditionTermsRegex();
    public abstract virtual Regex get_FractionPrepositionInverseRegex();
    public abstract virtual double ResolveUnitCompositeNumber(string numberStr);
}
public interface Microsoft.Recognizers.Text.Number.INumberOptionsConfiguration {
    public NumberOptions Options { get; }
    public NumberMode Mode { get; }
    public string Placeholder { get; }
    public abstract virtual NumberOptions get_Options();
    public abstract virtual NumberMode get_Mode();
    public abstract virtual string get_Placeholder();
}
public interface Microsoft.Recognizers.Text.Number.INumberParserConfiguration {
    public string LanguageMarker { get; }
    public ImmutableDictionary`2<string, long> CardinalNumberMap { get; }
    public ImmutableDictionary`2<string, long> OrdinalNumberMap { get; }
    public ImmutableDictionary`2<string, long> RoundNumberMap { get; }
    public ImmutableDictionary`2<string, string> RelativeReferenceMap { get; }
    public ImmutableDictionary`2<string, string> RelativeReferenceOffsetMap { get; }
    public ImmutableDictionary`2<string, string> RelativeReferenceRelativeToMap { get; }
    public INumberOptionsConfiguration Config { get; }
    public CultureInfo CultureInfo { get; }
    public Regex DigitalNumberRegex { get; }
    public Regex FractionPrepositionRegex { get; }
    public Regex RoundMultiplierRegex { get; }
    public string FractionMarkerToken { get; }
    public Regex HalfADozenRegex { get; }
    public string HalfADozenText { get; }
    public char NonDecimalSeparatorChar { get; }
    public char DecimalSeparatorChar { get; }
    public bool IsMultiDecimalSeparatorCulture { get; }
    public IEnumerable`1<string> NonStandardSeparatorVariants { get; }
    public string WordSeparatorToken { get; }
    public IEnumerable`1<string> WrittenDecimalSeparatorTexts { get; }
    public IEnumerable`1<string> WrittenGroupSeparatorTexts { get; }
    public IEnumerable`1<string> WrittenIntegerSeparatorTexts { get; }
    public IEnumerable`1<string> WrittenFractionSeparatorTexts { get; }
    public Regex NegativeNumberSignRegex { get; }
    public bool IsCompoundNumberLanguage { get; }
    public abstract virtual string get_LanguageMarker();
    public abstract virtual ImmutableDictionary`2<string, long> get_CardinalNumberMap();
    public abstract virtual ImmutableDictionary`2<string, long> get_OrdinalNumberMap();
    public abstract virtual ImmutableDictionary`2<string, long> get_RoundNumberMap();
    public abstract virtual ImmutableDictionary`2<string, string> get_RelativeReferenceMap();
    public abstract virtual ImmutableDictionary`2<string, string> get_RelativeReferenceOffsetMap();
    public abstract virtual ImmutableDictionary`2<string, string> get_RelativeReferenceRelativeToMap();
    public abstract virtual INumberOptionsConfiguration get_Config();
    public abstract virtual CultureInfo get_CultureInfo();
    public abstract virtual Regex get_DigitalNumberRegex();
    public abstract virtual Regex get_FractionPrepositionRegex();
    public abstract virtual Regex get_RoundMultiplierRegex();
    public abstract virtual string get_FractionMarkerToken();
    public abstract virtual Regex get_HalfADozenRegex();
    public abstract virtual string get_HalfADozenText();
    public abstract virtual char get_NonDecimalSeparatorChar();
    public abstract virtual char get_DecimalSeparatorChar();
    public abstract virtual bool get_IsMultiDecimalSeparatorCulture();
    public abstract virtual IEnumerable`1<string> get_NonStandardSeparatorVariants();
    public abstract virtual string get_WordSeparatorToken();
    public abstract virtual IEnumerable`1<string> get_WrittenDecimalSeparatorTexts();
    public abstract virtual IEnumerable`1<string> get_WrittenGroupSeparatorTexts();
    public abstract virtual IEnumerable`1<string> get_WrittenIntegerSeparatorTexts();
    public abstract virtual IEnumerable`1<string> get_WrittenFractionSeparatorTexts();
    public abstract virtual Regex get_NegativeNumberSignRegex();
    public abstract virtual bool get_IsCompoundNumberLanguage();
    public abstract virtual IEnumerable`1<string> NormalizeTokenSet(IEnumerable`1<string> tokens, ParseResult context);
    public abstract virtual long ResolveCompositeNumber(string numberStr);
    public abstract virtual ValueTuple`2<bool, double> GetLangSpecificIntValue(List`1<string> matchStrs);
}
public interface Microsoft.Recognizers.Text.Number.INumberRangeParserConfiguration {
    public CultureInfo CultureInfo { get; }
    public IExtractor NumberExtractor { get; }
    public IExtractor OrdinalExtractor { get; }
    public IParser NumberParser { get; }
    public Regex MoreOrEqual { get; }
    public Regex LessOrEqual { get; }
    public Regex MoreOrEqualSuffix { get; }
    public Regex LessOrEqualSuffix { get; }
    public Regex MoreOrEqualSeparate { get; }
    public Regex LessOrEqualSeparate { get; }
    public abstract virtual CultureInfo get_CultureInfo();
    public abstract virtual IExtractor get_NumberExtractor();
    public abstract virtual IExtractor get_OrdinalExtractor();
    public abstract virtual IParser get_NumberParser();
    public abstract virtual Regex get_MoreOrEqual();
    public abstract virtual Regex get_LessOrEqual();
    public abstract virtual Regex get_MoreOrEqualSuffix();
    public abstract virtual Regex get_LessOrEqualSuffix();
    public abstract virtual Regex get_MoreOrEqualSeparate();
    public abstract virtual Regex get_LessOrEqualSeparate();
}
public class Microsoft.Recognizers.Text.Number.Italian.CardinalExtractor : BaseNumberExtractor {
    private static ConcurrentDictionary`2<string, CardinalExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private CardinalExtractor(string placeholder);
    private static CardinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static CardinalExtractor GetInstance(string placeholder);
}
public class Microsoft.Recognizers.Text.Number.Italian.DoubleExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, DoubleExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private DoubleExtractor(string placeholder);
    private static DoubleExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static DoubleExtractor GetInstance(string placeholder);
}
public class Microsoft.Recognizers.Text.Number.Italian.FractionExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`3<NumberMode, NumberOptions, string>, FractionExtractor> Instances;
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    public NumberOptions Options { get; }
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private FractionExtractor(NumberMode mode, NumberOptions options);
    private static FractionExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual NumberOptions get_Options();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static FractionExtractor GetInstance(NumberMode mode, NumberOptions options, string placeholder);
}
public class Microsoft.Recognizers.Text.Number.Italian.IntegerExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, IntegerExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private IntegerExtractor(string placeholder);
    private static IntegerExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static IntegerExtractor GetInstance(string placeholder);
}
public class Microsoft.Recognizers.Text.Number.Italian.ItalianNumberParserConfiguration : BaseNumberParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <NonDecimalSeparatorText>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <OneToNineOrdinalRegex>k__BackingField;
    public string NonDecimalSeparatorText { get; private set; }
    public Regex OneToNineOrdinalRegex { get; }
    public ItalianNumberParserConfiguration(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public string get_NonDecimalSeparatorText();
    [CompilerGeneratedAttribute]
private void set_NonDecimalSeparatorText(string value);
    [CompilerGeneratedAttribute]
public Regex get_OneToNineOrdinalRegex();
    public virtual IEnumerable`1<string> NormalizeTokenSet(IEnumerable`1<string> tokens, ParseResult context);
    public virtual long ResolveCompositeNumber(string numberStr);
}
public class Microsoft.Recognizers.Text.Number.Italian.ItalianNumberRangeParserConfiguration : BaseNumberRangeParserConfiguration {
    private static RegexOptions RegexFlags;
    public ItalianNumberRangeParserConfiguration(INumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Italian.NumberExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, NumberExtractor> Instances;
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    public NumberOptions Options { get; }
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected ImmutableDictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    protected string ExtractType { get; }
    private NumberExtractor(NumberMode mode, NumberOptions options);
    private static NumberExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual NumberOptions get_Options();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual ImmutableDictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static NumberExtractor GetInstance(NumberMode mode, NumberOptions options);
}
public class Microsoft.Recognizers.Text.Number.Italian.NumberRangeExtractor : BaseNumberRangeExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, string> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, string> Regexes { get; }
    internal Regex AmbiguousFractionConnectorsRegex { get; }
    protected string ExtractType { get; }
    public NumberRangeExtractor(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, string> get_Regexes();
    [CompilerGeneratedAttribute]
internal sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Italian.OrdinalExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, OrdinalExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private OrdinalExtractor(BaseNumberOptionsConfiguration config);
    private static OrdinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static OrdinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Italian.PercentageExtractor : BasePercentageExtractor {
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    protected NumberOptions Options { get; }
    public PercentageExtractor(NumberOptions options);
    [CompilerGeneratedAttribute]
protected virtual NumberOptions get_Options();
    protected virtual ImmutableHashSet`1<Regex> InitRegexes();
}
public class Microsoft.Recognizers.Text.Number.Japanese.CardinalExtractor : BaseNumberExtractor {
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    public CardinalExtractor(BaseNumberOptionsConfiguration config, CJKNumberExtractorMode mode);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Japanese.DoubleExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    public DoubleExtractor(BaseNumberOptionsConfiguration config, CJKNumberExtractorMode mode);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Japanese.FractionExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    public FractionExtractor(BaseNumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Japanese.IntegerExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    public IntegerExtractor(BaseNumberOptionsConfiguration config, CJKNumberExtractorMode mode);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Japanese.JapaneseNumberParserConfiguration : BaseNumberParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <NonDecimalSeparatorText>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DigitNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DozenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PercentageRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PercentageNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DoubleAndRoundRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FracSplitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PointRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpeGetNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PairRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RoundNumberIntegerRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private char <ZeroChar>k__BackingField;
    [CompilerGeneratedAttribute]
private char <PairChar>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<char, double> <ZeroToNineMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<char, long> <RoundNumberMapChar>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<char, char> <FullToHalfMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableSortedDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<char, char> <TratoSimMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<char> <RoundDirectList>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<char> <TenChars>k__BackingField;
    public string NonDecimalSeparatorText { get; private set; }
    public Regex DigitNumRegex { get; private set; }
    public Regex DozenRegex { get; private set; }
    public Regex PercentageRegex { get; private set; }
    public Regex PercentageNumRegex { get; private set; }
    public Regex DoubleAndRoundRegex { get; private set; }
    public Regex FracSplitRegex { get; private set; }
    public Regex PointRegex { get; private set; }
    public Regex SpeGetNumberRegex { get; private set; }
    public Regex PairRegex { get; private set; }
    public Regex RoundNumberIntegerRegex { get; private set; }
    public char ZeroChar { get; private set; }
    public char PairChar { get; private set; }
    public ImmutableDictionary`2<char, double> ZeroToNineMap { get; private set; }
    public ImmutableDictionary`2<char, long> RoundNumberMapChar { get; private set; }
    public ImmutableDictionary`2<char, char> FullToHalfMap { get; private set; }
    public ImmutableSortedDictionary`2<string, string> UnitMap { get; private set; }
    public ImmutableDictionary`2<char, char> TratoSimMap { get; private set; }
    public ImmutableList`1<char> RoundDirectList { get; private set; }
    public ImmutableList`1<char> TenChars { get; private set; }
    public JapaneseNumberParserConfiguration(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public string get_NonDecimalSeparatorText();
    [CompilerGeneratedAttribute]
private void set_NonDecimalSeparatorText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DigitNumRegex();
    [CompilerGeneratedAttribute]
private void set_DigitNumRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DozenRegex();
    [CompilerGeneratedAttribute]
private void set_DozenRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PercentageRegex();
    [CompilerGeneratedAttribute]
private void set_PercentageRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PercentageNumRegex();
    [CompilerGeneratedAttribute]
private void set_PercentageNumRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DoubleAndRoundRegex();
    [CompilerGeneratedAttribute]
private void set_DoubleAndRoundRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FracSplitRegex();
    [CompilerGeneratedAttribute]
private void set_FracSplitRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PointRegex();
    [CompilerGeneratedAttribute]
private void set_PointRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpeGetNumberRegex();
    [CompilerGeneratedAttribute]
private void set_SpeGetNumberRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PairRegex();
    [CompilerGeneratedAttribute]
private void set_PairRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RoundNumberIntegerRegex();
    [CompilerGeneratedAttribute]
private void set_RoundNumberIntegerRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual char get_ZeroChar();
    [CompilerGeneratedAttribute]
private void set_ZeroChar(char value);
    [CompilerGeneratedAttribute]
public sealed virtual char get_PairChar();
    [CompilerGeneratedAttribute]
private void set_PairChar(char value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<char, double> get_ZeroToNineMap();
    [CompilerGeneratedAttribute]
private void set_ZeroToNineMap(ImmutableDictionary`2<char, double> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<char, long> get_RoundNumberMapChar();
    [CompilerGeneratedAttribute]
private void set_RoundNumberMapChar(ImmutableDictionary`2<char, long> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<char, char> get_FullToHalfMap();
    [CompilerGeneratedAttribute]
private void set_FullToHalfMap(ImmutableDictionary`2<char, char> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableSortedDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
private void set_UnitMap(ImmutableSortedDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<char, char> get_TratoSimMap();
    [CompilerGeneratedAttribute]
private void set_TratoSimMap(ImmutableDictionary`2<char, char> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableList`1<char> get_RoundDirectList();
    [CompilerGeneratedAttribute]
private void set_RoundDirectList(ImmutableList`1<char> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableList`1<char> get_TenChars();
    [CompilerGeneratedAttribute]
private void set_TenChars(ImmutableList`1<char> value);
    public virtual IEnumerable`1<string> NormalizeTokenSet(IEnumerable`1<string> tokens, ParseResult context);
    public virtual long ResolveCompositeNumber(string numberStr);
}
public class Microsoft.Recognizers.Text.Number.Japanese.JapaneseNumberRangeParserConfiguration : BaseNumberRangeParserConfiguration {
    private static RegexOptions RegexFlags;
    public JapaneseNumberRangeParserConfiguration(INumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Japanese.NumberExtractor : BaseNumberExtractor {
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected ImmutableDictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    protected string ExtractType { get; }
    public NumberExtractor(BaseNumberOptionsConfiguration config, CJKNumberExtractorMode mode);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual ImmutableDictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Japanese.NumberRangeExtractor : BaseNumberRangeExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, string> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, string> Regexes { get; }
    internal Regex AmbiguousFractionConnectorsRegex { get; }
    protected string ExtractType { get; }
    public NumberRangeExtractor(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, string> get_Regexes();
    [CompilerGeneratedAttribute]
internal sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Japanese.OrdinalExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, OrdinalExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private OrdinalExtractor(BaseNumberOptionsConfiguration config);
    private static OrdinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static OrdinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Japanese.PercentageExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    public PercentageExtractor(BaseNumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Korean.CardinalExtractor : BaseNumberExtractor {
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    public CardinalExtractor(BaseNumberOptionsConfiguration config, CJKNumberExtractorMode mode);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Korean.DoubleExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    public DoubleExtractor(BaseNumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Korean.FractionExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    public FractionExtractor(BaseNumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Korean.IntegerExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    public IntegerExtractor(BaseNumberOptionsConfiguration config, CJKNumberExtractorMode mode);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public enum Microsoft.Recognizers.Text.Number.Korean.KoreanNumberExtractorMode : Enum {
    public int value__;
    public static KoreanNumberExtractorMode Default;
    public static KoreanNumberExtractorMode ExtractAll;
}
public class Microsoft.Recognizers.Text.Number.Korean.KoreanNumberParserConfiguration : BaseNumberParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <NonDecimalSeparatorText>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DigitNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DozenRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PercentageRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PercentageNumRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <DoubleAndRoundRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <FracSplitRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NegativeNumberTermsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PointRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <SpeGetNumberRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <PairRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RoundNumberIntegerRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private char <ZeroChar>k__BackingField;
    [CompilerGeneratedAttribute]
private char <PairChar>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<char, double> <ZeroToNineMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<char, long> <RoundNumberMapChar>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<char, char> <FullToHalfMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableSortedDictionary`2<string, string> <UnitMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<char, char> <TratoSimMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<char> <RoundDirectList>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableList`1<char> <TenChars>k__BackingField;
    public string NonDecimalSeparatorText { get; private set; }
    public Regex DigitNumRegex { get; private set; }
    public Regex DozenRegex { get; private set; }
    public Regex PercentageRegex { get; private set; }
    public Regex PercentageNumRegex { get; private set; }
    public Regex DoubleAndRoundRegex { get; private set; }
    public Regex FracSplitRegex { get; private set; }
    public Regex NegativeNumberTermsRegex { get; private set; }
    public Regex PointRegex { get; private set; }
    public Regex SpeGetNumberRegex { get; private set; }
    public Regex PairRegex { get; private set; }
    public Regex RoundNumberIntegerRegex { get; private set; }
    public char ZeroChar { get; private set; }
    public char PairChar { get; private set; }
    public ImmutableDictionary`2<char, double> ZeroToNineMap { get; private set; }
    public ImmutableDictionary`2<char, long> RoundNumberMapChar { get; private set; }
    public ImmutableDictionary`2<char, char> FullToHalfMap { get; private set; }
    public ImmutableSortedDictionary`2<string, string> UnitMap { get; private set; }
    public ImmutableDictionary`2<char, char> TratoSimMap { get; private set; }
    public ImmutableList`1<char> RoundDirectList { get; private set; }
    public ImmutableList`1<char> TenChars { get; private set; }
    public KoreanNumberParserConfiguration(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public string get_NonDecimalSeparatorText();
    [CompilerGeneratedAttribute]
private void set_NonDecimalSeparatorText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DigitNumRegex();
    [CompilerGeneratedAttribute]
private void set_DigitNumRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DozenRegex();
    [CompilerGeneratedAttribute]
private void set_DozenRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PercentageRegex();
    [CompilerGeneratedAttribute]
private void set_PercentageRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PercentageNumRegex();
    [CompilerGeneratedAttribute]
private void set_PercentageNumRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_DoubleAndRoundRegex();
    [CompilerGeneratedAttribute]
private void set_DoubleAndRoundRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_FracSplitRegex();
    [CompilerGeneratedAttribute]
private void set_FracSplitRegex(Regex value);
    [CompilerGeneratedAttribute]
public Regex get_NegativeNumberTermsRegex();
    [CompilerGeneratedAttribute]
private void set_NegativeNumberTermsRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PointRegex();
    [CompilerGeneratedAttribute]
private void set_PointRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_SpeGetNumberRegex();
    [CompilerGeneratedAttribute]
private void set_SpeGetNumberRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_PairRegex();
    [CompilerGeneratedAttribute]
private void set_PairRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RoundNumberIntegerRegex();
    [CompilerGeneratedAttribute]
private void set_RoundNumberIntegerRegex(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual char get_ZeroChar();
    [CompilerGeneratedAttribute]
private void set_ZeroChar(char value);
    [CompilerGeneratedAttribute]
public sealed virtual char get_PairChar();
    [CompilerGeneratedAttribute]
private void set_PairChar(char value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<char, double> get_ZeroToNineMap();
    [CompilerGeneratedAttribute]
private void set_ZeroToNineMap(ImmutableDictionary`2<char, double> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<char, long> get_RoundNumberMapChar();
    [CompilerGeneratedAttribute]
private void set_RoundNumberMapChar(ImmutableDictionary`2<char, long> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<char, char> get_FullToHalfMap();
    [CompilerGeneratedAttribute]
private void set_FullToHalfMap(ImmutableDictionary`2<char, char> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableSortedDictionary`2<string, string> get_UnitMap();
    [CompilerGeneratedAttribute]
private void set_UnitMap(ImmutableSortedDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableDictionary`2<char, char> get_TratoSimMap();
    [CompilerGeneratedAttribute]
private void set_TratoSimMap(ImmutableDictionary`2<char, char> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableList`1<char> get_RoundDirectList();
    [CompilerGeneratedAttribute]
private void set_RoundDirectList(ImmutableList`1<char> value);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableList`1<char> get_TenChars();
    [CompilerGeneratedAttribute]
private void set_TenChars(ImmutableList`1<char> value);
    public virtual IEnumerable`1<string> NormalizeTokenSet(IEnumerable`1<string> tokens, ParseResult context);
    public virtual long ResolveCompositeNumber(string numberStr);
}
public class Microsoft.Recognizers.Text.Number.Korean.KoreanNumberRangeParserConfiguration : BaseNumberRangeParserConfiguration {
    private static RegexOptions RegexFlags;
    public KoreanNumberRangeParserConfiguration(INumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Korean.NumberExtractor : BaseNumberExtractor {
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    public NumberExtractor(BaseNumberOptionsConfiguration config, CJKNumberExtractorMode mode);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Korean.NumberRangeExtractor : BaseNumberRangeExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, string> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, string> Regexes { get; }
    internal Regex AmbiguousFractionConnectorsRegex { get; }
    protected string ExtractType { get; }
    public NumberRangeExtractor(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, string> get_Regexes();
    [CompilerGeneratedAttribute]
internal sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Korean.OrdinalExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, OrdinalExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private OrdinalExtractor(BaseNumberOptionsConfiguration config);
    private static OrdinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static OrdinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Korean.PercentageExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    public PercentageExtractor(BaseNumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.LongFormatType : object {
    [CompilerGeneratedAttribute]
private static LongFormatType <IntegerNumComma>k__BackingField;
    [CompilerGeneratedAttribute]
private static LongFormatType <IntegerNumInvertedComma>k__BackingField;
    [CompilerGeneratedAttribute]
private static LongFormatType <IntegerNumDot>k__BackingField;
    [CompilerGeneratedAttribute]
private static LongFormatType <IntegerNumBlank>k__BackingField;
    [CompilerGeneratedAttribute]
private static LongFormatType <IntegerNumNoBreakSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private static LongFormatType <IntegerNumQuote>k__BackingField;
    [CompilerGeneratedAttribute]
private static LongFormatType <DoubleNumCommaDot>k__BackingField;
    [CompilerGeneratedAttribute]
private static LongFormatType <DoubleNumCommaCdot>k__BackingField;
    [CompilerGeneratedAttribute]
private static LongFormatType <DoubleNumBlankComma>k__BackingField;
    [CompilerGeneratedAttribute]
private static LongFormatType <DoubleNumNoBreakSpaceComma>k__BackingField;
    [CompilerGeneratedAttribute]
private static LongFormatType <DoubleNumBlankDot>k__BackingField;
    [CompilerGeneratedAttribute]
private static LongFormatType <DoubleNumNoBreakSpaceDot>k__BackingField;
    [CompilerGeneratedAttribute]
private static LongFormatType <DoubleNumDotComma>k__BackingField;
    [CompilerGeneratedAttribute]
private static LongFormatType <DoubleNumQuoteComma>k__BackingField;
    [CompilerGeneratedAttribute]
private static LongFormatType <DoubleNumFullWidthBlankDot>k__BackingField;
    [CompilerGeneratedAttribute]
private char <DecimalsMark>k__BackingField;
    [CompilerGeneratedAttribute]
private char <ThousandsMark>k__BackingField;
    public static LongFormatType IntegerNumComma { get; public set; }
    public static LongFormatType IntegerNumInvertedComma { get; public set; }
    public static LongFormatType IntegerNumDot { get; public set; }
    public static LongFormatType IntegerNumBlank { get; public set; }
    public static LongFormatType IntegerNumNoBreakSpace { get; public set; }
    public static LongFormatType IntegerNumQuote { get; public set; }
    public static LongFormatType DoubleNumCommaDot { get; public set; }
    public static LongFormatType DoubleNumCommaCdot { get; public set; }
    public static LongFormatType DoubleNumBlankComma { get; public set; }
    public static LongFormatType DoubleNumNoBreakSpaceComma { get; public set; }
    public static LongFormatType DoubleNumBlankDot { get; public set; }
    public static LongFormatType DoubleNumNoBreakSpaceDot { get; public set; }
    public static LongFormatType DoubleNumDotComma { get; public set; }
    public static LongFormatType DoubleNumQuoteComma { get; public set; }
    public static LongFormatType DoubleNumFullWidthBlankDot { get; public set; }
    public char DecimalsMark { get; }
    public char ThousandsMark { get; }
    private LongFormatType(char thousandsMark, char decimalsMark);
    private static LongFormatType();
    [CompilerGeneratedAttribute]
public static LongFormatType get_IntegerNumComma();
    [CompilerGeneratedAttribute]
public static void set_IntegerNumComma(LongFormatType value);
    [CompilerGeneratedAttribute]
public static LongFormatType get_IntegerNumInvertedComma();
    [CompilerGeneratedAttribute]
public static void set_IntegerNumInvertedComma(LongFormatType value);
    [CompilerGeneratedAttribute]
public static LongFormatType get_IntegerNumDot();
    [CompilerGeneratedAttribute]
public static void set_IntegerNumDot(LongFormatType value);
    [CompilerGeneratedAttribute]
public static LongFormatType get_IntegerNumBlank();
    [CompilerGeneratedAttribute]
public static void set_IntegerNumBlank(LongFormatType value);
    [CompilerGeneratedAttribute]
public static LongFormatType get_IntegerNumNoBreakSpace();
    [CompilerGeneratedAttribute]
public static void set_IntegerNumNoBreakSpace(LongFormatType value);
    [CompilerGeneratedAttribute]
public static LongFormatType get_IntegerNumQuote();
    [CompilerGeneratedAttribute]
public static void set_IntegerNumQuote(LongFormatType value);
    [CompilerGeneratedAttribute]
public static LongFormatType get_DoubleNumCommaDot();
    [CompilerGeneratedAttribute]
public static void set_DoubleNumCommaDot(LongFormatType value);
    [CompilerGeneratedAttribute]
public static LongFormatType get_DoubleNumCommaCdot();
    [CompilerGeneratedAttribute]
public static void set_DoubleNumCommaCdot(LongFormatType value);
    [CompilerGeneratedAttribute]
public static LongFormatType get_DoubleNumBlankComma();
    [CompilerGeneratedAttribute]
public static void set_DoubleNumBlankComma(LongFormatType value);
    [CompilerGeneratedAttribute]
public static LongFormatType get_DoubleNumNoBreakSpaceComma();
    [CompilerGeneratedAttribute]
public static void set_DoubleNumNoBreakSpaceComma(LongFormatType value);
    [CompilerGeneratedAttribute]
public static LongFormatType get_DoubleNumBlankDot();
    [CompilerGeneratedAttribute]
public static void set_DoubleNumBlankDot(LongFormatType value);
    [CompilerGeneratedAttribute]
public static LongFormatType get_DoubleNumNoBreakSpaceDot();
    [CompilerGeneratedAttribute]
public static void set_DoubleNumNoBreakSpaceDot(LongFormatType value);
    [CompilerGeneratedAttribute]
public static LongFormatType get_DoubleNumDotComma();
    [CompilerGeneratedAttribute]
public static void set_DoubleNumDotComma(LongFormatType value);
    [CompilerGeneratedAttribute]
public static LongFormatType get_DoubleNumQuoteComma();
    [CompilerGeneratedAttribute]
public static void set_DoubleNumQuoteComma(LongFormatType value);
    [CompilerGeneratedAttribute]
public static LongFormatType get_DoubleNumFullWidthBlankDot();
    [CompilerGeneratedAttribute]
public static void set_DoubleNumFullWidthBlankDot(LongFormatType value);
    [CompilerGeneratedAttribute]
public char get_DecimalsMark();
    [CompilerGeneratedAttribute]
public char get_ThousandsMark();
}
public static class Microsoft.Recognizers.Text.Number.NumberMapGenerator : object {
    public static ImmutableDictionary`2<string, long> InitOrdinalNumberMap(Dictionary`2<string, long> ordinalNumberMap, Dictionary`2<string, long> prefixCardinalMap, Dictionary`2<string, long> suffixOrdinalMap);
}
public enum Microsoft.Recognizers.Text.Number.NumberMode : Enum {
    public int value__;
    public static NumberMode Default;
    public static NumberMode Currency;
    public static NumberMode PureNumber;
    public static NumberMode Unit;
}
public class Microsoft.Recognizers.Text.Number.NumberModel : AbstractNumberModel {
    public string ModelTypeName { get; }
    public NumberModel(IParser parser, IExtractor extractor);
    public virtual string get_ModelTypeName();
}
[FlagsAttribute]
public enum Microsoft.Recognizers.Text.Number.NumberOptions : Enum {
    public int value__;
    public static NumberOptions None;
    public static NumberOptions PercentageMode;
    public static NumberOptions NoProtoCache;
    public static NumberOptions SuppressExtendedTypes;
    public static NumberOptions ExperimentalMode;
    public static NumberOptions EnablePreview;
}
public static class Microsoft.Recognizers.Text.Number.NumberRangeConstants : object {
    public static string TWONUM;
    public static string TWONUMBETWEEN;
    public static string TWONUMTILL;
    public static string TWONUMCLOSED;
    public static string MORE;
    public static string LESS;
    public static string EQUAL;
    public static char LEFT_OPEN;
    public static char RIGHT_OPEN;
    public static char LEFT_CLOSED;
    public static char RIGHT_CLOSED;
    public static char INTERVAL_SEPARATOR;
    public static int INVALID_NUM;
}
public class Microsoft.Recognizers.Text.Number.NumberRangeModel : AbstractNumberModel {
    public string ModelTypeName { get; }
    public NumberRangeModel(IParser parser, IExtractor extractor);
    public virtual string get_ModelTypeName();
}
public class Microsoft.Recognizers.Text.Number.NumberRecognizer : Recognizer`1<NumberOptions> {
    public NumberRecognizer(string targetCulture, NumberOptions options, bool lazyInitialization, int timeoutInSeconds);
    public NumberRecognizer(string targetCulture, NumberOptions options, bool lazyInitialization);
    public NumberRecognizer(string targetCulture, int options, bool lazyInitialization);
    public NumberRecognizer(NumberOptions options, bool lazyInitialization);
    public NumberRecognizer(int options, bool lazyInitialization);
    public static List`1<ModelResult> RecognizeNumber(string query, string culture, NumberOptions options, bool fallbackToDefaultCulture);
    public static List`1<ModelResult> RecognizeOrdinal(string query, string culture, NumberOptions options, bool fallbackToDefaultCulture);
    public static List`1<ModelResult> RecognizePercentage(string query, string culture, NumberOptions options, bool fallbackToDefaultCulture);
    public static List`1<ModelResult> RecognizeNumberRange(string query, string culture, NumberOptions options, bool fallbackToDefaultCulture);
    public NumberModel GetNumberModel(string culture, bool fallbackToDefaultCulture);
    public OrdinalModel GetOrdinalModel(string culture, bool fallbackToDefaultCulture);
    public PercentModel GetPercentageModel(string culture, bool fallbackToDefaultCulture);
    public NumberRangeModel GetNumberRangeModel(string culture, bool fallbackToDefaultCulture);
    protected virtual void InitializeConfiguration();
    protected virtual List`1<Type> GetRelatedTypes();
    private static List`1<ModelResult> RecognizeByModel(Func`2<NumberRecognizer, IModel> getModelFunc, string query, NumberOptions options);
}
public class Microsoft.Recognizers.Text.Number.OrdinalModel : AbstractNumberModel {
    public string ModelTypeName { get; }
    public OrdinalModel(IParser parser, IExtractor extractor);
    public virtual string get_ModelTypeName();
}
public class Microsoft.Recognizers.Text.Number.PercentModel : AbstractNumberModel {
    public string ModelTypeName { get; }
    public PercentModel(IParser parser, IExtractor extractor);
    public virtual string get_ModelTypeName();
}
public class Microsoft.Recognizers.Text.Number.Portuguese.CardinalExtractor : CachedNumberExtractor {
    private static ConcurrentDictionary`2<string, CardinalExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private CardinalExtractor(BaseNumberOptionsConfiguration config);
    private static CardinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static CardinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.Portuguese.DoubleExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, DoubleExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private DoubleExtractor(BaseNumberOptionsConfiguration config);
    private static DoubleExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static DoubleExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Portuguese.FractionExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, FractionExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private FractionExtractor(BaseNumberOptionsConfiguration config);
    private static FractionExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static FractionExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Portuguese.IntegerExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, IntegerExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private IntegerExtractor(BaseNumberOptionsConfiguration config);
    private static IntegerExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static IntegerExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.Portuguese.NumberExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, NumberExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    public NumberOptions Options { get; }
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected ImmutableDictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    protected string ExtractType { get; }
    private NumberExtractor(BaseNumberOptionsConfiguration config);
    private static NumberExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual NumberOptions get_Options();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual ImmutableDictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static NumberExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.Portuguese.NumberRangeExtractor : BaseNumberRangeExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, string> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, string> Regexes { get; }
    internal Regex AmbiguousFractionConnectorsRegex { get; }
    protected string ExtractType { get; }
    public NumberRangeExtractor(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, string> get_Regexes();
    [CompilerGeneratedAttribute]
internal sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Portuguese.OrdinalExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, OrdinalExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private OrdinalExtractor(BaseNumberOptionsConfiguration config);
    private static OrdinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static OrdinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.Portuguese.PercentageExtractor : BasePercentageExtractor {
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    protected NumberOptions Options { get; }
    public PercentageExtractor(BaseNumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
protected virtual NumberOptions get_Options();
    protected virtual ImmutableHashSet`1<Regex> InitRegexes();
}
public class Microsoft.Recognizers.Text.Number.Portuguese.PortugueseNumberParserConfiguration : BaseNumberParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <NonDecimalSeparatorText>k__BackingField;
    public string NonDecimalSeparatorText { get; private set; }
    public PortugueseNumberParserConfiguration(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public string get_NonDecimalSeparatorText();
    [CompilerGeneratedAttribute]
private void set_NonDecimalSeparatorText(string value);
    public virtual IEnumerable`1<string> NormalizeTokenSet(IEnumerable`1<string> tokens, ParseResult context);
    public virtual long ResolveCompositeNumber(string numberStr);
}
public class Microsoft.Recognizers.Text.Number.Portuguese.PortugueseNumberRangeParserConfiguration : BaseNumberRangeParserConfiguration {
    private static RegexOptions RegexFlags;
    public PortugueseNumberRangeParserConfiguration(INumberOptionsConfiguration config);
}
public static class Microsoft.Recognizers.Text.Number.RegexTagGenerator : object {
    private static int priority;
    public static TypeTag GenerateRegexTag(string extractorType, string suffix);
}
public class Microsoft.Recognizers.Text.Number.Spanish.CardinalExtractor : CachedNumberExtractor {
    private static ConcurrentDictionary`2<string, CardinalExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private CardinalExtractor(BaseNumberOptionsConfiguration config);
    private static CardinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static CardinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.Spanish.DoubleExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, DoubleExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private DoubleExtractor(BaseNumberOptionsConfiguration config);
    private static DoubleExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static DoubleExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Spanish.FractionExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, FractionExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private FractionExtractor(BaseNumberOptionsConfiguration config);
    private static FractionExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static FractionExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Spanish.IntegerExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, IntegerExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private IntegerExtractor(BaseNumberOptionsConfiguration config);
    private static IntegerExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static IntegerExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.Spanish.NumberExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, NumberExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NegativeNumberTermsRegex>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected ImmutableDictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    protected string ExtractType { get; }
    protected Regex NegativeNumberTermsRegex { get; }
    private NumberExtractor(BaseNumberOptionsConfiguration config);
    private static NumberExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual ImmutableDictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_NegativeNumberTermsRegex();
    public static NumberExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.Spanish.NumberRangeExtractor : BaseNumberRangeExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, string> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, string> Regexes { get; }
    internal Regex AmbiguousFractionConnectorsRegex { get; }
    protected string ExtractType { get; }
    public NumberRangeExtractor(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, string> get_Regexes();
    [CompilerGeneratedAttribute]
internal sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Spanish.OrdinalExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, OrdinalExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private OrdinalExtractor(BaseNumberOptionsConfiguration config);
    private static OrdinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static OrdinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.Spanish.PercentageExtractor : BasePercentageExtractor {
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    protected NumberOptions Options { get; }
    public PercentageExtractor(BaseNumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
protected virtual NumberOptions get_Options();
    protected virtual ImmutableHashSet`1<Regex> InitRegexes();
}
public class Microsoft.Recognizers.Text.Number.Spanish.SpanishNumberParserConfiguration : BaseNumberParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <NonDecimalSeparatorText>k__BackingField;
    public string NonDecimalSeparatorText { get; private set; }
    public IEnumerable`1<string> NonStandardSeparatorVariants { get; }
    public SpanishNumberParserConfiguration(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public string get_NonDecimalSeparatorText();
    [CompilerGeneratedAttribute]
private void set_NonDecimalSeparatorText(string value);
    public virtual IEnumerable`1<string> get_NonStandardSeparatorVariants();
    public virtual IEnumerable`1<string> NormalizeTokenSet(IEnumerable`1<string> tokens, ParseResult context);
    public virtual long ResolveCompositeNumber(string numberStr);
}
public class Microsoft.Recognizers.Text.Number.Spanish.SpanishNumberRangeParserConfiguration : BaseNumberRangeParserConfiguration {
    private static RegexOptions RegexFlags;
    public SpanishNumberRangeParserConfiguration(INumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Swedish.CardinalExtractor : CachedNumberExtractor {
    private static ConcurrentDictionary`2<string, CardinalExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private CardinalExtractor(BaseNumberOptionsConfiguration config);
    private static CardinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static CardinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.Swedish.DoubleExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, DoubleExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private DoubleExtractor(BaseNumberOptionsConfiguration config);
    private static DoubleExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static DoubleExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Swedish.FractionExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, FractionExtractor> Instances;
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    public NumberOptions Options { get; }
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private FractionExtractor(BaseNumberOptionsConfiguration config);
    private static FractionExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual NumberOptions get_Options();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static FractionExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Swedish.IntegerExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, IntegerExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private IntegerExtractor(BaseNumberOptionsConfiguration config);
    private static IntegerExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static IntegerExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.Swedish.NumberExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, NumberExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NegativeNumberTermsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeReferenceRegex>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected ImmutableDictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    protected string ExtractType { get; }
    protected Regex NegativeNumberTermsRegex { get; }
    protected Regex AmbiguousFractionConnectorsRegex { get; }
    protected Regex RelativeReferenceRegex { get; }
    private NumberExtractor(BaseNumberOptionsConfiguration config);
    private static NumberExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual ImmutableDictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_NegativeNumberTermsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_RelativeReferenceRegex();
    public static NumberExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.Swedish.NumberRangeExtractor : BaseNumberRangeExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, string> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, string> Regexes { get; }
    internal Regex AmbiguousFractionConnectorsRegex { get; }
    protected string ExtractType { get; }
    public NumberRangeExtractor(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, string> get_Regexes();
    [CompilerGeneratedAttribute]
internal sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Swedish.OrdinalExtractor : CachedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, OrdinalExtractor> Instances;
    private string keyPrefix;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeReferenceRegex>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    protected Regex AmbiguousFractionConnectorsRegex { get; }
    protected Regex RelativeReferenceRegex { get; }
    private OrdinalExtractor(BaseNumberOptionsConfiguration config);
    private static OrdinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_RelativeReferenceRegex();
    public static OrdinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
    protected virtual object GenKey(string input);
}
public class Microsoft.Recognizers.Text.Number.Swedish.PercentageExtractor : BasePercentageExtractor {
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    protected NumberOptions Options { get; }
    public PercentageExtractor(BaseNumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
protected virtual NumberOptions get_Options();
    protected virtual ImmutableHashSet`1<Regex> InitRegexes();
}
public class Microsoft.Recognizers.Text.Number.Swedish.SwedishNumberParserConfiguration : BaseNumberParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <NonDecimalSeparatorText>k__BackingField;
    [CompilerGeneratedAttribute]
private static ImmutableDictionary`2<string, long> <SwedishWrittenFractionLookupMap>k__BackingField;
    public string NonDecimalSeparatorText { get; private set; }
    private static ImmutableDictionary`2<string, long> SwedishWrittenFractionLookupMap { get; private set; }
    public SwedishNumberParserConfiguration(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public string get_NonDecimalSeparatorText();
    [CompilerGeneratedAttribute]
private void set_NonDecimalSeparatorText(string value);
    [CompilerGeneratedAttribute]
private static ImmutableDictionary`2<string, long> get_SwedishWrittenFractionLookupMap();
    [CompilerGeneratedAttribute]
private static void set_SwedishWrittenFractionLookupMap(ImmutableDictionary`2<string, long> value);
    public virtual IEnumerable`1<string> NormalizeTokenSet(IEnumerable`1<string> tokens, ParseResult context);
    public virtual long ResolveCompositeNumber(string numberStr);
}
public class Microsoft.Recognizers.Text.Number.Swedish.SwedishNumberRangeParserConfiguration : BaseNumberRangeParserConfiguration {
    private static RegexOptions RegexFlags;
    public SwedishNumberRangeParserConfiguration(INumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Turkish.CardinalExtractor : BaseNumberExtractor {
    private static ConcurrentDictionary`2<string, CardinalExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private CardinalExtractor(string placeholder);
    private static CardinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static CardinalExtractor GetInstance(string placeholder);
}
public class Microsoft.Recognizers.Text.Number.Turkish.DoubleExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, DoubleExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private DoubleExtractor(string placeholder);
    private static DoubleExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static DoubleExtractor GetInstance(string placeholder);
}
public class Microsoft.Recognizers.Text.Number.Turkish.FractionExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`3<NumberMode, NumberOptions, string>, FractionExtractor> Instances;
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    public NumberOptions Options { get; }
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private FractionExtractor(NumberMode mode, NumberOptions options);
    private static FractionExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual NumberOptions get_Options();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static FractionExtractor GetInstance(NumberMode mode, NumberOptions options, string placeholder);
}
public class Microsoft.Recognizers.Text.Number.Turkish.IntegerExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, IntegerExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    private IntegerExtractor(string placeholder);
    private static IntegerExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    public static IntegerExtractor GetInstance(string placeholder);
}
internal class Microsoft.Recognizers.Text.Number.Turkish.MergedNumberExtractor : BaseMergedNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, MergedNumberExtractor> Instances;
    [CompilerGeneratedAttribute]
private BaseNumberExtractor <NumberExtractor>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RoundNumberIntegerRegexWithLocks>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <ConnectorRegex>k__BackingField;
    public BaseNumberExtractor NumberExtractor { get; public set; }
    public Regex RoundNumberIntegerRegexWithLocks { get; public set; }
    public Regex ConnectorRegex { get; public set; }
    public MergedNumberExtractor(NumberMode mode, NumberOptions options);
    private static MergedNumberExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual BaseNumberExtractor get_NumberExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NumberExtractor(BaseNumberExtractor value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_RoundNumberIntegerRegexWithLocks();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RoundNumberIntegerRegexWithLocks(Regex value);
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_ConnectorRegex();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectorRegex(Regex value);
    public static MergedNumberExtractor GetInstance(NumberMode mode, NumberOptions options);
}
public class Microsoft.Recognizers.Text.Number.Turkish.NumberExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<ValueTuple`2<NumberMode, NumberOptions>, NumberExtractor> Instances;
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, Regex> <AmbiguityFiltersDict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <NegativeNumberTermsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeReferenceRegex>k__BackingField;
    public NumberOptions Options { get; }
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected ImmutableDictionary`2<Regex, Regex> AmbiguityFiltersDict { get; }
    protected string ExtractType { get; }
    protected Regex NegativeNumberTermsRegex { get; }
    protected Regex AmbiguousFractionConnectorsRegex { get; }
    protected Regex RelativeReferenceRegex { get; }
    private NumberExtractor(NumberMode mode, NumberOptions options);
    private static NumberExtractor();
    [CompilerGeneratedAttribute]
public sealed virtual NumberOptions get_Options();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual ImmutableDictionary`2<Regex, Regex> get_AmbiguityFiltersDict();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_NegativeNumberTermsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_RelativeReferenceRegex();
    public static NumberExtractor GetInstance(NumberMode mode, NumberOptions options);
}
public class Microsoft.Recognizers.Text.Number.Turkish.NumberRangeExtractor : BaseNumberRangeExtractor {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, string> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    internal ImmutableDictionary`2<Regex, string> Regexes { get; }
    internal Regex AmbiguousFractionConnectorsRegex { get; }
    protected string ExtractType { get; }
    public NumberRangeExtractor(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, string> get_Regexes();
    [CompilerGeneratedAttribute]
internal sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
}
public class Microsoft.Recognizers.Text.Number.Turkish.OrdinalExtractor : BaseNumberExtractor {
    private static RegexOptions RegexFlags;
    private static ConcurrentDictionary`2<string, OrdinalExtractor> Instances;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<Regex, TypeTag> <Regexes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractType>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <AmbiguousFractionConnectorsRegex>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <RelativeReferenceRegex>k__BackingField;
    internal ImmutableDictionary`2<Regex, TypeTag> Regexes { get; }
    protected string ExtractType { get; }
    protected Regex AmbiguousFractionConnectorsRegex { get; }
    protected Regex RelativeReferenceRegex { get; }
    private OrdinalExtractor(BaseNumberOptionsConfiguration config);
    private static OrdinalExtractor();
    [CompilerGeneratedAttribute]
internal sealed virtual ImmutableDictionary`2<Regex, TypeTag> get_Regexes();
    [CompilerGeneratedAttribute]
protected sealed virtual string get_ExtractType();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_AmbiguousFractionConnectorsRegex();
    [CompilerGeneratedAttribute]
protected sealed virtual Regex get_RelativeReferenceRegex();
    public static OrdinalExtractor GetInstance(BaseNumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.Turkish.PercentageExtractor : BasePercentageExtractor {
    [CompilerGeneratedAttribute]
private NumberOptions <Options>k__BackingField;
    protected NumberOptions Options { get; }
    public PercentageExtractor(NumberOptions options);
    [CompilerGeneratedAttribute]
protected virtual NumberOptions get_Options();
    protected virtual ImmutableHashSet`1<Regex> InitRegexes();
}
public class Microsoft.Recognizers.Text.Number.Turkish.TurkishNumberParserConfiguration : BaseNumberParserConfiguration {
    private static RegexOptions RegexFlags;
    [CompilerGeneratedAttribute]
private string <NonDecimalSeparatorText>k__BackingField;
    public string NonDecimalSeparatorText { get; private set; }
    public TurkishNumberParserConfiguration(INumberOptionsConfiguration config);
    [CompilerGeneratedAttribute]
public string get_NonDecimalSeparatorText();
    [CompilerGeneratedAttribute]
private void set_NonDecimalSeparatorText(string value);
    public virtual IEnumerable`1<string> NormalizeTokenSet(IEnumerable`1<string> tokens, ParseResult context);
}
public class Microsoft.Recognizers.Text.Number.Turkish.TurkishNumberRangeParserConfiguration : BaseNumberRangeParserConfiguration {
    private static RegexOptions RegexFlags;
    public TurkishNumberRangeParserConfiguration(INumberOptionsConfiguration config);
}
public class Microsoft.Recognizers.Text.Number.TypeTag : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public string Name { get; }
    public int Priority { get; }
    public TypeTag(string name, int priority);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public int get_Priority();
}
