public static class Microsoft.Recognizers.Text.Constants : object {
    public static int InvalidIndex;
    public static int MaxRegexTimeoutInSeconds;
}
public class Microsoft.Recognizers.Text.Culture : object {
    public static string Arabic;
    public static string English;
    public static string EnglishOthers;
    public static string Chinese;
    public static string Spanish;
    public static string SpanishMexican;
    public static string Portuguese;
    public static string French;
    public static string German;
    public static string Italian;
    public static string Japanese;
    public static string Dutch;
    public static string Korean;
    public static string Swedish;
    public static string Bulgarian;
    public static string Turkish;
    public static string Hindi;
    public static Culture[] SupportedCultures;
    private static String[] SupportedCultureCodes;
    [CompilerGeneratedAttribute]
private string <CultureName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CultureCode>k__BackingField;
    public string CultureName { get; private set; }
    public string CultureCode { get; private set; }
    private Culture(string cultureName, string cultureCode);
    private static Culture();
    [CompilerGeneratedAttribute]
public string get_CultureName();
    [CompilerGeneratedAttribute]
private void set_CultureName(string value);
    [CompilerGeneratedAttribute]
public string get_CultureCode();
    [CompilerGeneratedAttribute]
private void set_CultureCode(string value);
    public static String[] GetSupportedCultureCodes();
    public static string MapToNearestLanguage(string cultureCode);
}
public class Microsoft.Recognizers.Text.ExtendedModelResult : ModelResult {
    public static string ParentTextKey;
    [CompilerGeneratedAttribute]
private string <ParentText>k__BackingField;
    public string ParentText { get; public set; }
    public ExtendedModelResult(ModelResult modelResult);
    private static ExtendedModelResult();
    [CompilerGeneratedAttribute]
public string get_ParentText();
    [CompilerGeneratedAttribute]
public void set_ParentText(string value);
}
public class Microsoft.Recognizers.Text.ExtractResult : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private Metadata <Metadata>k__BackingField;
    public Nullable`1<int> Start { get; public set; }
    public Nullable`1<int> Length { get; public set; }
    public string Text { get; public set; }
    public string Type { get; public set; }
    public object Data { get; public set; }
    public Metadata Metadata { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public object get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(object value);
    [CompilerGeneratedAttribute]
public Metadata get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(Metadata value);
    public sealed virtual ExtractResult Clone();
}
public interface Microsoft.Recognizers.Text.IConfiguration {
    public string Culture { get; }
    public abstract virtual string get_Culture();
}
public interface Microsoft.Recognizers.Text.IExtractor {
    public abstract virtual List`1<ExtractResult> Extract(string input);
}
public interface Microsoft.Recognizers.Text.IModel {
    public string ModelTypeName { get; }
    public string Culture { get; }
    public string RequestedCulture { get; }
    public abstract virtual string get_ModelTypeName();
    public abstract virtual string get_Culture();
    public abstract virtual string get_RequestedCulture();
    public abstract virtual List`1<ModelResult> Parse(string query);
    public abstract virtual void SetCultureInfo(string culture, string requestedCulture);
}
public interface Microsoft.Recognizers.Text.InternalCache.ICloneableType`1 {
    public abstract virtual T Clone();
}
public class Microsoft.Recognizers.Text.InternalCache.ResultsCache`1 : object {
    private static long BaseCacheSize;
    private static double CompactionPercentage;
    private static MemoryCacheEntryOptions CacheEntryOptions;
    private IMemoryCache resultsCache;
    public ResultsCache`1(int ratioFactor);
    private static ResultsCache`1();
    public List`1<TItem> GetOrCreate(object key, Func`1<List`1<TItem>> createItem);
}
public interface Microsoft.Recognizers.Text.IParser {
    public abstract virtual ParseResult Parse(ExtractResult extResult);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Recognizers.Text.Matcher.AaNode`1 : Node`1<T> {
    [CompilerGeneratedAttribute]
private T <Word>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private AaNode`1<T> <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private AaNode`1<T> <Fail>k__BackingField;
    public T Word { get; public set; }
    public int Depth { get; public set; }
    public AaNode`1<T> Parent { get; public set; }
    public AaNode`1<T> Fail { get; public set; }
    public AaNode`1<T> Item { get; public set; }
    public AaNode`1(T c, int depth);
    public AaNode`1(T c, int depth, AaNode`1<T> parent);
    [CompilerGeneratedAttribute]
public T get_Word();
    [CompilerGeneratedAttribute]
public void set_Word(T value);
    [CompilerGeneratedAttribute]
public int get_Depth();
    [CompilerGeneratedAttribute]
public void set_Depth(int value);
    [CompilerGeneratedAttribute]
public AaNode`1<T> get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(AaNode`1<T> value);
    [CompilerGeneratedAttribute]
public AaNode`1<T> get_Fail();
    [CompilerGeneratedAttribute]
public void set_Fail(AaNode`1<T> value);
    public AaNode`1<T> get_Item(T c);
    public void set_Item(T c, AaNode`1<T> value);
    public IEnumerator`1<AaNode`1<T>> GetEnumerator();
    public virtual string ToString();
}
public abstract class Microsoft.Recognizers.Text.Matcher.AbstractMatcher`1 : object {
    public abstract virtual void Init(IEnumerable`1[] values, String[] ids);
    public abstract virtual IEnumerable`1<MatchResult`1<T>> Find(IEnumerable`1<T> queryText);
    public abstract virtual void Insert(IEnumerable`1<T> value, string id);
    public bool IsMatch(IEnumerable`1<T> queryText);
    protected void BatchInsert(IEnumerable`1[] values, String[] ids);
    protected void ConvertDictToList(Node`1<T> node);
}
public class Microsoft.Recognizers.Text.Matcher.AcAutomaton`1 : AbstractMatcher`1<T> {
    [CompilerGeneratedAttribute]
private AaNode`1<T> <Root>k__BackingField;
    protected AaNode`1<T> Root { get; private set; }
    [CompilerGeneratedAttribute]
protected AaNode`1<T> get_Root();
    [CompilerGeneratedAttribute]
private void set_Root(AaNode`1<T> value);
    public virtual void Insert(IEnumerable`1<T> value, string id);
    public virtual void Init(IEnumerable`1[] values, String[] ids);
    [IteratorStateMachineAttribute("Microsoft.Recognizers.Text.Matcher.AcAutomaton`1/<Find>d__7")]
public virtual IEnumerable`1<MatchResult`1<T>> Find(IEnumerable`1<T> queryText);
}
public interface Microsoft.Recognizers.Text.Matcher.IMatcher`1 {
    public abstract virtual void Init(IEnumerable`1[] values, String[] ids);
    public abstract virtual IEnumerable`1<MatchResult`1<T>> Find(IEnumerable`1<T> queryText);
}
public interface Microsoft.Recognizers.Text.Matcher.ITokenizer {
    public abstract virtual List`1<Token> Tokenize(string input);
}
public class Microsoft.Recognizers.Text.Matcher.MatchResult`1 : object {
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <CanonicalValues>k__BackingField;
    public int Start { get; public set; }
    public int Length { get; public set; }
    public int End { get; }
    public T Text { get; public set; }
    public HashSet`1<string> CanonicalValues { get; public set; }
    public MatchResult`1(int start, int length);
    public MatchResult`1(int start, int length, HashSet`1<string> ids);
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
    public int get_End();
    [CompilerGeneratedAttribute]
public T get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(T value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_CanonicalValues();
    [CompilerGeneratedAttribute]
public void set_CanonicalValues(HashSet`1<string> value);
}
public enum Microsoft.Recognizers.Text.Matcher.MatchStrategy : Enum {
    public int value__;
    public static MatchStrategy AcAutomaton;
    public static MatchStrategy TrieTree;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Recognizers.Text.Matcher.Node`1 : object {
    [CompilerGeneratedAttribute]
private HashSet`1<string> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<T, Node`1<T>> <Children>k__BackingField;
    public bool End { get; }
    public HashSet`1<string> Values { get; public set; }
    public Dictionary`2<T, Node`1<T>> Children { get; public set; }
    public Node`1<T> Item { get; public set; }
    public bool get_End();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<T, Node`1<T>> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(Dictionary`2<T, Node`1<T>> value);
    public Node`1<T> get_Item(T c);
    public void set_Item(T c, Node`1<T> value);
    public IEnumerator`1<Node`1<T>> GetEnumerator();
    public void AddValue(string value);
}
public class Microsoft.Recognizers.Text.Matcher.NumberWithUnitTokenizer : SimpleTokenizer {
    private static HashSet`1<char> SpecialTokenCharacters;
    private static NumberWithUnitTokenizer();
    public virtual List`1<Token> Tokenize(string input);
    private bool IsSplittableUnit(char curChar, char preChar);
}
public class Microsoft.Recognizers.Text.Matcher.SimpleTokenizer : object {
    public static bool IsChinese(char c);
    public static bool IsJapanese(char c);
    public static bool IsKorean(char c);
    public static bool IsCjk(char c);
    public virtual List`1<Token> Tokenize(string input);
}
public class Microsoft.Recognizers.Text.Matcher.StringMatcher : object {
    private ITokenizer tokenizer;
    [CompilerGeneratedAttribute]
private IMatcher`1<string> <Matcher>k__BackingField;
    private IMatcher`1<string> Matcher { get; }
    public StringMatcher(MatchStrategy matchStrategy, ITokenizer tokenizer);
    [CompilerGeneratedAttribute]
private IMatcher`1<string> get_Matcher();
    public void Init(IEnumerable`1<string> values);
    public void Init(IEnumerable`1<string> values, String[] ids);
    public void Init(Dictionary`2<string, List`1<string>> valuesDictionary);
    public void Init(IEnumerable`1[] tokenizedValues, String[] ids);
    public IEnumerable`1<MatchResult`1<string>> Find(IEnumerable`1<string> tokenizedQuery);
    [IteratorStateMachineAttribute("Microsoft.Recognizers.Text.Matcher.StringMatcher/<Find>d__10")]
public IEnumerable`1<MatchResult`1<string>> Find(string queryText);
    private IEnumerable`1[] GetTokenizedText(IEnumerable`1<string> values);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <GetTokenizedText>b__11_0(string t);
}
public class Microsoft.Recognizers.Text.Matcher.Token : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public string Text { get; public set; }
    public int Start { get; private set; }
    public int Length { get; private set; }
    public int End { get; }
    public Token(int s, int l);
    public Token(int s, int l, string t);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
private void set_Start(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    public int get_End();
}
public class Microsoft.Recognizers.Text.Matcher.TrieTree`1 : AbstractMatcher`1<T> {
    [CompilerGeneratedAttribute]
private Node`1<T> <Root>k__BackingField;
    protected Node`1<T> Root { get; private set; }
    [CompilerGeneratedAttribute]
protected Node`1<T> get_Root();
    [CompilerGeneratedAttribute]
private void set_Root(Node`1<T> value);
    public virtual void Insert(IEnumerable`1<T> value, string id);
    public virtual void Init(IEnumerable`1[] values, String[] ids);
    [IteratorStateMachineAttribute("Microsoft.Recognizers.Text.Matcher.TrieTree`1/<Find>d__7")]
public virtual IEnumerable`1<MatchResult`1<T>> Find(IEnumerable`1<T> queryText);
}
public class Microsoft.Recognizers.Text.Metadata : object {
    [CompilerGeneratedAttribute]
private bool <PossiblyIncludePeriodEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDurationWithAgoAndLater>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHoliday>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHolidayRange>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHolidayWeekend>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOrdinalRelative>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasMod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HolidayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativeTo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMealtime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TreatAsInteger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDurationDateWithWeekday>k__BackingField;
    public bool PossiblyIncludePeriodEnd { get; public set; }
    public bool IsDurationWithAgoAndLater { get; public set; }
    public bool IsHoliday { get; public set; }
    public bool IsHolidayRange { get; public set; }
    public bool IsHolidayWeekend { get; public set; }
    public bool IsOrdinalRelative { get; public set; }
    public bool HasMod { get; public set; }
    public string Offset { get; public set; }
    public string HolidayName { get; public set; }
    public string RelativeTo { get; public set; }
    public bool IsMealtime { get; public set; }
    public bool TreatAsInteger { get; public set; }
    public bool IsDurationDateWithWeekday { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_PossiblyIncludePeriodEnd();
    [CompilerGeneratedAttribute]
public void set_PossiblyIncludePeriodEnd(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDurationWithAgoAndLater();
    [CompilerGeneratedAttribute]
public void set_IsDurationWithAgoAndLater(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsHoliday();
    [CompilerGeneratedAttribute]
public void set_IsHoliday(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsHolidayRange();
    [CompilerGeneratedAttribute]
public void set_IsHolidayRange(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsHolidayWeekend();
    [CompilerGeneratedAttribute]
public void set_IsHolidayWeekend(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsOrdinalRelative();
    [CompilerGeneratedAttribute]
public void set_IsOrdinalRelative(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasMod();
    [CompilerGeneratedAttribute]
public void set_HasMod(bool value);
    [CompilerGeneratedAttribute]
public string get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(string value);
    [CompilerGeneratedAttribute]
public string get_HolidayName();
    [CompilerGeneratedAttribute]
public void set_HolidayName(string value);
    [CompilerGeneratedAttribute]
public string get_RelativeTo();
    [CompilerGeneratedAttribute]
public void set_RelativeTo(string value);
    [CompilerGeneratedAttribute]
public bool get_IsMealtime();
    [CompilerGeneratedAttribute]
public void set_IsMealtime(bool value);
    [CompilerGeneratedAttribute]
public bool get_TreatAsInteger();
    [CompilerGeneratedAttribute]
public void set_TreatAsInteger(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDurationDateWithWeekday();
    [CompilerGeneratedAttribute]
public void set_IsDurationDateWithWeekday(bool value);
    public Metadata Clone();
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.Recognizers.Text.ModelFactory`1 : Dictionary`2<ValueTuple`2<string, Type>, Func`2<TModelOptions, IModel>> {
    private static string FallbackCulture;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<ValueTuple`3<string, Type, string>, IModel> cache;
    private static ModelFactory`1();
    public T GetModel(string culture, bool fallbackToDefaultCulture, TModelOptions options);
    public void Add(ValueTuple`2<string, Type> config, Func`2<TModelOptions, IModel> modelCreator);
    public void InitializeModels(string targetCulture, TModelOptions options);
    private static ValueTuple`2<string, Type> GenerateKey(string culture, Type modelType);
    private void InitializeModel(Type modelType, string culture, TModelOptions options);
    private bool TryGetModel(string culture, TModelOptions options, T& model);
    private bool TryGetModel(Type modelType, string reqCulture, TModelOptions options, IModel& model);
}
public class Microsoft.Recognizers.Text.ModelResult : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedDictionary`2<string, object> <Resolution>k__BackingField;
    public string Text { get; public set; }
    public int Start { get; public set; }
    public int End { get; public set; }
    public string TypeName { get; public set; }
    public SortedDictionary`2<string, object> Resolution { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(int value);
    [CompilerGeneratedAttribute]
public int get_End();
    [CompilerGeneratedAttribute]
public void set_End(int value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public SortedDictionary`2<string, object> get_Resolution();
    [CompilerGeneratedAttribute]
public void set_Resolution(SortedDictionary`2<string, object> value);
}
public class Microsoft.Recognizers.Text.ParseResult : ExtractResult {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResolutionStr>k__BackingField;
    public object Value { get; public set; }
    public string ResolutionStr { get; public set; }
    public ParseResult(ExtractResult er);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public string get_ResolutionStr();
    [CompilerGeneratedAttribute]
public void set_ResolutionStr(string value);
}
public abstract class Microsoft.Recognizers.Text.Recognizer`1 : object {
    private static IDictionary`2<Type, int> TimeoutDictionary;
    private static object _locker;
    private ModelFactory`1<TRecognizerOptions> factory;
    [CompilerGeneratedAttribute]
private string <TargetCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private TRecognizerOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeoutInSeconds>k__BackingField;
    public string TargetCulture { get; private set; }
    public TRecognizerOptions Options { get; private set; }
    protected int TimeoutInSeconds { get; }
    protected Recognizer`1(string targetCulture, TRecognizerOptions options, bool lazyInitialization, int timeout);
    private static Recognizer`1();
    [CompilerGeneratedAttribute]
public string get_TargetCulture();
    [CompilerGeneratedAttribute]
private void set_TargetCulture(string value);
    [CompilerGeneratedAttribute]
public TRecognizerOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(TRecognizerOptions value);
    [CompilerGeneratedAttribute]
protected int get_TimeoutInSeconds();
    public static TRecognizerOptions GetOptions(int value);
    public static TimeSpan GetTimeout(Type type);
    protected abstract virtual List`1<Type> GetRelatedTypes();
    protected T GetModel(string culture, bool fallbackToDefaultCulture);
    protected void RegisterModel(string culture, Func`2<TRecognizerOptions, IModel> modelCreator);
    protected abstract virtual void InitializeConfiguration();
    private void InitializeModels(string targetCulture, TRecognizerOptions options);
    private void AddRegexTimeoutValuesForType();
    [CompilerGeneratedAttribute]
private void <AddRegexTimeoutValuesForType>b__22_0(Type t);
}
public static class Microsoft.Recognizers.Text.ResolutionKey : object {
    public static string ValueSet;
    public static string Value;
    public static string Type;
    public static string Unit;
    public static string Score;
    public static string IsoCurrency;
    public static string SubType;
    public static string Offset;
    public static string RelativeTo;
}
public class Microsoft.Recognizers.Text.Utilities.ConditionalMatch : object {
    [CompilerGeneratedAttribute]
private Match <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    public Match Match { get; }
    public bool Success { get; }
    public int Index { get; }
    public int Length { get; }
    public string Value { get; }
    public GroupCollection Groups { get; }
    public ConditionalMatch(Match match, bool success);
    [CompilerGeneratedAttribute]
public Match get_Match();
    [CompilerGeneratedAttribute]
public bool get_Success();
    public int get_Index();
    public int get_Length();
    public string get_Value();
    public GroupCollection get_Groups();
}
public static class Microsoft.Recognizers.Text.Utilities.EnumUtils : object {
    public static bool IsFlagDefined(Enum en);
    public static T Convert(int value);
}
public static class Microsoft.Recognizers.Text.Utilities.QueryProcessor : object {
    private static string CaseSensitiveTerms;
    private static Regex SpecialTokensRegex;
    private static QueryProcessor();
    public static string Preprocess(string query, bool caseSensitive, bool recode);
    public static string ToLowerTermSensitive(string input);
    public static string RemoveDiacritics(string query);
    private static void ReApplyValue(int idx, StringBuilder& outString, string value);
}
[ExtensionAttribute]
public static class Microsoft.Recognizers.Text.Utilities.RegExpUtility : object {
    private static string NameGroup;
    private static int index;
    public static List`1<string> GetMatches(Regex regex, string input);
    [ExtensionAttribute]
public static bool IsExactMatch(Regex regex, string text, bool trim);
    [ExtensionAttribute]
public static ConditionalMatch MatchExact(Regex regex, string text, bool trim);
    public static bool IsNullOrEmpty(ReadOnlySpan`1<char> span);
    [ExtensionAttribute]
public static ConditionalMatch MatchEnd(Regex regex, string text, bool trim);
    [ExtensionAttribute]
public static ConditionalMatch MatchBegin(Regex regex, string text, bool trim);
    [ExtensionAttribute]
public static ConditionalMatch MatchesBegin(Regex regex, string text, bool trim);
    public static String[] Split(Regex regex, string source);
    private static string SanitizeGroups(string source);
    private static string ReplaceMatchGroup(Match match);
}
public static class Microsoft.Recognizers.Text.Utilities.ResultsProcessor : object {
    public static void UpdateUnicodeOffsets(string query, List`1& results);
}
