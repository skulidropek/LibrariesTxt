internal static class AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
    public static int MinorVersion;
    public static int BuildVersion;
    public static int SPLevel;
    public static string ProductVersionString;
    public static string ProductNameString;
    public static string SqlEngineUsageMetricsRoleGuidString;
    public static string ProductNameBrandingString;
    public static string LongProductNameBrandingString;
    public static string ProductNameShortcutBrandingString;
    public static string VersionLocationString;
    public static string ProductVersionLocationString;
    public static string VersionHelpKeywordPrefix;
    public static string VersionHelpSettingsToken;
    public static string SetupSupportFolder;
    public static string ProductLicenseFile;
    public static string ProductUpdateCategory;
    public static string SqlProductFamilyCode;
    public static string ProductDiscoveryId;
    public static string SqlInstanceIDPrefix;
    public static string AsInstanceIDPrefix;
    public static string RsInstanceIDPrefix;
    public static string MaxMaintenanceVersion;
    public static UInt32 evalTimeBombValue;
    public static UInt32 currentReleaseTimeBombValue;
    public static string WerEventNameSetupMsi;
    public static string WerEventNameSetupConfig;
    public static string ASUsageMetricsRoleGuidString;
    public static string VersionBIDSHelpNamespace;
    public static string VisualStudioShellVersion;
    public static string VersionHelpNamespace { get; }
    public static string get_VersionHelpNamespace();
}
internal static class Microsoft.Reporting.AssemblyVersion : object {
    private static string m_informationalVersion;
    public static string InformationalVersion { get; }
    private static AssemblyVersion();
    public static string get_InformationalVersion();
}
internal class Microsoft.Reporting.CachedStream : object {
    private Stream m_stream;
    private Encoding m_encoding;
    private string m_mimeType;
    private string m_fileExtension;
    public Stream Stream { get; }
    public Encoding Encoding { get; }
    public string MimeType { get; }
    public string FileExtension { get; }
    public CachedStream(Stream stream, Encoding encoding, string mimeType, string fileExtension);
    public static Stream Extract(CachedStream cachedStream, String& encoding, String& mimeType, String& fileExtension);
    public sealed virtual void Dispose();
    public Stream get_Stream();
    public Encoding get_Encoding();
    public string get_MimeType();
    public string get_FileExtension();
}
internal static class Microsoft.Reporting.Common.EmbeddedResources : object {
    public static Byte[] Get(ResourceList list, string name, String& mimeType);
    public static Stream GetStream(ResourceList list, string name, String& mimeType);
}
internal class Microsoft.Reporting.Common.ResourceItem : object {
    private string m_name;
    private string m_debugName;
    private string m_mimeType;
    internal string EffectiveName { get; }
    private static bool IsDebuggingEnabled { get; }
    internal string MimeType { get; }
    internal ResourceItem(string name, string debugName, string mimeType);
    internal ResourceItem(string name, string mimeType);
    internal string get_EffectiveName();
    private static bool get_IsDebuggingEnabled();
    internal string get_MimeType();
}
internal class Microsoft.Reporting.Common.ResourceList : object {
    private static string DebugTag;
    public static string MimeTypeImage;
    public static string MimeTypeImagePng;
    public static string MimeTypeScript;
    public static string MimeTypeStyle;
    public static string MimeTypeHtml;
    private Dictionary`2<string, ResourceItem> m_items;
    internal void Add(string name, string mimeType);
    internal void Add(string name, string mimeType, bool hasDebugMode);
    internal bool TryGetResourceItem(string name, ResourceItem& item);
}
[CompilerGeneratedAttribute]
internal class Microsoft.Reporting.CommonStrings : object {
    public static CultureInfo Culture { get; public set; }
    public static string Report { get; }
    public static string MissingReportSource { get; }
    public static string ReportNotReady { get; }
    public static string NonClsCompliantException { get; }
    public static string MissingDataSourceCredentials { get; }
    public static string NotInDrillthrough { get; }
    public static string LocalProcessingErrors { get; }
    public static string LocalModeMissingFullTrustErrors { get; }
    public static string ClientRenderingErrors { get; }
    public static string ToolBarCategoryDesc { get; }
    public static string ReportViewerDescription { get; }
    public static string ProcessingModeDesc { get; }
    public static string LocalReportDesc { get; }
    public static string ServerReportDesc { get; }
    public static string DocMapCollapsedDesc { get; }
    public static string PromptAreaCollapsedDesc { get; }
    public static string ShowParameterPromptsDesc { get; }
    public static string ShowCredentialPromptsDesc { get; }
    public static string ShowToolBarDesc { get; }
    public static string ShowProgressDesc { get; }
    public static string ShowContextMenuDesc { get; }
    public static string ShowDocumentMapButtonDesc { get; }
    public static string ShowPromptAreaButtonDesc { get; }
    public static string ShowPageNavigationDesc { get; }
    public static string ShowBackButtonDesc { get; }
    public static string ShowStopButtonDesc { get; }
    public static string ShowRefreshButtonDesc { get; }
    public static string ShowPrintButtonDesc { get; }
    public static string ShowExportButtonDesc { get; }
    public static string ShowZoomButtonDesc { get; }
    public static string ShowFindButtonDesc { get; }
    public static string PageCountModeDesc { get; }
    public static string ZoomModeDesc { get; }
    public static string ZoomPercentDesc { get; }
    public static string ZoomEventDesc { get; }
    public static string PageNavigationEventDesc { get; }
    public static string ExportEventDesc { get; }
    public static string RefreshEventDesc { get; }
    public static string PrintEventDesc { get; }
    public static string BackEventDesc { get; }
    public static string BookmarkEventDesc { get; }
    public static string ToggleEventDesc { get; }
    public static string DrillthroughEventDesc { get; }
    public static string ViewReportEventDesc { get; }
    public static string SortEventDesc { get; }
    public static string HyperlinkEventDesc { get; }
    public static string DocMapEventDesc { get; }
    public static string RenderCompleteEventDesc { get; }
    public static string RenderBeginEventDesc { get; }
    public static string SearchEventDesc { get; }
    public static string ErrorEventDesc { get; }
    public static string StateChangedEventDesc { get; }
    public static string DisplayNameDesc { get; }
    public static string ReportServerUrlDesc { get; }
    public static string ServerReportPathDesc { get; }
    public static string HistoryIdDesc { get; }
    public static string ServerTimeoutDesc { get; }
    public static string LocalReportPathDesc { get; }
    public static string ReportDataSourcesDesc { get; }
    public static string EnableExternalImagesDesc { get; }
    public static string EnableHyperlinksDesc { get; }
    public static string ReportEmbeddedResourceDesc { get; }
    public static string SubreportProcessingEventDesc { get; }
    public static string ShowReportBodyDesc { get; }
    public static string DocMapWidthDesc { get; }
    public static string AsyncRenderingDesc { get; }
    public static string WaitControlDisplayAfterDesc { get; }
    public static string ShowWaitControlCancelLinkDesc { get; }
    public static string HyperlinkTargetDesc { get; }
    public static string WaitMessageFontDesc { get; }
    public static string InternalBorderStyleDesc { get; }
    public static string InternalBorderColorDesc { get; }
    public static string InternalBorderWidthDesc { get; }
    public static string ToolBarItemBorderStyleDesc { get; }
    public static string ToolBarItemBorderColorDesc { get; }
    public static string ToolBarItemBorderWidthDesc { get; }
    public static string ToolBarItemHoverBackColorDesc { get; }
    public static string LinkDisabledColorDesc { get; }
    public static string LinkActiveColorDesc { get; }
    public static string LinkActiveHoverColorDesc { get; }
    public static string ContentDispositionDesc { get; }
    public static string DocMapWidthFixedDesc { get; }
    public static string SizeToContentDesc { get; }
    public static string InteractivityPostBackModeDesc { get; }
    public static string KeepSessionAliveDesc { get; }
    public static string SubmittingDataSourceCredentialsEventDesc { get; }
    public static string SubmittingParameterValuesEventDesc { get; }
    public static string PageSettingsChangedEventDesc { get; }
    public static string KeepSessionAliveException { get; }
    public static string ReportNotReadyException { get; }
    public static string PrintingBegingEventDesc { get; }
    public static string ShowDetailedSubreportMessagesDesc { get; }
    public static string AsyncProgressText { get; }
    public static string CancelLinkText { get; }
    public static string UnsupportedReportServerError { get; }
    public static string MapTileServerConfigurationDesc { get; }
    public static string MapTileServerConfigurationMaxConnectionsDesc { get; }
    public static string MapTileServerConfigurationTimeoutDesc { get; }
    public static string MapTileServerConfigurationAppIDDesc { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_Report();
    public static string get_MissingReportSource();
    public static string get_ReportNotReady();
    public static string get_NonClsCompliantException();
    public static string get_MissingDataSourceCredentials();
    public static string get_NotInDrillthrough();
    public static string get_LocalProcessingErrors();
    public static string get_LocalModeMissingFullTrustErrors();
    public static string get_ClientRenderingErrors();
    public static string get_ToolBarCategoryDesc();
    public static string get_ReportViewerDescription();
    public static string get_ProcessingModeDesc();
    public static string get_LocalReportDesc();
    public static string get_ServerReportDesc();
    public static string get_DocMapCollapsedDesc();
    public static string get_PromptAreaCollapsedDesc();
    public static string get_ShowParameterPromptsDesc();
    public static string get_ShowCredentialPromptsDesc();
    public static string get_ShowToolBarDesc();
    public static string get_ShowProgressDesc();
    public static string get_ShowContextMenuDesc();
    public static string get_ShowDocumentMapButtonDesc();
    public static string get_ShowPromptAreaButtonDesc();
    public static string get_ShowPageNavigationDesc();
    public static string get_ShowBackButtonDesc();
    public static string get_ShowStopButtonDesc();
    public static string get_ShowRefreshButtonDesc();
    public static string get_ShowPrintButtonDesc();
    public static string get_ShowExportButtonDesc();
    public static string get_ShowZoomButtonDesc();
    public static string get_ShowFindButtonDesc();
    public static string get_PageCountModeDesc();
    public static string get_ZoomModeDesc();
    public static string get_ZoomPercentDesc();
    public static string get_ZoomEventDesc();
    public static string get_PageNavigationEventDesc();
    public static string get_ExportEventDesc();
    public static string get_RefreshEventDesc();
    public static string get_PrintEventDesc();
    public static string get_BackEventDesc();
    public static string get_BookmarkEventDesc();
    public static string get_ToggleEventDesc();
    public static string get_DrillthroughEventDesc();
    public static string get_ViewReportEventDesc();
    public static string get_SortEventDesc();
    public static string get_HyperlinkEventDesc();
    public static string get_DocMapEventDesc();
    public static string get_RenderCompleteEventDesc();
    public static string get_RenderBeginEventDesc();
    public static string get_SearchEventDesc();
    public static string get_ErrorEventDesc();
    public static string get_StateChangedEventDesc();
    public static string get_DisplayNameDesc();
    public static string get_ReportServerUrlDesc();
    public static string get_ServerReportPathDesc();
    public static string get_HistoryIdDesc();
    public static string get_ServerTimeoutDesc();
    public static string get_LocalReportPathDesc();
    public static string get_ReportDataSourcesDesc();
    public static string get_EnableExternalImagesDesc();
    public static string get_EnableHyperlinksDesc();
    public static string get_ReportEmbeddedResourceDesc();
    public static string get_SubreportProcessingEventDesc();
    public static string get_ShowReportBodyDesc();
    public static string get_DocMapWidthDesc();
    public static string get_AsyncRenderingDesc();
    public static string get_WaitControlDisplayAfterDesc();
    public static string get_ShowWaitControlCancelLinkDesc();
    public static string get_HyperlinkTargetDesc();
    public static string get_WaitMessageFontDesc();
    public static string get_InternalBorderStyleDesc();
    public static string get_InternalBorderColorDesc();
    public static string get_InternalBorderWidthDesc();
    public static string get_ToolBarItemBorderStyleDesc();
    public static string get_ToolBarItemBorderColorDesc();
    public static string get_ToolBarItemBorderWidthDesc();
    public static string get_ToolBarItemHoverBackColorDesc();
    public static string get_LinkDisabledColorDesc();
    public static string get_LinkActiveColorDesc();
    public static string get_LinkActiveHoverColorDesc();
    public static string get_ContentDispositionDesc();
    public static string get_DocMapWidthFixedDesc();
    public static string get_SizeToContentDesc();
    public static string get_InteractivityPostBackModeDesc();
    public static string get_KeepSessionAliveDesc();
    public static string get_SubmittingDataSourceCredentialsEventDesc();
    public static string get_SubmittingParameterValuesEventDesc();
    public static string get_PageSettingsChangedEventDesc();
    public static string get_KeepSessionAliveException();
    public static string get_ReportNotReadyException();
    public static string get_PrintingBegingEventDesc();
    public static string get_ShowDetailedSubreportMessagesDesc();
    public static string get_AsyncProgressText();
    public static string get_CancelLinkText();
    public static string get_UnsupportedReportServerError();
    public static string get_MapTileServerConfigurationDesc();
    public static string get_MapTileServerConfigurationMaxConnectionsDesc();
    public static string get_MapTileServerConfigurationTimeoutDesc();
    public static string get_MapTileServerConfigurationAppIDDesc();
    public static string MissingParameter(string parameterName);
    public static string MissingDataSource(string dataSourceName);
    public static string HyperlinkSecurityError(string reportName);
    public static string ExternalImagesError(string reportName);
    public static string PolicyFileLoadFailed(string policyFileName);
    public static string DeviceInfoInternal(string deviceInfoName);
    public static string ParameterNotFound(string userSpecifiedName);
    public static string ParameterSpecifiedMultipleTimes(string name);
    public static string EstimateTotalPages(int pageCount);
}
internal class Microsoft.Reporting.CreateStreamDelegate : MulticastDelegate {
    public CreateStreamDelegate(object object, IntPtr method);
    public virtual Stream Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual Stream EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.RdlBuildProvider : BuildProvider {
    public CompilerType CodeCompilerType { get; }
    public virtual CompilerType get_CodeCompilerType();
    private void CompileReport();
    public static Byte[] GetStreamBytes(Stream stream);
}
internal class Microsoft.Reporting.RdlCompile : object {
    private String[] m_sources;
    private string m_stateFile;
    private string m_timeStampFile;
    private StateCache m_stateCache;
    private StateCache m_newState;
    private IBuildEngine m_buildEngine;
    public String[] Sources { get; public set; }
    [OutputAttribute]
public string StateFile { get; public set; }
    [OutputAttribute]
public string TimeStampFile { get; public set; }
    public IBuildEngine BuildEngine { get; public set; }
    public ITaskHost HostObject { get; public set; }
    public String[] get_Sources();
    public void set_Sources(String[] value);
    public string get_StateFile();
    public void set_StateFile(string value);
    public string get_TimeStampFile();
    public void set_TimeStampFile(string value);
    public sealed virtual IBuildEngine get_BuildEngine();
    public sealed virtual void set_BuildEngine(IBuildEngine value);
    public sealed virtual ITaskHost get_HostObject();
    public sealed virtual void set_HostObject(ITaskHost value);
    public sealed virtual bool Execute();
    private bool CompileReport(string fileName);
    private void LogMessages(string fileName, ICollection messages);
    private void ReadStateFile();
    private void WriteStateFile();
    private void WriteTimeStampFile();
    private static string FormatString(string unformatted, Object[] args);
    private void LogWarning(string message, Object[] messageArgs);
    private void LogWarning(string subcategory, string warningCode, string helpKeyword, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, Object[] messageArgs);
    public void LogErrorFromException(Exception exception);
    private void LogError(string message, Object[] messageArgs);
    private void LogError(string subcategory, string errorCode, string helpKeyword, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, Object[] messageArgs);
}
internal static class Microsoft.Reporting.ReportViewerUtils : object {
    public static PageSettings DeepClonePageSettings(PageSettings pageSettings);
}
[AttributeUsageAttribute("644")]
internal class Microsoft.Reporting.SRCategoryAttribute : CategoryAttribute {
    private string m_value;
    private string m_key;
    public SRCategoryAttribute(string key);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("900")]
internal class Microsoft.Reporting.SRDescriptionAttribute : DescriptionAttribute {
    private string m_key;
    private bool m_initialized;
    public string Description { get; }
    public SRDescriptionAttribute(string key);
    public virtual string get_Description();
}
internal class Microsoft.Reporting.StreamCache : object {
    private CachedStream m_mainStream;
    private bool m_mainStreamDetached;
    private Dictionary`2<string, CachedStream> m_secondaryStreams;
    private CreateStreamDelegate m_createMainStreamDelegate;
    public StreamCache(CreateStreamDelegate createMainStreamDelegate);
    public sealed virtual void Dispose();
    public void Clear();
    public Stream StreamCallback(string name, string extension, Encoding encoding, string mimeType, bool useChunking, StreamOper operation);
    public Stream GetMainStream(bool detach);
    public Stream GetMainStream(bool detach, String& encoding, String& mimeType, String& fileExtension);
    public Byte[] GetMainStream(String& encoding, String& mimeType, String& fileExtension);
    public Byte[] GetSecondaryStream(bool remove, string name, String& encoding, String& mimeType, String& fileExtension);
    public void MoveSecondaryStreamsTo(StreamCache other);
    private Byte[] StreamToBytes(Stream stream);
    private static Stream DefaultCreateStreamDelegate();
}
internal class Microsoft.Reporting.WebForms.AbortState : object {
    private object m_abortLock;
    private bool m_pendingAbort;
    private HttpWebRequest m_abortableRequest;
    public void AbortRequest();
    public bool RegisterAbortableRequest(HttpWebRequest request);
    public void ClearPendingAbort();
}
internal enum Microsoft.Reporting.WebForms.ActionScrollStyle : Enum {
    public int value__;
    public static ActionScrollStyle AlignedToTopLeft;
    public static ActionScrollStyle MaintainPosition;
    public static ActionScrollStyle SpecificPosition;
    public static ActionScrollStyle AvoidScrolling;
    public static ActionScrollStyle AvoidScrollingFromOrigin;
}
public class Microsoft.Reporting.WebForms.AspNetSessionExpiredException : ReportViewerException {
    private AspNetSessionExpiredException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Reporting.WebForms.AsyncWaitControl : CompositeScriptControl {
    public static int DefaultWaitDelay;
    private static float m_backOpacity;
    private EventHandler`1<ClientCanceledStateChangeEventArgs> ClientCanceledStateChanged;
    private IReportViewerStyles m_styles;
    private int m_delayMillis;
    private WaitControl m_waitControl;
    private HiddenField m_clientCanceled;
    private string m_viewerClientId;
    private string m_viewerFixedTableId;
    private AsyncWaitControlTriggerCollection m_asyncWaitControlTriggerCollection;
    private bool m_skipTimer;
    private string CancelScriptUrl { get; }
    public int DisplayDelayMillis { get; public set; }
    public bool CancelLinkVisible { get; public set; }
    public AsyncWaitControlTriggerCollection Triggers { get; }
    public AsyncWaitControl(IReportViewerStyles styles);
    public void add_ClientCanceledStateChanged(EventHandler`1<ClientCanceledStateChangeEventArgs> value);
    public void remove_ClientCanceledStateChanged(EventHandler`1<ClientCanceledStateChangeEventArgs> value);
    private void SetUpStyles();
    private string get_CancelScriptUrl();
    protected virtual void CreateChildControls();
    private void OnClientCanceledStateChanged(object sender, EventArgs e);
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    public void SetViewerInfo(string viewerClientId, string viewerFixedTableId, bool clientCanceled, bool skipTimer);
    public int get_DisplayDelayMillis();
    public void set_DisplayDelayMillis(int value);
    public bool get_CancelLinkVisible();
    public void set_CancelLinkVisible(bool value);
    public AsyncWaitControlTriggerCollection get_Triggers();
    public virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
}
internal class Microsoft.Reporting.WebForms.AsyncWaitControlTriggerCollection : Collection`1<Control> {
    protected virtual void InsertItem(int index, Control control);
    public String[] ToClientIDArray();
}
internal class Microsoft.Reporting.WebForms.AtomDataFeedGroup : ToolbarGroup {
    private ScriptSwitchImage m_atomDataFeedButton;
    public bool IsSupported { get; }
    public string GroupCssClassName { get; }
    public string LeadingSpace { get; }
    public AtomDataFeedGroup(ReportViewer viewer);
    public bool get_IsSupported();
    public virtual string get_GroupCssClassName();
    protected virtual void CreateChildControls();
    public virtual void AddScriptDescriptorProperties(ScriptControlDescriptor toolbarDesc);
    public virtual string get_LeadingSpace();
}
internal class Microsoft.Reporting.WebForms.AutoPostBackEventArgs : EventArgs {
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WebForms.BackEventArgs : CancelEventArgs {
    private Report m_parentReport;
    public Report ParentReport { get; }
    public BackEventArgs(Report parentReport);
    public Report get_ParentReport();
}
public class Microsoft.Reporting.WebForms.BackEventHandler : MulticastDelegate {
    public BackEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BackEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BackEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.WebForms.BackgroundImageOperation : EmbeddedResourceOperation {
    private static string UrlParamColor;
    public static string CreateUrl(string resourceName, Color color);
    protected virtual Byte[] GetResource(string resourceName, String& mimeType, NameValueCollection urlQuery);
    private static ColorMatrix MultiplyMatrix(ColorMatrix a, ColorMatrix b);
    private static ColorMatrix GrayScaleMatrix();
    private static ColorMatrix ColorScaleMatrix(float r, float g, float b);
}
internal class Microsoft.Reporting.WebForms.BackGroup : ToolbarGroup {
    private ScriptSwitchImage m_backButton;
    public string GroupCssClassName { get; }
    public BackGroup(ReportViewer viewer);
    public virtual string get_GroupCssClassName();
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    private void BackButton_Click(object sender, EventArgs e);
    public virtual void AddScriptDescriptorProperties(ScriptControlDescriptor toolbarDesc);
}
internal abstract class Microsoft.Reporting.WebForms.BaseParameterInputControl : CompositeControl {
    internal static int _TextBoxColumns;
    private EventHandler ValueChanged;
    private EventHandler AutoPostBackOccurred;
    public string NullCheckBoxString;
    protected PostBackCheckBox m_nullCheckBox;
    public string NullValueText;
    private IBrowserDetection m_browserDetection;
    private ReportParameterInfo m_reportParam;
    private bool m_showDefaultValue;
    private bool m_autoPostBack;
    private bool m_disabled;
    private string m_checkBoxCssClass;
    private string m_textBoxCssClass;
    private string m_textBoxDisabledCssClass;
    private Color m_textBoxDisabledColor;
    private bool m_allowNullCheckBoxToWrap;
    private ValidatorPanel m_validatorPanel;
    private BaseValidator m_parameterRequiresValueValidator;
    protected HtmlTextWriterTag TagKey { get; }
    public bool Disabled { get; public set; }
    public bool AutoPostBack { get; public set; }
    public string CheckBoxCssClass { get; public set; }
    public string TextBoxCssClass { get; public set; }
    public string TextBoxDisabledCssClass { get; public set; }
    public Color TextBoxDisabledColor { get; public set; }
    public string ClientEnableFunctionName { get; }
    public bool AllowNullCheckBoxToWrap { get; public set; }
    public bool ShowDefaultValue { get; public set; }
    protected String[] CustomControlIds { get; }
    public string PrimaryFormElementId { get; }
    protected ValidatorPanel Validators { get; }
    protected BaseValidator ParameterRequiresValueValidator { get; }
    public String[] CurrentValue { get; }
    protected String[] CustomControlValue { get; protected set; }
    protected bool CustomControlHasValue { get; }
    internal string ClientObject { get; }
    public string GetClientDisplayValueFunctionCall { get; }
    public ReportParameterInfo ReportParameter { get; }
    protected IBrowserDetection BrowserDetection { get; }
    public BaseParameterInputControl(ReportParameterInfo reportParam, IBrowserDetection browserDetection);
    protected virtual HtmlTextWriterTag get_TagKey();
    public void add_ValueChanged(EventHandler value);
    public void remove_ValueChanged(EventHandler value);
    public void add_AutoPostBackOccurred(EventHandler value);
    public void remove_AutoPostBackOccurred(EventHandler value);
    public bool get_Disabled();
    public void set_Disabled(bool value);
    public virtual bool get_AutoPostBack();
    public virtual void set_AutoPostBack(bool value);
    public virtual string get_CheckBoxCssClass();
    public virtual void set_CheckBoxCssClass(string value);
    public virtual string get_TextBoxCssClass();
    public virtual void set_TextBoxCssClass(string value);
    public string get_TextBoxDisabledCssClass();
    public void set_TextBoxDisabledCssClass(string value);
    public Color get_TextBoxDisabledColor();
    public void set_TextBoxDisabledColor(Color value);
    protected void ApplyStylesToTextBox(TextBox textBox);
    public string get_ClientEnableFunctionName();
    public bool get_AllowNullCheckBoxToWrap();
    public void set_AllowNullCheckBoxToWrap(bool value);
    protected void WriteNullCheckBoxSpacer(HtmlTextWriter writer);
    protected virtual bool OnBubbleEvent(object source, EventArgs args);
    public bool get_ShowDefaultValue();
    public void set_ShowDefaultValue(bool value);
    protected virtual void OnInit(EventArgs e);
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    protected void RenderNullCheckBox(HtmlTextWriter writer);
    protected virtual void Render(HtmlTextWriter writer);
    public abstract virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    public sealed virtual IEnumerable`1<ScriptReference> GetScriptReferences();
    protected void AddBaseDescriptorProperties(ScriptControlDescriptor desc);
    protected abstract virtual String[] get_CustomControlIds();
    public abstract virtual string get_PrimaryFormElementId();
    protected ValidatorPanel get_Validators();
    protected BaseValidator get_ParameterRequiresValueValidator();
    public void AddValidator(BaseValidator validator);
    public BaseValidator AddParameterRquiresValueValidator();
    protected abstract virtual BaseValidator CreateParameterRequiresValueValidator();
    protected abstract virtual void SetCustomControlEnableState(bool enabled);
    protected void OnValueChanged(object sender, EventArgs e);
    protected void OnCustomControlChanged(object sender, EventArgs e);
    protected void CreateNullCheckBox();
    public String[] get_CurrentValue();
    public void SetValue(String[] val);
    protected abstract virtual String[] get_CustomControlValue();
    protected abstract virtual void set_CustomControlValue(String[] value);
    protected abstract virtual bool get_CustomControlHasValue();
    internal string get_ClientObject();
    public string get_GetClientDisplayValueFunctionCall();
    public ReportParameterInfo get_ReportParameter();
    public string GetLabelForValidValue(ValidValue vv);
    protected IBrowserDetection get_BrowserDetection();
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WebForms.BookmarkNavigationEventArgs : CancelEventArgs {
    private string m_bookmarkId;
    public string BookmarkId { get; }
    public BookmarkNavigationEventArgs(string bookmarkId);
    public string get_BookmarkId();
}
public class Microsoft.Reporting.WebForms.BookmarkNavigationEventHandler : MulticastDelegate {
    public BookmarkNavigationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BookmarkNavigationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BookmarkNavigationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.WebForms.BooleanParameterControl : BooleanParameterInputControl {
    unknown String[] CustomControlValue {protected set; }
    public BooleanParameterControl(ReportParameterInfo reportParam, IBrowserDetection browserDetection);
    protected virtual void set_CustomControlValue(String[] value);
}
internal class Microsoft.Reporting.WebForms.BooleanParameterInputControl : BaseParameterInputControl {
    public string TrueValueText;
    public string FalseValueText;
    protected PostBackRadioButton m_trueButton;
    protected PostBackRadioButton m_falseButton;
    protected String[] CustomControlIds { get; }
    public string PrimaryFormElementId { get; }
    protected String[] CustomControlValue { get; protected set; }
    protected bool CustomControlHasValue { get; }
    unknown bool AutoPostBack {public set; }
    public BooleanParameterInputControl(ReportParameterInfo reportParam, IBrowserDetection browserDetection);
    protected virtual String[] get_CustomControlIds();
    public virtual string get_PrimaryFormElementId();
    protected virtual void CreateChildControls();
    protected virtual BaseValidator CreateParameterRequiresValueValidator();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void RenderContents(HtmlTextWriter writer);
    private PostBackRadioButton CreateRadioButton(string unencodedText, string id);
    protected virtual String[] get_CustomControlValue();
    protected virtual void set_CustomControlValue(String[] value);
    protected virtual bool get_CustomControlHasValue();
    public virtual void set_AutoPostBack(bool value);
    protected virtual void SetCustomControlEnableState(bool enabled);
    public virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
}
internal class Microsoft.Reporting.WebForms.BooleanParamValidator : CustomValidator {
    private RadioButton m_true;
    private RadioButton m_false;
    private string m_functionName;
    private string FunctionName { get; }
    public BooleanParamValidator(RadioButton trueButton, RadioButton falseButton);
    private string get_FunctionName();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual bool OnServerValidate(string value);
    protected virtual void Render(HtmlTextWriter writer);
}
internal class Microsoft.Reporting.WebForms.BrowserDetection : object {
    private static BrowserDetection m_browserDetection;
    public static BrowserDetection Current { get; }
    public bool IsIE { get; }
    public bool IsSafari { get; }
    private static BrowserDetection();
    public static BrowserDetection get_Current();
    public sealed virtual bool get_IsIE();
    public sealed virtual bool get_IsSafari();
}
internal class Microsoft.Reporting.WebForms.BrowserNavigationCorrector : CompositeScriptControl {
    private ReportViewer m_viewer;
    private HiddenField m_scrollPosition;
    private HiddenField m_viewerViewState;
    private UpdatePanel m_updatePanel;
    private HiddenField m_asyncPostBackViewState;
    private HiddenField m_pageState;
    public ReportViewer TargetViewer { get; public set; }
    private bool CorrectionsEnabled { get; }
    public ReportViewer get_TargetViewer();
    public void set_TargetViewer(ReportViewer value);
    protected virtual void CreateChildControls();
    protected virtual void OnInit(EventArgs e);
    protected virtual void OnLoad(EventArgs e);
    private void OnPreRenderComplete(object sender, EventArgs e);
    private bool get_CorrectionsEnabled();
    public virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    public virtual IEnumerable`1<ScriptReference> GetScriptReferences();
}
internal class Microsoft.Reporting.WebForms.ButtonImageInfo : object {
    public string DisabledUrl;
    public string EnabledUrl;
}
internal class Microsoft.Reporting.WebForms.CalendarDropDownInputControl : GenericDropDownInputControl {
    private string ServerCalendarUrl { get; }
    protected String[] CustomControlValue { get; protected set; }
    protected bool CustomControlHasValue { get; }
    protected string FrameAccessibleName { get; }
    public CalendarDropDownInputControl(ReportParameterInfo reportParam, IBrowserDetection browserDetection, bool useAbsoluteScreenPositioning);
    public static bool IsSupported(IBrowserDetection browserDetection);
    protected virtual void CreateChildControls();
    private string get_ServerCalendarUrl();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual String[] get_CustomControlValue();
    protected virtual void set_CustomControlValue(String[] value);
    protected virtual bool get_CustomControlHasValue();
    protected virtual string get_FrameAccessibleName();
    public virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
}
internal class Microsoft.Reporting.WebForms.CalendarIframeOperation : HandlerOperation {
    public static string CreateUrl();
    public virtual void PerformOperation(NameValueCollection urlQuery, HttpResponse response);
}
internal class Microsoft.Reporting.WebForms.CalendarPage : Page {
    private CalendarPageControl m_calendarPageControl;
    protected virtual void CreateChildControls();
    protected virtual void Render(HtmlTextWriter writer);
}
internal class Microsoft.Reporting.WebForms.CalendarPageControl : CompositeControl {
    public static string _CalendarStyleSheet;
    public static string _CalendarScript;
    public static string _CalendarImage;
    public static string _CalenderDisabledImage;
    public static string _calendarStartDateAttribute;
    public static string _calendarSelectedDateAttribute;
    public static string _PreviousMove;
    public static string _LCIDParameter;
    public static TimeSpan _Midnight;
    private SPDatePickerControl m_calendar;
    private string m_onPageLoadScript;
    private string m_calendarScriptUrl;
    private string m_cssUrl;
    private string m_imageUrl;
    public string OnPageLoadScript { get; }
    public string CalendarScriptUrl { get; public set; }
    public string CssUrl { get; public set; }
    public string ImageUrl { get; public set; }
    private static CalendarPageControl();
    public string get_OnPageLoadScript();
    protected virtual void CreateChildControls();
    public string get_CalendarScriptUrl();
    public void set_CalendarScriptUrl(string value);
    public string get_CssUrl();
    public void set_CssUrl(string value);
    public string get_ImageUrl();
    public void set_ImageUrl(string value);
    protected virtual void OnLoad(EventArgs e);
}
internal class Microsoft.Reporting.WebForms.ClientCanceledStateChangeEventArgs : EventArgs {
    private bool m_clientCanceled;
    public bool ClientCanceled { get; }
    public ClientCanceledStateChangeEventArgs(bool clientCanceled);
    public bool get_ClientCanceled();
}
internal class Microsoft.Reporting.WebForms.ClientPrintInfo : object {
    private ReportViewer m_viewer;
    private ReportControlSession m_reportSession;
    private ClientArchitecture m_clientArch;
    private string m_instanceId;
    private string m_cabUrl;
    private string m_cabClsid;
    private Report m_report;
    public string CabUrl { get; }
    public string CabClsid { get; }
    public double MarginLeft { get; }
    public double MarginRight { get; }
    public double MarginTop { get; }
    public double MarginBottom { get; }
    public double PageHeight { get; }
    public double PageWidth { get; }
    public int Culture { get; }
    public int UICulture { get; }
    public bool UseSingleRequest { get; }
    public string PrintRequestPath { get; }
    public string PrintRequestQuery { get; }
    public string ReportDisplayName { get; }
    public ClientPrintInfo(ReportViewer viewer);
    public string get_CabUrl();
    public string get_CabClsid();
    public double get_MarginLeft();
    public double get_MarginRight();
    public double get_MarginTop();
    public double get_MarginBottom();
    public double get_PageHeight();
    public double get_PageWidth();
    public int get_Culture();
    public int get_UICulture();
    public bool get_UseSingleRequest();
    public string get_PrintRequestPath();
    public string get_PrintRequestQuery();
    public string get_ReportDisplayName();
    private static double ConvertPageDimensionToMM(int pageDimension);
}
public class Microsoft.Reporting.WebForms.ClientRenderingException : ReportViewerException {
    internal ClientRenderingException(Exception renderingException);
    private ClientRenderingException(SerializationInfo info, StreamingContext context);
}
internal abstract class Microsoft.Reporting.WebForms.CompositeScriptControl : CompositeControl {
    protected HtmlTextWriterTag TagKey { get; }
    protected ScriptManager ScriptManager { get; }
    protected virtual HtmlTextWriterTag get_TagKey();
    protected ScriptManager get_ScriptManager();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    public abstract virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    public virtual IEnumerable`1<ScriptReference> GetScriptReferences();
}
internal class Microsoft.Reporting.WebForms.ConfigFilePropertyInterface`1 : object {
    private string m_propertyName;
    private string m_interfaceTypeName;
    private bool m_propertyLoaded;
    private Type m_propertyType;
    public ConfigFilePropertyInterface`1(string propertyName, string interfaceTypeName);
    public InterfaceType GetInstance();
    private void EnsurePropertyLoaded();
}
internal static class Microsoft.Reporting.WebForms.Constants : object {
    public static string ScriptKey;
    public static string UrlParamOperationType;
    public static string PrintControlCLSID_For2005;
    public static string PrintControlCLSID32;
    public static string PrintControlCLSID64;
    public static string ClientPrintCabBackCompatFileName;
    public static string ClientPrintCabX86FileName;
    public static string ClientPrintCabX64FileName;
    public static int BufferedReadSize;
}
public enum Microsoft.Reporting.WebForms.ContentDisposition : Enum {
    public int value__;
    public static ContentDisposition AlwaysInline;
    public static ContentDisposition AlwaysAttachment;
    public static ContentDisposition OnlyHtmlInline;
}
[ExtensionAttribute]
internal static class Microsoft.Reporting.WebForms.CreateAndRegisterStreamTypeConverter : object {
    [ExtensionAttribute]
internal static CreateAndRegisterStream ToInnerType(CreateAndRegisterStream callback);
    [ExtensionAttribute]
internal static CreateAndRegisterStream ToOuterType(CreateAndRegisterStream callback);
}
public class Microsoft.Reporting.WebForms.CreateStreamCallback : MulticastDelegate {
    public CreateStreamCallback(object object, IntPtr method);
    public virtual Stream Invoke(string name, string extension, Encoding encoding, string mimeType, bool willSeek);
    public virtual IAsyncResult BeginInvoke(string name, string extension, Encoding encoding, string mimeType, bool willSeek, AsyncCallback callback, object object);
    public virtual Stream EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.WebForms.DataSetExtensionConnection : object {
    private GetSubReportDataSetCallback m_subreportCallback;
    private IEnumerable m_dataSources;
    public bool MustResolveSharedDataSources { get; }
    public DataSetExtensionConnection(GetSubReportDataSetCallback subreportCallback, IEnumerable dataSources);
    public sealed virtual void DataSetRetrieveForReportInstance(ICatalogItemContext itemContext, ParameterInfoCollection reportParameters);
    public sealed virtual void HandleImpersonation(IProcessingDataSource dataSource, DataSourceInfo dataSourceInfo, string datasetName, IDbConnection connection, Action afterImpersonationAction);
    public sealed virtual IDbConnection OpenDataSourceExtensionConnection(IProcessingDataSource dataSource, string connectionString, DataSourceInfo dataSourceInfo, string datasetName);
    public sealed virtual void CloseConnection(IDbConnection connection, IProcessingDataSource dataSourceObj, DataSourceInfo dataSourceInfo);
    public sealed virtual void CloseConnectionWithoutPool(IDbConnection connection);
    public sealed virtual bool get_MustResolveSharedDataSources();
}
internal class Microsoft.Reporting.WebForms.DataSourceCollectionWrapper : object {
    private ReportDataSourceCollection m_dsCollection;
    internal DataSourceCollectionWrapper(ReportDataSourceCollection dsCollection);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.Reporting.WebForms.DataSourceControl : CompositeControl {
    private EventHandler ValueChanged;
    private ReportDataSourceInfo m_dsInfo;
    private IReportViewerStyles m_styles;
    private CredentialRenderer m_renderer;
    private SafeLiteralControl m_dsPromptControl;
    private SafeLiteralControl m_userPromptControl;
    private SafeLiteralControl m_pwdPromptControl;
    private TextBox m_userControl;
    private TextBox m_pwdControl;
    public ReportDataSourceInfo DataSourceInfo { get; }
    public Control DataSourcePrompt { get; }
    public Control UserPrompt { get; }
    public TextBox UserInput { get; }
    public Control PasswordPrompt { get; }
    public TextBox PasswordInput { get; }
    public DataSourceControl(ReportDataSourceInfo dsInfo, IReportViewerStyles styles, CredentialRenderer renderer);
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    private TextBox CreateTextBox();
    public ReportDataSourceInfo get_DataSourceInfo();
    public void add_ValueChanged(EventHandler value);
    public void remove_ValueChanged(EventHandler value);
    private void OnChanged(object sender, EventArgs e);
    public void ApplyFont(FontInfo font);
    public Control get_DataSourcePrompt();
    public Control get_UserPrompt();
    public TextBox get_UserInput();
    public Control get_PasswordPrompt();
    public TextBox get_PasswordInput();
    public sealed virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    public sealed virtual IEnumerable`1<ScriptReference> GetScriptReferences();
}
internal class Microsoft.Reporting.WebForms.DataSourceControlCollection : List`1<DataSourceControl> {
    public String[] DataSourceClientIds { get; }
    public static DataSourceControlCollection Create(ReportDataSourceInfoCollection dsInfos, CredentialRenderer renderer, IReportViewerStyles styles);
    public String[] get_DataSourceClientIds();
}
public class Microsoft.Reporting.WebForms.DataSourceCredentials : object {
    private string m_name;
    private string m_userID;
    private string m_password;
    public string Name { get; public set; }
    public string UserId { get; public set; }
    public string Password { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_UserId();
    public void set_UserId(string value);
    public string get_Password();
    public void set_Password(string value);
    internal DataSourceCredentials ToSoapCredentials();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Reporting.WebForms.DataSourceCredentialsCollection : Collection`1<DataSourceCredentials> {
    public DataSourceCredentials Item { get; }
    public DataSourceCredentials get_Item(string name);
}
internal class Microsoft.Reporting.WebForms.DataSourceViewSelectCallbackEvent : object {
    private DataSourceView m_view;
    private IEnumerable m_data;
    private ManualResetEvent m_selectCompletionEvent;
    internal IEnumerable Data { get; }
    internal DataSourceViewSelectCallbackEvent(DataSourceView view);
    internal IEnumerable get_Data();
    internal void InvokeSelect();
    private void OnExecuteSelectCompleted(IEnumerable data);
    internal bool WaitForSelectCompleted();
}
internal class Microsoft.Reporting.WebForms.DataSourceWrapper : object {
    private DataSourceViewSelectCallbackEvent m_selectCompletionEvent;
    private object m_cachedValue;
    private ReportDataSource m_ds;
    private string Microsoft.Reporting.IDataSource.Name { get; }
    private object Microsoft.Reporting.IDataSource.Value { get; }
    internal DataSourceWrapper(ReportDataSource ds);
    private sealed virtual override string Microsoft.Reporting.IDataSource.get_Name();
    private sealed virtual override object Microsoft.Reporting.IDataSource.get_Value();
    private void StartAsyncSelect();
    private object GetIDataSource();
}
internal class Microsoft.Reporting.WebForms.DateOptions : object {
    private string m_Lang;
    private int m_Lcid;
    private CultureInfo m_CultureInfo;
    private CultureInfo m_LocaleCultureInfo;
    private SPCalendarType m_CalendarType;
    private int m_FirstDayOfWeek;
    private int m_HijriAdjustment;
    private bool m_UseMonthGenitiveNames;
    private SimpleDate m_Today;
    private SimpleDate m_SelectedDate;
    private Boolean[] m_WorkWeek;
    private Hashtable m_HebrewNumberToIntDict;
    private Hashtable m_IntToHebrewNumberDict;
    private string m_DateSeparator;
    private string m_TimeSeparator;
    private string m_AMDesignator;
    private string m_PMDesignator;
    private string m_TimePattern12Hour;
    private string m_TimePattern24Hour;
    private String[] m_TimeFormatPatterns;
    private String[] m_MonthNames;
    private String[] m_MonthGenitiveNames;
    private String[] m_AbbrMonthNames;
    private String[] m_LeapMonthNames;
    private String[] m_LeapAbbrMonthNames;
    private String[] m_DayNames;
    private String[] m_SuperShortAbbrDayNames;
    private String[] m_ShortAbbrDayNames;
    private String[] m_AbbrDayNames;
    private String[] m_ArrEngDays;
    private string m_YearMonthPattern;
    private string m_ShortDatePattern;
    private string m_DowLongDatePattern;
    private string m_MonthDayPattern;
    private int m_TwoDigitYearMax;
    private String[] m_EraName;
    private String[] m_AbbrEraName;
    private int m_Eras;
    private String[] m_TimeMarkHours;
    private String[] m_TimeMarkHoursWithMinutes;
    private String[] m_12Hours;
    private String[] m_24Hours;
    private String[] m_24HoursWithMinutes;
    private String[] m_HebrewDayChars;
    private String[] m_HebrewNumbers;
    private Int32[] m_HebrewNumbersToInt;
    private String[] m_HindiSakaMonthNames;
    private SimpleDate m_startMonth;
    public string Lang { get; }
    public Calendar Calendar { get; }
    public SPCalendarType CalendarType { get; }
    public string AMDesignator { get; }
    public string PMDesignator { get; }
    public string TimeSeparator { get; }
    public SimpleDate Today { get; }
    public SimpleDate StartMonth { get; }
    public SimpleDate SelectedDate { get; }
    public String[] DayNames { get; }
    public int FirstDayOfWeek { get; }
    public int HijriAdjustment { get; }
    public string ShortDatePattern { get; }
    public string MonthDayPattern { get; }
    public string TimePattern12Hour { get; }
    public string TimePattern24Hour { get; }
    public DateOptions(string localeId, SPCalendarType calendar, string workWeek, string firstDayOfWeek, string hijriAdjustment, string timeZoneSpan, string twoDigitYearMax, string selectedDate, string startMonth);
    public DateOptions(string localeId, SPCalendarType calendar, string workWeek, string firstDayOfWeek, string hijriAdjustment, string timeZoneSpan, string selectedDate, string startMonth);
    private void SetCalendarTypeFromName(SPCalendarType calendarType);
    private void SetCalendarTypeFromCulture();
    public string get_Lang();
    public Calendar get_Calendar();
    public SPCalendarType get_CalendarType();
    public string get_AMDesignator();
    public string get_PMDesignator();
    public string get_TimeSeparator();
    public SimpleDate get_Today();
    public SimpleDate get_StartMonth();
    public SimpleDate get_SelectedDate();
    public String[] get_DayNames();
    public bool IsWorkDay(int iDay);
    public int get_FirstDayOfWeek();
    public int get_HijriAdjustment();
    public string get_ShortDatePattern();
    public string get_MonthDayPattern();
    public string get_TimePattern12Hour();
    public string get_TimePattern24Hour();
    public string GetDowLongDateString(SimpleDate dt);
    public string GetMonthDayDateString(SimpleDate dt);
    public string GetTimeString(bool hoursMode24, DateTime startDate, DateTime endDate, string format);
    public String[] GetHoursString(bool hoursMode24, bool hasMinutes);
    public String[] Get12Hours();
    public string GetMonthYearString(SimpleDate simpleDate);
    public string GetYearString(SimpleDate simpleDate);
    public string GetDayChar(int day);
    public string GetDayChar(int day, SPCalendarType calendartype);
    public string GetShortDateString(SimpleDate simpleDate);
    public string GetTimeStringFromPattern(DateTime dt, bool hoursMode24);
    public string GetDateString(SimpleDate simpleDate, string format);
    public bool ParseShortDate(string inputDate, SimpleDate& selectedDate);
    public bool ParseMonthDayDate(string inputDate, SimpleDate& selectedDate);
    public bool ParseDate(string inputDate, string format, SimpleDate& selectedDate);
    public bool ParseTime(string stTime, string format, DateTime& dtTime);
    private int checkStringList(String[] list, string str, int off);
    private void initializeHebrewNumberDict();
    private int hebrewYearToInteger(string str);
    private string integerToHebrewYear(int num);
    public String[] GetDaysAbbreviation();
    public SimpleDate fixYear(SimpleDate cDate);
    private SimpleDate fixMonth(SimpleDate cDate);
    private SimpleDate fixDays(SimpleDate cDate);
    public SimpleDate AddDays(SimpleDate cDate, int nDays);
    public SimpleDate AddMonths(SimpleDate cDate, int nMonths);
    public SimpleDate AddYears(SimpleDate cDate, int nYears);
    public String[] GetShortDayAbbreviation();
    public String[] GetDaysSuperShortAbbreviation();
    public String[] GetMonthNamesAbbreviation(SimpleDate dt);
    public String[] GetMonthNamesAbbreviation();
    internal bool isEastAsiaCalendar();
    public String[] GetMonthNames(SimpleDate dt);
}
internal class Microsoft.Reporting.WebForms.DatePicker : object {
    public static string _PickBackImage;
    public static string _PickForwardImage;
    private static string m_sRTL;
    protected static string m_divopen;
    protected static string m_dirrtl;
    protected static string m_dirltr;
    protected static string m_divclose;
    protected static string m_tableopen_begin;
    protected static string m_tableclose;
    protected static string m_emptyformatTD;
    protected static string m_cellformatTD;
    protected static string m_cellformatTDDisabled;
    protected static string m_nextprevformat;
    protected static string m_opendivs;
    protected static string m_closedivs;
    protected static string m_firstrowformat;
    protected static string m_hideunhideformat;
    protected static string m_movedateformat;
    protected static string m_dayabbr;
    private static string m_weeknumberformatTD;
    private static string m_weeknumberselectedLink;
    private static string m_weeknumberacronym;
    private static string m_monthformat;
    private static string m_weekdayheader;
    private static string m_weekempty;
    protected int m_StartMonthOffset;
    protected int m_EndMonthOffset;
    protected DateOptions m_dopt;
    protected SimpleDate m_startMonth;
    protected SimpleDate m_SelectedDate;
    protected SimpleDate m_Today;
    protected SimpleDate[] m_MonthInfo;
    protected bool m_bNeedDirections;
    protected string m_backImage;
    protected string m_forwardImage;
    protected string m_forwardstr;
    protected string m_backstr;
    private string m_acronymstr;
    private String[] m_DayNames;
    private String[] m_DayFullNames;
    private bool m_bShowNextPrevNavigation;
    private bool m_bShowFooter;
    private bool m_bShowWeekNumber;
    private bool m_bShowNotThisMonthDays;
    private short m_FirstWeekOfYear;
    private int m_minJDay;
    private int m_maxJDay;
    private string m_defaultPrevNavText;
    private string m_defaultNextNavText;
    private string m_prevNavText;
    private string m_nextNavText;
    private string m_cssClassDatePicker;
    private string m_cssClassDayCenter;
    private string m_cssClassDayCenterOn;
    private string m_cssClassDayOtherMonth;
    private string m_cssClassDayToday;
    private string m_cssClassWeekSelected;
    private string m_cssClassWeek;
    private string m_cssClassSelectedDay;
    private string m_cssClassWeekDayName;
    private string m_cssClassMonthName;
    private string m_cssClassFooter;
    private string m_cssClassWeekBox;
    private bool m_bInit;
    private string m_dayScriptName;
    private int m_langId;
    private CultureInfo m_LanguageCulture;
    protected string m_headerformat;
    public int LangId { get; public set; }
    internal CultureInfo LanguageCulture { get; }
    unknown string ImageDirName {public set; }
    public string OnClickScriptHandler { get; public set; }
    public string PrevMonthText { get; public set; }
    public string NextMonthText { get; public set; }
    public int StartMonthOffset { get; public set; }
    public int EndMonthOffset { get; public set; }
    public int MinJDay { get; public set; }
    public int MaxJDay { get; public set; }
    public bool ShowNextPrevNavigation { get; public set; }
    public bool ShowFooter { get; public set; }
    public bool ShowWeekNumber { get; public set; }
    public bool ShowNotThisMonthDays { get; public set; }
    internal string CssClassDatePicker { get; }
    internal string CssClassMonthName { get; }
    public DateOptions DateTimeOptions { get; public set; }
    public short FirstWeekOfYear { get; public set; }
    public int get_LangId();
    public void set_LangId(int value);
    internal CultureInfo get_LanguageCulture();
    public void set_ImageDirName(string value);
    public string get_OnClickScriptHandler();
    public void set_OnClickScriptHandler(string value);
    public string get_PrevMonthText();
    public void set_PrevMonthText(string value);
    public string get_NextMonthText();
    public void set_NextMonthText(string value);
    public int get_StartMonthOffset();
    public void set_StartMonthOffset(int value);
    public int get_EndMonthOffset();
    public void set_EndMonthOffset(int value);
    public int get_MinJDay();
    public void set_MinJDay(int value);
    public int get_MaxJDay();
    public void set_MaxJDay(int value);
    public bool get_ShowNextPrevNavigation();
    public void set_ShowNextPrevNavigation(bool value);
    public bool get_ShowFooter();
    public void set_ShowFooter(bool value);
    public bool get_ShowWeekNumber();
    public void set_ShowWeekNumber(bool value);
    public bool get_ShowNotThisMonthDays();
    public void set_ShowNotThisMonthDays(bool value);
    internal string get_CssClassDatePicker();
    internal string get_CssClassMonthName();
    public DateOptions get_DateTimeOptions();
    public void set_DateTimeOptions(DateOptions value);
    public short get_FirstWeekOfYear();
    public void set_FirstWeekOfYear(short value);
    protected void Init();
    public virtual void RenderAsHtml(StringBuilder st);
    private void RenderMonthAsHtml(StringBuilder st, int offset);
    protected string GetDivName(int offset);
    protected string GetDivFocusElement(int offset, bool previous);
    protected void RenderPickerHeaderAsHtml(StringBuilder str, int offset, SimpleDate selectedDate, string headerstring, int colspan);
    private bool RenderWeekHeaderAsHtml(StringBuilder st, int weekCount);
    private bool RenderDaysAsHtml(StringBuilder st, SimpleDate& selectedDate, int monthDays);
    private string GetTodayDayString(string todayDate);
    private string GetDayStyle(bool isSelected, bool inMonth, bool isToday);
    protected string GetDayString(SimpleDate di);
    protected bool RenderFooterAsHtml(StringBuilder st, int colspan);
}
internal class Microsoft.Reporting.WebForms.DelegatedRenderingControl : Control {
    private RenderDelegate m_renderChildrenDelegate;
    public DelegatedRenderingControl(RenderDelegate renderChildrenDelegate);
    protected virtual void Render(HtmlTextWriter writer);
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WebForms.DeviceInfo : object {
    private string m_name;
    private string m_value;
    public string Name { get; }
    public string Value { get; }
    public DeviceInfo(string name, string value);
    public string get_Name();
    public string get_Value();
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WebForms.DeviceInfoCollection : KeyedCollection`2<string, DeviceInfo> {
    private DeviceInfoNameBlackList m_deviceInfoNamesBlackList;
    private EnsureUnlocked m_ensureUnlocked;
    internal DeviceInfoNameBlackList DeviceInfoNameBlackList { get; internal set; }
    internal EnsureUnlocked EnsureUnlocked { get; internal set; }
    internal DeviceInfoNameBlackList get_DeviceInfoNameBlackList();
    internal void set_DeviceInfoNameBlackList(DeviceInfoNameBlackList value);
    internal EnsureUnlocked get_EnsureUnlocked();
    internal void set_EnsureUnlocked(EnsureUnlocked value);
    public void Add(string name, string value);
    protected virtual void ClearItems();
    protected virtual string GetKeyForItem(DeviceInfo item);
    protected virtual void InsertItem(int index, DeviceInfo item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, DeviceInfo item);
    private void ValidateUnlocked();
    private bool ValidateKey(string key);
}
internal class Microsoft.Reporting.WebForms.DeviceInfoNameBlackList : object {
    private Dictionary`2<string, string> m_blackList;
    public void Add(string deviceInfoName);
    public void Add(string deviceInfoName, string deviceInfoExceptionText);
    public bool Contains(string deviceInfoName);
    public string GetExceptionText(string deviceInfoName);
}
internal class Microsoft.Reporting.WebForms.DocMapArea : CompositeScriptControl {
    private HiddenField m_selectedNodeHiddenField;
    private ReportViewer m_viewer;
    private IReportViewerStyles m_styles;
    private CssStyleCollection m_fontStyles;
    private DocumentMapNode m_rootNode;
    private string m_expandImageUrl;
    private string m_collapseImageUrl;
    private string m_spacerImageUrl;
    private string m_onKeyDownScript;
    private string m_onClickTextScript;
    private string m_onMouseOverTextScript;
    private string m_onMouseOutTextScript;
    private string m_onClickExpandCollapseScript;
    private DocumentMapNavigationEventHandler NodeClick;
    public DocumentMapNode RootNode { get; public set; }
    public string DocMapHeaderOverflowDivId { get; }
    private string RootNodeId { get; }
    public DocMapArea(ReportViewer viewer);
    public void add_NodeClick(DocumentMapNavigationEventHandler value);
    public void remove_NodeClick(DocumentMapNavigationEventHandler value);
    protected virtual void OnInit(EventArgs e);
    protected virtual void CreateChildControls();
    public DocumentMapNode get_RootNode();
    public void set_RootNode(DocumentMapNode value);
    public string get_DocMapHeaderOverflowDivId();
    protected virtual void RenderChildren(HtmlTextWriter writer);
    private void RenderHeader(HtmlTextWriter writer);
    private void RenderTree(HtmlTextWriter writer);
    private string get_RootNodeId();
    private void RenderNode(HtmlTextWriter writer, bool expandNode, DocumentMapNode node);
    private void RenderExpandCollapseImage(HtmlTextWriter writer, string imageUrl, string altText, bool makeVisible);
    private void RenderDocMapImage(HtmlTextWriter writer, bool forInteractivity, string imageUrl);
    public virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    public virtual IEnumerable`1<ScriptReference> GetScriptReferences();
    protected virtual void OnPreRender(EventArgs e);
    private void WriteFontStyles(HtmlTextWriter writer);
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WebForms.DocumentMapNavigationEventArgs : CancelEventArgs {
    private string m_docMapID;
    public string DocumentMapId { get; }
    public DocumentMapNavigationEventArgs(string docMapID);
    public string get_DocumentMapId();
}
public class Microsoft.Reporting.WebForms.DocumentMapNavigationEventHandler : MulticastDelegate {
    public DocumentMapNavigationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DocumentMapNavigationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DocumentMapNavigationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Reporting.WebForms.DocumentMapNode : object {
    private string m_label;
    private string m_id;
    private IList`1<DocumentMapNode> m_children;
    public string Label { get; }
    public string Id { get; }
    public IList`1<DocumentMapNode> Children { get; }
    internal DocumentMapNode(string label, string id, DocumentMapNode[] children);
    internal static DocumentMapNode CreateTree(IDocumentMap docMap, string rootName);
    internal static DocumentMapNode CreateTree(DocumentMapNode serverNode, string rootName);
    internal static DocumentMapNode CreateNode(IDocumentMap docMap);
    private static void CollapseTopLevel(Stack`1<NodeStackEntry> nodeStack, List`1<DocumentMapNode> workspace);
    private static DocumentMapNode FromOnDemandNode(OnDemandDocumentMapNode node);
    internal static DocumentMapNode CreateNode(DocumentMapNode serverNode);
    public string get_Label();
    public string get_Id();
    public IList`1<DocumentMapNode> get_Children();
    private void SetNodeChildren(IList`1<DocumentMapNode> children);
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WebForms.DrillthroughEventArgs : CancelEventArgs {
    private string m_reportPath;
    private Report m_report;
    public string ReportPath { get; }
    public Report Report { get; }
    public DrillthroughEventArgs(string reportPath, Report targetReport);
    public string get_ReportPath();
    public Report get_Report();
}
public class Microsoft.Reporting.WebForms.DrillthroughEventHandler : MulticastDelegate {
    public DrillthroughEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DrillthroughEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DrillthroughEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.WebForms.DropDownMenu : CompositeScriptControl {
    private Table m_buttons;
    private Panel m_menu;
    private ButtonImageInfo m_arrowImageInfo;
    private ButtonImageInfo m_buttonImageInfo;
    private string m_tooltip;
    private IReportViewerStyles m_viewerStyle;
    public bool ShowEnabled;
    private List`1<MenuInfo> m_items;
    public IList`1<MenuInfo> Items { get; }
    public DropDownMenu(ButtonImageInfo image, string tooltip, IReportViewerStyles viewerStyle);
    protected virtual void CreateChildControls();
    private Table GetButtonControl();
    private Panel GetMenuControl();
    public IList`1<MenuInfo> get_Items();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    public virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    private string SerializeButtonInfo(JavaScriptSerializer serializer, ButtonImageInfo buttonInfo);
}
internal class Microsoft.Reporting.WebForms.DropDownValidator : CustomValidator {
    protected virtual void Render(HtmlTextWriter writer);
    protected virtual bool OnServerValidate(string value);
}
internal class Microsoft.Reporting.WebForms.EmbeddedResourceOperation : HandlerOperation {
    private static string UrlParamName;
    private static string ResourceNameScript;
    private static Byte[] m_viewerScript;
    private static string m_assemblyVersion;
    [CompilerGeneratedAttribute]
private static Func`1<string> CS$<>9__CachedAnonymousMethodDelegate1;
    public bool IsCacheable { get; }
    private static string ProductVersion { get; }
    public static string CreateUrl(string resourceName);
    public static string CreateUrlForScriptFile();
    protected static string CreateUrl(string resourceName, string operationType, String[] additionalParams);
    public static string CreateReference(string resourceName);
    public virtual bool get_IsCacheable();
    protected virtual Byte[] GetResource(string resourceName, String& mimeType);
    protected virtual Byte[] GetResource(string resourceName, String& mimeType, NameValueCollection urlQuery);
    public virtual void PerformOperation(NameValueCollection urlQuery, HttpResponse response);
    private Byte[] GetViewerScript();
    protected virtual void LoadScriptFiles(List`1<byte> viewerScript);
    private static string get_ProductVersion();
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
private static string _GetProductVersion();
    [CompilerGeneratedAttribute]
private static string <_GetProductVersion>b__0();
}
internal class Microsoft.Reporting.WebForms.EnsureUnlocked : MulticastDelegate {
    public EnsureUnlocked(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.WebForms.ErrorControl : WebControl {
    private Exception m_exception;
    private bool m_hasException;
    private bool m_sanitizeExceptionMessages;
    public bool UseInternalPadding;
    public bool InheritFont;
    public bool ShowNonRSMessages;
    public bool HasException { get; }
    protected HtmlTextWriterTag TagKey { get; }
    public ErrorControl(bool useInternalPadding);
    public ErrorControl(bool useInternalPadding, bool sanitizeExceptionMessages);
    public void SetHandledException();
    public void SetException(Exception e);
    public void ClearException();
    public bool get_HasException();
    protected virtual HtmlTextWriterTag get_TagKey();
    protected virtual void Render(HtmlTextWriter writer);
    protected virtual void RenderContents(HtmlTextWriter writer);
    private string GetExceptionMessage(Exception e);
    private bool ShouldDisplayException(Exception e);
    public static string SanitizeExceptionMessage(Exception e);
    private void WriteStackTrace(HtmlTextWriter writer);
}
[CompilerGeneratedAttribute]
internal class Microsoft.Reporting.WebForms.Errors : object {
    public static CultureInfo Culture { get; public set; }
    public static string InvalidPageNav { get; }
    public static string MissingCredentials { get; }
    public static string InvalidScriptIdentifier { get; }
    public static string SessionDisabled { get; }
    public static string ViewStateDisabled { get; }
    public static string SessionOrConfig { get; }
    public static string ASPNetSessionExpired { get; }
    public static string HandlerNotRegisteredTitle { get; }
    public static string ScriptManagerNotFound { get; }
    public static string ReadOnlyViewer { get; }
    public static string SearchNotFound { get; }
    public static string SearchNextNotFound { get; }
    public static string PageNumberInvalid { get; }
    public static string TempStorageNeedsSeekReadWrite { get; }
    public static string BadReportDataSourceType { get; }
    public static string InvalidDeviceInfoLinkTarget { get; }
    public static string InvalidDeviceInfoFind { get; }
    public static string InvalidDeviceInfoSection { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_InvalidPageNav();
    public static string get_MissingCredentials();
    public static string get_InvalidScriptIdentifier();
    public static string get_SessionDisabled();
    public static string get_ViewStateDisabled();
    public static string get_SessionOrConfig();
    public static string get_ASPNetSessionExpired();
    public static string get_HandlerNotRegisteredTitle();
    public static string get_ScriptManagerNotFound();
    public static string get_ReadOnlyViewer();
    public static string get_SearchNotFound();
    public static string get_SearchNextNotFound();
    public static string get_PageNumberInvalid();
    public static string get_TempStorageNeedsSeekReadWrite();
    public static string get_BadReportDataSourceType();
    public static string get_InvalidDeviceInfoLinkTarget();
    public static string get_InvalidDeviceInfoFind();
    public static string get_InvalidDeviceInfoSection();
    public static string MissingValueClientError(string prompt);
    public static string MissingSelectionClientError(string prompt);
    public static string MissingUrlParameter(string paramName);
    public static string ParamValueTypeMismatch(string paramName);
    public static string FailedToModifyWebConfig(string reason);
    public static string HandlerNotRegisteredDetails(string legacyHandlerLine, string legacyHandlerSection, string iis7HandlerLine, string iis7HandlerSection);
    public static string NoNamingContainer(string type, string controlID);
    public static string DataControl_DataSourceDoesntExist(string reportDataSourceName, string reportViewerName, string dataSourceID);
    public static string DataControl_ViewNotFound(string reportViewerName, string reportDataSourceName);
    public static string DataControl_DataSourceIDMustBeDataControl(string reportDataSourceName, string reportViewerName, string dataSourceID);
    public static string CantFindConfigFileType(string configFileTypeName);
    public static string MissingInterfaceOnConfigFileType(string configFileTypeName, string expectedTypeName);
}
internal class Microsoft.Reporting.WebForms.EventableTextBox : TextBox {
    private static string CurrentPagePostBackScript;
    private EventHandler EnterPressed;
    public string CustomOnEnterScript;
    public bool AddKeyPressHandler;
    public void add_EnterPressed(EventHandler value);
    public void remove_EnterPressed(EventHandler value);
    protected virtual void OnPreRender(EventArgs e);
    public sealed virtual void RaisePostBackEvent(string eventArgument);
}
internal class Microsoft.Reporting.WebForms.ExecutionInfo : object {
    [CompilerGeneratedAttribute]
private string <ExecutionID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HistoryID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportPath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumPages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasDocumentMap>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AutoRefreshInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CredentialsRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParametersRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSnapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedsProcessing>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ExpirationDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowQueryExecution>k__BackingField;
    [CompilerGeneratedAttribute]
private PageCountMode <PageCountMode>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportDataSourceInfoCollection <DataSourcePrompts>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportParameterInfoCollection <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportPageSettings <ReportPageSettings>k__BackingField;
    public string ExecutionID { get; private set; }
    public string HistoryID { get; private set; }
    public string ReportPath { get; private set; }
    public int NumPages { get; public set; }
    public bool HasDocumentMap { get; private set; }
    public int AutoRefreshInterval { get; private set; }
    public bool CredentialsRequired { get; private set; }
    public bool ParametersRequired { get; private set; }
    public bool HasSnapshot { get; private set; }
    public bool NeedsProcessing { get; private set; }
    public DateTime ExpirationDateTime { get; private set; }
    public bool AllowQueryExecution { get; private set; }
    public PageCountMode PageCountMode { get; private set; }
    public ReportDataSourceInfoCollection DataSourcePrompts { get; private set; }
    public ReportParameterInfoCollection Parameters { get; private set; }
    public ReportPageSettings ReportPageSettings { get; private set; }
    public ExecutionInfo(string executionId, string historyId, string reportPath, int numPages, bool hasDocumentMap, int autoRefreshInterval, bool credentialsRequired, bool parametersRequired, bool hasSnapshot, bool needsProcessing, DateTime expirationDateTime, bool allowQueryExecution, PageCountMode pageCountMode, ReportDataSourceInfoCollection dataSourcePrompts, ReportParameterInfoCollection parameters, ReportPageSettings pageSettings);
    [CompilerGeneratedAttribute]
public string get_ExecutionID();
    [CompilerGeneratedAttribute]
private void set_ExecutionID(string value);
    [CompilerGeneratedAttribute]
public string get_HistoryID();
    [CompilerGeneratedAttribute]
private void set_HistoryID(string value);
    [CompilerGeneratedAttribute]
public string get_ReportPath();
    [CompilerGeneratedAttribute]
private void set_ReportPath(string value);
    [CompilerGeneratedAttribute]
public int get_NumPages();
    [CompilerGeneratedAttribute]
public void set_NumPages(int value);
    [CompilerGeneratedAttribute]
public bool get_HasDocumentMap();
    [CompilerGeneratedAttribute]
private void set_HasDocumentMap(bool value);
    [CompilerGeneratedAttribute]
public int get_AutoRefreshInterval();
    [CompilerGeneratedAttribute]
private void set_AutoRefreshInterval(int value);
    [CompilerGeneratedAttribute]
public bool get_CredentialsRequired();
    [CompilerGeneratedAttribute]
private void set_CredentialsRequired(bool value);
    [CompilerGeneratedAttribute]
public bool get_ParametersRequired();
    [CompilerGeneratedAttribute]
private void set_ParametersRequired(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasSnapshot();
    [CompilerGeneratedAttribute]
private void set_HasSnapshot(bool value);
    [CompilerGeneratedAttribute]
public bool get_NeedsProcessing();
    [CompilerGeneratedAttribute]
private void set_NeedsProcessing(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_ExpirationDateTime();
    [CompilerGeneratedAttribute]
private void set_ExpirationDateTime(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_AllowQueryExecution();
    [CompilerGeneratedAttribute]
private void set_AllowQueryExecution(bool value);
    [CompilerGeneratedAttribute]
public PageCountMode get_PageCountMode();
    [CompilerGeneratedAttribute]
private void set_PageCountMode(PageCountMode value);
    [CompilerGeneratedAttribute]
public ReportDataSourceInfoCollection get_DataSourcePrompts();
    [CompilerGeneratedAttribute]
private void set_DataSourcePrompts(ReportDataSourceInfoCollection value);
    [CompilerGeneratedAttribute]
public ReportParameterInfoCollection get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(ReportParameterInfoCollection value);
    [CompilerGeneratedAttribute]
public ReportPageSettings get_ReportPageSettings();
    [CompilerGeneratedAttribute]
private void set_ReportPageSettings(ReportPageSettings value);
}
internal class Microsoft.Reporting.WebForms.ExportGroup : ToolbarGroup {
    private DropDownMenu m_exportButton;
    public string GroupCssClassName { get; }
    public ExportGroup(ReportViewer viewer);
    public virtual string get_GroupCssClassName();
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    private void PopulateDropDown();
    public virtual void AddScriptDescriptorProperties(ScriptControlDescriptor toolbarDesc);
}
internal class Microsoft.Reporting.WebForms.ExportOperation : ReportDataOperation {
    private static string UrlParamFormat;
    private static string UrlParamContentDisposition;
    private static string UrlParamFileName;
    public static string CreateUrl(Report report, string instanceID, ContentDisposition contentDisposition);
    public virtual void PerformOperation(NameValueCollection urlQuery, HttpResponse response);
}
internal class Microsoft.Reporting.WebForms.FindGroup : ToolbarGroup {
    private TextBox m_findText;
    private TextButton m_findButton;
    private TextButton m_nextButton;
    private SafeLiteralControl m_sep;
    private bool m_showTextSeparator;
    public string GroupCssClassName { get; }
    public FindGroup(ReportViewer viewer, bool showTextSeparator);
    public virtual string get_GroupCssClassName();
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    public virtual void AddScriptDescriptorProperties(ScriptControlDescriptor toolbarDesc);
}
internal abstract class Microsoft.Reporting.WebForms.GenericDropDownInputControl : BaseParameterInputControl {
    internal static int _MultiTextBoxColumns;
    protected static int IFrameZIndex;
    private bool m_useAbsoluteScreenPositioning;
    private PostBackTextBox m_inputControl;
    private HtmlInputImageWithClientID m_ddButton;
    private string m_disabledImage;
    private HtmlGenericControl m_floatingIframe;
    private bool m_addSpaceBeforeImage;
    protected List`1<Control> m_absolutePositionedControls;
    protected bool UseAbsoluteScreenPositioning { get; }
    protected string RelativeDivID { get; }
    protected string FrameAccessibleName { get; }
    internal PostBackTextBox InputControl { get; }
    internal HtmlInputImage Image { get; }
    protected string DisabledImageLocation { get; protected set; }
    protected String[] CustomControlIds { get; }
    public string PrimaryFormElementId { get; }
    protected HtmlGenericControl Iframe { get; }
    protected bool AddSpaceBeforeImage { get; protected set; }
    unknown bool AutoPostBack {public set; }
    public string DropDownClientSideObjectName { get; }
    private bool DDButtonDisabled { get; }
    protected GenericDropDownInputControl(ReportParameterInfo reportParam, IBrowserDetection browserDetection, bool useAbsoluteScreenPositioning);
    protected bool get_UseAbsoluteScreenPositioning();
    protected string get_RelativeDivID();
    protected abstract virtual string get_FrameAccessibleName();
    internal PostBackTextBox get_InputControl();
    internal HtmlInputImage get_Image();
    protected string get_DisabledImageLocation();
    protected void set_DisabledImageLocation(string value);
    protected virtual String[] get_CustomControlIds();
    public virtual string get_PrimaryFormElementId();
    protected HtmlGenericControl get_Iframe();
    protected bool get_AddSpaceBeforeImage();
    protected void set_AddSpaceBeforeImage(bool value);
    protected virtual void CreateChildControls();
    protected virtual BaseValidator CreateParameterRequiresValueValidator();
    protected void AddFloatingAttributes(WebControl wc);
    protected void AddFloatingAttributes(HtmlControl hc);
    private void AddFloatingAttributes(AttributeCollection attributes, CssStyleCollection style);
    public string ToggleImageScript(string boolParam);
    protected virtual void OnPreRender(EventArgs e);
    public virtual void set_AutoPostBack(bool value);
    public sealed virtual void RaisePostBackEvent(string eventArgument);
    public string get_DropDownClientSideObjectName();
    protected virtual void RenderContents(HtmlTextWriter writer);
    public void RenderAbsolutePositionedControls(HtmlTextWriter writer);
    protected void AddDropDownDescriptorProperties(ScriptControlDescriptor desc);
    protected virtual void SetCustomControlEnableState(bool enabled);
    private bool get_DDButtonDisabled();
}
internal class Microsoft.Reporting.WebForms.Global : object {
    internal static bool IsDesignTime { get; }
    public static void AddStyle(HtmlControl control, string styleName);
    public static void AddStyle(WebControl control, string styleName);
    public static string ZoomString(ZoomMode mode, int zoomPercent);
    internal static bool get_IsDesignTime();
}
internal class Microsoft.Reporting.WebForms.GregorianCalendarImpl : SolarCalendarImpl {
    protected static Int16[0...,0...] _DaysAccumInMonths;
    private static GregorianCalendarImpl();
    internal static int DateToJulianDay(int year, int month, int day);
    internal static int YearToJulianDay(int year);
    internal static void JulianDayToDate(int jDay, SimpleDate& di);
    internal static int DaysInMonth(int year, int month);
}
internal abstract class Microsoft.Reporting.WebForms.HandlerOperation : object {
    public bool IsCacheable { get; }
    public virtual bool get_IsCacheable();
    public virtual void Dispose();
    public abstract virtual void PerformOperation(NameValueCollection urlQuery, HttpResponse response);
    protected static string GetAndEnsureParam(NameValueCollection urlQuery, string paramName);
    protected static int ParseRequiredInt(NameValueCollection urlQuery, string paramName);
    protected static int ParseOptionalInt(string paramValueStr);
    protected static bool ParseRequiredBool(NameValueCollection urlQuery, string paramName);
    protected static object ParseRequiredEnum(NameValueCollection urlQuery, string paramName, Type enumType);
}
internal static class Microsoft.Reporting.WebForms.HandlerOperationTypes : object {
    public static string EmbeddedResource;
    public static string ReportImage;
    public static string PrintCab;
    public static string PrintRequest;
    public static string Export;
    public static string CalendarIframe;
    public static string SessionKeepAlive;
    public static string ReportServerStyleSheet;
    public static string ReportServerStyleSheetImage;
    public static string BackgroundImage;
}
internal class Microsoft.Reporting.WebForms.HoverImage : CompositeControl {
    private EventHandler Click;
    public bool ClientVisible;
    private string m_tooltip;
    private ToolbarImageInfo m_image;
    private ImageButton m_ltrImageButton;
    private ImageButton m_rtlImageButton;
    private IReportViewerStyles m_viewerStyle;
    private ReportViewer m_viewer;
    private bool IsRtlImageVisible { get; }
    public HoverImage(ToolbarImageInfo image, string tooltip, ReportViewer viewer);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    protected virtual void CreateChildControls();
    private ImageButton CreateImageButton(string imageUrl);
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual void Render(HtmlTextWriter writer);
    private void RenderImageButton(HtmlTextWriter writer, ImageButton image);
    public sealed virtual void RaisePostBackEvent(string eventArgument);
    private bool get_IsRtlImageVisible();
    private sealed virtual override IEnumerable`1<ScriptDescriptor> System.Web.UI.IScriptControl.GetScriptDescriptors();
    private sealed virtual override IEnumerable`1<ScriptReference> System.Web.UI.IScriptControl.GetScriptReferences();
}
internal class Microsoft.Reporting.WebForms.HtmlInputImageWithClientID : HtmlInputImage {
    protected virtual void OnPreRender(EventArgs e);
}
public class Microsoft.Reporting.WebForms.HttpHandler : object {
    internal static string LegacySystemWebSection;
    internal static string LegacyHttpHandlerNodeName;
    internal static string LegacyHttpHandlerSection;
    internal static string IIS7WebServerSection;
    internal static string IIS7HandlerNodeName;
    internal static string IIS7HttpHandlerSection;
    internal static string IIS7HandlerName;
    internal string HttpHandlerPath { get; }
    internal string LegacyHttpHandlerEntry { get; }
    internal string IIS7HttpHandlerEntry { get; }
    internal UriBuilder HandlerUri { get; }
    internal string ApplicationPath { get; }
    public bool IsReusable { get; }
    internal static NameValueCollection RequestParameters { get; }
    internal virtual string get_HttpHandlerPath();
    internal string GetHttpHandlerTypeName();
    internal string get_LegacyHttpHandlerEntry();
    internal string get_IIS7HttpHandlerEntry();
    internal UriBuilder get_HandlerUri();
    internal virtual string get_ApplicationPath();
    public sealed virtual bool get_IsReusable();
    public sealed virtual void ProcessRequest(HttpContext context);
    internal static NameValueCollection get_RequestParameters();
    internal virtual HandlerOperation GetHandler(string operationType);
    [CompilerGeneratedAttribute]
private string <GetHttpHandlerTypeName>b__0();
}
internal class Microsoft.Reporting.WebForms.HttpHandlerInputException : ReportViewerException {
    public HttpHandlerInputException(Exception e);
    public HttpHandlerInputException(string message);
    private HttpHandlerInputException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Reporting.WebForms.HttpHandlerMissingErrorMessage : WebControl {
    protected HtmlTextWriterTag TagKey { get; }
    protected virtual HtmlTextWriterTag get_TagKey();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void RenderContents(HtmlTextWriter writer);
}
internal interface Microsoft.Reporting.WebForms.IBrowserDetection {
    public bool IsIE { get; }
    public bool IsSafari { get; }
    public abstract virtual bool get_IsIE();
    public abstract virtual bool get_IsSafari();
}
internal class Microsoft.Reporting.WebForms.InitializeDataSourcesEventArgs : EventArgs {
    private ReportDataSourceCollection m_dataSources;
    public ReportDataSourceCollection DataSources { get; }
    internal InitializeDataSourcesEventArgs(ReportDataSourceCollection dataSources);
    public ReportDataSourceCollection get_DataSources();
}
internal class Microsoft.Reporting.WebForms.InitializeDataSourcesEventHandler : MulticastDelegate {
    public InitializeDataSourcesEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InitializeDataSourcesEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InitializeDataSourcesEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Microsoft.Reporting.WebForms.InteractivityPostBackMode : Enum {
    public int value__;
    public static InteractivityPostBackMode AlwaysAsynchronous;
    public static InteractivityPostBackMode AlwaysSynchronous;
    public static InteractivityPostBackMode SynchronousOnDrillthrough;
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.DataSourceCredentials : object {
    private string dataSourceNameField;
    private string userNameField;
    private string passwordField;
    public string DataSourceName { get; public set; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public string get_DataSourceName();
    public void set_DataSourceName(string value);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_Password();
    public void set_Password(string value);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.DataSourcePrompt : object {
    private string nameField;
    private string dataSourceIDField;
    private string promptField;
    public string Name { get; public set; }
    public string DataSourceID { get; public set; }
    public string Prompt { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_DataSourceID();
    public void set_DataSourceID(string value);
    public string get_Prompt();
    public void set_Prompt(string value);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.DocumentMapNode : object {
    private string labelField;
    private string uniqueNameField;
    private DocumentMapNode[] childrenField;
    public string Label { get; public set; }
    public string UniqueName { get; public set; }
    public DocumentMapNode[] Children { get; public set; }
    public string get_Label();
    public void set_Label(string value);
    public string get_UniqueName();
    public void set_UniqueName(string value);
    public DocumentMapNode[] get_Children();
    public void set_Children(DocumentMapNode[] value);
}
internal enum Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.EndpointVersion : Enum {
    public int value__;
    public static EndpointVersion Yukon;
    public static EndpointVersion Katmai;
    public static EndpointVersion Automatic;
}
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
[XmlRootAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ExecutionHeader : SoapHeader {
    private string executionIDField;
    private XmlAttribute[] anyAttrField;
    public string ExecutionID { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] AnyAttr { get; public set; }
    public string get_ExecutionID();
    public void set_ExecutionID(string value);
    public XmlAttribute[] get_AnyAttr();
    public void set_AnyAttr(XmlAttribute[] value);
}
[EditorBrowsableAttribute("1")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlIncludeAttribute("Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ExecutionInfo2")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ExecutionInfo : object {
    private bool hasSnapshotField;
    private bool needsProcessingField;
    private bool allowQueryExecutionField;
    private bool credentialsRequiredField;
    private bool parametersRequiredField;
    private DateTime expirationDateTimeField;
    private DateTime executionDateTimeField;
    private int numPagesField;
    private ReportParameter[] parametersField;
    private DataSourcePrompt[] dataSourcePromptsField;
    private bool hasDocumentMapField;
    private string executionIDField;
    private string reportPathField;
    private string historyIDField;
    private PageSettings reportPageSettingsField;
    private int autoRefreshIntervalField;
    public bool HasSnapshot { get; public set; }
    public bool NeedsProcessing { get; public set; }
    public bool AllowQueryExecution { get; public set; }
    public bool CredentialsRequired { get; public set; }
    public bool ParametersRequired { get; public set; }
    public DateTime ExpirationDateTime { get; public set; }
    public DateTime ExecutionDateTime { get; public set; }
    public int NumPages { get; public set; }
    public ReportParameter[] Parameters { get; public set; }
    public DataSourcePrompt[] DataSourcePrompts { get; public set; }
    public bool HasDocumentMap { get; public set; }
    public string ExecutionID { get; public set; }
    public string ReportPath { get; public set; }
    public string HistoryID { get; public set; }
    public PageSettings ReportPageSettings { get; public set; }
    public int AutoRefreshInterval { get; public set; }
    public bool get_HasSnapshot();
    public void set_HasSnapshot(bool value);
    public bool get_NeedsProcessing();
    public void set_NeedsProcessing(bool value);
    public bool get_AllowQueryExecution();
    public void set_AllowQueryExecution(bool value);
    public bool get_CredentialsRequired();
    public void set_CredentialsRequired(bool value);
    public bool get_ParametersRequired();
    public void set_ParametersRequired(bool value);
    public DateTime get_ExpirationDateTime();
    public void set_ExpirationDateTime(DateTime value);
    public DateTime get_ExecutionDateTime();
    public void set_ExecutionDateTime(DateTime value);
    public int get_NumPages();
    public void set_NumPages(int value);
    public ReportParameter[] get_Parameters();
    public void set_Parameters(ReportParameter[] value);
    public DataSourcePrompt[] get_DataSourcePrompts();
    public void set_DataSourcePrompts(DataSourcePrompt[] value);
    public bool get_HasDocumentMap();
    public void set_HasDocumentMap(bool value);
    public string get_ExecutionID();
    public void set_ExecutionID(string value);
    public string get_ReportPath();
    public void set_ReportPath(string value);
    public string get_HistoryID();
    public void set_HistoryID(string value);
    public PageSettings get_ReportPageSettings();
    public void set_ReportPageSettings(PageSettings value);
    public int get_AutoRefreshInterval();
    public void set_AutoRefreshInterval(int value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ExecutionInfo2 : ExecutionInfo {
    private PageCountMode pageCountModeField;
    public PageCountMode PageCountMode { get; public set; }
    public PageCountMode get_PageCountMode();
    public void set_PageCountMode(PageCountMode value);
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.Extension : object {
    private ExtensionTypeEnum extensionTypeField;
    private string nameField;
    private string localizedNameField;
    private bool visibleField;
    private bool isModelGenerationSupportedField;
    public ExtensionTypeEnum ExtensionType { get; public set; }
    public string Name { get; public set; }
    public string LocalizedName { get; public set; }
    public bool Visible { get; public set; }
    public bool IsModelGenerationSupported { get; public set; }
    public ExtensionTypeEnum get_ExtensionType();
    public void set_ExtensionType(ExtensionTypeEnum value);
    public string get_Name();
    public void set_Name(string value);
    public string get_LocalizedName();
    public void set_LocalizedName(string value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public bool get_IsModelGenerationSupported();
    public void set_IsModelGenerationSupported(bool value);
}
[XmlTypeAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public enum Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ExtensionTypeEnum : Enum {
    public int value__;
    public static ExtensionTypeEnum Delivery;
    public static ExtensionTypeEnum Render;
    public static ExtensionTypeEnum Data;
    public static ExtensionTypeEnum All;
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.FindStringCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public int Result { get; }
    internal FindStringCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public int get_Result();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.FindStringCompletedEventHandler : MulticastDelegate {
    public FindStringCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FindStringCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FindStringCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.GetDocumentMapCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public DocumentMapNode Result { get; }
    internal GetDocumentMapCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public DocumentMapNode get_Result();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.GetDocumentMapCompletedEventHandler : MulticastDelegate {
    public GetDocumentMapCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GetDocumentMapCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GetDocumentMapCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DesignerCategoryAttribute("code")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.GetExecutionInfo2CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo2 Result { get; }
    internal GetExecutionInfo2CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo2 get_Result();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.GetExecutionInfo2CompletedEventHandler : MulticastDelegate {
    public GetExecutionInfo2CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GetExecutionInfo2CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GetExecutionInfo2CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
[DebuggerStepThroughAttribute]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.GetExecutionInfoCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo Result { get; }
    internal GetExecutionInfoCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo get_Result();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.GetExecutionInfoCompletedEventHandler : MulticastDelegate {
    public GetExecutionInfoCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GetExecutionInfoCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GetExecutionInfoCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.GetRenderResourceCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public Byte[] Result { get; }
    public string MimeType { get; }
    internal GetRenderResourceCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public Byte[] get_Result();
    public string get_MimeType();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.GetRenderResourceCompletedEventHandler : MulticastDelegate {
    public GetRenderResourceCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GetRenderResourceCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GetRenderResourceCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ListRenderingExtensionsCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public Extension[] Result { get; }
    internal ListRenderingExtensionsCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public Extension[] get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ListRenderingExtensionsCompletedEventHandler : MulticastDelegate {
    public ListRenderingExtensionsCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ListRenderingExtensionsCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ListRenderingExtensionsCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DesignerCategoryAttribute("code")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ListSecureMethodsCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public String[] Result { get; }
    internal ListSecureMethodsCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public String[] get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ListSecureMethodsCompletedEventHandler : MulticastDelegate {
    public ListSecureMethodsCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ListSecureMethodsCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ListSecureMethodsCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.LoadDrillthroughTarget2CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo2 Result { get; }
    internal LoadDrillthroughTarget2CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo2 get_Result();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.LoadDrillthroughTarget2CompletedEventHandler : MulticastDelegate {
    public LoadDrillthroughTarget2CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadDrillthroughTarget2CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadDrillthroughTarget2CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
[DebuggerStepThroughAttribute]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.LoadDrillthroughTargetCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo Result { get; }
    internal LoadDrillthroughTargetCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo get_Result();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.LoadDrillthroughTargetCompletedEventHandler : MulticastDelegate {
    public LoadDrillthroughTargetCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadDrillthroughTargetCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadDrillthroughTargetCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DesignerCategoryAttribute("code")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.LoadReport2CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo2 Result { get; }
    internal LoadReport2CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo2 get_Result();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.LoadReport2CompletedEventHandler : MulticastDelegate {
    public LoadReport2CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadReport2CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadReport2CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.LoadReportCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo Result { get; }
    internal LoadReportCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo get_Result();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.LoadReportCompletedEventHandler : MulticastDelegate {
    public LoadReportCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadReportCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadReportCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.LoadReportDefinition2CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo2 Result { get; }
    public Warning[] warnings { get; }
    internal LoadReportDefinition2CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo2 get_Result();
    public Warning[] get_warnings();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.LoadReportDefinition2CompletedEventHandler : MulticastDelegate {
    public LoadReportDefinition2CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadReportDefinition2CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadReportDefinition2CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DesignerCategoryAttribute("code")]
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.LoadReportDefinitionCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo Result { get; }
    public Warning[] warnings { get; }
    internal LoadReportDefinitionCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo get_Result();
    public Warning[] get_warnings();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.LoadReportDefinitionCompletedEventHandler : MulticastDelegate {
    public LoadReportDefinitionCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadReportDefinitionCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadReportDefinitionCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.LogoffCompletedEventHandler : MulticastDelegate {
    public LogoffCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AsyncCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AsyncCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.LogonUserCompletedEventHandler : MulticastDelegate {
    public LogonUserCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AsyncCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AsyncCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.NavigateBookmarkCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public int Result { get; }
    public string UniqueName { get; }
    internal NavigateBookmarkCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public int get_Result();
    public string get_UniqueName();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.NavigateBookmarkCompletedEventHandler : MulticastDelegate {
    public NavigateBookmarkCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NavigateBookmarkCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NavigateBookmarkCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.NavigateDocumentMapCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public int Result { get; }
    internal NavigateDocumentMapCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public int get_Result();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.NavigateDocumentMapCompletedEventHandler : MulticastDelegate {
    public NavigateDocumentMapCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NavigateDocumentMapCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NavigateDocumentMapCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
[XmlTypeAttribute]
public enum Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.PageCountMode : Enum {
    public int value__;
    public static PageCountMode Actual;
    public static PageCountMode Estimate;
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.PageSettings : object {
    private ReportPaperSize paperSizeField;
    private ReportMargins marginsField;
    public ReportPaperSize PaperSize { get; public set; }
    public ReportMargins Margins { get; public set; }
    public ReportPaperSize get_PaperSize();
    public void set_PaperSize(ReportPaperSize value);
    public ReportMargins get_Margins();
    public void set_Margins(ReportMargins value);
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[XmlTypeAttribute]
public enum Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ParameterStateEnum : Enum {
    public int value__;
    public static ParameterStateEnum HasValidValue;
    public static ParameterStateEnum MissingValidValue;
    public static ParameterStateEnum HasOutstandingDependencies;
    public static ParameterStateEnum DynamicValuesUnavailable;
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
[XmlTypeAttribute]
public enum Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ParameterTypeEnum : Enum {
    public int value__;
    public static ParameterTypeEnum Boolean;
    public static ParameterTypeEnum DateTime;
    public static ParameterTypeEnum Integer;
    public static ParameterTypeEnum Float;
    public static ParameterTypeEnum String;
}
[XmlTypeAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ParameterValue : ParameterValueOrFieldReference {
    private string nameField;
    private string valueField;
    private string labelField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public string Label { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    public string get_Label();
    public void set_Label(string value);
}
[EditorBrowsableAttribute("1")]
[XmlIncludeAttribute("Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ParameterValue")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ParameterValueOrFieldReference : object {
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.PrintControlClsidHeader : SoapHeader {
    private string clsid32Field;
    private string clsid64Field;
    private XmlAttribute[] anyAttrField;
    public string Clsid32 { get; public set; }
    public string Clsid64 { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] AnyAttr { get; public set; }
    public string get_Clsid32();
    public void set_Clsid32(string value);
    public string get_Clsid64();
    public void set_Clsid64(string value);
    public XmlAttribute[] get_AnyAttr();
    public void set_AnyAttr(XmlAttribute[] value);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.Render2CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public Byte[] Result { get; }
    public string Extension { get; }
    public string MimeType { get; }
    public string Encoding { get; }
    public Warning[] Warnings { get; }
    public String[] StreamIds { get; }
    internal Render2CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public Byte[] get_Result();
    public string get_Extension();
    public string get_MimeType();
    public string get_Encoding();
    public Warning[] get_Warnings();
    public String[] get_StreamIds();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.Render2CompletedEventHandler : MulticastDelegate {
    public Render2CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, Render2CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, Render2CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DesignerCategoryAttribute("code")]
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.RenderCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public Byte[] Result { get; }
    public string Extension { get; }
    public string MimeType { get; }
    public string Encoding { get; }
    public Warning[] Warnings { get; }
    public String[] StreamIds { get; }
    internal RenderCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public Byte[] get_Result();
    public string get_Extension();
    public string get_MimeType();
    public string get_Encoding();
    public Warning[] get_Warnings();
    public String[] get_StreamIds();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.RenderCompletedEventHandler : MulticastDelegate {
    public RenderCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RenderCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RenderCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.RenderStreamCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public Byte[] Result { get; }
    public string Encoding { get; }
    public string MimeType { get; }
    internal RenderStreamCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public Byte[] get_Result();
    public string get_Encoding();
    public string get_MimeType();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.RenderStreamCompletedEventHandler : MulticastDelegate {
    public RenderStreamCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RenderStreamCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RenderStreamCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[WebServiceBindingAttribute]
[XmlIncludeAttribute("Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ParameterValueOrFieldReference")]
[ToolboxItemAttribute("False")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ReportExecutionService : SoapHttpClientProtocol {
    private TrustedUserHeader trustedUserHeaderValueField;
    private PrintControlClsidHeader printControlClsidHeaderValueField;
    private ServerInfoHeader serverInfoHeaderValueField;
    private SendOrPostCallback ListSecureMethodsOperationCompleted;
    private ExecutionHeader executionHeaderValueField;
    private SendOrPostCallback LoadReportOperationCompleted;
    private SendOrPostCallback LoadReport2OperationCompleted;
    private SendOrPostCallback LoadReportDefinitionOperationCompleted;
    private SendOrPostCallback LoadReportDefinition2OperationCompleted;
    private SendOrPostCallback SetExecutionCredentialsOperationCompleted;
    private SendOrPostCallback SetExecutionCredentials2OperationCompleted;
    private SendOrPostCallback SetExecutionParametersOperationCompleted;
    private SendOrPostCallback SetExecutionParameters2OperationCompleted;
    private SendOrPostCallback ResetExecutionOperationCompleted;
    private SendOrPostCallback ResetExecution2OperationCompleted;
    private SendOrPostCallback RenderOperationCompleted;
    private SendOrPostCallback Render2OperationCompleted;
    private SendOrPostCallback RenderStreamOperationCompleted;
    private SendOrPostCallback GetExecutionInfoOperationCompleted;
    private SendOrPostCallback GetExecutionInfo2OperationCompleted;
    private SendOrPostCallback GetDocumentMapOperationCompleted;
    private SendOrPostCallback LoadDrillthroughTargetOperationCompleted;
    private SendOrPostCallback LoadDrillthroughTarget2OperationCompleted;
    private SendOrPostCallback ToggleItemOperationCompleted;
    private SendOrPostCallback NavigateDocumentMapOperationCompleted;
    private SendOrPostCallback NavigateBookmarkOperationCompleted;
    private SendOrPostCallback FindStringOperationCompleted;
    private SendOrPostCallback SortOperationCompleted;
    private SendOrPostCallback Sort2OperationCompleted;
    private SendOrPostCallback GetRenderResourceOperationCompleted;
    private SendOrPostCallback ListRenderingExtensionsOperationCompleted;
    private SendOrPostCallback LogonUserOperationCompleted;
    private SendOrPostCallback LogoffOperationCompleted;
    private ListSecureMethodsCompletedEventHandler ListSecureMethodsCompleted;
    private LoadReportCompletedEventHandler LoadReportCompleted;
    private LoadReport2CompletedEventHandler LoadReport2Completed;
    private LoadReportDefinitionCompletedEventHandler LoadReportDefinitionCompleted;
    private LoadReportDefinition2CompletedEventHandler LoadReportDefinition2Completed;
    private SetExecutionCredentialsCompletedEventHandler SetExecutionCredentialsCompleted;
    private SetExecutionCredentials2CompletedEventHandler SetExecutionCredentials2Completed;
    private SetExecutionParametersCompletedEventHandler SetExecutionParametersCompleted;
    private SetExecutionParameters2CompletedEventHandler SetExecutionParameters2Completed;
    private ResetExecutionCompletedEventHandler ResetExecutionCompleted;
    private ResetExecution2CompletedEventHandler ResetExecution2Completed;
    private RenderCompletedEventHandler RenderCompleted;
    private Render2CompletedEventHandler Render2Completed;
    private RenderStreamCompletedEventHandler RenderStreamCompleted;
    private GetExecutionInfoCompletedEventHandler GetExecutionInfoCompleted;
    private GetExecutionInfo2CompletedEventHandler GetExecutionInfo2Completed;
    private GetDocumentMapCompletedEventHandler GetDocumentMapCompleted;
    private LoadDrillthroughTargetCompletedEventHandler LoadDrillthroughTargetCompleted;
    private LoadDrillthroughTarget2CompletedEventHandler LoadDrillthroughTarget2Completed;
    private ToggleItemCompletedEventHandler ToggleItemCompleted;
    private NavigateDocumentMapCompletedEventHandler NavigateDocumentMapCompleted;
    private NavigateBookmarkCompletedEventHandler NavigateBookmarkCompleted;
    private FindStringCompletedEventHandler FindStringCompleted;
    private SortCompletedEventHandler SortCompleted;
    private Sort2CompletedEventHandler Sort2Completed;
    private GetRenderResourceCompletedEventHandler GetRenderResourceCompleted;
    private ListRenderingExtensionsCompletedEventHandler ListRenderingExtensionsCompleted;
    private LogonUserCompletedEventHandler LogonUserCompleted;
    private LogoffCompletedEventHandler LogoffCompleted;
    public TrustedUserHeader TrustedUserHeaderValue { get; public set; }
    public PrintControlClsidHeader PrintControlClsidHeaderValue { get; public set; }
    public ServerInfoHeader ServerInfoHeaderValue { get; public set; }
    public ExecutionHeader ExecutionHeaderValue { get; public set; }
    public TrustedUserHeader get_TrustedUserHeaderValue();
    public void set_TrustedUserHeaderValue(TrustedUserHeader value);
    public PrintControlClsidHeader get_PrintControlClsidHeaderValue();
    public void set_PrintControlClsidHeaderValue(PrintControlClsidHeader value);
    public ServerInfoHeader get_ServerInfoHeaderValue();
    public void set_ServerInfoHeaderValue(ServerInfoHeader value);
    public ExecutionHeader get_ExecutionHeaderValue();
    public void set_ExecutionHeaderValue(ExecutionHeader value);
    public void add_ListSecureMethodsCompleted(ListSecureMethodsCompletedEventHandler value);
    public void remove_ListSecureMethodsCompleted(ListSecureMethodsCompletedEventHandler value);
    public void add_LoadReportCompleted(LoadReportCompletedEventHandler value);
    public void remove_LoadReportCompleted(LoadReportCompletedEventHandler value);
    public void add_LoadReport2Completed(LoadReport2CompletedEventHandler value);
    public void remove_LoadReport2Completed(LoadReport2CompletedEventHandler value);
    public void add_LoadReportDefinitionCompleted(LoadReportDefinitionCompletedEventHandler value);
    public void remove_LoadReportDefinitionCompleted(LoadReportDefinitionCompletedEventHandler value);
    public void add_LoadReportDefinition2Completed(LoadReportDefinition2CompletedEventHandler value);
    public void remove_LoadReportDefinition2Completed(LoadReportDefinition2CompletedEventHandler value);
    public void add_SetExecutionCredentialsCompleted(SetExecutionCredentialsCompletedEventHandler value);
    public void remove_SetExecutionCredentialsCompleted(SetExecutionCredentialsCompletedEventHandler value);
    public void add_SetExecutionCredentials2Completed(SetExecutionCredentials2CompletedEventHandler value);
    public void remove_SetExecutionCredentials2Completed(SetExecutionCredentials2CompletedEventHandler value);
    public void add_SetExecutionParametersCompleted(SetExecutionParametersCompletedEventHandler value);
    public void remove_SetExecutionParametersCompleted(SetExecutionParametersCompletedEventHandler value);
    public void add_SetExecutionParameters2Completed(SetExecutionParameters2CompletedEventHandler value);
    public void remove_SetExecutionParameters2Completed(SetExecutionParameters2CompletedEventHandler value);
    public void add_ResetExecutionCompleted(ResetExecutionCompletedEventHandler value);
    public void remove_ResetExecutionCompleted(ResetExecutionCompletedEventHandler value);
    public void add_ResetExecution2Completed(ResetExecution2CompletedEventHandler value);
    public void remove_ResetExecution2Completed(ResetExecution2CompletedEventHandler value);
    public void add_RenderCompleted(RenderCompletedEventHandler value);
    public void remove_RenderCompleted(RenderCompletedEventHandler value);
    public void add_Render2Completed(Render2CompletedEventHandler value);
    public void remove_Render2Completed(Render2CompletedEventHandler value);
    public void add_RenderStreamCompleted(RenderStreamCompletedEventHandler value);
    public void remove_RenderStreamCompleted(RenderStreamCompletedEventHandler value);
    public void add_GetExecutionInfoCompleted(GetExecutionInfoCompletedEventHandler value);
    public void remove_GetExecutionInfoCompleted(GetExecutionInfoCompletedEventHandler value);
    public void add_GetExecutionInfo2Completed(GetExecutionInfo2CompletedEventHandler value);
    public void remove_GetExecutionInfo2Completed(GetExecutionInfo2CompletedEventHandler value);
    public void add_GetDocumentMapCompleted(GetDocumentMapCompletedEventHandler value);
    public void remove_GetDocumentMapCompleted(GetDocumentMapCompletedEventHandler value);
    public void add_LoadDrillthroughTargetCompleted(LoadDrillthroughTargetCompletedEventHandler value);
    public void remove_LoadDrillthroughTargetCompleted(LoadDrillthroughTargetCompletedEventHandler value);
    public void add_LoadDrillthroughTarget2Completed(LoadDrillthroughTarget2CompletedEventHandler value);
    public void remove_LoadDrillthroughTarget2Completed(LoadDrillthroughTarget2CompletedEventHandler value);
    public void add_ToggleItemCompleted(ToggleItemCompletedEventHandler value);
    public void remove_ToggleItemCompleted(ToggleItemCompletedEventHandler value);
    public void add_NavigateDocumentMapCompleted(NavigateDocumentMapCompletedEventHandler value);
    public void remove_NavigateDocumentMapCompleted(NavigateDocumentMapCompletedEventHandler value);
    public void add_NavigateBookmarkCompleted(NavigateBookmarkCompletedEventHandler value);
    public void remove_NavigateBookmarkCompleted(NavigateBookmarkCompletedEventHandler value);
    public void add_FindStringCompleted(FindStringCompletedEventHandler value);
    public void remove_FindStringCompleted(FindStringCompletedEventHandler value);
    public void add_SortCompleted(SortCompletedEventHandler value);
    public void remove_SortCompleted(SortCompletedEventHandler value);
    public void add_Sort2Completed(Sort2CompletedEventHandler value);
    public void remove_Sort2Completed(Sort2CompletedEventHandler value);
    public void add_GetRenderResourceCompleted(GetRenderResourceCompletedEventHandler value);
    public void remove_GetRenderResourceCompleted(GetRenderResourceCompletedEventHandler value);
    public void add_ListRenderingExtensionsCompleted(ListRenderingExtensionsCompletedEventHandler value);
    public void remove_ListRenderingExtensionsCompleted(ListRenderingExtensionsCompletedEventHandler value);
    public void add_LogonUserCompleted(LogonUserCompletedEventHandler value);
    public void remove_LogonUserCompleted(LogonUserCompletedEventHandler value);
    public void add_LogoffCompleted(LogoffCompletedEventHandler value);
    public void remove_LogoffCompleted(LogoffCompletedEventHandler value);
    [SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapDocumentMethodAttribute]
public String[] ListSecureMethods();
    protected Object[] Invoke(string methodName, Object[] parameters);
    public IAsyncResult BeginListSecureMethods(AsyncCallback callback, object asyncState);
    public String[] EndListSecureMethods(IAsyncResult asyncResult);
    public void ListSecureMethodsAsync();
    public void ListSecureMethodsAsync(object userState);
    private void OnListSecureMethodsOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
[SoapHeaderAttribute]
public ExecutionInfo LoadReport(string Report, string HistoryID);
    public IAsyncResult BeginLoadReport(string Report, string HistoryID, AsyncCallback callback, object asyncState);
    public ExecutionInfo EndLoadReport(IAsyncResult asyncResult);
    public void LoadReportAsync(string Report, string HistoryID);
    public void LoadReportAsync(string Report, string HistoryID, object userState);
    private void OnLoadReportOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapDocumentMethodAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapHeaderAttribute]
[SoapHeaderAttribute]
public ExecutionInfo2 LoadReport2(string Report, string HistoryID);
    public IAsyncResult BeginLoadReport2(string Report, string HistoryID, AsyncCallback callback, object asyncState);
    public ExecutionInfo2 EndLoadReport2(IAsyncResult asyncResult);
    public void LoadReport2Async(string Report, string HistoryID);
    public void LoadReport2Async(string Report, string HistoryID, object userState);
    private void OnLoadReport2OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapDocumentMethodAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
public ExecutionInfo LoadReportDefinition(Byte[] Definition, Warning[]& warnings);
    public IAsyncResult BeginLoadReportDefinition(Byte[] Definition, AsyncCallback callback, object asyncState);
    public ExecutionInfo EndLoadReportDefinition(IAsyncResult asyncResult, Warning[]& warnings);
    public void LoadReportDefinitionAsync(Byte[] Definition);
    public void LoadReportDefinitionAsync(Byte[] Definition, object userState);
    private void OnLoadReportDefinitionOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
[SoapHeaderAttribute]
public ExecutionInfo2 LoadReportDefinition2(Byte[] Definition, Warning[]& warnings);
    public IAsyncResult BeginLoadReportDefinition2(Byte[] Definition, AsyncCallback callback, object asyncState);
    public ExecutionInfo2 EndLoadReportDefinition2(IAsyncResult asyncResult, Warning[]& warnings);
    public void LoadReportDefinition2Async(Byte[] Definition);
    public void LoadReportDefinition2Async(Byte[] Definition, object userState);
    private void OnLoadReportDefinition2OperationCompleted(object arg);
    [SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapDocumentMethodAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute]
public ExecutionInfo SetExecutionCredentials(DataSourceCredentials[] Credentials);
    public IAsyncResult BeginSetExecutionCredentials(DataSourceCredentials[] Credentials, AsyncCallback callback, object asyncState);
    public ExecutionInfo EndSetExecutionCredentials(IAsyncResult asyncResult);
    public void SetExecutionCredentialsAsync(DataSourceCredentials[] Credentials);
    public void SetExecutionCredentialsAsync(DataSourceCredentials[] Credentials, object userState);
    private void OnSetExecutionCredentialsOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapDocumentMethodAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
public ExecutionInfo2 SetExecutionCredentials2(DataSourceCredentials[] Credentials);
    public IAsyncResult BeginSetExecutionCredentials2(DataSourceCredentials[] Credentials, AsyncCallback callback, object asyncState);
    public ExecutionInfo2 EndSetExecutionCredentials2(IAsyncResult asyncResult);
    public void SetExecutionCredentials2Async(DataSourceCredentials[] Credentials);
    public void SetExecutionCredentials2Async(DataSourceCredentials[] Credentials, object userState);
    private void OnSetExecutionCredentials2OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapDocumentMethodAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
public ExecutionInfo SetExecutionParameters(ParameterValue[] Parameters, string ParameterLanguage);
    public IAsyncResult BeginSetExecutionParameters(ParameterValue[] Parameters, string ParameterLanguage, AsyncCallback callback, object asyncState);
    public ExecutionInfo EndSetExecutionParameters(IAsyncResult asyncResult);
    public void SetExecutionParametersAsync(ParameterValue[] Parameters, string ParameterLanguage);
    public void SetExecutionParametersAsync(ParameterValue[] Parameters, string ParameterLanguage, object userState);
    private void OnSetExecutionParametersOperationCompleted(object arg);
    [SoapDocumentMethodAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute]
public ExecutionInfo2 SetExecutionParameters2(ParameterValue[] Parameters, string ParameterLanguage);
    public IAsyncResult BeginSetExecutionParameters2(ParameterValue[] Parameters, string ParameterLanguage, AsyncCallback callback, object asyncState);
    public ExecutionInfo2 EndSetExecutionParameters2(IAsyncResult asyncResult);
    public void SetExecutionParameters2Async(ParameterValue[] Parameters, string ParameterLanguage);
    public void SetExecutionParameters2Async(ParameterValue[] Parameters, string ParameterLanguage, object userState);
    private void OnSetExecutionParameters2OperationCompleted(object arg);
    [SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute]
[SoapDocumentMethodAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
public ExecutionInfo ResetExecution();
    public IAsyncResult BeginResetExecution(AsyncCallback callback, object asyncState);
    public ExecutionInfo EndResetExecution(IAsyncResult asyncResult);
    public void ResetExecutionAsync();
    public void ResetExecutionAsync(object userState);
    private void OnResetExecutionOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo2 ResetExecution2();
    public IAsyncResult BeginResetExecution2(AsyncCallback callback, object asyncState);
    public ExecutionInfo2 EndResetExecution2(IAsyncResult asyncResult);
    public void ResetExecution2Async();
    public void ResetExecution2Async(object userState);
    private void OnResetExecution2OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapDocumentMethodAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
public Byte[] Render(string Format, string DeviceInfo, String& Extension, String& MimeType, String& Encoding, Warning[]& Warnings, String[]& StreamIds);
    public IAsyncResult BeginRender(string Format, string DeviceInfo, AsyncCallback callback, object asyncState);
    public Byte[] EndRender(IAsyncResult asyncResult, String& Extension, String& MimeType, String& Encoding, Warning[]& Warnings, String[]& StreamIds);
    public void RenderAsync(string Format, string DeviceInfo);
    public void RenderAsync(string Format, string DeviceInfo, object userState);
    private void OnRenderOperationCompleted(object arg);
    [SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapDocumentMethodAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapHeaderAttribute]
[SoapHeaderAttribute]
public Byte[] Render2(string Format, string DeviceInfo, PageCountMode PaginationMode, String& Extension, String& MimeType, String& Encoding, Warning[]& Warnings, String[]& StreamIds);
    public IAsyncResult BeginRender2(string Format, string DeviceInfo, PageCountMode PaginationMode, AsyncCallback callback, object asyncState);
    public Byte[] EndRender2(IAsyncResult asyncResult, String& Extension, String& MimeType, String& Encoding, Warning[]& Warnings, String[]& StreamIds);
    public void Render2Async(string Format, string DeviceInfo, PageCountMode PaginationMode);
    public void Render2Async(string Format, string DeviceInfo, PageCountMode PaginationMode, object userState);
    private void OnRender2OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapDocumentMethodAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapHeaderAttribute]
public Byte[] RenderStream(string Format, string StreamID, string DeviceInfo, String& Encoding, String& MimeType);
    public IAsyncResult BeginRenderStream(string Format, string StreamID, string DeviceInfo, AsyncCallback callback, object asyncState);
    public Byte[] EndRenderStream(IAsyncResult asyncResult, String& Encoding, String& MimeType);
    public void RenderStreamAsync(string Format, string StreamID, string DeviceInfo);
    public void RenderStreamAsync(string Format, string StreamID, string DeviceInfo, object userState);
    private void OnRenderStreamOperationCompleted(object arg);
    [SoapDocumentMethodAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
public ExecutionInfo GetExecutionInfo();
    public IAsyncResult BeginGetExecutionInfo(AsyncCallback callback, object asyncState);
    public ExecutionInfo EndGetExecutionInfo(IAsyncResult asyncResult);
    public void GetExecutionInfoAsync();
    public void GetExecutionInfoAsync(object userState);
    private void OnGetExecutionInfoOperationCompleted(object arg);
    [SoapDocumentMethodAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapHeaderAttribute]
public ExecutionInfo2 GetExecutionInfo2();
    public IAsyncResult BeginGetExecutionInfo2(AsyncCallback callback, object asyncState);
    public ExecutionInfo2 EndGetExecutionInfo2(IAsyncResult asyncResult);
    public void GetExecutionInfo2Async();
    public void GetExecutionInfo2Async(object userState);
    private void OnGetExecutionInfo2OperationCompleted(object arg);
    [SoapDocumentMethodAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapHeaderAttribute]
public DocumentMapNode GetDocumentMap();
    public IAsyncResult BeginGetDocumentMap(AsyncCallback callback, object asyncState);
    public DocumentMapNode EndGetDocumentMap(IAsyncResult asyncResult);
    public void GetDocumentMapAsync();
    public void GetDocumentMapAsync(object userState);
    private void OnGetDocumentMapOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapDocumentMethodAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
public ExecutionInfo LoadDrillthroughTarget(string DrillthroughID);
    public IAsyncResult BeginLoadDrillthroughTarget(string DrillthroughID, AsyncCallback callback, object asyncState);
    public ExecutionInfo EndLoadDrillthroughTarget(IAsyncResult asyncResult);
    public void LoadDrillthroughTargetAsync(string DrillthroughID);
    public void LoadDrillthroughTargetAsync(string DrillthroughID, object userState);
    private void OnLoadDrillthroughTargetOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute]
public ExecutionInfo2 LoadDrillthroughTarget2(string DrillthroughID);
    public IAsyncResult BeginLoadDrillthroughTarget2(string DrillthroughID, AsyncCallback callback, object asyncState);
    public ExecutionInfo2 EndLoadDrillthroughTarget2(IAsyncResult asyncResult);
    public void LoadDrillthroughTarget2Async(string DrillthroughID);
    public void LoadDrillthroughTarget2Async(string DrillthroughID, object userState);
    private void OnLoadDrillthroughTarget2OperationCompleted(object arg);
    [SoapDocumentMethodAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
public bool ToggleItem(string ToggleID);
    public IAsyncResult BeginToggleItem(string ToggleID, AsyncCallback callback, object asyncState);
    public bool EndToggleItem(IAsyncResult asyncResult);
    public void ToggleItemAsync(string ToggleID);
    public void ToggleItemAsync(string ToggleID, object userState);
    private void OnToggleItemOperationCompleted(object arg);
    [SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute]
[SoapDocumentMethodAttribute]
public int NavigateDocumentMap(string DocMapID);
    public IAsyncResult BeginNavigateDocumentMap(string DocMapID, AsyncCallback callback, object asyncState);
    public int EndNavigateDocumentMap(IAsyncResult asyncResult);
    public void NavigateDocumentMapAsync(string DocMapID);
    public void NavigateDocumentMapAsync(string DocMapID, object userState);
    private void OnNavigateDocumentMapOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapDocumentMethodAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
public int NavigateBookmark(string BookmarkID, String& UniqueName);
    public IAsyncResult BeginNavigateBookmark(string BookmarkID, AsyncCallback callback, object asyncState);
    public int EndNavigateBookmark(IAsyncResult asyncResult, String& UniqueName);
    public void NavigateBookmarkAsync(string BookmarkID);
    public void NavigateBookmarkAsync(string BookmarkID, object userState);
    private void OnNavigateBookmarkOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapDocumentMethodAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapHeaderAttribute]
public int FindString(int StartPage, int EndPage, string FindValue);
    public IAsyncResult BeginFindString(int StartPage, int EndPage, string FindValue, AsyncCallback callback, object asyncState);
    public int EndFindString(IAsyncResult asyncResult);
    public void FindStringAsync(int StartPage, int EndPage, string FindValue);
    public void FindStringAsync(int StartPage, int EndPage, string FindValue, object userState);
    private void OnFindStringOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public int Sort(string SortItem, SortDirectionEnum Direction, bool Clear, String& ReportItem, Int32& NumPages);
    public IAsyncResult BeginSort(string SortItem, SortDirectionEnum Direction, bool Clear, AsyncCallback callback, object asyncState);
    public int EndSort(IAsyncResult asyncResult, String& ReportItem, Int32& NumPages);
    public void SortAsync(string SortItem, SortDirectionEnum Direction, bool Clear);
    public void SortAsync(string SortItem, SortDirectionEnum Direction, bool Clear, object userState);
    private void OnSortOperationCompleted(object arg);
    [SoapDocumentMethodAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
public int Sort2(string SortItem, SortDirectionEnum Direction, bool Clear, PageCountMode PaginationMode, String& ReportItem, ExecutionInfo2& ExecutionInfo);
    public IAsyncResult BeginSort2(string SortItem, SortDirectionEnum Direction, bool Clear, PageCountMode PaginationMode, AsyncCallback callback, object asyncState);
    public int EndSort2(IAsyncResult asyncResult, String& ReportItem, ExecutionInfo2& ExecutionInfo);
    public void Sort2Async(string SortItem, SortDirectionEnum Direction, bool Clear, PageCountMode PaginationMode);
    public void Sort2Async(string SortItem, SortDirectionEnum Direction, bool Clear, PageCountMode PaginationMode, object userState);
    private void OnSort2OperationCompleted(object arg);
    [SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute]
public Byte[] GetRenderResource(string Format, string DeviceInfo, String& MimeType);
    public IAsyncResult BeginGetRenderResource(string Format, string DeviceInfo, AsyncCallback callback, object asyncState);
    public Byte[] EndGetRenderResource(IAsyncResult asyncResult, String& MimeType);
    public void GetRenderResourceAsync(string Format, string DeviceInfo);
    public void GetRenderResourceAsync(string Format, string DeviceInfo, object userState);
    private void OnGetRenderResourceOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public Extension[] ListRenderingExtensions();
    public IAsyncResult BeginListRenderingExtensions(AsyncCallback callback, object asyncState);
    public Extension[] EndListRenderingExtensions(IAsyncResult asyncResult);
    public void ListRenderingExtensionsAsync();
    public void ListRenderingExtensionsAsync(object userState);
    private void OnListRenderingExtensionsOperationCompleted(object arg);
    [SoapDocumentMethodAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute]
public void LogonUser(string userName, string password, string authority);
    public IAsyncResult BeginLogonUser(string userName, string password, string authority, AsyncCallback callback, object asyncState);
    public void EndLogonUser(IAsyncResult asyncResult);
    public void LogonUserAsync(string userName, string password, string authority);
    public void LogonUserAsync(string userName, string password, string authority, object userState);
    private void OnLogonUserOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapDocumentMethodAttribute]
[SoapHeaderAttribute]
public void Logoff();
    public IAsyncResult BeginLogoff(AsyncCallback callback, object asyncState);
    public void EndLogoff(IAsyncResult asyncResult);
    public void LogoffAsync();
    public void LogoffAsync(object userState);
    private void OnLogoffOperationCompleted(object arg);
    public void CancelAsync(object userState);
}
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[XmlTypeAttribute]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ReportMargins : object {
    private double topField;
    private double bottomField;
    private double leftField;
    private double rightField;
    public double Top { get; public set; }
    public double Bottom { get; public set; }
    public double Left { get; public set; }
    public double Right { get; public set; }
    public double get_Top();
    public void set_Top(double value);
    public double get_Bottom();
    public void set_Bottom(double value);
    public double get_Left();
    public void set_Left(double value);
    public double get_Right();
    public void set_Right(double value);
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ReportPaperSize : object {
    private double heightField;
    private double widthField;
    public double Height { get; public set; }
    public double Width { get; public set; }
    public double get_Height();
    public void set_Height(double value);
    public double get_Width();
    public void set_Width(double value);
}
[EditorBrowsableAttribute("1")]
[XmlTypeAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ReportParameter : object {
    private string nameField;
    private ParameterTypeEnum typeField;
    private bool typeFieldSpecified;
    private bool nullableField;
    private bool nullableFieldSpecified;
    private bool allowBlankField;
    private bool allowBlankFieldSpecified;
    private bool multiValueField;
    private bool multiValueFieldSpecified;
    private bool queryParameterField;
    private bool queryParameterFieldSpecified;
    private string promptField;
    private bool promptUserField;
    private bool promptUserFieldSpecified;
    private String[] dependenciesField;
    private bool validValuesQueryBasedField;
    private bool validValuesQueryBasedFieldSpecified;
    private ValidValue[] validValuesField;
    private bool defaultValuesQueryBasedField;
    private bool defaultValuesQueryBasedFieldSpecified;
    private String[] defaultValuesField;
    private ParameterStateEnum stateField;
    private bool stateFieldSpecified;
    private string errorMessageField;
    public string Name { get; public set; }
    public ParameterTypeEnum Type { get; public set; }
    [XmlIgnoreAttribute]
public bool TypeSpecified { get; public set; }
    public bool Nullable { get; public set; }
    [XmlIgnoreAttribute]
public bool NullableSpecified { get; public set; }
    public bool AllowBlank { get; public set; }
    [XmlIgnoreAttribute]
public bool AllowBlankSpecified { get; public set; }
    public bool MultiValue { get; public set; }
    [XmlIgnoreAttribute]
public bool MultiValueSpecified { get; public set; }
    public bool QueryParameter { get; public set; }
    [XmlIgnoreAttribute]
public bool QueryParameterSpecified { get; public set; }
    public string Prompt { get; public set; }
    public bool PromptUser { get; public set; }
    [XmlIgnoreAttribute]
public bool PromptUserSpecified { get; public set; }
    [XmlArrayItemAttribute("Dependency")]
public String[] Dependencies { get; public set; }
    public bool ValidValuesQueryBased { get; public set; }
    [XmlIgnoreAttribute]
public bool ValidValuesQueryBasedSpecified { get; public set; }
    public ValidValue[] ValidValues { get; public set; }
    public bool DefaultValuesQueryBased { get; public set; }
    [XmlIgnoreAttribute]
public bool DefaultValuesQueryBasedSpecified { get; public set; }
    [XmlArrayItemAttribute("Value")]
public String[] DefaultValues { get; public set; }
    public ParameterStateEnum State { get; public set; }
    [XmlIgnoreAttribute]
public bool StateSpecified { get; public set; }
    public string ErrorMessage { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public ParameterTypeEnum get_Type();
    public void set_Type(ParameterTypeEnum value);
    public bool get_TypeSpecified();
    public void set_TypeSpecified(bool value);
    public bool get_Nullable();
    public void set_Nullable(bool value);
    public bool get_NullableSpecified();
    public void set_NullableSpecified(bool value);
    public bool get_AllowBlank();
    public void set_AllowBlank(bool value);
    public bool get_AllowBlankSpecified();
    public void set_AllowBlankSpecified(bool value);
    public bool get_MultiValue();
    public void set_MultiValue(bool value);
    public bool get_MultiValueSpecified();
    public void set_MultiValueSpecified(bool value);
    public bool get_QueryParameter();
    public void set_QueryParameter(bool value);
    public bool get_QueryParameterSpecified();
    public void set_QueryParameterSpecified(bool value);
    public string get_Prompt();
    public void set_Prompt(string value);
    public bool get_PromptUser();
    public void set_PromptUser(bool value);
    public bool get_PromptUserSpecified();
    public void set_PromptUserSpecified(bool value);
    public String[] get_Dependencies();
    public void set_Dependencies(String[] value);
    public bool get_ValidValuesQueryBased();
    public void set_ValidValuesQueryBased(bool value);
    public bool get_ValidValuesQueryBasedSpecified();
    public void set_ValidValuesQueryBasedSpecified(bool value);
    public ValidValue[] get_ValidValues();
    public void set_ValidValues(ValidValue[] value);
    public bool get_DefaultValuesQueryBased();
    public void set_DefaultValuesQueryBased(bool value);
    public bool get_DefaultValuesQueryBasedSpecified();
    public void set_DefaultValuesQueryBasedSpecified(bool value);
    public String[] get_DefaultValues();
    public void set_DefaultValues(String[] value);
    public ParameterStateEnum get_State();
    public void set_State(ParameterStateEnum value);
    public bool get_StateSpecified();
    public void set_StateSpecified(bool value);
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ResetExecution2CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo2 Result { get; }
    internal ResetExecution2CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo2 get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ResetExecution2CompletedEventHandler : MulticastDelegate {
    public ResetExecution2CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ResetExecution2CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ResetExecution2CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ResetExecutionCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo Result { get; }
    internal ResetExecutionCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo get_Result();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ResetExecutionCompletedEventHandler : MulticastDelegate {
    public ResetExecutionCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ResetExecutionCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ResetExecutionCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.RSExecutionConnection : ReportExecutionService {
    internal static string SoapEndpoint;
    private string m_secureServerUrl;
    private string m_nonsecureServerUrl;
    private bool m_currentlyUsingSSL;
    private bool m_alwaysUseSSL;
    private bool m_failedUsingKatmai;
    private EndpointVersion m_endpointVersion;
    private SecureMethodsList m_secureMethods;
    private bool m_unsafeHeaderServerIsIIS5;
    internal string UrlForRender { get; }
    private bool CanUseKatmaiMethods { get; }
    public RSExecutionConnection(string reportServerLocation, EndpointVersion version);
    public void ValidateConnection();
    private void SetConnectionSSLForMethod(string methodname);
    private void SetConnectionSSL(bool useSSL);
    private void InitializeReportServerUrl(string reportServerLocation);
    internal string GetSoapURL(bool useSSL);
    internal string GetServerURL(bool useSSL);
    internal string get_UrlForRender();
    protected virtual WebRequest GetWebRequest(Uri uri);
    protected virtual WebResponse GetWebResponse(WebRequest request);
    protected virtual void OnSoapException(SoapException e);
    private String[] GetSecureMethods();
    private bool IsSecureMethod(string methodname);
    private bool get_CanUseKatmaiMethods();
    private bool CheckForDownlevelRetry(SoapException e);
    private void MarkAsFailedUsingKatmai();
    public ExecutionInfo LoadReport(string Report, string HistoryID);
    public ExecutionInfo LoadReportDefinition(Byte[] Definition, Warning[]& warnings);
    public ExecutionInfo SetExecutionCredentials(DataSourceCredentials[] Credentials);
    public ExecutionInfo SetExecutionParameters(ParameterValue[] Parameters, string ParameterLanguage);
    public ExecutionInfo ResetExecution();
    public Byte[] Render(string Format, string DeviceInfo, String& Extension, String& MimeType, String& Encoding, Warning[]& Warnings, String[]& StreamIds);
    public Byte[] Render(string Format, string DeviceInfo, PageCountMode PaginationMode, String& Extension, String& MimeType, String& Encoding, Warning[]& Warnings, String[]& StreamIds);
    public Byte[] RenderStream(string Format, string StreamID, string DeviceInfo, String& Encoding, String& MimeType);
    public ExecutionInfo GetExecutionInfo();
    public DocumentMapNode GetDocumentMap();
    public ExecutionInfo LoadDrillthroughTarget(string DrillthroughID);
    public bool ToggleItem(string ToggleID);
    public int NavigateDocumentMap(string DocMapID);
    public int NavigateBookmark(string BookmarkID, String& UniqueName);
    public int Sort(string SortItem, SortDirectionEnum Direction, bool Clear, String& ReportItem, Int32& NumPages);
    public int Sort(string SortItem, SortDirectionEnum Direction, bool Clear, PageCountMode PaginationMode, String& ReportItem, ExecutionInfo& ExecutionInfo, Int32& NumPages);
    public int FindString(int startPage, int endPage, string findValue);
    public Byte[] GetRenderResource(string Format, string DeviceInfo, String& MimeType);
    public Extension[] ListRenderingExtensions();
    public void LogonUser(string userName, string password, string authority);
    public void Logoff();
    [CompilerGeneratedAttribute]
private ExecutionInfo <ResetExecution>b__10();
    [CompilerGeneratedAttribute]
private ExecutionInfo <ResetExecution>b__11();
    [CompilerGeneratedAttribute]
private ExecutionInfo <GetExecutionInfo>b__19();
    [CompilerGeneratedAttribute]
private ExecutionInfo <GetExecutionInfo>b__1a();
    [CompilerGeneratedAttribute]
private DocumentMapNode <GetDocumentMap>b__1b();
    [CompilerGeneratedAttribute]
private Extension[] <ListRenderingExtensions>b__36();
    [CompilerGeneratedAttribute]
private int <Logoff>b__3a();
}
[XmlRootAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ServerInfoHeader : SoapHeader {
    private string reportServerVersionNumberField;
    private string reportServerEditionField;
    private string reportServerVersionField;
    private string reportServerDateTimeField;
    private XmlAttribute[] anyAttrField;
    public string ReportServerVersionNumber { get; public set; }
    public string ReportServerEdition { get; public set; }
    public string ReportServerVersion { get; public set; }
    public string ReportServerDateTime { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] AnyAttr { get; public set; }
    public string get_ReportServerVersionNumber();
    public void set_ReportServerVersionNumber(string value);
    public string get_ReportServerEdition();
    public void set_ReportServerEdition(string value);
    public string get_ReportServerVersion();
    public void set_ReportServerVersion(string value);
    public string get_ReportServerDateTime();
    public void set_ReportServerDateTime(string value);
    public XmlAttribute[] get_AnyAttr();
    public void set_AnyAttr(XmlAttribute[] value);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionCredentials2CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo2 Result { get; }
    internal SetExecutionCredentials2CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo2 get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionCredentials2CompletedEventHandler : MulticastDelegate {
    public SetExecutionCredentials2CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SetExecutionCredentials2CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SetExecutionCredentials2CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DesignerCategoryAttribute("code")]
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionCredentialsCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo Result { get; }
    internal SetExecutionCredentialsCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo get_Result();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionCredentialsCompletedEventHandler : MulticastDelegate {
    public SetExecutionCredentialsCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SetExecutionCredentialsCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SetExecutionCredentialsCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionParameters2CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo2 Result { get; }
    internal SetExecutionParameters2CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo2 get_Result();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionParameters2CompletedEventHandler : MulticastDelegate {
    public SetExecutionParameters2CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SetExecutionParameters2CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SetExecutionParameters2CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DebuggerStepThroughAttribute]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionParametersCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo Result { get; }
    internal SetExecutionParametersCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo get_Result();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionParametersCompletedEventHandler : MulticastDelegate {
    public SetExecutionParametersCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SetExecutionParametersCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SetExecutionParametersCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.Sort2CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public int Result { get; }
    public string ReportItem { get; }
    public ExecutionInfo2 ExecutionInfo { get; }
    internal Sort2CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public int get_Result();
    public string get_ReportItem();
    public ExecutionInfo2 get_ExecutionInfo();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.Sort2CompletedEventHandler : MulticastDelegate {
    public Sort2CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, Sort2CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, Sort2CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.SortCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public int Result { get; }
    public string ReportItem { get; }
    public int NumPages { get; }
    internal SortCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public int get_Result();
    public string get_ReportItem();
    public int get_NumPages();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.SortCompletedEventHandler : MulticastDelegate {
    public SortCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SortCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SortCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public enum Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.SortDirectionEnum : Enum {
    public int value__;
    public static SortDirectionEnum None;
    public static SortDirectionEnum Ascending;
    public static SortDirectionEnum Descending;
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ToggleItemCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public bool Result { get; }
    internal ToggleItemCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public bool get_Result();
}
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ToggleItemCompletedEventHandler : MulticastDelegate {
    public ToggleItemCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToggleItemCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToggleItemCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.TrustedUserHeader : SoapHeader {
    private string userNameField;
    private Byte[] userTokenField;
    private XmlAttribute[] anyAttrField;
    public string UserName { get; public set; }
    [XmlElementAttribute]
public Byte[] UserToken { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] AnyAttr { get; public set; }
    public string get_UserName();
    public void set_UserName(string value);
    public Byte[] get_UserToken();
    public void set_UserToken(Byte[] value);
    public XmlAttribute[] get_AnyAttr();
    public void set_AnyAttr(XmlAttribute[] value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.ValidValue : object {
    private string labelField;
    private string valueField;
    public string Label { get; public set; }
    public string Value { get; public set; }
    public string get_Label();
    public void set_Label(string value);
    public string get_Value();
    public void set_Value(string value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.Reporting.WebForms.Internal.Soap.ReportingServices2005.Execution.Warning : object {
    private string codeField;
    private string severityField;
    private string objectNameField;
    private string objectTypeField;
    private string messageField;
    public string Code { get; public set; }
    public string Severity { get; public set; }
    public string ObjectName { get; public set; }
    public string ObjectType { get; public set; }
    public string Message { get; public set; }
    public string get_Code();
    public void set_Code(string value);
    public string get_Severity();
    public void set_Severity(string value);
    public string get_ObjectName();
    public void set_ObjectName(string value);
    public string get_ObjectType();
    public void set_ObjectType(string value);
    public string get_Message();
    public void set_Message(string value);
}
internal class Microsoft.Reporting.WebForms.IntlDate : object {
    private int m_Year;
    private int m_Month;
    private int m_Day;
    private int m_Era;
    private int m_Jday;
    private SPCalendarType m_CalendarType;
    public int Year { get; public set; }
    public int Month { get; public set; }
    public int Day { get; public set; }
    public int Era { get; public set; }
    public int JDay { get; public set; }
    public SPCalendarType CalendarType { get; public set; }
    public int DayOfWeek { get; }
    public IntlDate(int year, int month, int day);
    public IntlDate(int year, int month, int day, SPCalendarType calendarType);
    public IntlDate(int year, int month, int day, int era, SPCalendarType calendarType);
    public IntlDate(int julianDay);
    public IntlDate(int julianDay, SPCalendarType calendarType);
    public int get_Year();
    public void set_Year(int value);
    public int get_Month();
    public void set_Month(int value);
    public int get_Day();
    public void set_Day(int value);
    public int get_Era();
    public void set_Era(int value);
    public int get_JDay();
    public void set_JDay(int value);
    public SPCalendarType get_CalendarType();
    public void set_CalendarType(SPCalendarType value);
    public bool IsYearLeap();
    public int MonthsInYear();
    public int DaysInMonth();
    public int get_DayOfWeek();
    public void AddDays(int days);
    internal void Init(int year, int month, int day, SPCalendarType calendarType);
    internal void Init(int year, int month, int day, int era, SPCalendarType calendarType);
    internal void Init(int julianDay, SPCalendarType calendarType);
}
public class Microsoft.Reporting.WebForms.InvalidConfigFileTypeException : ConfigurationErrorsException {
    internal InvalidConfigFileTypeException(string typeName);
    internal InvalidConfigFileTypeException(string typeName, string expectedTypeName);
    private InvalidConfigFileTypeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Reporting.WebForms.InvalidTemporaryStorageStreamException : ConfigurationErrorsException {
    private InvalidTemporaryStorageStreamException(SerializationInfo info, StreamingContext context);
}
internal interface Microsoft.Reporting.WebForms.IParameterSupplier {
    public bool IsReadyForConnection { get; }
    public bool IsQueryExecutionAllowed { get; }
    public abstract virtual bool get_IsReadyForConnection();
    public abstract virtual bool get_IsQueryExecutionAllowed();
    public abstract virtual ReportParameterInfoCollection GetParameters();
    public abstract virtual void SetParameters(IEnumerable`1<ReportParameter> parameters);
    public abstract virtual ReportDataSourceInfoCollection GetDataSources(Boolean& allCredentialsSatisfied);
    public abstract virtual void SetDataSourceCredentials(DataSourceCredentialsCollection credentials);
}
internal interface Microsoft.Reporting.WebForms.IPublicViewState {
    public abstract virtual void LoadViewState(object viewState);
    public abstract virtual object SaveViewState();
}
internal interface Microsoft.Reporting.WebForms.IReportExecutionService {
    unknown int Timeout {public set; }
    public abstract virtual ExecutionInfo GetExecutionInfo();
    public abstract virtual ExecutionInfo ResetExecution();
    public abstract virtual ExecutionInfo LoadReport(string report, string historyId);
    public abstract virtual ExecutionInfo LoadReportDefinition(Byte[] definition);
    public abstract virtual DocumentMapNode GetDocumentMap(string rootLabel);
    public abstract virtual RenderingExtension[] ListRenderingExtensions();
    public abstract virtual ExecutionInfo SetExecutionCredentials(IEnumerable`1<DataSourceCredentials> credentials);
    public abstract virtual ExecutionInfo SetExecutionParameters(IEnumerable`1<ReportParameter> parameters, string parameterLanguage);
    public abstract virtual Byte[] Render(string format, string deviceInfo, PageCountMode paginationMode, String& extension, String& mimeType, String& encoding, Warning[]& warnings, String[]& streamIds);
    public abstract virtual void Render(AbortState abortState, string reportPath, string executionId, string historyId, string format, XmlNodeList deviceInfo, NameValueCollection urlAccessParameters, Stream reportStream, String& mimeType, String& fileNameExtension);
    public abstract virtual Byte[] RenderStream(string format, string streamId, string deviceInfo, String& encoding, String& mimeType);
    public abstract virtual int FindString(int startPage, int endPage, string findValue);
    public abstract virtual void ToggleItem(string toggleId);
    public abstract virtual int NavigateBookmark(string bookmarkId, String& uniqueName);
    public abstract virtual int NavigateDocumentMap(string documentMapId);
    public abstract virtual ExecutionInfo LoadDrillthroughTarget(string drillthroughId);
    public abstract virtual int Sort(string sortItem, SortOrder direction, bool clear, PageCountMode paginationMode, String& reportItem, ExecutionInfo& executionInfo, Int32& numPages);
    public abstract virtual string GetPrintControlClsid(ClientArchitecture arch);
    public abstract virtual bool IsPrintCabSupported(ClientArchitecture arch);
    public abstract virtual void WritePrintCab(ClientArchitecture arch, Stream stream);
    public abstract virtual Byte[] GetStyleSheet(string styleSheetName, bool isImage, String& mimeType);
    public abstract virtual void SetExecutionId(string executionId);
    public abstract virtual string GetServerVersion();
    public abstract virtual void set_Timeout(int value);
}
public interface Microsoft.Reporting.WebForms.IReportServerConnection {
    public Uri ReportServerUrl { get; }
    public int Timeout { get; }
    public abstract virtual Uri get_ReportServerUrl();
    public abstract virtual int get_Timeout();
}
public interface Microsoft.Reporting.WebForms.IReportServerConnection2 {
    public IEnumerable`1<Cookie> Cookies { get; }
    public IEnumerable`1<string> Headers { get; }
    public abstract virtual IEnumerable`1<Cookie> get_Cookies();
    public abstract virtual IEnumerable`1<string> get_Headers();
}
public interface Microsoft.Reporting.WebForms.IReportServerCredentials {
    public WindowsIdentity ImpersonationUser { get; }
    public ICredentials NetworkCredentials { get; }
    public abstract virtual WindowsIdentity get_ImpersonationUser();
    public abstract virtual ICredentials get_NetworkCredentials();
    public abstract virtual bool GetFormsCredentials(Cookie& authCookie, String& userName, String& password, String& authority);
}
public interface Microsoft.Reporting.WebForms.IReportViewerMessages {
    public string DocumentMapButtonToolTip { get; }
    public string ParameterAreaButtonToolTip { get; }
    public string FirstPageButtonToolTip { get; }
    public string PreviousPageButtonToolTip { get; }
    public string CurrentPageTextBoxToolTip { get; }
    public string PageOf { get; }
    public string NextPageButtonToolTip { get; }
    public string LastPageButtonToolTip { get; }
    public string BackButtonToolTip { get; }
    public string RefreshButtonToolTip { get; }
    public string PrintButtonToolTip { get; }
    public string ExportButtonToolTip { get; }
    public string ZoomControlToolTip { get; }
    public string SearchTextBoxToolTip { get; }
    public string FindButtonToolTip { get; }
    public string FindNextButtonToolTip { get; }
    public string ZoomToPageWidth { get; }
    public string ZoomToWholePage { get; }
    public string FindButtonText { get; }
    public string FindNextButtonText { get; }
    public string ViewReportButtonText { get; }
    public string ProgressText { get; }
    public string TextNotFound { get; }
    public string NoMoreMatches { get; }
    public string ChangeCredentialsText { get; }
    public string NullCheckBoxText { get; }
    public string NullValueText { get; }
    public string TrueValueText { get; }
    public string FalseValueText { get; }
    public string SelectAValue { get; }
    public string UserNamePrompt { get; }
    public string PasswordPrompt { get; }
    public string SelectAll { get; }
    public string TodayIs { get; }
    public string ExportFormatsToolTip { get; }
    public string ExportButtonText { get; }
    public string SelectFormat { get; }
    public string DocumentMap { get; }
    public string InvalidPageNumber { get; }
    public string ChangeCredentialsToolTip { get; }
    public abstract virtual string get_DocumentMapButtonToolTip();
    public abstract virtual string get_ParameterAreaButtonToolTip();
    public abstract virtual string get_FirstPageButtonToolTip();
    public abstract virtual string get_PreviousPageButtonToolTip();
    public abstract virtual string get_CurrentPageTextBoxToolTip();
    public abstract virtual string get_PageOf();
    public abstract virtual string get_NextPageButtonToolTip();
    public abstract virtual string get_LastPageButtonToolTip();
    public abstract virtual string get_BackButtonToolTip();
    public abstract virtual string get_RefreshButtonToolTip();
    public abstract virtual string get_PrintButtonToolTip();
    public abstract virtual string get_ExportButtonToolTip();
    public abstract virtual string get_ZoomControlToolTip();
    public abstract virtual string get_SearchTextBoxToolTip();
    public abstract virtual string get_FindButtonToolTip();
    public abstract virtual string get_FindNextButtonToolTip();
    public abstract virtual string get_ZoomToPageWidth();
    public abstract virtual string get_ZoomToWholePage();
    public abstract virtual string get_FindButtonText();
    public abstract virtual string get_FindNextButtonText();
    public abstract virtual string get_ViewReportButtonText();
    public abstract virtual string get_ProgressText();
    public abstract virtual string get_TextNotFound();
    public abstract virtual string get_NoMoreMatches();
    public abstract virtual string get_ChangeCredentialsText();
    public abstract virtual string get_NullCheckBoxText();
    public abstract virtual string get_NullValueText();
    public abstract virtual string get_TrueValueText();
    public abstract virtual string get_FalseValueText();
    public abstract virtual string get_SelectAValue();
    public abstract virtual string get_UserNamePrompt();
    public abstract virtual string get_PasswordPrompt();
    public abstract virtual string get_SelectAll();
    public abstract virtual string get_TodayIs();
    public abstract virtual string get_ExportFormatsToolTip();
    public abstract virtual string get_ExportButtonText();
    public abstract virtual string get_SelectFormat();
    public abstract virtual string get_DocumentMap();
    public abstract virtual string get_InvalidPageNumber();
    public abstract virtual string get_ChangeCredentialsToolTip();
}
public interface Microsoft.Reporting.WebForms.IReportViewerMessages2 {
    public string ClientNoScript { get; }
    public string ClientPrintControlLoadFailed { get; }
    public string ParameterDropDownToolTip { get; }
    public abstract virtual string GetLocalizedNameForRenderingExtension(string format);
    public abstract virtual string ParameterMissingSelectionError(string parameterPrompt);
    public abstract virtual string ParameterMissingValueError(string parameterPrompt);
    public abstract virtual string CredentialMissingUserNameError(string dataSourcePrompt);
    public abstract virtual string get_ClientNoScript();
    public abstract virtual string get_ClientPrintControlLoadFailed();
    public abstract virtual string get_ParameterDropDownToolTip();
}
public interface Microsoft.Reporting.WebForms.IReportViewerMessages3 {
    public string CancelLinkText { get; }
    public string CalendarLoading { get; }
    public abstract virtual string TotalPages(int pageCount, PageCountMode pageCountMode);
    public abstract virtual string get_CancelLinkText();
    public abstract virtual string get_CalendarLoading();
}
internal interface Microsoft.Reporting.WebForms.IReportViewerStyles {
    public bool GetFontFromCss { get; }
    public FontInfo Font { get; }
    public Color BackColor { get; }
    public Color HoverBackColor { get; }
    public Color SplitterBackColor { get; }
    public string NormalButtonBorderValue { get; }
    public Unit NormalButtonBorderWidth { get; }
    public string HoverButtonBorderValue { get; }
    public Color LinkActiveColor { get; }
    public Color LinkDisabledColor { get; }
    public Color LinkActiveHoverColor { get; }
    public string InternalBorderValue { get; }
    public FontInfo WaitMessageFont { get; }
    public FontInfo WaitMessageCancelFont { get; }
    public string HoverButtonNormal { get; }
    public string HoverButtonHover { get; }
    public string HoverButtonDisabled { get; }
    public string Image { get; }
    public string ToolbarButtonContainer { get; }
    public string ToolbarBackground { get; }
    public string ToolbarGroup { get; }
    public string ToolbarGroupSpacer { get; }
    public string ToolbarGroupShortSpacer { get; }
    public string ToolbarInterGroupSpacing { get; }
    public string ToolbarText { get; }
    public string ToolbarPageNav { get; }
    public string ToolbarCurrentPage { get; }
    public string ToolbarRefresh { get; }
    public string ToolbarZoom { get; }
    public string ToolbarFind { get; }
    public string ToolbarExport { get; }
    public string ToolbarPrint { get; }
    public string ToolbarAtomDataFeed { get; }
    public string ToolbarParams { get; }
    public string LinkActive { get; }
    public string LinkDisabled { get; }
    public string SplitterNormal { get; }
    public string SplitterHover { get; }
    public string ViewerAreaBackground { get; }
    public string CheckBox { get; }
    public string ToolbarTextBox { get; }
    public string ParameterTextBox { get; }
    public string ParameterDisabledTextBox { get; }
    public string ParameterContainer { get; }
    public string EmptyDropDown { get; }
    public string ViewReportContainer { get; }
    public string ParameterLabel { get; }
    public string ParameterInput { get; }
    public string ParameterColumnSpacer { get; }
    public string MultiValueValidValueDropDown { get; }
    public string DocMapAndReportFrame { get; }
    public string WaitControlBackground { get; }
    public string WaitCell { get; }
    public string WaitText { get; }
    public string CancelLinkDiv { get; }
    public string CancelLinkText { get; }
    public string DocMapHeader { get; }
    public string DocMapContent { get; }
    public abstract virtual bool get_GetFontFromCss();
    public abstract virtual FontInfo get_Font();
    public abstract virtual Color get_BackColor();
    public abstract virtual Color get_HoverBackColor();
    public abstract virtual Color get_SplitterBackColor();
    public abstract virtual string get_NormalButtonBorderValue();
    public abstract virtual Unit get_NormalButtonBorderWidth();
    public abstract virtual string get_HoverButtonBorderValue();
    public abstract virtual Color get_LinkActiveColor();
    public abstract virtual Color get_LinkDisabledColor();
    public abstract virtual Color get_LinkActiveHoverColor();
    public abstract virtual string get_InternalBorderValue();
    public abstract virtual void AddInternalBorderAttributes(HtmlTextWriter writer, string direction);
    public abstract virtual FontInfo get_WaitMessageFont();
    public abstract virtual FontInfo get_WaitMessageCancelFont();
    public abstract virtual string get_HoverButtonNormal();
    public abstract virtual string get_HoverButtonHover();
    public abstract virtual string get_HoverButtonDisabled();
    public abstract virtual string get_Image();
    public abstract virtual string get_ToolbarButtonContainer();
    public abstract virtual string get_ToolbarBackground();
    public abstract virtual string get_ToolbarGroup();
    public abstract virtual string get_ToolbarGroupSpacer();
    public abstract virtual string get_ToolbarGroupShortSpacer();
    public abstract virtual string get_ToolbarInterGroupSpacing();
    public abstract virtual string get_ToolbarText();
    public abstract virtual string get_ToolbarPageNav();
    public abstract virtual string get_ToolbarCurrentPage();
    public abstract virtual string get_ToolbarRefresh();
    public abstract virtual string get_ToolbarZoom();
    public abstract virtual string get_ToolbarFind();
    public abstract virtual string get_ToolbarExport();
    public abstract virtual string get_ToolbarPrint();
    public abstract virtual string get_ToolbarAtomDataFeed();
    public abstract virtual string get_ToolbarParams();
    public abstract virtual string get_LinkActive();
    public abstract virtual string get_LinkDisabled();
    public abstract virtual string get_SplitterNormal();
    public abstract virtual string get_SplitterHover();
    public abstract virtual string get_ViewerAreaBackground();
    public abstract virtual string get_CheckBox();
    public abstract virtual string get_ToolbarTextBox();
    public abstract virtual string get_ParameterTextBox();
    public abstract virtual string get_ParameterDisabledTextBox();
    public abstract virtual string get_ParameterContainer();
    public abstract virtual string get_EmptyDropDown();
    public abstract virtual string get_ViewReportContainer();
    public abstract virtual string get_ParameterLabel();
    public abstract virtual string get_ParameterInput();
    public abstract virtual string get_ParameterColumnSpacer();
    public abstract virtual string get_MultiValueValidValueDropDown();
    public abstract virtual string get_DocMapAndReportFrame();
    public abstract virtual string get_WaitControlBackground();
    public abstract virtual string get_WaitCell();
    public abstract virtual string get_WaitText();
    public abstract virtual string get_CancelLinkDiv();
    public abstract virtual string get_CancelLinkText();
    public abstract virtual string get_DocMapHeader();
    public abstract virtual string get_DocMapContent();
}
internal interface Microsoft.Reporting.WebForms.ISPCalendar {
    public abstract virtual bool IsSupportedYear(int year);
    public abstract virtual bool IsSupportedMonth(int year, int month);
    public abstract virtual bool IsSupportedDate(SimpleDate& di);
    public abstract virtual bool IsDateValid(SimpleDate& di, int iAdvance, int jDayCurrent);
    public abstract virtual bool IsSupportedJulianDay(int JDay);
    public abstract virtual int DateToJulianDay(SimpleDate& di, int iAdvance, int jDayCurrent);
    public abstract virtual void JulianDayToDate(int jDay, SimpleDate& di, int iAdvance, int jDayCurrent);
    public abstract virtual bool IsYearLeap(int year);
    public abstract virtual bool IsYearLeap(int year, int era);
    public abstract virtual int MonthsInYear(SimpleDate& di);
    public abstract virtual int DaysInMonth(SimpleDate& di);
    public abstract virtual int DaysInMonth(SimpleDate& di, int iAdvance);
    public abstract virtual int GetEraOffset(int era);
    public abstract virtual int GetEraJulianDay(int era);
}
public interface Microsoft.Reporting.WebForms.ITemporaryStorage {
    public abstract virtual Stream CreateTemporaryStream();
}
internal static class Microsoft.Reporting.WebForms.JavaScriptHelper : object {
    internal static string StringEscape(string input, char quoteChar);
    internal static string StringEscapeSingleQuote(string input);
    internal static string JavaScriptStringEscape(string input, char quoteChar);
    internal static string JavaScriptStringEscapeSingleQuote(string input);
    internal static string FormatAsFunction(StringBuilder functionBody);
    internal static string FormatAsFunction(string functionBody);
    internal static string MakeLiteral(string input);
}
internal class Microsoft.Reporting.WebForms.LocalDataRetrievalFromDataSet : LocalDataRetrieval {
    private GetSubReportDataSetCallback m_subreportDataCallback;
    unknown GetSubReportDataSetCallback SubReportDataSetCallback {public set; }
    public bool SupportsQueries { get; }
    public void set_SubReportDataSetCallback(GetSubReportDataSetCallback value);
    public virtual bool get_SupportsQueries();
    public virtual ProcessingContext CreateProcessingContext(PreviewItemContext itemContext, ParameterInfoCollection parameters, IEnumerable dataSources, RuntimeDataSourceInfoCollection dataSourceInfoColl, RuntimeDataSetInfoCollection dataSetInfoColl, SharedDataSetCompiler sharedDataSetCompiler, DatasourceCredentialsCollection credentials, OnDemandSubReportCallback subReportCallback, IGetResource getResourceFunction, IChunkFactory chunkFactory, ReportRuntimeSetup runtimeSetup, CreateAndRegisterStream createStreamCallback);
}
internal static class Microsoft.Reporting.WebForms.LocalHtmlRenderer : object {
    private static string m_htmlMimeType;
    public static Byte[] GetResource(string name, String& mimeType);
    internal static HtmlTextWriter CreateWriter(string streamName, string mimeType, CreateAndRegisterStream createStreamCallback, StreamOper streamOper);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
private static Stream CreateHTMLStream(string streamName, string mimeType, CreateAndRegisterStream createStreamCallback, StreamOper streamOper);
    public static void Render(NameValueCollection deviceInfo, PageCountMode pageCountMode, ReportControlSession reportControlSession, CreateAndRegisterStream streamCallback, String& scrollScript, String& pageStyle);
    public static string GetStyleStreamName(int pageNumber);
}
internal class Microsoft.Reporting.WebForms.LocalizationHelper : object {
    private static LocalizationHelper m_theInstance;
    private static object m_lockObject;
    public static IReportViewerMessages3 Current { get; }
    private IReportViewerMessages2 ReportViewerMessages2 { get; }
    private IReportViewerMessages3 ReportViewerMessages3 { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.DocumentMapButtonToolTip { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.ParameterAreaButtonToolTip { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.FirstPageButtonToolTip { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.PreviousPageButtonToolTip { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.CurrentPageTextBoxToolTip { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.PageOf { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.NextPageButtonToolTip { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.LastPageButtonToolTip { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.BackButtonToolTip { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.RefreshButtonToolTip { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.PrintButtonToolTip { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.ExportButtonToolTip { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.ZoomControlToolTip { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.SearchTextBoxToolTip { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.FindButtonToolTip { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.FindNextButtonToolTip { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.ZoomToPageWidth { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.ZoomToWholePage { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.FindButtonText { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.FindNextButtonText { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.ViewReportButtonText { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.ProgressText { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.TextNotFound { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.NoMoreMatches { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.ChangeCredentialsText { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.NullCheckBoxText { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.NullValueText { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.TrueValueText { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.FalseValueText { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.SelectAValue { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.UserNamePrompt { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.PasswordPrompt { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.SelectAll { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.TodayIs { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.ExportFormatsToolTip { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.ExportButtonText { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.SelectFormat { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.DocumentMap { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.InvalidPageNumber { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerMessages.ChangeCredentialsToolTip { get; }
    public string ClientNoScript { get; }
    public string ClientPrintControlLoadFailed { get; }
    public string ParameterDropDownToolTip { get; }
    public string CancelLinkText { get; }
    public string CalendarLoading { get; }
    private static LocalizationHelper();
    public static IReportViewerMessages3 get_Current();
    private static string GetLocalizedString(string builtinString, string customString);
    private IReportViewerMessages2 get_ReportViewerMessages2();
    private IReportViewerMessages3 get_ReportViewerMessages3();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_DocumentMapButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_ParameterAreaButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_FirstPageButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_PreviousPageButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_CurrentPageTextBoxToolTip();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_PageOf();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_NextPageButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_LastPageButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_BackButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_RefreshButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_PrintButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_ExportButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_ZoomControlToolTip();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_SearchTextBoxToolTip();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_FindButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_FindNextButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_ZoomToPageWidth();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_ZoomToWholePage();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_FindButtonText();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_FindNextButtonText();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_ViewReportButtonText();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_ProgressText();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_TextNotFound();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_NoMoreMatches();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_ChangeCredentialsText();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_NullCheckBoxText();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_NullValueText();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_TrueValueText();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_FalseValueText();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_SelectAValue();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_UserNamePrompt();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_PasswordPrompt();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_SelectAll();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_TodayIs();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_ExportFormatsToolTip();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_ExportButtonText();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_SelectFormat();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_DocumentMap();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_InvalidPageNumber();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages.get_ChangeCredentialsToolTip();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages2.GetLocalizedNameForRenderingExtension(string format);
    public string GetLocalizedNameForRenderingExtension(RenderingExtension ext);
    public sealed virtual string ParameterMissingSelectionError(string parameterPrompt);
    public sealed virtual string ParameterMissingValueError(string parameterPrompt);
    public sealed virtual string CredentialMissingUserNameError(string dataSourcePrompt);
    public sealed virtual string get_ClientNoScript();
    public sealed virtual string get_ClientPrintControlLoadFailed();
    public sealed virtual string get_ParameterDropDownToolTip();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerMessages3.TotalPages(int pageCount, PageCountMode pageCountMode);
    public sealed virtual string get_CancelLinkText();
    public sealed virtual string get_CalendarLoading();
}
internal class Microsoft.Reporting.WebForms.LocalModeSession : ReportControlSession {
    private LocalReport m_localReport;
    public Report Report { get; }
    public string PrintCabVersion { get; }
    public LocalModeSession(LocalReport report);
    public virtual void DisposeNonSessionResources();
    public virtual Stream RenderReport(string format, bool allowInternalRenderers, string deviceInfo, NameValueCollection additionalParams, bool cacheSecondaryStreamsForHtml, String& mimeType, String& fileNameExtension);
    public virtual void RenderReportForPrint(string deviceInfo, NameValueCollection additonalParams, HttpResponse response);
    public virtual Report get_Report();
    public virtual bool IsPrintCabSupported(ClientArchitecture arch);
    public virtual void WritePrintCab(ClientArchitecture arch, Stream stream);
    public virtual string get_PrintCabVersion();
    public virtual string PrintCabCLSID(ClientArchitecture arch);
    private void SendPrintStream(Stream stream, HttpResponse response);
}
internal static class Microsoft.Reporting.WebForms.LocalPrintCabInfo : object {
    public static string Version { get; }
    public static string get_Version();
}
public class Microsoft.Reporting.WebForms.LocalProcessingException : ReportViewerException {
    internal LocalProcessingException(Exception processingException);
    internal LocalProcessingException(string message, Exception processingException);
    internal LocalProcessingException(string message);
    private LocalProcessingException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Reporting.WebForms.LocalReport : Report {
    private static string TopLevelDirectReportDefinitionPath;
    private InitializeDataSourcesEventHandler InitializeDataSources;
    private SubreportProcessingEventHandler SubreportProcessing;
    private string m_reportPath;
    private string m_reportEmbeddedResource;
    private Assembly m_embeddedResourceAssembly;
    private bool m_enableHyperlinks;
    private bool m_enableExternalImages;
    private NameValueCollection m_parentSuppliedParameters;
    private ReportDataSourceCollection m_dataSources;
    private ProcessingMessageList m_lastRenderingWarnings;
    private ILocalProcessingHost m_processingHost;
    private RenderingExtension[] m_externalRenderingExtensions;
    private MapTileServerConfiguration m_mapTileServerConfiguration;
    internal string DisplayNameForUse { get; }
    internal bool SupportsQueries { get; }
    internal bool CanSelfCancel { get; }
    private DefinitionSource DefinitionSource { get; }
    [SRDescriptionAttribute("LocalReportPathDesc")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
public string ReportPath { get; public set; }
    [TypeConverterAttribute("Microsoft.ReportingServices.ReportSelectionConverter, Microsoft.Reporting.Design, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ReportEmbeddedResourceDesc")]
public string ReportEmbeddedResource { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Security")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("EnableExternalImagesDesc")]
public bool EnableExternalImages { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("ShowDetailedSubreportMessagesDesc")]
[DefaultValueAttribute("True")]
public bool ShowDetailedSubreportMessages { get; public set; }
    [CategoryAttribute("Security")]
[SRDescriptionAttribute("EnableHyperlinksDesc")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("False")]
public bool EnableHyperlinks { get; public set; }
    [PersistenceModeAttribute]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("MapTileServerConfigurationDesc")]
public MapTileServerConfiguration MapTileServerConfiguration { get; }
    [WebBrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("ReportDataSourcesDesc")]
[PersistenceModeAttribute]
public ReportDataSourceCollection DataSources { get; }
    internal bool IsReadyForConnection { get; }
    internal bool IsPreparedReportReadyForRendering { get; }
    internal bool HasExecutionSession { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IList`1<ReportParameter> OriginalParametersToDrillthrough { get; }
    internal bool HasDocMap { get; }
    internal int AutoRefreshInterval { get; }
    private LocalReport(ILocalProcessingHost processingHost);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
internal LocalReport(SerializationInfo info, StreamingContext context);
    private LocalReport CreateNewLocalReport();
    private LocalDataRetrieval CreateDataRetrieval();
    private static PreviewItemContext InstantiatePreviewItemContext();
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    private void Construct();
    public sealed virtual void Dispose();
    internal virtual string get_DisplayNameForUse();
    internal bool get_SupportsQueries();
    internal virtual bool get_CanSelfCancel();
    internal virtual void SetCancelState(bool shouldCancelRequests);
    private DefinitionSource get_DefinitionSource();
    private void DemandFullTrustWithFriendlyMessage();
    public string get_ReportPath();
    public void set_ReportPath(string value);
    public string get_ReportEmbeddedResource();
    public void set_ReportEmbeddedResource(string value);
    public bool get_EnableExternalImages();
    public void set_EnableExternalImages(bool value);
    public bool get_ShowDetailedSubreportMessages();
    public void set_ShowDetailedSubreportMessages(bool value);
    public bool get_EnableHyperlinks();
    public void set_EnableHyperlinks(bool value);
    public MapTileServerConfiguration get_MapTileServerConfiguration();
    private void SetEmbeddedResourceAsReportDefinition(string resourceName, Assembly assemblyWithResource);
    internal void SetDataSourceCredentials(IEnumerable credentials);
    internal ReportDataSourceInfoCollection GetDataSources(Boolean& allCredentialsSatisfied);
    public ReportDataSourceCollection get_DataSources();
    public IList`1<string> GetDataSourceNames();
    public virtual int GetTotalPages(PageCountMode& pageCountMode);
    internal virtual bool get_IsReadyForConnection();
    internal virtual bool get_IsPreparedReportReadyForRendering();
    public virtual void LoadReportDefinition(TextReader report);
    public void LoadSubreportDefinition(string reportName, TextReader report);
    public void LoadSubreportDefinition(string reportName, Stream report);
    private void SetDirectReportDefinition(string reportName, TextReader report);
    internal virtual int PerformSearch(string searchText, int startPage, int endPage);
    internal virtual void PerformToggle(string toggleId);
    internal virtual int PerformBookmarkNavigation(string bookmarkId, String& uniqueName);
    internal virtual int PerformDocumentMapNavigation(string documentMapId);
    internal virtual Report PerformDrillthrough(string drillthroughId, String& reportPath);
    public virtual ReportPageSettings GetDefaultPageSettings();
    private void PopulateDrillthroughReport(string reportPath, NameValueCollection drillParams, LocalReport drillReport);
    internal virtual int PerformSort(string sortId, SortOrder sortDirection, bool clearSort, PageCountMode pageCountMode, String& uniqueName);
    [ObsoleteAttribute("This method requires Code Access Security policy, which is deprecated.  For more information please go to http://go.microsoft.com/fwlink/?LinkId=160787.")]
public void ExecuteReportInCurrentAppDomain(Evidence reportEvidence);
    [ObsoleteAttribute("This method requires Code Access Security policy, which is deprecated.  For more information please go to http://go.microsoft.com/fwlink/?LinkId=160787.")]
public void AddTrustedCodeModuleInCurrentAppDomain(string assemblyName);
    [ObsoleteAttribute("This method requires Code Access Security policy, which is deprecated.  For more information please go to http://go.microsoft.com/fwlink/?LinkId=160787.")]
public void ExecuteReportInSandboxAppDomain();
    public void AddFullTrustModuleInSandboxAppDomain(StrongName assemblyName);
    public void SetBasePermissionsForSandboxAppDomain(PermissionSet permissions);
    public void ReleaseSandboxAppDomain();
    private void CopySecuritySettings(LocalReport parentReport);
    internal bool get_HasExecutionSession();
    internal virtual void EnsureExecutionSession();
    private void ValidateReportSecurity(PreviewItemContext itemContext, PublishingResult publishingResult);
    public virtual void Refresh();
    private void ChangeReportDefinition(DefinitionSource updatingSourceType, Action changeAction);
    public IList`1<ReportParameter> get_OriginalParametersToDrillthrough();
    public virtual ReportParameterInfoCollection GetParameters();
    public virtual void SetParameters(IEnumerable`1<ReportParameter> parameters);
    internal virtual Byte[] InternalRenderStream(string format, string streamID, string deviceInfo, String& mimeType, String& encoding);
    internal virtual bool get_HasDocMap();
    internal virtual DocumentMapNode GetDocumentMap(string rootLabel);
    internal virtual int get_AutoRefreshInterval();
    public virtual Byte[] Render(string format, string deviceInfo, PageCountMode pageCountMode, String& mimeType, String& encoding, String& fileNameExtension, String[]& streams, Warning[]& warnings);
    internal Byte[] InternalRender(string format, bool allowInternalRenderers, string deviceInfo, PageCountMode pageCountMode, String& mimeType, String& encoding, String& fileNameExtension, String[]& streams, Warning[]& warnings);
    public void Render(string format, string deviceInfo, CreateStreamCallback createStream, Warning[]& warnings);
    public void Render(string format, string deviceInfo, PageCountMode pageCountMode, CreateStreamCallback createStream, Warning[]& warnings);
    internal void InternalRender(string format, bool allowInternalRenderers, string deviceInfo, PageCountMode pageCountMode, CreateAndRegisterStream createStreamCallback, Warning[]& warnings);
    private void WriteDebugResults(Warning[] warnings);
    private bool ValidateRenderingFormat(string format);
    internal void TransferEvents(LocalReport targetReport);
    internal void CreateSnapshot();
    internal void add_InitializeDataSources(InitializeDataSourcesEventHandler value);
    internal void remove_InitializeDataSources(InitializeDataSourcesEventHandler value);
    public void add_SubreportProcessing(SubreportProcessingEventHandler value);
    public void remove_SubreportProcessing(SubreportProcessingEventHandler value);
    private IEnumerable ControlSubReportInfoCallback(PreviewItemContext subReportContext, ParameterInfoCollection initialParameters);
    public virtual RenderingExtension[] ListRenderingExtensions();
    private string GetFullyQualifiedReportPath();
    private static string GetReportNameForFile(string path);
    private PreviewItemContext CreateItemContext();
    internal static PreviewItemContext CreateItemContextForFilePath(string filePath);
    private static PreviewItemContext CreateItemContext(string pathForFileDefinitionSource, string fullyQualifiedPath, DefinitionSource definitionSource, Assembly embeddedResourceAssembly);
    private LocalProcessingException WrapProcessingException(Exception processingException);
    private static string PageCountModeToProcessingPaginationMode(PageCountMode pageCountMode);
    private static ReportParameterInfoCollection ParameterInfoCollectionToApi(ParameterInfoCollection processingMetadata, bool supportsQueries);
    private static ReportParameterInfo ParameterInfoToApi(ParameterInfo paramInfo, bool supportsQueries);
    private void OnLocalReportChange(object sender, EventArgs e);
}
[TypeConverterAttribute("Microsoft.Reporting.WebForms.TypeNameHidingExpandableObjectConverter")]
public class Microsoft.Reporting.WebForms.MapTileServerConfiguration : object {
    private LocalProcessingHostMapTileServerConfiguration m_underlyingConfiguration;
    [NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("2")]
[SRDescriptionAttribute("MapTileServerConfigurationMaxConnectionsDesc")]
public int MaxConnections { get; public set; }
    [SRDescriptionAttribute("MapTileServerConfigurationTimeoutDesc")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("10")]
public int Timeout { get; public set; }
    [SRDescriptionAttribute("MapTileServerConfigurationAppIDDesc")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("(Default)")]
public string AppID { get; public set; }
    internal MapTileServerConfiguration(LocalProcessingHostMapTileServerConfiguration underlyingConfiguration);
    public int get_MaxConnections();
    public void set_MaxConnections(int value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public string get_AppID();
    public void set_AppID(string value);
}
internal class Microsoft.Reporting.WebForms.MemoryThenTempStorageStream : Stream {
    private static int m_threshold;
    private ITemporaryStorage m_tempStorage;
    private Stream m_storageStream;
    private bool m_thresholdReached;
    private bool m_isClosed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public MemoryThenTempStorageStream(ITemporaryStorage storage);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
    private void ThresholdReached();
}
internal class Microsoft.Reporting.WebForms.MenuInfo : object {
    public string Text;
    public string ClientScript;
}
public class Microsoft.Reporting.WebForms.MissingDataSourceCredentialsException : ReportViewerException {
    private MissingDataSourceCredentialsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Reporting.WebForms.MissingDataSourceException : ReportViewerException {
    internal MissingDataSourceException(string dataSourceName);
    private MissingDataSourceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Reporting.WebForms.MissingEndpointException : ReportServerException {
    internal MissingEndpointException(string message, Exception innerException);
    private MissingEndpointException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Reporting.WebForms.MissingParameterException : ReportViewerException {
    internal MissingParameterException(string parameterName);
    private MissingParameterException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Reporting.WebForms.MissingReportServerConnectionInformationException : ConfigurationErrorsException {
    private MissingReportServerConnectionInformationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Reporting.WebForms.MissingReportSourceException : ReportViewerException {
    private MissingReportSourceException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Reporting.WebForms.MultiValidValuesSelector : MultiValueSelector {
    private Dictionary`2<string, CheckBox> m_valueToCheckBox;
    private List`1<CheckBox> m_allCheckBoxes;
    private IList`1<ValidValue> m_validValues;
    private BaseParameterInputControl m_containingControl;
    private CheckBox m_selectAll;
    private string m_checkBoxCssClass;
    private SelectedIndicies m_selectedIndicies;
    public string CheckBoxCssClass { get; public set; }
    public bool HasValue { get; }
    public String[] Value { get; public set; }
    public MultiValidValuesSelector(IList`1<ValidValue> validValues, BaseParameterInputControl containingControl);
    public virtual void AddScriptDescriptors(ScriptControlDescriptor desc);
    public string get_CheckBoxCssClass();
    public void set_CheckBoxCssClass(string value);
    protected virtual void CreateChildControls();
    protected virtual void Render(HtmlTextWriter writer);
    private void WriteCheckBox(CheckBox checkBox, HtmlTextWriter writer);
    public virtual bool get_HasValue();
    public virtual String[] get_Value();
    public virtual void set_Value(String[] value);
}
internal abstract class Microsoft.Reporting.WebForms.MultiValueInputControl : GenericDropDownInputControl {
    private MultiValueSelector m_floatingEditor;
    protected bool CustomControlHasValue { get; }
    protected String[] CustomControlValue { get; protected set; }
    protected string FrameAccessibleName { get; }
    protected MultiValueInputControl(ReportParameterInfo reportParam, IBrowserDetection browserDetection, bool useAbsoluteScreenPositioning);
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    protected virtual bool get_CustomControlHasValue();
    protected virtual String[] get_CustomControlValue();
    protected virtual void set_CustomControlValue(String[] value);
    public virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    protected virtual string get_FrameAccessibleName();
    protected abstract virtual MultiValueSelector CreateFloatingEditor();
}
internal abstract class Microsoft.Reporting.WebForms.MultiValueSelector : CompositeControl {
    private EventHandler Change;
    public string ClientSideObjectName;
    public String[] Value { get; public set; }
    public bool HasValue { get; }
    public void add_Change(EventHandler value);
    public void remove_Change(EventHandler value);
    public abstract virtual String[] get_Value();
    public abstract virtual void set_Value(String[] value);
    public abstract virtual bool get_HasValue();
    protected void OnChange(object sender, EventArgs e);
    public virtual void AddScriptDescriptors(ScriptControlDescriptor desc);
    protected void SetSelectorBorder();
}
internal class Microsoft.Reporting.WebForms.MultiValueTextInputControl : MultiValueInputControl {
    protected MultiValueTextSelector m_floatingEditor;
    unknown string TextBoxCssClass {public set; }
    public MultiValueTextInputControl(ReportParameterInfo reportParam, IBrowserDetection browserDetection, bool useAbsoluteScreenPositioning);
    public virtual void set_TextBoxCssClass(string value);
    protected virtual MultiValueSelector CreateFloatingEditor();
}
internal class Microsoft.Reporting.WebForms.MultiValueTextSelector : MultiValueSelector {
    private PostBackTextBox m_textBox;
    private HiddenField m_originalTextBoxValue;
    private bool m_allowBlank;
    private string m_textBoxCssClass;
    public string TextBoxCssClass { get; public set; }
    public bool HasValue { get; }
    public String[] Value { get; public set; }
    public MultiValueTextSelector(IBrowserDetection browserDetection, bool allowBlank);
    public string get_TextBoxCssClass();
    public void set_TextBoxCssClass(string value);
    public virtual bool get_HasValue();
    public virtual String[] get_Value();
    public virtual void set_Value(String[] value);
    private void OnTextAreaChanged(object sender, EventArgs e);
    protected virtual void CreateChildControls();
    protected virtual void Render(HtmlTextWriter writer);
}
internal class Microsoft.Reporting.WebForms.MultiValueValidValuesInputControl : MultiValueInputControl {
    protected MultiValidValuesSelector m_floatingEditor;
    unknown string CheckBoxCssClass {public set; }
    unknown string DropDownCssClass {public set; }
    public MultiValueValidValuesInputControl(ReportParameterInfo reportParam, IBrowserDetection browserDetection, bool useAbsoluteScreenPositioning);
    public virtual void set_CheckBoxCssClass(string value);
    public void set_DropDownCssClass(string value);
    protected virtual MultiValueSelector CreateFloatingEditor();
}
internal class Microsoft.Reporting.WebForms.NoScriptControl : WebControl {
    private string m_alternateUrl;
    public string AlternateUrl { get; public set; }
    protected HtmlTextWriterTag TagKey { get; }
    public string get_AlternateUrl();
    public void set_AlternateUrl(string value);
    protected virtual HtmlTextWriterTag get_TagKey();
    protected virtual void RenderContents(HtmlTextWriter writer);
}
public enum Microsoft.Reporting.WebForms.PageCountMode : Enum {
    public int value__;
    public static PageCountMode Actual;
    public static PageCountMode Estimate;
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WebForms.PageNavigationEventArgs : CancelEventArgs {
    private int m_newPage;
    public int NewPage { get; }
    public PageNavigationEventArgs(int newPage);
    public int get_NewPage();
}
public class Microsoft.Reporting.WebForms.PageNavigationEventHandler : MulticastDelegate {
    public PageNavigationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PageNavigationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PageNavigationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.WebForms.PageNavigationGroup : ToolbarGroup {
    private ScriptSwitchImage m_firstPage;
    private ScriptSwitchImage m_prevPage;
    private ScriptSwitchImage m_nextPage;
    private ScriptSwitchImage m_lastPage;
    private EventableTextBox m_currentPage;
    private SafeLiteralControl m_totalPages;
    private SafeLiteralControl m_currentPageSep;
    public string GroupCssClassName { get; }
    public PageNavigationGroup(ReportViewer viewer);
    public virtual string get_GroupCssClassName();
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    private ScriptSwitchImage CreatePageNavButton(string id, ToolbarImageInfo image, ToolbarImageInfo disabledImage, string tooltip, EventHandler performPageNav);
    public virtual void AddScriptDescriptorProperties(ScriptControlDescriptor toolbarDesc);
    private void OnPageNavButtonClick(int targetPage);
    private void OnLastPageButtonClick(object sender, EventArgs e);
    private void OnCurrentPageTextBoxEnter(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private void <CreateChildControls>b__0(object , EventArgs );
    [CompilerGeneratedAttribute]
private void <CreateChildControls>b__1(object , EventArgs );
    [CompilerGeneratedAttribute]
private void <CreateChildControls>b__2(object , EventArgs );
}
internal class Microsoft.Reporting.WebForms.PanelUpdater : object {
    private Dictionary`2<UpdatePanel, UpdateGroup> m_panelMap;
    private UpdateGroup m_groupsToUpdate;
    public bool IsAnyPanelGroupMarkedForUpdate { get; }
    public void RegisterPanel(UpdatePanel panel, UpdateGroup groupForMembership);
    public void UnregisterAllPanels();
    public void MarkPanelsForUpdate(UpdateGroup group);
    public bool get_IsAnyPanelGroupMarkedForUpdate();
    public bool IsPanelGroupMarkedForUpdate(UpdateGroup group);
    public void CancelAllUpdates();
    public void PerformUpdates();
}
internal enum Microsoft.Reporting.WebForms.ParameterAutoSubmit : Enum {
    public int value__;
    public static ParameterAutoSubmit Default;
    public static ParameterAutoSubmit Always;
    public static ParameterAutoSubmit Never;
}
internal class Microsoft.Reporting.WebForms.ParameterControlCollection : Dictionary`2<string, BaseParameterInputControl> {
    private string m_hiddenUnsatisfiedParameterName;
    private string m_anyUnsatisfiedParameterName;
    private bool m_visibleParameterNeedsValue;
    public string HiddenUnsatisfiedParameter { get; }
    public string AnyUnsatisfiedParameter { get; }
    public bool VisibleParameterNeedsValue { get; }
    private static bool IsParamVisible(bool showHiddenParameters, ReportParameterInfo param);
    public static ParameterControlCollection Create(ReportParameterInfoCollection reportParams, bool allowQueryExecution, IReportViewerStyles styles, bool showHiddenParameters);
    public static ParameterControlCollection Create(ReportParameterInfoCollection reportParams, bool allowQueryExecution, IReportViewerStyles styles, bool showHiddenParameters, bool positioningMode);
    public string get_HiddenUnsatisfiedParameter();
    public string get_AnyUnsatisfiedParameter();
    public bool get_VisibleParameterNeedsValue();
}
public enum Microsoft.Reporting.WebForms.ParameterDataType : Enum {
    public int value__;
    public static ParameterDataType Boolean;
    public static ParameterDataType DateTime;
    public static ParameterDataType Float;
    public static ParameterDataType Integer;
    public static ParameterDataType String;
}
internal static class Microsoft.Reporting.WebForms.ParameterInputControlFactory : object {
    public static BaseParameterInputControl Create(ReportParameterInfo reportParam, bool allowQueryExecution, bool positioningMode);
}
internal class Microsoft.Reporting.WebForms.ParameterInputControlStrings : object {
    public static CultureInfo Culture { get; public set; }
    public static string True { get; }
    public static string False { get; }
    public static string NullCheckBox { get; }
    public static string NullValue { get; }
    public static string SelectValidValue { get; }
    public static string TodayIs { get; }
    public static string NextMonthToolTip { get; }
    public static string PreviousMonthToolTip { get; }
    public static string SelectAll { get; }
    public static string DropDownTooltip { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_True();
    public static string get_False();
    public static string get_NullCheckBox();
    public static string get_NullValue();
    public static string get_SelectValidValue();
    public static string get_TodayIs();
    public static string get_NextMonthToolTip();
    public static string get_PreviousMonthToolTip();
    public static string get_SelectAll();
    public static string get_DropDownTooltip();
}
internal class Microsoft.Reporting.WebForms.ParameterInputRequiredValidator : RequiredFieldValidator {
    protected virtual bool EvaluateIsValid();
}
internal class Microsoft.Reporting.WebForms.ParametersArea : CompositeControl {
    private static int ParameterColumns;
    protected static string ParameterRowAttribute;
    private EventHandler ViewReportClick;
    private EventHandler ParameterValuesChanged;
    private EventHandler AutoPostBackOccurred;
    private ReportErrorEventHandler Error;
    private ReportCredentialsEventHandler SubmittingDataSourceCredentials;
    private ReportParametersEventHandler SubmittingParameterValues;
    public bool ShowCredentialPrompts;
    public bool ShowParameterPrompts;
    private ReportDataSourceInfoCollection m_dsInfos;
    private ReportParameterInfoCollection m_paramsInfo;
    private bool m_allCredentialsSatisfied;
    private ParameterControlCollection m_paramControls;
    private DataSourceControlCollection m_dsControls;
    private Dictionary`2<BaseParameterInputControl, SafeLiteralControl> m_paramPrompts;
    private Button m_viewReportButton;
    private TextButton m_changeCredentials;
    private bool m_credentialsChanged;
    private string m_autoPostBackTarget;
    private bool m_showHiddenParameters;
    private bool m_positioningMode;
    private string m_innerCssClass;
    private ReportViewer m_viewer;
    private IReportViewerStyles m_styles;
    private IParameterSupplier m_parameterSupplier;
    public string InnerCssClass { get; public set; }
    private string CloseDropDownJavaFunctionCall { get; }
    protected string ParametersGridID { get; }
    protected string ParameterTableID { get; }
    protected HtmlTextWriterTag TagKey { get; }
    protected string PromptValidationScript { get; }
    protected bool ShouldRenderCredentialsIfSupported { get; }
    protected bool RenderCredentialsHidden { get; }
    protected bool RenderParameters { get; }
    public bool HasVisibleParameters { get; }
    public bool HasCredentials { get; }
    protected string AutoPostBackTarget { get; }
    protected IEnumerable`1<BaseParameterInputControl> ParameterControls { get; }
    protected IEnumerable`1<DataSourceControl> CredentialControls { get; }
    protected TextButton ChangeCredentialsLink { get; }
    protected IReportViewerStyles ViewerStyles { get; }
    public ParametersArea(IReportViewerStyles styles);
    public ParametersArea(IReportViewerStyles styles, bool showHiddenParameters, bool positioningMode);
    public ParametersArea(ReportViewer viewer, bool showHiddenParameters, bool positioningMode);
    public ParametersArea(ReportViewer viewer);
    public void add_ViewReportClick(EventHandler value);
    public void remove_ViewReportClick(EventHandler value);
    public void add_ParameterValuesChanged(EventHandler value);
    public void remove_ParameterValuesChanged(EventHandler value);
    public void add_AutoPostBackOccurred(EventHandler value);
    public void remove_AutoPostBackOccurred(EventHandler value);
    public void add_Error(ReportErrorEventHandler value);
    public void remove_Error(ReportErrorEventHandler value);
    public void add_SubmittingDataSourceCredentials(ReportCredentialsEventHandler value);
    public void remove_SubmittingDataSourceCredentials(ReportCredentialsEventHandler value);
    public void add_SubmittingParameterValues(ReportParametersEventHandler value);
    public void remove_SubmittingParameterValues(ReportParametersEventHandler value);
    protected virtual IParameterSupplier GetParameterSupplier();
    protected bool OnError(Exception e);
    protected virtual void CreateChildControls();
    protected virtual void CreateRenderedParameterControl(BaseParameterInputControl parameterControl);
    protected void ClearChildControls(bool clearParameterMetaData);
    protected virtual void OnPreRender(EventArgs e);
    public void RenderCloseDropDownAttributes(HtmlTextWriter writer);
    public sealed virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    public sealed virtual IEnumerable`1<ScriptReference> GetScriptReferences();
    public string get_InnerCssClass();
    public void set_InnerCssClass(string value);
    private string get_CloseDropDownJavaFunctionCall();
    public void AddCloseDropDownAttributes(HtmlControl control);
    protected virtual string get_ParametersGridID();
    protected string get_ParameterTableID();
    protected virtual HtmlTextWriterTag get_TagKey();
    protected virtual void Render(HtmlTextWriter writer);
    protected virtual void RenderChildren(HtmlTextWriter writer);
    private void RenderAbsolutePositionedChildren(HtmlTextWriter writer);
    protected string get_PromptValidationScript();
    private void RenderViewReportCell(HtmlTextWriter writer);
    protected virtual void LoadViewState(object savedState);
    protected virtual void PostLoadViewState();
    protected virtual object SaveViewState();
    private void OnViewReport(object sender, EventArgs e);
    protected bool get_ShouldRenderCredentialsIfSupported();
    protected bool get_RenderCredentialsHidden();
    protected bool get_RenderParameters();
    public bool get_HasVisibleParameters();
    public bool get_HasCredentials();
    public void EnsureReportMetaData();
    public void RefreshControlsFromReportMetadata();
    private void GetMetaDataFromReport();
    public bool SaveControlValuesToReport();
    protected string get_AutoPostBackTarget();
    protected ReportParameterInfoCollection SaveParametersToReport(IEnumerable`1<ReportParameter> parameters, IEnumerable`1<string> autoSubmitParameterNames);
    protected bool GetParameterValuesToSubmit(ReportParameterCollection& paramValues, IEnumerable`1& autoSubmitParamNames);
    protected bool SaveCredentialsToReport();
    private void RenderParameterControls(HtmlTextWriter writer);
    public void ValidateNonVisibleReportInputsSatisfied();
    public void ValidateAllReportInputsSatisfied();
    private void ApplyParameterStyles(BaseParameterInputControl control);
    private void RenderOneParameter(HtmlTextWriter writer, BaseParameterInputControl control);
    protected virtual void RenderOneDataSource(DataSourceControl control, HtmlTextWriter writer);
    private void AddLabelCellAttributes(HtmlTextWriter writer);
    private void AddInputCellAttributes(HtmlTextWriter writer);
    private void AddSpacerCell(HtmlTextWriter writer);
    private void OnCredentialsChanged(object sender, EventArgs e);
    private void OnParametersChanged(object sender, EventArgs e);
    protected virtual void OnAutoPostBackOccurred(object sender, EventArgs e);
    private void OnControlValueChanged(object sender, EventArgs e);
    protected SafeLiteralControl GetParameterPromptForInputControl(BaseParameterInputControl control);
    protected IEnumerable`1<BaseParameterInputControl> get_ParameterControls();
    protected IEnumerable`1<DataSourceControl> get_CredentialControls();
    protected TextButton get_ChangeCredentialsLink();
    protected IReportViewerStyles get_ViewerStyles();
}
public enum Microsoft.Reporting.WebForms.ParameterState : Enum {
    public int value__;
    public static ParameterState HasValidValue;
    public static ParameterState MissingValidValue;
    public static ParameterState HasOutstandingDependencies;
    public static ParameterState DynamicValuesUnavailable;
}
internal class Microsoft.Reporting.WebForms.PostBackCheckBox : CheckBox {
    public sealed virtual void RaisePostBackEvent(string eventArgument);
}
internal class Microsoft.Reporting.WebForms.PostBackRadioButton : RadioButton {
    public sealed virtual void RaisePostBackEvent(string eventArgument);
}
internal class Microsoft.Reporting.WebForms.PostBackTarget : WebControl {
    private EventHandler PostBackAsTarget;
    public void add_PostBackAsTarget(EventHandler value);
    public void remove_PostBackAsTarget(EventHandler value);
    public sealed virtual void RaisePostBackEvent(string eventArgument);
}
internal class Microsoft.Reporting.WebForms.PostBackTextBox : TextBox {
    public sealed virtual void RaisePostBackEvent(string eventArgument);
    protected virtual void OnLoad(EventArgs e);
}
internal class Microsoft.Reporting.WebForms.PrintCabOperation : ReportDataOperation {
    private static string UrlParamArchitecture;
    public static string CreateUrl(ReportControlSession reportControlSession, ClientArchitecture clientArch, string instanceID);
    public virtual void PerformOperation(NameValueCollection urlQuery, HttpResponse response);
}
internal class Microsoft.Reporting.WebForms.PrintGroup : ToolbarGroup {
    private ScriptSwitchImage m_printButton;
    public string GroupCssClassName { get; }
    public string LeadingSpace { get; }
    public PrintGroup(ReportViewer viewer);
    public virtual string get_GroupCssClassName();
    protected virtual void CreateChildControls();
    public virtual void AddScriptDescriptorProperties(ScriptControlDescriptor toolbarDesc);
    public virtual string get_LeadingSpace();
}
internal class Microsoft.Reporting.WebForms.PrintRequestOperation : ReportDataOperation {
    public static string CreateQuery(Report report, string instanceID);
    public virtual void PerformOperation(NameValueCollection urlQuery, HttpResponse response);
}
internal class Microsoft.Reporting.WebForms.ProcessingContextForDataSets : ProcessingContext {
    private IEnumerable m_dataSources;
    private GetSubReportDataSetCallback m_subReportInfoCallback;
    internal bool EnableDataBackedParameters { get; }
    internal IProcessingDataExtensionConnection CreateAndSetupDataExtensionFunction { get; }
    internal RuntimeDataSourceInfoCollection DataSources { get; }
    internal RuntimeDataSetInfoCollection SharedDataSetReferences { get; }
    internal bool CanShareDataSets { get; }
    public ProcessingContextForDataSets(PreviewItemContext reportContext, ParameterInfoCollection parameters, IEnumerable dataSources, OnDemandSubReportCallback subReportCallback, GetSubReportDataSetCallback subReportInfoCallback, IGetResource getResourceFunction, IChunkFactory chunkFactory, ReportRuntimeSetup reportRuntimeSetup, CreateAndRegisterStream createStreamCallback);
    internal virtual bool get_EnableDataBackedParameters();
    internal virtual IProcessingDataExtensionConnection get_CreateAndSetupDataExtensionFunction();
    internal virtual RuntimeDataSourceInfoCollection get_DataSources();
    internal virtual RuntimeDataSetInfoCollection get_SharedDataSetReferences();
    internal virtual bool get_CanShareDataSets();
    internal virtual ProcessingContext CreateInternalProcessingContext(string chartName, Report report, ErrorContext errorContext, DateTime executionTime, UserProfileState allowUserProfileState, bool isHistorySnapshot, bool snapshotProcessing, bool processWithCachedData, GetReportChunk getChunkCallback, CreateReportChunk cacheDataCallback);
    internal virtual ProcessingContext ParametersInternalProcessingContext(ErrorContext errorContext, DateTime executionTimeStamp, bool isSnapshot);
}
public enum Microsoft.Reporting.WebForms.ProcessingMode : Enum {
    public int value__;
    public static ProcessingMode Local;
    public static ProcessingMode Remote;
}
internal class Microsoft.Reporting.WebForms.RefreshGroup : ToolbarGroup {
    private ScriptSwitchImage m_refreshButton;
    public string GroupCssClassName { get; }
    public string LeadingSpace { get; }
    public RefreshGroup(ReportViewer viewer);
    public virtual string get_GroupCssClassName();
    protected virtual void CreateChildControls();
    public virtual void AddScriptDescriptorProperties(ScriptControlDescriptor toolbarDesc);
    public virtual string get_LeadingSpace();
}
public class Microsoft.Reporting.WebForms.RenderingExtension : object {
    private string m_name;
    private string m_localizedName;
    private bool m_isVisible;
    public string Name { get; }
    public string LocalizedName { get; }
    public bool Visible { get; }
    internal RenderingExtension(string name, string localizedName, bool isVisible);
    internal static RenderingExtension[] FromSoapExtensions(Extension[] soapExtensions);
    public string get_Name();
    public string get_LocalizedName();
    public bool get_Visible();
}
[TypeConverterAttribute("Microsoft.Reporting.WebForms.TypeNameHidingExpandableObjectConverter")]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
public abstract class Microsoft.Reporting.WebForms.Report : object {
    private EventHandler`1<ReportChangedEventArgs> Change;
    private string m_displayName;
    private int m_drillthroughDepth;
    internal object m_syncObject;
    [WebBrowsableAttribute("True")]
[SRDescriptionAttribute("DisplayNameDesc")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
public string DisplayName { get; public set; }
    internal string DisplayNameForUse { get; }
    [BrowsableAttribute("False")]
public bool IsDrillthroughReport { get; }
    internal int DrillthroughDepth { get; internal set; }
    internal bool IsReadyForConnection { get; }
    [BrowsableAttribute("False")]
public bool IsReadyForRendering { get; }
    internal bool IsPreparedReportReadyForRendering { get; }
    internal bool HasDocMap { get; }
    internal int AutoRefreshInterval { get; }
    internal bool CanSelfCancel { get; }
    internal string PrintRequestPath { get; }
    public string get_DisplayName();
    public void set_DisplayName(string value);
    internal abstract virtual string get_DisplayNameForUse();
    public abstract virtual ReportParameterInfoCollection GetParameters();
    public abstract virtual void SetParameters(IEnumerable`1<ReportParameter> parameters);
    public abstract virtual int GetTotalPages(PageCountMode& pageCountMode);
    public abstract virtual RenderingExtension[] ListRenderingExtensions();
    public abstract virtual void LoadReportDefinition(TextReader report);
    public abstract virtual void Refresh();
    public abstract virtual Byte[] Render(string format, string deviceInfo, PageCountMode pageCountMode, String& mimeType, String& encoding, String& fileNameExtension, String[]& streams, Warning[]& warnings);
    internal abstract virtual Byte[] InternalRenderStream(string format, string streamID, string deviceInfo, String& mimeType, String& encoding);
    internal abstract virtual int PerformSearch(string searchText, int startPage, int endPage);
    internal abstract virtual void PerformToggle(string toggleId);
    internal abstract virtual int PerformBookmarkNavigation(string bookmarkId, String& uniqueName);
    internal abstract virtual int PerformDocumentMapNavigation(string documentMapId);
    public abstract virtual ReportPageSettings GetDefaultPageSettings();
    public int GetTotalPages();
    public Byte[] Render(string format);
    public Byte[] Render(string format, string deviceInfo);
    public Byte[] Render(string format, string deviceInfo, String& mimeType, String& encoding, String& fileNameExtension, String[]& streams, Warning[]& warnings);
    public DocumentMapNode GetDocumentMap();
    public bool get_IsDrillthroughReport();
    internal int get_DrillthroughDepth();
    internal void set_DrillthroughDepth(int value);
    internal abstract virtual Report PerformDrillthrough(string drillthroughId, String& reportPath);
    internal abstract virtual int PerformSort(string sortId, SortOrder sortDirection, bool clearSort, PageCountMode pageCountMode, String& uniqueName);
    internal abstract virtual bool get_IsReadyForConnection();
    public bool get_IsReadyForRendering();
    internal abstract virtual bool get_IsPreparedReportReadyForRendering();
    internal bool PrepareForRender();
    internal abstract virtual void EnsureExecutionSession();
    internal abstract virtual bool get_HasDocMap();
    internal void add_Change(EventHandler`1<ReportChangedEventArgs> value);
    internal void remove_Change(EventHandler`1<ReportChangedEventArgs> value);
    internal abstract virtual DocumentMapNode GetDocumentMap(string rootLabel);
    internal abstract virtual int get_AutoRefreshInterval();
    internal abstract virtual bool get_CanSelfCancel();
    internal abstract virtual void SetCancelState(bool shouldCancel);
    public void LoadReportDefinition(Stream report);
    internal void OnChange(bool isRefreshOnly);
    internal void OnChange(object sender, EventArgs e);
    internal virtual string CreatePrintRequestQuery(string InstanceID);
    internal virtual string get_PrintRequestPath();
    public void SetParameters(ReportParameter parameter);
}
internal class Microsoft.Reporting.WebForms.ReportActionEventArgs : EventArgs {
    private string m_actionType;
    private string m_actionParam;
    public string ActionType { get; }
    public string ActionParam { get; }
    internal ReportActionEventArgs(string actionType, string actionParam);
    public string get_ActionType();
    public string get_ActionParam();
}
internal class Microsoft.Reporting.WebForms.ReportActionHandler : object {
    private Report m_report;
    private PageCountMode m_pageCountMode;
    private int m_currentPage;
    private object m_eventSender;
    private PageNavigationEventHandler m_pageNav;
    private CancelEventHandler m_toggle;
    private BookmarkNavigationEventHandler m_bookmarkNavigation;
    private DocumentMapNavigationEventHandler m_documentMapNavigation;
    private DrillthroughEventHandler m_drillthrough;
    private SortEventHandler m_sort;
    private SearchEventHandler m_search;
    private CancelEventHandler m_refresh;
    public ReportActionHandler(Report report, object eventSender, int currentPage, PageCountMode pageCountMode, PageNavigationEventHandler pageNav, CancelEventHandler toggle, BookmarkNavigationEventHandler bookmarkNavigation, DocumentMapNavigationEventHandler documentMapNavigation, DrillthroughEventHandler drillthrough, SortEventHandler sort, SearchEventHandler search, CancelEventHandler refresh);
    public bool HandleToggle(string toggleID, ScrollTarget& scrollTarget);
    public bool HandleBookmarkNavigation(string bookmarkId, Int32& newPage, ScrollTarget& scrollTarget);
    public bool HandleDocMapNavigation(string docMapID, Int32& newPage, ScrollTarget& scrollTarget);
    public Report HandleDrillthrough(string drillthroughID);
    public bool HandleSort(string sortActionFromClient, Int32& pageNumber, ScrollTarget& scrollTarget);
    public SearchResult HandleSearch(SearchState searchState, Int32& newPage, ScrollTarget& scrollTarget);
    public SearchResult HandleSearchNext(SearchState searchState, Int32& newPage, ScrollTarget& scrollTarget);
    private ScrollTarget GetScrollTargetForSearchResult(SearchResult result, bool pageChanged);
    public bool HandleRefresh();
    public bool HandlePageNavigation(int targetPage);
    private bool FirePageNavigationEvent(int targetPage);
    private void ActionParamToSortParams(string actionParam, String& sortID, SortOrder& sortDirection, Boolean& clearSort);
    private int GetSearchEndPage(int startPage);
}
internal class Microsoft.Reporting.WebForms.ReportArea : CompositeControl {
    private ReportControl m_reportControl;
    private ErrorControl m_errorControl;
    private Panel m_nonReportContent;
    private ReportAreaUpdatePanel m_asyncPanel;
    private ReportAreaAsyncLoadTarget m_asyncReportLoad;
    private bool m_asyncWaitControlVisible;
    private HiddenField m_scrollPosition;
    private ReportAreaVisibilityState m_visibilityState;
    private bool m_isFullViewerRendering;
    private IReportViewerStyles m_styles;
    private EventHandler AsyncLoadRequested;
    public string ClientScrollPosition { get; }
    public ReportAreaContent ReportAreaContent { get; }
    protected HtmlTextWriterTag TagKey { get; }
    private string VisibleReportContentContainerId { get; }
    public ReportArea(IReportViewerStyles styles);
    public void SetFullViewerRendering();
    public void add_ReportAction(EventHandler`1<ReportActionEventArgs> value);
    public void remove_ReportAction(EventHandler`1<ReportActionEventArgs> value);
    public void add_ZoomChanged(ZoomChangedEventHandler value);
    public void remove_ZoomChanged(ZoomChangedEventHandler value);
    public string get_ClientScrollPosition();
    public void add_AsyncLoadRequested(EventHandler value);
    public void remove_AsyncLoadRequested(EventHandler value);
    public void Clear();
    public void SetReportZoom(ZoomMode zoomMode, int zoomPercent);
    public int RenderReport(ReportControlSession session, string viewerInstanceIdentifier, PageCountMode pageCountMode, int pageNumber, InteractivityPostBackMode interactivityMode, SearchState searchState, string replacementRoot, string hyperlinkTarget, ScrollTarget scrollTarget, string alertMessage, DeviceInfoCollection initialDeviceInfos, string browserMode, bool sizeToContent);
    public void SetForAsyncRendering();
    public ReportAreaContent get_ReportAreaContent();
    protected virtual HtmlTextWriterTag get_TagKey();
    public void SetException(Exception e, bool handled);
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void RenderChildren(HtmlTextWriter writer);
    private void OnUpdatePanelRendering(object sender, EventArgs e);
    private void OnAsyncReportLoad(object sender, EventArgs e);
    internal static bool IsDisplayedInNonReportContentPanel(ReportAreaContent content);
    private void SetVisibleRegion(ReportAreaContent content);
    public sealed virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    public sealed virtual IEnumerable`1<ScriptReference> GetScriptReferences();
    private string get_VisibleReportContentContainerId();
}
internal class Microsoft.Reporting.WebForms.ReportAreaAsyncLoadTarget : ScriptControl {
    private bool m_causePostBack;
    private EventHandler PostBackTarget;
    public void add_PostBackTarget(EventHandler value);
    public void remove_PostBackTarget(EventHandler value);
    public void TriggerImmediatePostBack();
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    protected virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    protected virtual IEnumerable`1<ScriptReference> GetScriptReferences();
}
public enum Microsoft.Reporting.WebForms.ReportAreaContent : Enum {
    public int value__;
    public static ReportAreaContent Unknown;
    public static ReportAreaContent None;
    public static ReportAreaContent ReportPage;
    public static ReportAreaContent Error;
}
internal class Microsoft.Reporting.WebForms.ReportAreaVisibilityState : CompositeControl {
    private HiddenField m_persistedState;
    private Nullable`1<ReportAreaContent> m_newState;
    private ReportArea m_reportArea;
    protected HtmlTextWriterTag TagKey { get; }
    public ReportAreaContent NewClientState { get; public set; }
    public ReportAreaContent CurrentClientState { get; }
    public ReportAreaVisibilityState(ReportArea reportArea);
    protected virtual HtmlTextWriterTag get_TagKey();
    public ReportAreaContent get_NewClientState();
    public void set_NewClientState(ReportAreaContent value);
    public ReportAreaContent get_CurrentClientState();
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
}
internal class Microsoft.Reporting.WebForms.ReportChangedEventArgs : EventArgs {
    private bool m_isRefreshOnly;
    public bool IsRefreshOnly { get; }
    public ReportChangedEventArgs(bool isRefreshOnly);
    public bool get_IsRefreshOnly();
}
internal enum Microsoft.Reporting.WebForms.ReportChangeType : Enum {
    public int value__;
    public static ReportChangeType None;
    public static ReportChangeType ReportObject;
    public static ReportChangeType Back;
    public static ReportChangeType Refresh;
}
internal class Microsoft.Reporting.WebForms.ReportControl : CompositeControl {
    public static string AutoRefreshParam;
    private ReportControlSession m_session;
    private Stream m_reportStream;
    private string m_styleBytesString;
    private string m_viewerInstanceIdentifier;
    private int m_pageNumber;
    private SearchState m_searchState;
    private int m_autoRefreshInterval;
    private string m_alertMessage;
    private ScrollTarget m_scrollTarget;
    private InteractivityPostBackMode m_interactivityMode;
    private string m_visibleContainerId;
    private HiddenField m_hiddenActionType;
    private HiddenField m_hiddenActionParam;
    private HiddenField m_hiddenZoomLevel;
    private Timer m_autoRefreshTimer;
    private PostBackTarget m_syncPostBackTarget;
    private string m_scrollScript;
    private string m_scrollContainerId;
    private string m_pageStyles;
    private static DeviceInfoNameBlackList m_blackListDeviceInfoNames;
    private EventHandler`1<ReportActionEventArgs> ReportAction;
    private ZoomChangedEventHandler ZoomChanged;
    protected HtmlTextWriterTag TagKey { get; }
    public string ScrollContainerId { get; public set; }
    public string VisibleContainerId { get; public set; }
    private string ActionScriptMethod { get; }
    private int ViewIteration { get; private set; }
    private string UniqueRenderingId { get; }
    private static ReportControl();
    protected virtual HtmlTextWriterTag get_TagKey();
    public string get_ScrollContainerId();
    public void set_ScrollContainerId(string value);
    public virtual void Dispose();
    public void add_ReportAction(EventHandler`1<ReportActionEventArgs> value);
    public void remove_ReportAction(EventHandler`1<ReportActionEventArgs> value);
    public void add_ZoomChanged(ZoomChangedEventHandler value);
    public void remove_ZoomChanged(ZoomChangedEventHandler value);
    public string get_VisibleContainerId();
    public void set_VisibleContainerId(string value);
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    private void RemoveNulls(Char[] chars, int count);
    protected virtual void RenderChildren(HtmlTextWriter writer);
    public void ClearReport();
    public void SetZoom(ZoomMode zoomMode, int zoomPercent);
    private void OnZoomChanged(object sender, EventArgs e);
    public int RenderReport(ReportControlSession session, string viewerInstanceIdentifier, PageCountMode pageCountMode, int pageNumber, InteractivityPostBackMode interactivityMode, SearchState searchState, string replacementRoot, string hyperlinkTarget, ScrollTarget scrollTarget, string alertMessage, DeviceInfoCollection initialDeviceInfos, string browserMode, bool sizeToContent);
    internal static DeviceInfoNameBlackList GetDeviceInfoBlackList();
    private NameValueCollection CreateDeviceInfo(DeviceInfoCollection initialDeviceInfos, Report report, int pageNumber, SearchState searchState, string replacementRoot, string linkTarget, string browserMode, bool useImageConsolidation);
    public sealed virtual void RaisePostBackEvent(string eventArgument);
    private void OnReportAction(object sender, EventArgs e);
    private void OnAutoRefresh(object sender, EventArgs e);
    private void OnReportAction(string actionType, string actionParam);
    private string get_ActionScriptMethod();
    private int get_ViewIteration();
    private void set_ViewIteration(int value);
    private string get_UniqueRenderingId();
    private static string MakeUniqueRenderingId(string instanceId, int viewiteration);
    public sealed virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    public sealed virtual IEnumerable`1<ScriptReference> GetScriptReferences();
}
internal abstract class Microsoft.Reporting.WebForms.ReportControlSession : object {
    protected StreamCache m_htmlStreamCache;
    private CreateStreamDelegate CreateStreamCallback { get; }
    public Report Report { get; }
    public string PrintCabVersion { get; }
    public sealed virtual void Dispose();
    public abstract virtual void DisposeNonSessionResources();
    public Stream RenderReportHTML4(NameValueCollection deviceInfo, PageCountMode pageCountMode, String& scrollScript, String& pageStyle);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
private CreateAndRegisterStream GetStreamCallback(StreamCache streamCache);
    private CreateStreamDelegate get_CreateStreamCallback();
    public Byte[] GetRendererImage(string streamID, String& mimeType);
    public Byte[] GetStreamImage(string streamID, string deviceInfo, String& mimeType);
    public abstract virtual Stream RenderReport(string format, bool allowInternalRenderers, string deviceInfo, NameValueCollection additionalParams, bool cacheSecondaryStreamsForHtml, String& mimeType, String& fileExtension);
    public abstract virtual void RenderReportForPrint(string deviceInfo, NameValueCollection additonalParams, HttpResponse response);
    public abstract virtual Report get_Report();
    public abstract virtual bool IsPrintCabSupported(ClientArchitecture arch);
    public abstract virtual void WritePrintCab(ClientArchitecture arch, Stream stream);
    public abstract virtual string get_PrintCabVersion();
    public abstract virtual string PrintCabCLSID(ClientArchitecture arch);
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WebForms.ReportCredentialsEventArgs : CancelEventArgs {
    private DataSourceCredentialsCollection m_credentials;
    public DataSourceCredentialsCollection Credentials { get; }
    internal ReportCredentialsEventArgs(DataSourceCredentialsCollection credentials);
    public DataSourceCredentialsCollection get_Credentials();
}
public class Microsoft.Reporting.WebForms.ReportCredentialsEventHandler : MulticastDelegate {
    public ReportCredentialsEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ReportCredentialsEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ReportCredentialsEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal abstract class Microsoft.Reporting.WebForms.ReportDataOperation : ViewerDataOperation {
    private static string ParamCulture;
    private static string ParamCultureUI;
    private static string ParamCultureUserOverride;
    private static string ParamCultureUIUserOverride;
    private static string ParamDrillDepth;
    protected ReportControlSession m_reportControlSession;
    public ReportDataOperation(bool requiresFullReportLoad);
    public virtual void Dispose();
    protected static string BaseQuery(Report report, string instanceID);
    internal static void SetStreamingHeaders(string mimeType, HttpResponse response);
    internal static void StreamToResponse(Stream data, string mimeType, HttpResponse response);
    internal static void StreamToResponse(Stream data, HttpResponse response);
    private static string BaseServerQuery(ServerReport serverReport);
}
public class Microsoft.Reporting.WebForms.ReportDataSource : object {
    private EventHandler Changed;
    private string m_dataSourceID;
    private string m_dataMember;
    private string m_name;
    private object m_value;
    [WebBrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
public string Name { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[WebBrowsableAttribute("True")]
public string DataSourceId { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[WebBrowsableAttribute("True")]
public string DataMember { get; public set; }
    public object Value { get; public set; }
    public ReportDataSource(string name);
    public ReportDataSource(string name, object dataSourceValue);
    public ReportDataSource(string name, DataTable dataSourceValue);
    public ReportDataSource(string name, string dataSourceId);
    public ReportDataSource(string name, IDataSource dataSourceValue);
    public ReportDataSource(string name, IEnumerable dataSourceValue);
    internal void add_Changed(EventHandler value);
    internal void remove_Changed(EventHandler value);
    internal void OnChanged();
    public string get_Name();
    public void set_Name(string value);
    internal void SetValueWithoutChange(object dsValue);
    public string get_DataSourceId();
    public void set_DataSourceId(string value);
    public string get_DataMember();
    public void set_DataMember(string value);
    public object get_Value();
    public void set_Value(object value);
}
[ComVisibleAttribute("False")]
[DefaultMemberAttribute("Item")]
public class Microsoft.Reporting.WebForms.ReportDataSourceCollection : SyncList`1<ReportDataSource> {
    private EventHandler Change;
    private EventHandler m_onChangeEventHandler;
    public ReportDataSource Item { get; }
    internal ReportDataSourceCollection(object syncObject);
    internal ReportDataSourceCollection(SerializationInfo info, StreamingContext context);
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public ReportDataSource get_Item(string name);
    internal void add_Change(EventHandler value);
    internal void remove_Change(EventHandler value);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, ReportDataSource item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, ReportDataSource item);
    private void RegisterItem(ReportDataSource item);
    private void UnregisterItem(ReportDataSource item);
    private void OnChange();
    private void OnChange(object sender, EventArgs e);
}
public class Microsoft.Reporting.WebForms.ReportDataSourceInfo : object {
    private string m_name;
    private string m_prompt;
    public string Name { get; }
    public string Prompt { get; }
    internal ReportDataSourceInfo(string name, string prompt);
    public string get_Name();
    public string get_Prompt();
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WebForms.ReportDataSourceInfoCollection : ReadOnlyCollection`1<ReportDataSourceInfo> {
    public ReportDataSourceInfo Item { get; }
    internal ReportDataSourceInfoCollection(IList`1<ReportDataSourceInfo> dsInfos);
    public ReportDataSourceInfo get_Item(string name);
    internal static ReportDataSourceInfoCollection FromSoapDataSourcePrompts(DataSourcePrompt[] soapPrompts);
}
public class Microsoft.Reporting.WebForms.ReportErrorEventArgs : EventArgs {
    private Exception m_exception;
    private bool m_isHandled;
    public Exception Exception { get; }
    public bool Handled { get; public set; }
    internal ReportErrorEventArgs(Exception e);
    public Exception get_Exception();
    public bool get_Handled();
    public void set_Handled(bool value);
}
public class Microsoft.Reporting.WebForms.ReportErrorEventHandler : MulticastDelegate {
    public ReportErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ReportErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ReportErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.WebForms.ReportHierarchy : Stack`1<ReportInfo> {
    public ReportInfo MainReport { get; }
    public ServerReport LastStaticServerReport { get; }
    public ReportHierarchy(ServerReport serverReport);
    public sealed virtual void Dispose();
    public void DisposeNonSessionResources();
    public ReportInfo get_MainReport();
    public ServerReport get_LastStaticServerReport();
    public void ConnectChangeEvents(EventHandler`1<ReportChangedEventArgs> changeHandler, InitializeDataSourcesEventHandler dataInitializationHandler);
    public void DisconnectChangeEvents(EventHandler`1<ReportChangedEventArgs> changeHandler, InitializeDataSourcesEventHandler dataInitializationHandler);
    public void LoadViewState(object viewStateObj);
    public object SaveViewState(bool includeReport);
    public void SyncToClientPage(int clientStackSize);
}
internal class Microsoft.Reporting.WebForms.ReportImageOperation : ReportDataOperation {
    private static string UrlParamStreamID;
    private static string UrlParamResourceStreamID;
    private static string UrlParamIterationId;
    public static string CreateUrl(Report report, string instanceID, bool isResourceStreamRoot);
    private static string CreateUrl(Report report, string instanceID, bool isResourceStreamRoot, string iterationId);
    public virtual void PerformOperation(NameValueCollection urlQuery, HttpResponse response);
    private void GetStreamImage(string streamID, HttpResponse response, string iterationId);
    private void GetRendererImage(string resourceID, HttpResponse response);
    private void WriteBytesToResponse(Byte[] bytes, string mimeType, HttpResponse response);
}
internal class Microsoft.Reporting.WebForms.ReportInfo : object {
    public int CurrentPage;
    public string ScrollPosition;
    public PageSettings PageSettings;
    private static int PAGESETTINGS_COUNT;
    private LocalModeSession m_localSession;
    private ServerModeSession m_serverSession;
    public LocalModeSession LocalSession { get; }
    public ServerModeSession ServerSession { get; }
    public LocalReport LocalReport { get; }
    public ServerReport ServerReport { get; }
    public ReportInfo(LocalModeSession localSession, ServerModeSession serverSession);
    private static ReportInfo();
    public sealed virtual void Dispose();
    public void DisposeNonSessionResources();
    public static void DisposeNonSessionResources(LocalModeSession localSession, ServerModeSession serverSession);
    public void LoadViewState(object viewStateObj);
    public object SaveViewState(bool includeReport);
    public void ConnectChangeEvent(EventHandler`1<ReportChangedEventArgs> changeHandler, InitializeDataSourcesEventHandler dataInitializationHandler);
    public void DisconnectChangeEvent(EventHandler`1<ReportChangedEventArgs> changeHandler, InitializeDataSourcesEventHandler dataInitializationHandler, bool disconnectUserEvents);
    public LocalModeSession get_LocalSession();
    public ServerModeSession get_ServerSession();
    public LocalReport get_LocalReport();
    public ServerReport get_ServerReport();
    private object SerializePageSettings();
    private void DeserializePageSettings(object pageSettings);
}
public class Microsoft.Reporting.WebForms.ReportPageSettings : object {
    private int m_pageWidth;
    private int m_pageHeight;
    private Margins m_margins;
    public PaperSize PaperSize { get; }
    public Margins Margins { get; }
    public bool IsLandscape { get; }
    internal PageSettings CustomPageSettings { get; }
    internal ReportPageSettings(double pageHeight, double pageWidth, double leftMargin, double rightMargin, double topMargin, double bottomMargin);
    private static int ConvertMmTo100thInch(double mm);
    public PaperSize get_PaperSize();
    public Margins get_Margins();
    public bool get_IsLandscape();
    internal PageSettings get_CustomPageSettings();
    internal static void UpdatePageSettingsForPrinter(PageSettings pageSettings, PrinterSettings printerSettings);
    internal PageSettings ToPageSettings(PrinterSettings currentPrinter);
}
public class Microsoft.Reporting.WebForms.ReportParameter : object {
    private string m_name;
    private StringCollection m_value;
    private bool m_visible;
    public string Name { get; public set; }
    public StringCollection Values { get; }
    public bool Visible { get; public set; }
    public ReportParameter(string name);
    public ReportParameter(string name, string value);
    public ReportParameter(string name, String[] values);
    public ReportParameter(string name, string value, bool visible);
    public ReportParameter(string name, String[] values, bool visible);
    public string get_Name();
    public void set_Name(string value);
    public StringCollection get_Values();
    public bool get_Visible();
    public void set_Visible(bool value);
    internal static NameValueCollection ToNameValueCollection(IEnumerable`1<ReportParameter> reportParameters);
    internal static ReportParameter[] FromNameValueCollection(NameValueCollection parameterColl);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Reporting.WebForms.ReportParameterCollection : Collection`1<ReportParameter> {
    public ReportParameter Item { get; }
    public ReportParameter get_Item(string name);
}
public class Microsoft.Reporting.WebForms.ReportParameterInfo : object {
    private string m_name;
    private ParameterDataType m_dataType;
    private bool m_isNullable;
    private bool m_allowBlank;
    private bool m_isMultiValue;
    private bool m_isQueryParameter;
    private string m_prompt;
    private bool m_promptUser;
    private bool m_areDefaultValuesQueryBased;
    private bool m_areValidValuesQueryBased;
    private string m_errorMessage;
    private IList`1<ValidValue> m_validValues;
    private IList`1<string> m_currentValues;
    private ParameterState m_state;
    private ReportParameterInfoCollection m_dependencyCollection;
    private ReportParameterInfoCollection m_dependentsCollection;
    private String[] m_dependencies;
    private List`1<ReportParameterInfo> m_dependentsCollectionConstruction;
    private bool m_visible;
    internal bool HasUnsatisfiedDownstreamParametersWithDefaults { get; }
    public string Name { get; }
    public ParameterDataType DataType { get; }
    public bool Nullable { get; }
    public bool AllowBlank { get; }
    public bool MultiValue { get; }
    public bool IsQueryParameter { get; }
    public string Prompt { get; }
    public bool PromptUser { get; }
    public ReportParameterInfoCollection Dependencies { get; }
    public ReportParameterInfoCollection Dependents { get; }
    public bool AreValidValuesQueryBased { get; }
    public IList`1<ValidValue> ValidValues { get; }
    public bool AreDefaultValuesQueryBased { get; }
    public IList`1<string> Values { get; }
    public ParameterState State { get; }
    public string ErrorMessage { get; }
    public bool Visible { get; internal set; }
    internal ReportParameterInfo(string name, ParameterDataType dataType, bool isNullable, bool allowBlank, bool isMultiValue, bool isQueryParameter, string prompt, bool promptUser, bool areDefaultValuesQueryBased, bool areValidValuesQueryBased, string errorMessage, String[] currentValues, IList`1<ValidValue> validValues, String[] dependencies, ParameterState state);
    internal void SetDependencies(ReportParameterInfoCollection coll);
    internal bool get_HasUnsatisfiedDownstreamParametersWithDefaults();
    public string get_Name();
    public ParameterDataType get_DataType();
    public bool get_Nullable();
    public bool get_AllowBlank();
    public bool get_MultiValue();
    public bool get_IsQueryParameter();
    public string get_Prompt();
    public bool get_PromptUser();
    public ReportParameterInfoCollection get_Dependencies();
    public ReportParameterInfoCollection get_Dependents();
    public bool get_AreValidValuesQueryBased();
    public IList`1<ValidValue> get_ValidValues();
    public bool get_AreDefaultValuesQueryBased();
    public IList`1<string> get_Values();
    public ParameterState get_State();
    public string get_ErrorMessage();
    public bool get_Visible();
    internal void set_Visible(bool value);
}
[ComVisibleAttribute("False")]
[DefaultMemberAttribute("Item")]
public class Microsoft.Reporting.WebForms.ReportParameterInfoCollection : ReadOnlyCollection`1<ReportParameterInfo> {
    public ReportParameterInfo Item { get; }
    internal ReportParameterInfoCollection(IList`1<ReportParameterInfo> parameterInfos);
    public ReportParameterInfo get_Item(string name);
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WebForms.ReportParametersEventArgs : CancelEventArgs {
    private ReportParameterCollection m_parameters;
    private bool m_autoSubmit;
    public ReportParameterCollection Parameters { get; }
    public bool AutoSubmit { get; }
    internal ReportParametersEventArgs(ReportParameterCollection parameters, bool autoSubmit);
    public ReportParameterCollection get_Parameters();
    public bool get_AutoSubmit();
}
public class Microsoft.Reporting.WebForms.ReportParametersEventHandler : MulticastDelegate {
    public ReportParametersEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ReportParametersEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ReportParametersEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.WebForms.ReportParameterSupplier : object {
    private Report m_report;
    public bool IsReadyForConnection { get; }
    public bool IsQueryExecutionAllowed { get; }
    public ReportParameterSupplier(Report report);
    public sealed virtual bool get_IsReadyForConnection();
    public sealed virtual bool get_IsQueryExecutionAllowed();
    public sealed virtual ReportParameterInfoCollection GetParameters();
    public sealed virtual void SetParameters(IEnumerable`1<ReportParameter> parameters);
    public sealed virtual ReportDataSourceInfoCollection GetDataSources(Boolean& allCredentialsSatisfied);
    public sealed virtual void SetDataSourceCredentials(DataSourceCredentialsCollection credentials);
}
internal enum Microsoft.Reporting.WebForms.ReportRenderingState : Enum {
    public int value__;
    public static ReportRenderingState NotReady;
    public static ReportRenderingState Preparing;
    public static ReportRenderingState Pending;
    public static ReportRenderingState AsyncWait;
    public static ReportRenderingState Ready;
    public static ReportRenderingState Completed;
}
public class Microsoft.Reporting.WebForms.ReportSecurityException : ReportViewerException {
    internal ReportSecurityException(string message);
    private ReportSecurityException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Reporting.WebForms.ReportServerException : ReportViewerException {
    private static string SoapErrorNamespace;
    private string m_errorCode;
    public string ErrorCode { get; }
    protected ReportServerException(string message, string errorCode, Exception innerException);
    protected ReportServerException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_ErrorCode();
    internal static ReportServerException FromException(Exception e);
    internal static ReportServerException FromMoreInformationNode(XmlNode moreInfoNode);
    private static XmlNode GetNestedMoreInformationNode(XmlNode node);
}
internal class Microsoft.Reporting.WebForms.ReportServerStyleSheetOperation : HandlerOperation {
    private static string ParamStyleSheetName;
    private static string ParamVersion;
    public static string CreateUrl(string styleSheetName, string version, bool isImage);
    public virtual void PerformOperation(NameValueCollection urlQuery, HttpResponse response);
    private static void ValidateStyleSheetAllowed();
}
internal class Microsoft.Reporting.WebForms.ReportSplitter : CompositeScriptControl {
    private IReportViewerStyles m_viewerStyle;
    private string m_tooltip;
    private bool m_isVertical;
    private bool m_isResizable;
    private bool m_isCollapsable;
    private HiddenField m_position;
    private HiddenField m_collapseState;
    private ImageButton m_image;
    private EventHandler CollapsedChanged;
    public bool IsCollapsed { get; public set; }
    public bool IsCollapsable { get; public set; }
    public bool IsResizable { get; public set; }
    public ReportSplitter(IReportViewerStyles viewerStyle, bool isVertical, string tooltip);
    protected virtual void CreateChildControls();
    private void CollapseState_ValueChanged(object sender, EventArgs e);
    public void add_CollapsedChanged(EventHandler value);
    public void remove_CollapsedChanged(EventHandler value);
    public bool get_IsCollapsed();
    public void set_IsCollapsed(bool value);
    public bool get_IsCollapsable();
    public void set_IsCollapsable(bool value);
    public bool get_IsResizable();
    public void set_IsResizable(bool value);
    public void WriteTableCellCenteringStyles(HtmlTextWriter writer);
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    public virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
}
[SRDescriptionAttribute("ReportViewerDescription")]
[PersistChildrenAttribute("False")]
[ParseChildrenAttribute("True")]
[DesignerAttribute("Microsoft.Reporting.WebForms.ReportViewerDesigner, Microsoft.ReportViewer.WebDesign, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91")]
public class Microsoft.Reporting.WebForms.ReportViewer : CompositeControl {
    public static int MaximumPageCount;
    private PageNavigationEventHandler PageNavigation;
    private BackEventHandler Back;
    private DocumentMapNavigationEventHandler DocumentMapNavigation;
    private BookmarkNavigationEventHandler BookmarkNavigation;
    private CancelEventHandler Toggle;
    private DrillthroughEventHandler Drillthrough;
    private SortEventHandler Sort;
    private SearchEventHandler Search;
    private CancelEventHandler ReportRefresh;
    private ReportErrorEventHandler ReportError;
    private ReportCredentialsEventHandler SubmittingDataSourceCredentials;
    private ReportParametersEventHandler SubmittingParameterValues;
    private AsyncWaitControl m_asyncWaitControl;
    private bool m_spinnyShouldSkipTimer;
    private UpdatePanel m_topLevelUpdatePanel;
    private UpdatePanel m_docMapUpdatePanel;
    private PanelUpdater m_panelUpdater;
    private ParametersArea m_parametersArea;
    private ReportSplitter m_parametersAreaSplitter;
    private ReportArea m_reportArea;
    private DocMapArea m_docMapArea;
    private ReportSplitter m_docMapAreaSplitter;
    private ToolbarControl m_toolbarArea;
    private NoScriptControl m_noScriptControl;
    private ReportViewerClientScript m_clientScript;
    private HiddenField m_direction;
    private HiddenField m_browserMode;
    private HttpHandlerMissingErrorMessage m_httpHandlerMissingError;
    private EventHandler`1<ReportChangedEventArgs> m_changeHandler;
    private InitializeDataSourcesEventHandler m_dataInitializationHandler;
    private bool m_viewStateSaved;
    private ReportChangeType m_reportHasChanged;
    private bool m_userParamsChanged;
    private bool m_viewReportClicked;
    private bool m_lockChanges;
    private bool m_hasErrorsOnThisPostBack;
    private bool m_aspSessionFailedToLoad;
    private ReportAreaContent m_contentType;
    private string m_originalWaitMessageFont;
    private string m_alertMessage;
    private ReportHierarchy m_reportHierarchy;
    private DeviceInfoCollection m_interactiveDeviceInfos;
    private Guid m_instanceIdentifier;
    protected HtmlTextWriterTag TagKey { get; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Appearance")]
[SRDescriptionAttribute("DocMapCollapsedDesc")]
[WebBrowsableAttribute("True")]
public bool DocumentMapCollapsed { get; public set; }
    [WebBrowsableAttribute("True")]
[CategoryAttribute("Appearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowToolBarDesc")]
public bool ShowToolBar { get; public set; }
    [CategoryAttribute("Appearance")]
[SRDescriptionAttribute("ShowParameterPromptsDesc")]
[WebBrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool ShowParameterPrompts { get; public set; }
    [WebBrowsableAttribute("True")]
[SRDescriptionAttribute("ShowCredentialPromptsDesc")]
[DefaultValueAttribute("True")]
[CategoryAttribute("Appearance")]
public bool ShowCredentialPrompts { get; public set; }
    [SRDescriptionAttribute("PromptAreaCollapsedDesc")]
[DefaultValueAttribute("False")]
[WebBrowsableAttribute("True")]
[CategoryAttribute("Appearance")]
public bool PromptAreaCollapsed { get; public set; }
    [WebBrowsableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowReportBodyDesc")]
[CategoryAttribute("Appearance")]
public bool ShowReportBody { get; public set; }
    [WebBrowsableAttribute("True")]
[DefaultValueAttribute("System.Web.UI.WebControls.Unit", "25%")]
[CategoryAttribute("Appearance")]
[SRDescriptionAttribute("DocMapWidthDesc")]
public Unit DocumentMapWidth { get; public set; }
    [SRDescriptionAttribute("ShowDocumentMapButtonDesc")]
[WebBrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool ShowDocumentMapButton { get; public set; }
    [DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowPromptAreaButtonDesc")]
[WebBrowsableAttribute("True")]
public bool ShowPromptAreaButton { get; public set; }
    [SRDescriptionAttribute("ShowPageNavigationDesc")]
[DefaultValueAttribute("True")]
[WebBrowsableAttribute("True")]
[SRCategoryAttribute("ToolBarCategoryDesc")]
public bool ShowPageNavigationControls { get; public set; }
    [SRDescriptionAttribute("ShowBackButtonDesc")]
[SRCategoryAttribute("ToolBarCategoryDesc")]
[DefaultValueAttribute("True")]
[WebBrowsableAttribute("True")]
public bool ShowBackButton { get; public set; }
    [SRDescriptionAttribute("ShowRefreshButtonDesc")]
[WebBrowsableAttribute("True")]
[SRCategoryAttribute("ToolBarCategoryDesc")]
[DefaultValueAttribute("True")]
public bool ShowRefreshButton { get; public set; }
    [SRDescriptionAttribute("ShowPrintButtonDesc")]
[WebBrowsableAttribute("True")]
[DefaultValueAttribute("True")]
[SRCategoryAttribute("ToolBarCategoryDesc")]
public bool ShowPrintButton { get; public set; }
    internal bool ShowAtomDataFeedButton { get; internal set; }
    [SRCategoryAttribute("ToolBarCategoryDesc")]
[WebBrowsableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowExportButtonDesc")]
public bool ShowExportControls { get; public set; }
    [SRCategoryAttribute("ToolBarCategoryDesc")]
[SRDescriptionAttribute("ShowZoomButtonDesc")]
[WebBrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool ShowZoomControl { get; public set; }
    [WebBrowsableAttribute("True")]
[SRCategoryAttribute("ToolBarCategoryDesc")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowFindButtonDesc")]
public bool ShowFindControls { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "#ECE9D8")]
public Color BackColor { get; public set; }
    [CategoryAttribute("Appearance")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("WaitMessageFontDesc")]
public FontInfo WaitMessageFont { get; }
    [SRDescriptionAttribute("InternalBorderStyleDesc")]
[DefaultValueAttribute]
[WebBrowsableAttribute("True")]
[CategoryAttribute("Appearance")]
public BorderStyle InternalBorderStyle { get; public set; }
    [CategoryAttribute("Appearance")]
[SRDescriptionAttribute("InternalBorderColorDesc")]
[WebBrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "#CCCCCC")]
public Color InternalBorderColor { get; public set; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "1px")]
[CategoryAttribute("Appearance")]
[SRDescriptionAttribute("InternalBorderWidthDesc")]
[WebBrowsableAttribute("True")]
public Unit InternalBorderWidth { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute]
[WebBrowsableAttribute("True")]
[SRDescriptionAttribute("ToolBarItemBorderStyleDesc")]
public BorderStyle ToolBarItemBorderStyle { get; public set; }
    [SRDescriptionAttribute("ToolBarItemBorderColorDesc")]
[WebBrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "#336699")]
[CategoryAttribute("Appearance")]
public Color ToolBarItemBorderColor { get; public set; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "1px")]
[WebBrowsableAttribute("True")]
[CategoryAttribute("Appearance")]
[SRDescriptionAttribute("ToolBarItemBorderWidthDesc")]
public Unit ToolBarItemBorderWidth { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute]
[ObsoleteAttribute("The report viewer no longer uses pressed buttons.")]
public BorderStyle ToolBarItemPressedBorderStyle { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "#336699")]
[ObsoleteAttribute("The report viewer no longer uses pressed buttons.")]
public Color ToolBarItemPressedBorderColor { get; public set; }
    [BrowsableAttribute("False")]
[ObsoleteAttribute("The report viewer no longer uses pressed buttons.")]
[DefaultValueAttribute("System.Web.UI.WebControls.Unit", "1px")]
public Unit ToolBarItemPressedBorderWidth { get; public set; }
    [CategoryAttribute("Appearance")]
[WebBrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "#DDEEF7")]
[SRDescriptionAttribute("ToolBarItemHoverBackColorDesc")]
public Color ToolBarItemHoverBackColor { get; public set; }
    [ObsoleteAttribute("The report viewer no longer uses pressed buttons.")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "#99BBE2")]
public Color ToolBarItemPressedHoverBackColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "#ECE9D8")]
[CategoryAttribute("Appearance")]
[WebBrowsableAttribute("True")]
[SRDescriptionAttribute("ToolBarItemHoverBackColorDesc")]
public Color SplitterBackColor { get; public set; }
    [SRDescriptionAttribute("LinkDisabledColorDesc")]
[CategoryAttribute("Appearance")]
[WebBrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Gray")]
public Color LinkDisabledColor { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("System.Drawing.Color", "#3366CC")]
[SRDescriptionAttribute("LinkActiveColorDesc")]
[WebBrowsableAttribute("True")]
public Color LinkActiveColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "#FF3300")]
[WebBrowsableAttribute("True")]
[SRDescriptionAttribute("LinkActiveHoverColorDesc")]
[CategoryAttribute("Appearance")]
public Color LinkActiveHoverColor { get; public set; }
    [WebBrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("SizeToContentDesc")]
[CategoryAttribute("Appearance")]
public bool SizeToReportContent { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebBrowsableAttribute("True")]
[SRDescriptionAttribute("ProcessingModeDesc")]
[DesignerSerializationVisibilityAttribute("1")]
public ProcessingMode ProcessingMode { get; public set; }
    [SRDescriptionAttribute("ServerReportDesc")]
[PersistenceModeAttribute]
[NotifyParentPropertyAttribute("True")]
public ServerReport ServerReport { get; }
    [NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("LocalReportDesc")]
[PersistenceModeAttribute]
public LocalReport LocalReport { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public int CurrentPage { get; public set; }
    [WebBrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("PageCountModeDesc")]
public PageCountMode PageCountMode { get; public set; }
    [WebBrowsableAttribute("True")]
[CategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ZoomModeDesc")]
public ZoomMode ZoomMode { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("100")]
[SRDescriptionAttribute("ZoomPercentDesc")]
[WebBrowsableAttribute("True")]
public int ZoomPercent { get; public set; }
    [SRDescriptionAttribute("AsyncRenderingDesc")]
[WebBrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool AsyncRendering { get; public set; }
    [DefaultValueAttribute("1000")]
[SRDescriptionAttribute("WaitControlDisplayAfterDesc")]
[WebBrowsableAttribute("True")]
public int WaitControlDisplayAfter { get; public set; }
    [DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowWaitControlCancelLinkDesc")]
[WebBrowsableAttribute("True")]
[CategoryAttribute("Appearance")]
public bool ShowWaitControlCancelLink { get; public set; }
    [WebBrowsableAttribute("True")]
[SRDescriptionAttribute("HyperlinkTargetDesc")]
[DefaultValueAttribute("_top")]
public string HyperlinkTarget { get; public set; }
    internal string ReplacementRoot { get; internal set; }
    [WebBrowsableAttribute("True")]
[SRDescriptionAttribute("ContentDispositionDesc")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ContentDisposition ExportContentDisposition { get; public set; }
    [WebBrowsableAttribute("True")]
[SRDescriptionAttribute("InteractivityPostBackModeDesc")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public InteractivityPostBackMode InteractivityPostBackMode { get; public set; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "400px")]
public Unit Height { get; public set; }
    [DefaultValueAttribute("System.Web.UI.WebControls.Unit", "400px")]
public Unit Width { get; public set; }
    [WebBrowsableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("KeepSessionAliveDesc")]
public bool KeepSessionAlive { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public ReportAreaContent ReportAreaContentType { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public SearchState SearchState { get; private set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DeviceInfoCollection InteractiveDeviceInfos { get; private set; }
    public string ID { get; public set; }
    internal PageSettings PageSettings { get; }
    private bool IsDrillthrough { get; }
    private ReportRenderingState RenderingState { get; private set; }
    private bool ClientCanceledRendering { get; private set; }
    private bool IsFullControlRendering { get; }
    internal bool ReportHasChanged { get; }
    internal bool IsClientRightToLeft { get; }
    internal IReportViewerStyles ViewerStyle { get; }
    private ScrollTarget ScrollTarget { get; private set; }
    private bool PromptAreaHasVisibleContent { get; }
    private bool ShouldRenderPromptArea { get; }
    private bool ShouldRenderToolbar { get; }
    private bool ShouldRenderPromptAreaSplitter { get; }
    private bool IsOrHasAttemptedToRenderReport { get; }
    private bool WillRenderReport { get; }
    internal string InstanceIdentifier { get; }
    private string ParametersRowID { get; }
    private string FixedTableID { get; }
    internal Report Report { get; }
    internal ReportControlSession ReportControlSession { get; }
    internal ReportHierarchy ReportHierarchy { get; }
    internal ReportSplitter ParametersAreaSplitter { get; }
    public virtual void Dispose();
    protected virtual HtmlTextWriterTag get_TagKey();
    private PropertyType GetViewStateProperty(string viewStateKey, PropertyType defaultValue);
    private bool SetUnlockedViewStateProperty(string viewStateKey, object oldValue, object newValue, UpdateGroup updateGroup);
    private bool SetViewStateProperty(string viewStateKey, object oldValue, object newValue, UpdateGroup group);
    private bool SetViewStatePropertyNoValidate(string viewStateKey, object oldValue, object newValue, UpdateGroup group);
    public bool get_DocumentMapCollapsed();
    public void set_DocumentMapCollapsed(bool value);
    private void SetDocumentMapCollapsedInternal(bool setToCollapsed, bool redrawClient);
    public bool get_ShowToolBar();
    public void set_ShowToolBar(bool value);
    public bool get_ShowParameterPrompts();
    public void set_ShowParameterPrompts(bool value);
    public bool get_ShowCredentialPrompts();
    public void set_ShowCredentialPrompts(bool value);
    public bool get_PromptAreaCollapsed();
    public void set_PromptAreaCollapsed(bool value);
    private void SetPromptAreaCollapsedInternal(bool setToCollapsed, bool redrawClient);
    public bool get_ShowReportBody();
    public void set_ShowReportBody(bool value);
    public Unit get_DocumentMapWidth();
    public void set_DocumentMapWidth(Unit value);
    public bool get_ShowDocumentMapButton();
    public void set_ShowDocumentMapButton(bool value);
    public bool get_ShowPromptAreaButton();
    public void set_ShowPromptAreaButton(bool value);
    public bool get_ShowPageNavigationControls();
    public void set_ShowPageNavigationControls(bool value);
    public bool get_ShowBackButton();
    public void set_ShowBackButton(bool value);
    public bool get_ShowRefreshButton();
    public void set_ShowRefreshButton(bool value);
    public bool get_ShowPrintButton();
    public void set_ShowPrintButton(bool value);
    internal bool get_ShowAtomDataFeedButton();
    internal void set_ShowAtomDataFeedButton(bool value);
    public bool get_ShowExportControls();
    public void set_ShowExportControls(bool value);
    public bool get_ShowZoomControl();
    public void set_ShowZoomControl(bool value);
    public bool get_ShowFindControls();
    public void set_ShowFindControls(bool value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public FontInfo get_WaitMessageFont();
    public BorderStyle get_InternalBorderStyle();
    public void set_InternalBorderStyle(BorderStyle value);
    public Color get_InternalBorderColor();
    public void set_InternalBorderColor(Color value);
    public Unit get_InternalBorderWidth();
    public void set_InternalBorderWidth(Unit value);
    public BorderStyle get_ToolBarItemBorderStyle();
    public void set_ToolBarItemBorderStyle(BorderStyle value);
    public Color get_ToolBarItemBorderColor();
    public void set_ToolBarItemBorderColor(Color value);
    public Unit get_ToolBarItemBorderWidth();
    public void set_ToolBarItemBorderWidth(Unit value);
    public BorderStyle get_ToolBarItemPressedBorderStyle();
    public void set_ToolBarItemPressedBorderStyle(BorderStyle value);
    public Color get_ToolBarItemPressedBorderColor();
    public void set_ToolBarItemPressedBorderColor(Color value);
    public Unit get_ToolBarItemPressedBorderWidth();
    public void set_ToolBarItemPressedBorderWidth(Unit value);
    public Color get_ToolBarItemHoverBackColor();
    public void set_ToolBarItemHoverBackColor(Color value);
    public Color get_ToolBarItemPressedHoverBackColor();
    public void set_ToolBarItemPressedHoverBackColor(Color value);
    public Color get_SplitterBackColor();
    public void set_SplitterBackColor(Color value);
    public Color get_LinkDisabledColor();
    public void set_LinkDisabledColor(Color value);
    public Color get_LinkActiveColor();
    public void set_LinkActiveColor(Color value);
    public Color get_LinkActiveHoverColor();
    public void set_LinkActiveHoverColor(Color value);
    public bool get_SizeToReportContent();
    public void set_SizeToReportContent(bool value);
    public ProcessingMode get_ProcessingMode();
    public void set_ProcessingMode(ProcessingMode value);
    public ServerReport get_ServerReport();
    public LocalReport get_LocalReport();
    public int get_CurrentPage();
    public void set_CurrentPage(int value);
    public PageCountMode get_PageCountMode();
    public void set_PageCountMode(PageCountMode value);
    public ZoomMode get_ZoomMode();
    public void set_ZoomMode(ZoomMode value);
    public int get_ZoomPercent();
    public void set_ZoomPercent(int value);
    public bool get_AsyncRendering();
    public void set_AsyncRendering(bool value);
    public int get_WaitControlDisplayAfter();
    public void set_WaitControlDisplayAfter(int value);
    public bool get_ShowWaitControlCancelLink();
    public void set_ShowWaitControlCancelLink(bool value);
    public string get_HyperlinkTarget();
    public void set_HyperlinkTarget(string value);
    internal string get_ReplacementRoot();
    internal void set_ReplacementRoot(string value);
    public ContentDisposition get_ExportContentDisposition();
    public void set_ExportContentDisposition(ContentDisposition value);
    public InteractivityPostBackMode get_InteractivityPostBackMode();
    public void set_InteractivityPostBackMode(InteractivityPostBackMode value);
    public virtual Unit get_Height();
    public virtual void set_Height(Unit value);
    public virtual Unit get_Width();
    public virtual void set_Width(Unit value);
    public bool get_KeepSessionAlive();
    public void set_KeepSessionAlive(bool value);
    public ReportAreaContent get_ReportAreaContentType();
    public SearchState get_SearchState();
    private void set_SearchState(SearchState value);
    public DeviceInfoCollection get_InteractiveDeviceInfos();
    private void set_InteractiveDeviceInfos(DeviceInfoCollection value);
    public void JumpToBookmark(string bookmarkId);
    private void JumpToBookmark(string bookmarkId, bool fireEvents);
    public void JumpToDocumentMapId(string documentMapId);
    private void JumpToDocumentMapId(string documentMapId, bool fireEvents);
    public void PerformBack();
    private void PerformBack(bool fireEvents);
    private void PerformPageNavigation(int targetPage, bool fireEvents);
    private void OnClientSideZoomChanged(object sender, ZoomChangeEventArgs e);
    internal void OnReportAction(object sender, ReportActionEventArgs e);
    private void OnDocumentMapNavigation(object sender, DocumentMapNavigationEventArgs e);
    private void PerformRefresh(bool isAutoRefresh);
    public void Find(string searchText, int startPage);
    private void FindNext();
    private void HandleSearchResult(SearchResult result, SearchState searchState, bool searchNext, int newPage, ScrollTarget scrollTarget);
    private void PerformToggle(string toggleId);
    private void PerformDrillthrough(string drillthroughId);
    private void PerformSort(string clientSortAction);
    private ReportActionHandler CreateActionHandler(bool fireEvents);
    public void Reset();
    public void add_PageNavigation(PageNavigationEventHandler value);
    public void remove_PageNavigation(PageNavigationEventHandler value);
    public void add_Back(BackEventHandler value);
    public void remove_Back(BackEventHandler value);
    public void add_DocumentMapNavigation(DocumentMapNavigationEventHandler value);
    public void remove_DocumentMapNavigation(DocumentMapNavigationEventHandler value);
    public void add_BookmarkNavigation(BookmarkNavigationEventHandler value);
    public void remove_BookmarkNavigation(BookmarkNavigationEventHandler value);
    public void add_Toggle(CancelEventHandler value);
    public void remove_Toggle(CancelEventHandler value);
    public void add_Drillthrough(DrillthroughEventHandler value);
    public void remove_Drillthrough(DrillthroughEventHandler value);
    public void add_Sort(SortEventHandler value);
    public void remove_Sort(SortEventHandler value);
    public void add_Search(SearchEventHandler value);
    public void remove_Search(SearchEventHandler value);
    public void add_ReportRefresh(CancelEventHandler value);
    public void remove_ReportRefresh(CancelEventHandler value);
    public void add_ReportError(ReportErrorEventHandler value);
    public void remove_ReportError(ReportErrorEventHandler value);
    internal void OnError(object sender, ReportErrorEventArgs e);
    internal void OnError(Exception e);
    public void add_SubmittingDataSourceCredentials(ReportCredentialsEventHandler value);
    public void remove_SubmittingDataSourceCredentials(ReportCredentialsEventHandler value);
    private void OnSubmittingDataSourceCredentials(object sender, ReportCredentialsEventArgs credentialArgs);
    public void add_SubmittingParameterValues(ReportParametersEventHandler value);
    public void remove_SubmittingParameterValues(ReportParametersEventHandler value);
    private void OnSubmittingParameterValues(object sender, ReportParametersEventArgs parameterArgs);
    public virtual string get_ID();
    public virtual void set_ID(string value);
    internal PageSettings get_PageSettings();
    public PageSettings GetPageSettings();
    public void ResetPageSettings();
    private PageSettings ResetAndGetPageSettings();
    public void SetPageSettings(PageSettings pageSettings);
    private void CreateReportHierarchy();
    private void DisconnectReportHierarchy(bool shouldDispose);
    public void RegisterPostBackControl(Control control);
    private bool get_IsDrillthrough();
    protected virtual Style CreateControlStyle();
    private ReportRenderingState get_RenderingState();
    private void set_RenderingState(ReportRenderingState value);
    private bool get_ClientCanceledRendering();
    private void set_ClientCanceledRendering(bool value);
    protected virtual void CreateChildControls();
    private void OnClientCanceledStateChanged(object sender, ClientCanceledStateChangeEventArgs e);
    private bool get_IsFullControlRendering();
    internal void Update();
    protected virtual void Render(HtmlTextWriter writer);
    private bool RenderTopLevelUpdatePanelContents(HtmlTextWriter writer);
    private void RenderReport(bool updateDocMap);
    protected virtual void OnInit(EventArgs e);
    private void SetToLegacyClientIDMode();
    protected virtual void OnPreRender(EventArgs e);
    private void OnAsyncLoadReport(object sender, EventArgs e);
    private sealed virtual override IEnumerable`1<ScriptDescriptor> System.Web.UI.IScriptControl.GetScriptDescriptors();
    private sealed virtual override IEnumerable`1<ScriptReference> System.Web.UI.IScriptControl.GetScriptReferences();
    private void InitializeDataSources(object sender, InitializeDataSourcesEventArgs e);
    private void InitializeDataSources(ReportDataSourceCollection dataSources);
    private void ValidateAllDataSourcesSatisfied();
    private static Control FindControl(Control control, string controlID);
    internal bool get_ReportHasChanged();
    internal bool get_IsClientRightToLeft();
    private void ClientSidePromptAreaVisibilityChanged(object sender, EventArgs e);
    private void ClientSideDocMapAreaVisibilityChanged(object sender, EventArgs e);
    private void EnsureUnlocked();
    protected virtual void LoadViewState(object savedState);
    protected virtual object SaveViewState();
    internal virtual bool EnsureSessionOrConfig();
    internal virtual ServerReport CreateServerReport();
    internal virtual IReportViewerStyles get_ViewerStyle();
    internal void ApplyConnectionToServerReport(IReportServerConnection connection, ServerReport serverReport);
    private ScrollTarget get_ScrollTarget();
    private void set_ScrollTarget(ScrollTarget value);
    private bool get_PromptAreaHasVisibleContent();
    private bool get_ShouldRenderPromptArea();
    private bool get_ShouldRenderToolbar();
    private bool get_ShouldRenderPromptAreaSplitter();
    private bool get_IsOrHasAttemptedToRenderReport();
    private bool get_WillRenderReport();
    private void OnViewReport(object sender, EventArgs e);
    private void OnParameterValuesChanged(object sender, EventArgs e);
    private void OnReportChanged(object sender, ReportChangedEventArgs e);
    private void InternalSetCurrentPage(int pageNumber, ScrollTarget scrollTarget);
    [ConditionalAttribute("DEBUG")]
private static void DebugRoundTripSerializers(object obj);
    internal string get_InstanceIdentifier();
    internal void UseExistingLocalSession(string otherViewerInstanceIdentifier);
    private ReportHierarchy GetReportHierarchyFromSession();
    private void ConnectNewReportHierarchy(ReportHierarchy newReportHierarchy);
    private string get_ParametersRowID();
    private string get_FixedTableID();
    internal Report get_Report();
    internal ReportControlSession get_ReportControlSession();
    internal ReportHierarchy get_ReportHierarchy();
    internal ReportSplitter get_ParametersAreaSplitter();
}
internal class Microsoft.Reporting.WebForms.ReportViewerClientScript : CompositeControl {
    private List`1<ScriptDescriptor> m_scriptDescriptors;
    private HiddenField m_actionType;
    private HiddenField m_actionParam;
    private EventHandler`1<ReportActionEventArgs> ReportAction;
    public static bool IsZoomSupported { get; }
    public static bool IsPrintingSupported { get; }
    public static bool IsIE55OrHigher { get; }
    public static bool IsGeckoLayoutEngine { get; }
    public void add_ReportAction(EventHandler`1<ReportActionEventArgs> value);
    public void remove_ReportAction(EventHandler`1<ReportActionEventArgs> value);
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    protected virtual void CreateChildControls();
    public static bool get_IsZoomSupported();
    public static bool get_IsPrintingSupported();
    public static bool get_IsIE55OrHigher();
    public static bool get_IsGeckoLayoutEngine();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    private sealed virtual override IEnumerable`1<ScriptReference> System.Web.UI.IScriptControl.GetScriptReferences();
    private sealed virtual override IEnumerable`1<ScriptDescriptor> System.Web.UI.IScriptControl.GetScriptDescriptors();
    public void SetViewerInfo(ReportViewer viewer, string reportAreaId, string promptAreaRowId, string docMapAreaId, string fixedTableId, string promptSplitterId, string docMapSplitterId, string docMapHeaderOverflowId, string directionCacheId, string browserModeCacheId, ClientPrintInfo clientPrintInfo);
    private void RenderPrintScript(ScriptControlDescriptor desc, ClientPrintInfo clientPrintInfo);
}
public class Microsoft.Reporting.WebForms.ReportViewerCookieCollection : SyncList`1<Cookie> {
    internal ReportViewerCookieCollection(object syncObject);
}
internal static class Microsoft.Reporting.WebForms.ReportViewerEmbeddedResources : object {
    public static string ResourceNamespace;
    private static string ImagePrefix;
    public static string FirstPage;
    public static string PrevPage;
    public static string NextPage;
    public static string LastPage;
    public static string FirstPageDisabled;
    public static string PrevPageDisabled;
    public static string NextPageDisabled;
    public static string LastPageDisabled;
    public static string Refresh;
    public static string RefreshDisabled;
    public static string DocMap;
    public static string Print;
    public static string PrintDisabled;
    public static string BackRTLEnabled;
    public static string BackRTLDisabled;
    public static string AtomDataFeed;
    public static string AtomDataFeedDisabled;
    public static string BackEnabled;
    public static string BackDisabled;
    public static string MultiValueSelect;
    public static string SpinningWheel;
    public static string HandleGrip;
    public static string HandleGripRTL;
    public static string ToolbarBack;
    public static string DocMapBack;
    public static string SplitterHorizCollapse;
    public static string SplitterHorizCollapseHover;
    public static string SplitterHorizExpand;
    public static string SplitterHorizExpandHover;
    public static string SplitterVertCollapse;
    public static string SplitterVertCollapseHover;
    public static string SplitterVertExpand;
    public static string SplitterVertExpandHover;
    public static string Export;
    public static string ExportDisabled;
    public static string MenuArrow;
    public static string MenuArrowDisabled;
    public static string DocMapExpandIcon;
    public static string DocMapCollapseIcon;
    public static string DocMapSpacerIcon;
    public static string ViewerScript;
    public static string AsyncWaitControlScript;
    public static string DocMapAreaScript;
    public static string InternalViewerScript;
    public static string SessionKeepAliveScript;
    public static string BrowserNavigationCorrectorScript;
    public static string HoverImageScript;
    public static string ScriptSwitchImageScript;
    public static string TextButtonScript;
    public static string ReportAreaScript;
    public static string ReportPageScript;
    public static string ParameterInputControlsScript;
    public static string ResizableBehaviorScript;
    public static string PromptAreaScript;
    public static string ToolbarScript;
    public static string ToolbarMenuScript;
    public static string SplitterScript;
    public static string CommonScript;
    public static string StyleSheet;
    private static ResourceList m_resourceList;
    private static ReportViewerEmbeddedResources();
    public static Byte[] Get(string name, String& mimeType);
}
public abstract class Microsoft.Reporting.WebForms.ReportViewerException : Exception {
    protected ReportViewerException(string message);
    protected ReportViewerException(string message, Exception innerException);
    protected ReportViewerException(SerializationInfo info, StreamingContext context);
}
internal static class Microsoft.Reporting.WebForms.ReportViewerFactory : object {
    public static string AppSettingServerCredentials;
    public static string AppSettingTempStorage;
    public static string AppSettingViewerMessages;
    public static HttpHandler HttpHandler { get; }
    public static ReportViewer CreateReportViewer();
    public static HttpHandler get_HttpHandler();
}
public class Microsoft.Reporting.WebForms.ReportViewerHeaderCollection : SyncList`1<string> {
    internal ReportViewerHeaderCollection(object syncObject);
}
internal class Microsoft.Reporting.WebForms.ReportViewerStyle : Style {
    private static string _ViewStateInternalBorderColor;
    private static string _ViewStateInternalBorderStyle;
    private static string _ViewStateInternalBorderWidth;
    private static string _ViewStateToolbarItemBorderColor;
    private static string _ViewStateToolbarItemBorderStyle;
    private static string _ViewStateToolbarItemBorderWidth;
    private static string _ViewStateHoverBackColor;
    private static string _ViewStateSplitterBackColor;
    private static string _ViewStateLinkDisabledColor;
    private static string _ViewStateLinkActiveColor;
    private static string _ViewStateLinkActiveHoverColor;
    private Label m_waitFontControl;
    private Label m_waitCancelFontControl;
    public bool ObeySizeProperties;
    public FontInfo WaitMessageFont { get; }
    public FontInfo WaitMessageCancelFont { get; }
    public BorderStyle InternalBorderStyle { get; public set; }
    public Color InternalBorderColor { get; public set; }
    public Unit InternalBorderWidth { get; public set; }
    public BorderStyle ToolbarItemBorderStyle { get; public set; }
    public Color ToolbarItemBorderColor { get; public set; }
    public Unit ToolbarItemBorderWidth { get; public set; }
    public Color HoverBackColor { get; public set; }
    public Color SplitterBackColor { get; public set; }
    public Color LinkDisabledColor { get; public set; }
    public Color LinkActiveColor { get; public set; }
    public Color LinkActiveHoverColor { get; public set; }
    private bool Microsoft.Reporting.WebForms.IReportViewerStyles.GetFontFromCss { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.NormalButtonBorderValue { get; }
    private Unit Microsoft.Reporting.WebForms.IReportViewerStyles.NormalButtonBorderWidth { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.HoverButtonBorderValue { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.InternalBorderValue { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.HoverButtonNormal { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.HoverButtonHover { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.HoverButtonDisabled { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.Image { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ToolbarButtonContainer { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ToolbarBackground { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ToolbarGroup { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ToolbarGroupSpacer { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ToolbarGroupShortSpacer { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ToolbarInterGroupSpacing { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ToolbarText { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ToolbarPageNav { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ToolbarCurrentPage { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ToolbarRefresh { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ToolbarZoom { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ToolbarFind { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ToolbarExport { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ToolbarPrint { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ToolbarAtomDataFeed { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ToolbarParams { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.LinkActive { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.LinkDisabled { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.SplitterNormal { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.SplitterHover { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ViewerAreaBackground { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.CheckBox { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ToolbarTextBox { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ParameterTextBox { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ParameterDisabledTextBox { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ParameterContainer { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.EmptyDropDown { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ViewReportContainer { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ParameterLabel { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ParameterInput { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.ParameterColumnSpacer { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.MultiValueValidValueDropDown { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.DocMapAndReportFrame { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.WaitCell { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.WaitText { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.CancelLinkDiv { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.CancelLinkText { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.WaitControlBackground { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.DocMapHeader { get; }
    private string Microsoft.Reporting.WebForms.IReportViewerStyles.DocMapContent { get; }
    public ReportViewerStyle(StateBag bag);
    private void SetDefaults();
    public static CssStyleCollection GetStylesForFont(FontInfo font);
    public static string GetHtmlStyleForFont(FontInfo font);
    public virtual void AddAttributesToRender(HtmlTextWriter writer, WebControl owner);
    protected virtual void FillStyleAttributes(CssStyleCollection attributes, IUrlResolutionService urlResolver);
    public sealed virtual FontInfo get_WaitMessageFont();
    public sealed virtual FontInfo get_WaitMessageCancelFont();
    public BorderStyle get_InternalBorderStyle();
    public void set_InternalBorderStyle(BorderStyle value);
    public Color get_InternalBorderColor();
    public void set_InternalBorderColor(Color value);
    public Unit get_InternalBorderWidth();
    public void set_InternalBorderWidth(Unit value);
    public BorderStyle get_ToolbarItemBorderStyle();
    public void set_ToolbarItemBorderStyle(BorderStyle value);
    public Color get_ToolbarItemBorderColor();
    public void set_ToolbarItemBorderColor(Color value);
    public Unit get_ToolbarItemBorderWidth();
    public void set_ToolbarItemBorderWidth(Unit value);
    public sealed virtual Color get_HoverBackColor();
    public void set_HoverBackColor(Color value);
    public sealed virtual Color get_SplitterBackColor();
    public void set_SplitterBackColor(Color value);
    public sealed virtual Color get_LinkDisabledColor();
    public void set_LinkDisabledColor(Color value);
    public sealed virtual Color get_LinkActiveColor();
    public void set_LinkActiveColor(Color value);
    public sealed virtual Color get_LinkActiveHoverColor();
    public void set_LinkActiveHoverColor(Color value);
    private void AddBorderAttributes(HtmlTextWriter writer, string direction, BorderStyle style, Color color, Unit width);
    private static string BorderValue(BorderStyle style, Color color, Unit width);
    internal static void ApplyButtonStyle(IReportViewerStyles m_viewerStyle, WebControl control);
    internal static string ToolbarItemStyles(IReportViewerStyles m_viewerStyle, bool enabled, bool normal);
    private sealed virtual override bool Microsoft.Reporting.WebForms.IReportViewerStyles.get_GetFontFromCss();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_NormalButtonBorderValue();
    private sealed virtual override Unit Microsoft.Reporting.WebForms.IReportViewerStyles.get_NormalButtonBorderWidth();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_HoverButtonBorderValue();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_InternalBorderValue();
    private sealed virtual override void Microsoft.Reporting.WebForms.IReportViewerStyles.AddInternalBorderAttributes(HtmlTextWriter writer, string direction);
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_HoverButtonNormal();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_HoverButtonHover();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_HoverButtonDisabled();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_Image();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ToolbarButtonContainer();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ToolbarBackground();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ToolbarGroup();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ToolbarGroupSpacer();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ToolbarGroupShortSpacer();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ToolbarInterGroupSpacing();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ToolbarText();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ToolbarPageNav();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ToolbarCurrentPage();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ToolbarRefresh();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ToolbarZoom();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ToolbarFind();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ToolbarExport();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ToolbarPrint();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ToolbarAtomDataFeed();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ToolbarParams();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_LinkActive();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_LinkDisabled();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_SplitterNormal();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_SplitterHover();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ViewerAreaBackground();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_CheckBox();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ToolbarTextBox();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ParameterTextBox();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ParameterDisabledTextBox();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ParameterContainer();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_EmptyDropDown();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ViewReportContainer();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ParameterLabel();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ParameterInput();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_ParameterColumnSpacer();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_MultiValueValidValueDropDown();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_DocMapAndReportFrame();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_WaitCell();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_WaitText();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_CancelLinkDiv();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_CancelLinkText();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_WaitControlBackground();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_DocMapHeader();
    private sealed virtual override string Microsoft.Reporting.WebForms.IReportViewerStyles.get_DocMapContent();
    private virtual override FontInfo Microsoft.Reporting.WebForms.IReportViewerStyles.get_Font();
    private virtual override Color Microsoft.Reporting.WebForms.IReportViewerStyles.get_BackColor();
}
internal class Microsoft.Reporting.WebForms.SafeLiteralControl : WebControl {
    public bool Disabled;
    public string Text;
    internal SafeLiteralControl(string text);
    internal SafeLiteralControl(string text, bool disabled);
    protected virtual void Render(HtmlTextWriter writer);
}
public class Microsoft.Reporting.WebForms.ScriptManagerNotFoundException : ConfigurationErrorsException {
    private ScriptManagerNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Reporting.WebForms.ScriptReferenceValidationDescriptor : ScriptDescriptor {
    private string m_errorMessageDivID;
    public ScriptReferenceValidationDescriptor(string errorMessageDivID);
    protected virtual string GetScript();
}
internal class Microsoft.Reporting.WebForms.ScriptSwitchImage : CompositeControl {
    private EventHandler ClickImage1;
    private HoverImage m_image1Hover;
    private HoverImage m_image2Hover;
    private ToolbarImageInfo m_image1;
    private ToolbarImageInfo m_image2;
    private bool m_image2Disabled;
    private string m_tooltip;
    private ReportViewer m_viewer;
    protected HtmlTextWriterTag TagKey { get; }
    public bool ShowImage2 { get; public set; }
    public ScriptSwitchImage(ToolbarImageInfo image1, ToolbarImageInfo image2, bool image2Disabled, string tooltip, ReportViewer viewer);
    public void add_ClickImage1(EventHandler value);
    public void remove_ClickImage1(EventHandler value);
    protected virtual HtmlTextWriterTag get_TagKey();
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    private void Image1_Click(object sender, EventArgs e);
    public bool get_ShowImage2();
    public void set_ShowImage2(bool value);
    private sealed virtual override IEnumerable`1<ScriptDescriptor> System.Web.UI.IScriptControl.GetScriptDescriptors();
    private sealed virtual override IEnumerable`1<ScriptReference> System.Web.UI.IScriptControl.GetScriptReferences();
}
internal class Microsoft.Reporting.WebForms.ScrollTarget : object {
    private string m_navigationId;
    private string m_pixelPosition;
    private ActionScrollStyle m_scrollStyle;
    public string NavigationId { get; }
    public string PixelPosition { get; }
    public ActionScrollStyle ScrollStyle { get; }
    public ScrollTarget(string navigationId, ActionScrollStyle scrollStyle);
    public ScrollTarget(string pixelPosition);
    [DebuggerStepThroughAttribute]
public string get_NavigationId();
    [DebuggerStepThroughAttribute]
public string get_PixelPosition();
    [DebuggerStepThroughAttribute]
public ActionScrollStyle get_ScrollStyle();
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WebForms.SearchEventArgs : CancelEventArgs {
    private string m_searchString;
    private int m_startPage;
    private bool m_isFindNext;
    public string SearchString { get; }
    public int StartPage { get; }
    public bool IsFindNext { get; }
    public SearchEventArgs(string searchString, int startPage, bool isFindNext);
    public string get_SearchString();
    public int get_StartPage();
    public bool get_IsFindNext();
}
public class Microsoft.Reporting.WebForms.SearchEventHandler : MulticastDelegate {
    public SearchEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SearchEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SearchEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum Microsoft.Reporting.WebForms.SearchResult : Enum {
    public int value__;
    public static SearchResult FoundMoreHits;
    public static SearchResult NoMoreHits;
    public static SearchResult Cancelled;
}
public class Microsoft.Reporting.WebForms.SearchState : object {
    private string m_text;
    private int m_startPage;
    public string Text { get; }
    public int StartPage { get; }
    internal SearchState(string text, int startPage);
    public string get_Text();
    public int get_StartPage();
}
internal static class Microsoft.Reporting.WebForms.SecurityAssertionHandler : object {
    private static bool m_assumeFullTrust;
    private static SecurityAssertionHandler();
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
internal static void RunWithSecurityAssert(CodeAccessPermission permission, Action action);
    internal static TResult RunWithSecurityAssert(CodeAccessPermission permission, Func`1<TResult> action);
}
internal class Microsoft.Reporting.WebForms.ServerErrorValidator : CustomValidator {
    protected virtual void OnPreRender(EventArgs e);
    protected virtual bool OnServerValidate(string value);
}
internal class Microsoft.Reporting.WebForms.ServerErrorValidatorForException : ServerErrorValidator {
    private ErrorControl m_errorControl;
    public ControlCollection Controls { get; }
    public void SetException(Exception e);
    protected virtual void CreateChildControls();
    public virtual ControlCollection get_Controls();
    protected virtual void Render(HtmlTextWriter writer);
}
internal class Microsoft.Reporting.WebForms.ServerModeSession : ReportControlSession {
    private ServerReport m_serverReport;
    public Report Report { get; }
    public string PrintCabVersion { get; }
    public ServerModeSession(ServerReport serverReport);
    public virtual void DisposeNonSessionResources();
    public virtual Stream RenderReport(string format, bool allowInternalRenderers, string deviceInfo, NameValueCollection additionalParams, bool cacheSecondaryStreamsForHtml, String& mimeType, String& fileExtension);
    public virtual void RenderReportForPrint(string deviceInfo, NameValueCollection additonalParams, HttpResponse response);
    public virtual Report get_Report();
    public virtual bool IsPrintCabSupported(ClientArchitecture arch);
    public virtual void WritePrintCab(ClientArchitecture arch, Stream stream);
    public virtual string get_PrintCabVersion();
    public virtual string PrintCabCLSID(ClientArchitecture arch);
    public static bool IsPrintCabSupportedByLatestVersion(ClientArchitecture arch);
    public static string GetPrintCabFileName(ClientArchitecture arch);
    public static string GetPrintControlClsid(ClientArchitecture arch);
}
public class Microsoft.Reporting.WebForms.ServerReport : Report {
    private static string ParamServerSession;
    private EventHandler ExecutionIDChanged;
    private Uri m_serverUrl;
    private IReportServerCredentials m_serverCredentials;
    private WindowsIdentity m_serverIdentity;
    private ReportViewerHeaderCollection m_headers;
    private ReportViewerCookieCollection m_cookies;
    private string m_reportPath;
    private string m_historyID;
    private string m_executionID;
    private int m_timeOut;
    private List`1<int> m_hiddenParameters;
    private IReportExecutionService m_service;
    private ExecutionInfo m_executionInfo;
    private TrustedUserHeader m_trustedUserHeader;
    private RenderingExtension[] m_renderingExtensions;
    private AbortState m_abortState;
    internal TrustedUserHeader TrustedUserHeaderValue { get; internal set; }
    [SRDescriptionAttribute("ReportServerUrlDesc")]
[WebBrowsableAttribute("True")]
[DefaultValueAttribute("System.Uri", "http://localhost/reportserver")]
[NotifyParentPropertyAttribute("True")]
public Uri ReportServerUrl { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IReportServerCredentials ReportServerCredentials { get; public set; }
    [WebBrowsableAttribute("True")]
[SRDescriptionAttribute("ServerTimeoutDesc")]
[DefaultValueAttribute("600000")]
[NotifyParentPropertyAttribute("True")]
public int Timeout { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public ReportViewerHeaderCollection Headers { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public ReportViewerCookieCollection Cookies { get; }
    [NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("ServerReportPathDesc")]
[WebBrowsableAttribute("True")]
[DefaultValueAttribute("")]
public string ReportPath { get; public set; }
    [WebBrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("HistoryIdDesc")]
public string HistoryId { get; public set; }
    internal string DisplayNameForUse { get; }
    internal bool HasExecutionId { get; }
    internal bool CanSelfCancel { get; }
    private PageCountMode PageCountMode { get; }
    internal bool HasDocMap { get; }
    internal int AutoRefreshInterval { get; }
    internal bool IsReadyForConnection { get; }
    internal bool IsPreparedReportReadyForRendering { get; }
    private bool IsReadyForProcessingPostTasks { get; }
    internal static bool RequiresConnection { get; }
    internal string ReportUrlNoScript { get; }
    internal static string ClientPrintCabX86Name { get; }
    private IReportExecutionService Service { get; }
    internal ServerReport(ServerReport original);
    private ServerReport(ServerReport parentReport, ExecutionInfo executionInfo);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
internal ServerReport(SerializationInfo info, StreamingContext context);
    private IReportExecutionService CreateExecutionService();
    internal TrustedUserHeader get_TrustedUserHeaderValue();
    internal void set_TrustedUserHeaderValue(TrustedUserHeader value);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    internal void add_ExecutionIDChanged(EventHandler value);
    internal void remove_ExecutionIDChanged(EventHandler value);
    private void OnExecutionIDChanged();
    internal object SaveViewState();
    internal void LoadViewState(object viewStateObj);
    internal string SerializeToUrlQuery();
    internal void LoadFromUrlQuery(NameValueCollection requestParameters, bool fullReportLoad);
    private void OnCredentialsChanged(IReportServerCredentials credentials);
    public Uri get_ReportServerUrl();
    public void set_ReportServerUrl(Uri value);
    public IReportServerCredentials get_ReportServerCredentials();
    public void set_ReportServerCredentials(IReportServerCredentials value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public ReportViewerHeaderCollection get_Headers();
    public ReportViewerCookieCollection get_Cookies();
    public string get_ReportPath();
    public void set_ReportPath(string value);
    public string get_HistoryId();
    public void set_HistoryId(string value);
    internal virtual string get_DisplayNameForUse();
    private static string RetrieveReportNameFromPath(string reportPath);
    internal DateTime GetExecutionSessionExpiration();
    public bool IsQueryExecutionAllowed();
    public virtual ReportParameterInfoCollection GetParameters();
    public virtual void SetParameters(IEnumerable`1<ReportParameter> parameters);
    public virtual ReportPageSettings GetDefaultPageSettings();
    public void SetDataSourceCredentials(IEnumerable`1<DataSourceCredentials> credentials);
    public void SetExecutionId(string executionId);
    internal void SetExecutionId(string executionId, bool fullReportLoad);
    internal bool get_HasExecutionId();
    public string GetExecutionId();
    internal virtual bool get_CanSelfCancel();
    internal virtual void SetCancelState(bool shouldCancel);
    public Stream Render(string format, string deviceInfo, NameValueCollection urlAccessParameters, String& mimeType, String& fileNameExtension);
    public void Render(string format, string deviceInfo, NameValueCollection urlAccessParameters, Stream reportStream, String& mimeType, String& fileNameExtension);
    internal void InternalRender(bool isAbortable, string format, string deviceInfo, NameValueCollection urlAccessParameters, Stream reportStream, String& mimeType, String& fileNameExtension);
    public virtual Byte[] Render(string format, string deviceInfo, PageCountMode pageCountMode, String& mimeType, String& encoding, String& fileNameExtension, String[]& streams, Warning[]& warnings);
    private void UpdatedExecutionInfoIfNecessary();
    public Byte[] RenderStream(string format, string streamId, string deviceInfo, String& mimeType, String& encoding);
    internal virtual Byte[] InternalRenderStream(string format, string streamId, string deviceInfo, String& mimeType, String& encoding);
    public virtual void LoadReportDefinition(TextReader report);
    internal virtual int PerformSearch(string searchText, int startPage, int endPage);
    internal virtual void PerformToggle(string toggleId);
    internal virtual int PerformBookmarkNavigation(string bookmarkId, String& uniqueName);
    internal virtual int PerformDocumentMapNavigation(string documentMapId);
    internal virtual Report PerformDrillthrough(string drillthroughId, String& reportPath);
    internal virtual int PerformSort(string sortId, SortOrder sortDirection, bool clearSort, PageCountMode pageCountMode, String& uniqueName);
    internal void TouchSession();
    public virtual int GetTotalPages(PageCountMode& pageCountMode);
    private PageCountMode get_PageCountMode();
    internal virtual bool get_HasDocMap();
    internal virtual DocumentMapNode GetDocumentMap(string rootLabel);
    internal virtual int get_AutoRefreshInterval();
    public virtual RenderingExtension[] ListRenderingExtensions();
    public virtual void Refresh();
    internal virtual bool get_IsReadyForConnection();
    internal virtual bool get_IsPreparedReportReadyForRendering();
    private bool get_IsReadyForProcessingPostTasks();
    public ReportDataSourceInfoCollection GetDataSources();
    public ReportDataSourceInfoCollection GetDataSources(Boolean& allCredentialsSet);
    public string GetServerVersion();
    internal static bool get_RequiresConnection();
    internal string get_ReportUrlNoScript();
    internal bool IsPrintCabSupported(ClientArchitecture arch);
    internal string GetPrintControlClsid(ClientArchitecture arch);
    internal void WritePrintCab(ClientArchitecture arch, Stream stream);
    internal string CreateStyleSheetUrl(string styleSheetName);
    internal string CreateStyleSheetImageUrl(string styleSheetImageName);
    internal Byte[] GetStyleSheet(string styleSheetName, bool isImage, String& mimeType);
    [DebuggerStepThroughAttribute]
internal static string get_ClientPrintCabX86Name();
    private IReportExecutionService get_Service();
    private void ApplyExecutionIdToService(IReportExecutionService service);
    internal virtual void EnsureExecutionSession();
    private void ClearSession();
    private void ClearSession(bool doRefresh);
    private void ClearServerSpecificInfo();
    private int GetIndexForParameter(string parameterName);
}
public class Microsoft.Reporting.WebForms.SessionDisabledException : ConfigurationErrorsException {
    private SessionDisabledException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Reporting.WebForms.SessionKeepAliveOperation : ViewerDataOperation {
    public static ScriptComponentDescriptor CreateRequest(ReportViewer viewer);
    public static ScriptComponentDescriptor CreateRequest(string viewerInstanceIdentifier, int sessionExpirationSeconds, String[] serverExecutionIds);
    private static ScriptComponentDescriptor CreateRequest(string viewerInstanceIdentifier, bool isLocalMode, int sessionExpirationSeconds, bool isUsingSession, String[] serverExecutionIds);
    public virtual void PerformOperation(NameValueCollection urlQuery, HttpResponse response);
    private bool TryTouchServerSession(ServerReport serverReport);
    private static IEnumerable`1<ServerReport> GetReportsWithSessions(ReportHierarchy reportHierarchy);
}
public enum Microsoft.Reporting.WebForms.Severity : Enum {
    public int value__;
    public static Severity Warning;
    public static Severity Error;
}
internal class Microsoft.Reporting.WebForms.SimpleDate : ValueType {
    private int m_Year;
    private int m_Month;
    private int m_Day;
    private int m_Era;
    private int m_hashValue;
    public int Year { get; public set; }
    public int Month { get; public set; }
    public int Day { get; public set; }
    public int Era { get; public set; }
    public SimpleDate(int year, int month, int day, int era);
    public SimpleDate(int year, int month, int day);
    public int get_Year();
    public void set_Year(int value);
    public int get_Month();
    public void set_Month(int value);
    public int get_Day();
    public void set_Day(int value);
    public int get_Era();
    public void set_Era(int value);
    public static bool op_GreaterThan(SimpleDate di0, SimpleDate di);
    public static bool op_LessThan(SimpleDate di0, SimpleDate di);
    public static bool op_GreaterThanOrEqual(SimpleDate di0, SimpleDate di);
    public static bool op_LessThanOrEqual(SimpleDate di0, SimpleDate di);
    public static bool op_Equality(SimpleDate di0, SimpleDate di);
    public static bool op_Inequality(SimpleDate di0, SimpleDate di);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
internal class Microsoft.Reporting.WebForms.SoapReportExecutionService : object {
    private static EndpointVersion EndpointVersion;
    private static int BufferedReadSize;
    private WindowsIdentity m_impersonationUser;
    private Uri m_reportServerUrl;
    private IReportServerCredentials m_reportServerCredentials;
    private TrustedUserHeader m_trustedUserHeader;
    private IEnumerable`1<string> m_headers;
    private IEnumerable`1<Cookie> m_cookies;
    private int m_timeout;
    private ServerReportSoapProxy m_service;
    private ICredentials ServerNetworkCredentials { get; }
    private ICredentials DefaultCredentials { get; }
    private ServerReportSoapProxy Service { get; }
    unknown int Timeout {public set; }
    private int ServerMajorVersion { get; }
    public SoapReportExecutionService(WindowsIdentity impersonationUser, Uri reportServerUrl, IReportServerCredentials reportServerCredentials, TrustedUserHeader trustedUserHeader, IEnumerable`1<string> headers, IEnumerable`1<Cookie> cookies, int timeout);
    private ICredentials get_ServerNetworkCredentials();
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
private ICredentials get_DefaultCredentials();
    private ServerReportSoapProxy get_Service();
    public sealed virtual ExecutionInfo GetExecutionInfo();
    public sealed virtual ExecutionInfo ResetExecution();
    public sealed virtual ExecutionInfo LoadReport(string report, string historyId);
    public sealed virtual ExecutionInfo LoadReportDefinition(Byte[] definition);
    public sealed virtual DocumentMapNode GetDocumentMap(string rootLabel);
    public sealed virtual RenderingExtension[] ListRenderingExtensions();
    public sealed virtual ExecutionInfo SetExecutionCredentials(IEnumerable`1<DataSourceCredentials> credentials);
    public sealed virtual ExecutionInfo SetExecutionParameters(IEnumerable`1<ReportParameter> parameters, string parameterLanguage);
    public sealed virtual Byte[] Render(string format, string deviceInfo, PageCountMode paginationMode, String& extension, String& mimeType, String& encoding, Warning[]& warnings, String[]& streamIds);
    public sealed virtual void Render(AbortState abortState, string reportPath, string executionId, string historyId, string format, XmlNodeList deviceInfo, NameValueCollection urlAccessParameters, Stream reportStream, String& mimeType, String& fileNameExtension);
    public sealed virtual Byte[] RenderStream(string format, string streamId, string deviceInfo, String& encoding, String& mimeType);
    public sealed virtual bool IsPrintCabSupported(ClientArchitecture arch);
    public sealed virtual void WritePrintCab(ClientArchitecture arch, Stream stream);
    public sealed virtual string GetPrintControlClsid(ClientArchitecture arch);
    public sealed virtual int FindString(int startPage, int endPage, string findValue);
    public sealed virtual void ToggleItem(string toggleId);
    public sealed virtual int NavigateBookmark(string bookmarkId, String& uniqueName);
    public sealed virtual int NavigateDocumentMap(string documentMapId);
    public sealed virtual ExecutionInfo LoadDrillthroughTarget(string drillthroughId);
    public sealed virtual int Sort(string sortItem, SortOrder direction, bool clear, PageCountMode paginationMode, String& reportItem, ExecutionInfo& executionInfo, Int32& numPages);
    public sealed virtual Byte[] GetStyleSheet(string styleSheetName, bool isImage, String& mimeType);
    public sealed virtual void SetExecutionId(string executionId);
    public sealed virtual string GetServerVersion();
    public sealed virtual void set_Timeout(int value);
    private int get_ServerMajorVersion();
    private static ExecutionInfo FromSoapExecutionInfo(ExecutionInfo soapExecutionInfo);
    private static ReportParameterInfo SoapParameterToReportParameterInfo(ReportParameter soapParam);
    private static PageCountMode SoapPageCountFromViewerAPI(PageCountMode pageCountMode);
    private void ServerUrlRequest(AbortState abortState, string url, Stream outputStream, String& mimeType, String& fileNameExtension);
}
public class Microsoft.Reporting.WebForms.SoapVersionMismatchException : ReportServerException {
    internal SoapVersionMismatchException(string message, Exception innerException);
    private SoapVersionMismatchException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Reporting.WebForms.SolarCalendarImpl : object {
    protected static short _MonthsInYear;
    protected static int _DaysIn400Years;
    private static SolarCalendarImpl();
    internal static bool IsYearLeap(int year);
    internal static int MonthsInYear();
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WebForms.SortEventArgs : CancelEventArgs {
    private string m_sortId;
    private SortOrder m_sortDirection;
    private bool m_clearSort;
    public string SortId { get; }
    public SortOrder SortDirection { get; }
    public bool ClearSort { get; }
    public SortEventArgs(string sortId, SortOrder sortDirection, bool clearSort);
    public string get_SortId();
    public SortOrder get_SortDirection();
    public bool get_ClearSort();
}
public class Microsoft.Reporting.WebForms.SortEventHandler : MulticastDelegate {
    public SortEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SortEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SortEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Microsoft.Reporting.WebForms.SortOrder : Enum {
    public int value__;
    public static SortOrder Ascending;
    public static SortOrder Descending;
}
internal class Microsoft.Reporting.WebForms.SpaceAwareDropDownList : DropDownList {
    protected virtual void OnLoad(EventArgs e);
    protected virtual void RenderContents(HtmlTextWriter writer);
    public sealed virtual void RaisePostBackEvent(string eventArgument);
}
internal enum Microsoft.Reporting.WebForms.SPCalendarType : Enum {
    public int value__;
    public static SPCalendarType None;
    public static SPCalendarType Gregorian;
    public static SPCalendarType Japan;
    public static SPCalendarType Taiwan;
    public static SPCalendarType Korea;
    public static SPCalendarType Hijri;
    public static SPCalendarType Thai;
    public static SPCalendarType Hebrew;
    public static SPCalendarType GregorianMEFrench;
    public static SPCalendarType GregorianArabic;
    public static SPCalendarType GregorianXLITEnglish;
    public static SPCalendarType GregorianXLITFrench;
    public static SPCalendarType KoreaJapanLunar;
    public static SPCalendarType ChineseLunar;
    public static SPCalendarType SakaEra;
}
internal class Microsoft.Reporting.WebForms.SPCalendarUtil : object {
    internal static bool IsYearInRange(int year, int yearL, int yearH);
    internal static bool IsYearMonthInRange(int year, int month, int yearL, int monthL, int yearH, int monthH);
    internal static bool IsDateInRange(int year, int month, int day, int yearL, int monthL, int dayL, int yearH, int monthH, int dayH);
}
[DefaultPropertyAttribute("SelectedDate")]
internal class Microsoft.Reporting.WebForms.SPDatePickerControl : Control {
    protected DateOptions _dateOptions;
    internal DatePicker _datePicker;
    private int _lcid;
    private TimeSpan _timezone;
    private SPCalendarType _calendar;
    private string _ww;
    private int _fdow;
    private int _hj;
    public string _urlCssClass;
    private short _firstWeekOfYear;
    private int _tdym;
    private string _imageDirName;
    private int _langid;
    public string StartMonth { get; public set; }
    [DescriptionAttribute(" Use short format of DateTime")]
[CategoryAttribute("Data")]
[DefaultValueAttribute("")]
[BindableAttribute("True")]
public string SelectedDate { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("1033")]
[CategoryAttribute("Data")]
public int LocaleId { get; public set; }
    public int LangId { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Difference between UTC and local time")]
public TimeSpan TimeZone { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Data")]
[DefaultValueAttribute("1")]
public SPCalendarType Calendar { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("0111110")]
[BindableAttribute("True")]
public string WorkWeek { get; public set; }
    [DescriptionAttribute("Valid values: from 0 to 6.")]
[DefaultValueAttribute("0")]
[CategoryAttribute("Data")]
[BindableAttribute("True")]
public int FirstDayOfWeek { get; public set; }
    [BindableAttribute("True")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Valid values: from -3 to 3.")]
[DefaultValueAttribute("0")]
public int HijriAdjustment { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("0")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Valid values: from 0 to 2.")]
public short FirstWeekOfYear { get; public set; }
    [CategoryAttribute("Visibility")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
public bool ShowNotThisMonthDays { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("True")]
[CategoryAttribute("Visibility")]
public bool ShowFooter { get; public set; }
    [DefaultValueAttribute("False")]
[BindableAttribute("True")]
[CategoryAttribute("Visibility")]
public bool ShowWeekNumber { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("True")]
[CategoryAttribute("Visibility")]
public bool ShowNextPrevNavigation { get; public set; }
    [DefaultValueAttribute("-1")]
[BindableAttribute("True")]
[CategoryAttribute("Picker")]
[DescriptionAttribute("Value betweeen -12 and 0")]
public int StartOffset { get; public set; }
    [CategoryAttribute("Picker")]
[BindableAttribute("True")]
[DefaultValueAttribute("3")]
[DescriptionAttribute("Value betweeen 0 and 12")]
public int EndOffset { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("-1")]
[CategoryAttribute("Picker")]
[DescriptionAttribute("")]
public int TwoDigitYearMax { get; public set; }
    [DescriptionAttribute("Full or web relative path to images location. ")]
[DefaultValueAttribute("0")]
[BindableAttribute("True")]
[CategoryAttribute("Picker")]
unknown string ImageUrl {public set; }
    [BindableAttribute("True")]
[DescriptionAttribute("Name of javascipt function used as onClick event handler. ")]
[CategoryAttribute("Picker")]
[DefaultValueAttribute("")]
public string OnClickScriptHandler { get; public set; }
    public int MinJDay { get; public set; }
    public int MaxJDay { get; public set; }
    internal string RemoveLoadingScript { get; }
    public string get_StartMonth();
    public void set_StartMonth(string value);
    public string get_SelectedDate();
    public void set_SelectedDate(string value);
    public int get_LocaleId();
    public void set_LocaleId(int value);
    public int get_LangId();
    public void set_LangId(int value);
    public TimeSpan get_TimeZone();
    public void set_TimeZone(TimeSpan value);
    public SPCalendarType get_Calendar();
    public void set_Calendar(SPCalendarType value);
    public string get_WorkWeek();
    public void set_WorkWeek(string value);
    public int get_FirstDayOfWeek();
    public void set_FirstDayOfWeek(int value);
    public int get_HijriAdjustment();
    public void set_HijriAdjustment(int value);
    public short get_FirstWeekOfYear();
    public void set_FirstWeekOfYear(short value);
    public bool get_ShowNotThisMonthDays();
    public void set_ShowNotThisMonthDays(bool value);
    public bool get_ShowFooter();
    public void set_ShowFooter(bool value);
    public bool get_ShowWeekNumber();
    public void set_ShowWeekNumber(bool value);
    public bool get_ShowNextPrevNavigation();
    public void set_ShowNextPrevNavigation(bool value);
    public int get_StartOffset();
    public void set_StartOffset(int value);
    public int get_EndOffset();
    public void set_EndOffset(int value);
    public int get_TwoDigitYearMax();
    public void set_TwoDigitYearMax(int value);
    public void set_ImageUrl(string value);
    public string get_OnClickScriptHandler();
    public void set_OnClickScriptHandler(string value);
    public int get_MinJDay();
    public void set_MinJDay(int value);
    public int get_MaxJDay();
    public void set_MaxJDay(int value);
    protected virtual void InitDatePicker();
    protected virtual void Render(HtmlTextWriter output);
    internal string get_RemoveLoadingScript();
}
internal class Microsoft.Reporting.WebForms.SPGregorianCalendar : object {
    public virtual bool IsSupportedYear(int year);
    public virtual bool IsSupportedMonth(int year, int month);
    public virtual bool IsSupportedDate(SimpleDate& di);
    public virtual bool IsDateValid(SimpleDate& di, int iAdvance, int jDayCurrent);
    public virtual bool IsSupportedJulianDay(int JDay);
    public virtual int DateToJulianDay(SimpleDate& di, int iAdvance, int jDayCurrent);
    public virtual void JulianDayToDate(int jDay, SimpleDate& di, int iAdvance, int jDayCurrent);
    public virtual bool IsYearLeap(int year);
    public virtual bool IsYearLeap(int year, int era);
    public virtual int MonthsInYear(SimpleDate& di);
    public virtual int DaysInMonth(SimpleDate& di);
    public virtual int DaysInMonth(SimpleDate& di, int iAdvance);
    public virtual int GetEraOffset(int era);
    public virtual int GetEraJulianDay(int era);
}
internal static class Microsoft.Reporting.WebForms.SPHttpUtility : object {
    private static int bufferSize;
    private static UInt16[] HTMLCharMap1;
    internal static String[] HTMLData;
    private static UInt16[] ScriptCharMap;
    private static String[] ScriptEncodedChars;
    private static String[] m_crgstrUrlHexValue;
    private static SPHttpUtility();
    public static string HtmlEncode(string valueToEncode);
    public static void HtmlEncode(string valueToEncode, TextWriter output);
    public static string HtmlUrlAttributeEncode(string urlAttributeToEncode);
    public static string UrlPathEncode(string urlToEncode, bool allowHashParameter);
    public static string UrlPathEncode(string urlToEncode, bool allowHashParameter, bool encodeUnicodeCharacters);
    internal static string UrlPathEncode(string urlToEncode, bool allowHashParameter, bool encodeUnicodeCharacters, Boolean& invalidUnicode);
    public static void UrlPathEncode(string urlToEncode, bool allowHashParameter, bool encodeUnicodeCharacters, TextWriter output);
    private static void UrlPathEncode(string urlToEncode, bool allowHashParameter, bool encodeUnicodeCharacters, TextWriter output, Boolean& invalidUnicode);
    public static string EcmaScriptStringLiteralEncode(string scriptLiteralToEncode);
    public static void EcmaScriptStringLiteralEncode(string scriptLiteralToEncode, TextWriter output);
    private static void UrlEncodeUnicodeChar(TextWriter output, char ch, char chNext, Boolean& fInvalidUnicode, Boolean& fUsedNextChar);
}
internal class Microsoft.Reporting.WebForms.SPIntlCal : object {
    public static int DaysInWeek;
    public static int MaxJDay;
    private static SPGregorianCalendar _GregorianCalendar;
    internal static SPGregorianCalendar GregorianCalendar { get; }
    private static SPIntlCal();
    internal static SPGregorianCalendar get_GregorianCalendar();
    public static bool IsCalendarSupported(SPCalendarType calType);
    public static ISPCalendar GetLocalCalendar(SPCalendarType calType);
    public static bool IsSupportedLocalYear(SPCalendarType calType, int year);
    public static bool IsSupportedLocalMonth(SPCalendarType calType, int year, int month);
    public static bool IsSupportedLocalDate(SPCalendarType calType, SimpleDate& di);
    public static bool IsLocalDateValid(SPCalendarType calType, SimpleDate& di);
    public static bool IsLocalDateValid(SPCalendarType calType, SimpleDate& di, int iAdvance);
    public static bool IsLocalDateValid(SPCalendarType calType, SimpleDate& di, int iAdvance, int jDayCurrent);
    public static bool IsSupportedLocalJulianDay(SPCalendarType calType, int jDay);
    public static int LocalToJulianDay(SPCalendarType calType, SimpleDate& di);
    public static int LocalToJulianDay(SPCalendarType calType, SimpleDate& di, int iAdvance);
    public static int LocalToJulianDay(SPCalendarType calType, SimpleDate& di, int iAdvance, int jDayCurrent);
    public static int LocalToJulianDay(SPCalendarType calType, IntlDate id);
    public static void JulianDayToLocal(SPCalendarType calType, int jDay, SimpleDate& di);
    public static void JulianDayToLocal(SPCalendarType calType, int jDay, SimpleDate& di, int iAdvance);
    public static void JulianDayToLocal(SPCalendarType calType, int jDay, SimpleDate& di, int iAdvance, int jDayCurrent);
    public static void JulianDayToLocal(SPCalendarType calType, int jDay, IntlDate id);
    public static int EraOffset(SPCalendarType calType, int era);
    public static int GetEraJulianDay(SPCalendarType calType, int era);
    public static bool IsLocalYearLeap(SPCalendarType calType, int year);
    public static int MonthsInLocalYear(SPCalendarType calType, SimpleDate& di);
    public static int DaysInLocalMonth(SPCalendarType calType, SimpleDate& di);
    public static int DaysInLocalMonth(SPCalendarType calType, SimpleDate& di, int iAdvance);
    public static int GetWeekNumber(SPCalendarType calType, SimpleDate di, int FirstDayOfWeek, short FirstWeekOfYear);
}
internal enum Microsoft.Reporting.WebForms.SPLangId : Enum {
    public int value__;
    public static SPLangId None;
    public static SPLangId Taiwan;
    public static SPLangId Japan;
    public static SPLangId Korea;
    public static SPLangId PeoplesRepublicofChina;
    public static SPLangId HongKongSAR;
    public static SPLangId MacaoSAR;
}
internal static class Microsoft.Reporting.WebForms.SPStringUtility : object {
    public static string RemoveNonAlphaNumericChars(string value);
}
internal static class Microsoft.Reporting.WebForms.SPUrlUtility : object {
    private static String[] m_rgstrAllowedProtocols;
    public static String[] AllowedProtocols { get; }
    private static SPUrlUtility();
    public static bool IsProtocolAllowed(string fullOrRelativeUrl);
    public static String[] get_AllowedProtocols();
    public static bool IsProtocolAllowed(string fullOrRelativeUrl, bool allowRelativeUrl);
}
internal static class Microsoft.Reporting.WebForms.SPUtility : object {
    public static bool IsValidStringInput(string regexp, string newValue);
}
[CompilerGeneratedAttribute]
internal class Microsoft.Reporting.WebForms.Strings : object {
    public static CultureInfo Culture { get; public set; }
    public static string Of { get; }
    public static string FindFirst { get; }
    public static string FindNext { get; }
    public static string PageWidth { get; }
    public static string WholePage { get; }
    public static string SelectFormat { get; }
    public static string ExportButton { get; }
    public static string ViewReport { get; }
    public static string ChangeCredentials { get; }
    public static string UserName { get; }
    public static string Password { get; }
    public static string DocumentMap { get; }
    public static string Report { get; }
    public static string ChangeCredentialsTooltip { get; }
    public static string ShowHideDocMapTooltip { get; }
    public static string FirstPageTooltip { get; }
    public static string PreviousPageTooltip { get; }
    public static string CurrentPageTooltip { get; }
    public static string NextPageTooltip { get; }
    public static string LastPageTooltip { get; }
    public static string ZoomTooltip { get; }
    public static string SearchTextBoxToolTip { get; }
    public static string FindTooltip { get; }
    public static string FindNextTooltip { get; }
    public static string ExportFormatsTooltip { get; }
    public static string ExportButtonTooltip { get; }
    public static string RefreshTooltip { get; }
    public static string PrintTooltip { get; }
    public static string AtomDataFeedTooltip { get; }
    public static string BackTooltip { get; }
    public static string HelpTooltip { get; }
    public static string ShowHideParametersTooltip { get; }
    public static string CantLoadPrintControl { get; }
    public static string NoScript { get; }
    public static string NoScriptPrefix { get; }
    public static string Here { get; }
    public static string Loading { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_Of();
    public static string get_FindFirst();
    public static string get_FindNext();
    public static string get_PageWidth();
    public static string get_WholePage();
    public static string get_SelectFormat();
    public static string get_ExportButton();
    public static string get_ViewReport();
    public static string get_ChangeCredentials();
    public static string get_UserName();
    public static string get_Password();
    public static string get_DocumentMap();
    public static string get_Report();
    public static string get_ChangeCredentialsTooltip();
    public static string get_ShowHideDocMapTooltip();
    public static string get_FirstPageTooltip();
    public static string get_PreviousPageTooltip();
    public static string get_CurrentPageTooltip();
    public static string get_NextPageTooltip();
    public static string get_LastPageTooltip();
    public static string get_ZoomTooltip();
    public static string get_SearchTextBoxToolTip();
    public static string get_FindTooltip();
    public static string get_FindNextTooltip();
    public static string get_ExportFormatsTooltip();
    public static string get_ExportButtonTooltip();
    public static string get_RefreshTooltip();
    public static string get_PrintTooltip();
    public static string get_AtomDataFeedTooltip();
    public static string get_BackTooltip();
    public static string get_HelpTooltip();
    public static string get_ShowHideParametersTooltip();
    public static string get_CantLoadPrintControl();
    public static string get_NoScript();
    public static string get_NoScriptPrefix();
    public static string get_Here();
    public static string get_Loading();
    public static string DocMapCollapseTooltip(string docMapLabel);
    public static string DocMapExpandTooltip(string docMapLabel);
    public static string DocMapActionTooltip(string docMapLabel);
    public static string PlaceHolderFrameAccessibleName(string parameterPrompt);
    public static string CalendarFrameAccessibleName(string parameterPrompt);
}
public class Microsoft.Reporting.WebForms.SubreportProcessingEventArgs : EventArgs {
    private string m_subReportName;
    private ReportParameterInfoCollection m_paramMetaData;
    private IList`1<string> m_dsNames;
    private ReportParameter[] m_userParams;
    private ReportDataSourceCollection m_dataSources;
    public string ReportPath { get; }
    public ReportParameterInfoCollection Parameters { get; }
    public IList`1<string> DataSourceNames { get; }
    public ReportDataSourceCollection DataSources { get; }
    internal SubreportProcessingEventArgs(string subreportName, ReportParameterInfoCollection paramMetaData, String[] dataSetNames);
    public string get_ReportPath();
    public ReportParameterInfoCollection get_Parameters();
    public IList`1<string> get_DataSourceNames();
    public ReportDataSourceCollection get_DataSources();
}
public class Microsoft.Reporting.WebForms.SubreportProcessingEventHandler : MulticastDelegate {
    public SubreportProcessingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SubreportProcessingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SubreportProcessingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Reporting.WebForms.SyncList`1 : Collection`1<TListType> {
    private object m_syncObject;
    internal SyncList`1(object syncObject);
    internal void SetSyncObject(object syncObject);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, TListType item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, TListType item);
}
internal class Microsoft.Reporting.WebForms.TextBoxWithClientID : TextBox {
    protected virtual void OnLoad(EventArgs e);
}
internal class Microsoft.Reporting.WebForms.TextButton : ScriptControl {
    private EventHandler Click;
    public bool ShowDisabled;
    private string m_clientSideClickScript;
    private string m_tooltip;
    private string m_text;
    private IReportViewerStyles m_viewerStyle;
    public string ClientSideClickScript { get; public set; }
    public string ClientSideObjectName { get; }
    public TextButton(string text, string tooltip, IReportViewerStyles viewerStyle);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public sealed virtual void RaisePostBackEvent(string eventArgument);
    public string get_ClientSideClickScript();
    public void set_ClientSideClickScript(string value);
    public string get_ClientSideObjectName();
    public string SetEnabledStateScript(string boolShouldEnableScript);
    public string SetEnabledStateScript(bool shouldEnable);
    protected virtual void Render(HtmlTextWriter writer);
    private void AddAttributesForInitialState(HtmlTextWriter writer);
    protected virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    protected virtual IEnumerable`1<ScriptReference> GetScriptReferences();
}
internal class Microsoft.Reporting.WebForms.TextParameterInputControl : BaseParameterInputControl {
    protected PostBackTextBox m_textBox;
    protected String[] CustomControlValue { get; protected set; }
    protected bool CustomControlHasValue { get; }
    unknown bool AutoPostBack {public set; }
    protected String[] CustomControlIds { get; }
    public string PrimaryFormElementId { get; }
    public TextParameterInputControl(ReportParameterInfo reportParam, IBrowserDetection browserDetection);
    protected virtual void CreateChildControls();
    protected virtual BaseValidator CreateParameterRequiresValueValidator();
    protected virtual void RenderContents(HtmlTextWriter writer);
    protected virtual String[] get_CustomControlValue();
    protected virtual void set_CustomControlValue(String[] value);
    protected virtual bool get_CustomControlHasValue();
    protected virtual void OnPreRender(EventArgs e);
    public virtual void set_AutoPostBack(bool value);
    protected virtual String[] get_CustomControlIds();
    public virtual string get_PrimaryFormElementId();
    protected virtual void SetCustomControlEnableState(bool enabled);
    public virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
}
internal class Microsoft.Reporting.WebForms.ToolbarControl : CompositeControl {
    private EventHandler`1<ReportActionEventArgs> ReportAction;
    private PageNavigationGroup m_pageNavGroup;
    private BackGroup m_backGroup;
    private ZoomGroup m_zoomGroup;
    private FindGroup m_findGroup;
    private ExportGroup m_exportGroup;
    private RefreshGroup m_refreshGroup;
    private PrintGroup m_printGroup;
    private AtomDataFeedGroup m_atomDataFeedGroup;
    private List`1<ToolbarGroup> m_groups;
    private bool m_hasRenderedGroup;
    private bool m_lastGroupVisible;
    private ReportViewer m_viewer;
    protected HtmlTextWriterTag TagKey { get; }
    public ToolbarControl(ReportViewer viewer);
    protected virtual HtmlTextWriterTag get_TagKey();
    public void add_ReportAction(EventHandler`1<ReportActionEventArgs> value);
    public void remove_ReportAction(EventHandler`1<ReportActionEventArgs> value);
    protected virtual void CreateChildControls();
    private void OnReportAction(object sender, ReportActionEventArgs e);
    private void AddGroup(ToolbarGroup group);
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    private void RenderMainButtonDiv(HtmlTextWriter writer);
    private void RenderSpacedGroup(ToolbarGroup group, HtmlTextWriter writer, bool visibleOnLoad);
    public static string GenerateUpdateProperties(ReportControlSession session, int pageNumber, SearchState searchState);
    public sealed virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    public sealed virtual IEnumerable`1<ScriptReference> GetScriptReferences();
}
internal abstract class Microsoft.Reporting.WebForms.ToolbarGroup : CompositeControl {
    internal static string NormalLeadingSpace;
    internal static string ReducedLeadingSpace;
    private EventHandler`1<ReportActionEventArgs> ReportAction;
    public Unit ContainedControlHeight;
    protected ReportViewer m_viewer;
    public string GroupCssClassName { get; }
    public string LeadingSpace { get; }
    internal ToolbarGroup(ReportViewer viewer);
    private static ToolbarGroup();
    public void add_ReportAction(EventHandler`1<ReportActionEventArgs> value);
    public void remove_ReportAction(EventHandler`1<ReportActionEventArgs> value);
    protected void OnReportAction(ReportActionEventArgs args);
    public abstract virtual void AddScriptDescriptorProperties(ScriptControlDescriptor toolbarDesc);
    public abstract virtual string get_GroupCssClassName();
    protected virtual void Render(HtmlTextWriter writer);
    protected virtual void RenderChildren(HtmlTextWriter writer);
    protected void RenderItemSpacer(HtmlTextWriter writer);
    public virtual string get_LeadingSpace();
    protected RenderingExtension[] GetRenderingExtensions();
}
internal class Microsoft.Reporting.WebForms.ToolbarImageInfo : object {
    private string m_ltrImageName;
    private string m_rtlImageName;
    public bool IsBiDirectional { get; }
    public string LTRImageName { get; }
    public string RTLImageName { get; }
    public ToolbarImageInfo(string ltrImage);
    public ToolbarImageInfo(string ltrImageName, string rtlImageName);
    public bool get_IsBiDirectional();
    public string get_LTRImageName();
    public string get_RTLImageName();
}
[ComVisibleAttribute("False")]
internal class Microsoft.Reporting.WebForms.TypeNameHidingExpandableObjectConverter : ExpandableObjectConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[FlagsAttribute]
internal enum Microsoft.Reporting.WebForms.UpdateGroup : Enum {
    public int value__;
    public static UpdateGroup None;
    public static UpdateGroup Rerendering;
    public static UpdateGroup Reprocessing;
    public static UpdateGroup ExecutionSession;
    public static UpdateGroup Appearance;
    public static UpdateGroup ToolBarAppearance;
}
internal class Microsoft.Reporting.WebForms.ValidatorPanel : WebControl {
    public bool HasValidatorsToRender { get; }
    public String[] ChildControlIds { get; }
    public bool get_HasValidatorsToRender();
    public String[] get_ChildControlIds();
}
public class Microsoft.Reporting.WebForms.ValidValue : object {
    private string m_label;
    private string m_value;
    public string Label { get; }
    public string Value { get; }
    internal ValidValue(string label, string value);
    public string get_Label();
    public string get_Value();
}
internal class Microsoft.Reporting.WebForms.ValidValuesParameterInputControl : BaseParameterInputControl {
    public string SelectAValueString;
    protected SpaceAwareDropDownList m_dropDown;
    private string m_emptyDropDownCssClass;
    protected String[] CustomControlValue { get; protected set; }
    protected bool CustomControlHasValue { get; }
    protected String[] CustomControlIds { get; }
    public string PrimaryFormElementId { get; }
    unknown bool AutoPostBack {public set; }
    public string EmptyDropDownCssClass { get; public set; }
    public ValidValuesParameterInputControl(ReportParameterInfo reportParam, IBrowserDetection browserDetection);
    protected virtual void CreateChildControls();
    protected virtual BaseValidator CreateParameterRequiresValueValidator();
    protected virtual String[] get_CustomControlValue();
    protected virtual void set_CustomControlValue(String[] value);
    protected virtual void OnPreRender(EventArgs e);
    protected virtual bool get_CustomControlHasValue();
    protected virtual String[] get_CustomControlIds();
    public virtual string get_PrimaryFormElementId();
    public virtual void set_AutoPostBack(bool value);
    public string get_EmptyDropDownCssClass();
    public void set_EmptyDropDownCssClass(string value);
    protected virtual void RenderContents(HtmlTextWriter writer);
    protected virtual void SetCustomControlEnableState(bool enabled);
    public virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
}
internal abstract class Microsoft.Reporting.WebForms.ViewerDataOperation : HandlerOperation {
    private static string ParamIsLocalMode;
    private static string ParamControlID;
    private ReportHierarchy m_reportHierarchy;
    private string m_instanceID;
    private bool m_isUsingSession;
    private ProcessingMode m_processingMode;
    protected ProcessingMode ProcessingMode { get; }
    protected string InstanceID { get; }
    protected ReportHierarchy ReportHierarchy { get; }
    protected bool IsUsingSession { get; }
    protected ProcessingMode get_ProcessingMode();
    protected string get_InstanceID();
    protected ReportHierarchy get_ReportHierarchy();
    protected bool get_IsUsingSession();
    private ReportViewer CreateTempReportViewer();
    protected ServerReport CreateTempServerReport();
    protected static string ViewerDataOperationQuery(bool isLocalMode, string instanceID);
}
internal class Microsoft.Reporting.WebForms.ViewReportButton : Button {
    protected virtual void OnPreRender(EventArgs e);
}
public class Microsoft.Reporting.WebForms.ViewStateDisabledException : ReportViewerException {
    private ViewStateDisabledException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Reporting.WebForms.WaitControl : CompositeControl {
    private Image m_spinningWheel;
    private SafeLiteralControl m_waitText;
    private string m_message;
    private HyperLink m_cancelLink;
    private bool m_cancelLinkVisible;
    private IReportViewerStyles m_styles;
    private string m_cancelUrl;
    public bool CancelLinkVisible { get; public set; }
    public string CancelUrl { get; public set; }
    public WaitControl(IReportViewerStyles styles, string message);
    public bool get_CancelLinkVisible();
    public void set_CancelLinkVisible(bool value);
    public string get_CancelUrl();
    public void set_CancelUrl(string value);
    protected virtual void CreateChildControls();
    protected virtual void Render(HtmlTextWriter writer);
}
public class Microsoft.Reporting.WebForms.Warning : object {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private Severity <Severity>k__BackingField;
    public string Code { get; private set; }
    public string Message { get; private set; }
    public string ObjectName { get; private set; }
    public string ObjectType { get; private set; }
    public Severity Severity { get; private set; }
    internal Warning(string code, string message, string objectName, string objectType, string severity);
    internal static Warning[] FromSoapWarnings(Warning[] soapWarnings);
    internal static Warning[] FromProcessingMessageList(ProcessingMessageList processingWarnings);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_ObjectName();
    [CompilerGeneratedAttribute]
private void set_ObjectName(string value);
    [CompilerGeneratedAttribute]
public string get_ObjectType();
    [CompilerGeneratedAttribute]
private void set_ObjectType(string value);
    [CompilerGeneratedAttribute]
public Severity get_Severity();
    [CompilerGeneratedAttribute]
private void set_Severity(Severity value);
}
internal class Microsoft.Reporting.WebForms.WebConfigReader : object {
    private ConfigFilePropertyInterface`1<IReportServerConnection> m_serverConnection;
    private ConfigFilePropertyInterface`1<ITemporaryStorage> m_tempStorage;
    private ConfigFilePropertyInterface`1<IReportViewerMessages> m_viewerMessages;
    private static WebConfigReader m_theInstance;
    private static object m_lockObject;
    public static WebConfigReader Current { get; }
    public IReportServerConnection ServerConnection { get; }
    public ITemporaryStorage TempStorage { get; }
    public IReportViewerMessages ViewerMessages { get; }
    private static WebConfigReader();
    public static WebConfigReader get_Current();
    public IReportServerConnection get_ServerConnection();
    public ITemporaryStorage get_TempStorage();
    public IReportViewerMessages get_ViewerMessages();
}
internal static class Microsoft.Reporting.WebForms.WebRequestHelper : object {
    private static string InfoQuery;
    private static string SPUserTokenParam;
    private static string SPUserNameParam;
    public static HttpWebRequest GetServerUrlAccessObject(string url, int timeout, ICredentials credentials, Cookie formsAuthCookie, IEnumerable`1<string> headers, IEnumerable`1<Cookie> cookies, string userName, Byte[] userToken);
    public static void SetRequestHeaders(HttpWebRequest request, Cookie formsAuthCookie, IEnumerable`1<string> headers, IEnumerable`1<Cookie> cookies);
    public static ReportServerException ExceptionFromWebResponse(Exception e);
    private static Exception ExceptionFromWebResponseUnwrapped(Exception e);
}
internal class Microsoft.Reporting.WebForms.ZoomChangedEventHandler : MulticastDelegate {
    public ZoomChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ZoomChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ZoomChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
internal class Microsoft.Reporting.WebForms.ZoomChangeEventArgs : CancelEventArgs {
    private int m_zoomPercent;
    private ZoomMode m_zoomMode;
    public int ZoomPercent { get; }
    public ZoomMode ZoomMode { get; }
    public ZoomChangeEventArgs(ZoomMode zoomMode, int zoomPercent);
    public int get_ZoomPercent();
    public ZoomMode get_ZoomMode();
}
internal class Microsoft.Reporting.WebForms.ZoomGroup : ToolbarGroup {
    private DropDownList m_dropDown;
    public string GroupCssClassName { get; }
    public ZoomGroup(ReportViewer viewer);
    public virtual string get_GroupCssClassName();
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    public virtual void AddScriptDescriptorProperties(ScriptControlDescriptor toolbarDesc);
}
public enum Microsoft.Reporting.WebForms.ZoomMode : Enum {
    public int value__;
    public static ZoomMode FullPage;
    public static ZoomMode PageWidth;
    public static ZoomMode Percent;
}
internal enum Microsoft.ReportingServices.Common.ContentDisposition : Enum {
    public int value__;
    public static ContentDisposition Inline;
    public static ContentDisposition Attachment;
}
internal abstract class Microsoft.ReportingServices.Common.ErrorResponseWriter : object {
    private HttpResponse m_response;
    private Exception m_exception;
    private bool m_headersSet;
    private int m_httpStatusCode;
    private string m_httpStatusDescription;
    private string m_reportServerErrorCode;
    private bool m_errorResponseAsXml;
    private string m_generator;
    private int m_productLocaleId;
    private int m_countryLocaleId;
    protected Exception ExceptionToDisplay { get; }
    protected string ProductName { get; }
    protected string ErrorPageTitle { get; }
    public ErrorResponseWriter(HttpResponse response, Exception exception, bool headersSet, int httpStatusCode, string httpStatusDescription, string reportServerErrorCode, string generator, int productLocaleId, int countryLocaleId, bool errorResponseAsXml);
    protected Exception get_ExceptionToDisplay();
    public void WriteError();
    private void WriteExceptionAsHtml();
    protected abstract virtual string get_ProductName();
    protected abstract virtual string get_ErrorPageTitle();
    protected abstract virtual int WriteHtmlErrorMessage(HtmlTextWriter writer);
    private static void WriteHorizontalLine(HtmlTextWriter hw);
    private static void WriteMetaTag(HtmlTextWriter hw, string name, string content);
    public static bool ShouldWriteErrorAsXml(string commandValue, string writeErrorAsXmlValue);
}
internal static class Microsoft.ReportingServices.Common.HttpResponseUtils : object {
    public static void ApplyRSStreamOperationHeaders(HttpResponse response, string mimeType, Encoding encoding, string name, string extension);
    internal static void ApplyContentEncodingHeaders(HttpResponse response, Encoding encoding);
    public static void ApplyCacheControlHeaders(HttpRequest request, HttpResponse response);
    public static void ApplyReportBuilderFileResponseHeaders(string fileName, HttpContext context);
    internal static void ApplySecurityHeaders(HttpResponse response);
    public static void AddContentDisposition(string fileName, HttpResponse response, ContentDisposition contentDisposition);
    public static string EncodeFileNameForMimeHeader(string fileName);
    public static bool IsViewerRequested(NameValueCollection requestParameters);
    public static bool IsRequestedFormatHtml(NameValueCollection requestParameters);
}
internal class Microsoft.ReportingServices.Common.ReportServerHeaders : object {
    public static string HeadersSet;
    internal static string RSAuthenticationHeader;
    internal static string RSNotAuthenticated;
    internal static string RSExpired;
    internal static string RSDisabled;
    internal static string RSNotActivated;
}
internal static class Microsoft.ReportingServices.Common.UrlUtil : object {
    public static string UrlEncode(string input);
    public static string UrlDecode(string input);
}
internal interface Microsoft.ReportingServices.Diagnostics.ILocalClient {
    public bool IsClientLocal { get; }
    public abstract virtual bool get_IsClientLocal();
}
internal static class Microsoft.ReportingServices.Diagnostics.LocalClientConstants : object {
    private static string m_clientNotLocalHeaderName;
    public static string ClientNotLocalHeaderName { get; }
    private static LocalClientConstants();
    public static string get_ClientNotLocalHeaderName();
}
internal static class Microsoft.ReportingServices.Diagnostics.Utilities.BrowserDetectionUtility : object {
    private static Char[] userAgentDelimiter;
    public static string UserAgentKey { get; }
    public static string TypeKey { get; }
    public static string ActiveXControlsKey { get; }
    public static string EcmaScriptVersionKey { get; }
    public static string JavaScriptKey { get; }
    public static string TablesKey { get; }
    public static string MajorVersionKey { get; }
    public static string MinorVersionKey { get; }
    public static string Win32Key { get; }
    public static string IEUserAgentPrefix { get; }
    private static string GeckoUserAgent { get; }
    private static string SafariUserAgent { get; }
    private static BrowserDetectionUtility();
    public static string get_UserAgentKey();
    public static string get_TypeKey();
    public static string get_ActiveXControlsKey();
    public static string get_EcmaScriptVersionKey();
    public static string get_JavaScriptKey();
    public static string get_TablesKey();
    public static string get_MajorVersionKey();
    public static string get_MinorVersionKey();
    public static string get_Win32Key();
    public static string get_IEUserAgentPrefix();
    private static string get_GeckoUserAgent();
    private static string get_SafariUserAgent();
    public static NameValueCollection GetBrowserInfoFromRequest(HttpRequest request);
    internal static ClientArchitecture GetClientArchitecture();
    public static bool IsIE55OrHigher(HttpRequest request);
    public static bool IsIE55OrHigher(NameValueCollection browserCapabilities);
    public static bool IsIE55OrHigher(string type, int majorVersion, double minorVersion);
    public static bool IsSafari(HttpRequest request);
    public static bool IsSafari(string userAgent);
    public static bool IsGeckoBrowserEngine(string userAgent);
    internal static bool IsTransparentBorderSupported(HttpRequest request);
    private static bool SupportsJavaScript(HttpBrowserCapabilities browser);
}
internal enum Microsoft.ReportingServices.Diagnostics.Utilities.ClientArchitecture : Enum {
    public int value__;
    public static ClientArchitecture X86;
    public static ClientArchitecture X64;
    public static ClientArchitecture IA64;
}
internal static class Microsoft.ReportingServices.Diagnostics.WebRequestUtil : object {
    internal static string SharepointPreambleLengthHeaderName;
    internal static string SharepointExternalReportServerUrlHeaderName;
    internal static string SharepointClientHttpMethodHeaderName;
    private static string m_clientHostHeaderName;
    public static string ClientHostHeaderName { get; }
    internal static string SharepointExternalReportServerUrl { get; }
    private static WebRequestUtil();
    public static string get_ClientHostHeaderName();
    public static string GetHostFromRequest(HttpRequest request);
    public static bool IsClientLocal();
    public static bool IsClientLocal(HttpContext context);
    public static bool IsClientLocal(ILocalClient clientDetection);
    internal static string get_SharepointExternalReportServerUrl();
}
internal class Microsoft.ReportingServices.Interfaces.CreateAndRegisterStream : MulticastDelegate {
    public CreateAndRegisterStream(object object, IntPtr method);
    public virtual Stream Invoke(string name, string extension, Encoding encoding, string mimeType, bool willSeek, StreamOper operation);
    public virtual IAsyncResult BeginInvoke(string name, string extension, Encoding encoding, string mimeType, bool willSeek, StreamOper operation, AsyncCallback callback, object object);
    public virtual Stream EndInvoke(IAsyncResult result);
}
internal enum Microsoft.ReportingServices.Interfaces.StreamOper : Enum {
    public int value__;
    public static StreamOper CreateAndRegister;
    public static StreamOper CreateOnly;
    public static StreamOper RegisterOnly;
    public static StreamOper CreateForPersistedStreams;
}
internal enum Microsoft.ReportingServices.Rendering.HtmlRenderer.ActionType : Enum {
    public int value__;
    public static ActionType HyperLink;
    public static ActionType DrillThrough;
    public static ActionType BookmarkLink;
}
internal enum Microsoft.ReportingServices.Rendering.HtmlRenderer.BrowserMode : Enum {
    public int value__;
    public static BrowserMode Unknown;
    public static BrowserMode Quirks;
    public static BrowserMode Standards;
}
internal enum Microsoft.ReportingServices.Rendering.HtmlRenderer.DataVisualizationFitSizing : Enum {
    public int value__;
    public static DataVisualizationFitSizing Exact;
    public static DataVisualizationFitSizing Approximate;
}
internal abstract class Microsoft.ReportingServices.Rendering.HtmlRenderer.DeviceInfo : object {
    internal string ActionScript;
    internal bool AllowScript;
    internal string BookmarkId;
    internal bool ExpandContent;
    internal bool HasActionScript;
    internal bool HTMLFragment;
    internal bool OnlyVisibleStyles;
    internal string FindString;
    internal string HtmlPrefixId;
    internal string JavascriptPrefixId;
    internal string LinkTarget;
    internal string ReplacementRoot;
    internal string ResourceStreamRoot;
    internal int Section;
    internal string StylePrefixId;
    internal bool StyleStream;
    internal bool OutlookCompat;
    internal int Zoom;
    internal bool AccessibleTablix;
    internal DataVisualizationFitSizing DataVisualizationFitSizing;
    internal bool IsBrowserIE;
    internal bool IsBrowserSafari;
    internal bool IsBrowserGeckoEngine;
    internal bool IsBrowserIE6Or7StandardsMode;
    internal bool IsBrowserIE6;
    internal bool IsBrowserIE7;
    internal BrowserMode BrowserMode;
    internal string BrowserMode_Quirks;
    internal string BrowserMode_Standards;
    internal string NavigationId;
    internal bool ImageConsolidation;
    private static Regex m_safeForJavascriptRegex;
    private NameValueCollection m_rawDeviceInfo;
    public NameValueCollection RawDeviceInfo { get; }
    private static DeviceInfo();
    public NameValueCollection get_RawDeviceInfo();
    public void ParseDeviceInfo(NameValueCollection deviceInfo, NameValueCollection browserCaps);
    public abstract virtual bool IsSupported(string value, bool isTrue, Boolean& isRelative);
    public virtual void VerifySafeForJavascript(string value);
    internal void VerifySafeForRoots(string value);
    private static bool ParseBool(string boolValue, bool defaultValue);
    private static int ParseInt(string intValue, int defaultValue);
}
internal enum Microsoft.ReportingServices.Rendering.HtmlRenderer.Direction : Enum {
    public int value__;
    public static Direction Row;
    public static Direction Column;
}
internal abstract class Microsoft.ReportingServices.Rendering.HtmlRenderer.ElementStyleWriter : object {
    protected HTML4Renderer m_renderer;
    internal ElementStyleWriter(HTML4Renderer renderer);
    internal abstract virtual bool NeedsToWriteNullStyle(StyleWriterMode mode);
    internal abstract virtual void WriteStyles(StyleWriterMode mode, IRPLStyle style);
    protected void WriteStream(string s);
    protected void WriteStream(Byte[] value);
    protected void WriteStyle(Byte[] text, object value);
    protected void WriteStyle(Byte[] text, object nonShared, object shared);
}
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.EnumStrings : object {
    public static string GetValue(FontStyles val);
    public static string GetValue(FontWeights val);
    public static string GetValue(TextDecorations val);
    public static string GetValue(TextAlignments val);
    public static string GetValue(VerticalAlignments val);
    public static string GetValue(Directions val);
    public static string GetValue(UnicodeBiDiTypes val);
    public static string GetValue(BorderStyles val);
    public static string GetValue(BackgroundRepeatTypes val);
}
internal abstract class Microsoft.ReportingServices.Rendering.HtmlRenderer.HTML4Renderer : object {
    private static float MaxWordSize;
    private static string FixedRowMarker;
    private static string FixedColMarker;
    private static string EmptyColMarker;
    private static string EmptyHeightColMarker;
    internal static string FixedRowGroupHeaderPrefix;
    internal static string FixedCornerHeaderPrefix;
    internal static string FixedColGroupHeaderPrefix;
    internal static string FixedRGHArrayPrefix;
    internal static string FixedCGHArrayPrefix;
    internal static string FixedCHArrayPrefix;
    internal static string ReportDiv;
    private static char Space;
    private static char Comma;
    private static string MSuffix;
    private static string SSuffix;
    private static string ASuffix;
    private static string PSuffix;
    private static string FitVertTextSuffix;
    private static string GrowRectanglesSuffix;
    private static string ImageConImageSuffix;
    private static string ImageFitDivSuffix;
    private static long FitProptionalDefaultSize;
    protected static int SecondaryStreamBufferSize;
    internal static string SortAction;
    internal static string ToggleAction;
    internal static string DrillthroughAction;
    internal static string BookmarkAction;
    internal static string GetImageKey;
    internal static string SectionKey;
    internal static string PrefixIdKey;
    internal static int IgnoreLeft;
    internal static int IgnoreRight;
    internal static int IgnoreTop;
    internal static int IgnoreBottom;
    internal static int IgnoreAll;
    internal static char StreamNameSeparator;
    internal static string PageStyleName;
    internal static string MHTMLPrefix;
    internal static string CSSSuffix;
    protected static string m_resourceNamespace;
    internal static Byte[] m_overflowXHidden;
    internal static Byte[] m_percentWidthOverflow;
    internal static Byte[] m_layoutFixed;
    internal static Byte[] m_layoutBorder;
    internal static Byte[] m_ignoreBorder;
    internal static Byte[] m_ignoreBorderL;
    internal static Byte[] m_ignoreBorderR;
    internal static Byte[] m_ignoreBorderT;
    internal static Byte[] m_ignoreBorderB;
    internal static Byte[] m_percentHeight;
    internal static Byte[] m_percentSizesOverflow;
    internal static Byte[] m_percentSizes;
    internal static Byte[] m_space;
    internal static Byte[] m_closeBracket;
    internal static Byte[] m_semiColon;
    internal static Byte[] m_border;
    internal static Byte[] m_borderBottom;
    internal static Byte[] m_borderLeft;
    internal static Byte[] m_borderRight;
    internal static Byte[] m_borderTop;
    internal static Byte[] m_marginBottom;
    internal static Byte[] m_marginLeft;
    internal static Byte[] m_marginRight;
    internal static Byte[] m_marginTop;
    internal static Byte[] m_textIndent;
    internal static Byte[] m_mm;
    internal static Byte[] m_styleWidth;
    internal static Byte[] m_styleHeight;
    internal static Byte[] m_percent;
    internal static Byte[] m_ninetyninepercent;
    internal static Byte[] m_degree90;
    internal static Byte[] m_newLine;
    internal static Byte[] m_closeAccol;
    internal static Byte[] m_backgroundRepeat;
    internal static Byte[] m_closeBrace;
    internal static Byte[] m_backgroundColor;
    internal static Byte[] m_backgroundImage;
    internal static Byte[] m_overflowHidden;
    internal static Byte[] m_wordWrap;
    internal static Byte[] m_whiteSpacePreWrap;
    internal static Byte[] m_leftValue;
    internal static Byte[] m_rightValue;
    internal static Byte[] m_centerValue;
    internal static Byte[] m_textAlign;
    internal static Byte[] m_verticalAlign;
    internal static Byte[] m_lineHeight;
    internal static Byte[] m_color;
    internal static Byte[] m_writingMode;
    internal static Byte[] m_tbrl;
    internal static Byte[] m_btrl;
    internal static Byte[] m_lrtb;
    internal static Byte[] m_rltb;
    internal static Byte[] m_layoutFlow;
    internal static Byte[] m_verticalIdeographic;
    internal static Byte[] m_horizontal;
    internal static Byte[] m_unicodeBiDi;
    internal static Byte[] m_direction;
    internal static Byte[] m_textDecoration;
    internal static Byte[] m_fontWeight;
    internal static Byte[] m_fontSize;
    internal static Byte[] m_fontFamily;
    internal static Byte[] m_fontStyle;
    internal static Byte[] m_openAccol;
    internal static Byte[] m_borderColor;
    internal static Byte[] m_borderStyle;
    internal static Byte[] m_borderWidth;
    internal static Byte[] m_borderBottomColor;
    internal static Byte[] m_borderBottomStyle;
    internal static Byte[] m_borderBottomWidth;
    internal static Byte[] m_borderLeftColor;
    internal static Byte[] m_borderLeftStyle;
    internal static Byte[] m_borderLeftWidth;
    internal static Byte[] m_borderRightColor;
    internal static Byte[] m_borderRightStyle;
    internal static Byte[] m_borderRightWidth;
    internal static Byte[] m_borderTopColor;
    internal static Byte[] m_borderTopStyle;
    internal static Byte[] m_borderTopWidth;
    internal static Byte[] m_paddingBottom;
    internal static Byte[] m_paddingLeft;
    internal static Byte[] m_paddingRight;
    internal static Byte[] m_paddingTop;
    protected static Byte[] m_classAction;
    internal static Byte[] m_styleAction;
    internal static Byte[] m_emptyTextBox;
    internal static Byte[] m_percentSizeInlineTable;
    internal static Byte[] m_classPercentSizeInlineTable;
    internal static Byte[] m_percentHeightInlineTable;
    internal static Byte[] m_classPercentHeightInlineTable;
    internal static Byte[] m_dot;
    internal static Byte[] m_popupAction;
    internal static Byte[] m_tableLayoutFixed;
    internal static Byte[] m_borderCollapse;
    internal static Byte[] m_none;
    internal static Byte[] m_displayNone;
    internal static Byte[] m_rtlEmbed;
    internal static Byte[] m_classRtlEmbed;
    internal static Byte[] m_noVerticalMarginClassName;
    internal static Byte[] m_classNoVerticalMargin;
    internal static Byte[] m_zeroPoint;
    internal static Byte[] m_smallPoint;
    internal static Byte[] m_filter;
    internal static Byte[] m_basicImageRotation180;
    internal static Byte[] m_msoRotation;
    internal static Byte[] m_styleMinWidth;
    internal static Byte[] m_styleMinHeight;
    private static Byte[] m_styleDisplayInlineBlock;
    internal static Byte[] m_closeUL;
    internal static Byte[] m_closeOL;
    internal static Byte[] m_olArabic;
    internal static Byte[] m_olRoman;
    internal static Byte[] m_olAlpha;
    internal static Byte[] m_ulCircle;
    internal static Byte[] m_ulDisc;
    internal static Byte[] m_ulSquare;
    protected static Byte[] m_br;
    protected static Byte[] m_tabIndex;
    protected static Byte[] m_closeTable;
    protected static Byte[] m_openTable;
    protected static Byte[] m_closeDiv;
    protected static Byte[] m_openDiv;
    protected static Byte[] m_zeroBorder;
    protected static Byte[] m_cols;
    protected static Byte[] m_colSpan;
    protected static Byte[] m_rowSpan;
    protected static Byte[] m_headers;
    protected static Byte[] m_closeTD;
    protected static Byte[] m_closeTR;
    protected static Byte[] m_firstTD;
    protected static Byte[] m_lastTD;
    protected static Byte[] m_openTD;
    protected static Byte[] m_openTR;
    protected static Byte[] m_valign;
    protected static Byte[] m_closeQuote;
    internal static string m_closeQuoteString;
    protected static Byte[] m_closeSpan;
    protected static Byte[] m_openSpan;
    protected static Byte[] m_quote;
    internal static string m_quoteString;
    protected static Byte[] m_closeTag;
    protected static Byte[] m_id;
    protected static Byte[] m_px;
    protected static Byte[] m_zeroWidth;
    protected static Byte[] m_zeroHeight;
    protected static Byte[] m_openHtml;
    protected static Byte[] m_closeHtml;
    protected static Byte[] m_openBody;
    protected static Byte[] m_closeBody;
    protected static Byte[] m_openHead;
    protected static Byte[] m_closeHead;
    protected static Byte[] m_openTitle;
    protected static Byte[] m_closeTitle;
    protected static Byte[] m_openA;
    protected static Byte[] m_target;
    protected static Byte[] m_closeA;
    protected static string m_hrefString;
    protected static Byte[] m_href;
    protected static Byte[] m_nohref;
    protected static Byte[] m_inlineHeight;
    protected static Byte[] m_inlineWidth;
    protected static Byte[] m_img;
    protected static Byte[] m_imgOnError;
    protected static Byte[] m_src;
    protected static Byte[] m_topValue;
    protected static Byte[] m_alt;
    protected static Byte[] m_title;
    protected static Byte[] m_classID;
    protected static Byte[] m_codeBase;
    protected static Byte[] m_valueObject;
    protected static Byte[] m_paramObject;
    protected static Byte[] m_openObject;
    protected static Byte[] m_closeObject;
    protected static Byte[] m_equal;
    protected static Byte[] m_encodedAmp;
    protected static Byte[] m_nbsp;
    protected static Byte[] m_questionMark;
    protected static Byte[] m_checked;
    protected static Byte[] m_checkForEnterKey;
    protected static Byte[] m_unchecked;
    protected static Byte[] m_showHideOnClick;
    protected static Byte[] m_cursorHand;
    protected static Byte[] m_rtlDir;
    protected static Byte[] m_ltrDir;
    protected static Byte[] m_classStyle;
    protected static Byte[] m_openStyle;
    protected static Byte[] m_underscore;
    protected static Byte[] m_lineBreak;
    protected static Byte[] m_ssClassID;
    protected static Byte[] m_ptClassID;
    protected static Byte[] m_xmlData;
    protected static Byte[] m_useMap;
    protected static Byte[] m_openMap;
    protected static Byte[] m_closeMap;
    protected static Byte[] m_mapArea;
    protected static Byte[] m_mapCoords;
    protected static Byte[] m_mapShape;
    protected static Byte[] m_name;
    protected static Byte[] m_circleShape;
    protected static Byte[] m_polyShape;
    protected static Byte[] m_rectShape;
    protected static Byte[] m_comma;
    private static string m_mapPrefixString;
    protected static Byte[] m_mapPrefix;
    protected static Byte[] m_classPopupAction;
    protected static Byte[] m_closeLi;
    protected static Byte[] m_openLi;
    protected static Byte[] m_firstNonHeaderPostfix;
    protected static Byte[] m_fixedMatrixCornerPostfix;
    protected static Byte[] m_fixedRowGroupingHeaderPostfix;
    protected static Byte[] m_fixedColumnGroupingHeaderPostfix;
    protected static Byte[] m_fixedRowHeaderPostfix;
    protected static Byte[] m_fixedColumnHeaderPostfix;
    protected static Byte[] m_fixedTableCornerPostfix;
    internal static Byte[] m_language;
    private static Byte[] m_zeroBorderWidth;
    internal static Byte[] m_onLoadFitProportionalPv;
    private static Byte[] m_normalWordWrap;
    private static Byte[] m_classPercentSizes;
    private static Byte[] m_classPercentSizesOverflow;
    private static Byte[] m_classPercentWidthOverflow;
    private static Byte[] m_classPercentHeight;
    private static Byte[] m_classLayoutBorder;
    private static Byte[] m_classLayoutFixed;
    private static Byte[] m_strokeColor;
    private static Byte[] m_strokeWeight;
    private static Byte[] m_slineStyle;
    private static Byte[] m_dashStyle;
    private static Byte[] m_closeVGroup;
    private static Byte[] m_openVGroup;
    private static Byte[] m_openVLine;
    private static Byte[] m_leftSlant;
    private static Byte[] m_rightSlant;
    private static Byte[] m_pageBreakDelimiter;
    private static Byte[] m_nogrowAttribute;
    private static Byte[] m_stylePositionAbsolute;
    private static Byte[] m_stylePositionRelative;
    private static Byte[] m_styleClipRectOpenBrace;
    private static Byte[] m_styleTop;
    private static Byte[] m_styleLeft;
    private static Byte[] m_pxSpace;
    internal static Char[] m_cssDelimiters;
    protected bool m_hasOnePage;
    protected Stream m_mainStream;
    internal Encoding m_encoding;
    protected RPLReport m_rplReport;
    protected RPLPageContent m_pageContent;
    protected RPLReportSection m_rplReportSection;
    protected IReportWrapper m_report;
    protected ISPBProcessing m_spbProcessing;
    protected Hashtable m_usedStyles;
    protected NameValueCollection m_serverParams;
    protected DeviceInfo m_deviceInfo;
    protected NameValueCollection m_rawDeviceInfo;
    protected Dictionary`2<string, string> m_images;
    protected Byte[] m_stylePrefixIdBytes;
    protected int m_pageNum;
    protected CreateAndRegisterStream m_createAndRegisterStreamCallback;
    protected bool m_fitPropImages;
    protected bool m_browserIE;
    protected RequestType m_requestType;
    protected bool m_htmlFragment;
    protected Stream m_styleStream;
    protected Stream m_growRectangleIdsStream;
    protected Stream m_fitVertTextIdsStream;
    protected Stream m_imgFitDivIdsStream;
    protected Stream m_imgConImageIdsStream;
    protected bool m_useInlineStyle;
    protected bool m_pageWithBookmarkLinks;
    protected bool m_pageWithSortClicks;
    protected bool m_allPages;
    protected int m_outputLineLength;
    protected bool m_onlyVisibleStyles;
    private SecondaryStreams m_createSecondaryStreams;
    protected int m_tabIndexNum;
    protected int m_currentHitCount;
    protected Hashtable m_duplicateItems;
    protected string m_searchText;
    protected bool m_emitImageConsolidationScaling;
    protected bool m_needsCanGrowFalseScript;
    protected bool m_needsGrowRectangleScript;
    protected bool m_needsFitVertTextScript;
    internal static string m_searchHitIdPrefix;
    internal static string m_standardLineBreak;
    protected Stack m_linkToChildStack;
    protected PageSection m_pageSection;
    protected bool m_pageHasStyle;
    protected bool m_isBody;
    protected bool m_usePercentWidth;
    protected bool m_hasSlantedLines;
    internal bool m_expandItem;
    protected ArrayList m_fixedHeaders;
    private bool m_isStyleOpen;
    private bool m_renderTableHeight;
    private string m_contextLanguage;
    private bool m_allowBandTable;
    protected Byte[] m_styleClassPrefix;
    unknown string SearchText {internal set; }
    internal bool NeedResizeImages { get; }
    protected bool IsFragment { get; }
    internal bool IsBrowserIE { get; }
    private static HTML4Renderer();
    public HTML4Renderer(IReportWrapper report, ISPBProcessing spbProcessing, NameValueCollection reportServerParams, DeviceInfo deviceInfo, NameValueCollection rawDeviceInfo, NameValueCollection browserCaps, CreateAndRegisterStream createAndRegisterStreamCallback, SecondaryStreams secondaryStreams);
    internal void InitializeReport();
    protected static string GetStyleStreamName(string aReportName, int aPageNumber);
    internal static string GetStreamName(string aReportName, int aPageNumber, string suffix);
    internal static string HandleSpecialFontCharacters(string fontName);
    protected abstract virtual void RenderSortAction(RPLTextBoxProps textBoxProps, SortOptions sortState);
    protected abstract virtual void RenderInternalImageSrc();
    protected abstract virtual void RenderToggleImage(RPLTextBoxProps textBoxProps);
    public abstract virtual void Render(HtmlTextWriter outputWriter);
    internal void set_SearchText(string value);
    internal void RenderStylesOnly(string streamName);
    internal void RenderStylesOnlyRecursive(RPLItemMeasurement measurement, StyleContext styleContext);
    internal void RenderEmptyTopTablixRow(RPLTablix tablix, List`1<RPLTablixOmittedRow> omittedRows, string tablixID, bool emptyCol, TablixFixedHeaderStorage headerStorage);
    internal void RenderEmptyHeightCell(float height, string tablixID, bool fixedRow, int row, TablixFixedHeaderStorage headerStorage);
    protected static int GetNewContext(int borderContext, bool left, bool right, bool top, bool bottom);
    protected static int GetNewContext(int borderContext, int x, int y, int xMax, int yMax);
    protected Rectangle RenderDynamicImage(RPLItemMeasurement measurement, RPLDynamicImageProps dynamicImageProps);
    internal bool get_NeedResizeImages();
    protected bool get_IsFragment();
    internal bool get_IsBrowserIE();
    protected bool IsCollectionWithoutContent(RPLContainer container, Boolean& empty);
    private void RenderOpenStyle(string id);
    protected virtual RPLReport GetNextPage();
    protected virtual bool NeedSharedToggleParent(RPLTextBoxProps textBoxProps);
    protected virtual bool CanSort(RPLTextBoxPropsDef textBoxDef);
    protected void RenderSortImage(RPLTextBoxProps textBoxProps);
    protected virtual void RenderSortImageText(SortOptions sortState);
    internal void RenderOnClickActionScript(string actionType, string actionArg);
    protected PaddingSharedInfo GetPaddings(RPLElementStyle style, PaddingSharedInfo paddingInfo);
    protected bool NeedReportItemId(RPLElement repItem, RPLElementProps props);
    protected void RenderHtmlBody();
    protected abstract virtual void WriteScrollbars();
    protected abstract virtual void WriteFixedHeaderOnScrollScript();
    protected abstract virtual void WriteFixedHeaderPropertyChangeScript();
    protected virtual void RenderPageStart(bool firstPage, bool lastPage, RPLElementStyle pageStyle);
    protected virtual void RenderPageStartDimensionStyles(bool lastPage);
    private void RenderPageStyle(RPLElementStyle style);
    protected void OpenStyle();
    protected void CloseStyle(bool renderQuote);
    internal void WriteClassName(Byte[] className, Byte[] classNameIfNoPrefix);
    protected virtual void WriteClassStyle(Byte[] styleBytes, bool close);
    protected void RenderBackgroundStyleProps(IRPLStyle style);
    protected virtual void RenderPageEnd();
    public virtual void WriteStream(string theString);
    internal void WriteStream(object theString);
    public virtual void WriteStream(Byte[] theBytes);
    protected void WriteStreamCR(string theString);
    protected void WriteStreamCR(Byte[] theBytes);
    protected void WriteStreamEncoded(string theString);
    protected void WriteAttrEncoded(Byte[] attributeName, string theString);
    protected virtual void WriteAttribute(Byte[] attributeName, Byte[] value);
    protected void WriteAttrEncoded(string theString);
    protected void WriteStreamCREncoded(string theString);
    protected virtual void WriteStreamLineBreak();
    protected void WriteRSStream(float size);
    protected void WriteRSStreamCR(float size);
    protected void WriteDStream(float size);
    private void WriteIdToSecondaryStream(Stream secondaryStream, string tagId);
    internal static void QuoteString(StringBuilder output, string input);
    protected Byte[] RenderSharedStyle(RPLElement reportItem, RPLElementProps props, RPLElementPropsDef definition, RPLStyleProps sharedStyle, RPLItemMeasurement measurement, string id, StyleContext styleContext, Int32& borderContext);
    protected Byte[] RenderSharedStyle(RPLElement reportItem, RPLElementProps props, RPLElementPropsDef definition, RPLStyleProps sharedStyle, RPLStyleProps nonSharedStyle, RPLItemMeasurement measurement, string id, StyleContext styleContext, Int32& borderContext);
    protected Byte[] RenderSharedStyle(ElementStyleWriter styleWriter, RPLStyleProps sharedStyle, StyleContext styleContext, string id);
    protected void RenderMeasurementStyle(float height, float width);
    protected void RenderMeasurementStyle(float height, float width, bool renderMin);
    protected void RenderMeasurementHeight(float height, bool renderMin);
    protected void RenderMeasurementMinHeight(float height);
    protected void RenderMeasurementWidth(float width, bool renderMinWidth);
    protected void RenderMeasurementMinWidth(float minWidth);
    protected void RenderMeasurementHeight(float height);
    protected void RenderMeasurementWidth(float width);
    private bool ReportPageHasBorder(IRPLStyle style, string backgroundColor);
    protected virtual void RenderDynamicImageSrc(RPLDynamicImageProps dynamicImageProps);
    protected void RenderHtmlBorders(IRPLStyle styleProps, Int32& borderContext, byte omitBordersState, bool renderPadding, bool isNonShared, IRPLStyle sharedStyleProps);
    protected void RenderPaddingStyle(IRPLStyle styleProps);
    protected void RenderMultiLineText(string text);
    protected bool IsLineSlanted(RPLItemMeasurement measurement);
    protected void RenderCellItem(PageTableCell currCell, int borderContext, bool layoutExpand);
    protected virtual void RenderBlankImage();
    protected virtual void RenderImageUrl(bool useSessionId, RPLImageData image);
    protected virtual void RenderReportItemId(string repItemId);
    private void WriteReportItemId(string repItemId);
    protected void RenderTextBox(RPLTextBox textBox, RPLTextBoxProps textBoxProps, RPLTextBoxPropsDef textBoxPropsDef, RPLItemMeasurement measurement, StyleContext styleContext, Int32& borderContext, bool renderId);
    private string GetTextBoxClass(RPLTextBoxPropsDef textBoxPropsDef, RPLTextBoxProps textBoxProps, RPLStyleProps nonSharedStyle, string defaultClass);
    private void WriteToolTip(RPLElementProps props);
    private void WriteToolTipAttribute(string tooltip);
    private void WriteOuterConsolidation(Rectangle consolidationOffsets, Sizings sizing, string propsUniqueName);
    private void WriteClippedDiv(Rectangle clipCoordinates);
    protected void RenderNavigationId(string navigationId);
    protected void RenderTablix(RPLTablix tablix, RPLElementProps props, RPLElementPropsDef def, RPLItemMeasurement measurement, StyleContext styleContext, Int32& borderContext, bool renderId);
    private void RenderTablixOmittedRow(int columns, RPLTablixRow currentRow);
    protected void RenderSimpleTablixRows(RPLTablix tablix, string tablixID, RPLTablixRow currentRow, int borderContext, TablixFixedHeaderStorage headerStorage);
    private void RenderSimpleTablixCellWithHeight(float height, RPLTablix tablix, string tablixID, int numCols, int row, int tablixContext, RPLTablixCell cell, List`1<RPLTablixMemberCell> omittedCells, Int32& omittedIndex, StyleContext styleContext, bool firstRow, bool lastRow, TablixFixedHeaderStorage headerStorage);
    private void RenderTablixReportItemStyle(RPLTablix tablix, int tablixContext, RPLTablixCell cell, StyleContext styleContext, bool firstCol, bool lastCol, bool firstRow, bool lastRow, RPLElement cellItem, Int32& borderContext);
    private void RenderTablixReportItem(RPLTablix tablix, int tablixContext, RPLTablixCell cell, StyleContext styleContext, bool firstCol, bool lastCol, bool firstRow, bool lastRow, RPLElement cellItem, Int32& borderContext);
    private void RenderListReportItem(RPLTablix tablix, RPLTablixCell cell, List`1<RPLTablixMemberCell> omittedHeaders, int tablixContext, StyleContext styleContext, bool firstRow, bool lastRow, SharedListLayoutState layoutState, RPLElement cellItem);
    protected void RenderListRectangle(RPLContainer rectangle, List`1<RPLTablixMemberCell> omittedHeaders, RPLItemMeasurement measurement, RPLElementProps props, RPLElementPropsDef def, SharedListLayoutState layoutState, int borderContext);
    private void RenderSimpleTablixCell(RPLTablix tablix, string tablixID, int colSpan, int row, int tablixContext, RPLTablixCell cell, List`1<RPLTablixMemberCell> omittedCells, Int32& omittedIndex, bool lastCol, bool firstRow, bool lastRow, TablixFixedHeaderStorage headerStorage);
    private int GetColSpanMinusZeroWidthColumns(int startColIndex, int colSpan, RPLTablix tablix);
    private int RenderZeroWidthTDsForTablix(int startIndex, int colSpan, RPLTablix tablix);
    private void RenderSimpleTablixCellID(RPLTablix tablix, string tablixID, int row, TablixFixedHeaderStorage headerStorage, int col);
    protected void RenderMultiLineTextWithHits(string text, List`1<int> hits);
    protected void RenderTextWithHits(string text, int startPos, int endPos, List`1<int> hitIndices, Int32& currentHitIndex);
    private void OutputFindString(string findString, int offset);
    private bool IsImageNotFitProportional(RPLElement reportItem, RPLElementPropsDef definition);
    protected void RenderImage(RPLImage image, RPLImageProps imageProps, RPLImagePropsDef imagePropsDef, RPLItemMeasurement measurement, Int32& borderContext, bool renderId);
    protected int RenderReportItem(RPLElement reportItem, RPLElementProps props, RPLElementPropsDef def, RPLItemMeasurement measurement, StyleContext styleContext, int borderContext, bool renderId);
    protected void RenderSubReport(RPLSubReport subReport, RPLElementProps subReportProps, RPLElementPropsDef subReportDef, RPLItemMeasurement measurement, Int32& borderContext, bool renderId, StyleContext styleContext);
    protected void RenderRectangleMeasurements(RPLItemMeasurement measurement, IRPLStyle style);
    private void WriteFontSizeSmallPoint();
    protected void RenderRectangle(RPLContainer rectangle, RPLElementProps props, RPLElementPropsDef def, RPLItemMeasurement measurement, Int32& borderContext, bool renderId, StyleContext styleContext);
    private void RenderElementHyperlinkAllTextStyles(RPLElementStyle style, RPLAction action, string id);
    private bool RenderElementHyperlink(IRPLStyle style, RPLAction action);
    protected void RenderTextBoxPercent(RPLTextBox textBox, RPLTextBoxProps textBoxProps, RPLTextBoxPropsDef textBoxPropsDef, RPLItemMeasurement measurement, StyleContext styleContext, bool renderId);
    protected void RenderPageHeaderFooter(RPLItemMeasurement hfMeasurement);
    protected void RenderStyleProps(RPLElement reportItem, RPLElementProps props, RPLElementPropsDef definition, RPLItemMeasurement measurement, IRPLStyle sharedStyleProps, IRPLStyle nonSharedStyleProps, StyleContext styleContext, Int32& borderContext, bool isNonSharedStyles);
    protected void RenderLine(RPLLine reportItem, RPLElementProps rplProps, RPLLinePropsDef rplPropsDef, RPLItemMeasurement measurement, bool renderId, StyleContext styleContext);
    protected bool GenerateHTMLTable(RPLItemMeasurement[] repItemCol, float ownerTop, float ownerLeft, float dxParent, float dyParent, int borderContext, bool expandLayout, SharedListLayoutState layoutState, List`1<RPLTablixMemberCell> omittedHeaders, IRPLStyle style);
    protected void RenderZoom();
    protected void PredefinedStyles();
    internal static void PredefinedStyles(DeviceInfo m_deviceInfo, HTMLWriter writer);
    internal static void PredefinedStyles(DeviceInfo deviceInfo, HTMLWriter writer, Byte[] classStylePrefix);
    private static void StartPredefinedStyleClass(DeviceInfo deviceInfo, HTMLWriter writer, Byte[] classStylePrefix, Byte[] className);
    private void CheckBodyStyle();
    private bool ReportPageBorder(IRPLStyle pageStyle, Border border, string backgroundColor);
    private void BorderBottomAttribute(BorderAttribute attribute);
    private void BorderLeftAttribute(BorderAttribute attribute);
    private void BorderRightAttribute(BorderAttribute attribute);
    private void BorderTopAttribute(BorderAttribute attribute);
    private void BorderAllAtribute(BorderAttribute attribute);
    private void RenderBorder(object styleAttribute, Border border, BorderAttribute borderAttribute);
    private void RenderBorderStyle(object width, object style, object color, Border border);
    protected bool BorderInstance(IRPLStyle reportItemStyle, object defWidth, object defStyle, object defColor, Object& borderWidth, Object& borderStyle, Object& borderColor, Border border);
    private bool RenderBorderInstance(IRPLStyle reportItemStyle, object defWidth, object defStyle, object defColor, Border border);
    private bool OnlyGeneralBorder(IRPLStyle style);
    protected string CreateImageStream(RPLImageData image);
    private void RenderAtStart(RPLTextBoxProps textBoxProps, IRPLStyle style, bool renderSort, bool renderToggle);
    private void RenderAtEnd(RPLTextBoxProps textBoxProps, IRPLStyle style, bool renderSort, bool renderToggle);
    private bool RenderHyperlink(RPLAction action, TextDecorations textDec, string color);
    private void RenderTabIndex();
    private bool HasAction(RPLAction action);
    private bool HasAction(RPLActionInfo actionInfo);
    protected abstract virtual void RenderInteractionAction(RPLAction action, Boolean& hasHref);
    private bool RenderActionHref(RPLAction action, TextDecorations textDec, string color);
    protected void RenderControlActionScript(RPLAction action);
    internal static bool IsDirectionRTL(IRPLStyle style);
    internal static bool IsWritingModeVertical(IRPLStyle style);
    internal static bool IsWritingModeVertical(WritingModes writingMode);
    internal static bool HasHorizontalPaddingStyles(IRPLStyle style);
    private void PercentSizes();
    private void PercentSizesOverflow();
    private void ClassLayoutBorder();
    private void ClassPercentSizes();
    private void ClassPercentSizesOverflow();
    private void ClassPercentHeight();
    private void RenderLanguage(string language);
    private void RenderReportLanguage();
    private bool InitFixedColumnHeaders(RPLTablix tablix, string tablixID, TablixFixedHeaderStorage storage);
    private bool InitFixedRowHeaders(RPLTablix tablix, string tablixID, TablixFixedHeaderStorage storage);
    private void RenderVMLLine(RPLLine line, RPLItemMeasurement measurement, StyleContext styleContext);
    private List`1<string> RenderTableCellBorder(PageTableCell currCell, Hashtable renderedLines);
    private void CheckForLineID(RPLLine line, List`1<string> lineIDs, Hashtable renderedLines);
    private int GenerateTableLayoutContent(PageTableLayout rgTableGrid, RPLItemMeasurement[] repItemCol, bool bfZeroRowReq, bool bfZeroColReq, bool renderHeight, int borderContext, bool layoutExpand, SharedListLayoutState layoutState, List`1<RPLTablixMemberCell> omittedHeaders, IRPLStyle style);
    private static void MergeEmptyCells(PageTableLayout rgTableGrid, int x, int y, int currRow, bool firstRow, PageTableCell currCell, int numRows, int numCols, int index);
    private void RenderIE7WritingMode(WritingModes writingMode, Directions direction, StyleContext styleContext);
    internal static void WriteRotate270(DeviceInfo deviceInfo, StyleContext styleContext, Action`1<Byte[]> WriteStream);
    private void RenderDirectionStyles(RPLElement reportItem, RPLElementProps props, RPLElementPropsDef definition, RPLItemMeasurement measurement, IRPLStyle sharedStyleProps, IRPLStyle nonSharedStyleProps, bool isNonSharedStyles, StyleContext styleContext);
    private void RenderReportItemStyle(RPLElement reportItem, RPLItemMeasurement measurement, Int32& borderContext);
    private void RenderReportItemStyle(RPLElement reportItem, RPLItemMeasurement measurement, Int32& borderContext, StyleContext styleContext);
    private void RenderReportItemStyle(RPLElement reportItem, RPLElementProps elementProps, RPLElementPropsDef definition, RPLStyleProps nonSharedStyle, RPLStyleProps sharedStyle, RPLItemMeasurement measurement, StyleContext styleContext, Int32& borderContext, string styleID);
    private void GetBorderContext(IRPLStyle styleProps, Int32& borderContext, byte omitBordersState);
    private void RenderReportItemStyle(RPLElement reportItem, RPLElementProps elementProps, RPLElementPropsDef definition, RPLItemMeasurement measurement, StyleContext styleContext, Int32& borderContext, string styleID);
    private void RenderPercentSizes();
    private void RenderTextAlign(RPLTextBoxProps props, RPLElementStyle style);
    internal static bool GetTextAlignForType(RPLTextBoxProps textBoxProps);
    internal static bool GetTextAlignForType(TypeCode typeCode);
    private bool HasBorderStyle(object borderStyle);
    private float SubtractBorderStyles(float width, object defaultBorderStyle, object specificBorderStyle, object defaultBorderWidth, object specificBorderWidth);
    private float GetInnerContainerWidth(RPLMeasurement measurement, IRPLStyle containerStyle);
    private float GetInnerContainerWidthSubtractBorders(RPLItemMeasurement measurement, IRPLStyle containerStyle);
    private float GetAdjustedWidth(RPLItemMeasurement measurement, IRPLStyle style);
    private float GetAdjustedHeight(RPLItemMeasurement measurement, IRPLStyle style);
    private float GetInnerContainerHeight(RPLItemMeasurement measurement, IRPLStyle containerStyle);
    private float GetInnerContainerHeightSubtractBorders(RPLItemMeasurement measurement, IRPLStyle containerStyle);
    private void RenderTextBoxContent(RPLTextBox textBox, RPLTextBoxProps tbProps, RPLTextBoxPropsDef tbDef, string textBoxValue, RPLStyleProps actionStyle, bool renderImages, RPLItemMeasurement measurement, RPLAction textBoxAction);
    private void RenderTextRuns(RPLParagraph paragraph, TextRunStyleWriter trsw, RPLAction textBoxAction);
    private int RenderTextRunFindString(RPLTextRun textRun, List`1<int> hits, int remainingChars, Int32& runOffsetCount, TextRunStyleWriter trsw, RPLAction textBoxAction);
    private int RenderTextRun(RPLTextRun textRun, TextRunStyleWriter trsw, RPLAction textBoxAction);
    private void WriteStyles(string id, RPLStyleProps nonShared, RPLStyleProps shared, ElementStyleWriter styleWriter);
    protected abstract virtual void WriteFitProportionalScript(double pv, double ph);
    private void RenderImageFitProportional(RPLImage image, RPLItemMeasurement measurement, PaddingSharedInfo padds, bool writeSmallSize);
    private void RenderImagePercent(RPLImage image, RPLImageProps imageProps, RPLImagePropsDef imagePropsDef, RPLItemMeasurement measurement);
    private void RenderImageMapAreas(RPLActionInfoWithImageMap[] actionImageMaps, double width, double height, string uniqueName, int xOffset, int yOffset);
    protected void RenderImageMapArea(RPLActionInfoWithImageMap actionImageMap, double imageWidth, double imageHeight, string uniqueName, int xOffset, int yOffset);
    protected void RenderCreateFixedHeaderFunction(string prefix, string fixedHeaderObject, StringBuilder function, StringBuilder arrayBuilder, bool createHeadersWithArray);
    private void RenderServerDynamicImage(RPLElement dynamicImage, RPLDynamicImageProps dynamicImageProps, RPLElementPropsDef def, RPLItemMeasurement measurement, int borderContext, bool renderId, StyleContext styleContext);
    private void RenderBorderLine(RPLElement reportItem);
    private string CalculateRowHeaderId(RPLTablixCell cell, bool fixedHeader, string tablixID, int row, int col, TablixFixedHeaderStorage headerStorage, bool useElementName, bool fixedCornerHeader);
    private void RenderAccessibleHeaders(RPLTablix tablix, bool fixedHeader, int numCols, int col, int colSpan, int row, RPLTablixCell cell, List`1<RPLTablixMemberCell> omittedCells, HTMLHeader[] rowHeaderIds, String[] colHeaderIds, OmittedHeaderStack omittedHeaders, String& id);
    private void RenderTablixCell(RPLTablix tablix, bool fixedHeader, string tablixID, int numCols, int numRows, int col, int colSpan, int row, int tablixContext, RPLTablixCell cell, List`1<RPLTablixMemberCell> omittedCells, Int32& omittedIndex, StyleContext styleContext, TablixFixedHeaderStorage headerStorage, HTMLHeader[] rowHeaderIds, String[] colHeaderIds, OmittedHeaderStack omittedHeaders);
    private void RenderTablixOmittedHeaderCells(List`1<RPLTablixMemberCell> omittedHeaders, int colIndex, bool lastCol, Int32& omittedIndex);
    private void RenderColumnHeaderTablixCell(RPLTablix tablix, string tablixID, int numCols, int col, int colSpan, int row, int tablixContext, RPLTablixCell cell, StyleContext styleContext, TablixFixedHeaderStorage headerStorage, List`1<RPLTablixOmittedRow> omittedRows, Int32[] omittedIndices);
    protected void CreateGrowRectIdsStream();
    protected void CreateFitVertTextIdsStream();
    protected void CreateImgConImageIdsStream();
    protected void CreateImgFitDivImageIdsStream();
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
protected Stream CreateStream(string name, string extension, Encoding encoding, string mimeType, bool willSeek, StreamOper operation);
    protected void RenderSecondaryStreamIdsSpanTag(Stream secondaryStream, string tagId);
    protected void RenderSecondaryStreamSpanTagsForJavascriptFunctions();
}
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.HTMLHeader : object {
    public string ID;
    public int Span;
}
internal static class Microsoft.ReportingServices.Rendering.HtmlRenderer.HTMLRendererResources : object {
    public static string ResourceNamespace;
    public static string TogglePlus;
    public static string ToggleMinus;
    public static string SortAsc;
    public static string SortDesc;
    public static string SortNone;
    public static string Blank;
    public static string CommonScript;
    public static string FitProportionalScript;
    public static string FixedHeaderScript;
    public static string CanGrowFalseScript;
    public static string ImageConsolidationScript;
    private static ResourceList m_resourceList;
    private static HTMLRendererResources();
    public static void PopulateResources(Dictionary`2<string, Byte[]> nameToResourceMap, string prefix);
    public static Stream GetStream(string name, String& mimeType);
    private static Byte[] CreateFullName(Encoding encoding, string prefix, string name);
    public static Byte[] GetBytes(string name);
    public static Byte[] GetBytes(string name, String& mimeType);
    public static Byte[] GetBytesFullname(string nameWithNamespace, String& mimeType);
}
internal interface Microsoft.ReportingServices.Rendering.HtmlRenderer.HTMLWriter {
    public abstract virtual void WriteStream(Byte[] bytes);
    public abstract virtual void WriteStream(string value);
}
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.InvalidSectionException : Exception {
    protected InvalidSectionException(SerializationInfo info, StreamingContext context);
}
internal interface Microsoft.ReportingServices.Rendering.HtmlRenderer.IReportWrapper {
    public bool HasBookmarks { get; }
    public string SortItem { get; }
    public string ShowHideToggle { get; }
    public abstract virtual string GetStreamUrl(bool useSessionId, string streamName);
    public abstract virtual bool get_HasBookmarks();
    public abstract virtual string get_SortItem();
    public abstract virtual string get_ShowHideToggle();
    public abstract virtual string GetReportUrl(bool addParams);
    public abstract virtual Byte[] GetImageName(string imageID);
}
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.ListLevel : object {
    private int m_listLevel;
    private ListStyles m_style;
    private HTML4Renderer m_renderer;
    public int Level { get; public set; }
    public ListStyles Style { get; public set; }
    internal ListLevel(HTML4Renderer renderer, int listLevel, ListStyles style);
    public int get_Level();
    public void set_Level(int value);
    public ListStyles get_Style();
    public void set_Style(ListStyles value);
    internal void Open(bool writeNoVerticalMarginClass);
    internal void Close();
}
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.ListLevelStack : object {
    private List`1<ListLevel> m_listLevels;
    internal void PushTo(HTML4Renderer renderer, int listLevel, ListStyles style, bool writeNoVerticalMargin);
    internal void Pop();
    internal void PopAll();
    internal ListLevel Push(HTML4Renderer renderer, int listLevel, ListStyles style, bool writeNoVerticalMarginClass);
}
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.OmittedHeaderData : object {
    public String[] IDs;
    public int Level;
}
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.OmittedHeaderStack : Stack`1<OmittedHeaderData> {
    public string GetHeaders(int column, int currentLevel, string idPrefix);
    public void PopLevel(int level);
    public void Push(int level, int column, int colspan, string id, int columnCount);
}
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.PaddingSharedInfo : object {
    private double m_padH;
    private double m_padV;
    private int m_paddingContext;
    internal double PadH { get; }
    internal double PadV { get; }
    internal int PaddingContext { get; }
    internal PaddingSharedInfo(int paddingContext, double padH, double padV);
    internal double get_PadH();
    internal double get_PadV();
    internal int get_PaddingContext();
}
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.ParagraphStyleWriter : ElementStyleWriter {
    private RPLParagraph m_paragraph;
    private RPLTextBox m_textBox;
    private bool m_outputSharedInNonShared;
    private Mode m_mode;
    private int m_currentListLevel;
    internal RPLParagraph Paragraph { get; internal set; }
    internal Mode ParagraphMode { get; internal set; }
    internal int CurrentListLevel { get; internal set; }
    internal bool OutputSharedInNonShared { get; internal set; }
    internal ParagraphStyleWriter(HTML4Renderer renderer, RPLTextBox textBox);
    internal RPLParagraph get_Paragraph();
    internal void set_Paragraph(RPLParagraph value);
    internal Mode get_ParagraphMode();
    internal void set_ParagraphMode(Mode value);
    internal int get_CurrentListLevel();
    internal void set_CurrentListLevel(int value);
    internal bool get_OutputSharedInNonShared();
    internal void set_OutputSharedInNonShared(bool value);
    internal virtual bool NeedsToWriteNullStyle(StyleWriterMode mode);
    internal virtual void WriteStyles(StyleWriterMode mode, IRPLStyle style);
    internal void FixIndents(RPLReportSize& leftIndent, RPLReportSize& rightIndent, RPLReportSize& spaceBefore, RPLReportSize& spaceAfter, RPLReportSize hangingIndent);
    internal RPLReportSize FixHangingIndent(RPLReportSize leftIndent, RPLReportSize hangingIndent);
}
[CompilerGeneratedAttribute]
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.RenderRes : object {
    public static CultureInfo Culture { get; public set; }
    public static string HideDocMapTooltip { get; }
    public static string DocumentMap { get; }
    public static string DefaultDocMapLabel { get; }
    public static string HTML40LocalizedName { get; }
    public static string MHTMLLocalizedName { get; }
    public static string rrInvalidSectionError { get; }
    public static string rrInvalidDeviceInfo { get; }
    public static string ToggleStateCollapse { get; }
    public static string ToggleStateExpand { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_HideDocMapTooltip();
    public static string get_DocumentMap();
    public static string get_DefaultDocMapLabel();
    public static string get_HTML40LocalizedName();
    public static string get_MHTMLLocalizedName();
    public static string get_rrInvalidSectionError();
    public static string get_rrInvalidDeviceInfo();
    public static string get_ToggleStateCollapse();
    public static string get_ToggleStateExpand();
}
internal enum Microsoft.ReportingServices.Rendering.HtmlRenderer.SharedListLayoutState : Enum {
    public int value__;
    public static SharedListLayoutState None;
    public static SharedListLayoutState Start;
    public static SharedListLayoutState Continue;
    public static SharedListLayoutState End;
}
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.StyleContext : object {
    private bool m_inTablix;
    private bool m_styleOnCell;
    private bool m_renderMeasurements;
    private bool m_noBorders;
    private bool m_emptyTextBox;
    private bool m_onlyRenderMeasurementsBackgroundBorders;
    private byte m_omitBordersState;
    private bool m_ignoreVerticalAlign;
    private bool m_renderMinMeasurements;
    private bool m_ignorePadding;
    private bool m_rotationApplied;
    private bool m_zeroWidth;
    public bool EmptyTextBox { get; public set; }
    public bool NoBorders { get; public set; }
    public bool InTablix { get; public set; }
    public bool StyleOnCell { get; public set; }
    public bool RenderMeasurements { get; public set; }
    public bool RenderMinMeasurements { get; public set; }
    public bool OnlyRenderMeasurementsBackgroundBorders { get; public set; }
    public byte OmitBordersState { get; public set; }
    public bool IgnoreVerticalAlign { get; public set; }
    public bool IgnorePadding { get; public set; }
    public bool RotationApplied { get; public set; }
    public bool ZeroWidth { get; public set; }
    public void Reset();
    public bool get_EmptyTextBox();
    public void set_EmptyTextBox(bool value);
    public bool get_NoBorders();
    public void set_NoBorders(bool value);
    public bool get_InTablix();
    public void set_InTablix(bool value);
    public bool get_StyleOnCell();
    public void set_StyleOnCell(bool value);
    public bool get_RenderMeasurements();
    public void set_RenderMeasurements(bool value);
    public bool get_RenderMinMeasurements();
    public void set_RenderMinMeasurements(bool value);
    public bool get_OnlyRenderMeasurementsBackgroundBorders();
    public void set_OnlyRenderMeasurementsBackgroundBorders(bool value);
    public byte get_OmitBordersState();
    public void set_OmitBordersState(byte value);
    public bool get_IgnoreVerticalAlign();
    public void set_IgnoreVerticalAlign(bool value);
    public bool get_IgnorePadding();
    public void set_IgnorePadding(bool value);
    public bool get_RotationApplied();
    public void set_RotationApplied(bool value);
    public bool get_ZeroWidth();
    public void set_ZeroWidth(bool value);
}
internal enum Microsoft.ReportingServices.Rendering.HtmlRenderer.StyleWriterMode : Enum {
    public int value__;
    public static StyleWriterMode NonShared;
    public static StyleWriterMode Shared;
    public static StyleWriterMode All;
}
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.TablixFixedHeaderStorage : object {
    private string m_bodyId;
    private string m_htmlId;
    private string m_lastRowGroupCol;
    private int m_firstRowGroupColIndex;
    private List`1<string> m_rowHeaders;
    private List`1<string> m_columnHeaders;
    private List`1<string> m_cornerHeaders;
    internal string BodyID { get; internal set; }
    internal string HtmlId { get; internal set; }
    public List`1<string> RowHeaders { get; public set; }
    public bool HasEmptyCol { get; public set; }
    public string FirstRowGroupCol { get; }
    public string LastRowGroupCol { get; public set; }
    public string LastColGroupRow { get; }
    public List`1<string> ColumnHeaders { get; public set; }
    public List`1<string> CornerHeaders { get; public set; }
    internal string get_BodyID();
    internal void set_BodyID(string value);
    internal string get_HtmlId();
    internal void set_HtmlId(string value);
    public List`1<string> get_RowHeaders();
    public void set_RowHeaders(List`1<string> value);
    public bool get_HasEmptyCol();
    public void set_HasEmptyCol(bool value);
    public string get_FirstRowGroupCol();
    public string get_LastRowGroupCol();
    public void set_LastRowGroupCol(string value);
    public string get_LastColGroupRow();
    public List`1<string> get_ColumnHeaders();
    public void set_ColumnHeaders(List`1<string> value);
    public List`1<string> get_CornerHeaders();
    public void set_CornerHeaders(List`1<string> value);
}
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.TextRunStyleWriter : ElementStyleWriter {
    internal TextRunStyleWriter(HTML4Renderer renderer);
    internal virtual bool NeedsToWriteNullStyle(StyleWriterMode mode);
    internal virtual void WriteStyles(StyleWriterMode mode, IRPLStyle style);
}
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.Utility : object {
    internal static int TextBufferSize;
    internal static void CopyStream(Stream source, Stream sink);
    internal static string MmToPxAsString(double size);
    internal static long MMToPx(double size);
    internal static BufferedStream CreateBufferedStream(HtmlTextWriter sourceWriter);
    internal static BufferedStream CreateBufferedStream(Stream sourceStream);
}
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.ViewerRenderer : HTML4Renderer {
    internal string PageStyle;
    private string m_fixedHeaderScript;
    internal string FixedHeaderScript { get; }
    public ViewerRenderer(ReportControlSession reportControlSession, CreateAndRegisterStream streamCallback, ViewerRendererDeviceInfo deviceInfo, NameValueCollection browserCaps, SecondaryStreams secondaryStreams, PageCountMode pageCountMode);
    public virtual void Render(HtmlTextWriter outputWriter);
    private Stream CreateStyleStream(string styleStreamName);
    public static string GetStyleStreamName(int pageNumber);
    protected virtual void RenderInteractionAction(RPLAction action, Boolean& hasHref);
    protected virtual void RenderSortAction(RPLTextBoxProps textBoxProps, SortOptions sortState);
    protected virtual void RenderInternalImageSrc();
    protected virtual void RenderToggleImage(RPLTextBoxProps textBoxProps);
    private void WriteToggleImage(bool toggleState);
    protected virtual void RenderSortImageText(SortOptions sortState);
    protected virtual void WriteScrollbars();
    protected virtual void WriteFixedHeaderOnScrollScript();
    protected virtual void WriteFixedHeaderPropertyChangeScript();
    protected virtual void WriteFitProportionalScript(double pv, double ph);
    protected virtual void RenderPageStart(bool firstPage, bool lastPage, RPLElementStyle pageStyle);
    protected virtual void RenderPageEnd();
    private string GetFixedHeaderScripts();
    internal string get_FixedHeaderScript();
}
internal class Microsoft.ReportingServices.Rendering.HtmlRenderer.ViewerRendererDeviceInfo : DeviceInfo {
    public virtual void VerifySafeForJavascript(string value);
    public virtual bool IsSupported(string value, bool isTrue, Boolean& isRelative);
}
internal class Microsoft.ReportingServices.WebServer.DeviceInfoTags : object {
    internal static string ActionScript;
    internal static string BookmarkId;
    internal static string DocMap;
    internal static string ExpandContent;
    internal static string FindString;
    internal static string GetImage;
    internal static string HTMLFragment;
    internal static string JavaScript;
    internal static string LinkTarget;
    internal static string MHTMLFragment;
    internal static string OnlyVisibleStyles;
    internal static string OutlookCompat;
    internal static string Parameters;
    internal static string PrefixId;
    internal static string ResourceStreamRoot;
    internal static string ReplacementRoot;
    internal static string StreamRoot;
    internal static string Section;
    internal static string StyleSheet;
    internal static string StyleStream;
    internal static string Toolbar;
    internal static string UserAgent;
    internal static string Unknown;
    internal static string Zoom;
    internal static string AccessibleTablix;
    internal static string ImageConsolidation;
    internal static string BrowserMode;
    internal static string SectionPreviewImages;
    internal static string DataVisualizationFitSizing;
}
internal class Microsoft.ReportingServices.WebServer.ParamsAreaInitialState : object {
    internal static string True;
    internal static string False;
    internal static string Collapsed;
}
