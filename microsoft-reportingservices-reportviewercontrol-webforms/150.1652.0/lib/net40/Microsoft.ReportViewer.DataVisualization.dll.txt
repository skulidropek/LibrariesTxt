internal static class AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
    public static int MinorVersion;
    public static int BuildVersion;
    public static int SPLevel;
    public static string ProductVersionString;
    public static string ProductNameString;
    public static string SqlEngineUsageMetricsRoleGuidString;
    public static string ProductNameBrandingString;
    public static string LongProductNameBrandingString;
    public static string ProductNameShortcutBrandingString;
    public static string ProductCodeNameString;
    public static string VersionLocationString;
    public static string FileVersionSuffix;
    public static string ProductVersionLocationString;
    public static string VersionHelpKeywordPrefix;
    public static string VersionHelpSettingsToken;
    public static string SetupSupportFolder;
    public static string ProductLicenseFile;
    public static string SqlProductFamilyCode;
    public static string ProductUpdateCategory;
    public static string ProductDiscoveryId;
    public static string SqlInstanceIDPrefix;
    public static string AsInstanceIDPrefix;
    public static string RsInstanceIDPrefix;
    public static string MaxMaintenanceVersion;
    public static UInt32 evalTimeBombValue;
    public static UInt32 currentReleaseTimeBombValue;
    public static string WerEventNameSetupMsi;
    public static string WerEventNameSetupConfig;
    public static string ASUsageMetricsRoleGuidString;
    public static string SqlMajorFileVersion;
    public static string strCopyrightMS;
    public static string MSOLAP_VER;
    public static string strCopyrightITMS;
    public static string VersionHelpNamespace;
    public static string VersionBIDSHelpNamespace;
    public static string VisualStudioShellVersion;
    public static string VisualStudio2012ShellVersion;
}
internal class Microsoft.Reporting.Chart.Helpers.CollectedPieHelper : object {
    public double CollectedPercentage;
    protected RectangleF ChartAreaPosition;
    public bool ShowCollectedDataAsOneSlice;
    public Color SliceColor;
    public float ChartAreaSpacing;
    public float SupplementedAreaSizeRatio;
    public Color ConnectionLinesColor;
    public string CollectedLabel;
    public bool ShowCollectedLegend;
    public bool ShowCollectedPointLabels;
    private Chart chartControl;
    private Series series;
    private Series supplementalSeries;
    private ChartArea originalChartArea;
    private ChartArea supplementalChartArea;
    private float collectedPieSliceAngle;
    private bool ignorePaintEvent;
    public CollectedPieHelper(Chart chartControl);
    public void ShowSmallSegmentsAsSupplementalPie(Series collectedSeries);
    private bool CreateCollectedPie();
    private void ApplyPaletteColors();
    private void chart_PostPaint(object sender, ChartPaintEventArgs e);
    private PointF GetRotatedPlotAreaPoint(RectangleF areaPosition, float angle);
    private RectangleF GetChartAreaPlottingPosition(ChartArea area, ChartGraphics chartGraphics);
}
internal class Microsoft.Reporting.Chart.Helpers.HistogramHelper : object {
    public int SegmentIntervalNumber;
    public double SegmentIntervalWidth;
    public bool ShowPercentOnSecondaryYAxis;
    public void CreateHistogram(Chart chartControl, string dataSeriesName, string histogramSeriesName, string histogramLegendText);
    internal double RoundInterval(double interval);
}
internal class Microsoft.Reporting.Chart.Helpers.ParetoHelper : object {
    public void MakeParetoChart(Chart chart, string srcSeriesName, string destSeriesName);
}
[SRDescriptionAttribute("DescriptionAttributeAnnotation_Annotation")]
[DefaultPropertyAttribute("Name")]
internal abstract class Microsoft.Reporting.Chart.WebForms.Annotation : object {
    private string name;
    private string clipToChartArea;
    private bool selected;
    private bool sizeAlwaysRelative;
    private object tag;
    internal Chart chart;
    private double x;
    private double y;
    private double width;
    private double height;
    private string axisXName;
    private string axisYName;
    private Axis axisX;
    private Axis axisY;
    private bool visible;
    private ContentAlignment alignment;
    private Color textColor;
    private Font textFont;
    private TextStyle textStyle;
    internal Color lineColor;
    private int lineWidth;
    private ChartDashStyle lineStyle;
    private Color backColor;
    private ChartHatchStyle backHatchStyle;
    private GradientType backGradientType;
    private Color backGradientEndColor;
    private Color shadowColor;
    private int shadowOffset;
    private string anchorDataPointName;
    private DataPoint anchorDataPoint;
    private DataPoint anchorDataPoint2;
    private double anchorX;
    private double anchorY;
    internal double anchorOffsetX;
    internal double anchorOffsetY;
    internal ContentAlignment anchorAlignment;
    internal RectangleF[] selectionRects;
    internal bool outsideClipRegion;
    private string tooltip;
    internal static int selectionMarkerSize;
    internal RectangleF currentPositionRel;
    internal PointF currentAnchorLocationRel;
    private AnnotationSmartLabelsStyle smartLabelsStyle;
    internal int currentPathPointIndex;
    internal AnnotationGroup annotationGroup;
    private bool allowSelecting;
    private bool allowMoving;
    private bool allowAnchorMoving;
    private bool allowResizing;
    private bool allowTextEditing;
    private bool allowPathEditing;
    internal bool positionChanged;
    internal RectangleF startMovePositionRel;
    internal GraphicsPath startMovePathRel;
    internal PointF startMoveAnchorLocationRel;
    internal PointF lastPlacementPosition;
    private string href;
    private string mapAreaAttributes;
    private object mapAreaTag;
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeName4")]
[ParenthesizePropertyNameAttribute("True")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotation_AnnotationType")]
public string AnnotationType { get; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("NotSet")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationClipToChartArea")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.LegendAreaNameConverter")]
public string ClipToChartArea { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeTag5")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public object Tag { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeChart")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
internal Chart Chart { get; internal set; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSmartLabels")]
public AnnotationSmartLabelsStyle SmartLabels { get; public set; }
    [SRCategoryAttribute("CategoryAttributePosition")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSizeAlwaysRelative")]
public bool SizeAlwaysRelative { get; public set; }
    [SRCategoryAttribute("CategoryAttributePosition")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationBaseX")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.DoubleNanValueConverter")]
public double X { get; public set; }
    [SRCategoryAttribute("CategoryAttributePosition")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationBaseY")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.DoubleNanValueConverter")]
public double Y { get; public set; }
    [SRCategoryAttribute("CategoryAttributePosition")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationWidth")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.DoubleNanValueConverter")]
public double Width { get; public set; }
    [SRCategoryAttribute("CategoryAttributePosition")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationHeight")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.DoubleNanValueConverter")]
public double Height { get; public set; }
    [SRCategoryAttribute("CategoryAttributePosition")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeRight3")]
[RefreshPropertiesAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.DoubleNanValueConverter")]
public double Right { get; public set; }
    [SRCategoryAttribute("CategoryAttributePosition")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeBottom")]
[RefreshPropertiesAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.DoubleNanValueConverter")]
public double Bottom { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeSelected")]
public bool Selected { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ParenthesizePropertyNameAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle3")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeVisible6")]
[ParenthesizePropertyNameAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.ContentAlignment", "MiddleCenter")]
[SRDescriptionAttribute("DescriptionAttributeAlignment7")]
public ContentAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeTextColor6")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRDescriptionAttribute("DescriptionAttributeTextFont")]
public Font TextFont { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.TextStyle", "Default")]
[SRDescriptionAttribute("DescriptionAttributeTextStyle3")]
public TextStyle TextStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLineColor3")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLineWidth7")]
public int LineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLineStyle6")]
public ChartDashStyle LineStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeBackColor9")]
[NotifyParentPropertyAttribute("True")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientType12")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientEndColor13")]
public Color BackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "128,0,0,0")]
[SRDescriptionAttribute("DescriptionAttributeShadowColor4")]
public Color ShadowColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeShadowOffset7")]
public int ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchorAxes")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[BindableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeAxisXName")]
public string AxisXName { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchorAxes")]
[BrowsableAttribute("False")]
[BindableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeAxisYName")]
[SerializationVisibilityAttribute("0")]
public string AxisYName { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchorAxes")]
[BrowsableAttribute("False")]
[BindableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeAxisYName")]
public string YAxisName { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchorAxes")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAxisX")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AnnotationAxisValueConverter")]
public Axis AxisX { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchorAxes")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAxisY")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AnnotationAxisValueConverter")]
public Axis AxisY { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchor")]
[BrowsableAttribute("False")]
[BindableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeAnchorDataPointName")]
public string AnchorDataPointName { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchor")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnchorDataPoint")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AnchorPointValueConverter")]
public DataPoint AnchorDataPoint { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchor")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeAnchorX")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.DoubleNanValueConverter")]
public double AnchorX { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchor")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeAnchorY")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.DoubleNanValueConverter")]
public double AnchorY { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchor")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnchorOffsetX3")]
[RefreshPropertiesAttribute("1")]
public double AnchorOffsetX { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchor")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnchorOffsetY3")]
[RefreshPropertiesAttribute("1")]
public double AnchorOffsetY { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchor")]
[DefaultValueAttribute("System.Drawing.ContentAlignment", "BottomCenter")]
[SRDescriptionAttribute("DescriptionAttributeAnchorAlignment3")]
public ContentAlignment AnchorAlignment { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAttributeEditing")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAllowSelecting")]
public bool AllowSelecting { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAttributeEditing")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAllowMoving")]
public bool AllowMoving { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAttributeEditing")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAllowAnchorMoving3")]
public bool AllowAnchorMoving { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAttributeEditing")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAllowResizing")]
public bool AllowResizing { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAttributeEditing")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAllowTextEditing")]
public bool AllowTextEditing { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAttributeEditing")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAllowPathEditing3")]
public bool AllowPathEditing { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeToolTip4")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeHref")]
public string Href { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeMapAreaAttributes3")]
public string MapAreaAttributes { get; public set; }
    private string Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.ToolTip { get; private set; }
    private string Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.Href { get; private set; }
    private string Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.MapAreaAttributes { get; private set; }
    private object Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.Tag { get; private set; }
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public abstract virtual string get_AnnotationType();
    public virtual string get_ClipToChartArea();
    public virtual void set_ClipToChartArea(string value);
    public virtual object get_Tag();
    public virtual void set_Tag(object value);
    internal virtual Chart get_Chart();
    internal virtual void set_Chart(Chart value);
    public AnnotationSmartLabelsStyle get_SmartLabels();
    public void set_SmartLabels(AnnotationSmartLabelsStyle value);
    public virtual bool get_SizeAlwaysRelative();
    public virtual void set_SizeAlwaysRelative(bool value);
    public virtual double get_X();
    public virtual void set_X(double value);
    public virtual double get_Y();
    public virtual void set_Y(double value);
    public virtual double get_Width();
    public virtual void set_Width(double value);
    public virtual double get_Height();
    public virtual void set_Height(double value);
    public virtual double get_Right();
    public virtual void set_Right(double value);
    public virtual double get_Bottom();
    public virtual void set_Bottom(double value);
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public virtual ContentAlignment get_Alignment();
    public virtual void set_Alignment(ContentAlignment value);
    public virtual Color get_TextColor();
    public virtual void set_TextColor(Color value);
    public virtual Font get_TextFont();
    public virtual void set_TextFont(Font value);
    public virtual TextStyle get_TextStyle();
    public virtual void set_TextStyle(TextStyle value);
    public virtual Color get_LineColor();
    public virtual void set_LineColor(Color value);
    public virtual int get_LineWidth();
    public virtual void set_LineWidth(int value);
    public virtual ChartDashStyle get_LineStyle();
    public virtual void set_LineStyle(ChartDashStyle value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ChartHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(ChartHatchStyle value);
    public virtual GradientType get_BackGradientType();
    public virtual void set_BackGradientType(GradientType value);
    public virtual Color get_BackGradientEndColor();
    public virtual void set_BackGradientEndColor(Color value);
    public virtual Color get_ShadowColor();
    public virtual void set_ShadowColor(Color value);
    public virtual int get_ShadowOffset();
    public virtual void set_ShadowOffset(int value);
    public virtual string get_AxisXName();
    public virtual void set_AxisXName(string value);
    public virtual string get_AxisYName();
    public virtual void set_AxisYName(string value);
    public virtual string get_YAxisName();
    public virtual void set_YAxisName(string value);
    public virtual Axis get_AxisX();
    public virtual void set_AxisX(Axis value);
    public virtual Axis get_AxisY();
    public virtual void set_AxisY(Axis value);
    public virtual string get_AnchorDataPointName();
    public virtual void set_AnchorDataPointName(string value);
    public virtual DataPoint get_AnchorDataPoint();
    public virtual void set_AnchorDataPoint(DataPoint value);
    public virtual double get_AnchorX();
    public virtual void set_AnchorX(double value);
    public virtual double get_AnchorY();
    public virtual void set_AnchorY(double value);
    public virtual double get_AnchorOffsetX();
    public virtual void set_AnchorOffsetX(double value);
    public virtual double get_AnchorOffsetY();
    public virtual void set_AnchorOffsetY(double value);
    public virtual ContentAlignment get_AnchorAlignment();
    public virtual void set_AnchorAlignment(ContentAlignment value);
    public virtual bool get_AllowSelecting();
    public virtual void set_AllowSelecting(bool value);
    public virtual bool get_AllowMoving();
    public virtual void set_AllowMoving(bool value);
    public virtual bool get_AllowAnchorMoving();
    public virtual void set_AllowAnchorMoving(bool value);
    public virtual bool get_AllowResizing();
    public virtual void set_AllowResizing(bool value);
    public virtual bool get_AllowTextEditing();
    public virtual void set_AllowTextEditing(bool value);
    public virtual bool get_AllowPathEditing();
    public virtual void set_AllowPathEditing(bool value);
    public virtual string get_ToolTip();
    public virtual void set_ToolTip(string value);
    public virtual string get_Href();
    public virtual void set_Href(string value);
    public virtual string get_MapAreaAttributes();
    public virtual void set_MapAreaAttributes(string value);
    internal abstract virtual void Paint(Chart chart, ChartGraphics graphics);
    internal virtual void PaintSelectionHandles(ChartGraphics chartGraphics, RectangleF rect, GraphicsPath path);
    public virtual void ResizeToContent();
    internal virtual RectangleF GetContentPosition();
    private void GetAnchorLocation(Double& anchorX, Double& anchorY, Boolean& inRelativeAnchorX, Boolean& inRelativeAnchorY);
    internal virtual void GetRelativePosition(PointF& location, SizeF& size, PointF& anchorLocation);
    internal void SetPositionRelative(RectangleF position, PointF anchorPoint);
    internal void SetPositionRelative(RectangleF position, PointF anchorPoint, bool userInput);
    internal virtual void AdjustLocationSize(SizeF movingDistance, ResizingMode resizeMode);
    internal virtual void AdjustLocationSize(SizeF movingDistance, ResizingMode resizeMode, bool pixelCoord);
    internal virtual void AdjustLocationSize(SizeF movingDistance, ResizingMode resizeMode, bool pixelCoord, bool userInput);
    internal virtual bool IsAnchorDrawn();
    internal DataPoint GetDataPointByName(string dataPointName);
    private Axis GetAxisByName(string axisName);
    internal string GetDataPointName(DataPoint dataPoint);
    private string GetAxisName(Axis axis);
    public virtual void SendToBack();
    public virtual void BringToFront();
    public AnnotationGroup GetAnnotationGroup();
    internal void AddSmartLabelMarkerPositions(CommonElements common, ArrayList list);
    public void Anchor(DataPoint dataPoint);
    public void Anchor(DataPoint dataPoint1, DataPoint dataPoint2);
    internal bool IsVisible();
    internal void ResetCurrentRelativePosition();
    public void Delete();
    internal string ReplaceKeywords(string strOriginal);
    internal bool IsAnchorVisible();
    internal ChartGraphics GetGraphics();
    private Axis GetDataPointAxis(DataPoint dataPoint, AxisName axisName);
    internal void GetAxes(Axis& vertAxis, Axis& horizAxis);
    internal void Invalidate();
    private sealed virtual override string Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.get_ToolTip();
    private sealed virtual override void Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.set_ToolTip(string value);
    private sealed virtual override string Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.get_Href();
    private sealed virtual override void Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.set_Href(string value);
    private sealed virtual override string Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.get_MapAreaAttributes();
    private sealed virtual override void Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.set_MapAreaAttributes(string value);
    private sealed virtual override object Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.set_Tag(object value);
}
[DefaultMemberAttribute("Item")]
[SRDescriptionAttribute("DescriptionAttributeAnnotations3")]
internal class Microsoft.Reporting.Chart.WebForms.AnnotationCollection : CollectionBase {
    internal Chart chart;
    private IServiceContainer serviceContainer;
    private PointF movingResizingStartPoint;
    internal Annotation lastClickedAnnotation;
    internal AnnotationGroup annotationGroup;
    private Chart Chart { get; }
    [SRDescriptionAttribute("DescriptionAttributeAnnotationCollection_Item")]
public Annotation Item { get; public set; }
    public AnnotationCollection(IServiceContainer serviceContainer);
    private Chart get_Chart();
    public Annotation get_Item(object parameter);
    public void set_Item(object parameter, Annotation value);
    public bool Contains(Annotation annotation);
    public int IndexOf(Annotation value);
    public void Remove(string name);
    public void Remove(Annotation annotation);
    public int Add(Annotation annotation);
    public void Insert(int index, Annotation annotation);
    public int AddLine(string name, double x1, double y1, double x2, double y2);
    public int AddArrow(string name, ArrowStyle style, int size, double x1, double y1, double x2, double y2);
    public int AddVerticalLine(string name, double x, double y1, double y2);
    public int AddHorizontalLine(string name, double y, double x1, double x2);
    public int AddGroup(string name);
    public int AddText(string name, string text, double x, double y, double width, double height);
    public int AddEllipse(string name, double x, double y, double width, double height);
    public int AddRectangle(string name, double x, double y, double width, double height);
    public int AddCallout(string name, string text, CalloutStyle style, double x, double y, double width, double height);
    public int AddBorder3D(string name, double x, double y, double width, double height);
    public int AddImage(string name, string image, double x, double y, double width, double height);
    public int AddPolygon(string name, GraphicsPath path);
    public int AddPolyline(string name, GraphicsPath path);
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnClearComplete();
    internal void Paint(ChartGraphics chartGraph, bool drawAnnotationOnly);
    private void Invalidate();
    internal void AssignUniqueName(Annotation annotation);
    public Annotation FindByName(string name);
    internal Annotation FindByName(string name, AnnotationGroup& group);
}
[SRDescriptionAttribute("DescriptionAttributeAnnotationGroup_AnnotationGroup")]
internal class Microsoft.Reporting.Chart.WebForms.AnnotationGroup : Annotation {
    internal AnnotationCollection annotations;
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("NotSet")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationGroup_ClipToChartArea")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.LegendAreaNameConverter")]
public string ClipToChartArea { get; public set; }
    [SRCategoryAttribute("CategoryAttributePosition")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationGroup_SizeAlwaysRelative")]
public bool SizeAlwaysRelative { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationGroup_Selected")]
public bool Selected { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationGroup_Visible")]
[ParenthesizePropertyNameAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.ContentAlignment", "MiddleCenter")]
[SRDescriptionAttribute("DescriptionAttributeAlignment7")]
public ContentAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeTextColor6")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRDescriptionAttribute("DescriptionAttributeTextFont")]
public Font TextFont { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.TextStyle", "Default")]
[SRDescriptionAttribute("DescriptionAttributeTextStyle3")]
public TextStyle TextStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLineColor")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLineWidth7")]
public int LineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLineStyle6")]
public ChartDashStyle LineStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeBackColor8")]
[NotifyParentPropertyAttribute("True")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientType8")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationGroup_BackGradientEndColor")]
public Color BackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "128,0,0,0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationGroup_ShadowColor")]
public Color ShadowColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationGroup_ShadowOffset")]
public int ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnnotations")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationGroup_Annotations")]
public AnnotationCollection Annotations { get; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType4")]
public string AnnotationType { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ParenthesizePropertyNameAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle3")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    public virtual string get_ClipToChartArea();
    public virtual void set_ClipToChartArea(string value);
    public virtual bool get_SizeAlwaysRelative();
    public virtual void set_SizeAlwaysRelative(bool value);
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public virtual ContentAlignment get_Alignment();
    public virtual void set_Alignment(ContentAlignment value);
    public virtual Color get_TextColor();
    public virtual void set_TextColor(Color value);
    public virtual Font get_TextFont();
    public virtual void set_TextFont(Font value);
    public virtual TextStyle get_TextStyle();
    public virtual void set_TextStyle(TextStyle value);
    public virtual Color get_LineColor();
    public virtual void set_LineColor(Color value);
    public virtual int get_LineWidth();
    public virtual void set_LineWidth(int value);
    public virtual ChartDashStyle get_LineStyle();
    public virtual void set_LineStyle(ChartDashStyle value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ChartHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(ChartHatchStyle value);
    public virtual GradientType get_BackGradientType();
    public virtual void set_BackGradientType(GradientType value);
    public virtual Color get_BackGradientEndColor();
    public virtual void set_BackGradientEndColor(Color value);
    public virtual Color get_ShadowColor();
    public virtual void set_ShadowColor(Color value);
    public virtual int get_ShadowOffset();
    public virtual void set_ShadowOffset(int value);
    public AnnotationCollection get_Annotations();
    public virtual string get_AnnotationType();
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
    internal virtual void Paint(Chart chart, ChartGraphics graphics);
}
[SRDescriptionAttribute("DescriptionAttributeAnnotationPathPoint_AnnotationPathPoint")]
internal class Microsoft.Reporting.Chart.WebForms.AnnotationPathPoint : object {
    private float x;
    private float y;
    private byte pointType;
    [SRCategoryAttribute("CategoryAttributePosition")]
[DefaultValueAttribute("0")]
[BrowsableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationPathPoint_X")]
public float X { get; public set; }
    [SRCategoryAttribute("CategoryAttributePosition")]
[DefaultValueAttribute("0")]
[BrowsableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationPathPoint_Y")]
public float Y { get; public set; }
    [SRCategoryAttribute("CategoryAttributePosition")]
[DefaultValueAttribute("System.Byte", "1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationPathPoint_Name")]
public byte PointType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("PathPoint")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationPathPoint_Name")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string Name { get; }
    public AnnotationPathPoint(float x, float y);
    public AnnotationPathPoint(float x, float y, byte type);
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    public byte get_PointType();
    public void set_PointType(byte value);
    public string get_Name();
}
[DefaultMemberAttribute("Item")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationPathPointCollection_AnnotationPathPointCollection")]
internal class Microsoft.Reporting.Chart.WebForms.AnnotationPathPointCollection : CollectionBase {
    internal PolylineAnnotation annotation;
    [SRDescriptionAttribute("DescriptionAttributeAnnotationPathPointCollection_Item")]
public AnnotationPathPoint Item { get; public set; }
    public AnnotationPathPoint get_Item(int index);
    public void set_Item(int index, AnnotationPathPoint value);
    public void Remove(AnnotationPathPoint point);
    public int Add(AnnotationPathPoint point);
    public void Insert(int index, AnnotationPathPoint point);
    public bool Contains(AnnotationPathPoint value);
    public int IndexOf(AnnotationPathPoint value);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnClearComplete();
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    private void OnCollectionChanged();
}
[SRDescriptionAttribute("DescriptionAttributeAnnotationSmartLabels_AnnotationSmartLabels")]
internal class Microsoft.Reporting.Chart.WebForms.AnnotationSmartLabels : SmartLabels {
    internal virtual bool IsSmartLabelCollide(CommonElements common, ChartGraphics graph, ChartArea area, SmartLabelsStyle smartLabelsStyle, PointF position, SizeF size, PointF markerPosition, StringFormat format, LabelAlignmentTypes labelAlignment, bool checkCalloutLineOverlapping);
    internal virtual void AddMarkersPosition(CommonElements common, ChartArea area);
    internal virtual void DrawCallout(CommonElements common, ChartGraphics graph, ChartArea area, SmartLabelsStyle smartLabelsStyle, PointF labelPosition, SizeF labelSize, StringFormat format, PointF markerPosition, SizeF markerSize, LabelAlignmentTypes labelAlignment);
}
[DefaultPropertyAttribute("Enabled")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationSmartLabelsStyle_AnnotationSmartLabelsStyle")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter")]
internal class Microsoft.Reporting.Chart.WebForms.AnnotationSmartLabelsStyle : SmartLabelsStyle {
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeCalloutStyle3")]
public LabelCalloutStyle CalloutStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeCalloutLineColor")]
public Color CalloutLineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeCalloutLineStyle")]
public ChartDashStyle CalloutLineStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("System.Drawing.Color", "Transparent")]
[SRDescriptionAttribute("DescriptionAttributeCalloutBackColor")]
public Color CalloutBackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeCalloutLineWidth")]
public int CalloutLineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeCalloutLineAnchorCap")]
public LineAnchorCap CalloutLineAnchorCap { get; public set; }
    public AnnotationSmartLabelsStyle(object chartElement);
    public virtual LabelCalloutStyle get_CalloutStyle();
    public virtual void set_CalloutStyle(LabelCalloutStyle value);
    public virtual Color get_CalloutLineColor();
    public virtual void set_CalloutLineColor(Color value);
    public virtual ChartDashStyle get_CalloutLineStyle();
    public virtual void set_CalloutLineStyle(ChartDashStyle value);
    public virtual Color get_CalloutBackColor();
    public virtual void set_CalloutBackColor(Color value);
    public virtual int get_CalloutLineWidth();
    public virtual void set_CalloutLineWidth(int value);
    public virtual LineAnchorCap get_CalloutLineAnchorCap();
    public virtual void set_CalloutLineAnchorCap(LineAnchorCap value);
}
internal class Microsoft.Reporting.Chart.WebForms.AnovaResult : object {
    internal double sumOfSquaresBetweenGroups;
    internal double sumOfSquaresWithinGroups;
    internal double sumOfSquaresTotal;
    internal double degreeOfFreedomBetweenGroups;
    internal double degreeOfFreedomWithinGroups;
    internal double degreeOfFreedomTotal;
    internal double meanSquareVarianceBetweenGroups;
    internal double meanSquareVarianceWithinGroups;
    internal double fRatio;
    internal double fCriticalValue;
    public double SumOfSquaresBetweenGroups { get; }
    public double SumOfSquaresWithinGroups { get; }
    public double SumOfSquaresTotal { get; }
    public double DegreeOfFreedomBetweenGroups { get; }
    public double DegreeOfFreedomWithinGroups { get; }
    public double DegreeOfFreedomTotal { get; }
    public double MeanSquareVarianceBetweenGroups { get; }
    public double MeanSquareVarianceWithinGroups { get; }
    public double FRatio { get; }
    public double FCriticalValue { get; }
    public double get_SumOfSquaresBetweenGroups();
    public double get_SumOfSquaresWithinGroups();
    public double get_SumOfSquaresTotal();
    public double get_DegreeOfFreedomBetweenGroups();
    public double get_DegreeOfFreedomWithinGroups();
    public double get_DegreeOfFreedomTotal();
    public double get_MeanSquareVarianceBetweenGroups();
    public double get_MeanSquareVarianceWithinGroups();
    public double get_FRatio();
    public double get_FCriticalValue();
}
internal enum Microsoft.Reporting.Chart.WebForms.AntiAlias : Enum {
    public int value__;
    public static AntiAlias On;
    public static AntiAlias Off;
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Chart.WebForms.AntiAliasingTypes : Enum {
    public int value__;
    public static AntiAliasingTypes None;
    public static AntiAliasingTypes Text;
    public static AntiAliasingTypes Graphics;
    public static AntiAliasingTypes All;
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Chart.WebForms.AreaAlignOrientations : Enum {
    public int value__;
    public static AreaAlignOrientations None;
    public static AreaAlignOrientations Vertical;
    public static AreaAlignOrientations Horizontal;
    public static AreaAlignOrientations All;
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Chart.WebForms.AreaAlignTypes : Enum {
    public int value__;
    public static AreaAlignTypes None;
    public static AreaAlignTypes Position;
    public static AreaAlignTypes PlotPosition;
    public static AreaAlignTypes Cursor;
    public static AreaAlignTypes AxesView;
    public static AreaAlignTypes All;
}
[SRDescriptionAttribute("DescriptionAttributeArrowAnnotation_ArrowAnnotation")]
internal class Microsoft.Reporting.Chart.WebForms.ArrowAnnotation : Annotation {
    private ArrowStyle arrowStyle;
    private int arrowSize;
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeArrowAnnotation_ArrowStyle")]
[ParenthesizePropertyNameAttribute("True")]
public ArrowStyle ArrowStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("5")]
[SRDescriptionAttribute("DescriptionAttributeArrowAnnotation_ArrowSize")]
[ParenthesizePropertyNameAttribute("True")]
public int ArrowSize { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchor")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("System.Drawing.ContentAlignment", "TopLeft")]
[SRDescriptionAttribute("DescriptionAttributeAnchorAlignment")]
public ContentAlignment AnchorAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType4")]
public string AnnotationType { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ParenthesizePropertyNameAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle3")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    public virtual ArrowStyle get_ArrowStyle();
    public virtual void set_ArrowStyle(ArrowStyle value);
    public virtual int get_ArrowSize();
    public virtual void set_ArrowSize(int value);
    public virtual ContentAlignment get_AnchorAlignment();
    public virtual void set_AnchorAlignment(ContentAlignment value);
    public virtual string get_AnnotationType();
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
    internal virtual void Paint(Chart chart, ChartGraphics graphics);
    private GraphicsPath GetArrowPath(ChartGraphics graphics, RectangleF position);
}
internal enum Microsoft.Reporting.Chart.WebForms.ArrowOrientation : Enum {
    public int value__;
    public static ArrowOrientation Left;
    public static ArrowOrientation Right;
    public static ArrowOrientation Top;
    public static ArrowOrientation Bottom;
}
[SRDescriptionAttribute("DescriptionAttributeArrowStyle_ArrowStyle")]
internal enum Microsoft.Reporting.Chart.WebForms.ArrowStyle : Enum {
    public int value__;
    public static ArrowStyle Simple;
    public static ArrowStyle DoubleArrow;
    public static ArrowStyle Tailed;
}
internal enum Microsoft.Reporting.Chart.WebForms.ArrowsType : Enum {
    public int value__;
    public static ArrowsType None;
    public static ArrowsType Triangle;
    public static ArrowsType SharpTriangle;
    public static ArrowsType Lines;
}
internal enum Microsoft.Reporting.Chart.WebForms.AutoBool : Enum {
    public int value__;
    public static AutoBool Auto;
    public static AutoBool True;
    public static AutoBool False;
}
[SRDescriptionAttribute("DescriptionAttributeAxis_Axis")]
[DefaultPropertyAttribute("Enabled")]
internal class Microsoft.Reporting.Chart.WebForms.Axis : AxisLabels {
    internal Chart chart;
    private bool storeValuesEnabled;
    private string name;
    private Font titleFont;
    private Color titleColor;
    private StringAlignment titleAlignment;
    private string title;
    private int lineWidth;
    private ChartDashStyle lineDashStyle;
    private Color lineColor;
    private bool autoFit;
    private ArrowsType arrows;
    private StripLinesCollection stripLines;
    private bool nextToAxis;
    private TextOrientation textOrientation;
    internal float titleSize;
    internal float labelSize;
    internal float labelNearOffset;
    internal float labelFarOffset;
    internal float unRotatedLabelSize;
    internal float markSize;
    internal float scrollBarSize;
    internal float totlaGroupingLabelsSize;
    internal Single[] groupingLabelSizes;
    internal float totlaGroupingLabelsSizeAdjustment;
    private LabelsAutoFitStyles labelsAutoFitStyle;
    internal Font autoLabelFont;
    internal int autoLabelAngle;
    internal int autoLabelOffset;
    private float aveLabelFontSize;
    private float minLabelFontSize;
    private RectangleF titlePosition;
    internal static float elementSpacing;
    private static float maxAxisElementsSize;
    private static float maxAxisTitleSize;
    private static float maxAxisLabelRow2Size;
    private static float maxAxisMarkSize;
    internal double minimumFromData;
    internal double maximumFromData;
    internal bool refreshMinMaxFromData;
    internal int numberOfPointsInAllSeries;
    private double originalViewPosition;
    private bool interlaced;
    private Color interlacedColor;
    private double intervalOffset;
    internal double interval;
    internal DateTimeIntervalType intervalType;
    internal DateTimeIntervalType intervalOffsetType;
    internal int labelsAutoFitMinFontSize;
    internal int labelsAutoFitMaxFontSize;
    private string toolTip;
    private string href;
    private string mapAreaAttributes;
    public static double maxdecimal;
    public static double smallestPositiveDecimal;
    private ChartValueTypes valueType;
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttribute_TextOrientation")]
[NotifyParentPropertyAttribute("True")]
public TextOrientation TextOrientation { get; public set; }
    internal string SubAxisName { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeInterlaced")]
[NotifyParentPropertyAttribute("True")]
public bool Interlaced { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeInterlacedColor")]
[NotifyParentPropertyAttribute("True")]
public Color InterlacedColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeAxis_Name")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeType")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public AxisName Type { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeArrows")]
public ArrowsType Arrows { get; public set; }
    [SRCategoryAttribute("CategoryAttributeGridTickMarks")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMajorGrid")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter")]
public Grid MajorGrid { get; public set; }
    [SRCategoryAttribute("CategoryAttributeGridTickMarks")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMinorGrid")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter")]
public Grid MinorGrid { get; public set; }
    [SRCategoryAttribute("CategoryAttributeGridTickMarks")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMajorTickMark")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter")]
public TickMark MajorTickMark { get; public set; }
    [SRCategoryAttribute("CategoryAttributeGridTickMarks")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMinorTickMark")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter")]
public TickMark MinorTickMark { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLabels")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLabelsAutoFit")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public bool LabelsAutoFit { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLabels")]
[BindableAttribute("True")]
[DefaultValueAttribute("6")]
[SRDescriptionAttribute("DescriptionAttributeLabelsAutoFitMinFontSize")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public int LabelsAutoFitMinFontSize { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLabels")]
[BindableAttribute("True")]
[DefaultValueAttribute("10")]
[SRDescriptionAttribute("DescriptionAttributeLabelsAutoFitMaxFontSize")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public int LabelsAutoFitMaxFontSize { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLabels")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLabelsAutoFitStyle")]
[NotifyParentPropertyAttribute("True")]
public LabelsAutoFitStyles LabelsAutoFitStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMarksNextToAxis")]
[NotifyParentPropertyAttribute("True")]
public bool MarksNextToAxis { get; public set; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeTitle6")]
[NotifyParentPropertyAttribute("True")]
public string Title { get; public set; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeTitleColor")]
[NotifyParentPropertyAttribute("True")]
public Color TitleColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.StringAlignment", "Center")]
[SRDescriptionAttribute("DescriptionAttributeTitleAlignment")]
[NotifyParentPropertyAttribute("True")]
public StringAlignment TitleAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRDescriptionAttribute("DescriptionAttributeTitleFont5")]
[NotifyParentPropertyAttribute("True")]
public Font TitleFont { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLineColor8")]
[NotifyParentPropertyAttribute("True")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLineWidth9")]
[NotifyParentPropertyAttribute("True")]
public int LineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLineStyle7")]
[NotifyParentPropertyAttribute("True")]
public ChartDashStyle LineStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeStripLines")]
public StripLinesCollection StripLines { get; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeToolTip")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAxis_Href")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string Href { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAxis_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAttributeInterval")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeInterval4")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AxisIntervalValueConverter")]
public double Interval { get; public set; }
    [SRCategoryAttribute("CategoryAttributeInterval")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeIntervalOffset6")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AxisIntervalValueConverter")]
public double IntervalOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttributeInterval")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeIntervalType4")]
[RefreshPropertiesAttribute("1")]
public DateTimeIntervalType IntervalType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeInterval")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeIntervalOffsetType4")]
[RefreshPropertiesAttribute("1")]
public DateTimeIntervalType IntervalOffsetType { get; public set; }
    private bool IsTextVertical { get; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeAxis_ValueType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartValueTypes ValueType { get; public set; }
    internal void Initialize(ChartArea chartArea, AxisName axisType);
    internal void SetName();
    public TextOrientation get_TextOrientation();
    public void set_TextOrientation(TextOrientation value);
    internal virtual string get_SubAxisName();
    public bool get_Interlaced();
    public void set_Interlaced(bool value);
    public Color get_InterlacedColor();
    public void set_InterlacedColor(Color value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual AxisName get_Type();
    public ArrowsType get_Arrows();
    public void set_Arrows(ArrowsType value);
    public Grid get_MajorGrid();
    public void set_MajorGrid(Grid value);
    public Grid get_MinorGrid();
    public void set_MinorGrid(Grid value);
    public TickMark get_MajorTickMark();
    public void set_MajorTickMark(TickMark value);
    public TickMark get_MinorTickMark();
    public void set_MinorTickMark(TickMark value);
    public bool get_LabelsAutoFit();
    public void set_LabelsAutoFit(bool value);
    public int get_LabelsAutoFitMinFontSize();
    public void set_LabelsAutoFitMinFontSize(int value);
    public int get_LabelsAutoFitMaxFontSize();
    public void set_LabelsAutoFitMaxFontSize(int value);
    public LabelsAutoFitStyles get_LabelsAutoFitStyle();
    public void set_LabelsAutoFitStyle(LabelsAutoFitStyles value);
    public virtual bool get_MarksNextToAxis();
    public virtual void set_MarksNextToAxis(bool value);
    public string get_Title();
    public void set_Title(string value);
    public Color get_TitleColor();
    public void set_TitleColor(Color value);
    public StringAlignment get_TitleAlignment();
    public void set_TitleAlignment(StringAlignment value);
    public Font get_TitleFont();
    public void set_TitleFont(Font value);
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public int get_LineWidth();
    public void set_LineWidth(int value);
    public ChartDashStyle get_LineStyle();
    public void set_LineStyle(ChartDashStyle value);
    public StripLinesCollection get_StripLines();
    public void set_ToolTip(string value);
    public string get_ToolTip();
    public void set_Href(string value);
    public string get_Href();
    public void set_MapAreaAttributes(string value);
    public string get_MapAreaAttributes();
    public double get_Interval();
    public void set_Interval(double value);
    public double get_IntervalOffset();
    public void set_IntervalOffset(double value);
    public DateTimeIntervalType get_IntervalType();
    public void set_IntervalType(DateTimeIntervalType value);
    public DateTimeIntervalType get_IntervalOffsetType();
    public void set_IntervalOffsetType(DateTimeIntervalType value);
    private bool get_IsTextVertical();
    private TextOrientation GetTextOrientation();
    internal void PrePaint(ChartGraphics graph);
    internal void Paint(ChartGraphics graph);
    internal void PaintOnSegmentedScalePassOne(ChartGraphics graph);
    internal void PaintOnSegmentedScalePassTwo(ChartGraphics graph);
    private void DrawAxisTitle(ChartGraphics graph);
    private Matrix SetRotationTransformation(ChartGraphics graph, RectangleF titlePosition);
    internal void DrawRadialLine(object obj, ChartGraphics graph, Color color, int width, ChartDashStyle style, double position);
    internal void DrawCircularLine(object obj, ChartGraphics graph, Color color, int width, ChartDashStyle style, float position);
    private void DrawAxis3DTitle(ChartGraphics graph);
    internal void DrawAxisLine(ChartGraphics graph, bool backElements);
    internal void DrawAxisLine(ChartGraphics graph, bool selectionMode, bool backElements);
    private void InitAnimation(ChartGraphics graph, PointF firstPoint, PointF secondPoint);
    internal void Draw3DAxisLine(ChartGraphics graph, PointF point1, PointF point2, bool horizontal, bool backElements, bool selectionMode);
    internal float GetMarksZPosition(Boolean& axisOnEdge);
    internal void PaintGrids(ChartGraphics graph);
    internal void PaintGrids(ChartGraphics graph, bool selectionMode, int x, int y, Object& obj);
    internal void PaintStrips(ChartGraphics graph, bool drawLinesOnly);
    internal void PaintStrips(ChartGraphics graph, bool selectionMode, int x, int y, Object& obj, bool drawLinesOnly);
    private bool AddInterlacedStrip();
    public void RoundAxisValues();
    internal void ReCalc(ElementPosition position);
    internal void StoreAxisValues();
    internal void ResetAxisValues();
    internal void ResetAutoValues();
    internal virtual void Resize(ChartGraphics chartGraph, ElementPosition chartAreaPosition, RectangleF plotArea, float axesNumber, bool autoPlotPosition);
    private void AdjustIntervalToFitLabels(ChartGraphics chartGraph, bool autoPlotPosition, bool onlyIncreaseInterval);
    private bool IsVariableLabelCountModeEnabled();
    private void AdjustIntervalToFitLabels(ChartGraphics chartGraph, bool autoPlotPosition, AxisScaleSegment axisScaleSegment, bool onlyIncreaseInterval);
    private double ReduceLabelInterval(double oldInterval, double minInterval, AxisScaleSegment axisScaleSegment, DateTimeIntervalType& intervalType);
    private double IncreaseLabelInterval(double oldInterval, AxisScaleSegment axisScaleSegment, DateTimeIntervalType& intervalType);
    private bool WordWrapLongestLabel(CustomLabelsCollection labels);
    internal void GetCircularAxisLabelsAutoFitFont(ChartGraphics graph, ArrayList axisList, CircularAxisLabelsStyle labelsStyle, RectangleF plotAreaRectAbs, RectangleF areaRectAbs, float labelsSizeEstimate);
    internal bool CheckCircularLabelsFit(ChartGraphics graph, ArrayList axisList, CircularAxisLabelsStyle labelsStyle, RectangleF plotAreaRectAbs, RectangleF areaRectAbs, float labelsSizeEstimate);
    internal void AdjustLabelFontAtSecondPass(ChartGraphics chartGraph, bool autoPlotPosition);
    internal double GetLogValue(double yValue);
    private bool CheckLabelsFit(ChartGraphics chartGraph, float otherElementsSize, bool autoPlotPosition, bool checkLabelsFirstRowOnly, bool secondPass);
    private bool CheckLabelsFit(ChartGraphics chartGraph, float otherElementsSize, bool autoPlotPosition, bool checkLabelsFirstRowOnly, bool secondPass, bool checkWidth, bool checkHeight, ArrayList labelPositions);
    private float GetRequiredLabelSize(ChartGraphics chartGraph, float maxLabelSize, Single& resultSize);
    internal float GetGroupLablesToatalSize();
    internal int GetGroupLabelLevelCount();
    private Single[] GetRequiredGroupLabelSize(ChartGraphics chartGraph, float maxLabelSize);
    internal static double RemoveNoiseFromDoubleMath(double value);
    internal Axis GetSubAxis(string subAxisName);
    internal bool IsMarksNextToAxis();
    internal bool IsSerializing();
    internal DateTimeIntervalType GetAxisIntervalType();
    internal ChartValueTypes GetAxisValuesType();
    internal SizeF GetArrowSize(ArrowOrientation& arrowOrientation);
    private bool IsArrowInAxis(ArrowOrientation arrowOrientation, AxisPosition axisPosition);
    internal float GetPixelInterval(double realInterval);
    internal bool IsAxisOnAreaEdge();
    internal double GetAxisPosition();
    internal virtual double GetAxisPosition(bool ignoreCrossing);
    internal double GetAxisProjectionAngle();
    public ChartValueTypes get_ValueType();
    public void set_ValueType(ChartValueTypes value);
}
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_AxisDataView")]
[DefaultPropertyAttribute("Position")]
internal class Microsoft.Reporting.Chart.WebForms.AxisDataView : object {
    internal Axis axis;
    private double position;
    private double size;
    private DateTimeIntervalType sizeType;
    private double minSize;
    private DateTimeIntervalType minSizeType;
    private bool zoomable;
    private double smallScrollSize;
    private DateTimeIntervalType smallScrollSizeType;
    private double smallScrollMinSize;
    private DateTimeIntervalType smallScrollMinSizeType;
    private bool ignoreValidation;
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_Position")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.DoubleDateNanValueConverter")]
[ParenthesizePropertyNameAttribute("True")]
public double Position { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_Size")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.DoubleNanValueConverter")]
[ParenthesizePropertyNameAttribute("True")]
public double Size { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_SizeType")]
[ParenthesizePropertyNameAttribute("True")]
public DateTimeIntervalType SizeType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_MinSize")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.DoubleNanValueConverter")]
public double MinSize { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_MinSizeType")]
public DateTimeIntervalType MinSizeType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_Zoomable")]
public bool Zoomable { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("False")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_IsZoomed")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public bool IsZoomed { get; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_SmallScrollSize")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AxisMinMaxAutoValueConverter")]
public double SmallScrollSize { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_SmallScrollSizeType")]
public DateTimeIntervalType SmallScrollSizeType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_SmallScrollMinSize")]
public double SmallScrollMinSize { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeAxisDataView_SmallScrollMinSizeType")]
public DateTimeIntervalType SmallScrollMinSizeType { get; public set; }
    public AxisDataView(Axis axis);
    public double get_Position();
    public void set_Position(double value);
    public double get_Size();
    public void set_Size(double value);
    public DateTimeIntervalType get_SizeType();
    public void set_SizeType(DateTimeIntervalType value);
    public double get_MinSize();
    public void set_MinSize(double value);
    public DateTimeIntervalType get_MinSizeType();
    public void set_MinSizeType(DateTimeIntervalType value);
    public bool get_Zoomable();
    public void set_Zoomable(bool value);
    public bool get_IsZoomed();
    public double get_SmallScrollSize();
    public void set_SmallScrollSize(double value);
    public DateTimeIntervalType get_SmallScrollSizeType();
    public void set_SmallScrollSizeType(DateTimeIntervalType value);
    public double get_SmallScrollMinSize();
    public void set_SmallScrollMinSize(double value);
    public DateTimeIntervalType get_SmallScrollMinSizeType();
    public void set_SmallScrollMinSizeType(DateTimeIntervalType value);
    public double GetViewMinimum();
    public double GetViewMaximum();
    internal Chart GetChartObject();
}
internal enum Microsoft.Reporting.Chart.WebForms.AxisEnabled : Enum {
    public int value__;
    public static AxisEnabled Auto;
    public static AxisEnabled True;
    public static AxisEnabled False;
}
internal class Microsoft.Reporting.Chart.WebForms.AxisLabels : AxisScale {
    private CustomLabelsCollection customLabels;
    [SRCategoryAttribute("CategoryAttributeLabels")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLabelStyle")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter")]
public Label LabelStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLabels")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabels")]
[BrowsableAttribute("False")]
[SerializationVisibilityAttribute("0")]
public CustomLabelsCollection CustomLabels { get; }
    public Label get_LabelStyle();
    public void set_LabelStyle(Label value);
    public CustomLabelsCollection get_CustomLabels();
    internal bool IsCustomGridLines();
    internal bool IsCustomTickMarks();
    internal AxisType GetAxisType();
    internal ArrayList GetAxisSeries();
    internal Axis GetOtherTypeAxis();
    internal void PostFillLabels();
    internal void FillLabels(bool removeFirstRow);
    private string GetPointLabel(ArrayList series, double valuePosition, bool nonZeroXValues, bool indexedSeries);
    private string GetPointLabel(Series series, double valuePosition, bool nonZeroXValues, bool indexedSeries);
}
internal enum Microsoft.Reporting.Chart.WebForms.AxisName : Enum {
    public int value__;
    public static AxisName X;
    public static AxisName Y;
    public static AxisName X2;
    public static AxisName Y2;
}
internal enum Microsoft.Reporting.Chart.WebForms.AxisPosition : Enum {
    public int value__;
    public static AxisPosition Left;
    public static AxisPosition Right;
    public static AxisPosition Top;
    public static AxisPosition Bottom;
}
internal class Microsoft.Reporting.Chart.WebForms.AxisScale : ChartElement {
    internal double margin;
    internal double marginView;
    internal bool offsetTempSet;
    internal double marginTemp;
    private ArrayList stripLineOffsets;
    private bool logarithmic;
    internal double logarithmBase;
    internal bool reverse;
    internal bool startFromZero;
    internal TickMark minorTickMark;
    internal TickMark majorTickMark;
    internal Grid minorGrid;
    internal Grid majorGrid;
    internal bool enabled;
    internal bool autoEnabled;
    internal Label labelStyle;
    private DateTimeIntervalType intervalType;
    internal double maximum;
    internal double crossing;
    internal double minimum;
    internal double tempMaximum;
    internal double tempMinimum;
    internal double tempCrossing;
    internal CustomLabelsCollection tempLabels;
    internal bool tempAutoMaximum;
    internal bool tempAutoMinimum;
    internal double tempMajorGridInterval;
    internal double tempMinorGridInterval;
    internal double tempMajorTickMarkInterval;
    internal double tempMinorTickMarkInterval;
    internal double tempLabelInterval;
    internal DateTimeIntervalType tempGridIntervalType;
    internal DateTimeIntervalType tempTickMarkIntervalType;
    internal DateTimeIntervalType tempLabelIntervalType;
    internal bool paintMode;
    internal AxisName axisType;
    internal ChartArea chartArea;
    internal bool autoMaximum;
    internal bool autoMinimum;
    private AxisPosition axisPosition;
    internal Axis oppositeAxis;
    private AxisDataView view;
    internal AxisScrollBar scrollBar;
    internal bool roundedXValues;
    internal bool logarithmicConvertedToLinear;
    internal double logarithmicMinimum;
    internal double logarithmicMaximum;
    internal double logarithmicCrossing;
    internal double interval3DCorrection;
    internal bool optimizedGetPosition;
    internal double paintViewMax;
    internal double paintViewMin;
    internal double paintRange;
    internal double valueMultiplier;
    internal RectangleF paintAreaPosition;
    internal double paintAreaPositionBottom;
    internal double paintAreaPositionRight;
    internal double paintChartAreaSize;
    private IntervalAutoMode intervalAutoMode;
    internal bool scaleSegmentsUsed;
    internal int prefferedNumberofIntervals;
    private Stack`1<double> intervalsStore;
    internal AxisScaleBreakStyle axisScaleBreakStyle;
    internal AxisScaleSegmentCollection scaleSegments;
    [BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeReverse")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
internal AxisPosition AxisPosition { get; internal set; }
    [SRCategoryAttribute("CategoryAttributeInterval")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeIntervalAutoMode")]
public IntervalAutoMode IntervalAutoMode { get; public set; }
    [SRCategoryAttribute("CategoryAttributeScale")]
[BindableAttribute("True")]
[DefaultValueAttribute("False")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeReverse")]
public bool Reverse { get; public set; }
    [SRCategoryAttribute("CategoryAttributeScale")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeStartFromZero3")]
public bool StartFromZero { get; public set; }
    [SRCategoryAttribute("CategoryAttributeScale")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMargin")]
public bool Margin { get; public set; }
    [SRCategoryAttribute("CategoryAttributeScale")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeInternalIntervalType")]
[RefreshPropertiesAttribute("1")]
internal DateTimeIntervalType InternalIntervalType { get; internal set; }
    unknown double SetInterval {internal set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeScale")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMaximum")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AxisMinMaxAutoValueConverter")]
public double Maximum { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeScale")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMinimum")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AxisMinMaxAutoValueConverter")]
public double Minimum { get; public set; }
    [SRCategoryAttribute("CategoryAttributeScale")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCrossing")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AxisCrossingValueConverter")]
public double Crossing { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.AxisEnabled", "Auto")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeEnabled7")]
public AxisEnabled Enabled { get; public set; }
    [SRCategoryAttribute("CategoryAttributeScale")]
[BindableAttribute("True")]
[DefaultValueAttribute("False")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLogarithmic")]
public bool Logarithmic { get; public set; }
    [SRCategoryAttribute("CategoryAttributeScale")]
[BindableAttribute("True")]
[DefaultValueAttribute("10")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLogarithmBase")]
public double LogarithmBase { get; public set; }
    [SRCategoryAttribute("CategoryAttributeScale")]
[SRDescriptionAttribute("DescriptionAttributeScaleBreakStyle")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter")]
[NotifyParentPropertyAttribute("True")]
public AxisScaleBreakStyle ScaleBreakStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeScale")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegmentCollection_AxisScaleSegmentCollection")]
[SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public AxisScaleSegmentCollection ScaleSegments { get; }
    [SRCategoryAttribute("CategoryAttributeDataView")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeView")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter")]
internal AxisDataView View { get; internal set; }
    [SRCategoryAttribute("CategoryAttributeDataView")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeScrollBar")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter")]
internal AxisScrollBar ScrollBar { get; internal set; }
    internal virtual AxisPosition get_AxisPosition();
    internal virtual void set_AxisPosition(AxisPosition value);
    public IntervalAutoMode get_IntervalAutoMode();
    public void set_IntervalAutoMode(IntervalAutoMode value);
    public bool get_Reverse();
    public void set_Reverse(bool value);
    public bool get_StartFromZero();
    public void set_StartFromZero(bool value);
    public bool get_Margin();
    public void set_Margin(bool value);
    internal DateTimeIntervalType get_InternalIntervalType();
    internal void set_InternalIntervalType(DateTimeIntervalType value);
    internal void set_SetInterval(double value);
    internal void SetIntervalAndType(double newInterval, DateTimeIntervalType newIntervalType);
    public double get_Maximum();
    public void set_Maximum(double value);
    public double get_Minimum();
    public void set_Minimum(double value);
    public virtual double get_Crossing();
    public virtual void set_Crossing(double value);
    public AxisEnabled get_Enabled();
    public void set_Enabled(AxisEnabled value);
    public bool get_Logarithmic();
    public void set_Logarithmic(bool value);
    public double get_LogarithmBase();
    public void set_LogarithmBase(double value);
    public virtual AxisScaleBreakStyle get_ScaleBreakStyle();
    public virtual void set_ScaleBreakStyle(AxisScaleBreakStyle value);
    public AxisScaleSegmentCollection get_ScaleSegments();
    internal AxisDataView get_View();
    internal void set_View(AxisDataView value);
    internal AxisScrollBar get_ScrollBar();
    internal void set_ScrollBar(AxisScrollBar value);
    internal double GetViewMinimum();
    internal double GetViewMaximum();
    public double GetPosition(double axisValue);
    public double ValueToPosition(double axisValue);
    public double ValueToPixelPosition(double axisValue);
    public double PositionToValue(double position);
    internal double PositionToValue(double position, bool validateInput);
    public double PixelPositionToValue(double position);
    internal double PixelPositionToValue(double position, bool validate);
    internal void SetAxisPosition();
    internal void SetTempAxisOffset();
    internal void ResetTempAxisOffset();
    internal double RoundedValues(double inter, bool shouldStartFromZero, bool autoMax, bool autoMin, Double& min, Double& max);
    internal double CalcInterval(double diff);
    private double CalcInterval(double min, double max);
    internal double CalcInterval(double min, double max, bool date, DateTimeIntervalType& type, ChartValueTypes valuesType);
    private double CalcYearInterval(double years);
    private int GetNumOfUnits(double min, double max, DateTimeIntervalType type);
    internal ChartValueTypes GetDateTimeType();
    private double GetCrossing();
    internal void SetAutoMinimum(double min);
    internal void SetAutoMaximum(double max);
    internal Axis GetOppositeAxis();
    internal void Invalidate();
    internal double GetLinearPosition(double axisValue);
    internal void EstimateAxis();
    internal double EstimateAxis(Double& minimum, Double& maximum, bool autoMaximum, bool autoMinimum);
    private double EstimateLogarithmicAxis(Double& minimum, Double& maximum, double crossing, bool autoMaximum, bool autoMinimum);
    private double EstimateDateAxis(Double& minimum, Double& maximum, double crossing, bool autoMaximum, bool autoMinimum, ChartValueTypes valuesType);
    internal double EstimateNumberAxis(Double& minimum, Double& maximum, bool shouldStartFromZero, int preferredNumberOfIntervals, double crossing, bool autoMaximum, bool autoMinimum);
}
[SRDescriptionAttribute("DescriptionAttributeAxisScaleBreakStyle_AxisScaleBreakStyle")]
[DefaultPropertyAttribute("Enabled")]
internal class Microsoft.Reporting.Chart.WebForms.AxisScaleBreakStyle : object {
    internal Axis axis;
    private bool enabled;
    private BreakLineType breakLineType;
    private double segmentSpacing;
    private Color breakLineColor;
    private int breakLineWidth;
    private ChartDashStyle breakLineStyle;
    private double minSegmentSize;
    private int totalNumberOfSegments;
    private int minimumNumberOfEmptySegments;
    private int maximumNumberOfBreaks;
    private AutoBool startFromZero;
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleBreakStyle_StartFromZero")]
public AutoBool StartFromZero { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("2")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleBreakStyle_MaxNumberOfBreaks")]
public int MaxNumberOfBreaks { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("25")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleBreakStyle_CollapsibleSpaceThreshold")]
public int CollapsibleSpaceThreshold { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleBreakStyle_Enabled")]
[ParenthesizePropertyNameAttribute("True")]
public bool Enabled { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleBreakStyle_BreakLineType")]
public BreakLineType BreakLineType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("1,5")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleBreakStyle_Spacing")]
public double Spacing { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleBreakStyle_LineColor")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleBreakStyle_LineWidth")]
public int LineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleBreakStyle_LineWidth")]
public ChartDashStyle LineStyle { get; public set; }
    public AxisScaleBreakStyle(Axis axis);
    public AutoBool get_StartFromZero();
    public void set_StartFromZero(AutoBool value);
    public int get_MaxNumberOfBreaks();
    public void set_MaxNumberOfBreaks(int value);
    public int get_CollapsibleSpaceThreshold();
    public void set_CollapsibleSpaceThreshold(int value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public BreakLineType get_BreakLineType();
    public void set_BreakLineType(BreakLineType value);
    public double get_Spacing();
    public void set_Spacing(double value);
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public int get_LineWidth();
    public void set_LineWidth(int value);
    public ChartDashStyle get_LineStyle();
    public void set_LineStyle(ChartDashStyle value);
    internal bool IsEnabled();
    internal bool CanUseAxisScaleBreaks();
    internal static ArrayList GetAxisSeries(Axis axis);
    private void Invalidate();
    internal void GetAxisSegmentForScaleBreaks(AxisScaleSegmentCollection axisSegments);
    private int GetStartScaleFromZeroSegmentIndex(AxisScaleSegmentCollection axisSegments);
    private void SetAxisSegmentPosition(AxisScaleSegmentCollection axisSegments);
    private void FillAxisSegmentCollection(AxisScaleSegmentCollection axisSegments);
    private bool IsExcludedSegment(ArrayList excludedSegments, int segmentIndex);
    internal Int32[] GetSeriesDataStatistics(int segmentCount, Double& minYValue, Double& maxYValue, Double& segmentSize, Double[]& segmentMaxValue, Double[]& segmentMinValue);
    internal bool GetLargestSequenseOfSegmentsWithNoPoints(Int32[] segmentPointNumber, Int32& startSegment, Int32& numberOfSegments);
}
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_AxisScaleSegment")]
internal class Microsoft.Reporting.Chart.WebForms.AxisScaleSegment : object {
    internal Axis axis;
    private double position;
    private double size;
    private double spacing;
    private double scaleMinimum;
    private double scaleMaximum;
    private double intervalOffset;
    private double interval;
    private DateTimeIntervalType intervalType;
    private DateTimeIntervalType intervalOffsetType;
    private object tag;
    private Stack oldAxisSettings;
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_Position")]
public double Position { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_Size")]
public double Size { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_Spacing")]
public double Spacing { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_ScaleMaximum")]
public double ScaleMaximum { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_ScaleMinimum")]
public double ScaleMinimum { get; public set; }
    [SRCategoryAttribute("CategoryAttributeInterval")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_Interval")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AxisIntervalValueConverter")]
public double Interval { get; public set; }
    [SRCategoryAttribute("CategoryAttributeInterval")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_IntervalOffset")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AxisIntervalValueConverter")]
public double IntervalOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttributeInterval")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_IntervalType")]
public DateTimeIntervalType IntervalType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeInterval")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_IntervalOffsetType")]
public DateTimeIntervalType IntervalOffsetType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegment_Tag")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public object Tag { get; public set; }
    public double get_Position();
    public void set_Position(double value);
    public double get_Size();
    public void set_Size(double value);
    public double get_Spacing();
    public void set_Spacing(double value);
    public double get_ScaleMaximum();
    public void set_ScaleMaximum(double value);
    public double get_ScaleMinimum();
    public void set_ScaleMinimum(double value);
    public double get_Interval();
    public void set_Interval(double value);
    public double get_IntervalOffset();
    public void set_IntervalOffset(double value);
    public DateTimeIntervalType get_IntervalType();
    public void set_IntervalType(DateTimeIntervalType value);
    public DateTimeIntervalType get_IntervalOffsetType();
    public void set_IntervalOffsetType(DateTimeIntervalType value);
    public object get_Tag();
    public void set_Tag(object value);
    internal void PaintBreakLine(ChartGraphics graph, AxisScaleSegment nextSegment);
    private Brush GetChartFillBrush(ChartGraphics graph);
    private GraphicsPath GetBreakLinePath(RectangleF breakLinePosition, bool top);
    internal RectangleF GetBreakLinePosition(ChartGraphics graph, AxisScaleSegment nextSegment);
    internal void GetScalePositionAndSize(double plotAreaSize, Double& scalePosition, Double& scaleSize);
    internal void SetTempAxisScaleAndInterval();
    internal void RestoreAxisScaleAndInterval();
}
[DefaultMemberAttribute("Item")]
[SRDescriptionAttribute("DescriptionAttributeAxisScaleSegmentCollection_AxisScaleSegmentCollection")]
internal class Microsoft.Reporting.Chart.WebForms.AxisScaleSegmentCollection : CollectionBase {
    private Axis axis;
    private AxisScaleSegment enforcedSegment;
    internal bool AllowOutOfScaleValues;
    [SRDescriptionAttribute("DescriptionAttributeAxisScaleSegmentCollection_Item")]
public AxisScaleSegment Item { get; public set; }
    internal AxisScaleSegmentCollection(Axis axis);
    public AxisScaleSegment get_Item(int index);
    public void set_Item(int index, AxisScaleSegment value);
    public void Remove(AxisScaleSegment segment);
    public int Add(AxisScaleSegment segment);
    public bool Contains(AxisScaleSegment value);
    public int IndexOf(AxisScaleSegment value);
    public void Insert(int index, AxisScaleSegment value);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    internal void EnforceSegment(AxisScaleSegment segment);
    public AxisScaleSegment FindScaleSegmentForAxisValue(double axisValue);
}
internal class Microsoft.Reporting.Chart.WebForms.AxisScrollBar : object {
    internal Axis axis;
    private bool enabled;
    private ScrollBarButtonStyles scrollBarButtonStyle;
    private double scrollBarSize;
    private int pressedButtonType;
    private Color buttonColor;
    private Color backColor;
    private Color lineColor;
    private Color buttonCurrentColor;
    private Color backCurrentColor;
    private Color lineCurrentColor;
    private bool positionInside;
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAxisScrollBar_PositionInside")]
public bool PositionInside { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAxisScrollBar_Enabled")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public ChartArea ChartArea { get; }
    [BrowsableAttribute("False")]
[BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public Axis Axis { get; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeAxisScrollBar_Buttons")]
public ScrollBarButtonStyles Buttons { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("14")]
[SRDescriptionAttribute("DescriptionAttributeAxisScrollBar_Size")]
public double Size { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeAxisScrollBar_ButtonColor")]
public Color ButtonColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeAxisScrollBar_LineColor")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxisView")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeAxisScrollBar_BackColor")]
public Color BackColor { get; public set; }
    public AxisScrollBar(Axis axis);
    internal void Initialize();
    public bool get_PositionInside();
    public void set_PositionInside(bool value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public ChartArea get_ChartArea();
    public Axis get_Axis();
    public ScrollBarButtonStyles get_Buttons();
    public void set_Buttons(ScrollBarButtonStyles value);
    public double get_Size();
    public void set_Size(double value);
    public Color get_ButtonColor();
    public void set_ButtonColor(Color value);
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    internal bool IsVisible();
    internal void Paint(ChartGraphics graph);
    private void PaintScrollBarConnectionRect(ChartGraphics graph, RectangleF scrollBarRect, int borderWidth);
    internal void PaintScrollBar3DButton(ChartGraphics graph, RectangleF buttonRect, bool pressedState, ScrollBarButtonType buttonType);
    internal RectangleF GetScrollBarButtonRect(RectangleF scrollBarClientRect, ScrollBarButtonType buttonType);
    internal RectangleF GetScrollBarRect();
    internal double GetScrollBarRelativeSize();
    private double GetDataViewPercentage();
    private double GetDataViewPositionPercentage();
    private int GetButtonsNumberAll();
    private int GetButtonsNumberTop();
    private int GetButtonsNumberBottom();
    internal SizeF GetAbsoluteSize(SizeF relative);
    internal SizeF GetRelativeSize(SizeF size);
}
internal enum Microsoft.Reporting.Chart.WebForms.AxisType : Enum {
    public int value__;
    public static AxisType Primary;
    public static AxisType Secondary;
}
internal enum Microsoft.Reporting.Chart.WebForms.BarDrawingStyle : Enum {
    public int value__;
    public static BarDrawingStyle Default;
    public static BarDrawingStyle Cylinder;
    public static BarDrawingStyle Emboss;
    public static BarDrawingStyle LightToDark;
    public static BarDrawingStyle Wedge;
}
[SRDescriptionAttribute("DescriptionAttributeBorder3DAnnotation_Border3DAnnotation")]
internal class Microsoft.Reporting.Chart.WebForms.Border3DAnnotation : RectangleAnnotation {
    private BorderSkinAttributes borderSkin;
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType4")]
public string AnnotationType { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkinAttributes")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.LegendConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public BorderSkinAttributes BorderSkin { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeChart")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
internal Chart Chart { get; internal set; }
    public virtual string get_AnnotationType();
    public BorderSkinAttributes get_BorderSkin();
    public void set_BorderSkin(BorderSkinAttributes value);
    internal virtual Chart get_Chart();
    internal virtual void set_Chart(Chart value);
    internal virtual void Paint(Chart chart, ChartGraphics graphics);
    internal virtual RectangleF GetTextSpacing(Boolean& annotationRelative);
}
internal class Microsoft.Reporting.Chart.WebForms.Borders3D.BorderTypeRegistry : object {
    private ResourceManager resourceManager;
    internal Hashtable registeredBorderTypes;
    private Hashtable createdBorderTypes;
    private IServiceContainer serviceContainer;
    public ResourceManager ResourceManager { get; }
    public BorderTypeRegistry(IServiceContainer container);
    [EditorBrowsableAttribute("1")]
public sealed virtual object GetService(Type serviceType);
    public void Register(string name, Type borderType);
    public IBorderType GetBorderType(string name);
    public ResourceManager get_ResourceManager();
}
internal class Microsoft.Reporting.Chart.WebForms.Borders3D.EmbossBorder : object {
    public float defaultRadiusSize;
    public float resolution;
    protected Single[] cornerRadius;
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
    public virtual RectangleF GetTitlePositionInBorder();
    public virtual void AdjustAreasPosition(ChartGraphics graph, RectangleF& areasRect);
    public virtual void DrawBorder(ChartGraphics graph, BorderSkinAttributes borderSkin, RectangleF rect, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle);
}
internal class Microsoft.Reporting.Chart.WebForms.Borders3D.FrameThin1Border : RaisedBorder {
    protected Single[] innerCorners;
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
    public virtual void DrawBorder(ChartGraphics graph, BorderSkinAttributes borderSkin, RectangleF rect, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle);
}
internal class Microsoft.Reporting.Chart.WebForms.Borders3D.FrameThin2Border : FrameThin1Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
}
internal class Microsoft.Reporting.Chart.WebForms.Borders3D.FrameThin3Border : FrameThin1Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
}
internal class Microsoft.Reporting.Chart.WebForms.Borders3D.FrameThin4Border : FrameThin1Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
}
internal class Microsoft.Reporting.Chart.WebForms.Borders3D.FrameThin5Border : FrameThin1Border {
    public string Name { get; }
    public virtual string get_Name();
}
internal class Microsoft.Reporting.Chart.WebForms.Borders3D.FrameThin6Border : FrameThin1Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
}
internal class Microsoft.Reporting.Chart.WebForms.Borders3D.FrameTitle1Border : FrameThin1Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
    public virtual RectangleF GetTitlePositionInBorder();
}
internal class Microsoft.Reporting.Chart.WebForms.Borders3D.FrameTitle2Border : FrameThin2Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
    public virtual RectangleF GetTitlePositionInBorder();
}
internal class Microsoft.Reporting.Chart.WebForms.Borders3D.FrameTitle3Border : FrameThin3Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
    public virtual RectangleF GetTitlePositionInBorder();
}
internal class Microsoft.Reporting.Chart.WebForms.Borders3D.FrameTitle4Border : FrameThin4Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
    public virtual RectangleF GetTitlePositionInBorder();
}
internal class Microsoft.Reporting.Chart.WebForms.Borders3D.FrameTitle5Border : FrameThin5Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
    public virtual RectangleF GetTitlePositionInBorder();
}
internal class Microsoft.Reporting.Chart.WebForms.Borders3D.FrameTitle6Border : FrameThin6Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
    public virtual RectangleF GetTitlePositionInBorder();
}
internal class Microsoft.Reporting.Chart.WebForms.Borders3D.FrameTitle7Border : FrameTitle1Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
}
internal class Microsoft.Reporting.Chart.WebForms.Borders3D.FrameTitle8Border : FrameTitle1Border {
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
}
internal interface Microsoft.Reporting.Chart.WebForms.Borders3D.IBorderType {
    public string Name { get; }
    unknown float Resolution {public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Resolution(float value);
    public abstract virtual void DrawBorder(ChartGraphics graph, BorderSkinAttributes borderSkin, RectangleF rect, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle);
    public abstract virtual void AdjustAreasPosition(ChartGraphics graph, RectangleF& areasRect);
    public abstract virtual RectangleF GetTitlePositionInBorder();
}
internal class Microsoft.Reporting.Chart.WebForms.Borders3D.RaisedBorder : SunkenBorder {
    public string Name { get; }
    public virtual string get_Name();
}
internal class Microsoft.Reporting.Chart.WebForms.Borders3D.SunkenBorder : object {
    protected float defaultRadiusSize;
    protected float outsideShadowRate;
    protected bool sunken;
    protected bool drawBottomShadow;
    protected bool drawOutsideTopLeftShadow;
    protected Single[] cornerRadius;
    protected SizeF sizeLeftTop;
    protected SizeF sizeRightBottom;
    protected bool drawScrews;
    public float resolution;
    public string Name { get; }
    unknown float Resolution {public set; }
    public virtual string get_Name();
    public virtual void set_Resolution(float value);
    public virtual RectangleF GetTitlePositionInBorder();
    public virtual void AdjustAreasPosition(ChartGraphics graph, RectangleF& areasRect);
    public virtual void DrawBorder(ChartGraphics graph, BorderSkinAttributes borderSkin, RectangleF rect, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle);
    private void DrawScrew(ChartGraphics graph, RectangleF rect);
}
[DefaultPropertyAttribute("SkinStyle")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkinAttributes_BorderSkinAttributes")]
internal class Microsoft.Reporting.Chart.WebForms.BorderSkinAttributes : object {
    internal IServiceContainer serviceContainer;
    private Color pageColor;
    private BorderSkinStyle skinStyle;
    private GradientType backGradientType;
    private Color backGradientEndColor;
    private Color backColor;
    private string backImage;
    private ChartImageWrapMode backImageMode;
    private Color backImageTranspColor;
    private ChartImageAlign backImageAlign;
    private Color borderColor;
    private int borderWidth;
    private ChartDashStyle borderStyle;
    private ChartHatchStyle backHatchStyle;
    internal object ownerElement;
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkinAttributes_PageColor")]
public Color PageColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkinAttributes_SkinStyle")]
[ParenthesizePropertyNameAttribute("True")]
public BorderSkinStyle SkinStyle { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Gray")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkinAttributes_FrameBackColor")]
public Color FrameBackColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkinAttributes_FrameBorderColor")]
public Color FrameBorderColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkinAttributes_FrameBackHatchStyle")]
public ChartHatchStyle FrameBackHatchStyle { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkinAttributes_FrameBackImage")]
public string FrameBackImage { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkinAttributes_FrameBackImageMode")]
public ChartImageWrapMode FrameBackImageMode { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkinAttributes_FrameBackImageTransparentColor")]
public Color FrameBackImageTransparentColor { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkinAttributes_FrameBackImageAlign")]
public ChartImageAlign FrameBackImageAlign { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkinAttributes_FrameBackGradientType")]
public GradientType FrameBackGradientType { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkinAttributes_FrameBackGradientEndColor")]
public Color FrameBackGradientEndColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkinAttributes_FrameBorderWidth")]
public int FrameBorderWidth { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkinAttributes_FrameBorderStyle")]
public ChartDashStyle FrameBorderStyle { get; public set; }
    internal BorderSkinAttributes(IServiceContainer container);
    private void Invalidate();
    public Color get_PageColor();
    public void set_PageColor(Color value);
    public BorderSkinStyle get_SkinStyle();
    public void set_SkinStyle(BorderSkinStyle value);
    public Color get_FrameBackColor();
    public void set_FrameBackColor(Color value);
    public Color get_FrameBorderColor();
    public void set_FrameBorderColor(Color value);
    public ChartHatchStyle get_FrameBackHatchStyle();
    public void set_FrameBackHatchStyle(ChartHatchStyle value);
    public string get_FrameBackImage();
    public void set_FrameBackImage(string value);
    public ChartImageWrapMode get_FrameBackImageMode();
    public void set_FrameBackImageMode(ChartImageWrapMode value);
    public Color get_FrameBackImageTransparentColor();
    public void set_FrameBackImageTransparentColor(Color value);
    public ChartImageAlign get_FrameBackImageAlign();
    public void set_FrameBackImageAlign(ChartImageAlign value);
    public GradientType get_FrameBackGradientType();
    public void set_FrameBackGradientType(GradientType value);
    public Color get_FrameBackGradientEndColor();
    public void set_FrameBackGradientEndColor(Color value);
    public int get_FrameBorderWidth();
    public void set_FrameBorderWidth(int value);
    public ChartDashStyle get_FrameBorderStyle();
    public void set_FrameBorderStyle(ChartDashStyle value);
}
internal enum Microsoft.Reporting.Chart.WebForms.BorderSkinStyle : Enum {
    public int value__;
    public static BorderSkinStyle None;
    public static BorderSkinStyle Emboss;
    public static BorderSkinStyle Raised;
    public static BorderSkinStyle Sunken;
    public static BorderSkinStyle FrameThin1;
    public static BorderSkinStyle FrameThin2;
    public static BorderSkinStyle FrameThin3;
    public static BorderSkinStyle FrameThin4;
    public static BorderSkinStyle FrameThin5;
    public static BorderSkinStyle FrameThin6;
    public static BorderSkinStyle FrameTitle1;
    public static BorderSkinStyle FrameTitle2;
    public static BorderSkinStyle FrameTitle3;
    public static BorderSkinStyle FrameTitle4;
    public static BorderSkinStyle FrameTitle5;
    public static BorderSkinStyle FrameTitle6;
    public static BorderSkinStyle FrameTitle7;
    public static BorderSkinStyle FrameTitle8;
}
internal enum Microsoft.Reporting.Chart.WebForms.BreakLineType : Enum {
    public int value__;
    public static BreakLineType None;
    public static BreakLineType Straight;
    public static BreakLineType Wave;
    public static BreakLineType Ragged;
}
[SRDescriptionAttribute("DescriptionAttributeCalloutAnnotation_CalloutAnnotation")]
internal class Microsoft.Reporting.Chart.WebForms.CalloutAnnotation : TextAnnotation {
    private LineAnchorCap calloutAnchorCap;
    private CalloutStyle calloutStyle;
    private static GraphicsPath cloudPath;
    private static GraphicsPath cloudOutlinePath;
    private static RectangleF cloudBounds;
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeCalloutAnnotation_CalloutStyle")]
[ParenthesizePropertyNameAttribute("True")]
public CalloutStyle CalloutStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeCalloutAnnotation_CalloutAnchorCap")]
public LineAnchorCap CalloutAnchorCap { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLineColor3")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeCalloutAnnotation_LineWidth")]
public int LineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLineStyle6")]
public ChartDashStyle LineStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeBackColor9")]
[NotifyParentPropertyAttribute("True")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCalloutAnnotation_BackHatchStyle")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCalloutAnnotation_BackGradientType")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCalloutAnnotation_BackGradientEndColor")]
public Color BackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchor")]
[DefaultValueAttribute("3")]
[SRDescriptionAttribute("DescriptionAttributeCalloutAnnotation_AnchorOffsetX")]
[RefreshPropertiesAttribute("1")]
public double AnchorOffsetX { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchor")]
[DefaultValueAttribute("3")]
[SRDescriptionAttribute("DescriptionAttributeCalloutAnnotation_AnchorOffsetY")]
[RefreshPropertiesAttribute("1")]
public double AnchorOffsetY { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchor")]
[DefaultValueAttribute("System.Drawing.ContentAlignment", "BottomLeft")]
[SRDescriptionAttribute("DescriptionAttributeAnchorAlignment")]
public ContentAlignment AnchorAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType4")]
public string AnnotationType { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ParenthesizePropertyNameAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle3")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    private static CalloutAnnotation();
    public virtual CalloutStyle get_CalloutStyle();
    public virtual void set_CalloutStyle(CalloutStyle value);
    public virtual LineAnchorCap get_CalloutAnchorCap();
    public virtual void set_CalloutAnchorCap(LineAnchorCap value);
    public virtual Color get_LineColor();
    public virtual void set_LineColor(Color value);
    public virtual int get_LineWidth();
    public virtual void set_LineWidth(int value);
    public virtual ChartDashStyle get_LineStyle();
    public virtual void set_LineStyle(ChartDashStyle value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ChartHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(ChartHatchStyle value);
    public virtual GradientType get_BackGradientType();
    public virtual void set_BackGradientType(GradientType value);
    public virtual Color get_BackGradientEndColor();
    public virtual void set_BackGradientEndColor(Color value);
    public virtual double get_AnchorOffsetX();
    public virtual void set_AnchorOffsetX(double value);
    public virtual double get_AnchorOffsetY();
    public virtual void set_AnchorOffsetY(double value);
    public virtual ContentAlignment get_AnchorAlignment();
    public virtual void set_AnchorAlignment(ContentAlignment value);
    public virtual string get_AnnotationType();
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
    internal virtual RectangleF GetTextSpacing(Boolean& annotationRelative);
    internal virtual void Paint(Chart chart, ChartGraphics graphics);
    private GraphicsPath DrawRoundedRectCallout(ChartGraphics graphics, RectangleF rectanglePosition, PointF anchorPoint, bool isEllipse);
    private GraphicsPath DrawRectangleCallout(ChartGraphics graphics, RectangleF rectanglePosition, PointF anchorPoint);
    private GraphicsPath DrawCloudCallout(ChartGraphics graphics, RectangleF rectanglePosition, PointF anchorPoint);
    private GraphicsPath DrawPerspectiveCallout(ChartGraphics graphics, RectangleF rectanglePosition, PointF anchorPoint);
    private GraphicsPath DrawRectangleLineCallout(ChartGraphics graphics, RectangleF rectanglePosition, PointF anchorPoint, bool drawRectangle);
    internal virtual bool IsAnchorDrawn();
    private static GraphicsPath GetCloudOutlinePath(RectangleF position);
    private static GraphicsPath GetCloudPath(RectangleF position);
    internal static PointF GetIntersectionY(PointF firstPoint, PointF secondPoint, float pointY);
    internal static PointF GetIntersectionX(PointF firstPoint, PointF secondPoint, float pointX);
    private void PathAddLineAsSegments(GraphicsPath path, float x1, float y1, float x2, float y2, int segments);
    private GraphicsPath CreateRoundedRectPath(RectangleF rect, float cornerRadius);
}
[SRDescriptionAttribute("DescriptionAttributeCalloutStyle_CalloutStyle")]
internal enum Microsoft.Reporting.Chart.WebForms.CalloutStyle : Enum {
    public int value__;
    public static CalloutStyle SimpleLine;
    public static CalloutStyle Borderline;
    public static CalloutStyle Cloud;
    public static CalloutStyle Rectangle;
    public static CalloutStyle RoundedRectangle;
    public static CalloutStyle Ellipse;
    public static CalloutStyle Perspective;
}
internal class Microsoft.Reporting.Chart.WebForms.CategoryNode : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    private Dictionary`2<Series, DataPoint> _dataPoints;
    private Dictionary`2<Series, Values> _values;
    private CategoryNodeCollection _parentCollection;
    [CompilerGeneratedAttribute]
private bool <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LabelToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LabelHref>k__BackingField;
    [CompilerGeneratedAttribute]
private CategoryNodeCollection <Children>k__BackingField;
    public int Index { get; private set; }
    public bool Empty { get; private set; }
    public string Label { get; private set; }
    public string ToolTip { get; public set; }
    public string Href { get; public set; }
    public string LabelToolTip { get; public set; }
    public string LabelHref { get; public set; }
    public CategoryNode Parent { get; }
    public CategoryNodeCollection Children { get; public set; }
    public CategoryNode(CategoryNodeCollection parentCollection, bool empty, string label);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(int value);
    [CompilerGeneratedAttribute]
public bool get_Empty();
    [CompilerGeneratedAttribute]
private void set_Empty(bool value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
private void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_ToolTip();
    [CompilerGeneratedAttribute]
public void set_ToolTip(string value);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
    [CompilerGeneratedAttribute]
public string get_LabelToolTip();
    [CompilerGeneratedAttribute]
public void set_LabelToolTip(string value);
    [CompilerGeneratedAttribute]
public string get_LabelHref();
    [CompilerGeneratedAttribute]
public void set_LabelHref(string value);
    public CategoryNode get_Parent();
    [CompilerGeneratedAttribute]
public CategoryNodeCollection get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(CategoryNodeCollection value);
    public void AddDataPoint(DataPoint dataPoint);
    public DataPoint GetDataPoint(Series series);
    public CategoryNode GetDataPointNode(Series series);
    public int GetDepth();
    public void CalculateIndices(Int32& dataPointIndex);
    public void CalculateValues(List`1<Series> seriesCollection);
    public double GetTotalAbsoluteValue();
    public Values GetValues(Series series);
}
internal class Microsoft.Reporting.Chart.WebForms.CategoryNodeCollection : object {
    private List`1<CategoryNode> _nodes;
    [CompilerGeneratedAttribute]
private CategoryNode <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllNodesEmpty>k__BackingField;
    public CategoryNode Parent { get; private set; }
    public bool AllNodesEmpty { get; private set; }
    public CategoryNodeCollection(CategoryNode parent);
    [CompilerGeneratedAttribute]
public CategoryNode get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(CategoryNode value);
    [CompilerGeneratedAttribute]
public bool get_AllNodesEmpty();
    [CompilerGeneratedAttribute]
private void set_AllNodesEmpty(bool value);
    public sealed virtual IEnumerator`1<CategoryNode> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Add(CategoryNode node);
    public int GetDepth();
    public void Calculate(List`1<Series> seriesCollection);
    private void CalculateValues(List`1<Series> seriesCollection);
    public void CalculateIndices(Int32& dataPointIndex);
    public double GetTotalAbsoluetValue();
    public void SortByAbsoluteValue(Series series);
    public double GetTotalAbsoluteValue(Series series);
    public bool AreAllNodesEmpty(Series series);
    public CategoryNode GetEmptyNode();
}
[LicenseProviderAttribute("System.ComponentModel.LicFileLicenseProvider")]
[DisplayNameAttribute("Dundas Chart Enterprise")]
internal class Microsoft.Reporting.Chart.WebForms.Chart : object {
    private float imageResolution;
    private string multiValueSeparator;
    private Title noDataMessage;
    private bool reverseSeriesOrder;
    private bool suppressCodeExceptions;
    private string codeException;
    internal bool ShowDebugMarkings;
    private ChartTypeRegistry chartTypeRegistry;
    private BorderTypeRegistry borderTypeRegistry;
    private CustomAttributeRegistry customAttributeRegistry;
    private DataManager dataManager;
    internal ChartImage chartPicture;
    private ImageLoader imageLoader;
    internal static ITypeDescriptorContext controlCurrentContext;
    internal string webFormDocumentURL;
    internal ServiceContainer serviceContainer;
    private EventsManager eventsManager;
    private TraceManager traceManager;
    private NamedImagesCollection namedImages;
    private FormulaRegistry formulaRegistry;
    internal static string productID;
    private License license;
    private RenderType renderType;
    private string chartImageUrl;
    internal bool serializing;
    internal SerializationStatus serializationStatus;
    private ChartSerializer chartSerializer;
    private string windowsFormsControlURL;
    private string currentChartImageUrl;
    private KeywordsRegistry keywordsRegistry;
    internal static double renderingDpiX;
    internal static double renderingDpiY;
    [CompilerGeneratedAttribute]
private PaintEventHandler PrePaint;
    [CompilerGeneratedAttribute]
private PaintEventHandler PostPaint;
    [CompilerGeneratedAttribute]
private PaintEventHandler BackPaint;
    [CompilerGeneratedAttribute]
private PaintEventHandler Paint;
    [CompilerGeneratedAttribute]
private CustomizeMapAreasEventHandler CustomizeMapAreas;
    [CompilerGeneratedAttribute]
private CustomizeEventHandler Customize;
    [CompilerGeneratedAttribute]
private CustomizeLegendEventHandler CustomizeLegend;
    private string lastUpdatedDesignTimeHtmlValue;
    public LocalizeTextHandler LocalizeTextHandler;
    public FormatNumberHandler FormatNumberHandler;
    public float ImageResolution { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeMultiValueSeparator")]
public string MultiValueSeparator { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeNoDataMessage")]
public Title NoDataMessage { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeReverseSeriesOrder")]
public bool ReverseSeriesOrder { get; public set; }
    [SRCategoryAttribute("CategoryAttributeChart")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSuppressCodeExceptions")]
[RefreshPropertiesAttribute("1")]
public bool SuppressCodeExceptions { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string CodeException { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("96")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public double RenderingDpiY { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("96")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public double RenderingDpiX { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeSuppressExceptions")]
public bool SuppressExceptions { get; public set; }
    [SRCategoryAttribute("CategoryAttributeChart")]
[BindableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeChart_Images")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public NamedImagesCollection Images { get; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChart_RenderType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
internal RenderType RenderType { get; internal set; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChart_ImageUrl")]
[DefaultValueAttribute("ChartPic_#SEQ(300,3)")]
public string ImageUrl { get; public set; }
    [CategoryAttribute("Appearance")]
[SRDescriptionAttribute("DescriptionAttribute_RightToLeft")]
[DefaultValueAttribute]
public RightToLeft RightToLeft { get; public set; }
    [SRCategoryAttribute("CategoryAttributeChart")]
[SRDescriptionAttribute("DescriptionAttributeChart_Series")]
public SeriesCollection Series { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributePalette")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartColorPalette Palette { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SerializationVisibilityAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeChart_PaletteCustomColors")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.ColorArrayConverter")]
public Color[] PaletteCustomColors { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeChart_BuildNumber")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("")]
public string BuildNumber { get; public set; }
    [SRCategoryAttribute("CategoryAttributeSerializer")]
[SRDescriptionAttribute("DescriptionAttributeChart_Serializer")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
internal ChartSerializer Serializer { get; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeChartImageType")]
[RefreshPropertiesAttribute("1")]
public ChartImageType ImageType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeChart_Compression")]
internal int Compression { get; internal set; }
    [SRCategoryAttribute("CategoryAttributeMap")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapEnabled")]
[DefaultValueAttribute("True")]
internal bool MapEnabled { get; internal set; }
    [SRCategoryAttribute("CategoryAttributeMap")]
[SRDescriptionAttribute("DescriptionAttributeMapAreas")]
public MapAreasCollection MapAreas { get; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[BrowsableAttribute("False")]
[BindableAttribute("False")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.AntiAlias", "On")]
[SRDescriptionAttribute("DescriptionAttributeAntiAlias")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
public AntiAlias AntiAlias { get; public set; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.AntiAliasingTypes", "All")]
[SRDescriptionAttribute("DescriptionAttributeAntiAlias")]
public AntiAliasingTypes AntiAliasing { get; public set; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.TextAntiAliasingQuality", "High")]
[SRDescriptionAttribute("DescriptionAttributeTextAntiAliasingQuality")]
public TextAntiAliasingQuality TextAntiAliasingQuality { get; public set; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChart_SoftShadows")]
public bool SoftShadows { get; public set; }
    [SRCategoryAttribute("CategoryAttributeChart")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartAreas")]
public ChartAreaCollection ChartAreas { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[SRDescriptionAttribute("DescriptionAttributeBackColor5")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("False")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeChart_ForeColor")]
public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("300")]
[SRDescriptionAttribute("DescriptionAttributeHeight3")]
public int Height { get; public set; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("300")]
[SRDescriptionAttribute("DescriptionAttributeWidth")]
public int Width { get; public set; }
    [SRCategoryAttribute("CategoryAttributeChart")]
[BindableAttribute("False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLegend")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.LegendConverter")]
[DesignerSerializationVisibilityAttribute("2")]
[SerializationVisibilityAttribute("0")]
[DefaultValueAttribute("")]
public Legend Legend { get; public set; }
    [SRCategoryAttribute("CategoryAttributeChart")]
[SRDescriptionAttribute("DescriptionAttributeLegends")]
public LegendCollection Legends { get; }
    [SRCategoryAttribute("CategoryAttributeChart")]
[SRDescriptionAttribute("DescriptionAttributeTitles")]
public TitleCollection Titles { get; }
    [SRCategoryAttribute("CategoryAttributeChart")]
[SRDescriptionAttribute("DescriptionAttributeAnnotations3")]
public AnnotationCollection Annotations { get; }
    [SRCategoryAttribute("CategoryAttributeData")]
[SRDescriptionAttribute("DescriptionAttributeDataManipulator")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public DataManipulator DataManipulator { get; }
    [SRCategoryAttribute("CategoryAttributeCharttitle")]
[BindableAttribute("False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeTitle5")]
[DesignerSerializationVisibilityAttribute("0")]
public string Title { get; public set; }
    [SRCategoryAttribute("CategoryAttributeCharttitle")]
[BindableAttribute("False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeTitleFontColor")]
public Color TitleFontColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeCharttitle")]
[BindableAttribute("False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRDescriptionAttribute("DescriptionAttributeTitleFont4")]
public Font TitleFont { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle9")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeBackImage3")]
[NotifyParentPropertyAttribute("True")]
public string BackImage { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackImageMode3")]
public ChartImageWrapMode BackImageMode { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackImageTransparentColor6")]
public Color BackImageTransparentColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackImageAlign")]
public ChartImageAlign BackImageAlign { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientType3")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientEndColor4")]
public Color BackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("False")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor")]
[SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("False")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeChart_BorderlineWidth")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("False")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBorderStyle8")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public ChartDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor")]
public Color BorderlineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeChart_BorderlineWidth")]
public int BorderlineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBorderStyle8")]
public ChartDashStyle BorderlineStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkinAttributes")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.LegendConverter")]
public BorderSkinAttributes BorderSkin { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("False")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeChart_Edition")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public ChartEdition Edition { get; }
    private static Chart();
    public sealed virtual void set_ImageResolution(float value);
    public sealed virtual float get_ImageResolution();
    public sealed virtual void set_MultiValueSeparator(string value);
    public sealed virtual string get_MultiValueSeparator();
    public sealed virtual Title get_NoDataMessage();
    public sealed virtual void set_NoDataMessage(Title value);
    public sealed virtual bool get_ReverseSeriesOrder();
    public sealed virtual void set_ReverseSeriesOrder(bool value);
    public sealed virtual bool get_SuppressCodeExceptions();
    public sealed virtual void set_SuppressCodeExceptions(bool value);
    public sealed virtual string get_CodeException();
    public sealed virtual void set_CodeException(string value);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void CheckImageURLSeqFormat(string imageURL);
    private string GetNewSeqImageUrl(string imageUrl);
    private void CheckChartFileTime(string fileName, int imageTimeToLive);
    public sealed virtual void Select(int x, int y, String& series, Int32& point);
    public sealed virtual HitTestResult HitTest(int x, int y);
    public sealed virtual HitTestResult HitTest(int x, int y, bool ignoreTransparent);
    public sealed virtual HitTestResult HitTest(int x, int y, ChartElementType requestedElement);
    internal HitTestResult GetHitTestResult(string seriesName, int pointIndex, ChartElementType type, object obj);
    public void Save(string imageFileName, ChartImageFormat format);
    public void Save(Stream imageStream, ChartImageFormat format);
    public void Save(Stream imageStream);
    private static ImageCodecInfo GetEncoderInfo(string mimeType);
    [CompilerGeneratedAttribute]
internal void add_PrePaint(PaintEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_PrePaint(PaintEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_PostPaint(PaintEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_PostPaint(PaintEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_BackPaint(PaintEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_BackPaint(PaintEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_Paint(PaintEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_Paint(PaintEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_CustomizeMapAreas(CustomizeMapAreasEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_CustomizeMapAreas(CustomizeMapAreasEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_Customize(CustomizeEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_Customize(CustomizeEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_CustomizeLegend(CustomizeLegendEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_CustomizeLegend(CustomizeLegendEventHandler value);
    public sealed virtual void RaisePostBackEvent(string eventArgument);
    [SRDescriptionAttribute("DescriptionAttributeChart_OnBackPaint")]
protected virtual void OnBackPaint(object caller, ChartPaintEventArgs e);
    [SRDescriptionAttribute("DescriptionAttributeChart_OnPaint")]
protected virtual void OnPaint(object caller, ChartPaintEventArgs e);
    [SRDescriptionAttribute("DescriptionAttributeChart_OnCustomizeMapAreas")]
protected virtual void OnCustomizeMapAreas(MapAreasCollection areaItems);
    [SRDescriptionAttribute("DescriptionAttributeChart_OnCustomize")]
protected virtual void OnCustomize();
    [SRDescriptionAttribute("DescriptionAttributeChart_OnCustomizeLegend")]
protected virtual void OnCustomizeLegend(LegendItemsCollection legendItems, string legendName);
    internal void CallBackPaint(object caller, ChartPaintEventArgs e);
    internal void CallPaint(object caller, ChartPaintEventArgs e);
    internal void CallCustomizeMapAreas(MapAreasCollection areaItems);
    internal void CallCustomize();
    internal void CallCustomizeLegend(LegendItemsCollection legendItems, string legendName);
    public sealed virtual void set_RenderingDpiY(double value);
    public sealed virtual double get_RenderingDpiY();
    public sealed virtual void set_RenderingDpiX(double value);
    public sealed virtual double get_RenderingDpiX();
    public sealed virtual void set_SuppressExceptions(bool value);
    public sealed virtual bool get_SuppressExceptions();
    public sealed virtual NamedImagesCollection get_Images();
    internal RenderType get_RenderType();
    internal void set_RenderType(RenderType value);
    public sealed virtual string get_ImageUrl();
    public sealed virtual void set_ImageUrl(string value);
    public RightToLeft get_RightToLeft();
    public void set_RightToLeft(RightToLeft value);
    public sealed virtual SeriesCollection get_Series();
    public sealed virtual ChartColorPalette get_Palette();
    public sealed virtual void set_Palette(ChartColorPalette value);
    public sealed virtual void set_PaletteCustomColors(Color[] value);
    public sealed virtual Color[] get_PaletteCustomColors();
    [EditorBrowsableAttribute("1")]
public sealed virtual void ResetPaletteCustomColors();
    [EditorBrowsableAttribute("1")]
public sealed virtual bool ShouldSerializePaletteCustomColors();
    public sealed virtual string get_BuildNumber();
    public sealed virtual void set_BuildNumber(string value);
    internal ChartSerializer get_Serializer();
    public sealed virtual ChartImageType get_ImageType();
    public sealed virtual void set_ImageType(ChartImageType value);
    internal int get_Compression();
    internal void set_Compression(int value);
    internal bool get_MapEnabled();
    internal void set_MapEnabled(bool value);
    public sealed virtual MapAreasCollection get_MapAreas();
    public sealed virtual AntiAlias get_AntiAlias();
    public sealed virtual void set_AntiAlias(AntiAlias value);
    public sealed virtual AntiAliasingTypes get_AntiAliasing();
    public sealed virtual void set_AntiAliasing(AntiAliasingTypes value);
    public sealed virtual TextAntiAliasingQuality get_TextAntiAliasingQuality();
    public sealed virtual void set_TextAntiAliasingQuality(TextAntiAliasingQuality value);
    public sealed virtual bool get_SoftShadows();
    public sealed virtual void set_SoftShadows(bool value);
    public sealed virtual ChartAreaCollection get_ChartAreas();
    public sealed virtual Color get_BackColor();
    public sealed virtual void set_BackColor(Color value);
    public sealed virtual Color get_ForeColor();
    public sealed virtual void set_ForeColor(Color value);
    public sealed virtual int get_Height();
    public sealed virtual void set_Height(int value);
    public sealed virtual int get_Width();
    public sealed virtual void set_Width(int value);
    public sealed virtual Legend get_Legend();
    public sealed virtual void set_Legend(Legend value);
    public sealed virtual LegendCollection get_Legends();
    public sealed virtual TitleCollection get_Titles();
    public sealed virtual AnnotationCollection get_Annotations();
    public sealed virtual DataManipulator get_DataManipulator();
    public sealed virtual string get_Title();
    public sealed virtual void set_Title(string value);
    public sealed virtual Color get_TitleFontColor();
    public sealed virtual void set_TitleFontColor(Color value);
    public sealed virtual Font get_TitleFont();
    public sealed virtual void set_TitleFont(Font value);
    public sealed virtual ChartHatchStyle get_BackHatchStyle();
    public sealed virtual void set_BackHatchStyle(ChartHatchStyle value);
    public sealed virtual string get_BackImage();
    public sealed virtual void set_BackImage(string value);
    public sealed virtual ChartImageWrapMode get_BackImageMode();
    public sealed virtual void set_BackImageMode(ChartImageWrapMode value);
    public sealed virtual Color get_BackImageTransparentColor();
    public sealed virtual void set_BackImageTransparentColor(Color value);
    public sealed virtual ChartImageAlign get_BackImageAlign();
    public sealed virtual void set_BackImageAlign(ChartImageAlign value);
    public sealed virtual GradientType get_BackGradientType();
    public sealed virtual void set_BackGradientType(GradientType value);
    public sealed virtual Color get_BackGradientEndColor();
    public sealed virtual void set_BackGradientEndColor(Color value);
    public sealed virtual Color get_BorderColor();
    public sealed virtual void set_BorderColor(Color value);
    public sealed virtual int get_BorderWidth();
    public sealed virtual void set_BorderWidth(int value);
    public sealed virtual ChartDashStyle get_BorderStyle();
    public sealed virtual void set_BorderStyle(ChartDashStyle value);
    public sealed virtual Color get_BorderlineColor();
    public sealed virtual void set_BorderlineColor(Color value);
    public sealed virtual int get_BorderlineWidth();
    public sealed virtual void set_BorderlineWidth(int value);
    public sealed virtual ChartDashStyle get_BorderlineStyle();
    public sealed virtual void set_BorderlineStyle(ChartDashStyle value);
    public sealed virtual BorderSkinAttributes get_BorderSkin();
    public sealed virtual void set_BorderSkin(BorderSkinAttributes value);
    public sealed virtual void SaveXml(string name);
    public sealed virtual void ApplyPaletteColors();
    internal bool IsDesignMode();
    public sealed virtual void ResetAutoValues();
    public sealed virtual void AlignDataPointsByAxisLabel();
    public sealed virtual void AlignDataPointsByAxisLabel(string series);
    public sealed virtual void AlignDataPointsByAxisLabel(string series, PointsSortOrder sortingOrder);
    public sealed virtual void AlignDataPointsByAxisLabel(PointsSortOrder sortingOrder);
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual ChartEdition get_Edition();
}
[DefaultPropertyAttribute("Axes")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_ChartArea")]
internal class Microsoft.Reporting.Chart.WebForms.ChartArea : ChartArea3D {
    internal Chart chart;
    private Axis[] axisArray;
    private Color backColor;
    private ChartHatchStyle backHatchStyle;
    private string backImage;
    private ChartImageWrapMode backImageMode;
    private Color backImageTranspColor;
    private ChartImageAlign backImageAlign;
    private GradientType backGradientType;
    private Color backGradientEndColor;
    private Color borderColor;
    private int borderWidth;
    private ChartDashStyle borderStyle;
    private int shadowOffset;
    private Color shadowColor;
    private ElementPosition areaPosition;
    private ElementPosition innerPlotPosition;
    private Cursor cursorX;
    private Cursor cursorY;
    internal int IterationCounter;
    private bool equallySizedAxesFont;
    internal float axesAutoFontSize;
    private string alignWithChartArea;
    private AreaAlignOrientations alignOrientation;
    private AreaAlignTypes alignType;
    private int circularSectorNumber;
    private int circularUsePolygons;
    internal bool alignmentInProcess;
    internal RectangleF originalAreaPosition;
    internal RectangleF originalInnerPlotPosition;
    internal PointF circularCenter;
    private ArrayList circularAxisList;
    internal SmartLabels smartLabels;
    private bool visible;
    [CompilerGeneratedAttribute]
private CategoryNodeCollection <CategoryNodes>k__BackingField;
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeCursor")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_CursorX")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter")]
public Cursor CursorX { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeCursor")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_CursorY")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter")]
public Cursor CursorY { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_Visible")]
[ParenthesizePropertyNameAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAlignment")]
[BindableAttribute("True")]
[DefaultValueAttribute("NotSet")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_AlignWithChartArea")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.LegendAreaNameConverter")]
public string AlignWithChartArea { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAlignment")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_AlignOrientation")]
public AreaAlignOrientations AlignOrientation { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAlignment")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_AlignType")]
public AreaAlignTypes AlignType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxes")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_Axes")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AxesArrayConverter")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public Axis[] Axes { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxis")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_AxisY")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter")]
public Axis AxisY { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxis")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_AxisX")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter")]
public Axis AxisX { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxis")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_AxisX2")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter")]
public Axis AxisX2 { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAxis")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_AxisY2")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter")]
public Axis AxisY2 { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_Position")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.ElementPosition", "Auto")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.ElementPositionConverter")]
[SerializationVisibilityAttribute("2")]
public ElementPosition Position { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_InnerPlotPosition")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.ElementPosition", "Auto")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.ElementPositionConverter")]
[SerializationVisibilityAttribute("2")]
public ElementPosition InnerPlotPosition { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_BackColor")]
[NotifyParentPropertyAttribute("True")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle9")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeBackImage15")]
[NotifyParentPropertyAttribute("True")]
public string BackImage { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_BackImageMode")]
public ChartImageWrapMode BackImageMode { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackImageTransparentColor")]
public Color BackImageTransparentColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackImageAlign")]
public ChartImageAlign BackImageAlign { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_BackGradientType")]
public GradientType BackGradientType { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_BackGradientEndColor")]
public Color BackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "128,0,0,0")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_ShadowColor")]
[NotifyParentPropertyAttribute("True")]
public Color ShadowColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_ShadowOffset")]
[NotifyParentPropertyAttribute("True")]
public int ShadowOffset { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_BorderColor")]
[NotifyParentPropertyAttribute("True")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_BorderWidth")]
[NotifyParentPropertyAttribute("True")]
public int BorderWidth { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_BorderStyle")]
[NotifyParentPropertyAttribute("True")]
public ChartDashStyle BorderStyle { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_Name")]
[NotifyParentPropertyAttribute("True")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeChartArea_EquallySizedAxesFont")]
[NotifyParentPropertyAttribute("True")]
public bool EquallySizedAxesFont { get; public set; }
    public CategoryNodeCollection CategoryNodes { get; public set; }
    internal bool CircularUsePolygons { get; }
    internal int CircularSectorsNumber { get; }
    public Cursor get_CursorX();
    public void set_CursorX(Cursor value);
    public Cursor get_CursorY();
    public void set_CursorY(Cursor value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public string get_AlignWithChartArea();
    public void set_AlignWithChartArea(string value);
    public AreaAlignOrientations get_AlignOrientation();
    public void set_AlignOrientation(AreaAlignOrientations value);
    public AreaAlignTypes get_AlignType();
    public void set_AlignType(AreaAlignTypes value);
    public Axis[] get_Axes();
    public void set_Axes(Axis[] value);
    protected bool ShouldSerializeAxes();
    public Axis get_AxisY();
    public void set_AxisY(Axis value);
    public Axis get_AxisX();
    public void set_AxisX(Axis value);
    public Axis get_AxisX2();
    public void set_AxisX2(Axis value);
    public Axis get_AxisY2();
    public void set_AxisY2(Axis value);
    public ElementPosition get_Position();
    public void set_Position(ElementPosition value);
    public ElementPosition get_InnerPlotPosition();
    public void set_InnerPlotPosition(ElementPosition value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public ChartHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(ChartHatchStyle value);
    public string get_BackImage();
    public void set_BackImage(string value);
    public ChartImageWrapMode get_BackImageMode();
    public void set_BackImageMode(ChartImageWrapMode value);
    public Color get_BackImageTransparentColor();
    public void set_BackImageTransparentColor(Color value);
    public ChartImageAlign get_BackImageAlign();
    public void set_BackImageAlign(ChartImageAlign value);
    public GradientType get_BackGradientType();
    public void set_BackGradientType(GradientType value);
    public Color get_BackGradientEndColor();
    public void set_BackGradientEndColor(Color value);
    public Color get_ShadowColor();
    public void set_ShadowColor(Color value);
    public int get_ShadowOffset();
    public void set_ShadowOffset(int value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public ChartDashStyle get_BorderStyle();
    public void set_BorderStyle(ChartDashStyle value);
    public string get_Name();
    public void set_Name(string value);
    public bool get_EquallySizedAxesFont();
    public void set_EquallySizedAxesFont(bool value);
    [CompilerGeneratedAttribute]
public void set_CategoryNodes(CategoryNodeCollection value);
    [CompilerGeneratedAttribute]
public CategoryNodeCollection get_CategoryNodes();
    internal void Invalidate(bool invalidateAreaOnly);
    internal void Restore3DAnglesAndReverseMode();
    internal void Set3DAnglesAndReverseMode();
    internal void SetTempValues();
    internal void GetTempValues();
    internal void Initialize();
    internal void ResetMinMaxFromData();
    public void Recalculate();
    internal void ReCalcInternal();
    internal void ResetAutoValues();
    internal RectangleF GetBackgroundPosition(bool withScrollBars);
    internal void SetCommon(CommonElements common);
    internal void Resize(ChartGraphics chartGraph);
    private Axis FindAxis(AxisPosition axisPosition);
    private void PreventTopBottomAxesLabelsOverlapping(Axis axis);
    private void PaintAreaBack(ChartGraphics graph, RectangleF position, bool borderOnly);
    internal void Paint(ChartGraphics graph);
    private bool IsBorderOnTopSeries();
    internal void PaintCursors(ChartGraphics graph, bool cursorOnly);
    internal ICircularChartType GetCircularChartType();
    internal void FitCircularLabels(ChartGraphics chartGraph, ElementPosition chartAreaPosition, RectangleF& plotArea, float xTitleSize, float yTitleSize);
    internal float GetCircularLabelsSize(ChartGraphics chartGraph, RectangleF areaRectAbs, RectangleF plotAreaRectAbs, SizeF titleSize);
    internal bool get_CircularUsePolygons();
    internal CircularAxisLabelsStyle GetCircularAxisLabelsStyle();
    internal int get_CircularSectorsNumber();
    private int GetCircularSectorNumber();
    internal ArrayList GetCircularAxisList();
    internal float CircularPositionToAngle(double position);
    private ArrayList GetChartTypesAndSeriesToDraw();
}
internal class Microsoft.Reporting.Chart.WebForms.ChartArea3D : ChartAreaAxes {
    private ChartArea3DStyle area3DStyle;
    internal Matrix3D matrix3D;
    internal SizeF areaSceneWallWidth;
    internal float areaSceneDepth;
    private SurfaceNames visibleSurfaces;
    private double pointsDepth;
    private double pointsGapDepth;
    internal bool reverseSeriesOrder;
    internal bool oldReverseX;
    internal bool oldReverseY;
    internal int oldYAngle;
    internal ArrayList seriesDrawingOrder;
    internal ArrayList stackGroupNames;
    internal ArrayList seriesClusters;
    [SRCategoryAttribute("CategoryAttribute3D")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeArea3DStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter")]
public ChartArea3DStyle Area3DStyle { get; public set; }
    public ChartArea3DStyle get_Area3DStyle();
    public void set_Area3DStyle(ChartArea3DStyle value);
    public void TransformPoints(Point3D[] points);
    protected void DrawArea3DScene(ChartGraphics graph, RectangleF position);
    internal bool IsBottomSceneWallVisible();
    internal bool IsMainSceneWallOnFront();
    internal bool IsSideSceneWallOnLeft();
    public float GetSeriesZPosition(Series series);
    public float GetSeriesDepth(Series series);
    private float GetArea3DSceneDepth();
    internal void GetSeriesZPositionAndDepth(Series series, Single& depth, Single& positionZ);
    internal int GetNumberOfClusters();
    internal int GetSeriesClusterIndex(Series series);
    private float GetEstimatedSceneDepth();
    internal void Estimate3DInterval(ChartGraphics graph);
    internal int GetRealYAngle();
    internal bool ShouldDrawOnSurface(SurfaceNames surfaceName, bool backLayer, bool onEdge);
    internal bool DrawPointsInReverseOrder();
    internal bool DrawPointsToCenter(COPCoordinates& coord);
    internal bool DrawSeriesToCenter();
    protected void PaintChartSeries3D(ChartGraphics graph);
    internal ArrayList GetClusterSeriesNames(string seriesName);
    private ArrayList GetSeriesDrawingOrder(bool reverseSeriesOrder);
    private int GetNumberOfStackGroups(ArrayList seriesNamesList);
    internal int GetSeriesStackGroupIndex(Series series, String& stackGroupName);
    internal ArrayList GetDataPointDrawingOrder(ArrayList seriesNamesList, IChartType chartType, bool selection, COPCoordinates coord, IComparer comparer, int mainYValueIndex, bool sideBySide);
    internal Point3D GetCenterOfProjection(COPCoordinates coord);
    private void CheckSurfaceOrientation(COPCoordinates coord, Point3D point1, Point3D point2, Boolean& xSameOrientation, Boolean& ySameOrientation, Boolean& zSameOrientation);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartArea3DStyle : object {
    private ChartArea chartArea;
    private bool enable3D;
    private bool rightAngleAxes;
    private bool clustered;
    private LightStyle light;
    private int perspective;
    private int xAngle;
    private int yAngle;
    private int wallWidth;
    private int pointDepth;
    private int pointGapDepth;
    [SRCategoryAttribute("CategoryAttribute3D")]
[BindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_Enable3D")]
[ParenthesizePropertyNameAttribute("True")]
public bool Enable3D { get; public set; }
    [SRCategoryAttribute("CategoryAttribute3D")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_RightAngleAxes")]
[RefreshPropertiesAttribute("1")]
public bool RightAngleAxes { get; public set; }
    [SRCategoryAttribute("CategoryAttribute3D")]
[BindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_Clustered")]
public bool Clustered { get; public set; }
    [SRCategoryAttribute("CategoryAttribute3D")]
[BindableAttribute("True")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.LightStyle", "Simplistic")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_Light")]
public LightStyle Light { get; public set; }
    [SRCategoryAttribute("CategoryAttribute3D")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_Perspective")]
[RefreshPropertiesAttribute("1")]
public int Perspective { get; public set; }
    [SRCategoryAttribute("CategoryAttribute3D")]
[BindableAttribute("True")]
[DefaultValueAttribute("30")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_XAngle")]
[RefreshPropertiesAttribute("1")]
public int XAngle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute3D")]
[BindableAttribute("True")]
[DefaultValueAttribute("30")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_YAngle")]
[RefreshPropertiesAttribute("1")]
public int YAngle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute3D")]
[BindableAttribute("True")]
[DefaultValueAttribute("7")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_WallWidth")]
[RefreshPropertiesAttribute("1")]
public int WallWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute3D")]
[BindableAttribute("True")]
[DefaultValueAttribute("100")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_PointDepth")]
[RefreshPropertiesAttribute("1")]
public int PointDepth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute3D")]
[BindableAttribute("True")]
[DefaultValueAttribute("100")]
[SRDescriptionAttribute("DescriptionAttributeChartArea3DStyle_PointGapDepth")]
[RefreshPropertiesAttribute("1")]
public int PointGapDepth { get; public set; }
    public ChartArea3DStyle(ChartArea chartArea);
    internal void Initialize(ChartArea chartArea);
    public bool get_Enable3D();
    public void set_Enable3D(bool value);
    public bool get_RightAngleAxes();
    public void set_RightAngleAxes(bool value);
    public bool get_Clustered();
    public void set_Clustered(bool value);
    public LightStyle get_Light();
    public void set_Light(LightStyle value);
    public int get_Perspective();
    public void set_Perspective(int value);
    public int get_XAngle();
    public void set_XAngle(int value);
    public int get_YAngle();
    public void set_YAngle(int value);
    public int get_WallWidth();
    public void set_WallWidth(int value);
    public int get_PointDepth();
    public void set_PointDepth(int value);
    public int get_PointGapDepth();
    public void set_PointGapDepth(int value);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartAreaAxes : ChartElement {
    internal Axis axisY;
    internal Axis axisX;
    internal Axis axisX2;
    internal Axis axisY2;
    internal ArrayList series;
    internal ArrayList chartTypes;
    internal string name;
    private string intervalSeriesList;
    internal double intervalData;
    internal double intervalLogData;
    internal Series intervalSeries;
    internal bool intervalSameSize;
    internal bool diffIntervalAlignmentChecked;
    internal bool stacked;
    internal bool secondYScale;
    internal bool switchValueAxes;
    internal bool requireAxes;
    internal bool chartAreaIsCurcular;
    internal bool hundredPercent;
    internal bool hundredPercentNegative;
    internal bool IsSubAxesSupported { get; }
    internal ArrayList Series { get; }
    internal ArrayList ChartTypes { get; }
    internal bool get_IsSubAxesSupported();
    internal ArrayList get_Series();
    internal ArrayList get_ChartTypes();
    internal Axis GetAxis(AxisName axisName, AxisType axisType, string subAxisName);
    internal void SetDefaultAxesValues();
    private void SetDefaultFromIndexesOrData(Axis axis, AxisType axisType);
    private void EnableAxes();
    private void Activate(Axis axis, bool active);
    private bool AllEmptyPoints();
    private void SetDefaultFromData(Axis axis);
    internal bool SeriesIntegerType(AxisName axisName, string subAxisName);
    internal bool SeriesDateTimeType(AxisName axisName, string subAxisName);
    private void GetValuesFromData(Axis axis, Double& autoMinimum, Double& autoMaximum);
    private ArrayList SplitSeriesInStackedGroups(String[] seriesNames);
    private int GetNumberOfAllPoints();
    private void SetDefaultFromIndexes(Axis axis);
    internal void SetData();
    internal void SetData(bool initializeAxes);
    internal ArrayList GetSeriesFromChartType(string chartType);
    internal ArrayList GetSeries();
    internal ArrayList GetXAxesSeries(AxisType type, string subAxisName);
    internal ArrayList GetYAxesSeries(AxisType type, string subAxisName);
    internal Series GetFirstSeries();
    internal double GetPointsInterval(bool logarithmic, double logarithmBase);
    internal double GetPointsInterval(ArrayList seriesList, bool logarithmic, double logarithmBase, bool checkSameInterval, Boolean& sameInterval);
    internal double GetPointsInterval(ArrayList seriesList, bool logarithmic, double logarithmicBase, bool checkSameInterval, Boolean& sameInterval, Series& series);
    private void GetDateInterval(double value1, double value2, Int32& monthsInteval, Int64& ticksInterval);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Chart.WebForms.ChartAreaCollection : object {
    private ArrayList array;
    private CommonElements common;
    private Chart chart;
    [SRDescriptionAttribute("DescriptionAttributeChartAreaCollection_Item")]
public ChartArea Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public int Count { get; }
    public object SyncRoot { get; }
    internal ChartAreaCollection(CommonElements common);
    public ChartArea get_Item(object parameter);
    public void set_Item(object parameter, ChartArea value);
    public int GetIndex(string name);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public ChartArea Add(string name);
    public sealed virtual int Add(object value);
    public void Insert(int index, ChartArea value);
    public sealed virtual void Insert(int index, object value);
    private string CreateName(string Name);
    private bool UniqueName(string name);
    public bool Contains(ChartArea value);
    public int IndexOf(ChartArea value);
    public int IndexOf(string name);
    public void Remove(ChartArea value);
    private void Invalidate();
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Remove(object value);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual int IndexOf(object value);
    public sealed virtual bool Contains(object value);
    public sealed virtual void Clear();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual object get_SyncRoot();
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartColorPalette : Enum {
    public int value__;
    public static ChartColorPalette None;
    public static ChartColorPalette Default;
    public static ChartColorPalette Grayscale;
    public static ChartColorPalette Excel;
    public static ChartColorPalette Light;
    public static ChartColorPalette Pastel;
    public static ChartColorPalette EarthTones;
    public static ChartColorPalette Semitransparent;
    public static ChartColorPalette Berry;
    public static ChartColorPalette Chocolate;
    public static ChartColorPalette Fire;
    public static ChartColorPalette SeaGreen;
    public static ChartColorPalette BrightPastel;
    public static ChartColorPalette Pacific;
    public static ChartColorPalette PacificLight;
    public static ChartColorPalette PacificSemiTransparent;
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartDashStyle : Enum {
    public int value__;
    public static ChartDashStyle NotSet;
    public static ChartDashStyle Dash;
    public static ChartDashStyle DashDot;
    public static ChartDashStyle DashDotDot;
    public static ChartDashStyle Dot;
    public static ChartDashStyle Solid;
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartEdition : Enum {
    public int value__;
    public static ChartEdition Professional;
    public static ChartEdition Enterprise;
}
internal abstract class Microsoft.Reporting.Chart.WebForms.ChartElement : object {
    private ElementPosition plotAreaPosition;
    private CommonElements common;
    internal static int MaxNumOfGridlines;
    private object tag;
    internal CommonElements Common { get; internal set; }
    internal ElementPosition PlotAreaPosition { get; internal set; }
    [SerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public object Tag { get; public set; }
    internal double AlignIntervalStart(double start, double intervalSize, DateTimeIntervalType type);
    internal double AlignIntervalStart(double start, double intervalSize, DateTimeIntervalType type, Series series);
    internal double AlignIntervalStart(double start, double intervalSize, DateTimeIntervalType type, Series series, bool majorInterval);
    internal double GetIntervalSize(double current, double interval, DateTimeIntervalType type);
    internal double GetIntervalSize(double current, double interval, DateTimeIntervalType type, Series series, double intervalOffset, DateTimeIntervalType intervalOffsetType, bool forceIntIndex);
    internal double GetIntervalSize(double current, double interval, DateTimeIntervalType type, Series series, double intervalOffset, DateTimeIntervalType intervalOffsetType, bool forceIntIndex, bool forceAbsInterval);
    internal static bool IndexedSeries(Series series);
    internal static bool SeriesXValuesZeros(Series series);
    internal bool IndexedSeries(String[] series);
    internal bool SeriesXValuesZeros(String[] series);
    internal CommonElements get_Common();
    internal void set_Common(CommonElements value);
    internal ElementPosition get_PlotAreaPosition();
    internal void set_PlotAreaPosition(ElementPosition value);
    public object get_Tag();
    public void set_Tag(object value);
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartElementType : Enum {
    public int value__;
    public static ChartElementType Nothing;
    public static ChartElementType DataPoint;
    public static ChartElementType Axis;
    public static ChartElementType PlottingArea;
    public static ChartElementType LegendArea;
    public static ChartElementType LegendItem;
    public static ChartElementType Gridlines;
    public static ChartElementType StripLines;
    public static ChartElementType TickMarks;
    public static ChartElementType Title;
    public static ChartElementType AxisLabels;
    public static ChartElementType AxisTitle;
    public static ChartElementType SBThumbTracker;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static ChartElementType SBSmallDecrement;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static ChartElementType SBSmallIncrement;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static ChartElementType SBLargeDecrement;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static ChartElementType SBLargeIncrement;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This item is not supported in web environment")]
public static ChartElementType SBZoomReset;
    public static ChartElementType Annotation;
    public static ChartElementType DataPointLabel;
    public static ChartElementType AxisLabelImage;
    public static ChartElementType LegendTitle;
    public static ChartElementType LegendHeader;
}
internal class Microsoft.Reporting.Chart.WebForms.ChartGraphics : ChartGraphics3D {
    internal CommonElements common;
    internal Pen pen;
    private SolidBrush solidBrush;
    private Matrix myMatrix;
    private int width;
    private int height;
    internal bool softShadows;
    private AntiAliasingTypes antiAliasing;
    internal bool IsMetafile;
    public Graphics Graphics { get; public set; }
    internal AntiAliasingTypes AntiAliasing { get; internal set; }
    internal ChartGraphics(CommonElements common);
    internal void DrawLineRel(Color color, int width, ChartDashStyle style, PointF firstPointF, PointF secondPointF);
    internal void DrawLineAbs(Color color, int width, ChartDashStyle style, PointF firstPoint, PointF secondPoint);
    internal void DrawLineRel(Color color, int width, ChartDashStyle style, PointF firstPoint, PointF secondPoint, Color shadowColor, int shadowOffset);
    internal void DrawLineAbs(Color color, int width, ChartDashStyle style, PointF firstPoint, PointF secondPoint, Color shadowColor, int shadowOffset);
    public Brush GetHatchBrush(ChartHatchStyle hatchStyle, Color backColor, Color foreColor);
    internal Brush GetTextureBrush(string name, Color backImageTranspColor, ChartImageWrapMode mode, Color backColor);
    public Brush GetGradientBrush(RectangleF rectangle, Color firstColor, Color secondColor, GradientType type);
    internal Brush GetPieGradientBrush(RectangleF rectangle, Color firstColor, Color secondColor);
    internal DashStyle GetPenStyle(ChartDashStyle style);
    public PointF[] CreateStarPolygon(RectangleF rect, int numberOfCorners);
    internal void DrawMarkerRel(PointF point, MarkerStyle markerStyle, int markerSize, Color markerColor, Color markerBorderColor, int markerBorderSize, string markerImage, Color markerImageTranspColor, int shadowSize, Color shadowColor, RectangleF imageScaleRect);
    internal void DrawMarkerAbs(PointF point, MarkerStyle markerStyle, int markerSize, Color markerColor, Color markerBorderColor, int markerBorderSize, string markerImage, Color markerImageTranspColor, int shadowSize, Color shadowColor, RectangleF imageScaleRect, bool forceAntiAlias);
    public SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat, TextOrientation textOrientation);
    internal SizeF MeasureStringRel(string text, Font font, SizeF layoutArea, StringFormat stringFormat, TextOrientation textOrientation);
    public void DrawString(string text, Font font, Brush brush, RectangleF rect, StringFormat format, TextOrientation textOrientation);
    internal void DrawStringRel(string text, Font font, Brush brush, PointF position, StringFormat format, int angle, TextOrientation textOrientation);
    internal void DrawStringRel(string text, Font font, Brush brush, RectangleF position, StringFormat format, TextOrientation textOrientation);
    internal static string GetStackedText(string text);
    internal void DrawPointLabelStringRel(CommonElements common, string text, Font font, Brush brush, RectangleF position, StringFormat format, int angle, RectangleF backPosition, Color backColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, Series series, DataPoint point, int pointIndex);
    internal void DrawPointLabelStringRel(CommonElements common, string text, Font font, Brush brush, PointF position, StringFormat format, int angle, RectangleF backPosition, Color backColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, Series series, DataPoint point, int pointIndex);
    private void DrawPointLabelBackground(CommonElements common, int angle, PointF textPosition, RectangleF backPosition, Color backColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, Series series, DataPoint point, int pointIndex);
    internal void DrawStringRel(string text, Font font, Brush brush, PointF position, StringFormat format, int angle);
    internal void DrawStringAbs(string text, Font font, Brush brush, PointF absPosition, StringFormat format, int angle);
    internal GraphicsPath GetTranformedTextRectPath(PointF center, SizeF size, int angle);
    internal void DrawLabelStringRel(Axis axis, int labelRowIndex, LabelMark labelMark, Color markColor, string text, string image, Color imageTranspColor, Font font, Brush brush, RectangleF position, StringFormat format, int angle, RectangleF boundaryRect, CustomLabel label, bool truncatedLeft, bool truncatedRight);
    private void DrawSecondRowLabelBoxMark(Axis axis, Color markColor, RectangleF absPosition, SizeF labelSize, bool truncatedLeft, bool truncatedRight, Matrix originalTransform);
    private void DrawSecondRowLabelMark(Axis axis, Color markColor, RectangleF absPosition, SizeF labelSize, LabelMark labelMark, bool truncatedLeft, bool truncatedRight, Matrix oldTransform);
    internal SizeF MeasureStringRel(string text, Font font);
    internal SizeF MeasureStringRel(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    internal Size MeasureStringAbs(string text, Font font);
    internal Size MeasureStringAbs(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    internal void DrawStringRel(string text, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    internal void DrawStringRel(string text, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format, int angle);
    internal void DrawRectangleBarStyle(BarDrawingStyle barDrawingStyle, bool isVertical, RectangleF rect, int borderWidth);
    internal void FillRectangleRel(RectangleF rectF, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, Color shadowColor, int shadowOffset, PenAlignment penAlignment, BarDrawingStyle barDrawingStyle, bool isVertical);
    internal void FillRectangleRel(RectangleF rectF, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, Color shadowColor, int shadowOffset, PenAlignment penAlignment);
    internal void FillRectangleRel(RectangleF rectF, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, Color shadowColor, int shadowOffset, PenAlignment penAlignment, bool circular, int circularSectorsCount, bool circle3D);
    internal void FillRectangleRel(RectangleF rectF, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, Color shadowColor, int shadowOffset, PenAlignment penAlignment, bool circular, int circularSectorsCount, bool circle3D, BarDrawingStyle barDrawingStyle, bool isVertical);
    public void FillRectangleShadowAbs(RectangleF rect, Color shadowColor, float shadowOffset, Color backColor);
    internal void FillRectangleShadowAbs(RectangleF rect, Color shadowColor, float shadowOffset, Color backColor, bool circular, int circularSectorsCount);
    internal GraphicsPath GetPolygonCirclePath(RectangleF position, int polygonSectorsNumber);
    internal void DrawCircleAbs(Pen pen, Brush brush, RectangleF position, int polygonSectorsNumber, bool circle3D);
    internal Brush GetSector3DBrush(Brush brush, float curentSector, float sectorSize);
    internal Color GetBrightGradientColor(Color beginColor, double position);
    internal void FillRectangleAbs(RectangleF rect, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, PenAlignment penAlignment);
    internal void DrawPathAbs(GraphicsPath path, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, PenAlignment penAlignment, int shadowOffset, Color shadowColor);
    internal void DrawPathAbs(GraphicsPath path, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, PenAlignment penAlignment);
    internal Brush CreateBrush(RectangleF rect, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor);
    public RectangleF GetRelativeRectangle(RectangleF absolute);
    public PointF GetRelativePoint(PointF absolute);
    public SizeF GetRelativeSize(SizeF size);
    public PointF GetAbsolutePoint(PointF relative);
    public RectangleF GetAbsoluteRectangle(RectangleF relative);
    public SizeF GetAbsoluteSize(SizeF relative);
    internal GraphicsPath CreateRoundedRectPath(RectangleF rect, Single[] cornerRadius);
    internal void DrawRoundedRectShadowAbs(RectangleF rect, Single[] cornerRadius, float radius, Color centerColor, Color surroundColor, float shadowScale);
    internal void Draw3DBorderRel(BorderSkinAttributes borderSkin, RectangleF rect, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle);
    internal void Draw3DBorderAbs(BorderSkinAttributes borderSkin, RectangleF absRect, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle);
    internal static PieDrawingStyle GetPieDrawingStyle(DataPoint point);
    internal void DrawPieRel(RectangleF rect, float startAngle, float sweepAngle, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, PenAlignment penAlignment, bool shadow, double shadowOffset, bool doughnut, float doughnutRadius, bool explodedShadow, PieDrawingStyle pieDrawingStyle, GraphicsPath& controlGraphicsPath);
    internal void DrawPieRel(RectangleF rect, float startAngle, float sweepAngle, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, PenAlignment penAlignment, bool shadow, double shadowOffset, bool doughnut, float doughnutRadius, bool explodedShadow, PieDrawingStyle pieDrawingStyle);
    private void DrawPieGradientEffects(PieDrawingStyle pieDrawingStyle, RectangleF position, float startAngle, float sweepAngle, float doughnutRadius, GraphicsPath doughnutPath);
    private void DrawPieSoftShadow(double shadowOffset, float startAngle, float sweepAngle, bool explodedShadow, RectangleF absRect, Color backColor);
    internal void DrawArrowRel(PointF position, ArrowOrientation orientation, ArrowsType type, Color color, int lineWidth, ChartDashStyle lineDashStyle, double shift, double size);
    private PointF[] GetArrowShape(PointF position, ArrowOrientation orientation, double shift, double size, int lineWidth, ArrowsType type, PointF& endPoint);
    internal static void Widen(GraphicsPath path, Pen pen);
    internal static BarDrawingStyle GetBarDrawingStyle(DataPoint point);
    internal RectangleF Round(RectangleF rect);
    public double GetPositionFromAxis(string chartAreaName, AxisName axis, double axisValue);
    internal void SetPictureSize(int width, int height);
    internal void Dispose();
    public Graphics get_Graphics();
    public void set_Graphics(Graphics value);
    internal AntiAliasingTypes get_AntiAliasing();
    internal void set_AntiAliasing(AntiAliasingTypes value);
    internal void SetClip(RectangleF region);
    internal void SetClipAbs(RectangleF region);
    internal void StartAnimation();
    internal void StopAnimation();
    public static Color GetGradientColor(Color beginColor, Color endColor, double relativePosition);
    private GraphicsPath GetLabelBackgroundGraphicsPath(RectangleF backPosition, int rotationAngle);
    public bool CanLabelFitInSlice(GraphicsPath sliceGraphicsPath, RectangleF labelRelativeRect, int labelRotationAngle);
    public void DrawLabelBackground(int angle, PointF textPosition, RectangleF backPosition, Color backColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle);
    public void MapCategoryNodeLabel(CommonElements common, CategoryNode node, RectangleF backPosition);
    public float GetAbsoluteWidth(float widthRelative);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartGraphics3D : ChartRenderingEngine {
    private int oppLeftBottomPoint;
    private int oppRigthTopPoint;
    internal PointF frontLinePoint1;
    internal PointF frontLinePoint2;
    internal Pen frontLinePen;
    internal void Draw3DGridLine(ChartArea area, Color color, int width, ChartDashStyle style, PointF point1, PointF point2, bool horizontal, CommonElements common, object obj);
    internal void Draw3DGridLine(ChartArea area, Color color, int width, ChartDashStyle style, PointF point1, PointF point2, bool horizontal, CommonElements common, object obj, int numberOfElements, int elementIndex);
    private void InitGridAnimation3D(CommonElements common, Point3D point, ChartGraphics graph, int numberOfElements, int index, ChartArea area, object obj);
    internal void Draw3DLine(Matrix3D matrix, Color color, int width, ChartDashStyle style, Point3D firstPoint, Point3D secondPoint, CommonElements common, object obj, ChartElementType type);
    internal void FillPieSides(ChartArea area, float xAngle, float startAngle, float sweepAngle, PointF[] points, SolidBrush brush, Pen pen, bool doughnut);
    internal void FillPieCurve(ChartArea area, DataPoint point, Brush brush, Pen pen, PointF topFirstRectPoint, PointF topSecondRectPoint, PointF bottomFirstRectPoint, PointF bottomSecondRectPoint, PointF topFirstPoint, PointF topSecondPoint, PointF bottomFirstPoint, PointF bottomSecondPoint, float startAngle, float sweepAngle, int pointIndex);
    internal void FillPieSlice(ChartArea area, DataPoint point, SolidBrush brush, Pen pen, PointF firstRectPoint, PointF firstPoint, PointF secondRectPoint, PointF secondPoint, PointF center, float startAngle, float sweepAngle, bool fill, int pointIndex);
    internal void FillDoughnutSlice(ChartArea area, DataPoint point, SolidBrush brush, Pen pen, PointF firstRectPoint, PointF firstPoint, PointF secondRectPoint, PointF secondPoint, PointF threePoint, PointF fourPoint, PointF center, float startAngle, float sweepAngle, bool fill, float doughnutRadius, int pointIndex);
    private void DrawGraphicsPath(Pen pen, GraphicsPath path);
    private float AngleCorrection(float angle, double correction, float xAngle);
    internal GraphicsPath Draw3DPolygon(ChartArea area, Matrix3D matrix, LightStyle lightStyle, SurfaceNames surfaceName, float positionZ, Color backColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, DataPoint3D firstPoint, DataPoint3D secondPoint, DataPoint3D thirdPoint, DataPoint3D fourthPoint, ArrayList points, int pointIndex, float tension, DrawingOperationTypes operationType, LineSegmentType lineSegmentType, SurfaceNames thinBorders);
    internal GraphicsPath GetSplineFlattenPath(ChartArea area, Matrix3D matrix, float positionZ, float depth, DataPoint3D firstPoint, DataPoint3D secondPoint, ArrayList points, int pointIndex, float tension, bool flatten, bool translateCoordinates, int yValueIndex);
    internal GraphicsPath Draw3DSplineSurface(ChartArea area, Matrix3D matrix, LightStyle lightStyle, SurfaceNames surfaceName, float positionZ, float depth, Color backColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, DataPoint3D firstPoint, DataPoint3D secondPoint, ArrayList points, int pointIndex, float tension, DrawingOperationTypes operationType, bool forceThinBorder, bool forceThickBorder, bool reversedSeriesOrder, bool multiSeries, int yValueIndex, bool clipInsideArea);
    internal GraphicsPath Draw3DSurface(ChartArea area, Matrix3D matrix, LightStyle lightStyle, SurfaceNames surfaceName, float positionZ, float depth, Color backColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, DataPoint3D firstPoint, DataPoint3D secondPoint, ArrayList points, int pointIndex, float tension, DrawingOperationTypes operationType, LineSegmentType lineSegmentType, bool forceThinBorder, bool forceThickBorder, bool reversedSeriesOrder, bool multiSeries, int yValueIndex, bool clipInsideArea);
    internal static int ShouldDrawLineChartSurface(ChartArea area, bool reversedSeriesOrder, SurfaceNames surfaceName, SurfaceNames boundaryRectVisibleSurfaces, Color color, ArrayList points, DataPoint3D firstPoint, DataPoint3D secondPoint, bool multiSeries, bool reversed, LineSegmentType& lineSegmentType);
    internal static DataPoint3D FindPointByIndex(ArrayList points, int index, DataPoint3D neighborDataPoint, Int32& neighborPointIndex);
    internal GraphicsPath Fill3DRectangle(RectangleF position, float positionZ, float depth, Matrix3D matrix, LightStyle lightStyle, Color backColor, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, PenAlignment penAlignment, DrawingOperationTypes operationType);
    internal GraphicsPath Fill3DRectangle(RectangleF position, float positionZ, float depth, Matrix3D matrix, LightStyle lightStyle, Color backColor, float topRightDarkening, float bottomLeftDarkening, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, PenAlignment penAlignment, BarDrawingStyle barDrawingStyle, bool veticalOrientation, DrawingOperationTypes operationType);
    private void DrawBarStyleGradients(Matrix3D matrix, BarDrawingStyle barDrawingStyle, RectangleF position, float positionZ, float depth, bool isVertical);
    internal GraphicsPath DrawMarker3D(Matrix3D matrix, LightStyle lightStyle, float positionZ, PointF point, MarkerStyle markerStyle, int markerSize, Color markerColor, Color markerBorderColor, int markerBorderSize, string markerImage, Color markerImageTranspColor, int shadowSize, Color shadowColor, RectangleF imageScaleRect, DrawingOperationTypes operationType);
    internal SurfaceNames GetVisibleSurfaces(RectangleF position, float positionZ, float depth, Matrix3D matrix);
    internal SurfaceNames GetVisibleSurfacesWithPerspective(RectangleF position, float positionZ, float depth, Matrix3D matrix);
    internal SurfaceNames GetVisibleSurfacesWithPerspective(Point3D[] cubePoints, Matrix3D matrix);
    internal static bool IsSurfaceVisible(Point3D first, Point3D second, Point3D tree);
    internal static PointF GetLinesIntersection(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);
    internal GraphicsPath Fill3DRectangleAsCylinder(RectangleF position, float positionZ, float depth, Matrix3D matrix, LightStyle lightStyle, Color backColor, float topRightDarkening, float bottomLeftDarkening, ChartHatchStyle backHatchStyle, string backImage, ChartImageWrapMode backImageMode, Color backImageTranspColor, ChartImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, PenAlignment penAlignment, bool veticalOrientation, DrawingOperationTypes operationType);
    internal void AddEllipseSegment(GraphicsPath resultPath, GraphicsPath ellipseFlattenPath, GraphicsPath oppositeEllipseFlattenPath, bool veticalOrientation, float cylinderAngle, PointF& leftSideLinePoint, PointF& rightSideLinePoint);
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartHatchStyle : Enum {
    public int value__;
    public static ChartHatchStyle None;
    public static ChartHatchStyle BackwardDiagonal;
    public static ChartHatchStyle Cross;
    public static ChartHatchStyle DarkDownwardDiagonal;
    public static ChartHatchStyle DarkHorizontal;
    public static ChartHatchStyle DarkUpwardDiagonal;
    public static ChartHatchStyle DarkVertical;
    public static ChartHatchStyle DashedDownwardDiagonal;
    public static ChartHatchStyle DashedHorizontal;
    public static ChartHatchStyle DashedUpwardDiagonal;
    public static ChartHatchStyle DashedVertical;
    public static ChartHatchStyle DiagonalBrick;
    public static ChartHatchStyle DiagonalCross;
    public static ChartHatchStyle Divot;
    public static ChartHatchStyle DottedDiamond;
    public static ChartHatchStyle DottedGrid;
    public static ChartHatchStyle ForwardDiagonal;
    public static ChartHatchStyle Horizontal;
    public static ChartHatchStyle HorizontalBrick;
    public static ChartHatchStyle LargeCheckerBoard;
    public static ChartHatchStyle LargeConfetti;
    public static ChartHatchStyle LargeGrid;
    public static ChartHatchStyle LightDownwardDiagonal;
    public static ChartHatchStyle LightHorizontal;
    public static ChartHatchStyle LightUpwardDiagonal;
    public static ChartHatchStyle LightVertical;
    public static ChartHatchStyle NarrowHorizontal;
    public static ChartHatchStyle NarrowVertical;
    public static ChartHatchStyle OutlinedDiamond;
    public static ChartHatchStyle Percent05;
    public static ChartHatchStyle Percent10;
    public static ChartHatchStyle Percent20;
    public static ChartHatchStyle Percent25;
    public static ChartHatchStyle Percent30;
    public static ChartHatchStyle Percent40;
    public static ChartHatchStyle Percent50;
    public static ChartHatchStyle Percent60;
    public static ChartHatchStyle Percent70;
    public static ChartHatchStyle Percent75;
    public static ChartHatchStyle Percent80;
    public static ChartHatchStyle Percent90;
    public static ChartHatchStyle Plaid;
    public static ChartHatchStyle Shingle;
    public static ChartHatchStyle SmallCheckerBoard;
    public static ChartHatchStyle SmallConfetti;
    public static ChartHatchStyle SmallGrid;
    public static ChartHatchStyle SolidDiamond;
    public static ChartHatchStyle Sphere;
    public static ChartHatchStyle Trellis;
    public static ChartHatchStyle Vertical;
    public static ChartHatchStyle Wave;
    public static ChartHatchStyle Weave;
    public static ChartHatchStyle WideDownwardDiagonal;
    public static ChartHatchStyle WideUpwardDiagonal;
    public static ChartHatchStyle ZigZag;
}
internal class Microsoft.Reporting.Chart.WebForms.ChartImage : ChartPicture {
    private int compression;
    private object dataSource;
    internal bool boundToDataSource;
    private ChartImageType imageType;
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeDataSource")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public object DataSource { get; public set; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeImageType")]
public ChartImageType ImageType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeChartImage_Compression")]
public int Compression { get; public set; }
    public ChartImage(IServiceContainer container);
    public object get_DataSource();
    public void set_DataSource(object value);
    public ChartImageType get_ImageType();
    public void set_ImageType(ChartImageType value);
    public int get_Compression();
    public void set_Compression(int value);
    public void SaveIntoMetafile(Stream imageStream, EmfType emfType);
    public Bitmap GetImage(float resolution);
    public void GetSvgImage(XmlTextWriter svgTextWriter, string documentTitle, bool resizable, bool preserveAspectRatio);
    internal static bool IsValidDataSource(object dataSource);
    internal static ArrayList GetDataSourceMemberNames(object dataSource, bool usedForYValue);
    internal void DataBind();
    internal void DataBind(IEnumerable dataSource, ArrayList seriesList);
    internal void AlignDataPointsByAxisLabel(bool sortAxisLabels, PointsSortOrder sortingOrder);
    internal void AlignDataPointsByAxisLabel(ArrayList seriesList, bool sortAxisLabels, PointsSortOrder sortingOrder);
    internal void DataBindCrossTab(IEnumerable dataSource, string seriesGroupByField, string xField, string yFields, string otherFields, bool sort, PointsSortOrder sortingOrder);
    internal void DataBindTable(IEnumerable dataSource, string xField);
    internal static bool CheckLicense();
    private static bool CheckLicense(string keyName, string fileName);
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartImageAlign : Enum {
    public int value__;
    public static ChartImageAlign TopLeft;
    public static ChartImageAlign Top;
    public static ChartImageAlign TopRight;
    public static ChartImageAlign Right;
    public static ChartImageAlign BottomRight;
    public static ChartImageAlign Bottom;
    public static ChartImageAlign BottomLeft;
    public static ChartImageAlign Left;
    public static ChartImageAlign Center;
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartImageFormat : Enum {
    public int value__;
    public static ChartImageFormat Jpeg;
    public static ChartImageFormat Png;
    public static ChartImageFormat Bmp;
    public static ChartImageFormat Emf;
    public static ChartImageFormat EmfPlus;
    public static ChartImageFormat EmfDual;
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartImageType : Enum {
    public int value__;
    public static ChartImageType Bmp;
    public static ChartImageType Jpeg;
    public static ChartImageType Png;
    public static ChartImageType Emf;
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartImageWrapMode : Enum {
    public int value__;
    public static ChartImageWrapMode Scaled;
    public static ChartImageWrapMode Tile;
    public static ChartImageWrapMode TileFlipX;
    public static ChartImageWrapMode TileFlipXY;
    public static ChartImageWrapMode TileFlipY;
    public static ChartImageWrapMode Unscaled;
}
internal class Microsoft.Reporting.Chart.WebForms.ChartLicense : License {
    private ChartLicenseProvider owner;
    private string key;
    public string LicenseKey { get; }
    public ChartLicense(ChartLicenseProvider owner, string key);
    public virtual string get_LicenseKey();
    public virtual void Dispose();
}
internal class Microsoft.Reporting.Chart.WebForms.ChartLicenseProvider : LicenseProvider {
    protected virtual bool IsKeyValid(string key, Type type);
    private string GetNic();
    public bool CheckKey(string key, Type type);
    public virtual License GetLicense(LicenseContext context, Type type, object instance, bool allowExceptions);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartPaintEventArgs : EventArgs {
    private ChartGraphics chartGraph;
    private CommonElements common;
    private Chart chart;
    private ElementPosition position;
    public ChartGraphics ChartGraphics { get; }
    internal CommonElements CommonElements { get; }
    public ElementPosition Position { get; }
    internal Chart Chart { get; }
    public ChartPaintEventArgs(ChartGraphics chartGraph, CommonElements common, ElementPosition position);
    public ChartGraphics get_ChartGraphics();
    internal CommonElements get_CommonElements();
    public ElementPosition get_Position();
    internal Chart get_Chart();
}
internal class Microsoft.Reporting.Chart.WebForms.ChartPicture : object {
    private bool suppressExceptions;
    internal ChartGraphics chartGraph;
    internal bool backgroundRestored;
    private IServiceContainer serviceContainer;
    private ChartAreaCollection chartAreas;
    internal Legend legend;
    private Color titleFontColor;
    internal static FontCache fontCache;
    private Font titleFont;
    internal CommonElements common;
    private GradientType backGradientType;
    private Color backGradientEndColor;
    private Color backColor;
    private string backImage;
    private ChartImageWrapMode backImageMode;
    private Color backImageTranspColor;
    private ChartImageAlign backImageAlign;
    private Color borderColor;
    private int borderWidth;
    private ChartDashStyle borderStyle;
    private ChartHatchStyle backHatchStyle;
    private AntiAlias antiAlias;
    private AntiAliasingTypes antiAliasing;
    private TextAntiAliasingQuality textAntiAliasingQuality;
    private bool softShadows;
    private int width;
    private int height;
    private DataManipulator dataManipulator;
    internal HotRegionsList hotRegionsList;
    private BorderSkinAttributes borderSkin;
    private bool mapEnabled;
    private MapAreasCollection mapAreas;
    private LegendCollection legends;
    private TitleCollection titles;
    private AnnotationCollection annotations;
    internal AnnotationSmartLabels annotationSmartLabels;
    [CompilerGeneratedAttribute]
private PaintEventHandler BeforePaint;
    [CompilerGeneratedAttribute]
private PaintEventHandler AfterPaint;
    internal bool showWaterMark;
    private RectangleF titlePosition;
    internal static float elementSpacing;
    internal static float maxTitleSize;
    internal float legendMaxAutoSize;
    internal bool isPrinting;
    internal bool isSavingAsImage;
    internal bool isSelectionMode;
    private static string defaultFontFamilyName;
    private RectangleF chartBorderPosition;
    private SelectionManager selectorManager;
    private RightToLeft rightToLeft;
    [DefaultValueAttribute]
public RightToLeft RightToLeft { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeSuppressExceptions")]
internal bool SuppressExceptions { get; internal set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBorderSkinAttributes")]
public BorderSkinAttributes BorderSkinAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMap")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapEnabled")]
[DefaultValueAttribute("True")]
public bool MapEnabled { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMap")]
[SRDescriptionAttribute("DescriptionAttributeMapAreas")]
public MapAreasCollection MapAreas { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartAreas")]
public ChartAreaCollection ChartAreas { get; }
    [SRCategoryAttribute("CategoryAttributeChart")]
[SRDescriptionAttribute("DescriptionAttributeLegends")]
public LegendCollection Legends { get; }
    [SRCategoryAttribute("CategoryAttributeCharttitle")]
[SRDescriptionAttribute("DescriptionAttributeTitles")]
public TitleCollection Titles { get; }
    [SRCategoryAttribute("CategoryAttributeChart")]
[SRDescriptionAttribute("DescriptionAttributeAnnotations3")]
public AnnotationCollection Annotations { get; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("White")]
[SRDescriptionAttribute("DescriptionAttributeBackColor5")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("White")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("300")]
[SRDescriptionAttribute("DescriptionAttributeWidth")]
public int Width { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeLegend")]
public Legend Legend { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[SRDescriptionAttribute("DescriptionAttributeDataManipulator")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public DataManipulator DataManipulator { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("300")]
[SRDescriptionAttribute("DescriptionAttributeHeight3")]
public int Height { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeTitle5")]
public string Title { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Black")]
[SRDescriptionAttribute("DescriptionAttributeTitleFontColor")]
public Color TitleFontColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRDescriptionAttribute("DescriptionAttributeTitleFont4")]
public Font TitleFont { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle9")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeBackImage16")]
[NotifyParentPropertyAttribute("True")]
public string BackImage { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackImageMode3")]
public ChartImageWrapMode BackImageMode { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackImageTransparentColor6")]
public Color BackImageTransparentColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackImageAlign")]
public ChartImageAlign BackImageAlign { get; public set; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSoftShadows3")]
public bool SoftShadows { get; public set; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[BrowsableAttribute("False")]
[BindableAttribute("False")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.AntiAlias", "On")]
[EditorBrowsableAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeAntiAlias")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public AntiAlias AntiAlias { get; public set; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.AntiAliasingTypes", "All")]
[SRDescriptionAttribute("DescriptionAttributeAntiAlias")]
public AntiAliasingTypes AntiAliasing { get; public set; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.TextAntiAliasingQuality", "High")]
[SRDescriptionAttribute("DescriptionAttributeTextAntiAliasingQuality")]
public TextAntiAliasingQuality TextAntiAliasingQuality { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientType3")]
public GradientType BackGradientType { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientEndColor4")]
public Color BackGradientEndColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeChart_BorderlineWidth")]
public int BorderWidth { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBorderStyle8")]
public ChartDashStyle BorderStyle { get; public set; }
    internal SelectionManager SelectorManager { get; }
    internal bool IsSelectorManagerEnabled { get; }
    public ChartPicture(IServiceContainer container);
    private static ChartPicture();
    [CompilerGeneratedAttribute]
internal void add_BeforePaint(PaintEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_BeforePaint(PaintEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_AfterPaint(PaintEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_AfterPaint(PaintEventHandler value);
    internal void Initialize(Chart chart);
    [EditorBrowsableAttribute("1")]
public sealed virtual object GetService(Type serviceType);
    internal void Dispose();
    public void Select(int x, int y, ChartElementType requestedElement, bool ignoreTransparent, String& series, Int32& point, ChartElementType& type, Object& obj);
    public void Select(int x, int y, ChartElementType requestedElement, bool ignoreTransparent, String& series, Int32& point, ChartElementType& type, Object& obj, Object& subObj);
    public void Select(int x, int y, String& series, Int32& point);
    public void Paint(Graphics graph, bool paintTopLevelElementOnly);
    internal TextRenderingHint GetTextRenderingHint();
    public void Paint(Graphics graph, bool paintTopLevelElementOnly, RenderingType renderingType, XmlTextWriter svgTextWriter, Stream flashStream, string documentTitle, bool resizable, bool preserveAspectRatio);
    private void DrawTitle(ChartGraphics graph);
    private void DrawTitle(ChartGraphics graph, bool selectionMode, int x, int y, Object& obj);
    protected virtual void OnBeforePaint(ChartPaintEventArgs e);
    protected virtual void OnAfterPaint(ChartPaintEventArgs e);
    public void Resize(ChartGraphics chartGraph);
    public void Resize(ChartGraphics chartGraph, bool calcAreaPositionOnly);
    internal void ResetMinMaxFromData();
    public void Recalculate();
    public RightToLeft get_RightToLeft();
    public void set_RightToLeft(RightToLeft value);
    internal void set_SuppressExceptions(bool value);
    internal bool get_SuppressExceptions();
    public BorderSkinAttributes get_BorderSkinAttributes();
    public void set_BorderSkinAttributes(BorderSkinAttributes value);
    public bool get_MapEnabled();
    public void set_MapEnabled(bool value);
    public MapAreasCollection get_MapAreas();
    public ChartAreaCollection get_ChartAreas();
    public LegendCollection get_Legends();
    public TitleCollection get_Titles();
    public AnnotationCollection get_Annotations();
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public int get_Width();
    public void set_Width(int value);
    public Legend get_Legend();
    public void set_Legend(Legend value);
    public DataManipulator get_DataManipulator();
    public int get_Height();
    public void set_Height(int value);
    public string get_Title();
    public void set_Title(string value);
    public Color get_TitleFontColor();
    public void set_TitleFontColor(Color value);
    public Font get_TitleFont();
    public void set_TitleFont(Font value);
    public ChartHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(ChartHatchStyle value);
    public string get_BackImage();
    public void set_BackImage(string value);
    public ChartImageWrapMode get_BackImageMode();
    public void set_BackImageMode(ChartImageWrapMode value);
    public Color get_BackImageTransparentColor();
    public void set_BackImageTransparentColor(Color value);
    public ChartImageAlign get_BackImageAlign();
    public void set_BackImageAlign(ChartImageAlign value);
    public bool get_SoftShadows();
    public void set_SoftShadows(bool value);
    public AntiAlias get_AntiAlias();
    public void set_AntiAlias(AntiAlias value);
    public AntiAliasingTypes get_AntiAliasing();
    public void set_AntiAliasing(AntiAliasingTypes value);
    public TextAntiAliasingQuality get_TextAntiAliasingQuality();
    public void set_TextAntiAliasingQuality(TextAntiAliasingQuality value);
    public GradientType get_BackGradientType();
    public void set_BackGradientType(GradientType value);
    public Color get_BackGradientEndColor();
    public void set_BackGradientEndColor(Color value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public ChartDashStyle get_BorderStyle();
    public void set_BorderStyle(ChartDashStyle value);
    private bool IsAreasAlignmentRequired();
    private ArrayList GetAlignedAreasGroup(ChartArea masterArea, AreaAlignTypes type, AreaAlignOrientations orientation);
    internal void AlignChartAreas(AreaAlignTypes type);
    private void AlignChartAreasPlotPosition(ArrayList areasGroup, AreaAlignOrientations orientation);
    private void AlignChartAreasPosition();
    internal void AlignChartAreasCursor(ChartArea changedArea, AreaAlignOrientations orientation, bool selectionChanged);
    internal void AlignChartAreasZoomed(ChartArea changedArea, AreaAlignOrientations orientation, bool disposeBufferBitmap);
    internal void AlignChartAreasAxesView(ChartArea changedArea, AreaAlignOrientations orientation);
    internal bool IsRightToLeft();
    internal static string GetDefaultFontFamilyName();
    public void LoadTemplate(string name);
    public void LoadTemplate(Stream stream);
    private Stream LoadTemplateData(string url);
    internal void WriteChartMapTag(TextWriter output, string mapName);
    internal Title GetDefaultTitle(bool create);
    private bool IsToolTipsEnabled();
    internal SelectionManager get_SelectorManager();
    internal bool get_IsSelectorManagerEnabled();
}
internal class Microsoft.Reporting.Chart.WebForms.ChartRenderingEngine : object {
    internal bool shadowDrawingMode;
    private RenderingType activeRenderingType;
    private SvgChartGraphics svgGraphics;
    private GdiGraphics gdiGraphics;
    private string documentTitle;
    internal IChartRenderingEngine RenderingObject { get; }
    internal RenderingType ActiveRenderingType { get; internal set; }
    public TextRenderingHint TextRenderingHint { get; public set; }
    public Matrix Transform { get; public set; }
    public SmoothingMode SmoothingMode { get; public set; }
    public Region Clip { get; public set; }
    public bool IsClipEmpty { get; }
    public Graphics Graphics { get; public set; }
    public sealed virtual void DrawLine(Pen pen, PointF pt1, PointF pt2);
    public sealed virtual void DrawLine(Pen pen, float x1, float y1, float x2, float y2);
    public sealed virtual void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr);
    public sealed virtual void DrawEllipse(Pen pen, float x, float y, float width, float height);
    public sealed virtual void DrawCurve(Pen pen, PointF[] points, int offset, int numberOfSegments, float tension);
    public sealed virtual void DrawRectangle(Pen pen, int x, int y, int width, int height);
    public sealed virtual void DrawPolygon(Pen pen, PointF[] points);
    public sealed virtual void DrawString(string s, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    public sealed virtual void DrawString(string s, Font font, Brush brush, PointF point, StringFormat format);
    public sealed virtual void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs);
    public sealed virtual void DrawRectangle(Pen pen, float x, float y, float width, float height);
    public sealed virtual void DrawPath(Pen pen, GraphicsPath path);
    public sealed virtual void DrawPie(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual void DrawArc(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual void DrawImage(Image image, RectangleF rect);
    public sealed virtual void DrawEllipse(Pen pen, RectangleF rect);
    public sealed virtual void DrawLines(Pen pen, PointF[] points);
    public sealed virtual void FillEllipse(Brush brush, RectangleF rect);
    public sealed virtual void FillPath(Brush brush, GraphicsPath path);
    public sealed virtual void FillRegion(Brush brush, Region region);
    public sealed virtual void FillRectangle(Brush brush, RectangleF rect);
    public sealed virtual void FillRectangle(Brush brush, float x, float y, float width, float height);
    public sealed virtual void FillPolygon(Brush brush, PointF[] points);
    public sealed virtual void FillPie(Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public void Open(XmlTextWriter svgWriter, Size pictureSize, SvgOpenParameters extraParameters);
    public void SetGradient(Color firstColor, Color secondColor, GradientType gradientType);
    public void Close();
    internal void StartHotRegion(string href, string title);
    internal void StartHotRegion(DataPoint point);
    internal void StartHotRegion(DataPoint point, bool labelRegion);
    internal void EndHotRegion();
    public sealed virtual SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    public sealed virtual SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat, Int32& charactersFitted, Int32& linesFilled);
    public sealed virtual SizeF MeasureString(string text, Font font);
    public sealed virtual GraphicsState Save();
    public sealed virtual void Restore(GraphicsState gstate);
    public sealed virtual void ResetClip();
    public sealed virtual void SetClip(RectangleF rect);
    public void SetTitle(string title);
    public sealed virtual void SetClip(GraphicsPath path, CombineMode combineMode);
    public sealed virtual void TranslateTransform(float dx, float dy);
    public sealed virtual void BeginSelection(string hRef, string title);
    public sealed virtual void EndSelection();
    internal IChartRenderingEngine get_RenderingObject();
    internal RenderingType get_ActiveRenderingType();
    internal void set_ActiveRenderingType(RenderingType value);
    public sealed virtual TextRenderingHint get_TextRenderingHint();
    public sealed virtual void set_TextRenderingHint(TextRenderingHint value);
    public sealed virtual Matrix get_Transform();
    public sealed virtual void set_Transform(Matrix value);
    public sealed virtual SmoothingMode get_SmoothingMode();
    public sealed virtual void set_SmoothingMode(SmoothingMode value);
    public sealed virtual Region get_Clip();
    public sealed virtual void set_Clip(Region value);
    public sealed virtual bool get_IsClipEmpty();
    public sealed virtual Graphics get_Graphics();
    public sealed virtual void set_Graphics(Graphics value);
}
[SRDescriptionAttribute("DescriptionAttributeChartSerializer_ChartSerializer")]
[DefaultPropertyAttribute("Format")]
internal class Microsoft.Reporting.Chart.WebForms.ChartSerializer : object {
    private IServiceContainer serviceContainer;
    private Chart chart;
    private SerializerBase serializer;
    private SerializationFormat format;
    private SerializationContents content;
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.SerializationContents", "Default")]
[SRDescriptionAttribute("DescriptionAttributeChartSerializer_Content")]
public SerializationContents Content { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.SerializationFormat", "Xml")]
[SRDescriptionAttribute("DescriptionAttributeChartSerializer_Format")]
public SerializationFormat Format { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeChartSerializer_ResetWhenLoading")]
public bool ResetWhenLoading { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeChartSerializer_IgnoreUnknownXmlAttributes")]
public bool IgnoreUnknownXmlAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeChartSerializer_TemplateMode")]
public bool TemplateMode { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeChartSerializer_SerializableContent")]
public string SerializableContent { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeChartSerializer_NonSerializableContent")]
public string NonSerializableContent { get; public set; }
    public ChartSerializer(IServiceContainer container);
    [EditorBrowsableAttribute("1")]
public sealed virtual object GetService(Type serviceType);
    public SerializationContents get_Content();
    public void set_Content(SerializationContents value);
    public SerializationFormat get_Format();
    public void set_Format(SerializationFormat value);
    public bool get_ResetWhenLoading();
    public void set_ResetWhenLoading(bool value);
    public bool get_IgnoreUnknownXmlAttributes();
    public void set_IgnoreUnknownXmlAttributes(bool value);
    public bool get_TemplateMode();
    public void set_TemplateMode(bool value);
    public string get_SerializableContent();
    public void set_SerializableContent(string value);
    public string get_NonSerializableContent();
    public void set_NonSerializableContent(string value);
    public void Reset();
    public void Save(string fileName);
    public void Save(Stream stream);
    public void Save(XmlWriter writer);
    public void Save(TextWriter writer);
    public void Load(string fileName);
    public void Load(Stream stream);
    public void Load(XmlReader reader);
    public void Load(TextReader reader);
    protected void SetSerializableContentFromFlags();
    protected string GetFlagContentString(SerializationContents flag, bool serializable);
    internal Chart GetChartObject();
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.AreaChart : SplineChart {
    protected bool gradientFill;
    protected GraphicsPath areaPath;
    protected Series series;
    protected PointF axisPos;
    public string Name { get; }
    public bool ZeroCrossing { get; }
    protected virtual float GetDefaultTension();
    public virtual string get_Name();
    public virtual bool get_ZeroCrossing();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual Image GetImage(ChartTypeRegistry registry);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawLine(ChartGraphics graph, CommonElements common, DataPoint point, Series series, PointF[] points, int pointIndex, float tension);
    private void FillLastSeriesGradient(ChartGraphics graph);
    protected virtual bool IsLineTensionSupported();
    protected virtual GraphicsPath Draw3DSurface(ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, float topDarkening, float bottomDarkening, PointF thirdPointPosition, PointF fourthPointPosition, bool clippedSegment);
    protected virtual GraphicsPath Draw3DSurface(DataPoint3D firstPoint, DataPoint3D secondPoint, bool reversed, ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, LineSegmentType surfaceSegmentType, float topDarkening, float bottomDarkening, PointF thirdPointPosition, PointF fourthPointPosition, bool clippedSegment, bool clipOnTop, bool clipOnBottom);
    protected virtual void GetTopSurfaceVisibility(ChartArea area, DataPoint3D firstPoint, DataPoint3D secondPoint, bool upSideDown, float positionZ, float depth, Matrix3D matrix, SurfaceNames& visibleSurfaces);
    internal DataPoint3D GetAxisIntersection(DataPoint3D firstPoint, DataPoint3D secondPoint, float axisPosition);
    protected virtual void GetBottomPointsPosition(CommonElements common, ChartArea area, float axisPosition, DataPoint3D& firstPoint, DataPoint3D& secondPoint, PointF thirdPointPosition, PointF fourthPointPosition, PointF& thirdPoint, PointF& fourthPoint);
    protected virtual int GetPointLoopNumber(bool selection, ArrayList pointsArray);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.BarChart : object {
    protected bool useTwoValues;
    protected bool drawSeriesSideBySide;
    protected BarValueLabelDrawingStyle defLabelDrawingStyle;
    protected bool pointLabelsMarkersPresent;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool ZeroCrossing { get; }
    public bool DataPointsInLegend { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public int YValuesPerPoint { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public sealed virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public sealed virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public sealed virtual bool get_SupportLogarithmicAxes();
    public sealed virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_ZeroCrossing();
    public sealed virtual bool get_DataPointsInLegend();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public sealed virtual bool get_ApplyPaletteColorsToPoints();
    public sealed virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public sealed virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private void ProcessChartType(bool labels, bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private void DrawLabelsAndMarkers(ChartArea area, Axis hAxis, ChartGraphics graph, CommonElements common, RectangleF rectSize, DataPoint point, Series ser, double barStartPosition, double barSize, double width, int pointIndex, Int32& markerIndex);
    private void SetHotRegions(CommonElements common, ChartGraphics graph, DataPoint point, SizeF markerSize, string seriesName, int pointIndex, MarkerStyle pointMarkerStyle, PointF markerPosition);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    internal double GetEmptyPointValue(DataPoint point, int pointIndex, int yValueIndex);
    private void ProcessChartType3D(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private void DrawMarkers3D(ChartArea area, Axis hAxis, ChartGraphics graph, CommonElements common, RectangleF rectSize, DataPoint3D pointEx, Series ser, double barStartPosition, double barSize, double width, int pointIndex);
    private void DrawLabels3D(ChartArea area, Axis hAxis, ChartGraphics graph, CommonElements common, RectangleF rectSize, DataPoint3D pointEx, Series ser, double barStartPosition, double barSize, double width, int pointIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.BarPointsDrawingOrderComparer : object {
    private ChartArea area;
    private Point3D areaProjectionCenter;
    private bool selection;
    public BarPointsDrawingOrderComparer(ChartArea area, bool selection, COPCoordinates coord);
    public sealed virtual int Compare(object o1, object o2);
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartTypes.BarValueLabelDrawingStyle : Enum {
    public int value__;
    public static BarValueLabelDrawingStyle Outside;
    public static BarValueLabelDrawingStyle Left;
    public static BarValueLabelDrawingStyle Center;
    public static BarValueLabelDrawingStyle Right;
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.BoxPlotChart : object {
    protected Axis vAxis;
    protected Axis hAxis;
    protected bool showSideBySide;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public sealed virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawBoxPlotMarks(ChartGraphics graph, ChartArea area, Series ser, DataPoint point, float xPosition, float width);
    private void DrawBoxPlotSingleMarker(ChartGraphics graph, ChartArea area, DataPoint point, string markerStyle, float xPosition, float yPosition, float zPosition, float width, bool draw3D);
    protected virtual SizeF GetMarkerSize(ChartGraphics graph, CommonElements common, ChartArea area, DataPoint point, int markerSize, string markerImage);
    protected virtual void DrawLabel(CommonElements common, ChartArea area, ChartGraphics graph, Series ser, DataPoint point, PointF position, int pointIndex);
    protected virtual void ProcessChartType3D(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawBoxPlotMarks3D(ChartGraphics graph, ChartArea area, Series ser, DataPoint point, float xPosition, float width, float zPosition, float depth);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    internal static void CalculateBoxPlotFromLinkedSeries(Series boxPlotSeries, IServiceContainer serviceContainer);
    private static void CalculateBoxPlotValues(DataPoint& boxPoint, Series linkedSeries, string valueName);
    private static void BoxPlotAddUnusual(DataPoint& boxPoint, Double[] yValues);
    private static Double[] CalculatePercentileValues(Double[] yValues, Double[] requiredPercentile);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.BubbleChart : PointChart {
    private bool scaleDetected;
    private double maxPossibleBubbleSize;
    private double minPossibleBubbleSize;
    private float maxBubleSize;
    private float minBubleSize;
    private double minAll;
    private double maxAll;
    private double valueDiff;
    private double valueScale;
    public string Name { get; }
    public int YValuesPerPoint { get; }
    public bool SecondYScale { get; }
    public virtual string get_Name();
    public virtual int get_YValuesPerPoint();
    public virtual bool get_SecondYScale();
    public virtual Image GetImage(ChartTypeRegistry registry);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual int GetMarkerBorderSize(DataPointAttributes point);
    protected virtual SizeF GetMarkerSize(ChartGraphics graph, CommonElements common, ChartArea area, DataPoint point, int markerSize, string markerImage);
    private float ScaleBubbleSize(ChartGraphics graph, CommonElements common, ChartArea area, double value);
    internal static double AxisScaleBubbleSize(ChartGraphics graph, CommonElements common, ChartArea area, double value, bool yValue);
    internal static double GetBubbleMaxSize(ChartArea area);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.CandleStickChart : StockChart {
    public string Name { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
}
internal static class Microsoft.Reporting.Chart.WebForms.ChartTypes.ChartTypeNames : object {
    internal static string Area;
    internal static string Gantt;
    internal static string Bar;
    internal static string SplineArea;
    internal static string BoxPlot;
    internal static string Bubble;
    internal static string Column;
    internal static string RangeColumn;
    internal static string Doughnut;
    internal static string ErrorBar;
    internal static string FastLine;
    internal static string FastPoint;
    internal static string Funnel;
    internal static string Pyramid;
    internal static string Kagi;
    internal static string Spline;
    internal static string Line;
    internal static string PointAndFigure;
    internal static string Pie;
    internal static string Point;
    internal static string Polar;
    internal static string Radar;
    internal static string SplineRange;
    internal static string Range;
    internal static string Renko;
    internal static string OneHundredPercentStackedArea;
    internal static string StackedArea;
    internal static string OneHundredPercentStackedBar;
    internal static string StackedBar;
    internal static string OneHundredPercentStackedColumn;
    internal static string StackedColumn;
    internal static string StepLine;
    internal static string Candlestick;
    internal static string Stock;
    internal static string ThreeLineBreak;
    internal static string TreeMap;
    internal static string Sunburst;
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.ChartTypeRegistry : object {
    private ResourceManager resourceManager;
    internal Hashtable registeredChartTypes;
    private Hashtable createdChartTypes;
    private IServiceContainer serviceContainer;
    public ResourceManager ResourceManager { get; }
    public ChartTypeRegistry(IServiceContainer container);
    [EditorBrowsableAttribute("1")]
public sealed virtual object GetService(Type serviceType);
    public void Register(string name, Type chartType);
    public IChartType GetChartType(SeriesChartType chartType);
    public IChartType GetChartType(string name);
    public ResourceManager get_ResourceManager();
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.ColumnChart : PointChart {
    private double shiftedX;
    private string shiftedSerName;
    protected bool useTwoValues;
    protected bool drawSeriesSideBySide;
    protected COPCoordinates coordinates;
    public string Name { get; }
    public bool Stacked { get; }
    public bool RequireAxes { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public int YValuesPerPoint { get; }
    public bool ZeroCrossing { get; }
    public double ShiftedX { get; public set; }
    public string ShiftedSerName { get; public set; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual bool get_Stacked();
    public virtual bool get_RequireAxes();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual bool get_ZeroCrossing();
    public virtual double get_ShiftedX();
    public virtual void set_ShiftedX(double value);
    public virtual string get_ShiftedSerName();
    public virtual void set_ShiftedSerName(string value);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private void ProcessChartType(bool labels, bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawColumn2D(ChartGraphics graph, Axis vAxis, RectangleF rectSize, DataPoint point, Series ser);
    protected virtual LabelAlignmentTypes GetAutoLabelPosition(Series series, int pointIndex);
    protected virtual bool ShouldDrawMarkerOnViewEdgeX();
    private void ProcessChartType3D(bool labels, bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private void Init3DAnimation(CommonElements common, RectangleF position, float positionZ, float depth, Matrix3D matrix, ChartGraphics graph, bool negativeValue, DataPoint point);
    protected virtual void DrawLabel(ChartArea area, ChartGraphics graph, CommonElements common, RectangleF columnPosition, DataPoint point, Series ser, int pointIndex);
    protected virtual void ProcessSinglePoint3D(DataPoint3D pointEx, bool selection, ChartGraphics graph, CommonElements common, ChartArea area, RectangleF columnPosition, int pointIndex);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.DoughnutChart : PieChart {
    public string Name { get; }
    public bool Stacked { get; }
    public bool RequireAxes { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool ZeroCrossing { get; }
    public bool DataPointsInLegend { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public int YValuesPerPoint { get; }
    public bool Doughnut { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual bool get_Stacked();
    public virtual bool get_RequireAxes();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual bool get_Doughnut();
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.ErrorBarChart : object {
    protected Axis vAxis;
    protected Axis hAxis;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public sealed virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawErrorBarMarks(ChartGraphics graph, ErrorBarStyle barStyle, ChartArea area, Series ser, DataPoint point, float xPosition, float width);
    private void DrawErrorBarSingleMarker(ChartGraphics graph, ChartArea area, DataPoint point, string markerStyle, float xPosition, float yPosition, float zPosition, float width, bool draw3D);
    protected virtual SizeF GetMarkerSize(ChartGraphics graph, CommonElements common, ChartArea area, DataPoint point, int markerSize, string markerImage);
    protected virtual void DrawLabel(CommonElements common, ChartArea area, ChartGraphics graph, Series ser, DataPoint point, PointF position, int pointIndex);
    protected virtual void ProcessChartType3D(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawErrorBarMarks3D(ChartGraphics graph, ErrorBarStyle barStyle, ChartArea area, Series ser, DataPoint point, float xPosition, float width, float zPosition, float depth);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    internal static void CalculateErrorAmount(Series errorBarSeries);
    internal static double DefaultErrorBarTypeValue(ErrorBarType errorBarType);
    internal static void GetDataFromLinkedSeries(Series errorBarSeries, IServiceContainer serviceContainer);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartTypes.ErrorBarStyle : Enum {
    public int value__;
    public static ErrorBarStyle Both;
    public static ErrorBarStyle UpperError;
    public static ErrorBarStyle LowerError;
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartTypes.ErrorBarType : Enum {
    public int value__;
    public static ErrorBarType FixedValue;
    public static ErrorBarType Percentage;
    public static ErrorBarType StandardDeviation;
    public static ErrorBarType StandardError;
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.FastLineChart : object {
    internal bool chartArea3DEnabled;
    internal ChartGraphics graph;
    internal float seriesZCoordinate;
    internal Matrix3D matrix3D;
    internal CommonElements common;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    public virtual void DrawLine(Series series, DataPoint point, DataPoint pointMin, DataPoint pointMax, int pointIndex, Pen pen, float firstPointX, float firstPointY, float secondPointX, float secondPointY);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.FastPointChart : object {
    internal bool chartArea3DEnabled;
    internal ChartGraphics graph;
    internal float seriesZCoordinate;
    internal Matrix3D matrix3D;
    internal CommonElements common;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawMarker(ChartGraphics graph, DataPoint point, int pointIndex, PointF location, MarkerStyle markerStyle, int markerSize, Brush brush, Pen borderPen);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartTypes.Funnel3DDrawingStyle : Enum {
    public int value__;
    public static Funnel3DDrawingStyle CircularBase;
    public static Funnel3DDrawingStyle SquareBase;
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.FunnelChart : object {
    protected ArrayList segmentList;
    protected ArrayList labelInfoList;
    protected ChartGraphics graph;
    protected ChartArea area;
    protected CommonElements common;
    protected RectangleF plotAreaSpacing;
    private Series chartTypeSeries;
    protected double yValueTotal;
    private double yValueMax;
    private double xValueTotal;
    protected int pointNumber;
    protected RectangleF plotAreaPosition;
    private FunnelStyle funnelStyle;
    private SizeF funnelNeckSize;
    protected float funnelSegmentGap;
    private int rotation3D;
    protected bool round3DShape;
    protected bool isPyramid;
    private float funnelMinPointHeight;
    protected string funnelPointGapAttributeName;
    protected string funnelRotationAngleAttributeName;
    protected string funnelPointMinHeight;
    protected string funnel3DDrawingStyleAttributeName;
    protected string funnelInsideLabelAlignmentAttributeName;
    protected string funnelOutsideLabelPlacementAttributeName;
    protected string funnelLabelStyleAttributeName;
    private Double[] valuePercentages;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private void ProcessChartType();
    protected virtual void GetPointWidthAndHeight(Series series, int pointIndex, float location, Single& height, Single& startWidth, Single& endWidth);
    protected virtual bool ShouldDrawFirstPoint();
    private void DrawFunnel3DSquareSegment(DataPoint point, int pointIndex, float startWidth, float endWidth, float location, float height, bool nothingOnTop, bool nothingOnBottom, bool drawSegment, bool drawSegmentShadow);
    private void DrawFunnelCircularSegment(DataPoint point, int pointIndex, float startWidth, float endWidth, float location, float height, bool nothingOnTop, bool nothingOnBottom, bool drawSegment, bool drawSegmentShadow);
    private ArrayList GetFunnelSegmentPositions();
    private void DrawLabels();
    private ArrayList CreateLabelsInfoList();
    private bool FitPointLabels();
    private void GetLabelsPosition();
    private bool IsLabelsOverlap(FunnelPointLabelInfo testLabelInfo);
    private FunnelLabelStyle GetLabelStyle(DataPointAttributes attributes);
    private void GetPlotAreaSpacing();
    private RectangleF GetPlotAreaPosition();
    protected float CheckMinHeight(float height);
    private void GetFunnelMinPointHeight(DataPointAttributes attributes);
    private int GetFunnelRotation(DataPointAttributes attributes);
    private Color GetCalloutLineColor(DataPointAttributes attributes);
    private SizeF GetFunnelNeckSize(DataPointAttributes attributes);
    private float GetFunnelPointGap(DataPointAttributes attributes);
    private FunnelStyle GetFunnelStyle(DataPointAttributes attributes);
    private FunnelLabelPlacement GetOutsideLabelPlacement(DataPointAttributes attributes);
    private FunnelLabelVerticalAlignment GetInsideLabelAlignment(DataPointAttributes attributes);
    private Funnel3DDrawingStyle GetFunnel3DDrawingStyle(DataPointAttributes attributes);
    private void GetDataPointValuesStatistic();
    private Series GetDataSeries();
    private PyramidValueType GetPyramidValueType(DataPointAttributes attributes);
    public virtual double GetYValue(DataPoint point, int pointIndex);
    public virtual double GetXValue(DataPoint point);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartTypes.FunnelLabelPlacement : Enum {
    public int value__;
    public static FunnelLabelPlacement Right;
    public static FunnelLabelPlacement Left;
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartTypes.FunnelLabelStyle : Enum {
    public int value__;
    public static FunnelLabelStyle Inside;
    public static FunnelLabelStyle Outside;
    public static FunnelLabelStyle OutsideInColumn;
    public static FunnelLabelStyle Disabled;
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartTypes.FunnelLabelVerticalAlignment : Enum {
    public int value__;
    public static FunnelLabelVerticalAlignment Center;
    public static FunnelLabelVerticalAlignment Top;
    public static FunnelLabelVerticalAlignment Bottom;
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.FunnelPointLabelInfo : object {
    public DataPoint Point;
    public int PointIndex;
    public string Text;
    public SizeF Size;
    public RectangleF Position;
    public FunnelLabelStyle Style;
    public StringFormat Format;
    public FunnelLabelVerticalAlignment VerticalAlignment;
    public FunnelLabelPlacement OutsidePlacement;
    public PointF CalloutPoint1;
    public PointF CalloutPoint2;
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.FunnelSegmentInfo : object {
    public DataPoint Point;
    public int PointIndex;
    public float Location;
    public float Height;
    public float StartWidth;
    public float EndWidth;
    public bool NothingOnTop;
    public bool NothingOnBottom;
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartTypes.FunnelStyle : Enum {
    public int value__;
    public static FunnelStyle YIsHeight;
    public static FunnelStyle YIsWidth;
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.GanttChart : BarChart {
    public string Name { get; }
    public bool ZeroCrossing { get; }
    public int YValuesPerPoint { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public virtual string get_Name();
    public virtual bool get_ZeroCrossing();
    public virtual int get_YValuesPerPoint();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.HundredPercentStackedAreaChart : StackedAreaChart {
    private Double[] totalPerPoint;
    public string Name { get; }
    public bool HundredPercent { get; }
    public virtual string get_Name();
    public virtual bool get_HundredPercent();
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.HundredPercentStackedBarChart : StackedBarChart {
    private Hashtable stackedGroupsTotalPerPoint;
    public string Name { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public virtual string get_Name();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.HundredPercentStackedColumnChart : StackedColumnChart {
    private Hashtable stackedGroupsTotalPerPoint;
    public string Name { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public virtual string get_Name();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
}
internal interface Microsoft.Reporting.Chart.WebForms.ChartTypes.IChartType {
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool ZeroCrossing { get; }
    public int YValuesPerPoint { get; }
    public bool SecondYScale { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public abstract virtual string get_Name();
    public abstract virtual Image GetImage(ChartTypeRegistry registry);
    public abstract virtual bool get_Stacked();
    public abstract virtual bool get_SupportStackedGroups();
    public abstract virtual bool get_StackSign();
    public abstract virtual bool get_RequireAxes();
    public abstract virtual bool get_CircularChartArea();
    public abstract virtual bool get_SupportLogarithmicAxes();
    public abstract virtual bool get_SwitchValueAxes();
    public abstract virtual bool get_SideBySideSeries();
    public abstract virtual bool get_DataPointsInLegend();
    public abstract virtual bool get_ApplyPaletteColorsToPoints();
    public abstract virtual bool get_ExtraYValuesConnectedToYAxis();
    public abstract virtual bool get_ZeroCrossing();
    public abstract virtual int get_YValuesPerPoint();
    public abstract virtual bool get_SecondYScale();
    public abstract virtual bool get_HundredPercent();
    public abstract virtual bool get_HundredPercentSupportNegative();
    public abstract virtual LegendImageStyle GetLegendImageStyle(Series series);
    public abstract virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    public abstract virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    public abstract virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
}
internal interface Microsoft.Reporting.Chart.WebForms.ChartTypes.ICircularChartType {
    public abstract virtual bool RequireClosedFigure();
    public abstract virtual bool XAxisCrossingSupported();
    public abstract virtual bool XAxisLabelsSupported();
    public abstract virtual bool RadialGridLinesSupported();
    public abstract virtual int GetNumerOfSectors(ChartArea area, SeriesCollection seriesCollection);
    public abstract virtual Single[] GetYAxisLocations(ChartArea area);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.KagiChart : StepLineChart {
    internal bool kagiChart;
    internal Color kagiUpColor;
    internal int currentKagiDirection;
    public string Name { get; }
    internal static void PrepareData(Series series, IServiceContainer serviceContainer);
    internal static bool UnPrepareData(Series series, IServiceContainer serviceContainer);
    private static double GetReversalAmount(Series series, Series originalData, int yValueIndex, Double& percentOfPrice);
    private static void FillKagiData(Series series, Series originalData);
    protected virtual void DrawLine(ChartGraphics graph, CommonElements common, DataPoint point, Series series, PointF[] points, int pointIndex, float tension);
    protected virtual PointF[] GetPointsPosition(ChartGraphics graph, Series series, bool indexedSeries);
    protected virtual GraphicsPath Draw3DSurface(ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, float topDarkening, float bottomDarkening, PointF thirdPointPosition, PointF fourthPointPosition, bool clippedSegment);
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.LineChart : PointChart {
    protected float lineTension;
    protected int centerPointIndex;
    protected bool useBorderColor;
    protected bool disableShadow;
    protected bool drawShadowOnly;
    private Pen linePen;
    protected double hAxisMin;
    protected double hAxisMax;
    protected double vAxisMin;
    protected double vAxisMax;
    protected bool clipRegionSet;
    protected bool multiSeries;
    protected COPCoordinates COPCoordinatesToCheck;
    protected int allPointsLoopsNumber;
    protected bool showPointLines;
    protected bool drawOutsideLines;
    private bool processBaseChart;
    public string Name { get; }
    public bool Stacked { get; }
    public bool RequireAxes { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool ZeroCrossing { get; }
    public bool DataPointsInLegend { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public int YValuesPerPoint { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual bool get_Stacked();
    public virtual bool get_RequireAxes();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawLine(ChartGraphics graph, CommonElements common, DataPoint point, Series series, PointF[] points, int pointIndex, float tension);
    private void DrawTruncatedLine(ChartGraphics graph, Pen pen, PointF pt1, PointF pt2);
    internal static PointF GetIntersectionY(PointF firstPoint, PointF secondPoint, float pointY);
    internal static PointF GetIntersectionX(PointF firstPoint, PointF secondPoint, float pointX);
    protected void DrawLine(ChartGraphics graph, DataPoint point, Series series, PointF firstPoint, PointF secondPoint);
    protected virtual bool IsLineTensionSupported();
    private void Init2DAnimation(CommonElements common, DataPoint point, int index, double xValue, double xValuePrev, ChartGraphics graph, PointF[] dataPointPos);
    protected virtual float GetDefaultTension();
    protected virtual LabelAlignmentTypes GetAutoLabelPosition(Series series, int pointIndex);
    protected virtual PointF[] GetPointsPosition(ChartGraphics graph, Series series, bool indexedSeries);
    protected void ProcessLineChartType3D(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private void Init3DAnimation(CommonElements common, double xValuePrev, double xValue, double yValuePrev, double yValue, Axis vAxis, Axis hAxis, DataPoint3D pointAttr, ChartGraphics graph, DataPoint point, Series series);
    protected virtual GraphicsPath Draw3DSurface(ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, float topDarkening, float bottomDarkening, PointF thirdPointPosition, PointF fourthPointPosition, bool clippedSegment);
    protected int GetCenterPointIndex(ArrayList points);
    protected virtual int GetPointLoopNumber(bool selection, ArrayList pointsArray);
    protected bool ClipTopPoints(GraphicsPath resultPath, DataPoint3D& firstPoint, DataPoint3D& secondPoint, bool reversed, ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, LineSegmentType surfaceSegmentType, float topDarkening, float bottomDarkening);
    protected bool ClipBottomPoints(GraphicsPath resultPath, DataPoint3D& firstPoint, DataPoint3D& secondPoint, PointF& thirdPoint, PointF& fourthPoint, bool reversed, ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, LineSegmentType surfaceSegmentType, float topDarkening, float bottomDarkening);
    protected virtual GraphicsPath Draw3DSurface(DataPoint3D firstPoint, DataPoint3D secondPoint, bool reversed, ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, LineSegmentType surfaceSegmentType, float topDarkening, float bottomDarkening, PointF thirdPointPosition, PointF fourthPointPosition, bool clippedSegment, bool clipOnTop, bool clipOnBottom);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.PieChart : object {
    private bool labelsFit;
    private float sizeCorrection;
    private bool sliceExploded;
    private bool labelsOverlap;
    internal LabelColumn labelColumnLeft;
    internal LabelColumn labelColumnRight;
    private ArrayList labelsRectangles;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool ZeroCrossing { get; }
    public bool DataPointsInLegend { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public int YValuesPerPoint { get; }
    public bool Doughnut { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual bool get_Doughnut();
    internal static void PrepareData(Series series, IServiceContainer serviceContainer);
    internal static bool UnPrepareData(Series series, IServiceContainer serviceContainer);
    public sealed virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private double MinimumRelativePieSize(ChartArea area);
    private void SizeCorrection(ChartGraphics graph, CommonElements common, ChartArea area);
    private void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, bool shadow, LabelsMode labels, Series seriesToDraw);
    public void DrawLabels(ChartGraphics graph, PointF middlePoint, SizeF relativeSize, float startAngle, float sweepAngle, DataPoint point, float doughnutRadius, bool exploded, ChartArea area, bool overlapTest, int pointIndex, Color pieLineColor);
    private RectangleF GetLabelRect(PointF labelPosition, ChartArea area, string text, StringFormat format, ChartGraphics graph, DataPoint point, bool leftOrientation);
    private PieLabelStyle GetLabelStyle(DataPoint point);
    public bool EstimateLabels(ChartGraphics graph, PointF middlePoint, SizeF relativeSize, float startAngle, float sweepAngle, DataPoint point, float doughnutRadius, bool exploded, ChartArea area);
    public static bool CreateMapAreaPath(float startAngle, float sweepAngle, RectangleF rectangle, bool doughnut, float doughnutRadius, ChartGraphics graph, GraphicsPath& path, Single[]& coord);
    public static void Map(CommonElements common, DataPoint point, float startAngle, float sweepAngle, RectangleF rectangle, bool doughnut, float doughnutRadius, ChartGraphics graph, int pointIndex);
    private void CheckPaleteColors(DataPointCollection points);
    private bool PrepareLabels(RectangleF area);
    private void SortIntervals(Double[] startOfIntervals, Double[] endOfIntervals, Int32[] positinIndex);
    private void InsertOverlapLabel(RectangleF labelRect);
    private bool ArrangeOverlappingIntervals(Double[] startOfIntervals, Double[] endOfIntervals, double startArea, double endArea);
    private void ReduceEmptySpace(Double[] startOfIntervals, Double[] endOfIntervals, double reduction);
    private void ShiftIntervals(Double[] startOfIntervals, Double[] endOfIntervals, double startArea, double endArea);
    private void ShiftOverlappingIntervals(Double[] startOfIntervals, Double[] endOfIntervals);
    private void SpreadInterval(Double[] startOfIntervals, Double[] endOfIntervals, int splitIndex, double overlapShift);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    private void ProcessChartType3D(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, bool shadow, LabelsMode labels, Series seriesToDraw, float pieWidth);
    private void Draw3DPie(int turn, ChartGraphics graph, DataPoint point, ChartArea area, RectangleF rectangle, float startAngle, float sweepAngle, float doughnutRadius, float pieWidth, bool selection, Boolean& isSelected, bool sameBackFront, bool exploded, int pointIndex);
    private PointF[] GetPiePoints(ChartGraphics graph, ChartArea area, float pieWidth, RectangleF rectangle, float startAngle, float sweepAngle, bool relativeCoordinates, float doughnutRadius, bool exploded);
    private void DrawPieCurves(ChartGraphics graph, ChartArea area, DataPoint dataPoint, float startAngle, float sweepAngle, PointF[] points, SolidBrush brushWithoutLight, Pen pen, bool rightPosition, bool sameBackFront, int pointIndex);
    private bool DrawPieCurvesBigSlice(ChartGraphics graph, ChartArea area, DataPoint dataPoint, float startAngle, float sweepAngle, PointF[] points, Brush brush, Pen pen, bool rightPosition, bool sameBackFront, int pointIndex);
    private void DrawDoughnutCurves(ChartGraphics graph, ChartArea area, DataPoint dataPoint, float startAngle, float sweepAngle, PointF[] points, SolidBrush brushWithoutLight, Pen pen, bool rightPosition, bool sameBackFront, int pointIndex);
    private bool DrawDoughnutCurvesBigSlice(ChartGraphics graph, ChartArea area, DataPoint dataPoint, float startAngle, float sweepAngle, PointF[] points, Brush brush, Pen pen, bool rightPosition, bool sameBackFront, int pointIndex);
    private DataPoint[] PointOrder(Series series, ChartArea area, Single[]& newStartAngleList, Single[]& newSweepAngleList, Int32[]& newPointIndexList, Boolean& sameBackFrontPoint);
    private void SwitchPoints(int numOfPoints, DataPoint[]& points, Single[]& newStartAngleList, Single[]& newSweepAngleList, Int32[]& newPointIndexList, bool sameBackFront);
    private void InitPieSize(ChartGraphics graph, ChartArea area, RectangleF& pieRectangle, Single& pieWidth, DataPoint[] dataPoints, Single[] startAngleList, Single[] sweepAngleList, Int32[] pointIndexList, Series series, float labelLineSize);
    private void FillPieLabelOutside(ChartGraphics graph, ChartArea area, RectangleF pieRectangle, float pieWidth, DataPoint point, float startAngle, float sweepAngle, int pointIndx, float doughnutRadius, bool exploded);
    private void Draw3DOutsideLabels(ChartGraphics graph, ChartArea area, Pen pen, PointF[] points, DataPoint point, float midAngle, int pointIndex);
    private void Draw3DInsideLabels(ChartGraphics graph, PointF[] points, DataPoint point, int pointIndex);
    private static string GetPointLabel(DataPoint point, bool alwaysIncludeAxisLabel);
    internal static string GetLabelText(DataPoint point, bool alwaysIncludeAxisLabel);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartTypes.PieLabelStyle : Enum {
    public int value__;
    public static PieLabelStyle Inside;
    public static PieLabelStyle Outside;
    public static PieLabelStyle Disabled;
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.PointAndFigureChart : RangeColumnChart {
    private static bool customizeSubscribed;
    public string Name { get; }
    private static PointAndFigureChart();
    internal static void PrepareData(Series series, IServiceContainer serviceContainer);
    internal static bool UnPrepareData(Series series, IServiceContainer serviceContainer);
    private static void GetPriceRange(Series originalData, int yValueHighIndex, int yValueLowIndex, Double& minPrice, Double& maxPrice);
    private static double GetBoxSize(Series series, Series originalData, int yValueHighIndex, int yValueLowIndex, double minPrice, double maxPrice);
    private static double GetReversalAmount(Series series, Series originalData, int yValueHighIndex, int yValueLowIndex, double minPrice, double maxPrice);
    private static void FillPointAndFigureData(Series series, Series originalData);
    private static void OnCustomize(object sender, EventArgs e);
    protected virtual void DrawColumn2D(ChartGraphics graph, Axis vAxis, RectangleF rectSize, DataPoint point, Series ser);
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.PointChart : object {
    internal bool alwaysDrawMarkers;
    internal int yValueIndex;
    internal int labelYValueIndex;
    internal bool autoLabelPosition;
    internal LabelAlignmentTypes labelPosition;
    internal Axis vAxis;
    internal Axis hAxis;
    internal bool indexedSeries;
    internal CommonElements common;
    internal ChartArea area;
    internal bool middleMarker;
    internal ArrayList label3DInfoList;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    public double ShiftedX { get; public set; }
    public string ShiftedSerName { get; public set; }
    public PointChart(bool alwaysDrawMarkers);
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawPointMarker(ChartGraphics graph, Series series, DataPoint dataPoint, PointF point, MarkerStyle markerStyle, int markerSize, Color markerColor, Color markerBorderColor, int markerBorderSize, string markerImage, Color markerImageTransparentColor, int shadowSize, Color shadowColor, RectangleF imageScaleRect);
    private void SetHotRegions(CommonElements common, ChartGraphics graph, DataPoint point, SizeF markerSize, string seriesName, int pointIndex, MarkerStyle pointMarkerStyle, PointF markerPosition);
    private void DrawLabels(ChartArea area, ChartGraphics graph, CommonElements common, PointF markerPosition, int markerSize, DataPoint point, Series ser, int pointIndex);
    internal static RectangleF GetLabelPosition(ChartGraphics graph, PointF position, SizeF size, StringFormat format, bool adjustForDrawing);
    protected virtual void ProcessChartType3D(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    internal void ProcessSinglePoint3D(DataPoint3D pointEx, bool selection, ChartGraphics graph, CommonElements common, ChartArea area);
    internal void DrawAccumulated3DLabels(ChartGraphics graph, CommonElements common, ChartArea area);
    protected virtual bool ShouldDrawMarkerOnViewEdgeX();
    protected virtual int GetMarkerBorderSize(DataPointAttributes point);
    protected virtual LabelAlignmentTypes GetAutoLabelPosition(Series series, int pointIndex);
    protected virtual SizeF GetMarkerSize(ChartGraphics graph, CommonElements common, ChartArea area, DataPoint point, int markerSize, string markerImage);
    public virtual double get_ShiftedX();
    public virtual void set_ShiftedX(double value);
    public virtual string get_ShiftedSerName();
    public virtual void set_ShiftedSerName(string value);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    internal double GetEmptyPointValue(DataPoint point, int pointIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.PolarChart : RadarChart {
    public string Name { get; }
    public virtual string get_Name();
    public virtual bool RequireClosedFigure();
    public virtual bool XAxisCrossingSupported();
    public virtual bool XAxisLabelsSupported();
    public virtual bool RadialGridLinesSupported();
    public virtual int GetNumerOfSectors(ChartArea area, SeriesCollection seriesCollection);
    public virtual Single[] GetYAxisLocations(ChartArea area);
    protected virtual RadarDrawingStyle GetDrawingStyle(Series ser, DataPoint point);
    protected virtual PointF[] GetPointsPosition(ChartGraphics graph, ChartArea area, Series series);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.PyramidChart : FunnelChart {
    public string Name { get; }
    public virtual string get_Name();
    protected virtual void GetPointWidthAndHeight(Series series, int pointIndex, float location, Single& height, Single& startWidth, Single& endWidth);
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartTypes.PyramidValueType : Enum {
    public int value__;
    public static PyramidValueType Linear;
    public static PyramidValueType Surface;
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.RadarChart : object {
    protected CommonElements common;
    protected ChartArea area;
    protected bool autoLabelPosition;
    protected LabelAlignmentTypes labelPosition;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual bool RequireClosedFigure();
    public virtual bool XAxisCrossingSupported();
    public virtual bool XAxisLabelsSupported();
    public virtual bool RadialGridLinesSupported();
    public virtual int GetNumerOfSectors(ChartArea area, SeriesCollection seriesCollection);
    public virtual Single[] GetYAxisLocations(ChartArea area);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    internal void AddSelectionPath(ChartArea area, GraphicsPath selectionPath, PointF[] dataPointPos, int firstPointIndex, int secondPointIndex, PointF centerPoint, int borderWidth);
    private PointF GetMiddlePoint(PointF p1, PointF p2);
    protected virtual SizeF GetMarkerSize(ChartGraphics graph, CommonElements common, ChartArea area, DataPoint point, int markerSize, string markerImage);
    protected virtual PointF[] GetPointsPosition(ChartGraphics graph, ChartArea area, Series series);
    internal void DrawLabels(ChartArea area, ChartGraphics graph, CommonElements common, PointF markerPosition, int markerSize, DataPoint point, Series ser, int pointIndex);
    protected virtual LabelAlignmentTypes GetAutoLabelPosition(ChartArea area, Series series, int pointIndex);
    protected virtual RadarDrawingStyle GetDrawingStyle(Series ser, DataPoint point);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    internal double GetEmptyPointValue(DataPoint point, int pointIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartTypes.RadarDrawingStyle : Enum {
    public int value__;
    public static RadarDrawingStyle Area;
    public static RadarDrawingStyle Line;
    public static RadarDrawingStyle Marker;
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.RangeChart : SplineChart {
    protected bool gradientFill;
    protected GraphicsPath areaBottomPath;
    protected GraphicsPath areaPath;
    protected Series series;
    protected PointF[] lowPoints;
    protected bool indexedBasedX;
    private float thirdPointY2Value;
    private float fourthPointY2Value;
    public string Name { get; }
    public int YValuesPerPoint { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public virtual string get_Name();
    public virtual int get_YValuesPerPoint();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual Image GetImage(ChartTypeRegistry registry);
    protected virtual float GetDefaultTension();
    protected virtual bool IsLineTensionSupported();
    private void FillLastSeriesGradient(ChartGraphics graph);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawLine(ChartGraphics graph, CommonElements common, DataPoint point, Series series, PointF[] points, int pointIndex, float tension);
    protected virtual GraphicsPath Draw3DSurface(ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, float topDarkening, float bottomDarkening, PointF thirdPointPosition, PointF fourthPointPosition, bool clippedSegment);
    protected virtual GraphicsPath Draw3DSurface(DataPoint3D firstPoint, DataPoint3D secondPoint, bool reversed, ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, LineSegmentType surfaceSegmentType, float topDarkening, float bottomDarkening, PointF thirdPointPosition, PointF fourthPointPosition, bool clippedSegment, bool clipOnTop, bool clipOnBottom);
    protected virtual void GetTopSurfaceVisibility(ChartArea area, DataPoint3D firstPoint, DataPoint3D secondPoint, bool upSideDown, float positionZ, float depth, Matrix3D matrix, SurfaceNames& visibleSurfaces);
    protected virtual void GetBottomPointsPosition(CommonElements common, ChartArea area, float axisPosition, DataPoint3D& firstPoint, DataPoint3D& secondPoint, PointF& thirdPoint, PointF& fourthPoint);
    internal GraphicsPath Draw3DSplinePolygon(ChartGraphics graph, ChartArea area, float positionZ, Color backColor, Color borderColor, int borderWidth, ChartDashStyle borderStyle, DataPoint3D firstPoint, DataPoint3D secondPoint, DataPoint3D thirdPoint, DataPoint3D fourthPoint, ArrayList points, int pointIndex, float tension, DrawingOperationTypes operationType, LineSegmentType lineSegmentType, bool forceThinBorder);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.RangeColumnChart : ColumnChart {
    public string Name { get; }
    public bool ZeroCrossing { get; }
    public int YValuesPerPoint { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public virtual string get_Name();
    public virtual bool get_ZeroCrossing();
    public virtual int get_YValuesPerPoint();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    protected virtual void DrawLabel(ChartArea area, ChartGraphics graph, CommonElements common, RectangleF columnPosition, DataPoint point, Series series, int pointIndex);
    protected virtual void ProcessSinglePoint3D(DataPoint3D pointEx, bool selection, ChartGraphics graph, CommonElements common, ChartArea area, RectangleF columnPosition, int pointIndex);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.RenkoChart : object {
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    internal static void PrepareData(Series series, IServiceContainer serviceContainer);
    internal static bool UnPrepareData(Series series, IServiceContainer serviceContainer);
    private static double GetBoxSize(Series series, Series originalData, int yValueIndex);
    private static void FillRenkoData(Series series, Series originalData);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public sealed virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.SplineAreaChart : AreaChart {
    public string Name { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    protected virtual float GetDefaultTension();
    protected virtual bool IsLineTensionSupported();
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.SplineChart : LineChart {
    public string Name { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    protected virtual bool IsLineTensionSupported();
    protected virtual PointF[] GetPointsPosition(ChartGraphics graph, Series series, bool indexedSeries);
    protected virtual float GetDefaultTension();
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.SplineRangeChart : RangeChart {
    public string Name { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    protected virtual float GetDefaultTension();
    protected virtual bool IsLineTensionSupported();
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.StackedAreaChart : AreaChart {
    private ArrayList stackedData;
    protected GraphicsPath areaBottomPath;
    protected double prevPosY;
    protected double prevNegY;
    protected double prevPositionX;
    protected bool hundredPercentStacked;
    public string Name { get; }
    public bool Stacked { get; }
    protected virtual float GetDefaultTension();
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual GraphicsPath Draw3DSurface(ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, float topDarkening, float bottomDarkening, PointF thirdPointPosition, PointF fourthPointPosition, bool clippedSegment);
    protected virtual void GetTopSurfaceVisibility(ChartArea area, DataPoint3D firstPoint, DataPoint3D secondPoint, bool upSideDown, float positionZ, float depth, Matrix3D matrix, SurfaceNames& visibleSurfaces);
    protected virtual void GetBottomPointsPosition(CommonElements common, ChartArea area, float axisPosition, DataPoint3D& firstPoint, DataPoint3D& secondPoint, PointF thirdPointPosition, PointF fourthPointPosition, PointF& thirdPoint, PointF& fourthPoint);
    protected virtual int GetPointLoopNumber(bool selection, ArrayList pointsArray);
    private void DrawLabels3D(ChartArea area, ChartGraphics graph, CommonElements common, DataPoint3D pointEx, float positionZ, float depth);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.StackedBarChart : object {
    protected double prevPosY;
    protected double prevNegY;
    protected bool hundredPercentStacked;
    internal bool stackGroupNameUsed;
    internal ArrayList stackGroupNames;
    internal string currentStackGroup;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool ZeroCrossing { get; }
    public bool DataPointsInLegend { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public int YValuesPerPoint { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public sealed virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public sealed virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public sealed virtual bool get_SupportLogarithmicAxes();
    public sealed virtual bool get_SwitchValueAxes();
    public sealed virtual bool get_SideBySideSeries();
    public sealed virtual bool get_ZeroCrossing();
    public sealed virtual bool get_DataPointsInLegend();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public sealed virtual bool get_ApplyPaletteColorsToPoints();
    public sealed virtual LegendImageStyle GetLegendImageStyle(Series series);
    public sealed virtual int get_YValuesPerPoint();
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, bool shadow, bool labels, Series seriesToDraw);
    public void DrawLabels(CommonElements common, ChartGraphics graph, ChartArea area, DataPoint point, int pointIndex, Series series, RectangleF rectangle);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    private void ProcessChartType3D(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, bool drawLabels, Series seriesToDraw);
    private void DrawLabels3D(ChartArea area, Axis hAxis, ChartGraphics graph, CommonElements common, RectangleF rectSize, DataPoint3D pointEx, Series ser, double barStartPosition, double barSize, double width, int pointIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.StackedColumnChart : object {
    protected double prevPosY;
    protected double prevNegY;
    protected bool hundredPercentStacked;
    internal bool stackGroupNameUsed;
    internal ArrayList stackGroupNames;
    internal string currentStackGroup;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public int YValuesPerPoint { get; }
    public bool ZeroCrossing { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public sealed virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual bool get_ZeroCrossing();
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, bool shadow, bool labels, Series seriesToDraw);
    internal static Series[] GetSeriesByStackedGroupName(CommonElements common, string groupName, string chartTypeName, string chartAreaName);
    internal static string GetSeriesStackGroupName(Series series);
    internal static bool IsSeriesStackGroupNameSupported(Series series);
    public void DrawLabels(CommonElements common, ChartGraphics graph, ChartArea area, DataPoint point, int pointIndex, Series series, RectangleF rectangle);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    private void ProcessChartType3D(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, bool labels, Series seriesToDraw);
    internal void DrawLabels3D(CommonElements common, ChartGraphics graph, ChartArea area, DataPoint3D pointEx, int pointIndex, Series series, RectangleF rectangle);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.StepLineChart : LineChart {
    public string Name { get; }
    public virtual string get_Name();
    public virtual Image GetImage(ChartTypeRegistry registry);
    protected virtual void DrawLine(ChartGraphics graph, CommonElements common, DataPoint point, Series series, PointF[] points, int pointIndex, float tension);
    protected virtual GraphicsPath Draw3DSurface(ChartArea area, ChartGraphics graph, Matrix3D matrix, LightStyle lightStyle, DataPoint3D prevDataPointEx, float positionZ, float depth, ArrayList points, int pointIndex, int pointLoopIndex, float tension, DrawingOperationTypes operationType, float topDarkening, float bottomDarkening, PointF thirdPointPosition, PointF fourthPointPosition, bool clippedSegment);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.StockChart : object {
    protected Axis vAxis;
    protected Axis hAxis;
    protected StockOpenCloseMarkStyle openCloseStyle;
    protected bool forceCandleStick;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    public StockChart(StockOpenCloseMarkStyle style);
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public sealed virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void ProcessChartType(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawOpenCloseMarks(ChartGraphics graph, ChartArea area, Series ser, DataPoint point, float xPosition, float width);
    protected virtual void DrawLabel(CommonElements common, ChartArea area, ChartGraphics graph, Series ser, DataPoint point, PointF position, int pointIndex);
    protected virtual void ProcessChartType3D(bool selection, ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    protected virtual void DrawOpenCloseMarks3D(ChartGraphics graph, ChartArea area, Series ser, DataPoint point, float xPosition, float width, float zPosition, float depth);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartTypes.StockOpenCloseMarkStyle : Enum {
    public int value__;
    public static StockOpenCloseMarkStyle Line;
    public static StockOpenCloseMarkStyle Triangle;
    public static StockOpenCloseMarkStyle Candlestick;
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.SunburstChart : object {
    private static StringFormat format;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool ZeroCrossing { get; }
    public bool DataPointsInLegend { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public int YValuesPerPoint { get; }
    public bool Doughnut { get; }
    private static SunburstChart();
    public sealed virtual string get_Name();
    public sealed virtual Image GetImage(ChartTypeRegistry registry);
    public sealed virtual bool get_Stacked();
    public sealed virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public sealed virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public sealed virtual bool get_SupportLogarithmicAxes();
    public sealed virtual bool get_SwitchValueAxes();
    public sealed virtual bool get_SideBySideSeries();
    public sealed virtual bool get_ZeroCrossing();
    public sealed virtual bool get_DataPointsInLegend();
    public sealed virtual bool get_ExtraYValuesConnectedToYAxis();
    public sealed virtual bool get_HundredPercent();
    public sealed virtual bool get_HundredPercentSupportNegative();
    public sealed virtual bool get_ApplyPaletteColorsToPoints();
    public sealed virtual LegendImageStyle GetLegendImageStyle(Series series);
    public sealed virtual int get_YValuesPerPoint();
    public bool get_Doughnut();
    public sealed virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
    public sealed virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private static RectangleF GetPlottingAreaRelative(ChartGraphics graph, ChartArea area);
    private static void RenderNodes(CommonElements common, ChartGraphics graph, ChartArea area, RectangleF plottingAreaRelative);
    private static void RenderNodes(CommonElements common, ChartGraphics graph, CategoryNodeCollection nodes, RectangleF rectRelative, double chartTotal, float incrementXRelative, float incrementYRelative, List`1<Series> seriesCollection);
    private static DataPointAttributes GetFirstNonEmptyDataPointsAttributes(Series series);
    private static void RenderNodes(CommonElements common, ChartGraphics graph, CategoryNodeCollection nodes, RectangleF rectRelative, int level, double parentValue, Single& startAngle, float parentSweepAngle, float incrementXRelative, float incrementYRelative, Series series, DataPointAttributes dataPointAttributes);
    private static void RenderNode(CommonElements common, ChartGraphics graph, CategoryNode node, RectangleF rectRelative, int level, double parentValue, Single& startAngle, float parentSweepAngle, float thresholdAngle, float incrementXRelative, float incrementYRelative, PointF centerAbsolute, float centerRadiusAbsolute, float edgeRadiusAbsolute, Series series, DataPointAttributes dataPointAttributes);
    private static string GetLabelText(CategoryNode categoryNode, DataPoint dataPoint, Series series, DataPointAttributes dataPointAttributes);
    private static string GetCategoryNodeLabelText(CategoryNode categoryNode, Series series, DataPointAttributes dataPointAttributes);
    private static GraphicsPath RenderSlice(CommonElements common, ChartGraphics graph, CategoryNode node, DataPoint dataPoint, DataPointAttributes dataPointAttributes, RectangleF rectRelative, float startAngle, float sweepAngle, PointF centerAbsolute, float radiusAbsolute, int level, int dataPointIndex);
    public static void MapCategoryNode(CommonElements common, CategoryNode node, float startAngle, float sweepAngle, RectangleF rectangle, float doughnutRadius, ChartGraphics graph);
    private static float GetSliceCenterAngle(float startAngle, float sweepAngle);
    private static float NormalizeAngle(float angle);
    private static float GetLabelAngle(float sliceCenterAngle);
    private static PointF GetSliceCenterRelative(ChartGraphics graph, float centerAngle, PointF centerAbsolute, float radiusAbsolute);
    private static float FindOptimalWidth(float maxWidth, ChartGraphics graph, GraphicsPath sliceGraphicsPath, RectangleF labelRelativeRect, int labelRotationAngle);
    private static bool CanFitInResizedArea(string text, Font textFont, SizeF relativeSize, PointF sliceCenterRelative, ChartGraphics graph, GraphicsPath sliceGraphicsPath, RectangleF labelRelativeRect, int labelRotationAngle, float radiusAbsolute, RectangleF& resizedRect);
    private static void RenderLabel(CommonElements common, ChartGraphics graph, CategoryNode node, DataPoint dataPoint, DataPointAttributes dataPointAttributes, string text, float startAngle, float sweepAngle, PointF centerAbsolute, float radiusAbsolute, int dataPointIndex, GraphicsPath sliceGraphicsPath);
    private static List`1<Series> GetChartAreaSeries(string chartAreaName, SeriesCollection chartSeries);
    private static void SortSeriesByAbsoluteValue(List`1<Series> seriesCollection, CategoryNodeCollection nodes);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.ThreeLineBreakChart : object {
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool DataPointsInLegend { get; }
    public bool ZeroCrossing { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public int YValuesPerPoint { get; }
    internal static void PrepareData(Series series, IServiceContainer serviceContainer);
    internal static bool UnPrepareData(Series series, IServiceContainer serviceContainer);
    private static void FillThreeLineBreakData(Series series, Series originalData);
    public virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    public virtual string get_Name();
    public virtual bool get_Stacked();
    public virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public virtual bool get_SupportLogarithmicAxes();
    public virtual bool get_SwitchValueAxes();
    public sealed virtual bool get_SideBySideSeries();
    public virtual bool get_DataPointsInLegend();
    public virtual bool get_ZeroCrossing();
    public virtual bool get_ApplyPaletteColorsToPoints();
    public virtual bool get_ExtraYValuesConnectedToYAxis();
    public virtual bool get_HundredPercent();
    public virtual bool get_HundredPercentSupportNegative();
    public virtual LegendImageStyle GetLegendImageStyle(Series series);
    public virtual int get_YValuesPerPoint();
    public virtual Image GetImage(ChartTypeRegistry registry);
    public virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.TreeMapChart : object {
    private static float ChartAreaMargin;
    private static float DataPointMargin;
    public string Name { get; }
    public bool Stacked { get; }
    public bool SupportStackedGroups { get; }
    public bool StackSign { get; }
    public bool RequireAxes { get; }
    public bool SecondYScale { get; }
    public bool CircularChartArea { get; }
    public bool SupportLogarithmicAxes { get; }
    public bool SwitchValueAxes { get; }
    public bool SideBySideSeries { get; }
    public bool ZeroCrossing { get; }
    public bool DataPointsInLegend { get; }
    public bool ExtraYValuesConnectedToYAxis { get; }
    public bool HundredPercent { get; }
    public bool HundredPercentSupportNegative { get; }
    public bool ApplyPaletteColorsToPoints { get; }
    public int YValuesPerPoint { get; }
    public bool Doughnut { get; }
    private static TreeMapChart();
    public sealed virtual string get_Name();
    public sealed virtual Image GetImage(ChartTypeRegistry registry);
    public sealed virtual bool get_Stacked();
    public sealed virtual bool get_SupportStackedGroups();
    public sealed virtual bool get_StackSign();
    public sealed virtual bool get_RequireAxes();
    public sealed virtual bool get_SecondYScale();
    public sealed virtual bool get_CircularChartArea();
    public sealed virtual bool get_SupportLogarithmicAxes();
    public sealed virtual bool get_SwitchValueAxes();
    public sealed virtual bool get_SideBySideSeries();
    public sealed virtual bool get_ZeroCrossing();
    public sealed virtual bool get_DataPointsInLegend();
    public sealed virtual bool get_ExtraYValuesConnectedToYAxis();
    public sealed virtual bool get_HundredPercent();
    public sealed virtual bool get_HundredPercentSupportNegative();
    public sealed virtual bool get_ApplyPaletteColorsToPoints();
    public sealed virtual LegendImageStyle GetLegendImageStyle(Series series);
    public sealed virtual int get_YValuesPerPoint();
    public bool get_Doughnut();
    public sealed virtual double GetYValue(CommonElements common, ChartArea area, Series series, DataPoint point, int pointIndex, int yValueIndex);
    public sealed virtual void AddSmartLabelMarkerPositions(CommonElements common, ChartArea area, Series series, ArrayList list);
    public sealed virtual void Paint(ChartGraphics graph, CommonElements common, ChartArea area, Series seriesToDraw);
    private static void BuildTreeNodes(CommonElements common, ChartArea area, Double& chartTotal, List`1& seriesTreeMapNodes);
    private static void RenderDataPoints(ChartGraphics graph, CommonElements common, List`1<TreeMapNode> seriesTreeMapNodes);
    private static void RenderDataPoint(ChartGraphics graph, CommonElements common, int index, TreeMapNode dataPointTreeMapNode);
    private static void AddDataPointHotRegion(ChartGraphics graph, CommonElements common, int index, DataPoint point, RectangleF dataPointRelativeRect);
    private static void RenderLabels(ChartGraphics graph, ChartArea area, List`1<TreeMapNode> seriesTreeMapNodes);
    private static void RenderSeriesLabel(ChartGraphics graph, TreeMapNode seriesTreeMapNode, RectangleF labelRelativeRect);
    private static void RenderDataPointLabel(ChartGraphics graph, ChartArea area, int index, TreeMapNode dataPointTreeMapNode, RectangleF seriesLabelRelativeRect);
    private static void RenderDataPointLabel(ChartGraphics graph, ChartArea area, int index, TreeMapNode dataPointTreeMapNode, string text, RectangleF labelRelativeRect, RectangleF dataPointRelativeRect, RectangleF seriesLabelRelativeRect);
    private static RectangleF GetPlottingArea(ChartGraphics graph, ChartArea area);
    private static RectangleF GetRelativeRect(ChartGraphics graph, TreeMapNode treeMapNode);
    private static RectangleF GetSeriesLabelRelativeRect(ChartGraphics graph, ChartArea area, Series series, RectangleF seriesRelativeRect, DataPoint point);
    private static RectangleF GetDataPointLabelRelativeRect(ChartGraphics graph, TreeMapNode dataPointTreeMapNode, RectangleF dataPointRelativeRect, string text);
    private static RectangleF GetLabelRelativeRect(ChartGraphics graph, Font font, RectangleF treeMapNodeRelativeRect, string text, LabelAlignmentTypes labelAlignment);
    private static bool CanLabelFit(RectangleF containerRelativeRect, RectangleF labelRelativeRect);
    private static Font GetSeriesLabelFont(DataPoint point);
    public static bool IsLabelVisible(DataPointAttributes point);
    private static float GetLabelXPosition(RectangleF treeMapNodeRelativeRect, float labelRelativeWidth, LabelAlignmentTypes labelAlignment);
    private static float GetLabelYPosition(RectangleF treeMapNodeRelativeRect, float labelRelativeHeight, LabelAlignmentTypes labelAlignment);
    private static LabelAlignmentTypes GetLabelAlignment(DataPoint point);
    private static string GetLabelText(DataPoint point);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.TreeMapNode : object {
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private RectangleF <Rectangle>k__BackingField;
    [CompilerGeneratedAttribute]
private Series <Series>k__BackingField;
    [CompilerGeneratedAttribute]
private DataPoint <DataPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TreeMapNode> <Children>k__BackingField;
    public double Value { get; public set; }
    public RectangleF Rectangle { get; public set; }
    public Series Series { get; public set; }
    public DataPoint DataPoint { get; public set; }
    public List`1<TreeMapNode> Children { get; public set; }
    public TreeMapNode(Series series, double value);
    public TreeMapNode(DataPoint dataPoint);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    [CompilerGeneratedAttribute]
public RectangleF get_Rectangle();
    [CompilerGeneratedAttribute]
public void set_Rectangle(RectangleF value);
    [CompilerGeneratedAttribute]
public Series get_Series();
    [CompilerGeneratedAttribute]
public void set_Series(Series value);
    [CompilerGeneratedAttribute]
public DataPoint get_DataPoint();
    [CompilerGeneratedAttribute]
public void set_DataPoint(DataPoint value);
    [CompilerGeneratedAttribute]
public List`1<TreeMapNode> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(List`1<TreeMapNode> value);
}
internal class Microsoft.Reporting.Chart.WebForms.ChartTypes.TreeMapSquaringAlgorithm : object {
    private IList`1<TreeMapNode> dataPoint;
    private RectangleF currentRectangle;
    private int currentStart;
    private double factor;
    private IEnumerable`1<TreeMapDataPointInfo> Split(RectangleF parentRectangle, double totalValue, IEnumerable`1<TreeMapNode> children);
    [IteratorStateMachineAttribute("Microsoft.Reporting.Chart.WebForms.ChartTypes.TreeMapSquaringAlgorithm/<BuildTreeMap>d__5")]
private IEnumerable`1<TreeMapDataPointInfo> BuildTreeMap();
    [IteratorStateMachineAttribute("Microsoft.Reporting.Chart.WebForms.ChartTypes.TreeMapSquaringAlgorithm/<BuildTreeMapStep>d__6")]
private IEnumerable`1<TreeMapDataPointInfo> BuildTreeMapStep();
    private double GetArea(int i);
    private double GetAspect(int i, double width);
    public static void CalculateRectangles(RectangleF containerRect, IEnumerable`1<TreeMapNode> treeMapNodes, double value);
}
internal enum Microsoft.Reporting.Chart.WebForms.ChartValueTypes : Enum {
    public int value__;
    public static ChartValueTypes Auto;
    public static ChartValueTypes Double;
    public static ChartValueTypes Single;
    public static ChartValueTypes Int;
    public static ChartValueTypes Long;
    public static ChartValueTypes UInt;
    public static ChartValueTypes ULong;
    public static ChartValueTypes String;
    public static ChartValueTypes DateTime;
    public static ChartValueTypes Date;
    public static ChartValueTypes Time;
    public static ChartValueTypes DateTimeOffset;
}
internal enum Microsoft.Reporting.Chart.WebForms.CircularAxisLabelsStyle : Enum {
    public int value__;
    public static CircularAxisLabelsStyle Auto;
    public static CircularAxisLabelsStyle Circular;
    public static CircularAxisLabelsStyle Horizontal;
    public static CircularAxisLabelsStyle Radial;
}
internal class Microsoft.Reporting.Chart.WebForms.CircularChartAreaAxis : object {
    internal float AxisPosition;
    internal float AxisSectorSize;
    internal string Title;
    internal Color TitleColor;
    public CircularChartAreaAxis(float axisPosition, float axisSectorSize);
}
internal class Microsoft.Reporting.Chart.WebForms.ColorA : object {
    private Color startColor;
    private Color endColor;
    private double startTime;
    private double endTime;
    private bool repeat;
    private double repeatDelay;
    public Color StartColor { get; public set; }
    public Color EndColor { get; public set; }
    public double StartTime { get; public set; }
    public double EndTime { get; public set; }
    public bool Repeat { get; public set; }
    public double RepeatDelay { get; public set; }
    public Color get_StartColor();
    public void set_StartColor(Color value);
    public Color get_EndColor();
    public void set_EndColor(Color value);
    public double get_StartTime();
    public void set_StartTime(double value);
    public double get_EndTime();
    public void set_EndTime(double value);
    public bool get_Repeat();
    public void set_Repeat(bool value);
    public double get_RepeatDelay();
    public void set_RepeatDelay(double value);
    internal ColorA Copy();
}
internal enum Microsoft.Reporting.Chart.WebForms.CommonAttributes : Enum {
    public int value__;
    public static CommonAttributes PointName;
    public static CommonAttributes Label;
    public static CommonAttributes AxisLabel;
    public static CommonAttributes LabelFormat;
    public static CommonAttributes ShowLabelAsValue;
    public static CommonAttributes Color;
    public static CommonAttributes BorderColor;
    public static CommonAttributes BorderDashStyle;
    public static CommonAttributes BorderWidth;
    public static CommonAttributes BackImage;
    public static CommonAttributes BackImageMode;
    public static CommonAttributes BackImageAlign;
    public static CommonAttributes BackImageTransparentColor;
    public static CommonAttributes BackGradientType;
    public static CommonAttributes BackGradientEndColor;
    public static CommonAttributes BackHatchStyle;
    public static CommonAttributes Font;
    public static CommonAttributes FontColor;
    public static CommonAttributes FontAngle;
    public static CommonAttributes MarkerStyle;
    public static CommonAttributes MarkerSize;
    public static CommonAttributes MarkerImage;
    public static CommonAttributes MarkerImageTransparentColor;
    public static CommonAttributes MarkerColor;
    public static CommonAttributes MarkerBorderColor;
    public static CommonAttributes MarkerBorderWidth;
    public static CommonAttributes MapAreaAttributes;
    public static CommonAttributes MapAreaID;
    public static CommonAttributes ElementID;
    public static CommonAttributes EmptyX;
    public static CommonAttributes MapAreaType;
    public static CommonAttributes LegendMapAreaType;
    public static CommonAttributes LabelMapAreaType;
    public static CommonAttributes Href;
    public static CommonAttributes ToolTip;
    public static CommonAttributes LegendHref;
    public static CommonAttributes LegendToolTip;
    public static CommonAttributes LegendText;
    public static CommonAttributes LegendMapAreaAttributes;
    public static CommonAttributes ShowInLegend;
    public static CommonAttributes LabelHref;
    public static CommonAttributes LabelToolTip;
    public static CommonAttributes LabelMapAreaAttributes;
    public static CommonAttributes LabelBorderColor;
    public static CommonAttributes LabelBorderDashStyle;
    public static CommonAttributes LabelBorderWidth;
    public static CommonAttributes LabelBackColor;
}
internal class Microsoft.Reporting.Chart.WebForms.CommonElements : object {
    internal ChartAreaCollection chartAreaCollection;
    internal ChartGraphics graph;
    internal IServiceContainer container;
    internal bool processModePaint;
    internal bool processModeRegions;
    private int width;
    private int height;
    internal DataManager DataManager { get; }
    public bool ProcessModePaint { get; }
    public bool ProcessModeRegions { get; }
    public HotRegionsList HotRegionsList { get; public set; }
    public DataManipulator DataManipulator { get; }
    internal ImageLoader ImageLoader { get; }
    internal Chart Chart { get; }
    internal EventsManager EventsManager { get; }
    internal ChartTypeRegistry ChartTypeRegistry { get; }
    internal BorderTypeRegistry BorderTypeRegistry { get; }
    internal FormulaRegistry FormulaRegistry { get; }
    public ChartImage ChartPicture { get; }
    internal int Width { get; internal set; }
    internal int Height { get; internal set; }
    public CommonElements(IServiceContainer container);
    internal DataManager get_DataManager();
    public bool get_ProcessModePaint();
    public bool get_ProcessModeRegions();
    public HotRegionsList get_HotRegionsList();
    public void set_HotRegionsList(HotRegionsList value);
    public DataManipulator get_DataManipulator();
    internal ImageLoader get_ImageLoader();
    internal Chart get_Chart();
    internal EventsManager get_EventsManager();
    internal ChartTypeRegistry get_ChartTypeRegistry();
    internal BorderTypeRegistry get_BorderTypeRegistry();
    internal FormulaRegistry get_FormulaRegistry();
    public ChartImage get_ChartPicture();
    internal int get_Width();
    internal void set_Width(int value);
    internal int get_Height();
    internal void set_Height(int value);
    public void TraceWrite(string category, string message);
    internal static double ParseDouble(string stringToParse);
    internal static float ParseFloat(string stringToParse);
}
internal enum Microsoft.Reporting.Chart.WebForms.CompareMethod : Enum {
    public int value__;
    public static CompareMethod More;
    public static CompareMethod Less;
    public static CompareMethod Equal;
    public static CompareMethod MoreOrEqual;
    public static CompareMethod LessOrEqual;
    public static CompareMethod NotEqual;
}
internal static class Microsoft.Reporting.Chart.WebForms.Constants : object {
    public static string DefaultName;
    public static string AutoValue;
    public static string NotSetValue;
    public static string MinValue;
    public static string MaxValue;
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Chart.WebForms.ContextElementTypes : Enum {
    public int value__;
    public static ContextElementTypes None;
    public static ContextElementTypes ChartArea;
    public static ContextElementTypes Series;
    public static ContextElementTypes Axis;
    public static ContextElementTypes Title;
    public static ContextElementTypes Annotation;
    public static ContextElementTypes Legend;
    public static ContextElementTypes AxisLabel;
    public static ContextElementTypes Any;
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Chart.WebForms.COPCoordinates : Enum {
    public int value__;
    public static COPCoordinates X;
    public static COPCoordinates Y;
    public static COPCoordinates Z;
}
[DefaultPropertyAttribute("Enabled")]
[SRDescriptionAttribute("DescriptionAttributeCursor_Cursor")]
internal class Microsoft.Reporting.Chart.WebForms.Cursor : object {
    private ChartArea chartArea;
    private AxisName attachedToXAxis;
    private bool userEnabled;
    private bool userSelection;
    private bool autoScroll;
    private Color lineColor;
    private int lineWidth;
    private ChartDashStyle lineStyle;
    private Color selectionColor;
    private AxisType axisType;
    private double position;
    private double selectionStart;
    private double selectionEnd;
    private double interval;
    private DateTimeIntervalType intervalType;
    private double intervalOffset;
    private DateTimeIntervalType intervalOffsetType;
    private Axis axis;
    private PointF userSelectionStart;
    [SRCategoryAttribute("CategoryAttributeBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeCursor_Position")]
[ParenthesizePropertyNameAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.DoubleDateNanValueConverter")]
public double Position { get; public set; }
    [SRCategoryAttribute("CategoryAttributeBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeCursor_SelectionStart")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.DoubleDateNanValueConverter")]
public double SelectionStart { get; public set; }
    [SRCategoryAttribute("CategoryAttributeBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeCursor_SelectionEnd")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.DoubleDateNanValueConverter")]
public double SelectionEnd { get; public set; }
    [SRCategoryAttribute("CategoryAttributeBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeCursor_UserEnabled")]
public bool UserEnabled { get; public set; }
    [SRCategoryAttribute("CategoryAttributeBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeCursor_UserSelection")]
public bool UserSelection { get; public set; }
    [SRCategoryAttribute("CategoryAttributeBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCursor_AutoScroll")]
public bool AutoScroll { get; public set; }
    [SRCategoryAttribute("CategoryAttributeBehavior")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCursor_AxisType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AxisType AxisType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeCursor_Interval")]
public double Interval { get; public set; }
    [SRCategoryAttribute("CategoryAttributeBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeCursor_IntervalType")]
public DateTimeIntervalType IntervalType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeCursor_IntervalOffset")]
public double IntervalOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttributeBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeCursor_IntervalOffsetType")]
public DateTimeIntervalType IntervalOffsetType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Red")]
[SRDescriptionAttribute("DescriptionAttributeCursor_LineColor")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeCursor_LineStyle")]
public ChartDashStyle LineStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeCursor_LineWidth")]
public int LineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "LightGray")]
[SRDescriptionAttribute("DescriptionAttributeCursor_SelectionColor")]
public Color SelectionColor { get; public set; }
    internal void Initialize(ChartArea chartArea, AxisName attachedToXAxis);
    public double get_Position();
    public void set_Position(double value);
    public double get_SelectionStart();
    public void set_SelectionStart(double value);
    public double get_SelectionEnd();
    public void set_SelectionEnd(double value);
    public bool get_UserEnabled();
    public void set_UserEnabled(bool value);
    public bool get_UserSelection();
    public void set_UserSelection(bool value);
    public bool get_AutoScroll();
    public void set_AutoScroll(bool value);
    public AxisType get_AxisType();
    public void set_AxisType(AxisType value);
    public double get_Interval();
    public void set_Interval(double value);
    public DateTimeIntervalType get_IntervalType();
    public void set_IntervalType(DateTimeIntervalType value);
    public double get_IntervalOffset();
    public void set_IntervalOffset(double value);
    public DateTimeIntervalType get_IntervalOffsetType();
    public void set_IntervalOffsetType(DateTimeIntervalType value);
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public ChartDashStyle get_LineStyle();
    public void set_LineStyle(ChartDashStyle value);
    public int get_LineWidth();
    public void set_LineWidth(int value);
    public Color get_SelectionColor();
    public void set_SelectionColor(Color value);
    private void Invalidate(bool invalidateArea);
    internal Axis GetAxis();
}
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.CustomAttributeTypeConverter")]
internal class Microsoft.Reporting.Chart.WebForms.CustomAttributes : object {
    internal DataPointAttributes m_DataPointAttributes;
    internal DataPointAttributes DataPointAttributes { get; internal set; }
    public CustomAttributes(DataPointAttributes attributes);
    internal virtual DataPointAttributes get_DataPointAttributes();
    internal virtual void set_DataPointAttributes(DataPointAttributes value);
    internal virtual string GetUserDefinedAttributes();
    internal virtual string GetUserDefinedAttributes(bool userDefined);
    internal virtual void SetUserDefinedAttributes(string val);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.Reporting.Chart.WebForms.CustomizeEventHandler : MulticastDelegate {
    public CustomizeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, EventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.Chart.WebForms.CustomizeLegendEventArgs : EventArgs {
    private LegendItemsCollection legendItems;
    private string legendName;
    public string LegendName { get; }
    public LegendItemsCollection LegendItems { get; }
    public CustomizeLegendEventArgs(LegendItemsCollection legendItems);
    public CustomizeLegendEventArgs(LegendItemsCollection legendItems, string legendName);
    public string get_LegendName();
    public LegendItemsCollection get_LegendItems();
}
internal class Microsoft.Reporting.Chart.WebForms.CustomizeLegendEventHandler : MulticastDelegate {
    public CustomizeLegendEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CustomizeLegendEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CustomizeLegendEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.Chart.WebForms.CustomizeMapAreasEventArgs : EventArgs {
    private MapAreasCollection areaItems;
    public MapAreasCollection MapAreaItems { get; }
    public CustomizeMapAreasEventArgs(MapAreasCollection areaItems);
    public MapAreasCollection get_MapAreaItems();
}
internal class Microsoft.Reporting.Chart.WebForms.CustomizeMapAreasEventHandler : MulticastDelegate {
    public CustomizeMapAreasEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CustomizeMapAreasEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CustomizeMapAreasEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_CustomLabel")]
[DefaultPropertyAttribute("Text")]
internal class Microsoft.Reporting.Chart.WebForms.CustomLabel : object {
    internal Axis axis;
    private string name;
    private double from;
    private double to;
    private string text;
    private LabelMark labelMark;
    private Color textColor;
    private Color markColor;
    private int labelRowIndex;
    private GridTicks gridTick;
    internal bool customLabel;
    private object tag;
    private string image;
    private Color imageTranspColor;
    private string tooltip;
    private string imageHref;
    private string imageMapAreaAttributes;
    private string href;
    private string mapAreaAttributes;
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_ToolTip")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_Href")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_ImageHref")]
[DefaultValueAttribute("")]
public string ImageHref { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_ImageMapAreaAttributes")]
[DefaultValueAttribute("")]
public string ImageMapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_Tag")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public object Tag { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_Image")]
[NotifyParentPropertyAttribute("True")]
public string Image { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_ImageTransparentColor")]
public Color ImageTransparentColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_Name")]
[DefaultValueAttribute("Custom Label")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DesignOnlyAttribute("True")]
[SerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_GridTicks")]
public GridTicks GridTicks { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_From")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AxisLabelDateValueConverter")]
public double From { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_To")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AxisLabelDateValueConverter")]
public double To { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_Text")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_TextColor")]
[NotifyParentPropertyAttribute("True")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_MarkColor")]
[NotifyParentPropertyAttribute("True")]
public Color MarkColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[BindableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_Row")]
[EditorBrowsableAttribute("1")]
public LabelRow Row { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_RowIndex")]
public int RowIndex { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_LabelMark")]
public LabelMark LabelMark { get; public set; }
    public CustomLabel(double fromPosition, double toPosition, string text, int labelRow, LabelMark mark);
    public CustomLabel(double fromPosition, double toPosition, string text, int labelRow, LabelMark mark, GridTicks gridTick);
    public CustomLabel(double fromPosition, double toPosition, string text, LabelRow row, LabelMark mark);
    public CustomLabel(double fromPosition, double toPosition, string text, LabelRow row, LabelMark mark, GridTicks gridTick);
    public CustomLabel Clone();
    public Axis GetAxis();
    private void Invalidate();
    public void set_ToolTip(string value);
    public string get_ToolTip();
    public void set_Href(string value);
    public string get_Href();
    public void set_MapAreaAttributes(string value);
    public string get_MapAreaAttributes();
    public void set_ImageHref(string value);
    public string get_ImageHref();
    public void set_ImageMapAreaAttributes(string value);
    public string get_ImageMapAreaAttributes();
    public object get_Tag();
    public void set_Tag(object value);
    public string get_Image();
    public void set_Image(string value);
    public Color get_ImageTransparentColor();
    public void set_ImageTransparentColor(Color value);
    public string get_Name();
    public void set_Name(string value);
    public GridTicks get_GridTicks();
    public void set_GridTicks(GridTicks value);
    public double get_From();
    public void set_From(double value);
    public double get_To();
    public void set_To(double value);
    public string get_Text();
    public void set_Text(string value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public Color get_MarkColor();
    public void set_MarkColor(Color value);
    public LabelRow get_Row();
    public void set_Row(LabelRow value);
    public int get_RowIndex();
    public void set_RowIndex(int value);
    public LabelMark get_LabelMark();
    public void set_LabelMark(LabelMark value);
}
[DefaultMemberAttribute("Item")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabelsCollection_CustomLabelsCollection")]
internal class Microsoft.Reporting.Chart.WebForms.CustomLabelsCollection : object {
    private ArrayList array;
    internal Axis axis;
    public CustomLabel Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public CustomLabelsCollection(Axis axis);
    public int Add(double fromPosition, double toPosition, string text);
    internal int Add(double fromPosition, double toPosition, string text, bool customLabel);
    public int Add(double fromPosition, double toPosition, string text, LabelRow row, LabelMark mark);
    public int Add(double fromPosition, double toPosition, string text, int rowIndex, LabelMark mark);
    public int Add(double fromPosition, double toPosition, string text, LabelRow row, LabelMark mark, GridTicks gridTick);
    public int Add(double fromPosition, double toPosition, string text, int rowIndex, LabelMark mark, GridTicks gridTick);
    public void Add(double labelsStep, DateTimeIntervalType intervalType, double min, double max, string format, LabelRow row, LabelMark mark);
    public void Add(double labelsStep, DateTimeIntervalType intervalType, double min, double max, string format, int rowIndex, LabelMark mark);
    public void Add(double labelsStep, DateTimeIntervalType intervalType);
    public void Add(double labelsStep, DateTimeIntervalType intervalType, string format);
    public void Add(double labelsStep, DateTimeIntervalType intervalType, string format, LabelRow row, LabelMark mark);
    public void Add(double labelsStep, DateTimeIntervalType intervalType, string format, int rowIndex, LabelMark mark);
    public CustomLabel get_Item(int index);
    public void set_Item(int index, CustomLabel value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    public bool Contains(CustomLabel value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    public int IndexOf(CustomLabel value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public void Remove(CustomLabel value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual int Add(object value);
    public void Insert(int index, CustomLabel value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    private void Invalidate();
}
internal class Microsoft.Reporting.Chart.WebForms.Data.DataManager : object {
    private SeriesCollection series;
    internal IServiceContainer serviceContainer;
    private ChartColorPalette colorPalette;
    private Color[] paletteCustomColors;
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
public SeriesCollection Series { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributePalette")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartColorPalette Palette { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DesignerSerializationVisibilityAttribute("2")]
[SerializationVisibilityAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeDataManager_PaletteCustomColors")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.ColorArrayConverter")]
public Color[] PaletteCustomColors { get; public set; }
    public DataManager(IServiceContainer container);
    [EditorBrowsableAttribute("1")]
public sealed virtual object GetService(Type serviceType);
    internal void Initialize();
    private void ChartPicture_BeforePaint(object sender, ChartPaintEventArgs e);
    private void ChartPicture_AfterPaint(object sender, ChartPaintEventArgs e);
    internal void ApplyPaletteColors();
    internal void PrepareData(bool seriesApplyPaletteColors, bool pointsApplyPaletteColors, String[] series);
    private bool IsPointSkipped(DataPoint point);
    internal int GetNumberOfPoints(String[] series);
    internal double GetMaxYValue(int valueIndex, String[] series);
    internal double GetMaxYWithRadiusValue(ChartArea area, String[] series);
    internal double GetMaxXWithRadiusValue(ChartArea area, String[] series);
    internal double GetMinXWithRadiusValue(ChartArea area, String[] series);
    internal double GetMaxYValue(String[] series);
    internal double GetMaxXValue(String[] series);
    internal void GetMinMaxXValue(Double& min, Double& max, String[] series);
    internal void GetMinMaxYValue(int valueIndex, Double& min, Double& max, String[] series);
    internal void GetMinMaxYValue(Double& min, Double& max, String[] series);
    internal void GetMinMaxYValue(ArrayList seriesList, Double& min, Double& max);
    internal double GetMaxStackedYValue(int valueIndex, String[] series);
    internal double GetMaxUnsignedStackedYValue(int valueIndex, String[] series);
    internal double GetMaxStackedXValue(String[] series);
    internal double GetMinYValue(int valueIndex, String[] series);
    internal double GetMinYWithRadiusValue(ChartArea area, String[] series);
    internal double GetMinYValue(String[] series);
    internal double GetMinXValue(String[] series);
    internal double GetMinStackedYValue(int valueIndex, String[] series);
    internal double GetMinUnsignedStackedYValue(int valueIndex, String[] series);
    internal double GetMinStackedXValue(String[] series);
    internal double GetMaxHundredPercentStackedYValue(bool supportNegative, int valueIndex, String[] series);
    internal double GetMinHundredPercentStackedYValue(bool supportNegative, int valueIndex, String[] series);
    public SeriesCollection get_Series();
    public ChartColorPalette get_Palette();
    public void set_Palette(ChartColorPalette value);
    public void set_PaletteCustomColors(Color[] value);
    public Color[] get_PaletteCustomColors();
}
internal class Microsoft.Reporting.Chart.WebForms.DataManipulator : FormulaData {
    private bool filterSetEmptyPoints;
    private bool filterMatchedPoints;
    public bool FilterSetEmptyPoints { get; public set; }
    public bool FilterMatchedPoints { get; public set; }
    internal Series[] ConvertToSeriesArray(object obj, bool createNew);
    private void Sort(PointsSortOrder order, string sortBy, Series[] series);
    private void Sort(IComparer comparer, Series[] series);
    public void Sort(PointsSortOrder order, string sortBy, string seriesName);
    public void Sort(PointsSortOrder order, Series series);
    public void Sort(PointsSortOrder order, string seriesName);
    public void Sort(PointsSortOrder order, string sortBy, Series series);
    internal void Sort(IComparer comparer, Series series);
    internal void Sort(IComparer comparer, string seriesName);
    private void InsertEmptyPoints(double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, double fromXValue, double toXValue, Series[] series);
    private DateTimeIntervalType ConvertIntervalType(IntervalType type);
    public void InsertEmptyPoints(double interval, IntervalType intervalType, Series series);
    public void InsertEmptyPoints(double interval, IntervalType intervalType, string seriesName);
    public void InsertEmptyPoints(double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, string seriesName);
    public void InsertEmptyPoints(double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, Series series);
    public void InsertEmptyPoints(double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, double fromXValue, double toXValue, string seriesName);
    public void InsertEmptyPoints(double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, double fromXValue, double toXValue, Series series);
    internal DataSet ExportSeriesValues(Series[] series);
    public DataSet ExportSeriesValues();
    public DataSet ExportSeriesValues(string seriesNames);
    public DataSet ExportSeriesValues(Series series);
    public bool get_FilterSetEmptyPoints();
    public void set_FilterSetEmptyPoints(bool value);
    public bool get_FilterMatchedPoints();
    public void set_FilterMatchedPoints(bool value);
    private void FilterTopN(int pointCount, Series[] inputSeries, Series[] outputSeries, string usingValue, bool getTopValues);
    private void Filter(IDataPointFilter filterInterface, Series[] inputSeries, Series[] outputSeries);
    private Int32[] ConvertElementIndexesToArray(string rangeElements);
    private bool CheckFilterElementCriteria(DateRangeType dateRange, Int32[] rangeElements, DataPoint point, Series series, int pointIndex);
    public void Filter(DateRangeType dateRange, string rangeElements, string inputSeriesNames, string outputSeriesNames);
    public void Filter(DateRangeType dateRange, string rangeElements, Series inputSeries);
    public void Filter(DateRangeType dateRange, string rangeElements, Series inputSeries, Series outputSeries);
    public void Filter(DateRangeType dateRange, string rangeElements, string inputSeriesNames);
    public void Filter(CompareMethod compareMethod, double compareValue, Series inputSeries);
    public void Filter(CompareMethod compareMethod, double compareValue, Series inputSeries, Series outputSeries);
    public void Filter(CompareMethod compareMethod, double compareValue, Series inputSeries, Series outputSeries, string usingValue);
    public void Filter(CompareMethod compareMethod, double compareValue, string inputSeriesNames);
    public void Filter(CompareMethod compareMethod, double compareValue, string inputSeriesNames, string outputSeriesNames);
    public void Filter(CompareMethod compareMethod, double compareValue, string inputSeriesNames, string outputSeriesNames, string usingValue);
    public void FilterTopN(int pointCount, string inputSeriesNames, string outputSeriesNames, string usingValue, bool getTopValues);
    public void FilterTopN(int pointCount, Series inputSeries);
    public void FilterTopN(int pointCount, Series inputSeries, Series outputSeries);
    public void FilterTopN(int pointCount, Series inputSeries, Series outputSeries, string usingValue);
    public void FilterTopN(int pointCount, Series inputSeries, Series outputSeries, string usingValue, bool getTopValues);
    public void FilterTopN(int pointCount, string inputSeriesNames);
    public void FilterTopN(int pointCount, string inputSeriesNames, string outputSeriesNames);
    public void FilterTopN(int pointCount, string inputSeriesNames, string outputSeriesNames, string usingValue);
    internal void Filter(IDataPointFilter filterInterface, Series inputSeries);
    internal void Filter(IDataPointFilter filterInterface, Series inputSeries, Series outputSeries);
    internal void Filter(IDataPointFilter filterInterface, string inputSeriesNames);
    internal void Filter(IDataPointFilter filterInterface, string inputSeriesNames, string outputSeriesNames);
    private void GroupByAxisLabel(string formula, Series[] inputSeries, Series[] outputSeries);
    private void Group(string formula, double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, Series[] inputSeries, Series[] outputSeries);
    private void ProcessPointValues(GroupingFunctionInfo[] functions, Double[] pointTempValues, Series series, DataPoint point, int pointIndex, int intervalFirstIndex, int intervalLastIndex, bool finalPass, Int32& numberOfEmptyPoints);
    private GroupingFunctionInfo[] GetGroupingFunctions(Series[] inputSeries, string formula, Int32& outputValuesNumber);
    private GroupingFunction ParseFormulaAndValueType(string formulaString, Int32& valueIndex);
    private void CheckSeriesArrays(Series[] inputSeries, Series[] outputSeries);
    public void Group(string formula, double interval, IntervalType intervalType, Series inputSeries);
    public void Group(string formula, double interval, IntervalType intervalType, string inputSeriesName);
    public void Group(string formula, double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, Series inputSeries);
    public void Group(string formula, double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, string inputSeriesName);
    public void GroupByAxisLabel(string formula, string inputSeriesName, string outputSeriesName);
    public void GroupByAxisLabel(string formula, Series inputSeries);
    public void GroupByAxisLabel(string formula, string inputSeriesName);
    public void Group(string formula, double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, string inputSeriesName, string outputSeriesName);
    public void Group(string formula, double interval, IntervalType intervalType, Series inputSeries, Series outputSeries);
    public void Group(string formula, double interval, IntervalType intervalType, string inputSeriesName, string outputSeriesName);
    public void Group(string formula, double interval, IntervalType intervalType, double intervalOffset, IntervalType intervalOffsetType, Series inputSeries, Series outputSeries);
    public void GroupByAxisLabel(string formula, Series inputSeries, Series outputSeries);
}
[SRDescriptionAttribute("DescriptionAttributeDataPoint_DataPoint")]
[DefaultPropertyAttribute("YValues")]
internal class Microsoft.Reporting.Chart.WebForms.DataPoint : DataPointAttributes {
    private double xValue;
    private Double[] yValue;
    internal PointF positionRel;
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeDataPoint_XValue")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.DataPointValueConverter")]
[DefaultValueAttribute("System.Double", "0.0")]
[BrowsableAttribute("False")]
public double XValue { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[SRDescriptionAttribute("DescriptionAttributeDataPoint_YValues")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.DoubleArrayConverter")]
[RefreshPropertiesAttribute("1")]
[SerializationVisibilityAttribute("1")]
public Double[] YValues { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BrowsableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeDataPoint_Empty")]
[DefaultValueAttribute("False")]
public bool Empty { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeDataPoint_Name")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMarkerStyle4")]
[RefreshPropertiesAttribute("1")]
public MarkerStyle MarkerStyle { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMarkerSize")]
[DefaultValueAttribute("5")]
[RefreshPropertiesAttribute("1")]
public int MarkerSize { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMarkerColor3")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[RefreshPropertiesAttribute("1")]
public Color MarkerColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMarkerBorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[RefreshPropertiesAttribute("1")]
public Color MarkerBorderColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeColor4")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color Color { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor9")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBorderStyle3")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartDashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBorderWidth8")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientType4")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType BackGradientType { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientEndColor7")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color BackGradientEndColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle9")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeLabelAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeFont")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeLabelAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeFontColor")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color FontColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeLabel")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLabel")]
[DefaultValueAttribute("")]
public string Label { get; public set; }
    public DataPoint(Series series);
    public DataPoint(double xValue, string yValues);
    public DataPoint(double xValue, double yValue);
    internal void SetPointAttribute(object obj, string attributeName, string format);
    private double ConvertValue(object value);
    public void SetValueXY(object xValue, Object[] yValue);
    public void SetValueY(Object[] yValue);
    public DataPoint Clone();
    internal void ResizeYValueArray(int newSize);
    public double GetValueY(int yValueIndex);
    public void SetValueY(int yValueIndex, double yValue);
    internal double GetValueByName(string valueName);
    internal string ReplaceKeywords(string strOriginal);
    private string RemoveOneKeyword(string strOriginal, string keyword, string strToReplace);
    public double get_XValue();
    public void set_XValue(double value);
    public Double[] get_YValues();
    public void set_YValues(Double[] value);
    public void ResetYValues();
    public bool get_Empty();
    public void set_Empty(bool value);
    public string get_Name();
    public void set_Name(string value);
    public MarkerStyle get_MarkerStyle();
    public void set_MarkerStyle(MarkerStyle value);
    public int get_MarkerSize();
    public void set_MarkerSize(int value);
    public void set_MarkerColor(Color value);
    public Color get_MarkerColor();
    public void set_MarkerBorderColor(Color value);
    public Color get_MarkerBorderColor();
    public Color get_Color();
    public void set_Color(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public ChartDashStyle get_BorderStyle();
    public void set_BorderStyle(ChartDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public GradientType get_BackGradientType();
    public void set_BackGradientType(GradientType value);
    public Color get_BackGradientEndColor();
    public void set_BackGradientEndColor(Color value);
    public ChartHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(ChartHatchStyle value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_FontColor();
    public void set_FontColor(Color value);
    public virtual void set_Label(string value);
    public virtual string get_Label();
}
internal class Microsoft.Reporting.Chart.WebForms.DataPoint3D : object {
    internal DataPoint dataPoint;
    internal int index;
    internal double xPosition;
    internal double yPosition;
    internal double xCenterVal;
    internal float zPosition;
    internal double width;
    internal double height;
    internal float depth;
    internal bool indexedSeries;
}
[DefaultMemberAttribute("Item")]
[SRDescriptionAttribute("DescriptionAttributeDataPointAttributes_DataPointAttributes")]
[DefaultPropertyAttribute("Label")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter")]
internal class Microsoft.Reporting.Chart.WebForms.DataPointAttributes : object {
    internal IServiceContainer serviceContainer;
    internal bool pointAttributes;
    internal Series series;
    internal Hashtable attributes;
    internal static ColorConverter colorConverter;
    internal static FontConverter fontConverter;
    internal bool tempColorIsSet;
    internal CustomAttributes customAttributes;
    internal bool emptyPoint;
    private object tag;
    private object mapAreaTag;
    private object mapAreaLegendTag;
    private object mapAreaLabelTag;
    public string Item { get; }
    public string Item { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CategoryAttributeLabel")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLabel")]
public string Label { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeAxisLabel")]
[DefaultValueAttribute("")]
public string AxisLabel { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeLabel")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLabelFormat")]
[DefaultValueAttribute("")]
public string LabelFormat { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeLabel")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeShowLabelAsValue")]
[DefaultValueAttribute("False")]
public bool ShowLabelAsValue { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeColor4")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color Color { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor9")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBorderStyle3")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBorderWidth8")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackImage10")]
[DefaultValueAttribute("")]
public string BackImage { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackImageMode4")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartImageWrapMode BackImageMode { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackImageTransparentColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color BackImageTransparentColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackImageAlign")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartImageAlign BackImageAlign { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientType4")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientEndColor7")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color BackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle9")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLabelAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeFont")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLabelAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeFontColor")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color FontColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLabelAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeFontAngle3")]
[DefaultValueAttribute("0")]
public int FontAngle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMarkerStyle4")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
public MarkerStyle MarkerStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMarkerSize")]
[DefaultValueAttribute("5")]
[RefreshPropertiesAttribute("1")]
public int MarkerSize { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMarkerImage10")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
public string MarkerImage { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMarkerImageTransparentColor3")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[RefreshPropertiesAttribute("1")]
public Color MarkerImageTransparentColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMarkerColor3")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[RefreshPropertiesAttribute("1")]
public Color MarkerColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMarkerBorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[RefreshPropertiesAttribute("1")]
public Color MarkerBorderColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMarkerBorderWidth3")]
[DefaultValueAttribute("1")]
public int MarkerBorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeCustomAttributesExtended")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
[NotifyParentPropertyAttribute("True")]
[DesignOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public CustomAttributes CustomAttributesExtended { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeCustomAttributesExtended")]
[DefaultValueAttribute("")]
public string CustomAttributes { get; public set; }
    [BrowsableAttribute("False")]
[SerializationVisibilityAttribute("0")]
public object Tag { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeToolTip7")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    private object Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.Tag { get; private set; }
    public object LegendTag { get; public set; }
    public object LabelTag { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeHref7")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapAreaAttributes9")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLegend")]
[BrowsableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeShowInLegend")]
[DefaultValueAttribute("True")]
public bool ShowInLegend { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLegend")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendText")]
[DefaultValueAttribute("")]
public string LegendText { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAttributeLegend")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendToolTip")]
[DefaultValueAttribute("")]
public string LegendToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLabelAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLabelBackColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color LabelBackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLabelAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLabelBorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color LabelBorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLabelAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLabelBorderStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartDashStyle LabelBorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLabelAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLabelBorderWidth")]
[DefaultValueAttribute("1")]
public int LabelBorderWidth { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAttributeLabel")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLabelToolTip")]
[DefaultValueAttribute("")]
public string LabelToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLegend")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendHref")]
[DefaultValueAttribute("")]
public string LegendHref { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLegend")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendMapAreaAttributes")]
[DefaultValueAttribute("")]
public string LegendMapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLabelHref")]
[DefaultValueAttribute("")]
public string LabelHref { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLabel")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLabelMapAreaAttributes")]
[DefaultValueAttribute("")]
public string LabelMapAreaAttributes { get; public set; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeEmptyX")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public bool EmptyX { get; public set; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeElementId")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public int ElementId { get; public set; }
    public DataPointAttributes(Series series, bool pointAttributes);
    private static DataPointAttributes();
    public virtual bool IsAttributeSet(string name);
    internal bool IsAttributeSet(CommonAttributes attrib);
    public virtual void DeleteAttribute(string name);
    internal void DeleteAttribute(CommonAttributes attrib);
    public virtual string GetAttribute(string name);
    internal bool IsSerializing();
    internal object GetAttributeObject(CommonAttributes attrib);
    public virtual void SetAttribute(string name, string attributeValue);
    internal void SetAttributeObject(CommonAttributes attrib, object attributeValue);
    public virtual void SetDefault(bool clearAll);
    public string get_Item(int index);
    public string get_Item(string name);
    public void set_Item(string name, string value);
    public virtual string get_Label();
    public virtual void set_Label(string value);
    public virtual string get_AxisLabel();
    public virtual void set_AxisLabel(string value);
    public string get_LabelFormat();
    public void set_LabelFormat(string value);
    public bool get_ShowLabelAsValue();
    public void set_ShowLabelAsValue(bool value);
    public Color get_Color();
    public void set_Color(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public ChartDashStyle get_BorderStyle();
    public void set_BorderStyle(ChartDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public string get_BackImage();
    public void set_BackImage(string value);
    public ChartImageWrapMode get_BackImageMode();
    public void set_BackImageMode(ChartImageWrapMode value);
    public Color get_BackImageTransparentColor();
    public void set_BackImageTransparentColor(Color value);
    public ChartImageAlign get_BackImageAlign();
    public void set_BackImageAlign(ChartImageAlign value);
    public GradientType get_BackGradientType();
    public void set_BackGradientType(GradientType value);
    public Color get_BackGradientEndColor();
    public void set_BackGradientEndColor(Color value);
    public ChartHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(ChartHatchStyle value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_FontColor();
    public void set_FontColor(Color value);
    public int get_FontAngle();
    public void set_FontAngle(int value);
    public MarkerStyle get_MarkerStyle();
    public void set_MarkerStyle(MarkerStyle value);
    public int get_MarkerSize();
    public void set_MarkerSize(int value);
    public string get_MarkerImage();
    public void set_MarkerImage(string value);
    public Color get_MarkerImageTransparentColor();
    public void set_MarkerImageTransparentColor(Color value);
    public Color get_MarkerColor();
    public void set_MarkerColor(Color value);
    public Color get_MarkerBorderColor();
    public void set_MarkerBorderColor(Color value);
    public int get_MarkerBorderWidth();
    public void set_MarkerBorderWidth(int value);
    public void set_CustomAttributesExtended(CustomAttributes value);
    public CustomAttributes get_CustomAttributesExtended();
    public string get_CustomAttributes();
    public void set_CustomAttributes(string value);
    public object get_Tag();
    public void set_Tag(object value);
    public sealed virtual void set_ToolTip(string value);
    public sealed virtual string get_ToolTip();
    private sealed virtual override object Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.set_Tag(object value);
    public object get_LegendTag();
    public void set_LegendTag(object value);
    public object get_LabelTag();
    public void set_LabelTag(object value);
    public sealed virtual void set_Href(string value);
    public sealed virtual string get_Href();
    public sealed virtual void set_MapAreaAttributes(string value);
    public sealed virtual string get_MapAreaAttributes();
    public bool get_ShowInLegend();
    public void set_ShowInLegend(bool value);
    public void set_LegendText(string value);
    public string get_LegendText();
    public void set_LegendToolTip(string value);
    public string get_LegendToolTip();
    public Color get_LabelBackColor();
    public void set_LabelBackColor(Color value);
    public Color get_LabelBorderColor();
    public void set_LabelBorderColor(Color value);
    public ChartDashStyle get_LabelBorderStyle();
    public void set_LabelBorderStyle(ChartDashStyle value);
    public int get_LabelBorderWidth();
    public void set_LabelBorderWidth(int value);
    public void set_LabelToolTip(string value);
    public string get_LabelToolTip();
    public void set_LegendHref(string value);
    public string get_LegendHref();
    public void set_LegendMapAreaAttributes(string value);
    public string get_LegendMapAreaAttributes();
    public void set_LabelHref(string value);
    public string get_LabelHref();
    public void set_LabelMapAreaAttributes(string value);
    public string get_LabelMapAreaAttributes();
    internal void Invalidate(bool invalidateLegend);
    public bool get_EmptyX();
    public void set_EmptyX(bool value);
    public int get_ElementId();
    public void set_ElementId(int value);
    [EditorBrowsableAttribute("1")]
public sealed virtual PropertyDescriptorCollection GetProperties();
    [EditorBrowsableAttribute("1")]
public sealed virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes);
    [EditorBrowsableAttribute("1")]
public sealed virtual string GetClassName();
    [EditorBrowsableAttribute("1")]
public sealed virtual AttributeCollection GetAttributes();
    [EditorBrowsableAttribute("1")]
public sealed virtual string GetComponentName();
    [EditorBrowsableAttribute("1")]
public sealed virtual TypeConverter GetConverter();
    [EditorBrowsableAttribute("1")]
public sealed virtual EventDescriptor GetDefaultEvent();
    [EditorBrowsableAttribute("1")]
public sealed virtual PropertyDescriptor GetDefaultProperty();
    [EditorBrowsableAttribute("1")]
public sealed virtual object GetEditor(Type editorBaseType);
    [EditorBrowsableAttribute("1")]
public sealed virtual EventDescriptorCollection GetEvents(Attribute[] attributes);
    [EditorBrowsableAttribute("1")]
public sealed virtual EventDescriptorCollection GetEvents();
    [EditorBrowsableAttribute("1")]
public sealed virtual object GetPropertyOwner(PropertyDescriptor pd);
    public DataPointAttributes CloneAttributes();
}
[DefaultMemberAttribute("Item")]
[SRDescriptionAttribute("DescriptionAttributeDataPointCollection_DataPointCollection")]
internal class Microsoft.Reporting.Chart.WebForms.DataPointCollection : object {
    internal ArrayList array;
    internal Series series;
    public DataPoint Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public DataPointCollection(Series series);
    internal void DataPointInit(DataPoint& dataPoint);
    internal static void DataPointInit(Series series, DataPoint& dataPoint);
    internal static void ParsePointFieldsParameter(string otherFields, String[]& otherAttributeNames, String[]& otherFieldNames, String[]& otherValueFormat);
    public void DataBind(IEnumerable dataSource, string xField, string yFields, string otherFields);
    public void DataBindY(IEnumerable[] yValue);
    public void DataBindXY(IEnumerable xValue, IEnumerable[] yValues);
    public void DataBindY(IEnumerable yValue, string yFields);
    public void DataBindXY(IEnumerable xValue, string xField, IEnumerable yValue, string yFields);
    internal static bool IsEmptyValue(object val);
    public int AddY(double yValue);
    public int AddY(Object[] yValue);
    public int AddXY(double xValue, double yValue);
    public int AddXY(object xValue, Object[] yValue);
    public void InsertXY(int index, object xValue, Object[] yValue);
    public void InsertY(int index, Object[] yValue);
    internal static IEnumerator GetDataSourceEnumerator(IEnumerable dataSource);
    internal static object ConvertEnumerationItem(object item, string fieldName);
    internal static void AutoDetectValuesType(Series series, IEnumerator xEnumerator, string xField, IEnumerator yEnumerator, string yField);
    private static ChartValueTypes GetValueType(IEnumerator enumerator, string field);
    public DataPoint FindValue(double valueToFind, string useValue, Int32& startFromIndex);
    public DataPoint FindValue(double valueToFind, string useValue);
    public DataPoint FindValue(double valueToFind);
    public DataPoint FindMaxValue(string useValue, Int32& startFromIndex);
    public DataPoint FindMaxValue(string useValue);
    public DataPoint FindMaxValue();
    public DataPoint FindMinValue(string useValue, Int32& startFromIndex);
    public DataPoint FindMinValue(string useValue);
    public DataPoint FindMinValue();
    public DataPoint get_Item(int index);
    public void set_Item(int index, DataPoint value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    public bool Contains(DataPoint value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    public int IndexOf(DataPoint value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public void Remove(DataPoint value);
    public sealed virtual void RemoveAt(int index);
    public void RemoveRange(int index, int count);
    public int Add(DataPoint value);
    public sealed virtual int Add(object value);
    public void Insert(int index, DataPoint value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
[SRDescriptionAttribute("DescriptionAttributeDataPointComparer_DataPointComparer")]
internal class Microsoft.Reporting.Chart.WebForms.DataPointComparer : object {
    private Series series;
    private PointsSortOrder sortingOrder;
    private int sortingValueIndex;
    public DataPointComparer(Series series, PointsSortOrder order, string sortBy);
    public sealed virtual int Compare(object point1, object point2);
}
internal enum Microsoft.Reporting.Chart.WebForms.DateRangeType : Enum {
    public int value__;
    public static DateRangeType Year;
    public static DateRangeType Month;
    public static DateRangeType DayOfWeek;
    public static DateRangeType DayOfMonth;
    public static DateRangeType Hour;
    public static DateRangeType Minute;
}
internal enum Microsoft.Reporting.Chart.WebForms.DateTimeIntervalType : Enum {
    public int value__;
    public static DateTimeIntervalType Auto;
    public static DateTimeIntervalType Number;
    public static DateTimeIntervalType Years;
    public static DateTimeIntervalType Months;
    public static DateTimeIntervalType Weeks;
    public static DateTimeIntervalType Days;
    public static DateTimeIntervalType Hours;
    public static DateTimeIntervalType Minutes;
    public static DateTimeIntervalType Seconds;
    public static DateTimeIntervalType Milliseconds;
    public static DateTimeIntervalType NotSet;
}
internal class Microsoft.Reporting.Chart.WebForms.Design.AnchorPointValueConverter : TypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.AngleTrackForm : Control {
    private Container components;
    private int angleValue;
    private bool dragging;
    private EventHandler onValueChanged;
    private Region lastUpdatedRegion;
    private bool showText;
    private bool showLine;
    private bool showMarks;
    private int markStep;
    private bool showOnly180Degrees;
    private int forceRoundingToDegees;
    private int prevAngleValue;
    private static int size;
    private static int offset;
    [SRCategoryAttribute("CategoryAttributeData")]
[DefaultValueAttribute("0")]
public int Angle { get; public set; }
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    public int get_Angle();
    public void set_Angle(int value);
    public void add_ValueChanged(EventHandler value);
    public void remove_ValueChanged(EventHandler value);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnDoubleClick(EventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnValueChanged(EventArgs e);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.AngleValueEditor : UITypeEditor {
    private IWindowsFormsEditorService edSvc;
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    private void ValueChanged(object sender, EventArgs e);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.AnnotationAxisValueConverter : TypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.AxesArrayConverter : TypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.AxisCrossingValueConverter : AxisMinMaxValueConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.AxisElementIntervalValueConverter : AxisIntervalValueConverter {
}
internal class Microsoft.Reporting.Chart.WebForms.Design.AxisIntervalValueConverter : DoubleConverter {
    internal bool hideNotSet;
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.AxisLabelDateValueConverter : DoubleConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.AxisMinMaxAutoValueConverter : AxisMinMaxValueConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.AxisMinMaxValueConverter : DoubleConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.ChartDataSourceConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.ChartTypeConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.ColorArrayConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public static string ColorArrayToString(Color[] colors);
    public static Color[] StringToColorArray(string colorNames);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.CustomAttributeTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object obj, Attribute[] attributes);
    private bool IsApplicableCustomAttribute(CustomAttributeInfo attrInfo, object obj);
    private bool IsDataPoint(object obj);
    private bool Is3DChartType(object obj);
    private Series[] GetSelectedSeries(object obj);
    private SeriesChartType[] GetSelectedChartTypes(object obj);
    private Attribute[] GetPropertyAttributes(CustomAttributeInfo attrInfo);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.DataPointValueConverter : DoubleConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.DoubleArrayConverter : ArrayConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.DoubleDateNanValueConverter : DoubleConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public static string ConvertDateTimeToString(double dtValue, ChartValueTypes axisValuesType, DateTimeIntervalType dtIntervalType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.DoubleNanValueConverter : DoubleConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.DynamicPropertyDescriptor : PropertyDescriptor {
    private PropertyDescriptor basePropertyDescriptor;
    private string displayName;
    public Type ComponentType { get; }
    public string DisplayName { get; }
    public bool IsBrowsable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public DynamicPropertyDescriptor(PropertyDescriptor basePropertyDescriptor, string displayName);
    public virtual Type get_ComponentType();
    public virtual string get_DisplayName();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
    public virtual void SetValue(object component, object value);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.ElementPositionConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal interface Microsoft.Reporting.Chart.WebForms.Design.IDataPointAttributesProvider {
    public DataPointAttributes DataPointAttributes { get; }
    public abstract virtual DataPointAttributes get_DataPointAttributes();
}
internal class Microsoft.Reporting.Chart.WebForms.Design.IntNanValueConverter : Int32Converter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.LegendAreaNameConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.LegendConverter : NoNameExpandableObjectConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.MapAreaCoordinatesConverter : ArrayConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.MarginExpandableObjectConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter : ExpandableObjectConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.ObjectPropertyTab : PropertyTab {
    private string img;
    public string TabName { get; }
    public Bitmap Bitmap { get; }
    public virtual string get_TabName();
    public virtual Bitmap get_Bitmap();
    private Image DeserializeFromBase64Text(string text);
    public virtual bool CanExtend(object o);
    public virtual PropertyDescriptorCollection GetProperties(object component, Attribute[] attrs);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object component, Attribute[] attrs);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.RectangleFConverter : TypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.SeriesAreaNameConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.SeriesDataSourceMemberConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.SeriesLegendNameConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.SeriesNameConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.SeriesYValueTypeConverter : EnumConverter {
    public SeriesYValueTypeConverter(Type type);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.SizeEmptyValueConverter : SizeConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Chart.WebForms.Design.StripLineTitleAngleConverter : Int32Converter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal enum Microsoft.Reporting.Chart.WebForms.Docking : Enum {
    public int value__;
    public static Docking Top;
    public static Docking Right;
    public static Docking Bottom;
    public static Docking Left;
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Chart.WebForms.DrawingOperationTypes : Enum {
    public int value__;
    public static DrawingOperationTypes DrawElement;
    public static DrawingOperationTypes CalcElementPath;
}
[SRDescriptionAttribute("DescriptionAttributeElementPosition_ElementPosition")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.ElementPositionConverter")]
[DefaultPropertyAttribute("Data")]
internal class Microsoft.Reporting.Chart.WebForms.ElementPosition : object {
    private float x;
    private float y;
    private float width;
    private float height;
    internal bool auto;
    internal CommonElements common;
    internal Chart chart;
    internal bool resetAreaAutoPosition;
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeElementPosition_X")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public float X { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeElementPosition_Y")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public float Y { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeElementPosition_Width")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public float Width { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeElementPosition_Height")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public float Height { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeElementPosition_Auto")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public bool Auto { get; public set; }
    public ElementPosition(float x, float y, float width, float height);
    private void ResetAllAreasAutoPosition(bool autoValue);
    public RectangleF ToRectangleF();
    public void FromRectangleF(RectangleF rect);
    public SizeF GetSize();
    public float Bottom();
    public float Right();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal void SetPositionNoAuto(float x, float y, float width, float height);
    private void Invalidate();
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    public float get_Width();
    public void set_Width(float value);
    public float get_Height();
    public void set_Height(float value);
    public bool get_Auto();
    public void set_Auto(bool value);
}
[SRDescriptionAttribute("DescriptionAttributeEllipseAnnotation_EllipseAnnotation")]
internal class Microsoft.Reporting.Chart.WebForms.EllipseAnnotation : RectangleAnnotation {
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType4")]
public string AnnotationType { get; }
    public virtual string get_AnnotationType();
}
internal class Microsoft.Reporting.Chart.WebForms.EventsManager : object {
    internal IServiceContainer serviceContainer;
    private Chart control;
    public EventsManager(IServiceContainer container);
    public sealed virtual object GetService(Type serviceType);
    internal void OnBackPaint(object caller, ChartPaintEventArgs e);
    internal void OnPaint(object caller, ChartPaintEventArgs e);
    internal void OnCustomize();
    internal void OnCustomizeLegend(LegendItemsCollection legendItems, string legendName);
    internal void OnCustomizeMapAreas(MapAreasCollection areaItems);
}
internal enum Microsoft.Reporting.Chart.WebForms.FinancialFormula : Enum {
    public int value__;
    public static FinancialFormula AccumulationDistribution;
    public static FinancialFormula AverageTrueRange;
    public static FinancialFormula BollingerBands;
    public static FinancialFormula ChaikinOscillator;
    public static FinancialFormula CommodityChannelIndex;
    public static FinancialFormula DetrendedPriceOscillator;
    public static FinancialFormula EaseOfMovement;
    public static FinancialFormula Envelopes;
    public static FinancialFormula ExponentialMovingAverage;
    public static FinancialFormula Forecasting;
    public static FinancialFormula MACD;
    public static FinancialFormula MassIndex;
    public static FinancialFormula MedianPrice;
    public static FinancialFormula MoneyFlow;
    public static FinancialFormula NegativeVolumeIndex;
    public static FinancialFormula OnBalanceVolume;
    public static FinancialFormula Performance;
    public static FinancialFormula PositiveVolumeIndex;
    public static FinancialFormula PriceVolumeTrend;
    public static FinancialFormula RateOfChange;
    public static FinancialFormula RelativeStrengthIndex;
    public static FinancialFormula MovingAverage;
    public static FinancialFormula StandardDeviation;
    public static FinancialFormula StochasticIndicator;
    public static FinancialFormula TriangularMovingAverage;
    public static FinancialFormula TRIX;
    public static FinancialFormula TypicalPrice;
    public static FinancialFormula VolatilityChaikins;
    public static FinancialFormula VolumeOscillator;
    public static FinancialFormula WeightedClose;
    public static FinancialFormula WeightedMovingAverage;
    public static FinancialFormula WilliamsR;
}
internal class Microsoft.Reporting.Chart.WebForms.FinancialMarker : object {
    private FinancialMarkerType markerType;
    private int firstPointIndex;
    private int secondPointIndex;
    private int firstYIndex;
    private int secondYIndex;
    private Color lineColor;
    private int lineWidth;
    private Color textColor;
    private Font textFont;
    private ChartDashStyle lineStyle;
    [BindableAttribute("True")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.FinancialMarkerType", "FibonacciArcs")]
[SRDescriptionAttribute("DescriptionAttributeFinancialMarker_MarkerType")]
[ParenthesizePropertyNameAttribute("True")]
public FinancialMarkerType MarkerType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("False")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("FinancialMarker")]
[SRDescriptionAttribute("DescriptionAttributeFinancialMarker_Name")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string Name { get; }
    [BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeFinancialMarker_FirstPointIndex")]
[ParenthesizePropertyNameAttribute("True")]
public int FirstPointIndex { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeFinancialMarker_SecondPointIndex")]
[ParenthesizePropertyNameAttribute("True")]
public int SecondPointIndex { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeFinancialMarker_FirstYIndex")]
public int FirstYIndex { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeFinancialMarker_SecondYIndex")]
public int SecondYIndex { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Gray")]
[SRDescriptionAttribute("DescriptionAttributeFinancialMarker_LineColor")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeFinancialMarker_TextColor")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRDescriptionAttribute("DescriptionAttributeFinancialMarker_Font")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeFinancialMarker_LineWidth")]
public int LineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeFinancialMarker_LineStyle")]
public ChartDashStyle LineStyle { get; public set; }
    public FinancialMarker(FinancialMarkerType markerType, int firstPointIndex, int secondPointIndex, int firstYIndex, int secondYIndex, Color lineColor, int lineWidth, Color textColor, Font textFont);
    public FinancialMarkerType get_MarkerType();
    public void set_MarkerType(FinancialMarkerType value);
    public string get_Name();
    public int get_FirstPointIndex();
    public void set_FirstPointIndex(int value);
    public int get_SecondPointIndex();
    public void set_SecondPointIndex(int value);
    public int get_FirstYIndex();
    public void set_FirstYIndex(int value);
    public int get_SecondYIndex();
    public void set_SecondYIndex(int value);
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public Font get_Font();
    public void set_Font(Font value);
    public int get_LineWidth();
    public void set_LineWidth(int value);
    public ChartDashStyle get_LineStyle();
    public void set_LineStyle(ChartDashStyle value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Chart.WebForms.FinancialMarkersCollection : object {
    private ArrayList array;
    internal Series series;
    private FinancialMarkers markers;
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public int Count { get; }
    public object SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    [SRDescriptionAttribute("DescriptionAttributeFinancialMarkersCollection_Item")]
public FinancialMarker Item { get; public set; }
    public int Add(FinancialMarkerType markerName, int firstPointIndex, int secondPointIndex, int firstYIndex, int secondYIndex, Color lineColor, int lineWidth, Color textColor, Font textFont);
    public int Add(FinancialMarkerType markerName, int firstPointIndex, int secondPointIndex, int firstYIndex, int secondYIndex, Color lineColor, int lineWidth);
    public int Add(FinancialMarkerType markerName, int firstPointIndex, int secondPointIndex, int firstYIndex, int secondYIndex);
    public int Add(FinancialMarkerType markerName, int firstPointIndex, int secondPointIndex);
    public sealed virtual int Add(object value);
    public void Insert(int index, FinancialMarkerType markerName, int firstPointIndex, int secondPointIndex, int firstYIndex, int secondYIndex, Color lineColor, int lineWidth, Color textColor, Font textFont);
    public void Insert(int index, FinancialMarkerType markerName, int firstPointIndex, int secondPointIndex, int firstYIndex, int secondYIndex, Color lineColor, int lineWidth);
    public void Insert(int index, FinancialMarkerType markerName, int firstPointIndex, int secondPointIndex, int firstYIndex, int secondYIndex);
    public void Insert(int index, FinancialMarkerType markerName, int firstPointIndex, int secondPointIndex);
    public void Insert(int index, FinancialMarker value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsFixedSize();
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public int IndexOf(FinancialMarker value);
    public bool Contains(FinancialMarker value);
    public void Remove(FinancialMarker value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Clear();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    internal void DrawMarkers(ChartGraphics graph, ChartPicture chart);
    public FinancialMarker get_Item(object parameter);
    public void set_Item(object parameter, FinancialMarker value);
    private void Invalidate();
}
internal enum Microsoft.Reporting.Chart.WebForms.FinancialMarkerType : Enum {
    public int value__;
    public static FinancialMarkerType FibonacciArcs;
    public static FinancialMarkerType TrendLine;
    public static FinancialMarkerType FibonacciFans;
    public static FinancialMarkerType FibonacciRetracements;
    public static FinancialMarkerType SpeedResistanceLines;
    public static FinancialMarkerType QuadrantLines;
}
internal class Microsoft.Reporting.Chart.WebForms.FontCache : object {
    private Dictionary`2<string, Font> fontCache;
    internal Font GetFont(string name, int size);
    protected virtual override void Finalize();
}
internal class Microsoft.Reporting.Chart.WebForms.FormatNumberHandler : MulticastDelegate {
    public FormatNumberHandler(object object, IntPtr method);
    public virtual string Invoke(object sender, double value, string format, ChartValueTypes valueType, int elementId, ChartElementType elementType);
    public virtual IAsyncResult BeginInvoke(object sender, double value, string format, ChartValueTypes valueType, int elementId, ChartElementType elementType, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.Chart.WebForms.FormulaData : ChartElement {
    internal static string IndexedSeriesLabelsSourceAttr;
    private bool ignoreEmptyPoints;
    private String[] extraParameters;
    internal FinancialMarkersCollection markers;
    private bool zeroXValues;
    private Statistics statistics;
    public bool IgnoreEmptyPoints { get; public set; }
    public bool StartFromFirst { get; public set; }
    public Statistics Statistics { get; }
    [EditorBrowsableAttribute("1")]
public void Formula(string formulaName, string parameters, string inputSeries, string outputSeries);
    private void CopyAxisLabels(Series[] inSeries, Series[] outSeries);
    [EditorBrowsableAttribute("1")]
public void Formula(string formulaName, Series inputSeries);
    [EditorBrowsableAttribute("1")]
public void Formula(string formulaName, Series inputSeries, Series outputSeries);
    [EditorBrowsableAttribute("1")]
public void Formula(string formulaName, string parameters, Series inputSeries, Series outputSeries);
    [EditorBrowsableAttribute("1")]
public void Formula(string formulaName, string inputSeries);
    [EditorBrowsableAttribute("1")]
public void Formula(string formulaName, string inputSeries, string outputSeries);
    private void SetDoubleArray(Series[] outputSeries, Int32[] valueIndex, Double[][] outputValues, String[][] outputLabels);
    private void ConvertToArrays(string inputString, Series[]& seiesArray, Int32[]& valueArray, bool inputSeries);
    private void GetDoubleArray(Series[] inputSeries, Int32[] valueIndex, Double[][]& output);
    private void GetDoubleArray(Series[] inputSeries, Int32[] valueIndex, Double[][]& output, bool ignoreZeroX);
    public void CopySeriesValues(string inputSeries, string outputSeries);
    private void RemoveEmptyValues(Double[][] input, Double[][]& output);
    private void InsertEmptyDataPoints(Double[][] input, Double[][] inputWithoutEmpty, Double[][]& output);
    private void SplitParameters(string parameters, String[]& parameterList);
    private bool DifferentNumberOfSeries(Double[][] input);
    internal void CheckXValuesAlignment(Series[] series);
    public void FormulaFinancial(FinancialFormula formulaName, string parameters, string inputSeries, string outputSeries);
    public void FormulaFinancial(FinancialFormula formulaName, Series inputSeries);
    public void FormulaFinancial(FinancialFormula formulaName, Series inputSeries, Series outputSeries);
    public void FormulaFinancial(FinancialFormula formulaName, string parameters, Series inputSeries, Series outputSeries);
    public void FormulaFinancial(FinancialFormula formulaName, string inputSeries);
    public void FormulaFinancial(FinancialFormula formulaName, string inputSeries, string outputSeries);
    public bool get_IgnoreEmptyPoints();
    public void set_IgnoreEmptyPoints(bool value);
    public bool get_StartFromFirst();
    public void set_StartFromFirst(bool value);
    public Statistics get_Statistics();
}
internal class Microsoft.Reporting.Chart.WebForms.Formulas.FinancialMarkers : object {
    private Font textFont;
    private Color textColor;
    private Color lineColor;
    private int lineWidth;
    private ChartDashStyle lineStyle;
    private bool axesSwitched;
    private bool drawText;
    internal void DrawMarkers(ChartGraphics graph, ChartPicture chart, FinancialMarkerType markerName, Series series, int firstPoint, int firstYValue, int secondPoint, int secondYValue, Color lineColor, int lineWidth, ChartDashStyle lineStyle, Color textColor, Font textFont);
    private void FibonacciArcs(ChartGraphics graph, PointF firstPoint, PointF secondPoint);
    private void FibonacciFans(ChartGraphics graph, PointF firstPoint, PointF secondPoint, ChartArea area);
    private void SpeedResistanceLines(ChartGraphics graph, PointF firstPoint, PointF secondPoint, ChartArea area);
    private void FibonacciRetracements(ChartGraphics graph, PointF firstPoint, PointF secondPoint, ChartArea area);
    private void QuadrantLines(ChartGraphics graph, PointF firstPoint, PointF secondPoint, ChartArea area);
    private void TrendLine(ChartGraphics graph, PointF firstPoint, PointF secondPoint);
}
internal class Microsoft.Reporting.Chart.WebForms.Formulas.FormulaRegistry : object {
    internal Hashtable registeredModules;
    private Hashtable createdModules;
    private ArrayList modulesNames;
    private IServiceContainer serviceContainer;
    public int Count { get; }
    public FormulaRegistry(IServiceContainer container);
    public void Register(string name, Type moduleType);
    [EditorBrowsableAttribute("1")]
public sealed virtual object GetService(Type serviceType);
    public IFormula GetFormulaModule(string name);
    public string GetModuleName(int index);
    public int get_Count();
}
internal class Microsoft.Reporting.Chart.WebForms.Formulas.GeneralFormulas : PriceIndicators {
    public string Name { get; }
    public virtual string get_Name();
    private void RuningTotal(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void RuningAverage(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    public virtual void Formula(string formulaName, Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
}
internal class Microsoft.Reporting.Chart.WebForms.Formulas.GeneralTechnicalIndicators : PriceIndicators {
    public string Name { get; }
    public virtual string get_Name();
    private void StandardDeviation(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void AverageTrueRange(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void EaseOfMovement(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void MassIndex(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void Performance(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void RateOfChange(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void RelativeStrengthIndex(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void Trix(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void Macd(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void CommodityChannelIndex(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    public virtual void Formula(string formulaName, Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
}
internal interface Microsoft.Reporting.Chart.WebForms.Formulas.IFormula {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual void Formula(string formulaName, Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
}
internal class Microsoft.Reporting.Chart.WebForms.Formulas.Oscillators : PriceIndicators {
    public string Name { get; }
    public virtual string get_Name();
    private void ChaikinOscillator(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void DetrendedPriceOscillator(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void VolatilityChaikins(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void VolumeOscillator(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    internal void StochasticIndicator(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    internal void WilliamsR(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    public virtual void Formula(string formulaName, Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
}
internal class Microsoft.Reporting.Chart.WebForms.Formulas.PriceIndicators : object {
    public string Name { get; }
    public virtual string get_Name();
    internal void MovingAverage(Double[] inputValues, Double[]& outputValues, int period, bool FromFirst);
    private void MovingAverage(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    internal void ExponentialMovingAverage(Double[] inputValues, Double[]& outputValues, int period, bool startFromFirst);
    private void ExponentialMovingAverage(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void TriangularMovingAverage(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void WeightedMovingAverage(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void BollingerBands(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void TypicalPrice(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void MedianPrice(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void WeightedClose(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void Envelopes(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    internal void StandardDeviation(Double[] inputValues, Double[]& outputValues, int period, bool startFromFirst);
    public void CheckNumOfValues(Double[][] inputValues, int numOfYValues);
    public virtual void Formula(string formulaName, Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
}
internal class Microsoft.Reporting.Chart.WebForms.Formulas.StatisticalAnalysis : object {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void Formula(string formulaName, Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void Anova(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void Correlation(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void Covariance(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void FTest(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void ZTest(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void TTest(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels, bool equalVariances);
    private void TTestPaired(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void TDistribution(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void FDistribution(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void NormalDistribution(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void TDistributionInverse(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void FDistributionInverse(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void NormalDistributionInverse(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void CheckNumOfPoints(Double[][] inputValues);
    private double Covar(Double[] arrayX, Double[] arrayY);
    private double GammLn(double n);
    private double BetaFunction(double m, double n);
    private double BetaCF(double a, double b, double x);
    private double NormalDistributionFunction(double t);
    private double BetaIncomplete(double a, double b, double x);
    private void Average(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void Variance(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void Median(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void BetaFunction(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void GammaFunction(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void Sort(Double[]& values);
    private double Median(Double[] values);
    private double Mean(Double[] values);
    private double Variance(Double[] values, bool sampleVariance);
    private double StudentsDistribution(double tValue, int n, bool oneTailed);
    private double NormalDistribution(double zValue);
    private double FDistribution(double x, int freedom1, int freedom2);
    private double StudentsDistributionInverse(double probability, int n);
    private double StudentsDistributionSearch(double probability, int n, int step, double start, double end);
    private double NormalDistributionInverse(double probability);
    private double FDistributionInverse(double probability, int m, int n);
    private double FDistributionSearch(double probability, int m, int n, int step, double start, double end);
}
internal class Microsoft.Reporting.Chart.WebForms.Formulas.TimeSeriesAndForecasting : object {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void Formula(string formulaName, Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void Forecasting(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void Regression(RegressionType regressionType, Double[][] inputValues, Double[][]& outputValues, int polynomialDegree, int forecastingPeriod);
    private void PolynomialRegression(RegressionType regressionType, Double[][] inputValues, Double[][]& outputValues, int polynomialDegree, int forecastingPeriod, double logInterval);
    private double Determinant(Double[][] inputDeterminant);
    private Double[][] MakeSubDeterminant(Double[][] inputDeterminant, int columnPos);
    private Double[][] CopyDeterminant(Double[][] inputDeterminant);
}
internal class Microsoft.Reporting.Chart.WebForms.Formulas.VolumeIndicators : PriceIndicators {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void Formula(string formulaName, Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList, String[][]& outLabels);
    private void MoneyFlow(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void PriceVolumeTrend(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void OnBalanceVolume(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void NegativeVolumeIndex(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    private void PositiveVolumeIndex(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
    internal void AccumulationDistribution(Double[][] inputValues, Double[][]& outputValues, String[] parameterList, String[] extraParameterList);
}
internal class Microsoft.Reporting.Chart.WebForms.FTestResult : object {
    internal double firstSeriesMean;
    internal double secondSeriesMean;
    internal double firstSeriesVariance;
    internal double secondSeriesVariance;
    internal double fValue;
    internal double probabilityFOneTail;
    internal double fCriticalValueOneTail;
    public double FirstSeriesMean { get; }
    public double SecondSeriesMean { get; }
    public double FirstSeriesVariance { get; }
    public double SecondSeriesVariance { get; }
    public double FValue { get; }
    public double ProbabilityFOneTail { get; }
    public double FCriticalValueOneTail { get; }
    public double get_FirstSeriesMean();
    public double get_SecondSeriesMean();
    public double get_FirstSeriesVariance();
    public double get_SecondSeriesVariance();
    public double get_FValue();
    public double get_ProbabilityFOneTail();
    public double get_FCriticalValueOneTail();
}
internal class Microsoft.Reporting.Chart.WebForms.GdiGraphics : object {
    private Graphics graphics;
    public Matrix Transform { get; public set; }
    public SmoothingMode SmoothingMode { get; public set; }
    public TextRenderingHint TextRenderingHint { get; public set; }
    public Region Clip { get; public set; }
    public bool IsClipEmpty { get; }
    public Graphics Graphics { get; public set; }
    public sealed virtual void DrawLine(Pen pen, PointF pt1, PointF pt2);
    public sealed virtual void DrawLine(Pen pen, float x1, float y1, float x2, float y2);
    public sealed virtual void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr);
    public sealed virtual void DrawEllipse(Pen pen, float x, float y, float width, float height);
    public sealed virtual void DrawCurve(Pen pen, PointF[] points, int offset, int numberOfSegments, float tension);
    public sealed virtual void DrawRectangle(Pen pen, int x, int y, int width, int height);
    public sealed virtual void DrawPolygon(Pen pen, PointF[] points);
    public sealed virtual void DrawString(string s, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    public sealed virtual void DrawString(string s, Font font, Brush brush, PointF point, StringFormat format);
    public sealed virtual void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs);
    public sealed virtual void DrawRectangle(Pen pen, float x, float y, float width, float height);
    public sealed virtual void DrawPath(Pen pen, GraphicsPath path);
    public sealed virtual void DrawPie(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual void DrawArc(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual void DrawImage(Image image, RectangleF rect);
    public sealed virtual void DrawEllipse(Pen pen, RectangleF rect);
    public sealed virtual void DrawLines(Pen pen, PointF[] points);
    public sealed virtual void FillEllipse(Brush brush, RectangleF rect);
    public sealed virtual void FillPath(Brush brush, GraphicsPath path);
    public sealed virtual void FillRegion(Brush brush, Region region);
    public sealed virtual void FillRectangle(Brush brush, RectangleF rect);
    public sealed virtual void FillRectangle(Brush brush, float x, float y, float width, float height);
    public sealed virtual void FillPolygon(Brush brush, PointF[] points);
    public sealed virtual void FillPie(Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    public sealed virtual SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat, Int32& charactersFitted, Int32& linesFilled);
    public sealed virtual SizeF MeasureString(string text, Font font);
    public sealed virtual GraphicsState Save();
    public sealed virtual void Restore(GraphicsState gstate);
    public sealed virtual void ResetClip();
    public sealed virtual void SetClip(RectangleF rect);
    public sealed virtual void SetClip(GraphicsPath path, CombineMode combineMode);
    public sealed virtual void TranslateTransform(float dx, float dy);
    public sealed virtual void BeginSelection(string hRef, string title);
    public sealed virtual void EndSelection();
    public sealed virtual Matrix get_Transform();
    public sealed virtual void set_Transform(Matrix value);
    public sealed virtual SmoothingMode get_SmoothingMode();
    public sealed virtual void set_SmoothingMode(SmoothingMode value);
    public sealed virtual TextRenderingHint get_TextRenderingHint();
    public sealed virtual void set_TextRenderingHint(TextRenderingHint value);
    public sealed virtual Region get_Clip();
    public sealed virtual void set_Clip(Region value);
    public sealed virtual bool get_IsClipEmpty();
    public sealed virtual Graphics get_Graphics();
    public sealed virtual void set_Graphics(Graphics value);
}
internal enum Microsoft.Reporting.Chart.WebForms.GradientType : Enum {
    public int value__;
    public static GradientType None;
    public static GradientType LeftRight;
    public static GradientType TopBottom;
    public static GradientType Center;
    public static GradientType DiagonalLeft;
    public static GradientType DiagonalRight;
    public static GradientType HorizontalCenter;
    public static GradientType VerticalCenter;
}
[DefaultPropertyAttribute("Enabled")]
[SRDescriptionAttribute("DescriptionAttributeGrid_Grid")]
internal class Microsoft.Reporting.Chart.WebForms.Grid : object {
    internal Axis axis;
    internal bool intervalOffsetChanged;
    internal bool intervalChanged;
    internal bool intervalTypeChanged;
    internal bool intervalOffsetTypeChanged;
    internal bool enabledChanged;
    internal double intervalOffset;
    internal double interval;
    internal DateTimeIntervalType intervalType;
    internal DateTimeIntervalType intervalOffsetType;
    internal Color borderColor;
    internal int borderWidth;
    internal ChartDashStyle borderStyle;
    internal bool enabled;
    internal bool majorGridTick;
    protected static double NumberOfIntervals;
    protected static double NumberOfDateTimeIntervals;
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeIntervalOffset3")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AxisElementIntervalValueConverter")]
public double IntervalOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeIntervalOffsetType6")]
[RefreshPropertiesAttribute("1")]
public DateTimeIntervalType IntervalOffsetType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeInterval6")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AxisElementIntervalValueConverter")]
[RefreshPropertiesAttribute("1")]
public double Interval { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeIntervalType3")]
[RefreshPropertiesAttribute("1")]
public DateTimeIntervalType IntervalType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLineColor5")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLineStyle9")]
public ChartDashStyle LineStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLineWidth8")]
public int LineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeEnabled5")]
public bool Enabled { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("False")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeDisabled")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Disabled { get; public set; }
    public Grid(Axis axis, bool major);
    internal void Initialize(Axis axis, bool major);
    internal void Invalidate();
    internal void Paint(ChartGraphics graph);
    private double GetLogMinimum(double current, Series axisSeries);
    private void DrawGrid(ChartGraphics graph, double current, int numberOfElements, int index);
    private void InitAnimation(CommonElements common, PointF point, ChartGraphics graph, int numberOfElements, int index);
    internal void PaintCustom(ChartGraphics graph);
    public double get_IntervalOffset();
    public void set_IntervalOffset(double value);
    public DateTimeIntervalType get_IntervalOffsetType();
    public void set_IntervalOffsetType(DateTimeIntervalType value);
    public double get_Interval();
    public void set_Interval(double value);
    public DateTimeIntervalType get_IntervalType();
    public void set_IntervalType(DateTimeIntervalType value);
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public ChartDashStyle get_LineStyle();
    public void set_LineStyle(ChartDashStyle value);
    public int get_LineWidth();
    public void set_LineWidth(int value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_Disabled();
    public void set_Disabled(bool value);
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Chart.WebForms.GridTicks : Enum {
    public int value__;
    public static GridTicks None;
    public static GridTicks TickMark;
    public static GridTicks Gridline;
    public static GridTicks All;
}
internal enum Microsoft.Reporting.Chart.WebForms.GroupingFunction : Enum {
    public int value__;
    public static GroupingFunction None;
    public static GroupingFunction Min;
    public static GroupingFunction Max;
    public static GroupingFunction Ave;
    public static GroupingFunction Sum;
    public static GroupingFunction First;
    public static GroupingFunction Last;
    public static GroupingFunction Center;
    public static GroupingFunction HiLoOpCl;
    public static GroupingFunction HiLo;
    public static GroupingFunction Count;
    public static GroupingFunction DistinctCount;
    public static GroupingFunction Variance;
    public static GroupingFunction Deviation;
}
internal class Microsoft.Reporting.Chart.WebForms.HitTestResult : object {
    private object obj;
    private Series series;
    private int dataPoint;
    private ChartArea chartArea;
    private Axis axis;
    private ChartElementType type;
    private object subObject;
    public Series Series { get; public set; }
    public int PointIndex { get; public set; }
    public ChartArea ChartArea { get; public set; }
    public Axis Axis { get; public set; }
    public ChartElementType ChartElementType { get; public set; }
    public object Object { get; public set; }
    public object SubObject { get; public set; }
    public Series get_Series();
    public void set_Series(Series value);
    public int get_PointIndex();
    public void set_PointIndex(int value);
    public ChartArea get_ChartArea();
    public void set_ChartArea(ChartArea value);
    public Axis get_Axis();
    public void set_Axis(Axis value);
    public ChartElementType get_ChartElementType();
    public void set_ChartElementType(ChartElementType value);
    public object get_Object();
    public void set_Object(object value);
    public object get_SubObject();
    public void set_SubObject(object value);
}
[SRDescriptionAttribute("DescriptionAttributeHorizontalLineAnnotation_HorizontalLineAnnotation")]
internal class Microsoft.Reporting.Chart.WebForms.HorizontalLineAnnotation : LineAnnotation {
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType4")]
public string AnnotationType { get; }
    public virtual string get_AnnotationType();
    internal virtual void AdjustLineCoordinates(PointF& point1, PointF& point2, RectangleF& selectionRect);
    internal virtual RectangleF GetContentPosition();
}
internal class Microsoft.Reporting.Chart.WebForms.HotRegion : object {
    private GraphicsPath path;
    private bool relativeCoordinates;
    private RectangleF boundingRectangle;
    private object selectedObject;
    private int pointIndex;
    private string seriesName;
    private ChartElementType type;
    private object selectedSubObject;
    internal GraphicsPath Path { get; internal set; }
    internal bool RelativeCoordinates { get; internal set; }
    internal RectangleF BoundingRectangle { get; internal set; }
    internal object SelectedObject { get; internal set; }
    internal object SelectedSubObject { get; internal set; }
    internal int PointIndex { get; internal set; }
    internal string SeriesName { get; internal set; }
    internal ChartElementType Type { get; internal set; }
    internal GraphicsPath get_Path();
    internal void set_Path(GraphicsPath value);
    internal bool get_RelativeCoordinates();
    internal void set_RelativeCoordinates(bool value);
    internal RectangleF get_BoundingRectangle();
    internal void set_BoundingRectangle(RectangleF value);
    internal object get_SelectedObject();
    internal void set_SelectedObject(object value);
    internal object get_SelectedSubObject();
    internal void set_SelectedSubObject(object value);
    internal int get_PointIndex();
    internal void set_PointIndex(int value);
    internal string get_SeriesName();
    internal void set_SeriesName(string value);
    internal ChartElementType get_Type();
    internal void set_Type(ChartElementType value);
}
internal class Microsoft.Reporting.Chart.WebForms.HotRegionsList : object {
    private ProcessMode processChartMode;
    private ArrayList regionList;
    private CommonElements common;
    internal bool hitTestCalled;
    internal ProcessMode ProcessChartMode { get; internal set; }
    internal ArrayList List { get; internal set; }
    public HotRegionsList(CommonElements common);
    internal ProcessMode get_ProcessChartMode();
    internal void set_ProcessChartMode(ProcessMode value);
    internal ArrayList get_List();
    internal void set_List(ArrayList value);
    internal void CheckHotRegions(int x, int y, ChartElementType requestedElement, bool ignoreTransparent, String& series, Int32& point, ChartElementType& type, Object& obj, Object& subObj);
    private bool IsElementTransparent(HotRegion region);
    public void AddHotRegion(ChartGraphics graph, RectangleF rectSize, DataPoint point, string seriesName, int pointIndex);
    internal void AddHotRegion(int insertIndex, ChartGraphics graph, RectangleF rectSize, DataPoint point, string seriesName, int pointIndex);
    internal void AddHotRegion(GraphicsPath path, bool relativePath, ChartGraphics graph, DataPoint point, string seriesName, int pointIndex);
    internal void AddHotRegion(int insertIndex, GraphicsPath path, bool relativePath, ChartGraphics graph, DataPoint point, string seriesName, int pointIndex);
    internal void AddHotRegion(ChartGraphics graph, GraphicsPath path, bool relativePath, Single[] coord, DataPoint point, string seriesName, int pointIndex);
    internal void AddHotRegion(int insertIndex, ChartGraphics graph, float x, float y, float radius, DataPoint point, string seriesName, int pointIndex);
    internal void AddHotRegion(ChartGraphics graph, RectangleF rectArea, string toolTip, string hRef, string mapAreaAttributes, object selectedObject, ChartElementType type, string series);
    internal void AddHotRegion(ChartGraphics graph, RectangleF rectArea, string toolTip, string hRef, string mapAreaAttributes, object selectedObject, object selectedSubObject, ChartElementType type, string series);
    internal void AddHotRegion(ChartGraphics graph, GraphicsPath path, bool relativePath, string toolTip, string hRef, string mapAreaAttributes, object selectedObject, ChartElementType type);
    internal void AddHotRegion(RectangleF rectArea, object selectedObject, ChartElementType type, bool relativeCoordinates);
    internal void AddHotRegion(RectangleF rectArea, object selectedObject, ChartElementType type, bool relativeCoordinates, bool insertAtBeginning);
    internal void AddHotRegion(GraphicsPath path, bool relativePath, ChartGraphics graph, ChartElementType type, object selectedObject);
    internal int FindInsertIndex();
}
internal interface Microsoft.Reporting.Chart.WebForms.IChart {
    public AnnotationCollection Annotations { get; }
    public AntiAlias AntiAlias { get; public set; }
    public AntiAliasingTypes AntiAliasing { get; public set; }
    public Color BackColor { get; public set; }
    public Color BackGradientEndColor { get; public set; }
    public GradientType BackGradientType { get; public set; }
    public ChartHatchStyle BackHatchStyle { get; public set; }
    public string BackImage { get; public set; }
    public ChartImageAlign BackImageAlign { get; public set; }
    public ChartImageWrapMode BackImageMode { get; public set; }
    public Color BackImageTransparentColor { get; public set; }
    public Color BorderColor { get; public set; }
    public Color BorderlineColor { get; public set; }
    public ChartDashStyle BorderlineStyle { get; public set; }
    public int BorderlineWidth { get; public set; }
    public BorderSkinAttributes BorderSkin { get; public set; }
    public ChartDashStyle BorderStyle { get; public set; }
    public int BorderWidth { get; public set; }
    public string BuildNumber { get; public set; }
    public ChartAreaCollection ChartAreas { get; }
    public string CodeException { get; public set; }
    public DataManipulator DataManipulator { get; }
    public ChartEdition Edition { get; }
    public Color ForeColor { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public float ImageResolution { get; public set; }
    public NamedImagesCollection Images { get; }
    public ChartImageType ImageType { get; public set; }
    public string ImageUrl { get; public set; }
    public Legend Legend { get; public set; }
    public LegendCollection Legends { get; }
    public MapAreasCollection MapAreas { get; }
    public string MultiValueSeparator { get; public set; }
    public Title NoDataMessage { get; public set; }
    public ChartColorPalette Palette { get; public set; }
    public Color[] PaletteCustomColors { get; public set; }
    public double RenderingDpiX { get; public set; }
    public double RenderingDpiY { get; public set; }
    public bool ReverseSeriesOrder { get; public set; }
    public SeriesCollection Series { get; }
    public bool SoftShadows { get; public set; }
    public bool SuppressCodeExceptions { get; public set; }
    public bool SuppressExceptions { get; public set; }
    public TextAntiAliasingQuality TextAntiAliasingQuality { get; public set; }
    public string Title { get; public set; }
    public Font TitleFont { get; public set; }
    public Color TitleFontColor { get; public set; }
    public TitleCollection Titles { get; }
    public abstract virtual void AlignDataPointsByAxisLabel();
    public abstract virtual void AlignDataPointsByAxisLabel(PointsSortOrder sortingOrder);
    public abstract virtual void AlignDataPointsByAxisLabel(string series);
    public abstract virtual void AlignDataPointsByAxisLabel(string series, PointsSortOrder sortingOrder);
    public abstract virtual void ApplyPaletteColors();
    public abstract virtual object GetService(Type serviceType);
    public abstract virtual HitTestResult HitTest(int x, int y);
    public abstract virtual HitTestResult HitTest(int x, int y, ChartElementType requestedElement);
    public abstract virtual HitTestResult HitTest(int x, int y, bool ignoreTransparent);
    public abstract virtual void RaisePostBackEvent(string eventArgument);
    public abstract virtual void ResetAutoValues();
    public abstract virtual void ResetPaletteCustomColors();
    public abstract virtual void SaveXml(string name);
    public abstract virtual void Select(int x, int y, String& series, Int32& point);
    public abstract virtual bool ShouldSerializePaletteCustomColors();
    public abstract virtual AnnotationCollection get_Annotations();
    public abstract virtual AntiAlias get_AntiAlias();
    public abstract virtual void set_AntiAlias(AntiAlias value);
    public abstract virtual AntiAliasingTypes get_AntiAliasing();
    public abstract virtual void set_AntiAliasing(AntiAliasingTypes value);
    public abstract virtual Color get_BackColor();
    public abstract virtual void set_BackColor(Color value);
    public abstract virtual Color get_BackGradientEndColor();
    public abstract virtual void set_BackGradientEndColor(Color value);
    public abstract virtual GradientType get_BackGradientType();
    public abstract virtual void set_BackGradientType(GradientType value);
    public abstract virtual ChartHatchStyle get_BackHatchStyle();
    public abstract virtual void set_BackHatchStyle(ChartHatchStyle value);
    public abstract virtual string get_BackImage();
    public abstract virtual void set_BackImage(string value);
    public abstract virtual ChartImageAlign get_BackImageAlign();
    public abstract virtual void set_BackImageAlign(ChartImageAlign value);
    public abstract virtual ChartImageWrapMode get_BackImageMode();
    public abstract virtual void set_BackImageMode(ChartImageWrapMode value);
    public abstract virtual Color get_BackImageTransparentColor();
    public abstract virtual void set_BackImageTransparentColor(Color value);
    public abstract virtual Color get_BorderColor();
    public abstract virtual void set_BorderColor(Color value);
    public abstract virtual Color get_BorderlineColor();
    public abstract virtual void set_BorderlineColor(Color value);
    public abstract virtual ChartDashStyle get_BorderlineStyle();
    public abstract virtual void set_BorderlineStyle(ChartDashStyle value);
    public abstract virtual int get_BorderlineWidth();
    public abstract virtual void set_BorderlineWidth(int value);
    public abstract virtual BorderSkinAttributes get_BorderSkin();
    public abstract virtual void set_BorderSkin(BorderSkinAttributes value);
    public abstract virtual ChartDashStyle get_BorderStyle();
    public abstract virtual void set_BorderStyle(ChartDashStyle value);
    public abstract virtual int get_BorderWidth();
    public abstract virtual void set_BorderWidth(int value);
    public abstract virtual string get_BuildNumber();
    public abstract virtual void set_BuildNumber(string value);
    public abstract virtual ChartAreaCollection get_ChartAreas();
    public abstract virtual string get_CodeException();
    public abstract virtual void set_CodeException(string value);
    public abstract virtual DataManipulator get_DataManipulator();
    public abstract virtual ChartEdition get_Edition();
    public abstract virtual Color get_ForeColor();
    public abstract virtual void set_ForeColor(Color value);
    public abstract virtual int get_Width();
    public abstract virtual void set_Width(int value);
    public abstract virtual int get_Height();
    public abstract virtual void set_Height(int value);
    public abstract virtual float get_ImageResolution();
    public abstract virtual void set_ImageResolution(float value);
    public abstract virtual NamedImagesCollection get_Images();
    public abstract virtual ChartImageType get_ImageType();
    public abstract virtual void set_ImageType(ChartImageType value);
    public abstract virtual string get_ImageUrl();
    public abstract virtual void set_ImageUrl(string value);
    public abstract virtual Legend get_Legend();
    public abstract virtual void set_Legend(Legend value);
    public abstract virtual LegendCollection get_Legends();
    public abstract virtual MapAreasCollection get_MapAreas();
    public abstract virtual string get_MultiValueSeparator();
    public abstract virtual void set_MultiValueSeparator(string value);
    public abstract virtual Title get_NoDataMessage();
    public abstract virtual void set_NoDataMessage(Title value);
    public abstract virtual ChartColorPalette get_Palette();
    public abstract virtual void set_Palette(ChartColorPalette value);
    public abstract virtual Color[] get_PaletteCustomColors();
    public abstract virtual void set_PaletteCustomColors(Color[] value);
    public abstract virtual double get_RenderingDpiX();
    public abstract virtual void set_RenderingDpiX(double value);
    public abstract virtual double get_RenderingDpiY();
    public abstract virtual void set_RenderingDpiY(double value);
    public abstract virtual bool get_ReverseSeriesOrder();
    public abstract virtual void set_ReverseSeriesOrder(bool value);
    public abstract virtual SeriesCollection get_Series();
    public abstract virtual bool get_SoftShadows();
    public abstract virtual void set_SoftShadows(bool value);
    public abstract virtual bool get_SuppressCodeExceptions();
    public abstract virtual void set_SuppressCodeExceptions(bool value);
    public abstract virtual bool get_SuppressExceptions();
    public abstract virtual void set_SuppressExceptions(bool value);
    public abstract virtual TextAntiAliasingQuality get_TextAntiAliasingQuality();
    public abstract virtual void set_TextAntiAliasingQuality(TextAntiAliasingQuality value);
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual Font get_TitleFont();
    public abstract virtual void set_TitleFont(Font value);
    public abstract virtual Color get_TitleFontColor();
    public abstract virtual void set_TitleFontColor(Color value);
    public abstract virtual TitleCollection get_Titles();
}
internal interface Microsoft.Reporting.Chart.WebForms.IChartAnimationEngine {
    public abstract virtual void DrawLineA(Pen pen, ColorA color, PointA point1, PointA point2);
    public abstract virtual void DrawEllipseA(Pen pen, ColorA color, RectangleA rect);
    public abstract virtual void DrawPolygonA(Pen pen, ColorA color, PointA[] points);
    public abstract virtual void DrawRectangleA(Pen pen, ColorA color, RectangleA rect);
    public abstract virtual void DrawStringA(string s, Font font, Brush brush, StringFormat format, ColorA colorA, RectangleA rectA);
    public abstract virtual void DrawStringA(string s, Font font, Brush brush, StringFormat format, ColorA colorA, PointA pointA);
    public abstract virtual void DrawImageA(Image image, RectangleA destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs);
    public abstract virtual void FillRectangleA(Brush brush, ColorA color, ColorA secondColor, RectangleA rect);
    public abstract virtual void FillEllipseA(Brush brush, ColorA color, ColorA secondColor, RectangleA rect);
    public abstract virtual void FillPolygonA(Brush brush, ColorA color, ColorA secondColor, PointA[] points);
}
internal interface Microsoft.Reporting.Chart.WebForms.IChartRenderingEngine {
    public Matrix Transform { get; public set; }
    public SmoothingMode SmoothingMode { get; public set; }
    public TextRenderingHint TextRenderingHint { get; public set; }
    public Region Clip { get; public set; }
    public Graphics Graphics { get; public set; }
    public bool IsClipEmpty { get; }
    public abstract virtual void DrawLine(Pen pen, PointF pt1, PointF pt2);
    public abstract virtual void DrawLine(Pen pen, float x1, float y1, float x2, float y2);
    public abstract virtual void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr);
    public abstract virtual void DrawEllipse(Pen pen, float x, float y, float width, float height);
    public abstract virtual void DrawCurve(Pen pen, PointF[] points, int offset, int numberOfSegments, float tension);
    public abstract virtual void DrawRectangle(Pen pen, int x, int y, int width, int height);
    public abstract virtual void DrawPolygon(Pen pen, PointF[] points);
    public abstract virtual void DrawString(string s, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    public abstract virtual void DrawString(string s, Font font, Brush brush, PointF point, StringFormat format);
    public abstract virtual void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs);
    public abstract virtual void DrawRectangle(Pen pen, float x, float y, float width, float height);
    public abstract virtual void DrawPath(Pen pen, GraphicsPath path);
    public abstract virtual void DrawPie(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public abstract virtual void DrawArc(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public abstract virtual void DrawImage(Image image, RectangleF rect);
    public abstract virtual void DrawEllipse(Pen pen, RectangleF rect);
    public abstract virtual void DrawLines(Pen pen, PointF[] points);
    public abstract virtual void FillEllipse(Brush brush, RectangleF rect);
    public abstract virtual void FillPath(Brush brush, GraphicsPath path);
    public abstract virtual void FillRegion(Brush brush, Region region);
    public abstract virtual void FillRectangle(Brush brush, RectangleF rect);
    public abstract virtual void FillRectangle(Brush brush, float x, float y, float width, float height);
    public abstract virtual void FillPolygon(Brush brush, PointF[] points);
    public abstract virtual void FillPie(Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public abstract virtual SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    public abstract virtual SizeF MeasureString(string text, Font font);
    public abstract virtual SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat, Int32& charactersFitted, Int32& linesFilled);
    public abstract virtual GraphicsState Save();
    public abstract virtual void Restore(GraphicsState gstate);
    public abstract virtual void ResetClip();
    public abstract virtual void SetClip(RectangleF rect);
    public abstract virtual void SetClip(GraphicsPath path, CombineMode combineMode);
    public abstract virtual void TranslateTransform(float dx, float dy);
    public abstract virtual void BeginSelection(string hRef, string title);
    public abstract virtual void EndSelection();
    public abstract virtual Matrix get_Transform();
    public abstract virtual void set_Transform(Matrix value);
    public abstract virtual SmoothingMode get_SmoothingMode();
    public abstract virtual void set_SmoothingMode(SmoothingMode value);
    public abstract virtual TextRenderingHint get_TextRenderingHint();
    public abstract virtual void set_TextRenderingHint(TextRenderingHint value);
    public abstract virtual Region get_Clip();
    public abstract virtual void set_Clip(Region value);
    public abstract virtual Graphics get_Graphics();
    public abstract virtual void set_Graphics(Graphics value);
    public abstract virtual bool get_IsClipEmpty();
}
internal interface Microsoft.Reporting.Chart.WebForms.IDataPointFilter {
    public abstract virtual bool FilterDataPoint(DataPoint point, Series series, int pointIndex);
}
[SRDescriptionAttribute("DescriptionAttributeImageAnnotation_ImageAnnotation")]
internal class Microsoft.Reporting.Chart.WebForms.ImageAnnotation : Annotation {
    private string imageName;
    private ChartImageWrapMode imageMode;
    private Color imageTransparentColor;
    [SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeImageAnnotation_Image")]
public string Image { get; public set; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeImageAnnotation_ImageMode")]
public ChartImageWrapMode ImageMode { get; public set; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeImageAnnotation_ImageTransparentColor")]
public Color ImageTransparentColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeImage")]
[DefaultValueAttribute("System.Drawing.ContentAlignment", "MiddleCenter")]
[SRDescriptionAttribute("DescriptionAttributeImageAnnotation_Alignment")]
public ContentAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType4")]
public string AnnotationType { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ParenthesizePropertyNameAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle3")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeImageAnnotation_LineWidth")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRDescriptionAttribute("DescriptionAttributeImageAnnotation_LineWidth")]
public Font TextFont { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.TextStyle", "Default")]
[SRDescriptionAttribute("DescriptionAttributeImageAnnotation_LineWidth")]
public TextStyle TextStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeImageAnnotation_LineWidth")]
[NotifyParentPropertyAttribute("True")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeImageAnnotation_LineWidth")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeImageAnnotation_LineWidth")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeImageAnnotation_LineWidth")]
public Color BackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeImageAnnotation_LineWidth")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("1")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeImageAnnotation_LineWidth")]
public int LineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLineStyle6")]
public ChartDashStyle LineStyle { get; public set; }
    public virtual string get_Image();
    public virtual void set_Image(string value);
    public ChartImageWrapMode get_ImageMode();
    public void set_ImageMode(ChartImageWrapMode value);
    public Color get_ImageTransparentColor();
    public void set_ImageTransparentColor(Color value);
    public virtual ContentAlignment get_Alignment();
    public virtual void set_Alignment(ContentAlignment value);
    public virtual string get_AnnotationType();
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
    public virtual Color get_TextColor();
    public virtual void set_TextColor(Color value);
    public virtual Font get_TextFont();
    public virtual void set_TextFont(Font value);
    public virtual TextStyle get_TextStyle();
    public virtual void set_TextStyle(TextStyle value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ChartHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(ChartHatchStyle value);
    public virtual GradientType get_BackGradientType();
    public virtual void set_BackGradientType(GradientType value);
    public virtual Color get_BackGradientEndColor();
    public virtual void set_BackGradientEndColor(Color value);
    public virtual Color get_LineColor();
    public virtual void set_LineColor(Color value);
    public virtual int get_LineWidth();
    public virtual void set_LineWidth(int value);
    public virtual ChartDashStyle get_LineStyle();
    public virtual void set_LineStyle(ChartDashStyle value);
    internal virtual void Paint(Chart chart, ChartGraphics graphics);
    private ChartImageAlign GetImageAlignment(ContentAlignment alignment);
    internal virtual RectangleF GetContentPosition();
}
internal interface Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes {
    public string ToolTip { get; public set; }
    public string Href { get; public set; }
    public string MapAreaAttributes { get; public set; }
    public object Tag { get; public set; }
    public abstract virtual void set_ToolTip(string value);
    public abstract virtual string get_ToolTip();
    public abstract virtual void set_Href(string value);
    public abstract virtual string get_Href();
    public abstract virtual void set_MapAreaAttributes(string value);
    public abstract virtual string get_MapAreaAttributes();
    public abstract virtual void set_Tag(object value);
    public abstract virtual object get_Tag();
}
internal enum Microsoft.Reporting.Chart.WebForms.IntervalAutoMode : Enum {
    public int value__;
    public static IntervalAutoMode FixedCount;
    public static IntervalAutoMode VariableCount;
}
internal enum Microsoft.Reporting.Chart.WebForms.IntervalType : Enum {
    public int value__;
    public static IntervalType Number;
    public static IntervalType Years;
    public static IntervalType Months;
    public static IntervalType Weeks;
    public static IntervalType Days;
    public static IntervalType Hours;
    public static IntervalType Minutes;
    public static IntervalType Seconds;
    public static IntervalType Milliseconds;
}
internal interface Microsoft.Reporting.Chart.WebForms.ITraceContext {
    public bool TraceEnabled { get; }
    public abstract virtual bool get_TraceEnabled();
    public abstract virtual void Write(string category, string message);
}
[SRDescriptionAttribute("DescriptionAttributeLabel_Label")]
[DefaultPropertyAttribute("Enabled")]
internal class Microsoft.Reporting.Chart.WebForms.Label : ChartElement {
    internal Axis axis;
    private bool enabled;
    internal double intervalOffset;
    internal double interval;
    internal DateTimeIntervalType intervalType;
    internal DateTimeIntervalType intervalOffsetType;
    internal Font font;
    private Color fontColor;
    internal int fontAngle;
    internal bool offsetLabels;
    private bool showEndLabels;
    private bool truncatedLabels;
    private string format;
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeLabel_IntervalOffset")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AxisElementIntervalValueConverter")]
public double IntervalOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLabel_IntervalOffsetType")]
[RefreshPropertiesAttribute("1")]
public DateTimeIntervalType IntervalOffsetType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeLabel_Interval")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AxisElementIntervalValueConverter")]
public double Interval { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLabel_IntervalType")]
[RefreshPropertiesAttribute("1")]
public DateTimeIntervalType IntervalType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRDescriptionAttribute("DescriptionAttributeLabel_Font")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLabel_FontColor")]
[NotifyParentPropertyAttribute("True")]
public Color FontColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeLabel_FontAngle")]
[RefreshPropertiesAttribute("1")]
public int FontAngle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeLabel_OffsetLabels")]
[RefreshPropertiesAttribute("1")]
public bool OffsetLabels { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLabel_ShowEndLabels")]
public bool ShowEndLabels { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeLabel_TruncatedLabels")]
public bool TruncatedLabels { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeLabel_Format")]
public string Format { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLabel_Enabled")]
public bool Enabled { get; public set; }
    public Label(Axis axis);
    internal void PaintCircular(ChartGraphics graph);
    internal static RectangleF GetLabelPosition(ChartGraphics graph, PointF position, SizeF size, StringFormat format);
    internal void Paint(ChartGraphics graph, bool backElements);
    private void InitAnimation(ChartGraphics graph, int numberOfElements, int index);
    private RectangleF GetAllLabelsRect(ChartArea area, AxisPosition position, StringFormat& stringFormat);
    private AxisPosition GetLabelsPosition(ChartArea area, Axis axis);
    internal void Paint3D(ChartGraphics graph, bool backElements);
    internal Axis GetAxis();
    internal void Invalidate();
    public double get_IntervalOffset();
    public void set_IntervalOffset(double value);
    public DateTimeIntervalType get_IntervalOffsetType();
    public void set_IntervalOffsetType(DateTimeIntervalType value);
    public double get_Interval();
    public void set_Interval(double value);
    public DateTimeIntervalType get_IntervalType();
    public void set_IntervalType(DateTimeIntervalType value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_FontColor();
    public void set_FontColor(Color value);
    public int get_FontAngle();
    public void set_FontAngle(int value);
    public bool get_OffsetLabels();
    public void set_OffsetLabels(bool value);
    public bool get_ShowEndLabels();
    public void set_ShowEndLabels(bool value);
    public bool get_TruncatedLabels();
    public void set_TruncatedLabels(bool value);
    public string get_Format();
    public void set_Format(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Chart.WebForms.LabelAlignmentTypes : Enum {
    public int value__;
    public static LabelAlignmentTypes Top;
    public static LabelAlignmentTypes Bottom;
    public static LabelAlignmentTypes Right;
    public static LabelAlignmentTypes Left;
    public static LabelAlignmentTypes TopLeft;
    public static LabelAlignmentTypes TopRight;
    public static LabelAlignmentTypes BottomLeft;
    public static LabelAlignmentTypes BottomRight;
    public static LabelAlignmentTypes Center;
}
[SRDescriptionAttribute("DescriptionAttributeLabelCalloutStyle_LabelCalloutStyle")]
internal enum Microsoft.Reporting.Chart.WebForms.LabelCalloutStyle : Enum {
    public int value__;
    public static LabelCalloutStyle None;
    public static LabelCalloutStyle Underlined;
    public static LabelCalloutStyle Box;
}
internal enum Microsoft.Reporting.Chart.WebForms.LabelMark : Enum {
    public int value__;
    public static LabelMark None;
    public static LabelMark SideMark;
    public static LabelMark LineSideMark;
    public static LabelMark Box;
}
[SRDescriptionAttribute("DescriptionAttributeLabelOutsidePlotAreaStyle_LabelOutsidePlotAreaStyle")]
internal enum Microsoft.Reporting.Chart.WebForms.LabelOutsidePlotAreaStyle : Enum {
    public int value__;
    public static LabelOutsidePlotAreaStyle Yes;
    public static LabelOutsidePlotAreaStyle No;
    public static LabelOutsidePlotAreaStyle Partial;
}
internal enum Microsoft.Reporting.Chart.WebForms.LabelRow : Enum {
    public int value__;
    public static LabelRow First;
    public static LabelRow Second;
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Chart.WebForms.LabelsAutoFitStyles : Enum {
    public int value__;
    public static LabelsAutoFitStyles None;
    public static LabelsAutoFitStyles IncreaseFont;
    public static LabelsAutoFitStyles DecreaseFont;
    public static LabelsAutoFitStyles OffsetLabels;
    public static LabelsAutoFitStyles LabelsAngleStep30;
    public static LabelsAutoFitStyles LabelsAngleStep45;
    public static LabelsAutoFitStyles LabelsAngleStep90;
    public static LabelsAutoFitStyles WordWrap;
}
[SRDescriptionAttribute("DescriptionAttributeLegend_Legend")]
[DefaultPropertyAttribute("Enabled")]
internal class Microsoft.Reporting.Chart.WebForms.Legend : ChartElement {
    private ElementPosition position;
    private bool enabled;
    private LegendStyle legendStyle;
    private LegendTableStyle legendTableStyle;
    private LegendItemsCollection customLegends;
    private ChartHatchStyle backHatchStyle;
    private string backImage;
    private ChartImageWrapMode backImageMode;
    private Color backImageTranspColor;
    private ChartImageAlign backImageAlign;
    private GradientType backGradientType;
    private Color backGradientEndColor;
    private Color borderColor;
    private Color backColor;
    private int borderWidth;
    private ChartDashStyle borderStyle;
    private Font font;
    private Color fontColor;
    private StringAlignment legendAlignment;
    private LegendDocking legendDocking;
    private int shadowOffset;
    private Color shadowColor;
    private bool autoFitText;
    private string name;
    private string dockToChartArea;
    private bool dockInsideChartArea;
    internal LegendItemsCollection legendItems;
    private SizeF sizeLargestItemText;
    private SizeF sizeAverageItemText;
    private SizeF sizeItemImage;
    private int itemColumns;
    private SizeF itemCellSize;
    internal Font autofitFont;
    private bool equallySpacedItems;
    private bool interlacedRows;
    private Color interlacedRowsColor;
    private Size offset;
    private float maximumLegendAutoSize;
    private PointF animationLocationAdjustment;
    private int textWrapThreshold;
    private int autoFitFontSizeAdjustment;
    private LegendCellColumnCollection cellColumns;
    private AutoBool reversed;
    private string title;
    private Color titleColor;
    private Color titleBackColor;
    private Font titleFont;
    private StringAlignment titleAlignment;
    private LegendSeparatorType titleSeparator;
    private Color titleSeparatorColor;
    private LegendSeparatorType headerSeparator;
    private Color headerSeparatorColor;
    private LegendSeparatorType itemColumnSeparator;
    private Color itemColumnSeparatorColor;
    private int itemColumnSpacing;
    private int itemColumnSpacingRel;
    private Rectangle titlePosition;
    private Rectangle headerPosition;
    private int autoFitMinFontSize;
    private int horizontalSpaceLeft;
    private int verticalSpaceLeft;
    private Int32[0...,0...] subColumnSizes;
    private Int32[0...,0...] cellHeights;
    private Int32[] numberOfRowsPerColumn;
    private int numberOfLegendItemsToProcess;
    private Rectangle legendItemsAreaPosition;
    private bool legendItemsTruncated;
    private int truncatedDotsSize;
    private int numberOfCells;
    internal Size singleWCharacterSize;
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_Name")]
[NotifyParentPropertyAttribute("True")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttributeDocking")]
[BindableAttribute("True")]
[DefaultValueAttribute("NotSet")]
[SRDescriptionAttribute("DescriptionAttributeLegend_DockToChartArea")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.LegendAreaNameConverter")]
[NotifyParentPropertyAttribute("True")]
public string DockToChartArea { get; public set; }
    [SRCategoryAttribute("CategoryAttributeDocking")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_DockInsideChartArea")]
[NotifyParentPropertyAttribute("True")]
public bool DockInsideChartArea { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_Position")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.ElementPosition", "Auto")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.ElementPositionConverter")]
[SerializationVisibilityAttribute("2")]
public ElementPosition Position { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeLegend_EquallySpacedItems")]
[NotifyParentPropertyAttribute("True")]
public bool EquallySpacedItems { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_Enabled")]
[NotifyParentPropertyAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
public bool Enabled { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_AutoFitText")]
[NotifyParentPropertyAttribute("True")]
public bool AutoFitText { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegend_LegendStyle")]
[NotifyParentPropertyAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
public LegendStyle LegendStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("7")]
[SRDescriptionAttribute("DescriptionAttributeLegend_AutoFitMinFontSize")]
public int AutoFitMinFontSize { get; public set; }
    [SRCategoryAttribute("CategoryAttributeDocking")]
[DefaultValueAttribute("50")]
[SRDescriptionAttribute("DescriptionAttributeLegend_MaxAutoSize")]
public float MaxAutoSize { get; public set; }
    [SRCategoryAttribute("CategoryAttributeCellColumns")]
[SRDescriptionAttribute("DescriptionAttributeLegend_CellColumns")]
public LegendCellColumnCollection CellColumns { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TableStyle")]
[NotifyParentPropertyAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
public LegendTableStyle TableStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeCellColumns")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.LegendSeparatorType", "None")]
[SRDescriptionAttribute("DescriptionAttributeLegend_HeaderSeparator")]
public LegendSeparatorType HeaderSeparator { get; public set; }
    [SRCategoryAttribute("CategoryAttributeCellColumns")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLegend_HeaderSeparatorColor")]
public Color HeaderSeparatorColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeCellColumns")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.LegendSeparatorType", "None")]
[SRDescriptionAttribute("DescriptionAttributeLegend_ItemColumnSeparator")]
public LegendSeparatorType ItemColumnSeparator { get; public set; }
    [SRCategoryAttribute("CategoryAttributeCellColumns")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLegend_ItemColumnSeparatorColor")]
public Color ItemColumnSeparatorColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeCellColumns")]
[DefaultValueAttribute("50")]
[SRDescriptionAttribute("DescriptionAttributeLegend_ItemColumnSpacing")]
public int ItemColumnSpacing { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "Transparent")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_BackColor")]
[NotifyParentPropertyAttribute("True")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_BorderColor")]
[NotifyParentPropertyAttribute("True")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegend_BorderStyle")]
[NotifyParentPropertyAttribute("True")]
public ChartDashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLegend_BorderWidth")]
[NotifyParentPropertyAttribute("True")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeLegendBackImage7")]
[NotifyParentPropertyAttribute("True")]
public string BackImage { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_BackImageMode")]
public ChartImageWrapMode BackImageMode { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_BackImageTransparentColor")]
public Color BackImageTransparentColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_BackImageAlign")]
public ChartImageAlign BackImageAlign { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_BackGradientType")]
public GradientType BackGradientType { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_BackGradientEndColor")]
public Color BackGradientEndColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_BackHatchStyle")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRDescriptionAttribute("DescriptionAttributeLegend_Font")]
[NotifyParentPropertyAttribute("True")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLegend_FontColor")]
[NotifyParentPropertyAttribute("True")]
public Color FontColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeDocking")]
[BindableAttribute("True")]
[DefaultValueAttribute]
[SRDescriptionAttribute("DescriptionAttributeLegend_Alignment")]
[NotifyParentPropertyAttribute("True")]
public StringAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeDocking")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegend_Docking")]
[NotifyParentPropertyAttribute("True")]
public LegendDocking Docking { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeLegend_ShadowOffset")]
[NotifyParentPropertyAttribute("True")]
public int ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "128, 0, 0, 0")]
[SRDescriptionAttribute("DescriptionAttributeLegend_ShadowColor")]
[NotifyParentPropertyAttribute("True")]
public Color ShadowColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[BindableAttribute("False")]
[DefaultValueAttribute("NotSet")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_InsideChartArea")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("2")]
[SerializationVisibilityAttribute("0")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.LegendAreaNameConverter")]
public string InsideChartArea { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_CustomItems")]
public LegendItemsCollection CustomItems { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("25")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TextWrapThreshold")]
public int TextWrapThreshold { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegend_Reversed")]
public AutoBool Reversed { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeLegend_InterlacedRows")]
public bool InterlacedRows { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegend_InterlacedRowsColor")]
public Color InterlacedRowsColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeLegend_Title")]
public string Title { get; public set; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TitleColor")]
public Color TitleColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TitleBackColor")]
public Color TitleBackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt, style=Bold")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TitleFont")]
public Font TitleFont { get; public set; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[DefaultValueAttribute("System.Drawing.StringAlignment", "Center")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TitleAlignment")]
public StringAlignment TitleAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.LegendSeparatorType", "None")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TitleSeparator")]
public LegendSeparatorType TitleSeparator { get; public set; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TitleSeparatorColor")]
public Color TitleSeparatorColor { get; public set; }
    public Legend(CommonElements common);
    public Legend(string name);
    public Legend(CommonElements common, string name);
    private void RecalcLegendInfo(ChartGraphics chartGraph);
    private Rectangle GetCellPosition(ChartGraphics chartGraph, int columnIndex, int rowIndex, int cellIndex, Size itemHalfSpacing);
    private SizeF GetOptimalSize(ChartGraphics chartGraph, SizeF maxSizeRel);
    internal void CalcLegendPosition(ChartGraphics chartGraph, RectangleF& chartAreasRectangle, float maxLegendSize, float elementSpacing);
    private void GetNumberOfRowsAndColumns(ChartGraphics chartGraph, Size legendSize, int numberOfItemsToCheck, Int32[]& numberOfRowsPerColumn, Int32& columnNumber);
    private void GetNumberOfRowsAndColumns(ChartGraphics chartGraph, Size legendSize, int numberOfItemsToCheck, Int32[]& numberOfRowsPerColumn, Int32& columnNumber, Int32& horSpaceLeft, Int32& vertSpaceLeft);
    private int GetColumnHeight(int columnIndex);
    private int GetMaximumNumberOfRows();
    private int GetMaximumNumberOfRows(Int32[] rowsPerColumn);
    private bool CheckLegendItemsFit(ChartGraphics graph, Size legendItemsAreaSize, int numberOfItemsToCheck, int fontSizeReducedBy, int numberOfColumns, Int32[] numberOfRowsPerColumn, Int32[0...,0...]& subColumnSizes, Int32[0...,0...]& cellHeights, Int32& horizontalSpaceLeft, Int32& verticalSpaceLeft);
    private int GetNumberOfCells();
    private void FillLegendItemsCollection();
    internal void Paint(ChartGraphics chartGraph);
    public string get_Name();
    public void set_Name(string value);
    public string get_DockToChartArea();
    public void set_DockToChartArea(string value);
    public bool get_DockInsideChartArea();
    public void set_DockInsideChartArea(bool value);
    public ElementPosition get_Position();
    public void set_Position(ElementPosition value);
    public bool get_EquallySpacedItems();
    public void set_EquallySpacedItems(bool value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_AutoFitText();
    public void set_AutoFitText(bool value);
    public LegendStyle get_LegendStyle();
    public void set_LegendStyle(LegendStyle value);
    public int get_AutoFitMinFontSize();
    public void set_AutoFitMinFontSize(int value);
    public float get_MaxAutoSize();
    public void set_MaxAutoSize(float value);
    public LegendCellColumnCollection get_CellColumns();
    public LegendTableStyle get_TableStyle();
    public void set_TableStyle(LegendTableStyle value);
    public LegendSeparatorType get_HeaderSeparator();
    public void set_HeaderSeparator(LegendSeparatorType value);
    public Color get_HeaderSeparatorColor();
    public void set_HeaderSeparatorColor(Color value);
    public LegendSeparatorType get_ItemColumnSeparator();
    public void set_ItemColumnSeparator(LegendSeparatorType value);
    public Color get_ItemColumnSeparatorColor();
    public void set_ItemColumnSeparatorColor(Color value);
    public int get_ItemColumnSpacing();
    public void set_ItemColumnSpacing(int value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public ChartDashStyle get_BorderStyle();
    public void set_BorderStyle(ChartDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public string get_BackImage();
    public void set_BackImage(string value);
    public ChartImageWrapMode get_BackImageMode();
    public void set_BackImageMode(ChartImageWrapMode value);
    public Color get_BackImageTransparentColor();
    public void set_BackImageTransparentColor(Color value);
    public ChartImageAlign get_BackImageAlign();
    public void set_BackImageAlign(ChartImageAlign value);
    public GradientType get_BackGradientType();
    public void set_BackGradientType(GradientType value);
    public Color get_BackGradientEndColor();
    public void set_BackGradientEndColor(Color value);
    public ChartHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(ChartHatchStyle value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_FontColor();
    public void set_FontColor(Color value);
    public StringAlignment get_Alignment();
    public void set_Alignment(StringAlignment value);
    public LegendDocking get_Docking();
    public void set_Docking(LegendDocking value);
    public int get_ShadowOffset();
    public void set_ShadowOffset(int value);
    public Color get_ShadowColor();
    public void set_ShadowColor(Color value);
    public string get_InsideChartArea();
    public void set_InsideChartArea(string value);
    public LegendItemsCollection get_CustomItems();
    public int get_TextWrapThreshold();
    public void set_TextWrapThreshold(int value);
    public AutoBool get_Reversed();
    public void set_Reversed(AutoBool value);
    public bool get_InterlacedRows();
    public void set_InterlacedRows(bool value);
    public Color get_InterlacedRowsColor();
    public void set_InterlacedRowsColor(Color value);
    public string get_Title();
    public void set_Title(string value);
    public Color get_TitleColor();
    public void set_TitleColor(Color value);
    public Color get_TitleBackColor();
    public void set_TitleBackColor(Color value);
    public Font get_TitleFont();
    public void set_TitleFont(Font value);
    public StringAlignment get_TitleAlignment();
    public void set_TitleAlignment(StringAlignment value);
    public LegendSeparatorType get_TitleSeparator();
    public void set_TitleSeparator(LegendSeparatorType value);
    public Color get_TitleSeparatorColor();
    public void set_TitleSeparatorColor(Color value);
    private Size GetTitleSize(ChartGraphics chartGraph, Size titleMaxSize);
    private Size GetHeaderSize(ChartGraphics chartGraph, LegendCellColumn legendColumn);
    private void DrawLegendHeader(ChartGraphics chartGraph);
    private void DrawLegendTitle(ChartGraphics chartGraph);
    internal Size GetSeparatorSize(ChartGraphics chartGraph, LegendSeparatorType separatorType);
    private void DrawSeparator(ChartGraphics chartGraph, LegendSeparatorType separatorType, Color color, bool horizontal, Rectangle position);
    private int GetBorderSize();
    private LegendTableStyle GetLegendTableStyle(ChartGraphics chartGraph);
    internal bool IsEnabled();
    internal void Invalidate(bool invalidateLegendOnly);
    internal void SelectLegendBackground(ChartGraphics chartGraph);
}
[SRDescriptionAttribute("DescriptionAttributeLegendCell_LegendCell")]
internal class Microsoft.Reporting.Chart.WebForms.LegendCell : object {
    private Legend legend;
    private LegendItem legendItem;
    private string name;
    private LegendCellType cellType;
    private string text;
    private Color textColor;
    private Color backColor;
    private Font font;
    private string image;
    private Color imageTranspColor;
    private Size imageSize;
    private Size seriesSymbolSize;
    private ContentAlignment alignment;
    private int cellSpan;
    private string toolTip;
    private Margins margins;
    private string href;
    private int rowIndex;
    private int columnIndex;
    private string mapAreaAttribute;
    internal Rectangle cellPosition;
    internal Rectangle cellPositionWithMargins;
    private Size cachedCellSize;
    private int cachedCellSizeFontReducedBy;
    private object mapAreaTag;
    [SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_CellType")]
[ParenthesizePropertyNameAttribute("True")]
public LegendCellType CellType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_Text")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_TextColor")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_BackColor")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_Font")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_Image")]
public string Image { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_ImageTransparentColor")]
public Color ImageTransparentColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLayout")]
[DefaultValueAttribute("System.Drawing.Size", "0, 0")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.SizeEmptyValueConverter")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_ImageSize")]
public Size ImageSize { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLayout")]
[DefaultValueAttribute("System.Drawing.Size", "200, 70")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_SeriesSymbolSize")]
public Size SeriesSymbolSize { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLayout")]
[DefaultValueAttribute]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_Alignment")]
public ContentAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLayout")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_CellSpan")]
public int CellSpan { get; public set; }
    [SRCategoryAttribute("CategoryAttributeLayout")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.Margins", "0,0,15,15")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_Margins")]
[SerializationVisibilityAttribute("1")]
[NotifyParentPropertyAttribute("True")]
public Margins Margins { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_ToolTip")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_Href")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    private object Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.Tag { get; private set; }
    private string Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.ToolTip { get; private set; }
    private string Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.Href { get; private set; }
    private string Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.MapAreaAttributes { get; private set; }
    public LegendCell(string text);
    public LegendCell(LegendCellType cellType, string text);
    public LegendCell(LegendCellType cellType, string text, ContentAlignment alignment);
    private void Intitialize(LegendCellType cellType, string text, ContentAlignment alignment);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual LegendCellType get_CellType();
    public virtual void set_CellType(LegendCellType value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual Color get_TextColor();
    public virtual void set_TextColor(Color value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual string get_Image();
    public virtual void set_Image(string value);
    public virtual Color get_ImageTransparentColor();
    public virtual void set_ImageTransparentColor(Color value);
    public virtual Size get_ImageSize();
    public virtual void set_ImageSize(Size value);
    public virtual Size get_SeriesSymbolSize();
    public virtual void set_SeriesSymbolSize(Size value);
    public virtual ContentAlignment get_Alignment();
    public virtual void set_Alignment(ContentAlignment value);
    public virtual int get_CellSpan();
    public virtual void set_CellSpan(int value);
    public virtual Margins get_Margins();
    public virtual void set_Margins(Margins value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeMargins();
    public virtual void set_ToolTip(string value);
    public virtual string get_ToolTip();
    public virtual void set_Href(string value);
    public virtual string get_Href();
    public virtual void set_MapAreaAttributes(string value);
    public virtual string get_MapAreaAttributes();
    private sealed virtual override object Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.set_Tag(object value);
    internal void ResetCache();
    internal void SetCellPosition(ChartGraphics graph, int columnIndex, int rowIndex, Rectangle position, int fontSizeReducedBy, Font legendAutoFont, Size singleWCharacterSize);
    internal Size MeasureCell(ChartGraphics graph, int fontSizeReducedBy, Font legendAutoFont, Size singleWCharacterSize);
    private Color GetCellBackColor();
    private Font GetCellFont(Font legendAutoFont, int fontSizeReducedBy, Boolean& disposeFont);
    private string GetCellToolTip();
    private string GetCellHref();
    private string GetCellMapAreaAttributes();
    private string GetCellText();
    private Color GetCellTextColor();
    protected void Invalidate();
    internal void SetContainingLegend(Legend legend, LegendItem legendItem);
    public virtual Legend GetLegend();
    public virtual LegendItem GetLegendItem();
    internal void Paint(ChartGraphics chartGraph, int fontSizeReducedBy, Font legendAutoFont, Size singleWCharacterSize, PointF animationLocationAdjustment);
    private void PaintCellText(ChartGraphics chartGraph, int fontSizeReducedBy, Font legendAutoFont, Size singleWCharacterSize, PointF animationLocationAdjustment);
    private void PaintCellImage(ChartGraphics chartGraph, int fontSizeReducedBy, Font legendAutoFont, Size singleWCharacterSize, PointF animationLocationAdjustment);
    private void PaintCellSeriesSymbol(ChartGraphics chartGraph, int fontSizeReducedBy, Font legendAutoFont, SizeF singleWCharacterSize, PointF animationLocationAdjustment);
    private sealed virtual override string Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.get_ToolTip();
    private sealed virtual override void Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.set_ToolTip(string value);
    private sealed virtual override string Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.get_Href();
    private sealed virtual override void Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.set_Href(string value);
    private sealed virtual override string Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.get_MapAreaAttributes();
    private sealed virtual override void Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.set_MapAreaAttributes(string value);
}
[DefaultMemberAttribute("Item")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellCollection_LegendCellCollection")]
internal class Microsoft.Reporting.Chart.WebForms.LegendCellCollection : CollectionBase {
    private LegendItem legendItem;
    [SRDescriptionAttribute("DescriptionAttributeLegendCellCollection_Item")]
public LegendCell Item { get; public set; }
    internal LegendCellCollection(LegendItem legendItem);
    public LegendCell get_Item(object parameter);
    public void set_Item(object parameter, LegendCell value);
    public void Remove(string name);
    public void Remove(LegendCell cell);
    public int Add(LegendCell cell);
    public int Add(LegendCellType cellType, string text, ContentAlignment alignment);
    public void Insert(int index, LegendCell cell);
    public void Insert(int index, LegendCellType cellType, string text, ContentAlignment alignment);
    public bool Contains(LegendCell value);
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnClearComplete();
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    public int IndexOf(LegendCell cell);
    private void Invalidate();
    private void AssignUniqueName(LegendCell cell);
    public LegendCell FindByName(string name);
}
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_LegendCellColumn")]
internal class Microsoft.Reporting.Chart.WebForms.LegendCellColumn : object {
    private Legend legend;
    private string name;
    private LegendCellColumnType columnType;
    private string text;
    private Color textColor;
    private Color backColor;
    private Font font;
    private Size seriesSymbolSize;
    private ContentAlignment alignment;
    private string toolTip;
    private Margins margins;
    private string href;
    private string mapAreaAttribute;
    private string headerText;
    private StringAlignment headerTextAlignment;
    private Color headerColor;
    private Color headerBackColor;
    private Font headerFont;
    private int minimumCellWidth;
    private int maximumCellWidth;
    [SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttributeSeriesItems")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_ColumnType")]
[ParenthesizePropertyNameAttribute("True")]
public LegendCellColumnType ColumnType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeSeriesItems")]
[DefaultValueAttribute("#LEGENDTEXT")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_Text")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAttributeSeriesItems")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_TextColor")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeSeriesItems")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_BackColor")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeSeriesItems")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_Font")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAttributeSeriesItems")]
[DefaultValueAttribute("System.Drawing.Size", "200, 70")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_SeriesSymbolSize")]
public Size SeriesSymbolSize { get; public set; }
    [SRCategoryAttribute("CategoryAttributeSeriesItems")]
[DefaultValueAttribute]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_Alignment")]
public ContentAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeSeriesItems")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.Margins", "0,0,15,15")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_Margins")]
[SerializationVisibilityAttribute("1")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
public Margins Margins { get; public set; }
    [SRCategoryAttribute("CategoryAttributeSeriesItems")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_ToolTip")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttributeSeriesItems")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_Href")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [SRCategoryAttribute("CategoryAttributeSeriesItems")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAttributeHeader")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_HeaderText")]
public string HeaderText { get; public set; }
    [SRCategoryAttribute("CategoryAttributeHeader")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_HeaderColor")]
public Color HeaderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeHeader")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_HeaderBackColor")]
public Color HeaderBackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeHeader")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt, style=Bold")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_HeaderFont")]
public Font HeaderFont { get; public set; }
    [SRCategoryAttribute("CategoryAttributeHeader")]
[DefaultValueAttribute("System.Drawing.StringAlignment", "Center")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_HeaderTextAlignment")]
public StringAlignment HeaderTextAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeSize")]
[DefaultValueAttribute("-1")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.IntNanValueConverter")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_MinimumWidth")]
public int MinimumWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeSize")]
[DefaultValueAttribute("-1")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.IntNanValueConverter")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_MaximumWidth")]
public int MaximumWidth { get; public set; }
    public LegendCellColumn(string headerText, LegendCellColumnType columnType, string text);
    public LegendCellColumn(string headerText, LegendCellColumnType columnType, string text, ContentAlignment alignment);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual LegendCellColumnType get_ColumnType();
    public virtual void set_ColumnType(LegendCellColumnType value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual Color get_TextColor();
    public virtual void set_TextColor(Color value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual Size get_SeriesSymbolSize();
    public virtual void set_SeriesSymbolSize(Size value);
    public virtual ContentAlignment get_Alignment();
    public virtual void set_Alignment(ContentAlignment value);
    public virtual Margins get_Margins();
    public virtual void set_Margins(Margins value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeMargins();
    public virtual void set_ToolTip(string value);
    public virtual string get_ToolTip();
    public virtual void set_Href(string value);
    public virtual string get_Href();
    public virtual void set_MapAreaAttributes(string value);
    public virtual string get_MapAreaAttributes();
    public virtual string get_HeaderText();
    public virtual void set_HeaderText(string value);
    public virtual Color get_HeaderColor();
    public virtual void set_HeaderColor(Color value);
    public virtual Color get_HeaderBackColor();
    public virtual void set_HeaderBackColor(Color value);
    public virtual Font get_HeaderFont();
    public virtual void set_HeaderFont(Font value);
    public StringAlignment get_HeaderTextAlignment();
    public void set_HeaderTextAlignment(StringAlignment value);
    public virtual int get_MinimumWidth();
    public virtual void set_MinimumWidth(int value);
    public virtual int get_MaximumWidth();
    public virtual void set_MaximumWidth(int value);
    internal LegendCell CreateNewCell();
    protected void Invalidate();
    public virtual Legend GetLegend();
    internal void SetContainingLegend(Legend legend);
}
[DefaultMemberAttribute("Item")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumnCollection_LegendCellColumnCollection")]
internal class Microsoft.Reporting.Chart.WebForms.LegendCellColumnCollection : CollectionBase {
    private Legend legend;
    [SRDescriptionAttribute("DescriptionAttributeLegendCellColumnCollection_Item")]
public LegendCellColumn Item { get; public set; }
    internal LegendCellColumnCollection(Legend legend);
    public LegendCellColumn get_Item(object parameter);
    public void set_Item(object parameter, LegendCellColumn value);
    public void Remove(string name);
    public void Remove(LegendCellColumn column);
    public int Add(LegendCellColumn column);
    public int Add(string headerText, LegendCellColumnType columnType, string text, ContentAlignment alignment);
    public void Insert(int index, LegendCellColumn column);
    public void Insert(int index, string headerText, LegendCellColumnType columnType, string text, ContentAlignment alignment);
    public bool Contains(LegendCellColumn value);
    public int IndexOf(LegendCellColumn value);
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnClearComplete();
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    private void Invalidate();
    private void AssignUniqueName(LegendCellColumn column);
    public LegendCellColumn FindByName(string name);
}
internal enum Microsoft.Reporting.Chart.WebForms.LegendCellColumnType : Enum {
    public int value__;
    public static LegendCellColumnType Text;
    public static LegendCellColumnType SeriesSymbol;
}
internal enum Microsoft.Reporting.Chart.WebForms.LegendCellType : Enum {
    public int value__;
    public static LegendCellType Text;
    public static LegendCellType SeriesSymbol;
    public static LegendCellType Image;
}
[DefaultMemberAttribute("Item")]
[SRDescriptionAttribute("DescriptionAttributeLegendCollection_LegendCollection")]
internal class Microsoft.Reporting.Chart.WebForms.LegendCollection : object {
    private ArrayList array;
    internal CommonElements common;
    [SRDescriptionAttribute("DescriptionAttributeLegendCollection_Item")]
public Legend Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public LegendCollection(CommonElements common);
    public int Add(string name);
    public void Insert(int index, string name);
    public Legend get_Item(object parameter);
    public void set_Item(object parameter, Legend value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    public bool Contains(Legend value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    public int IndexOf(Legend value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public void Remove(Legend value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual int Add(object value);
    public void Insert(int index, Legend value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    private bool UniqueName(string name);
    private string CreateName(string Name);
    public int GetIndex(string name);
    private void Invalidate();
    internal void CalcLegendPosition(ChartGraphics chartGraph, RectangleF& chartAreasRectangle, float maxLegendSize, float elementSpacing);
    internal void CalcOutsideLegendPosition(ChartGraphics chartGraph, ChartArea area, RectangleF& chartAreasRectangle, float maxLegendSize, float elementSpacing);
    internal void CalcInsideLegendPosition(ChartGraphics chartGraph, float maxLegendSize, float elementSpacing);
}
internal enum Microsoft.Reporting.Chart.WebForms.LegendDocking : Enum {
    public int value__;
    public static LegendDocking Top;
    public static LegendDocking Right;
    public static LegendDocking Bottom;
    public static LegendDocking Left;
}
internal enum Microsoft.Reporting.Chart.WebForms.LegendImageStyle : Enum {
    public int value__;
    public static LegendImageStyle Rectangle;
    public static LegendImageStyle Line;
    public static LegendImageStyle Marker;
}
[SRDescriptionAttribute("DescriptionAttributeLegendItem_LegendItem")]
[DefaultPropertyAttribute("Name")]
internal class Microsoft.Reporting.Chart.WebForms.LegendItem : object {
    private string name;
    private Color color;
    private string image;
    private string seriesName;
    private int seriesPointIndex;
    private string toolTip;
    private string href;
    private object mapAreaTag;
    private string attributes;
    internal LegendImageStyle style;
    internal GradientType backGradientType;
    internal Color backGradientEndColor;
    internal Color backImageTranspColor;
    internal Color borderColor;
    internal int borderWidth;
    internal ChartDashStyle borderStyle;
    internal ChartHatchStyle backHatchStyle;
    internal int shadowOffset;
    internal Color shadowColor;
    internal string backImage;
    internal ChartImageWrapMode backImageMode;
    internal ChartImageAlign backImageAlign;
    internal MarkerStyle markerStyle;
    internal int markerSize;
    internal string markerImage;
    internal Color markerImageTranspColor;
    internal Color markerColor;
    internal Color markerBorderColor;
    internal CommonElements common;
    private Legend m_legend;
    private bool enabled;
    private int markerBorderWidth;
    private LegendCellCollection cells;
    private LegendSeparatorType separator;
    private Color separatorColor;
    private object tag;
    internal bool clearTempCells;
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
public Legend Legend { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Name")]
[NotifyParentPropertyAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Color")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
public Color Color { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Image")]
[DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
public string Image { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.LegendImageStyle", "Rectangle")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Style")]
[ParenthesizePropertyNameAttribute("True")]
public LegendImageStyle Style { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_BorderColor")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_BackHatchStyle")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_BackImageTransparentColor")]
public Color BackImageTransparentColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_BackGradientType")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_BackGradientEndColor")]
public Color BackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_BorderWidth")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Enabled")]
[ParenthesizePropertyNameAttribute("True")]
public bool Enabled { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMarker")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerBorderWidth")]
public int MarkerBorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_BorderStyle")]
public ChartDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_ShadowOffset")]
[DefaultValueAttribute("0")]
public int ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "128,0,0,0")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_ShadowColor")]
public Color ShadowColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerStyle")]
[RefreshPropertiesAttribute("1")]
public MarkerStyle MarkerStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[DefaultValueAttribute("5")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerSize")]
[RefreshPropertiesAttribute("1")]
public int MarkerSize { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerImage")]
[RefreshPropertiesAttribute("1")]
public string MarkerImage { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerImageTransparentColor")]
[RefreshPropertiesAttribute("1")]
public Color MarkerImageTransparentColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerColor")]
[RefreshPropertiesAttribute("1")]
public Color MarkerColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerBorderColor")]
[RefreshPropertiesAttribute("1")]
public Color MarkerBorderColor { get; public set; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_SeriesName")]
[DefaultValueAttribute("")]
public string SeriesName { get; public set; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_SeriesPointIndex")]
[DefaultValueAttribute("-1")]
public int SeriesPointIndex { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.LegendSeparatorType", "None")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Separator")]
public LegendSeparatorType Separator { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_SeparatorColor")]
public Color SeparatorColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Cells")]
public LegendCellCollection Cells { get; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Tag")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public object Tag { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeToolTip7")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeHref7")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapAreaAttributes9")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    private object Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.Tag { get; private set; }
    public LegendItem(string name, Color color, string image);
    public Legend get_Legend();
    public void set_Legend(Legend value);
    public string get_Name();
    public void set_Name(string value);
    public Color get_Color();
    public void set_Color(Color value);
    public string get_Image();
    public void set_Image(string value);
    public LegendImageStyle get_Style();
    public void set_Style(LegendImageStyle value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public ChartHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(ChartHatchStyle value);
    public Color get_BackImageTransparentColor();
    public void set_BackImageTransparentColor(Color value);
    public GradientType get_BackGradientType();
    public void set_BackGradientType(GradientType value);
    public Color get_BackGradientEndColor();
    public void set_BackGradientEndColor(Color value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_MarkerBorderWidth();
    public void set_MarkerBorderWidth(int value);
    public ChartDashStyle get_BorderStyle();
    public void set_BorderStyle(ChartDashStyle value);
    public int get_ShadowOffset();
    public void set_ShadowOffset(int value);
    public Color get_ShadowColor();
    public void set_ShadowColor(Color value);
    public MarkerStyle get_MarkerStyle();
    public void set_MarkerStyle(MarkerStyle value);
    public int get_MarkerSize();
    public void set_MarkerSize(int value);
    public string get_MarkerImage();
    public void set_MarkerImage(string value);
    public Color get_MarkerImageTransparentColor();
    public void set_MarkerImageTransparentColor(Color value);
    public Color get_MarkerColor();
    public void set_MarkerColor(Color value);
    public Color get_MarkerBorderColor();
    public void set_MarkerBorderColor(Color value);
    public string get_SeriesName();
    public void set_SeriesName(string value);
    public int get_SeriesPointIndex();
    public void set_SeriesPointIndex(int value);
    public LegendSeparatorType get_Separator();
    public void set_Separator(LegendSeparatorType value);
    public Color get_SeparatorColor();
    public void set_SeparatorColor(Color value);
    public LegendCellCollection get_Cells();
    public object get_Tag();
    public void set_Tag(object value);
    public sealed virtual void set_ToolTip(string value);
    public sealed virtual string get_ToolTip();
    public sealed virtual void set_Href(string value);
    public sealed virtual string get_Href();
    public sealed virtual void set_MapAreaAttributes(string value);
    public sealed virtual string get_MapAreaAttributes();
    private sealed virtual override object Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.set_Tag(object value);
    internal void AddAutomaticCells(Legend legend);
    internal void SetAttributes(CommonElements common, Series series);
    internal void SetAttributes(DataPointAttributes attrib, bool area3D);
    private void Invalidate(bool invalidateLegendOnly);
}
[DefaultMemberAttribute("Item")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabelsCollection_CustomLabelsCollection")]
internal class Microsoft.Reporting.Chart.WebForms.LegendItemsCollection : object {
    private ArrayList array;
    internal CommonElements common;
    internal Legend legend;
    public LegendItem Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public int Add(Color color, string text);
    public void Insert(int index, Color color, string text);
    public int Add(string image, string text);
    public void Insert(int index, string image, string text);
    public LegendItem get_Item(int index);
    public void set_Item(int index, LegendItem value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    public bool Contains(LegendItem value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    public int IndexOf(LegendItem value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public void Remove(LegendItem value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual int Add(object value);
    public void Insert(int index, LegendItem value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public void Reverse();
    private void Invalidate(bool invalidateLegendOnly);
}
internal enum Microsoft.Reporting.Chart.WebForms.LegendSeparatorType : Enum {
    public int value__;
    public static LegendSeparatorType None;
    public static LegendSeparatorType Line;
    public static LegendSeparatorType ThickLine;
    public static LegendSeparatorType DoubleLine;
    public static LegendSeparatorType DashLine;
    public static LegendSeparatorType DotLine;
    public static LegendSeparatorType GradientLine;
    public static LegendSeparatorType ThickGradientLine;
}
internal enum Microsoft.Reporting.Chart.WebForms.LegendStyle : Enum {
    public int value__;
    public static LegendStyle Column;
    public static LegendStyle Row;
    public static LegendStyle Table;
}
internal enum Microsoft.Reporting.Chart.WebForms.LegendTableStyle : Enum {
    public int value__;
    public static LegendTableStyle Auto;
    public static LegendTableStyle Wide;
    public static LegendTableStyle Tall;
}
internal enum Microsoft.Reporting.Chart.WebForms.LightStyle : Enum {
    public int value__;
    public static LightStyle None;
    public static LightStyle Simplistic;
    public static LightStyle Realistic;
}
[SRDescriptionAttribute("DescriptionAttributeLineAnchorCap_LineAnchorCap")]
internal enum Microsoft.Reporting.Chart.WebForms.LineAnchorCap : Enum {
    public int value__;
    public static LineAnchorCap None;
    public static LineAnchorCap Arrow;
    public static LineAnchorCap Diamond;
    public static LineAnchorCap Square;
    public static LineAnchorCap Round;
}
[SRDescriptionAttribute("DescriptionAttributeLineAnnotation_LineAnnotation")]
internal class Microsoft.Reporting.Chart.WebForms.LineAnnotation : Annotation {
    private bool drawInfinitive;
    private LineAnchorCap startCap;
    private LineAnchorCap endCap;
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeDrawInfinitive")]
public bool DrawInfinitive { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeStartCap3")]
public LineAnchorCap StartCap { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeStartCap3")]
public LineAnchorCap EndCap { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.ContentAlignment", "MiddleCenter")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public ContentAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeTextColor3")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public Font TextFont { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.TextStyle", "Default")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public TextStyle TextStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
[NotifyParentPropertyAttribute("True")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public Color BackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributePosition")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSizeAlwaysRelative3")]
public bool SizeAlwaysRelative { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAnchor")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("System.Drawing.ContentAlignment", "TopLeft")]
[SRDescriptionAttribute("DescriptionAttributeAnchorAlignment4")]
public ContentAlignment AnchorAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType4")]
public string AnnotationType { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ParenthesizePropertyNameAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle3")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    public virtual bool get_DrawInfinitive();
    public virtual void set_DrawInfinitive(bool value);
    public virtual LineAnchorCap get_StartCap();
    public virtual void set_StartCap(LineAnchorCap value);
    public virtual LineAnchorCap get_EndCap();
    public virtual void set_EndCap(LineAnchorCap value);
    public virtual ContentAlignment get_Alignment();
    public virtual void set_Alignment(ContentAlignment value);
    public virtual Color get_TextColor();
    public virtual void set_TextColor(Color value);
    public virtual Font get_TextFont();
    public virtual void set_TextFont(Font value);
    public virtual TextStyle get_TextStyle();
    public virtual void set_TextStyle(TextStyle value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ChartHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(ChartHatchStyle value);
    public virtual GradientType get_BackGradientType();
    public virtual void set_BackGradientType(GradientType value);
    public virtual Color get_BackGradientEndColor();
    public virtual void set_BackGradientEndColor(Color value);
    public virtual bool get_SizeAlwaysRelative();
    public virtual void set_SizeAlwaysRelative(bool value);
    public virtual ContentAlignment get_AnchorAlignment();
    public virtual void set_AnchorAlignment(ContentAlignment value);
    public virtual string get_AnnotationType();
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
    internal virtual void AdjustLineCoordinates(PointF& point1, PointF& point2, RectangleF& selectionRect);
    internal virtual void Paint(Chart chart, ChartGraphics graphics);
}
internal enum Microsoft.Reporting.Chart.WebForms.LineSegmentType : Enum {
    public int value__;
    public static LineSegmentType Single;
    public static LineSegmentType First;
    public static LineSegmentType Middle;
    public static LineSegmentType Last;
}
internal class Microsoft.Reporting.Chart.WebForms.LocalizeTextHandler : MulticastDelegate {
    public LocalizeTextHandler(object object, IntPtr method);
    public virtual string Invoke(object sender, string text, int elementId, ChartElementType elementType);
    public virtual IAsyncResult BeginInvoke(object sender, string text, int elementId, ChartElementType elementType, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[DefaultPropertyAttribute("ToolTip")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_MapArea")]
internal class Microsoft.Reporting.Chart.WebForms.MapArea : object {
    private string toolTip;
    private string href;
    private string attributes;
    private string name;
    private bool custom;
    private MapAreaShape shape;
    private Single[] coordinates;
    private object mapAreaTag;
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_Custom")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public bool Custom { get; public set; }
    [SRCategoryAttribute("CategoryAttributeShape")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_Coordinates")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.MapAreaCoordinatesConverter")]
public Single[] Coordinates { get; public set; }
    [SRCategoryAttribute("CategoryAttributeShape")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_Shape")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.MapAreaShape", "Rectangle")]
public MapAreaShape Shape { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_Name")]
[DefaultValueAttribute("Map Area")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_ToolTip")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_Href")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    private object Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.Tag { get; private set; }
    internal string GetTag(ChartGraphics graph);
    public bool get_Custom();
    public void set_Custom(bool value);
    public Single[] get_Coordinates();
    public void set_Coordinates(Single[] value);
    public MapAreaShape get_Shape();
    public void set_Shape(MapAreaShape value);
    public string get_Name();
    public void set_Name(string value);
    public sealed virtual void set_ToolTip(string value);
    public sealed virtual string get_ToolTip();
    public sealed virtual void set_Href(string value);
    public sealed virtual string get_Href();
    public sealed virtual void set_MapAreaAttributes(string value);
    public sealed virtual string get_MapAreaAttributes();
    private sealed virtual override void Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.set_Tag(object value);
    private sealed virtual override object Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.get_Tag();
}
[DefaultMemberAttribute("Item")]
[SRDescriptionAttribute("DescriptionAttributeMapAreasCollection_MapAreasCollection")]
internal class Microsoft.Reporting.Chart.WebForms.MapAreasCollection : object {
    internal ArrayList array;
    public MapArea Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public MapArea get_Item(int index);
    public void set_Item(int index, MapArea value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual int Add(object value);
    public void Insert(int index, MapArea value);
    public sealed virtual void Insert(int index, object value);
    public bool Contains(MapArea value);
    public int IndexOf(MapArea value);
    public void Remove(MapArea value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    internal int Add(string toolTip, string href, string attr, GraphicsPath path, object tag);
    internal int Add(string toolTip, string href, string attr, RectangleF rect, object tag);
    internal int Add(MapAreaShape shape, string toolTip, string href, string attr, Single[] coordinates, object tag);
    internal void Insert(int index, string toolTip, string href, string attr, GraphicsPath path, object tag);
    internal void Insert(int index, string toolTip, string href, string attr, GraphicsPath path, bool absCoordinates, ChartGraphics graph);
    private void InsertSubpath(int index, string toolTip, string href, string attr, GraphicsPath path, bool absCoordinates, ChartGraphics graph);
    internal void Insert(int index, string toolTip, string href, string attr, RectangleF rect, object tag);
    internal void Insert(int index, MapAreaShape shape, string toolTip, string href, string attr, Single[] coordinates, object tag);
    public int Add(string href, GraphicsPath path);
    public int Add(string href, RectangleF rect);
    public int Add(MapAreaShape shape, string href, Single[] coordinates);
    public void Insert(int index, string href, GraphicsPath path);
    public void Insert(int index, string href, RectangleF rect);
    public void Insert(int index, MapAreaShape shape, string href, Single[] coordinates);
    internal void RemoveNonCustom();
}
internal enum Microsoft.Reporting.Chart.WebForms.MapAreaShape : Enum {
    public int value__;
    public static MapAreaShape Rectangle;
    public static MapAreaShape Circle;
    public static MapAreaShape Polygon;
}
[SRDescriptionAttribute("DescriptionAttributeMargins_Margins")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.MarginExpandableObjectConverter")]
internal class Microsoft.Reporting.Chart.WebForms.Margins : object {
    private int top;
    private int bottom;
    private int left;
    private int right;
    internal CommonElements Common;
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeMargins_Top")]
[RefreshPropertiesAttribute("1")]
[NotifyParentPropertyAttribute("True")]
public int Top { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeMargins_Bottom")]
[RefreshPropertiesAttribute("1")]
[NotifyParentPropertyAttribute("True")]
public int Bottom { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("0")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeMargins_Left")]
[NotifyParentPropertyAttribute("True")]
public int Left { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeMargins_Right")]
[RefreshPropertiesAttribute("1")]
[NotifyParentPropertyAttribute("True")]
public int Right { get; public set; }
    public Margins(int top, int bottom, int left, int right);
    public int get_Top();
    public void set_Top(int value);
    public int get_Bottom();
    public void set_Bottom(int value);
    public int get_Left();
    public void set_Left(int value);
    public int get_Right();
    public void set_Right(int value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool IsEmpty();
    public RectangleF ToRectangleF();
    private void Invalidate();
}
internal enum Microsoft.Reporting.Chart.WebForms.MarkerStyle : Enum {
    public int value__;
    public static MarkerStyle None;
    public static MarkerStyle Square;
    public static MarkerStyle Circle;
    public static MarkerStyle Diamond;
    public static MarkerStyle Triangle;
    public static MarkerStyle Cross;
    public static MarkerStyle Star4;
    public static MarkerStyle Star5;
    public static MarkerStyle Star6;
    public static MarkerStyle Star10;
}
internal class Microsoft.Reporting.Chart.WebForms.Matrix3D : object {
    private Single[][] mainMatrix;
    private float translateX;
    private float translateY;
    private float translateZ;
    private float scale;
    private float shiftX;
    private float shiftY;
    internal float perspective;
    private bool rightAngleAxis;
    private float perspectiveFactor;
    private float perspectiveZ;
    internal float angleX;
    internal float angleY;
    private Point3D[] lightVectors;
    private LightStyle lightStyle;
    public bool IsInitialized();
    internal void Initialize(RectangleF innerPlotRectangle, float depth, float angleX, float angleY, float perspective, bool rightAngleAxis);
    public void TransformPoints(Point3D[] points);
    private void TransformPoints(Point3D[] points, bool withPerspective);
    private void RightAngleShift(Point3D[] points);
    private void RightAngleProjection(Point3D[] points);
    private void Perspective(Point3D[] points);
    private void Scale(Point3D[] points);
    private void Translate(float dx, float dy, float dz);
    private void Reset();
    private Single[][] Multiply(Single[][] mulMatrix, MatrixOrder order, bool setMainMatrix);
    private void MultiplyVector(Single[] mulVector, Single[]& resultVector);
    private void Rotate(double angle, RotationAxis axis);
    private void GetValues(Point3D[] points);
    private Point3D[] Set3DBarPoints(float dx, float dy, float dz);
    internal void InitLight(LightStyle lightStyle);
    internal void GetLight(Color surfaceColor, Color& front, Color& back, Color& left, Color& right, Color& top, Color& bottom);
    internal Color GetPolygonLight(Point3D[] points, Color surfaceColor, bool visiblePolygon, float yAngle, SurfaceNames surfaceName, bool switchSeriesOrder);
    private Color GetBrightGradientColor(Color beginColor, double position);
    private float GetAngle(Point3D a, Point3D b);
}
[SRDescriptionAttribute("DescriptionAttributeNamedImage_NamedImage")]
[DefaultPropertyAttribute("Name")]
internal class Microsoft.Reporting.Chart.WebForms.NamedImage : object {
    private string name;
    private Image image;
    [BindableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeNamedImage_Name")]
public string Name { get; public set; }
    [BindableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeNamedImage_Image")]
public Image Image { get; public set; }
    public NamedImage(string name, Image image);
    public string get_Name();
    public void set_Name(string value);
    public Image get_Image();
    public void set_Image(Image value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Chart.WebForms.NamedImagesCollection : object {
    private ArrayList array;
    internal Chart chart;
    [SRDescriptionAttribute("DescriptionAttributeNamedImagesCollection_Item")]
public NamedImage Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public int Count { get; }
    public object SyncRoot { get; }
    internal NamedImagesCollection(Chart chart);
    public NamedImage get_Item(object parameter);
    public void set_Item(object parameter, NamedImage value);
    public int GetIndex(string name);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public NamedImage Add(string name, Image image);
    public int Add(NamedImage value);
    public sealed virtual int Add(object value);
    public bool Contains(NamedImage value);
    public int IndexOf(NamedImage value);
    public void Remove(NamedImage value);
    public void Insert(int index, NamedImage value);
    public sealed virtual void Insert(int index, object value);
    private string CreateName(string Name);
    private bool UniqueName(string name);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Remove(object value);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual int IndexOf(object value);
    public sealed virtual bool Contains(object value);
    public sealed virtual void Clear();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual object get_SyncRoot();
}
internal class Microsoft.Reporting.Chart.WebForms.ObjectInfo : object {
    internal ChartArea ChartArea;
    internal Legend Legend;
    internal LegendItem LegendItem;
    internal Axis Axis;
    internal object AxisLabel;
    internal Axis AxisLabelAxis;
    internal Series Series;
    internal DataPoint DataPoint;
    internal int PointIndex;
    internal Title Title;
    internal Annotation Annotation;
    internal ContextElementTypes ElementType;
    internal object InspectedObject;
    private static ObjectInfo Inspect(object o, Chart chart, HitTestResult r);
    internal static ObjectInfo Get(object o, Chart chart);
    internal object GetContextObject();
    internal Axis GetAxis();
    internal object GetContextObjectNoLabel();
    internal bool IsAplicable(ContextElementTypes types);
    internal ChartElementType GetChartElementType();
}
internal class Microsoft.Reporting.Chart.WebForms.PaintEventHandler : MulticastDelegate {
    public PaintEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ChartPaintEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ChartPaintEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum Microsoft.Reporting.Chart.WebForms.PieDrawingStyle : Enum {
    public int value__;
    public static PieDrawingStyle Default;
    public static PieDrawingStyle SoftEdge;
    public static PieDrawingStyle Concave;
}
internal enum Microsoft.Reporting.Chart.WebForms.PiePoints : Enum {
    public int value__;
    public static PiePoints Top180;
    public static PiePoints Bottom180;
    public static PiePoints Top0;
    public static PiePoints Bottom0;
    public static PiePoints TopStart;
    public static PiePoints TopEnd;
    public static PiePoints BottomStart;
    public static PiePoints BottomEnd;
    public static PiePoints TopCenter;
    public static PiePoints BottomCenter;
    public static PiePoints TopLabelLine;
    public static PiePoints TopLabelLineout;
    public static PiePoints TopLabelCenter;
    public static PiePoints TopRectTopLeftPoint;
    public static PiePoints TopRectBottomRightPoint;
    public static PiePoints BottomRectTopLeftPoint;
    public static PiePoints BottomRectBottomRightPoint;
    public static PiePoints DoughnutTop180;
    public static PiePoints DoughnutBottom180;
    public static PiePoints DoughnutTop0;
    public static PiePoints DoughnutBottom0;
    public static PiePoints DoughnutTopStart;
    public static PiePoints DoughnutTopEnd;
    public static PiePoints DoughnutBottomStart;
    public static PiePoints DoughnutBottomEnd;
    public static PiePoints DoughnutTopRectTopLeftPoint;
    public static PiePoints DoughnutTopRectBottomRightPoint;
    public static PiePoints DoughnutBottomRectTopLeftPoint;
    public static PiePoints DoughnutBottomRectBottomRightPoint;
}
internal class Microsoft.Reporting.Chart.WebForms.Point3D : object {
    private PointF coordXY;
    private float coordZ;
    [BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributePoint3D_X")]
public float X { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributePoint3D_Y")]
public float Y { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributePoint3D_Z")]
public float Z { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributePoint3D_PointF")]
public PointF PointF { get; public set; }
    public Point3D(float x, float y, float z);
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    public float get_Z();
    public void set_Z(float value);
    public PointF get_PointF();
    public void set_PointF(PointF value);
}
internal class Microsoft.Reporting.Chart.WebForms.PointA : object {
    private ValueA x;
    private ValueA y;
    public ValueA X { get; public set; }
    public ValueA Y { get; public set; }
    public ValueA get_X();
    public void set_X(ValueA value);
    public ValueA get_Y();
    public void set_Y(ValueA value);
    public PointF ToPointF();
}
internal enum Microsoft.Reporting.Chart.WebForms.PointsSortOrder : Enum {
    public int value__;
    public static PointsSortOrder Ascending;
    public static PointsSortOrder Descending;
}
[SRDescriptionAttribute("DescriptionAttributePolygonAnnotation_PolygonAnnotation")]
internal class Microsoft.Reporting.Chart.WebForms.PolygonAnnotation : PolylineAnnotation {
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public LineAnchorCap StartCap { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public LineAnchorCap EndCap { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeBackColor8")]
[NotifyParentPropertyAttribute("True")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientType8")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributePolygonAnnotation_BackGradientEndColor")]
public Color BackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType4")]
public string AnnotationType { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ParenthesizePropertyNameAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle3")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    public virtual LineAnchorCap get_StartCap();
    public virtual void set_StartCap(LineAnchorCap value);
    public virtual LineAnchorCap get_EndCap();
    public virtual void set_EndCap(LineAnchorCap value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ChartHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(ChartHatchStyle value);
    public virtual GradientType get_BackGradientType();
    public virtual void set_BackGradientType(GradientType value);
    public virtual Color get_BackGradientEndColor();
    public virtual void set_BackGradientEndColor(Color value);
    public virtual string get_AnnotationType();
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
}
[SRDescriptionAttribute("DescriptionAttributePolylineAnnotation_PolylineAnnotation")]
internal class Microsoft.Reporting.Chart.WebForms.PolylineAnnotation : Annotation {
    internal GraphicsPath path;
    internal bool pathChanged;
    private AnnotationPathPointCollection pathPoints;
    internal bool isPolygon;
    internal bool freeDrawPlacement;
    private LineAnchorCap startCap;
    private LineAnchorCap endCap;
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeStartCap3")]
public LineAnchorCap StartCap { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeStartCap3")]
public LineAnchorCap EndCap { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.ContentAlignment", "MiddleCenter")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public ContentAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public Font TextFont { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.TextStyle", "Default")]
[SRDescriptionAttribute("DescriptionAttributeTextStyle5")]
public TextStyle TextStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
[NotifyParentPropertyAttribute("True")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public Color BackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType4")]
public string AnnotationType { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ParenthesizePropertyNameAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle3")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeFreeDrawPlacement")]
public bool FreeDrawPlacement { get; public set; }
    [SRCategoryAttribute("CategoryAttributePosition")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributePath")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public GraphicsPath Path { get; public set; }
    [SRCategoryAttribute("CategoryAttributePosition")]
[SRDescriptionAttribute("DescriptionAttributePathPoints")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("2")]
public AnnotationPathPointCollection PathPoints { get; }
    public virtual LineAnchorCap get_StartCap();
    public virtual void set_StartCap(LineAnchorCap value);
    public virtual LineAnchorCap get_EndCap();
    public virtual void set_EndCap(LineAnchorCap value);
    public virtual ContentAlignment get_Alignment();
    public virtual void set_Alignment(ContentAlignment value);
    public virtual Color get_TextColor();
    public virtual void set_TextColor(Color value);
    public virtual Font get_TextFont();
    public virtual void set_TextFont(Font value);
    public virtual TextStyle get_TextStyle();
    public virtual void set_TextStyle(TextStyle value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ChartHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(ChartHatchStyle value);
    public virtual GradientType get_BackGradientType();
    public virtual void set_BackGradientType(GradientType value);
    public virtual Color get_BackGradientEndColor();
    public virtual void set_BackGradientEndColor(Color value);
    public virtual string get_AnnotationType();
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
    public virtual bool get_FreeDrawPlacement();
    public virtual void set_FreeDrawPlacement(bool value);
    public virtual GraphicsPath get_Path();
    public virtual void set_Path(GraphicsPath value);
    public AnnotationPathPointCollection get_PathPoints();
    internal virtual void Paint(Chart chart, ChartGraphics graphics);
    internal virtual void AdjustLocationSize(SizeF movingDistance, ResizingMode resizeMode, bool pixelCoord, bool userInput);
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Chart.WebForms.ProcessMode : Enum {
    public int value__;
    public static ProcessMode Paint;
    public static ProcessMode HotRegions;
    public static ProcessMode ImageMaps;
}
internal class Microsoft.Reporting.Chart.WebForms.RectangleA : object {
    private ValueA x;
    private ValueA y;
    private ValueA width;
    private ValueA height;
    public ValueA X { get; public set; }
    public ValueA Y { get; public set; }
    public ValueA Width { get; public set; }
    public ValueA Height { get; public set; }
    public ValueA get_X();
    public void set_X(ValueA value);
    public ValueA get_Y();
    public void set_Y(ValueA value);
    public ValueA get_Width();
    public void set_Width(ValueA value);
    public ValueA get_Height();
    public void set_Height(ValueA value);
    public RectangleF ToRectangleF();
}
[SRDescriptionAttribute("DescriptionAttributeRectangleAnnotation_RectangleAnnotation")]
internal class Microsoft.Reporting.Chart.WebForms.RectangleAnnotation : TextAnnotation {
    internal bool isRectVisible;
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLineColor")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLineWidth")]
public int LineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLineStyle4")]
public ChartDashStyle LineStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeBackColor8")]
[NotifyParentPropertyAttribute("True")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle5")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientType12")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackGradientEndColor8")]
public Color BackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType4")]
public string AnnotationType { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ParenthesizePropertyNameAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle3")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    public virtual Color get_LineColor();
    public virtual void set_LineColor(Color value);
    public virtual int get_LineWidth();
    public virtual void set_LineWidth(int value);
    public virtual ChartDashStyle get_LineStyle();
    public virtual void set_LineStyle(ChartDashStyle value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ChartHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(ChartHatchStyle value);
    public virtual GradientType get_BackGradientType();
    public virtual void set_BackGradientType(GradientType value);
    public virtual Color get_BackGradientEndColor();
    public virtual void set_BackGradientEndColor(Color value);
    public virtual string get_AnnotationType();
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
    internal virtual void Paint(Chart chart, ChartGraphics graphics);
}
internal enum Microsoft.Reporting.Chart.WebForms.RenderingType : Enum {
    public int value__;
    public static RenderingType Gdi;
    public static RenderingType Svg;
}
internal enum Microsoft.Reporting.Chart.WebForms.RenderType : Enum {
    public int value__;
    public static RenderType ImageTag;
    public static RenderType InputTag;
    public static RenderType BinaryStreaming;
    public static RenderType ImageMap;
}
[SRDescriptionAttribute("DescriptionAttributeResizingMode")]
internal enum Microsoft.Reporting.Chart.WebForms.ResizingMode : Enum {
    public int value__;
    public static ResizingMode TopLeftHandle;
    public static ResizingMode TopHandle;
    public static ResizingMode TopRightHandle;
    public static ResizingMode RightHandle;
    public static ResizingMode BottomRightHandle;
    public static ResizingMode BottomHandle;
    public static ResizingMode BottomLeftHandle;
    public static ResizingMode LeftHandle;
    public static ResizingMode AnchorHandle;
    public static ResizingMode Moving;
    public static ResizingMode MovingPathPoints;
    public static ResizingMode None;
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Chart.WebForms.ScrollBarButtonStyles : Enum {
    public int value__;
    public static ScrollBarButtonStyles None;
    public static ScrollBarButtonStyles SmallScroll;
    public static ScrollBarButtonStyles ResetZoom;
    public static ScrollBarButtonStyles All;
}
internal enum Microsoft.Reporting.Chart.WebForms.ScrollBarButtonType : Enum {
    public int value__;
    public static ScrollBarButtonType ThumbTracker;
    public static ScrollBarButtonType SmallDecrement;
    public static ScrollBarButtonType SmallIncrement;
    public static ScrollBarButtonType LargeDecrement;
    public static ScrollBarButtonType LargeIncrement;
    public static ScrollBarButtonType ZoomReset;
}
internal enum Microsoft.Reporting.Chart.WebForms.ScrollType : Enum {
    public int value__;
    public static ScrollType SmallDecrement;
    public static ScrollType SmallIncrement;
    public static ScrollType LargeDecrement;
    public static ScrollType LargeIncrement;
    public static ScrollType First;
    public static ScrollType Last;
}
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle_SelectionPointsStyle")]
internal enum Microsoft.Reporting.Chart.WebForms.SelectionPointsStyle : Enum {
    public int value__;
    public static SelectionPointsStyle TwoPoints;
    public static SelectionPointsStyle Rectangle;
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Chart.WebForms.SerializationContents : Enum {
    public int value__;
    public static SerializationContents Default;
    public static SerializationContents Data;
    public static SerializationContents Appearance;
    public static SerializationContents All;
}
internal enum Microsoft.Reporting.Chart.WebForms.SerializationFormat : Enum {
    public int value__;
    public static SerializationFormat Xml;
    public static SerializationFormat Binary;
}
[SRDescriptionAttribute("DescriptionAttributeSeries_Series")]
[DefaultPropertyAttribute("Points")]
internal class Microsoft.Reporting.Chart.WebForms.Series : DataPointAttributes {
    private string name;
    private ChartValueTypes xValueType;
    private ChartValueTypes yValueType;
    private bool xValueIndexed;
    private int yValuesPerPoint;
    private int markersStep;
    private ChartColorPalette colorPalette;
    private AxisType xAxisType;
    private AxisType yAxisType;
    private DataPointAttributes emptyPointAttributes;
    private DataPointCollection points;
    private int shadowOffset;
    private Color shadowColor;
    private string chartType;
    private string chartArea;
    private bool enabled;
    private string legend;
    private string dataSourceMemberX;
    private string dataSourceMemberY;
    internal bool autoXValueType;
    internal bool autoYValueType;
    private double totalYvalue;
    private Double[] dummyDoubleValues;
    internal ChartValueTypes indexedXValueType;
    internal static DataPointAttributes defaultAttributes;
    internal bool tempMarkerStyleIsSet;
    private bool defaultChartArea;
    private bool checkPointsNumber;
    internal Chart chart;
    internal FinancialMarkersCollection financialMarkers;
    private SmartLabelsStyle smartLabels;
    internal bool noLabelsInPoints;
    internal bool xValuesZeros;
    internal bool xValuesZerosChecked;
    internal DataPointCollection fakeDataPoints;
    internal string label;
    internal string axisLabel;
    internal string labelFormat;
    internal bool showLabelAsValue;
    internal Color color;
    internal Color borderColor;
    internal ChartDashStyle borderStyle;
    internal int borderWidth;
    internal int markerBorderWidth;
    internal string backImage;
    internal ChartImageWrapMode backImageMode;
    internal Color backImageTranspColor;
    internal ChartImageAlign backImageAlign;
    internal GradientType backGradientType;
    internal Color backGradientEndColor;
    internal ChartHatchStyle backHatchStyle;
    internal Font font;
    internal Color fontColor;
    internal int fontAngle;
    internal MarkerStyle markerStyle;
    internal int markerSize;
    internal string markerImage;
    internal Color markerImageTranspColor;
    internal Color markerColor;
    internal Color markerBorderColor;
    internal string toolTip;
    internal string href;
    internal string mapAreaAttributes;
    internal bool showInLegend;
    internal string legendText;
    internal string legendToolTip;
    internal Color labelBackColor;
    internal Color labelBorderColor;
    internal ChartDashStyle labelBorderStyle;
    internal int labelBorderWidth;
    internal string labelToolTip;
    internal string labelHref;
    internal string labelMapAreaAttributes;
    internal string legendHref;
    internal string legendMapAreaAttributes;
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_Name")]
public string Name { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeDataSource")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_ValueMemberX")]
[DefaultValueAttribute("")]
public string ValueMemberX { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeDataSource")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_ValueMembersY")]
[DefaultValueAttribute("")]
public string ValueMembersY { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeLegend")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_Legend")]
[DefaultValueAttribute("Default")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.SeriesLegendNameConverter")]
public string Legend { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_XValueType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartValueTypes XValueType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_XValueIndexed")]
[DefaultValueAttribute("False")]
public bool XValueIndexed { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_YValueType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.SeriesYValueTypeConverter")]
public ChartValueTypes YValueType { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_YValuesPerPoint")]
[DefaultValueAttribute("1")]
public int YValuesPerPoint { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_Points")]
public DataPointCollection Points { get; }
    [SRCategoryAttribute("CategoryAttributeEmptyPoints")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_EmptyPointStyle")]
public DataPointAttributes EmptyPointStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributePalette")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ChartColorPalette Palette { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMarker")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_MarkerStep")]
[DefaultValueAttribute("1")]
public int MarkerStep { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_ShadowOffset")]
[DefaultValueAttribute("0")]
public int ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "128,0,0,0")]
[SRDescriptionAttribute("DescriptionAttributeSeries_ShadowColor")]
public Color ShadowColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeFinancialMarkers")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_FinancialMarkers")]
public FinancialMarkersCollection FinancialMarkers { get; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAxes")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_YSubAxisName")]
[DefaultValueAttribute("")]
internal string YSubAxisName { get; internal set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAxes")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_XSubAxisName")]
[DefaultValueAttribute("")]
internal string XSubAxisName { get; internal set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAxes")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_XAxisType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AxisType XAxisType { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeAxes")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_YAxisType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AxisType YAxisType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_Enabled")]
[NotifyParentPropertyAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeChart")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_Type")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public SeriesChartType ChartType { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CategoryAttributeChart")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_Type")]
[DefaultValueAttribute("Column")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.ChartTypeConverter")]
[RefreshPropertiesAttribute("1")]
public string ChartTypeName { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeChart")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_ChartArea")]
[DefaultValueAttribute("Default")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.SeriesAreaNameConverter")]
public string ChartArea { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeAxisLabel")]
public string AxisLabel { get; public set; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("CategoryAttributeLabel")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeSeries_SmartLabels")]
public SmartLabelsStyle SmartLabels { get; public set; }
    private static Series();
    public Series(string name);
    public Series(string name, int yValues);
    private void InitProperties(string name, int YValuesPerPoint);
    internal string GetCaption();
    internal void GetPointDepthAndGap(ChartGraphics graph, Axis axis, Double& pointDepth, Double& pointGapDepth);
    internal double GetPointWidth(ChartGraphics graph, Axis axis, double interval, double defaultWidth);
    internal static string GetChartTypeName(SeriesChartType type);
    internal bool IsYValueDateTime();
    internal bool IsXValueDateTime();
    internal bool IsVisible();
    internal bool IsFastChartType();
    internal void CheckSupportedTypes(Type type);
    internal void ApplyPaletteColors();
    internal IEnumerable GetDummyData(ChartValueTypes type);
    internal double GetTotalYValue();
    internal double GetTotalYValue(int yValueIndex);
    internal string ReplaceKeywords(string strOriginal);
    internal string ReplaceOneKeyword(Chart chart, object obj, ChartElementType elementType, string strOriginal, string keyword, SeriesValuesFormulaType formulaType, ChartValueTypes valueType, string defaultFormat);
    internal string ReplaceOneKeyword(Chart chart, object obj, ChartElementType elementType, string strOriginal, string keyword, double value, ChartValueTypes valueType, string defaultFormat);
    internal void TraceWrite(string category, string message);
    public void Sort(PointsSortOrder order, string sortBy);
    public void Sort(PointsSortOrder order);
    public void Sort(IComparer comparer);
    internal bool UnPrepareData(ISite controlSite);
    internal void ResetAutoValues();
    internal void ResetAutoValues(bool reset);
    internal void PrepareData(ISite controlSite, bool applyPaletteColors);
    public string get_Name();
    public void set_Name(string value);
    public string get_ValueMemberX();
    public void set_ValueMemberX(string value);
    public string get_ValueMembersY();
    public void set_ValueMembersY(string value);
    public string get_Legend();
    public void set_Legend(string value);
    public ChartValueTypes get_XValueType();
    public void set_XValueType(ChartValueTypes value);
    public bool get_XValueIndexed();
    public void set_XValueIndexed(bool value);
    public ChartValueTypes get_YValueType();
    public void set_YValueType(ChartValueTypes value);
    public int get_YValuesPerPoint();
    public void set_YValuesPerPoint(int value);
    public DataPointCollection get_Points();
    public DataPointAttributes get_EmptyPointStyle();
    public void set_EmptyPointStyle(DataPointAttributes value);
    public ChartColorPalette get_Palette();
    public void set_Palette(ChartColorPalette value);
    public int get_MarkerStep();
    public void set_MarkerStep(int value);
    public int get_ShadowOffset();
    public void set_ShadowOffset(int value);
    public Color get_ShadowColor();
    public void set_ShadowColor(Color value);
    public FinancialMarkersCollection get_FinancialMarkers();
    internal string get_YSubAxisName();
    internal void set_YSubAxisName(string value);
    internal string get_XSubAxisName();
    internal void set_XSubAxisName(string value);
    public AxisType get_XAxisType();
    public void set_XAxisType(AxisType value);
    public AxisType get_YAxisType();
    public void set_YAxisType(AxisType value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public SeriesChartType get_ChartType();
    public void set_ChartType(SeriesChartType value);
    public string get_ChartTypeName();
    public void set_ChartTypeName(string value);
    public string get_ChartArea();
    public void set_ChartArea(string value);
    public virtual string get_AxisLabel();
    public virtual void set_AxisLabel(string value);
    public SmartLabelsStyle get_SmartLabels();
    public void set_SmartLabels(SmartLabelsStyle value);
    internal void Invalidate(bool invalidateAreaOnly, bool invalidateLegend);
}
internal enum Microsoft.Reporting.Chart.WebForms.SeriesChartType : Enum {
    public int value__;
    public static SeriesChartType Point;
    public static SeriesChartType FastPoint;
    public static SeriesChartType Bubble;
    public static SeriesChartType Line;
    public static SeriesChartType Spline;
    public static SeriesChartType StepLine;
    public static SeriesChartType FastLine;
    public static SeriesChartType Bar;
    public static SeriesChartType StackedBar;
    public static SeriesChartType StackedBar100;
    public static SeriesChartType Column;
    public static SeriesChartType StackedColumn;
    public static SeriesChartType StackedColumn100;
    public static SeriesChartType Area;
    public static SeriesChartType SplineArea;
    public static SeriesChartType StackedArea;
    public static SeriesChartType StackedArea100;
    public static SeriesChartType Pie;
    public static SeriesChartType Doughnut;
    public static SeriesChartType Stock;
    public static SeriesChartType Candlestick;
    public static SeriesChartType Range;
    public static SeriesChartType SplineRange;
    public static SeriesChartType Gantt;
    public static SeriesChartType RangeColumn;
    public static SeriesChartType Radar;
    public static SeriesChartType Polar;
    public static SeriesChartType ErrorBar;
    public static SeriesChartType BoxPlot;
    public static SeriesChartType Renko;
    public static SeriesChartType ThreeLineBreak;
    public static SeriesChartType Kagi;
    public static SeriesChartType PointAndFigure;
    public static SeriesChartType Funnel;
    public static SeriesChartType Pyramid;
    public static SeriesChartType TreeMap;
    public static SeriesChartType Sunburst;
}
[DefaultMemberAttribute("Item")]
[SRDescriptionAttribute("DescriptionAttributeSeriesCollection_SeriesCollection")]
internal class Microsoft.Reporting.Chart.WebForms.SeriesCollection : object {
    private ArrayList array;
    private IServiceContainer serviceContainer;
    [SRDescriptionAttribute("DescriptionAttributeSeriesCollection_Item")]
public Series Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public SeriesCollection(IServiceContainer container);
    public int GetIndex(string name);
    public Series Add(string name);
    public Series Add(string name, int yValuesPerPoint);
    public Series get_Item(object parameter);
    public void set_Item(object parameter, Series value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public bool Contains(Series value);
    public int IndexOf(Series value);
    public void Remove(Series value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual int Add(object value);
    public void Insert(int index, Series value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    private void Invalidate(string chartArea);
}
[SRDescriptionAttribute("DescriptionAttributeSmartLabels_SmartLabels")]
internal class Microsoft.Reporting.Chart.WebForms.SmartLabels : object {
    internal ArrayList smartLabelsPositions;
    internal bool checkAllCollisions;
    internal int markersCount;
    internal void Reset(CommonElements common, ChartArea area);
    internal PointF AdjustSmartLabelPosition(CommonElements common, ChartGraphics graph, ChartArea area, SmartLabelsStyle smartLabelsStyle, PointF labelPosition, SizeF labelSize, StringFormat& format, PointF markerPosition, SizeF markerSize, LabelAlignmentTypes labelAlignment);
    internal PointF AdjustSmartLabelPosition(CommonElements common, ChartGraphics graph, ChartArea area, SmartLabelsStyle smartLabelsStyle, PointF labelPosition, SizeF labelSize, StringFormat& format, PointF markerPosition, SizeF markerSize, LabelAlignmentTypes labelAlignment, bool checkCalloutLineOverlapping);
    private bool FindNewPosition(CommonElements common, ChartGraphics graph, ChartArea area, SmartLabelsStyle smartLabelsStyle, PointF& labelPosition, SizeF labelSize, StringFormat& format, PointF markerPosition, SizeF& markerSize, LabelAlignmentTypes& labelAlignment, bool checkCalloutLineOverlapping);
    internal virtual void DrawCallout(CommonElements common, ChartGraphics graph, ChartArea area, SmartLabelsStyle smartLabelsStyle, PointF labelPosition, SizeF labelSize, StringFormat format, PointF markerPosition, SizeF markerSize, LabelAlignmentTypes labelAlignment);
    internal virtual bool IsSmartLabelCollide(CommonElements common, ChartGraphics graph, ChartArea area, SmartLabelsStyle smartLabelsStyle, PointF position, SizeF size, PointF markerPosition, StringFormat format, LabelAlignmentTypes labelAlignment, bool checkCalloutLineOverlapping);
    private bool LineIntersectRectangle(RectangleF rect, PointF point1, PointF point2);
    internal virtual void AddMarkersPosition(CommonElements common, ChartArea area);
    internal void AddSmartLabelPosition(ChartGraphics graph, ChartArea area, PointF position, SizeF size, StringFormat format);
    internal RectangleF GetLabelPosition(ChartGraphics graph, PointF position, SizeF size, StringFormat format, bool adjustForDrawing);
    private PointF CalculatePosition(LabelAlignmentTypes labelAlignment, PointF markerPosition, SizeF sizeMarker, SizeF sizeFont, StringFormat& format);
}
[DefaultPropertyAttribute("Enabled")]
[SRDescriptionAttribute("DescriptionAttributeSmartLabelsStyle_SmartLabelsStyle")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.NoNameExpandableObjectConverter")]
internal class Microsoft.Reporting.Chart.WebForms.SmartLabelsStyle : object {
    internal object chartElement;
    private bool enabled;
    private bool markerOverlapping;
    private bool hideOverlapped;
    private LabelAlignmentTypes movingDirection;
    private double minMovingDistance;
    private double maxMovingDistance;
    private LabelOutsidePlotAreaStyle allowOutsidePlotArea;
    private LabelCalloutStyle calloutStyle;
    private Color calloutLineColor;
    private ChartDashStyle calloutLineStyle;
    private Color calloutBackColor;
    private int calloutLineWidth;
    private LineAnchorCap calloutLineAnchorCap;
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeEnabled13")]
[ParenthesizePropertyNameAttribute("True")]
public bool Enabled { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeMarkerOverlapping")]
public bool MarkerOverlapping { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeHideOverlapped")]
public bool HideOverlapped { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.LabelAlignmentTypes", "Top, Bottom, Right, Left, TopLeft, TopRight, BottomLeft, BottomRight")]
[SRDescriptionAttribute("DescriptionAttributeMovingDirection")]
public LabelAlignmentTypes MovingDirection { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeMinMovingDistance")]
public double MinMovingDistance { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[DefaultValueAttribute("30")]
[SRDescriptionAttribute("DescriptionAttributeMaxMovingDistance")]
public double MaxMovingDistance { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeAllowOutsidePlotArea")]
public LabelOutsidePlotAreaStyle AllowOutsidePlotArea { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeCalloutStyle3")]
public LabelCalloutStyle CalloutStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeCalloutLineColor")]
public Color CalloutLineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeCalloutLineStyle")]
public ChartDashStyle CalloutLineStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Transparent")]
[SRDescriptionAttribute("DescriptionAttributeCalloutBackColor")]
public Color CalloutBackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeCalloutLineWidth")]
public int CalloutLineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeCalloutLineAnchorCap")]
public LineAnchorCap CalloutLineAnchorCap { get; public set; }
    public SmartLabelsStyle(object chartElement);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public virtual bool get_MarkerOverlapping();
    public virtual void set_MarkerOverlapping(bool value);
    public virtual bool get_HideOverlapped();
    public virtual void set_HideOverlapped(bool value);
    public virtual LabelAlignmentTypes get_MovingDirection();
    public virtual void set_MovingDirection(LabelAlignmentTypes value);
    public virtual double get_MinMovingDistance();
    public virtual void set_MinMovingDistance(double value);
    public virtual double get_MaxMovingDistance();
    public virtual void set_MaxMovingDistance(double value);
    public virtual LabelOutsidePlotAreaStyle get_AllowOutsidePlotArea();
    public virtual void set_AllowOutsidePlotArea(LabelOutsidePlotAreaStyle value);
    public virtual LabelCalloutStyle get_CalloutStyle();
    public virtual void set_CalloutStyle(LabelCalloutStyle value);
    public virtual Color get_CalloutLineColor();
    public virtual void set_CalloutLineColor(Color value);
    public virtual ChartDashStyle get_CalloutLineStyle();
    public virtual void set_CalloutLineStyle(ChartDashStyle value);
    public virtual Color get_CalloutBackColor();
    public virtual void set_CalloutBackColor(Color value);
    public virtual int get_CalloutLineWidth();
    public virtual void set_CalloutLineWidth(int value);
    public virtual LineAnchorCap get_CalloutLineAnchorCap();
    public virtual void set_CalloutLineAnchorCap(LineAnchorCap value);
    private void Invalidate();
}
[CompilerGeneratedAttribute]
internal class Microsoft.Reporting.Chart.WebForms.SR : object {
    public static CultureInfo Culture { get; public set; }
    public static string ExceptionElementPositionConverter { get; }
    public static string ExceptionInvalidServiceContainer { get; }
    public static string ExceptionImageLoaderInvalidServiceContainer { get; }
    public static string ExceptionImageMapAddedHasWrongType { get; }
    public static string ExceptionImageMapInsertedHasWrongType { get; }
    public static string ExceptionImageMapCircleShapeInvalid { get; }
    public static string ExceptionImageMapRectangleShapeInvalid { get; }
    public static string ExceptionImageMapPolygonShapeInvalid { get; }
    public static string ExceptionAnnotationNameIsEmpty { get; }
    public static string ExceptionAnnotationTextDrawingStyleUnknown { get; }
    public static string ExceptionAnnotationPathAddLineAsSegmentsInvalid { get; }
    public static string ExceptionAnnotationLineWidthIsNegative { get; }
    public static string ExceptionAnnotationAnchorOffsetInvalid { get; }
    public static string ExceptionAnnotationGroupedAnchorDataPointMustBeEmpty { get; }
    public static string ExceptionAnnotationGroupedUnableToStartPlacement { get; }
    public static string ExceptionAnnotationNotInCollection { get; }
    public static string ExceptionAnnotationGroupedAxisMustBeEmpty { get; }
    public static string ExceptionAnnotationArrowSizeIsZero { get; }
    public static string ExceptionAnnotationArrowSizeMustBeLessThen100 { get; }
    public static string ExceptionAnnotationArrowStyleUnknown { get; }
    public static string ExceptionInvalidIndexerArgumentType { get; }
    public static string ExceptionTitleNameIsEmpty { get; }
    public static string ExceptionTitleTextDrawingStyleUnknown { get; }
    public static string ExceptionDataSeriesObjectRequired { get; }
    public static string ExceptionDataSeriesNameIsEmpty { get; }
    public static string ExceptionDataSeriesYValuesPerPointIsZero { get; }
    public static string ExceptionDataSeriesYValueNumberInvalid { get; }
    public static string ExceptionSeriesNameIsEmpty { get; }
    public static string ExceptionEditorChartTypeRegistryServiceInaccessible { get; }
    public static string ExceptionEditorMultipleSeriesEditiingUnsupported { get; }
    public static string ExceptionEditorContectInstantsIsNotChartObject { get; }
    public static string ExceptionEditorUITypeEditorInapplicable { get; }
    public static string ExceptionEditorUITypeEditorInt32ApplicableOnly { get; }
    public static string ExceptionObjectSelectorAlreadyRegistred { get; }
    public static string ExceptionRectangleConverterStringFormatInvalid { get; }
    public static string ExceptionChartAreaObjectRequired { get; }
    public static string ExceptionChartAreaInsertedHasWrongType { get; }
    public static string ExceptionChartAreaAlreadyExistsShort { get; }
    public static string ExceptionChartAreaNameIsEmpty { get; }
    public static string ExceptionChartArea3DPerspectiveInvalid { get; }
    public static string ExceptionChartArea3DXAxisRotationInvalid { get; }
    public static string ExceptionChartArea3DYAxisRotationInvalid { get; }
    public static string ExceptionChartArea3DWallWidthInvalid { get; }
    public static string ExceptionChartArea3DPointsDepthInvalid { get; }
    public static string ExceptionChartArea3DPointsGapInvalid { get; }
    public static string ExceptionCursorIntervalOffsetIsNegative { get; }
    public static string ExceptionCursorLineWidthIsNegative { get; }
    public static string ExceptionGraphicsMarkerStyleUnknown { get; }
    public static string ExceptionGraphics3DMarkerStyleUnknown { get; }
    public static string ExceptionGraphics3DCoordinatesInvalid { get; }
    public static string ExceptionAxisLabelsAutoFitMinFontSizeValueInvalid { get; }
    public static string ExceptionAxisLabelRowIndexIsNegative { get; }
    public static string ExceptionAxisLabelRowIndexMustBe1Or2 { get; }
    public static string ExceptionAxisLabelIndexIsNegative { get; }
    public static string ExceptionAxisLabelFontAngleInvalid { get; }
    public static string ExceptionCustomLabelAddedHasWrongType { get; }
    public static string ExceptionCustomLabelInsertedHasWrongType { get; }
    public static string ExceptionSmartLabelsDirectionUndefined { get; }
    public static string ExceptionSmartLabelsMinMovingDistanceIsNegative { get; }
    public static string ExceptionSmartLabelsMaxMovingDistanceIsNegative { get; }
    public static string ExceptionStripLineAddedHasWrongType { get; }
    public static string ExceptionStripLineWidthIsNegative { get; }
    public static string ExceptionStripLineTitleAngleInvalid { get; }
    public static string ExceptionAxisWidthIsNegative { get; }
    public static string ExceptionAxisDynamicIntervalCalculationFailed { get; }
    public static string ExceptionAxisIntervalDecreasingFailed { get; }
    public static string ExceptionAxisIntervalIncreasingFailed { get; }
    public static string ExceptionAxisLabelsAutoFitMaxFontSizeInvalid { get; }
    public static string ExceptionAxisMinimumMaximumInvalid { get; }
    public static string ExceptionAxisStackedChartsDataPointsNumberMismatch { get; }
    public static string ExceptionAxisStackedChartCrossingAxisUnsupported { get; }
    public static string ExceptionAxisSeriesNotAligned { get; }
    public static string ExceptionAxisScaleLogarithmBaseInvalid { get; }
    public static string ExceptionAxisScalePositionInvalid { get; }
    public static string ExceptionAxisScalePositionToValueCallFailed { get; }
    public static string ExceptionAxisScaleIntervalIsZero { get; }
    public static string ExceptionAxisScaleMinimumMaximumInvalid { get; }
    public static string ExceptionAxisScaleIntervalIsLessThen1Year { get; }
    public static string ExceptionAxisScaleAutoIntervalInvalid { get; }
    public static string ExceptionAxisScaleMinimumValueIsGreaterThenMaximumDataPoint { get; }
    public static string ExceptionAxisScaleLogarithmicNegativeValues { get; }
    public static string ExceptionChartAreaAxisScaleLogarithmicUnsuitable { get; }
    public static string ExceptionChartAreaChartTypesCanNotCombine { get; }
    public static string ExceptionChartAreaSeriesNotFound { get; }
    public static string ExceptionAxisScaleBreaksNumberInvalid { get; }
    public static string ExceptionAxisScaleBreaksCollapsibleSpaceInvalid { get; }
    public static string ExceptionAxisScaleBreaksSpacingInvalid { get; }
    public static string ExceptionAxisScaleBreaksLineWidthInvalid { get; }
    public static string ExceptionAxisScaleSegmentsPositionInvalid { get; }
    public static string ExceptionAxisScaleSegmentsSizeInvalid { get; }
    public static string ExceptionAxisScaleSegmentsSpacingInvalid { get; }
    public static string ExceptionTickMarksIntervalIsZero { get; }
    public static string ExceptionTickMarksIntervalIsNegative { get; }
    public static string ExceptionScrollBarSizeInvalid { get; }
    public static string ExceptionScrollBarZoomResetsNumberInvalid { get; }
    public static string ExceptionFinancialMarkerObjectRequired { get; }
    public static string ExceptionMarkerStepNegativeValue { get; }
    public static string ExceptionTextThresholdIsNegative { get; }
    public static string ExceptionNamedImageObjectRequired { get; }
    public static string ExceptionNamedImageInsertedHasWrongType { get; }
    public static string ExceptionLegendNameIsEmpty { get; }
    public static string ExceptionLegendAddedHasWrongType { get; }
    public static string ExceptionLegendInsertedHasWrongType { get; }
    public static string ExceptionLegendBackGradientEndColorIsTransparent { get; }
    public static string ExceptionLegendAutoFitMinFontSizeInvalid { get; }
    public static string ExceptionLegendMaximumAutoSizeInvalid { get; }
    public static string ExceptionLegendColumnSpacingInvalid { get; }
    public static string ExceptionLegendMarkerBorderWidthIsNegative { get; }
    public static string ExceptionLegendItemAddedHasWrongType { get; }
    public static string ExceptionLegendItemInsertedHasWrongType { get; }
    public static string ExceptionLegendColumnIsEmpty { get; }
    public static string ExceptionSeriesSymbolSizeIsNegative { get; }
    public static string ExceptionMinimumCellWidthIsWrong { get; }
    public static string ExceptionMaximumCellWidthIsWrong { get; }
    public static string ExceptionLegendCellNameIsEmpty { get; }
    public static string ExceptionLegendCellImageSizeIsNegative { get; }
    public static string ExceptionLegendCellSeriesSymbolSizeIsNegative { get; }
    public static string ExceptionLegendCellSpanIsLessThenOne { get; }
    public static string ExceptionMarginTopIsNegative { get; }
    public static string ExceptionMarginBottomIsNegative { get; }
    public static string ExceptionMarginLeftIsNegative { get; }
    public static string ExceptionMarginRightIsNegative { get; }
    public static string ExceptionAnimationFramesPerSecondIsNegative { get; }
    public static string ExceptionAnimationFramesPerSecondIsOver32 { get; }
    public static string ExceptionAnimationDurationIsnegative { get; }
    public static string ExceptionAnimationStartEndNegative { get; }
    public static string ExceptionAnimationStartXRangeInvalid { get; }
    public static string ExceptionAnimationStartYRangeInvalid { get; }
    public static string ExceptionAnimationElementUnknown { get; }
    public static string ExceptionAnimationUnsupported { get; }
    public static string ExceptionAnimationStartGreaterThenEnd { get; }
    public static string ExceptionAnimationElementStringInvalid { get; }
    public static string ExceptionAnimationStartedWithoutBeingStopped { get; }
    public static string ExceptionAnimationStoppedWithoutBeingStarted { get; }
    public static string ExceptionAnimationManagerMutuallyExclusive { get; }
    public static string ExceptionAnimationSvgRepeatDelayIsNotZiro { get; }
    public static string ExceptionAnimationSvgRepeatAnimationUnsupported { get; }
    public static string ExceptionAnimationRepeatDelayIsNegative { get; }
    public static string ExceptionAnimationConstructorInvalid { get; }
    public static string ExceptionAnimationObjectAddedIsNotAnimationBase { get; }
    public static string ExceptionAnimationObjectInsertedIsNotAnimationBase { get; }
    public static string ExceptionAnimationElementInsertedIsNotAnimationBase { get; }
    public static string ExceptionAnimationSvgColorBrushNotExist { get; }
    public static string ExceptionAnimationSvgColorPenNotExist { get; }
    public static string ExceptionAnimationSvgDataPointInitializationInvalid { get; }
    public static string ExceptionSvgPictureSizeInvalid { get; }
    public static string ExceptionSvgTextWriterInvalid { get; }
    public static string ExceptionSvgOutputWriterIsNull { get; }
    public static string ExceptionSvgGradientUndefined { get; }
    public static string ExceptionSvgWrapStringIsNull { get; }
    public static string ExceptionElementPositionArgumentOutOfRange { get; }
    public static string ExceptionRepeatDelayIsNegative { get; }
    public static string ExceptionChartHeightIsNotInPixels { get; }
    public static string ExceptionChartWidthIsNotInPixels { get; }
    public static string ExceptionChartWidthLessThen5Pixels { get; }
    public static string ExceptionChartHeightLessThen5Pixels { get; }
    public static string ExceptionChartBorderIsNegative { get; }
    public static string ExceptionChartCompressionInvalid { get; }
    public static string ExceptionChartDataPointsAlignmentFaild { get; }
    public static string ExceptionChartDataPointsAlignmentFaildAxisLabelsInvalid { get; }
    public static string ExceptionChartDataPointsInsertionFailedYValuesEmpty { get; }
    public static string ExceptionChartTypeHasNoInterface { get; }
    public static string ExceptionBorderTypeHasNoInterface { get; }
    public static string ExceptionChartSerializerContentFlagUnsupported { get; }
    public static string ExceptionChartSerializerIsAlreadyRegistred { get; }
    public static string ExceptionChartSerializerPropertyIdUnknown { get; }
    public static string ExceptionChartSerializerContentStringFormatInvalid { get; }
    public static string ExceptionChartSerializerClassNameUndefined { get; }
    public static string ExceptionChartSerializerPropertyNameUndefined { get; }
    public static string ExceptionChartSerializerWriterObjectInvalid { get; }
    public static string ExceptionChartSerializerReaderObjectInvalid { get; }
    public static string ExceptionChartSerializerDestinationObjectInvalid { get; }
    public static string ExceptionChartSerializerSourceObjectInvalid { get; }
    public static string ExceptionChartSerializerBinaryIgnoreUnknownAttributesUnsupported { get; }
    public static string ExceptionChartSerializerBinaryFromatInvalid { get; }
    public static string ExceptionChartSerializerPropertyNotFound { get; }
    public static string ExceptionDataManipulatorPointCountIsZero { get; }
    public static string ExceptionDataManipulatorIndexUndefined { get; }
    public static string ExceptionDataManipulatorIndexFormatInvalid { get; }
    public static string ExceptionDataManipulatorGroupedSeriesNotSorted { get; }
    public static string ExceptionDataManipulatorGroupingFormulaUndefined { get; }
    public static string ExceptionDataManipulatorGroupingFormulaUnsupported { get; }
    public static string ExceptionDataManipulatorGroupingInputSeriesUndefined { get; }
    public static string ExceptionDataManipulatorGroupingInputOutputSeriesNumberMismatch { get; }
    public static string ExceptionDataBindYValuesToString { get; }
    public static string ExceptionDataBindXValuesToString { get; }
    public static string ExceptionDataBindSeriesToString { get; }
    public static string ExceptionDataBindSeriesGroupByParameterIsEmpty { get; }
    public static string ExceptionChartBackGradientEndColorIsTransparent { get; }
    public static string ExceptionImageUrlIsEmpty { get; }
    public static string ExceptionImageUrlInvalidFormatters { get; }
    public static string ExceptionImageUrlInvalidFormat { get; }
    public static string ExceptionImageUrlMissedFormatter { get; }
    public static string ExceptionDataManager100StackedSeriesPointsNumeberMismatch { get; }
    public static string ExceptionFormulaModuleHasNoInterface { get; }
    public static string ExceptionDataPointConverterInvalidSorting { get; }
    public static string ExceptionDataPointConverterWrongTypes { get; }
    public static string ExceptionDataPointInsertionXValuesQtyIsLessYValues { get; }
    public static string ExceptionDataPointValueNameInvalid { get; }
    public static string ExceptionDataPointValueNameYIndexOutOfRange { get; }
    public static string ExceptionDataPointValueNameYIndexIsNotPositive { get; }
    public static string ExceptionDataPointInsertionNoDataSource { get; }
    public static string ExceptionDataPointBindingYValueNotSpecified { get; }
    public static string ExceptionDataPointInsertionYValueNotSpecified { get; }
    public static string ExceptionAttributeUnableToDelete { get; }
    public static string ExceptionAttributeNameIsEmpty { get; }
    public static string ExceptionAttributeInvalidFormat { get; }
    public static string ExceptionAttributeDrawSideBySideInvalid { get; }
    public static string ExceptionLabelBorderIsNotPositive { get; }
    public static string ExceptionBorderWidthIsNotPositive { get; }
    public static string ExceptionAngleRangeInvalid { get; }
    public static string ExceptionDataPointYValueStringFormat { get; }
    public static string ExceptionParameterFormatInvalid { get; }
    public static string ExceptionStatisticalAnalysesInvalidAlphaValue { get; }
    public static string ExceptionStatisticalAnalysesInvalidProbabilityValue { get; }
    public static string ExceptionStatisticalAnalysesInvalidDegreeOfFreedom { get; }
    public static string ExceptionStatisticalAnalysesNegativeMeanDifference { get; }
    public static string ExceptionStatisticalAnalysesInvalidSeriesNumber { get; }
    public static string ExceptionStatisticalAnalysesInvalidMeanDifference { get; }
    public static string ExceptionStatisticalAnalysesNotEnoughDataPoints { get; }
    public static string ExceptionStatisticalAnalysesInvalidVariance { get; }
    public static string ExceptionStatisticalAnalysesInvalidTValue { get; }
    public static string ExceptionStatisticalAnalysesGammaBetaNegativeParameters { get; }
    public static string ExceptionStatisticalAnalysesInvalidZValue { get; }
    public static string ExceptionStatisticalAnalysesZeroVariance { get; }
    public static string ExceptionStatisticalAnalysesNotEnoughInputSeries { get; }
    public static string ExceptionStatisticalAnalysesInvalidVariableRanges { get; }
    public static string ExceptionStatisticalAnalysesStudentsInvalidTValue { get; }
    public static string ExceptionStatisticalAnalysesStudentsNegativeFreedomDegree { get; }
    public static string ExceptionStatisticalAnalysesNormalInvalidProbabilityValue { get; }
    public static string ExceptionStatisticalAnalysesInvalidSampleVariance { get; }
    public static string ExceptionStatisticalAnalysesInvalidTailedParameter { get; }
    public static string ExceptionStatisticalAnalysesInvalidInputParameter { get; }
    public static string ExceptionStatisticalAnalysesNoneIntegerFreedomDegree { get; }
    public static string ExceptionStatisticalAnalysesIncompleteBetaFunction { get; }
    public static string ExceptionStatisticalAnalysesInvalidAnovaTest { get; }
    public static string ExceptionStatisticalAnalysesCovariance { get; }
    public static string ExceptionStatisticalAnalysesInvalidMedianConditions { get; }
    public static string ExceptionStatisticalAnalysesInvalidMeanConditions { get; }
    public static string ExceptionStatisticalAnalysesInvalidVarianceConditions { get; }
    public static string ExceptionPeriodParameterIsNegative { get; }
    public static string ExceptionPeriodAverageParameterIsNegative { get; }
    public static string ExceptionPeriodShortParameterIsNegative { get; }
    public static string ExceptionPeriodLongParameterIsNegative { get; }
    public static string ExceptionIndicatorsDeviationMissing { get; }
    public static string ExceptionIndicatorsLongPeriodLessThenShortPeriod { get; }
    public static string ExceptionOscillatorObjectInvalidPeriod { get; }
    public static string ExceptionOscillatorNegativeSignalPeriod { get; }
    public static string ExceptionOscillatorNegativePeriodParameter { get; }
    public static string ExceptionVolumeIndicatorStartValueMissing { get; }
    public static string ExceptionPriceIndicatorsShiftParameterMissing { get; }
    public static string ExceptionPriceIndicatorsSameYNumber { get; }
    public static string ExceptionPriceIndicatorsSameXYNumber { get; }
    public static string ExceptionPriceIndicatorsPeriodMissing { get; }
    public static string ExceptionPriceIndicatorsNotEnoughPoints { get; }
    public static string ExceptionPriceIndicatorsFormulaRequiresOneArray { get; }
    public static string ExceptionPriceIndicatorsFormulaRequiresTwoArrays { get; }
    public static string ExceptionPriceIndicatorsFormulaRequiresThreeArrays { get; }
    public static string ExceptionPriceIndicatorsFormulaRequiresFourArrays { get; }
    public static string ExceptionObjectReferenceIsNull { get; }
    public static string ExceptionListIndexIsOutOfRange { get; }
    public static string ExceptionThreeLineBreakCanNotCobine { get; }
    public static string ExceptionThreeLineBreakNullReference { get; }
    public static string ExceptionThreeLineBreakUsedYValueOutOfRange { get; }
    public static string ExceptionThreeLineBreakNumberOfLinesInBreakFormatInvalid { get; }
    public static string ExceptionThreeLineBreakUpBrickColorInvalid { get; }
    public static string ExceptionThreeLineBreakUsedYValueInvalid { get; }
    public static string ExceptionThreeLineBreakNumberOfLinesInBreakValueInvalid { get; }
    public static string ExceptionRenkoCanNotCobine { get; }
    public static string ExceptionRenkoNullReference { get; }
    public static string ExceptionRenkoUsedYValueOutOfRange { get; }
    public static string ExceptionRenkoBoxSizeFormatInvalid { get; }
    public static string ExceptionRenkoUpBrickColorInvalid { get; }
    public static string ExceptionRenkoUsedYValueFormatInvalid { get; }
    public static string ExceptionPieIntervalsInvalid { get; }
    public static string ExceptionPieUnassignedFrontBackPoints { get; }
    public static string ExceptionPiePointOrderInvalid { get; }
    public static string ExceptionPieHorizontalLineSizeInvalid { get; }
    public static string ExceptionPieRadialLineSizeInvalid { get; }
    public static string ExceptionPie3DLabelLineSizeInvalid { get; }
    public static string ExceptionPieRadiusInvalid { get; }
    public static string ExceptionPieMinimumRelativePieSizeInvalid { get; }
    public static string ExceptionPieOrderOperationInvalid { get; }
    public static string ExceptionPieIntervalsOverlapping { get; }
    public static string ExceptionDoughnutNullReference { get; }
    public static string ExceptionDoughnutThresholdInvalid { get; }
    public static string ExceptionDoughnutCollectedThresholdUsePercentInvalid { get; }
    public static string ExceptionDoughnutCollectedColorInvalidFormat { get; }
    public static string ExceptionDoughnutCollectedThresholdInvalidFormat { get; }
    public static string ExceptionDoughnutCollectedThresholdInvalidRange { get; }
    public static string ExceptionPointAndFigureUpBrickColorInvalidFormat { get; }
    public static string ExceptionPointAndFigureCanNotCombine { get; }
    public static string ExceptionPointAndFigureNullReference { get; }
    public static string ExceptionPointAndFigureUsedYValueHighOutOfRange { get; }
    public static string ExceptionPointAndFigureUsedYValueLowOutOfrange { get; }
    public static string ExceptionPointAndFigureReversalAmountInvalidFormat { get; }
    public static string ExceptionPointAndFigureUsedYValueHighInvalidFormat { get; }
    public static string ExceptionPointAndFigureUsedYValueLowInvalidFormat { get; }
    public static string ExceptionFastPointMarkerStyleUnknown { get; }
    public static string ExceptionFunnelAngleRangeInvalid { get; }
    public static string ExceptionFunnelCanNotCombine { get; }
    public static string ExceptionFunnelNeckHeightInvalid { get; }
    public static string ExceptionFunnelNeckWidthInvalid { get; }
    public static string ExceptionKagiNullReference { get; }
    public static string ExceptionKagiCanNotCombine { get; }
    public static string ExceptionStackedAreaChartSeriesDataPointsNumberMismatch { get; }
    public static string Exception3DPieLabelsIndexInvalid { get; }
    public static string Exception3DChartPointsXValuesUnsorted { get; }
    public static string ExceptionFunnelMinimumPointHeightAttributeInvalid { get; }
    public static string ExceptionErrorBarParameterUndefined { get; }
    public static string Exception3DSplineY1ValueIsLessThenY2 { get; }
    public static string ExceptionCustomAttributeDefaultValueTypeInvalid { get; }
    public static string ExceptionFormulaDataItemsNumberMismatch { get; }
    public static string ExceptionFormulaDataItemsNumberMismatch2 { get; }
    public static string ExceptionFormulaDataOutputSeriesNumberYValuesIncorrect { get; }
    public static string ExceptionFormulaDataZeroIndexedXValuesUnsupported { get; }
    public static string ExceptionFormulaYIndexInvalid { get; }
    public static string ExceptionFormulaXValuesNotAligned { get; }
    public static string ExceptionFormulaInputOutputSeriesMismatch { get; }
    public static string ExceptionFinancialMarkersDataPointsHaveSameXValues { get; }
    public static string ExceptionFinancialMarkersFormulaNotFound { get; }
    public static string ExceptionFinancialMarkersSeriesPointYValueIndexInvalid { get; }
    public static string ExceptionForecastingDegreeInvalid { get; }
    public static string ExceptionForecastingExponentialRegressionHasZeroYValues { get; }
    public static string ExceptionForecastingPowerRegressionHasZeroYValues { get; }
    public static string ExceptionCommandIndexISNegative { get; }
    public static string ExceptionCommandNoOutputData { get; }
    public static string ExceptionContextMenuAttributesOutOfChart { get; }
    public static string ExceptionBorderWidthIsNegative { get; }
    public static string ExceptionBorderWidthIsZero { get; }
    public static string ExceptionLegendBorderWidthIsNegative { get; }
    public static string ExceptionTitleBorderWidthIsNegative { get; }
    public static string ExceptionMatrix3DNotinitialized { get; }
    public static string ExceptionPaletteIsEmpty { get; }
    public static string ExceptionChartCallBackIsAlreadyRegistred { get; }
    public static string ExceptionChartCallBackClickCoordinatesInvalid { get; }
    public static string ExceptionChartCallBackHandlerIsAlreadyRegistred { get; }
    public static string ExceptionChartOrCallBackHandlerAreNull { get; }
    public static string ExceptionHttpHandlerCanNotSave { get; }
    public static string ExceptionHttpHandlerValueInvalid { get; }
    public static string ExceptionHttpHandlerTimeoutParameterInvalid { get; }
    public static string ExceptionHttpHandlerUrlMissing { get; }
    public static string ExceptionHttpHandlerUrlInvalid { get; }
    public static string ExceptionUtilitiesCanNotConvertNullToZoomIntervalData { get; }
    public static string ExceptionLicenceProductKeyInvalid { get; }
    public static string ExceptionCoolMenuImageIndexInvalid { get; }
    public static string ExceptionCoolMenuItemIsNotAttached { get; }
    public static string ExceptionCoolBarNotFound { get; }
    public static string DescriptionCustomAttributeEmptyPointValue { get; }
    public static string DescriptionCustomAttributePieDonutExploded { get; }
    public static string DescriptionCustomAttributeProportionalSymbols { get; }
    public static string DescriptionCustomAttributeDrawSideBySide { get; }
    public static string DescriptionCustomAttributeShowMarkerLines { get; }
    public static string DescriptionCustomAttributeShowOpenClose { get; }
    public static string DescriptionCustomAttributeBoxPlotShowAverage { get; }
    public static string DescriptionCustomAttributeBubbleUseSizeForLabel { get; }
    public static string DescriptionCustomAttributeBoxPlotShowMedian { get; }
    public static string DescriptionCustomAttributeBoxPlotShowUnusualValues { get; }
    public static string DescriptionCustomAttributeBoxPlotSeries { get; }
    public static string DescriptionCustomAttributePieStartAngle { get; }
    public static string DescriptionCustomAttributeLabelStyle { get; }
    public static string DescriptionCustomAttributeFunnelLabelStyle { get; }
    public static string DescriptionCustomAttributeFunnelStyle { get; }
    public static string DescriptionCustomAttributePolarDrawingStyle { get; }
    public static string DescriptionCustomAttributePyramidLabelStyle { get; }
    public static string DescriptionCustomAttributeRadarDrawingStyle { get; }
    public static string DescriptionCustomAttributeBoxSize { get; }
    public static string DescriptionCustomAttributeCollectedColor { get; }
    public static string DescriptionCustomAttributeCollectedLabel { get; }
    public static string DescriptionCustomAttributeCollectedLegendText { get; }
    public static string DescriptionCustomAttributeCollectedLegendDefaultText { get; }
    public static string DescriptionCustomAttributeCollectedLabelDefaultText { get; }
    public static string DescriptionCustomAttributeCollectedToolTip { get; }
    public static string DescriptionCustomAttributePyramidValueType { get; }
    public static string DescriptionCustomAttribute_3DLabelLineSize { get; }
    public static string DescriptionCustomAttributeFunnel3DRotationAngle { get; }
    public static string DescriptionCustomAttributePyramid3DRotationAngle { get; }
    public static string DescriptionCustomAttributePixelPointDepth { get; }
    public static string DescriptionCustomAttributePixelPointGapDepth { get; }
    public static string DescriptionCustomAttributeErrorBarCenterMarkerStyle { get; }
    public static string DescriptionCustomAttributePointFigureBoxSize { get; }
    public static string DescriptionCustomAttributeBubbleScaleMax { get; }
    public static string DescriptionCustomAttributeBubbleScaleMin { get; }
    public static string DescriptionCustomAttributeCollectedStyle { get; }
    public static string DescriptionCustomAttributeCollectedThreshold { get; }
    public static string DescriptionCustomAttributePieLineColor { get; }
    public static string DescriptionCustomAttributeCalloutLineColor { get; }
    public static string DescriptionCustomAttributePieLabelStyle { get; }
    public static string DescriptionCustomAttributeFunnel3DDrawingStyle { get; }
    public static string DescriptionCustomAttributePyramid3DDrawingStyle { get; }
    public static string DescriptionCustomAttributeDrawingStyle { get; }
    public static string DescriptionCustomAttributePieDrawingStyle { get; }
    public static string DescriptionCustomAttributeCollectedSliceExploded { get; }
    public static string DescriptionCustomAttributeCollectedThresholdUsePercent { get; }
    public static string DescriptionCustomAttributeFunnelNeckHeight { get; }
    public static string DescriptionCustomAttributeFunnelNeckWidth { get; }
    public static string DescriptionCustomAttributePyramidPointGap { get; }
    public static string DescriptionCustomAttributeFunnelPointGap { get; }
    public static string DescriptionCustomAttributeLabelsHorizontalLineSize { get; }
    public static string DescriptionCustomAttributeDoughnutRadius { get; }
    public static string DescriptionCustomAttributePolarCircularLabelsStyle { get; }
    public static string DescriptionCustomAttributeRadarCircularLabelsStyle { get; }
    public static string DescriptionCustomAttributeOpenCloseStyle { get; }
    public static string DescriptionCustomAttributeBubbleMaxSize { get; }
    public static string DescriptionCustomAttributeMaxPixelPointWidth { get; }
    public static string DescriptionCustomAttributePyramidMinPointHeight { get; }
    public static string DescriptionCustomAttributeFunnelMinPointHeight { get; }
    public static string DescriptionCustomAttributeMinimumRelativePieSize { get; }
    public static string DescriptionCustomAttributeMinPixelPointWidth { get; }
    public static string DescriptionCustomAttributeErrorBarSeries { get; }
    public static string DescriptionCustomAttributeNumberOfLinesInBreak { get; }
    public static string DescriptionCustomAttributePyramidOutsideLabelPlacement { get; }
    public static string DescriptionCustomAttributeFunnelOutsideLabelPlacement { get; }
    public static string DescriptionCustomAttributeBoxPlotPercentile { get; }
    public static string DescriptionCustomAttributeBoxPlotWhiskerPercentile { get; }
    public static string DescriptionCustomAttributeBarLabelStyle { get; }
    public static string DescriptionCustomAttributeLabelsRadialLineSize { get; }
    public static string DescriptionCustomAttributePointWidth { get; }
    public static string DescriptionCustomAttributeReversalAmount { get; }
    public static string DescriptionCustomAttributePolarAreaDrawingStyle { get; }
    public static string DescriptionCustomAttributeRadarAreaDrawingStyle { get; }
    public static string DescriptionCustomAttributeStackedGroupName { get; }
    public static string DescriptionCustomAttributeLineTension { get; }
    public static string DescriptionCustomAttributeCandlePriceUpColor { get; }
    public static string DescriptionCustomAttributeBarsPriceUpColor { get; }
    public static string DescriptionCustomAttributePriceDownColor { get; }
    public static string DescriptionCustomAttributeUsedYValueHigh { get; }
    public static string DescriptionCustomAttributeUsedYValueLow { get; }
    public static string DescriptionCustomAttributeRenkoUsedYValue { get; }
    public static string DescriptionCustomAttributeThreeLineBreakUsedYValue { get; }
    public static string DescriptionCustomAttributePyramidInsideLabelAlignment { get; }
    public static string DescriptionCustomAttributeFunnelInsideLabelAlignment { get; }
    public static string DescriptionCustomAttributeErrorBarStyle { get; }
    public static string DescriptionCustomAttributePixelPointWidth { get; }
    public static string DescriptionCustomAttributeLabelValueType { get; }
    public static string DescriptionCustomAttributeUsedYValue { get; }
    public static string DescriptionCustomAttributeKagiReversalAmount { get; }
    public static string DescriptionCustomAttributeErrorBarType { get; }
    public static string DescriptionCustomAttributeSkipPaletteColorForEmptyPoint { get; }
    public static string DescriptionCustomAttributeColumnChartShowColumnAs { get; }
    public static string DescriptionCustomAttributeHistogramSegmentIntervalNumber { get; }
    public static string DescriptionCustomAttributeHistogramSegmentIntervalWidth { get; }
    public static string DescriptionCustomAttributeHistogramShowPercentOnSecondaryYAxis { get; }
    public static string DescriptionCustomAttributeShowPieAsCollected { get; }
    public static string DescriptionCustomAttributeShowCollectedLegend { get; }
    public static string DescriptionCustomAttributeShowCollectedPointLabels { get; }
    public static string DescriptionCustomAttributeCollectedPercentage { get; }
    public static string DescriptionCustomAttributeCollectedSliceColor { get; }
    public static string DescriptionCustomAttributeCollectedSliceLabel { get; }
    public static string DescriptionKeyWordAverageYValues { get; }
    public static string DescriptionKeyWordAxisLabelDataPoint { get; }
    public static string DescriptionKeyWordIndexDataPoint { get; }
    public static string DescriptionKeyWordLabelDataPoint { get; }
    public static string DescriptionKeyWordYValuePercentTotal { get; }
    public static string DescriptionKeyWordIndexDataPoint2 { get; }
    public static string DescriptionKeyWordLegendText { get; }
    public static string DescriptionKeyWordMaximumYValues { get; }
    public static string DescriptionKeyWordMinimumYValues { get; }
    public static string DescriptionKeyWordSeriesName { get; }
    public static string DescriptionKeyWordTotalYValues { get; }
    public static string DescriptionKeyWordXValue { get; }
    public static string DescriptionKeyWordFirstPointYValue { get; }
    public static string DescriptionKeyWordLastPointYValue { get; }
    public static string DescriptionKeyWordYValue { get; }
    public static string DescriptionKeyWordNameIndexDataPoint { get; }
    public static string DescriptionKeyWordNameXValue { get; }
    public static string DescriptionKeyWordNameYValue { get; }
    public static string DescriptionKeyWordNameTotalYValues { get; }
    public static string DescriptionKeyWordNameYValuePercentTotal { get; }
    public static string DescriptionKeyWordNameIndexTheDataPoint { get; }
    public static string DescriptionKeyWordNameLabelDataPoint { get; }
    public static string DescriptionKeyWordNameAxisLabelDataPoint { get; }
    public static string DescriptionKeyWordNameLegendText { get; }
    public static string DescriptionKeyWordNameSeriesName { get; }
    public static string DescriptionKeyWordNameAverageYValues { get; }
    public static string DescriptionKeyWordNameMaximumYValues { get; }
    public static string DescriptionKeyWordNameMinimumYValues { get; }
    public static string DescriptionKeyWordNameLastPointYValue { get; }
    public static string DescriptionKeyWordNameFirstPointYValue { get; }
    public static string DescriptionDateFormatSmallD { get; }
    public static string DescriptionDateFormatCapitalD { get; }
    public static string DescriptionDateFormatSmallT { get; }
    public static string DescriptionDateFormatCapitalT { get; }
    public static string DescriptionDateFormatSmallF { get; }
    public static string DescriptionDateFormatCapitalF { get; }
    public static string DescriptionDateFormatSmallG { get; }
    public static string DescriptionDateFormatCapitalG { get; }
    public static string DescriptionDateFormatCapitalM { get; }
    public static string DescriptionDateFormatCapitalR { get; }
    public static string DescriptionDateFormatSmallS { get; }
    public static string DescriptionDateFormatSmallU { get; }
    public static string DescriptionDateFormatCapitalU { get; }
    public static string DescriptionDateFormatCapitalY { get; }
    public static string DescriptionNumberFormatC { get; }
    public static string DescriptionNumberFormatD { get; }
    public static string DescriptionNumberFormatE { get; }
    public static string DescriptionNumberFormatF { get; }
    public static string DescriptionNumberFormatG { get; }
    public static string DescriptionNumberFormatN { get; }
    public static string DescriptionNumberFormatP { get; }
    public static string DescriptionNumberFormatTypeCurrency { get; }
    public static string DescriptionNumberFormatTypeDecimal { get; }
    public static string DescriptionNumberFormatTypeScientific { get; }
    public static string DescriptionNumberFormatTypeFixedPoint { get; }
    public static string DescriptionNumberFormatTypeGeneral { get; }
    public static string DescriptionNumberFormatTypeNumber { get; }
    public static string DescriptionNumberFormatTypePercent { get; }
    public static string DescriptionTypeNone { get; }
    public static string DescriptionTypeNotSet { get; }
    public static string DescriptionTypeCustom { get; }
    public static string DescriptionTypeCurrent { get; }
    public static string DescriptionTypeEmpty { get; }
    public static string DescriptionTypePoint { get; }
    public static string ComboItemDateFormatShortDate { get; }
    public static string ComboItemDateFormatLongDate { get; }
    public static string ComboItemDateFormatShortTime { get; }
    public static string ComboItemDateFormatLongTime { get; }
    public static string ComboItemDateFormatFullDateTimeShortTime { get; }
    public static string ComboItemDateFormatFullDateTimeLongTime { get; }
    public static string ComboItemDateFormatGeneralDateTime { get; }
    public static string ComboItemDateFormatGeneralDateTimeShortTime { get; }
    public static string ComboItemDateFormatGeneralDateTimeLongTime { get; }
    public static string ComboItemDateFormatMonthDay { get; }
    public static string ComboItemDateFormatRFC1123 { get; }
    public static string ComboItemDateFormatSortableDateTimeISO8601 { get; }
    public static string ComboItemDateFormatUniversalSortableDateTime { get; }
    public static string ComboItemDateFormatUniversalFullDateTime { get; }
    public static string ComboItemDateFormatYearMonth { get; }
    public static string LabelPrecisionSpecifier { get; }
    public static string LabelFormatType { get; }
    public static string LabelFormatString { get; }
    public static string LabelKeyFormat { get; }
    public static string LabelKeyCustomFormat { get; }
    public static string LabelSample { get; }
    public static string LabelTabNumeric { get; }
    public static string LabelTabDateTime { get; }
    public static string LabelCustom { get; }
    public static string LabelCustomNumericDateTimeFormatString { get; }
    public static string LabelCustomFormatTypeNumber { get; }
    public static string LabelCustomFormatTypeDateTime { get; }
    public static string LabelLabelFormat { get; }
    public static string LabelStringWithKeywords { get; }
    public static string LabelEditKeyword { get; }
    public static string LabelInsertNewKeyword { get; }
    public static string LabelStringKeywordsEditor { get; }
    public static string LabelKeywordEditor { get; }
    public static string LabelEditChartItem { get; }
    public static string LabelDescription { get; }
    public static string LabelFormatKeySample { get; }
    public static string LabelKeyYValueIndex { get; }
    public static string LabelKeyPrecision { get; }
    public static string LabelKeyKeywords { get; }
    public static string LabelValueFormatting { get; }
    public static string LabelAnimatedElements { get; }
    public static string LabelKeyAnimatedElements { get; }
    public static string LabelKeyNoAnimatedElements { get; }
    public static string LabelButtonOk { get; }
    public static string LabelButtonOkWithKey { get; }
    public static string LabelButtonApply { get; }
    public static string LabelButtonCancel { get; }
    public static string LabelButtonCancelWithKey { get; }
    public static string DesciptionCustomLabelFormatCharacters { get; }
    public static string DescriptionToolTipCustomFormatCharacters { get; }
    public static string DesciptionCustomLabelFormatSomeCharacters { get; }
    public static string DesciptionCustomLabelEditorTitle { get; }
    public static string DesciptionCustomLabelFormatInvalid { get; }
    public static string LabelStatisticalSumOfSquaresBetweenGroups { get; }
    public static string LabelStatisticalSumOfSquaresWithinGroups { get; }
    public static string LabelStatisticalSumOfSquaresTotal { get; }
    public static string LabelStatisticalDegreesOfFreedomBetweenGroups { get; }
    public static string LabelStatisticalDegreesOfFreedomWithinGroups { get; }
    public static string LabelStatisticalDegreesOfFreedomTotal { get; }
    public static string LabelStatisticalMeanSquareVarianceBetweenGroups { get; }
    public static string LabelStatisticalMeanSquareVarianceWithinGroups { get; }
    public static string LabelStatisticalFRatio { get; }
    public static string LabelStatisticalFCrit { get; }
    public static string LabelStatisticalCorrelation { get; }
    public static string LabelStatisticalCovariance { get; }
    public static string LabelStatisticalProbability { get; }
    public static string LabelStatisticalAverage { get; }
    public static string LabelStatisticalVariance { get; }
    public static string LabelStatisticalMedian { get; }
    public static string LabelStatisticalBetaFunction { get; }
    public static string LabelStatisticalGammaFunction { get; }
    public static string LabelStatisticalTheFirstGroupMean { get; }
    public static string LabelStatisticalTheSecondGroupMean { get; }
    public static string LabelStatisticalTheFirstGroupVariance { get; }
    public static string LabelStatisticalTheSecondGroupVariance { get; }
    public static string LabelStatisticalFValue { get; }
    public static string LabelStatisticalFCriticalValueOneTail { get; }
    public static string LabelStatisticalZValue { get; }
    public static string LabelStatisticalZCriticalValueOneTail { get; }
    public static string LabelStatisticalZCriticalValueTwoTail { get; }
    public static string LabelStatisticalPZLessEqualSmallZOneTail { get; }
    public static string LabelStatisticalPZLessEqualSmallZTwoTail { get; }
    public static string LabelStatisticalPFLessEqualSmallFOneTail { get; }
    public static string LabelStatisticalTValue { get; }
    public static string LabelStatisticalDegreeOfFreedom { get; }
    public static string LabelStatisticalPTLessEqualSmallTOneTail { get; }
    public static string LabelStatisticalSmallTCrititcalOneTail { get; }
    public static string LabelStatisticalPTLessEqualSmallTTwoTail { get; }
    public static string LabelStatisticalSmallTCrititcalTwoTail { get; }
    public static string TraceMessageBeginDrawingChartLegend { get; }
    public static string TraceMessageEndDrawingChartLegend { get; }
    public static string TraceMessageStartChartControlRenderingAsInteractiveImageTag { get; }
    public static string TraceMessageStartChartControlRenderingAsImageTag { get; }
    public static string TraceMessageStartChartControlRenderingAsImageMap { get; }
    public static string TraceMessageStartChartControlRenderingAsInputTag { get; }
    public static string TraceMessageStartChartControlRenderingAsBinaryStream { get; }
    public static string TraceMessageEndChartControlRendering { get; }
    public static string DesignerVerbWizard { get; }
    public static string DesignerVerbLoadTemplate { get; }
    public static string DesignerVerbCreateTemplate { get; }
    public static string DesignerVerbReset { get; }
    public static string MessagePrecisionInvalid { get; }
    public static string MessageChangingChartAreaPositionProperty { get; }
    public static string MessageChangingChartAreaPositionConfirmAutomatic { get; }
    public static string MessageChangingChartAreaPositionConfirmCustom { get; }
    public static string MessagePrecisionValidValue { get; }
    public static string MessageChartException { get; }
    public static string MessageSite { get; }
    public static string MessageStackTrace { get; }
    public static string MessageWizardTitle { get; }
    public static string MessageChartTitle { get; }
    public static string MessageChartSpecialEditionTitle { get; }
    public static string MessageSvgConverterTitle { get; }
    public static string MessageUnableToLocateWizartAssemblyFile { get; }
    public static string MessageUnableToLocateWizartAssemblyFileConfirm { get; }
    public static string MessageCommandIsNotSupported { get; }
    public static string MessageObjectCannotBeDeleted { get; }
    public static string MessageCannotDeleteLastChartArea { get; }
    public static string MessageTitleConfirmation { get; }
    public static string MessageTitleConfirm { get; }
    public static string MessageTitleInformation { get; }
    public static string MessageSerializerCanNotCreateCollection { get; }
    public static string MethodTransactionAddSeries { get; }
    public static string MethodTransactionAddChartArea { get; }
    public static string MethodTransactionAddDataSource { get; }
    public static string MethodTransactionDeleteSeries { get; }
    public static string ActionMemberDataSource { get; }
    public static string ActionMemberPalette { get; }
    public static string ActionMemberBorderStyle { get; }
    public static string ActionMemberBorderColor { get; }
    public static string ActionMemberAddChartAreaDots { get; }
    public static string ActionMemberChartType { get; }
    public static string ActionMemberImageType { get; }
    public static string ActionMemberAnimationTheme { get; }
    public static string ActionMemberTitle { get; }
    public static string ActionMemberTitlePlacement { get; }
    public static string ActionMemberShowLegend { get; }
    public static string ActionMemberLegendPlacement { get; }
    public static string ActionMemberEnableToolbar { get; }
    public static string ActionMemberEnableContextMenu { get; }
    public static string ActionMemberBackColor { get; }
    public static string ActionMemberBackGradientEndColor { get; }
    public static string ActionMemberBackGradientType { get; }
    public static string ActionMemberBorderLineColor { get; }
    public static string ActionMemberBorderLineWidth { get; }
    public static string ActionMemberLegendStyle { get; }
    public static string ActionMemberAutoFitText { get; }
    public static string ActionMemberEquallySpacedItems { get; }
    public static string ActionMemberDocking { get; }
    public static string ActionMemberAlignment { get; }
    public static string ActionMemberDockToChartArea { get; }
    public static string ActionMemberDockInsideChartArea { get; }
    public static string ActionMemberBorderWidth { get; }
    public static string ActionMemberShadowOffset { get; }
    public static string ActionMemberFont { get; }
    public static string ActionMemberFontColor { get; }
    public static string ActionMemberDeleteChartAreaDots { get; }
    public static string ActionMemberAddNewSeriesDots { get; }
    public static string ActionMemberEnable3D { get; }
    public static string ActionMemberDeleteSeriesDots { get; }
    public static string ActionMemberTooltip { get; }
    public static string ActionMemberText { get; }
    public static string ActionMemberStyle { get; }
    public static string ActionMemberAreaSmartLabels { get; }
    public static string ActionMemberAlignOrientation { get; }
    public static string ActionMemberAlignType { get; }
    public static string ActionMemberAlignWithChartArea { get; }
    public static string ActionMemberClustered { get; }
    public static string ActionMemberRightAngleAxes { get; }
    public static string ActionMemberType { get; }
    public static string ActionMemberChartArea { get; }
    public static string ActionMemberValueMemberX { get; }
    public static string ActionMemberValueMembersY { get; }
    public static string ActionMemberShowLabelAsValue { get; }
    public static string ActionMemberLabelFormat { get; }
    public static string ActionMemberSmartLabels { get; }
    public static string ActionMemberMarkerStyle { get; }
    public static string ActionMemberMarkerColor { get; }
    public static string ActionMemberMarkerSize { get; }
    public static string ActionMemberColor { get; }
    public static string ActionMemberEnableMajorGrid { get; }
    public static string ActionMemberEnableMajorTickMark { get; }
    public static string ActionMemberLogarithmic { get; }
    public static string ActionMemberReverse { get; }
    public static string ActionMemberStartFromZero { get; }
    public static string ActionMemberLineColor { get; }
    public static string ActionMemberLineWidth { get; }
    public static string ActionMemberInterlaced { get; }
    public static string ActionMemberInterlacedColor { get; }
    public static string ActionMemberStartCap { get; }
    public static string ActionMemberEndCap { get; }
    public static string ActionMethodProperties { get; }
    public static string ActionGroupData { get; }
    public static string ActionGroupChart { get; }
    public static string ActionGroupAppearance { get; }
    public static string ActionGroupAppearance1 { get; }
    public static string ActionGroupLegend { get; }
    public static string ActionGroupDocking { get; }
    public static string ActionGroupTitle { get; }
    public static string ActionGroupChartArea { get; }
    public static string ActionGroupAlignment { get; }
    public static string ActionGroupChart3D { get; }
    public static string ActionGroupSeries { get; }
    public static string ActionGroupLabels { get; }
    public static string ActionGroupMarkers { get; }
    public static string ActionGroupAxis { get; }
    public static string ActionGroupAxisView { get; }
    public static string ActionGroupAnnotation { get; }
    public static string TitleAxisX { get; }
    public static string TitleAxisY { get; }
    public static string TitleAxisX2 { get; }
    public static string TitleAxisY2 { get; }
    public static string FormulaNamePriceIndicators { get; }
    public static string FormulaNameGeneralTechnicalIndicators { get; }
    public static string FormulaNameTechnicalVolumeIndicators { get; }
    public static string FormulaNameOscillator { get; }
    public static string FormulaNameGeneralFormulas { get; }
    public static string FormulaNameTimeSeriesAndForecasting { get; }
    public static string FormulaNameStatisticalAnalysis { get; }
    public static string FormulaNameVolumeIndicators { get; }
    public static string LabelText3DSeries { get; }
    public static string LabelTextAngleColon { get; }
    public static string LabelTextAutoColon { get; }
    public static string LabelTextAutomaticLegendText { get; }
    public static string LabelTextAutoSizeColon { get; }
    public static string LabelTextAxis { get; }
    public static string LabelTextAxisTitle { get; }
    public static string LabelTextBackground { get; }
    public static string LabelTextBold { get; }
    public static string LabelTextItalic { get; }
    public static string LabelTextStrikeout { get; }
    public static string LabelTextUnderline { get; }
    public static string LabelTextBorderAndLine { get; }
    public static string LabelTextBoth { get; }
    public static string LabelTextCancel { get; }
    public static string LabelTextOK { get; }
    public static string LabelTextApply { get; }
    public static string LabelTextChartNbspTypeColon { get; }
    public static string LabelTextChartTitle { get; }
    public static string LabelTextClusteredColon { get; }
    public static string LabelTextColor2Colon { get; }
    public static string LabelTextColorColon { get; }
    public static string LabelTextColumn { get; }
    public static string LabelTextDepthColon { get; }
    public static string LabelTextEnable3DColon { get; }
    public static string LabelTextErrorBarsStyle { get; }
    public static string LabelTextErrorCalculation { get; }
    public static string LabelTextFixedValueColon { get; }
    public static string LabelTextFont { get; }
    public static string LabelTextFontAndSize { get; }
    public static string LabelTextFontColon { get; }
    public static string LabelTextFontEffects { get; }
    public static string LabelTextFormatAndPrecision { get; }
    public static string LabelTextFormula { get; }
    public static string LabelTextGapDepthColon { get; }
    public static string LabelTextGradientColon { get; }
    public static string LabelTextHatchingColon { get; }
    public static string LabelTextHorizontalColon { get; }
    public static string LabelTextInsideChartAreaColon { get; }
    public static string LabelTextInterlacedStrips { get; }
    public static string LabelTextLegendPlacement { get; }
    public static string LabelTextLegendText { get; }
    public static string LabelTextLower { get; }
    public static string LabelTextMajorGrids { get; }
    public static string LabelTextMinorGrids { get; }
    public static string LabelTextNone { get; }
    public static string LabelTextNotSet { get; }
    public static string LabelTextParameters { get; }
    public static string LabelTextPercentageColon { get; }
    public static string LabelTextPeriodColon { get; }
    public static string LabelTextPerspectiveColon { get; }
    public static string LabelTextPlacementColon { get; }
    public static string LabelTextPolynominalDegreeColon { get; }
    public static string LabelTextPosition { get; }
    public static string LabelTextReversed { get; }
    public static string LabelTextRightAngleAxesColon { get; }
    public static string LabelTextRotation { get; }
    public static string LabelTextRow { get; }
    public static string LabelTextSansSeriff { get; }
    public static string LabelTextShowLabelsColon { get; }
    public static string LabelTextShowLegendColon { get; }
    public static string LabelTextSideMargin { get; }
    public static string LabelTextSizeAsNumberOfStandardDeviationsColon { get; }
    public static string LabelTextSizeAsPercentOfMovingAverageColon { get; }
    public static string LabelTextSmartLabelsColon { get; }
    public static string LabelTextStandardDeviationsColon { get; }
    public static string LabelTextStandardErrorsColon { get; }
    public static string LabelTextStyleColon { get; }
    public static string LabelTextTable { get; }
    public static string LabelTextTextColorColon { get; }
    public static string LabelTextTitleFont { get; }
    public static string LabelTextTitleTextColon { get; }
    public static string LabelTextUpper { get; }
    public static string LabelTextVerticalColon { get; }
    public static string LabelTextVisible { get; }
    public static string LabelTextWidthColon { get; }
    public static string LabelTextEditChartItem { get; }
    public static string LabelTextOpenChartFile { get; }
    public static string LabelTextChart { get; }
    public static string AnimationTreeNodeLabels { get; }
    public static string AnimationTreeNodeMarkers { get; }
    public static string AnimationTreeNodePoints { get; }
    public static string AnimationTreeNodeMarker { get; }
    public static string AnimationTreeNodeLabel { get; }
    public static string AnimationTreeNodePoint { get; }
    public static string AnimationTreeNodeAxisX { get; }
    public static string AnimationTreeNodeAxisY { get; }
    public static string AnimationTreeNodeAxisX2 { get; }
    public static string AnimationTreeNodeAxisY2 { get; }
    public static string AnimationTreeNodePlottingArea { get; }
    public static string AnimationTreeNodeTitles { get; }
    public static string AnimationTreeNodeAnnotations { get; }
    public static string AnimationTreeNodeLegends { get; }
    public static string AnimationTreeNodeAxisLine { get; }
    public static string AnimationTreeNodeMajorGridlines { get; }
    public static string AnimationTreeNodeMinorGridlines { get; }
    public static string AnimationTreeNodeMajorTickMark { get; }
    public static string AnimationTreeNodeMinorTickMark { get; }
    public static string AnimationTreeNodeAxisLabels { get; }
    public static string AnimationTreeNodeStripLine { get; }
    public static string AnimationTreeNodeStripLines { get; }
    public static string AnimationTreeNodeInterlacedStriplines { get; }
    public static string DescriptionAttributeRightToLeft { get; }
    public static string DescriptionAttributeNameValueCollection { get; }
    public static string DescriptionAttributeInResizeContent { get; }
    public static string DescriptionAttributeAnimationManager { get; }
    public static string DescriptionAttributeResizingMode { get; }
    public static string DescriptionAttributeBlendColors { get; }
    public static string DescriptionAttributeBuildColor { get; }
    public static string DescriptionAttributeBackImage15 { get; }
    public static string DescriptionAttributeBackImage16 { get; }
    public static string DescriptionAttributeChartImageToolTip { get; }
    public static string DescriptionAttributeCollectionCoolBarItems { get; }
    public static string DescriptionAttributeBackImage10 { get; }
    public static string DescriptionAttributeMarkerImage10 { get; }
    public static string DescriptionAttributeDescriptionCommand { get; }
    public static string DescriptionAttributeCommandUseLastSubCommand { get; }
    public static string DescriptionAttributeCommandStyle { get; }
    public static string DescriptionAttributeImageResolution { get; }
    public static string DescriptionAttributeCoomandPopupStyle { get; }
    public static string DescriptionAttributeToolBarAttributeShowInToolbar { get; }
    public static string DescriptionAttributeToolBarAttributesGroupPriority { get; }
    public static string DescriptionAttributeFontHelperFindBestStyle { get; }
    public static string DescriptionAttributeAnnotationBaseY { get; }
    public static string DescriptionAttributeAnnotationWidth { get; }
    public static string DescriptionAttributeAnnotationHeight { get; }
    public static string DescriptionAttributeAnnotationClipToChartArea { get; }
    public static string DescriptionAttributeCommandUIItemZOrder { get; }
    public static string DescriptionAttributeAnnotationBaseX { get; }
    public static string DescriptionAttributeItemInfoHashtable { get; }
    public static string DescriptionAttributeCoolMenuItemImageID5 { get; }
    public static string DescriptionAttributeCommandImageName { get; }
    public static string DescriptionAttributeCommandImageColor { get; }
    public static string DescriptionAttributeChartImageType { get; }
    public static string DescriptionAttributeLegendBackImage7 { get; }
    public static string DescriptionAttributeCoolMenuList { get; }
    public static string DescriptionAttributeLoadTransparentImage { get; }
    public static string DescriptionAttributeImageMapMapAreaType { get; }
    public static string DescriptionAttributeCoolBarMouseUpInDropButtonZone { get; }
    public static string DescriptionAttributeCoolBarAdornmentsInMove { get; }
    public static string DescriptionAttributeMultiValueSeparator { get; }
    public static string DescriptionAttributeDataSeriesGroupID { get; }
    public static string DescriptionAttributeCoolMenuItemState { get; }
    public static string DescriptionAttributeBackImage18 { get; }
    public static string DescriptionAttributeCoomandText { get; }
    public static string DescriptionAttributeCoolBarAdornments { get; }
    public static string DescriptionAttributeChartSizing { get; }
    public static string DescriptionAttributeCoolMenuBackgroundColor { get; }
    public static string DescriptionAttributeCoolBarButtonBehindItem { get; }
    public static string DescriptionAttributeCoolBarButtonHotFlag { get; }
    public static string DescriptionAttributeCoolBarButtonLatchedFlag { get; }
    public static string DescriptionAttributeCoolBarButtonPushedFlag { get; }
    public static string DescriptionAttributeCoolBarButtonContentDropDownImageSpacing { get; }
    public static string DescriptionAttributeCoolBarButtonDropButtonImageLineSpacing { get; }
    public static string DescriptionAttributeCoolBarButtonBorderHeight { get; }
    public static string DescriptionAttributeCoolBarButtonBorderWidth { get; }
    public static string DescriptionAttributeCoolBarButtonPaddingHeight { get; }
    public static string DescriptionAttributeCoolBarButtonImageTextSpacing { get; }
    public static string DescriptionAttributeCoolBarDropButtonZone { get; }
    public static string DescriptionAttributeCoolBarComboBox { get; }
    public static string DescriptionAttributeCommandEnabledFlag { get; }
    public static string DescriptionAttributeCommandParameter { get; }
    public static string DescriptionAttributeSubCommands { get; }
    public static string DescriptionAttributeCommandToggled { get; }
    public static string DescriptionAttributeChartCommandType { get; }
    public static string DescriptionAttributeCoolbarSlotBars { get; }
    public static string DescriptionAttributeCoolBarDockOwner { get; }
    public static string DescriptionAttributeCoolBarSlotOwner2 { get; }
    public static string DescriptionAttributeCoolBarRectangleCoolBar { get; }
    public static string DescriptionAttributeCoolBarGripper { get; }
    public static string DescriptionAttributeCoolBarItemOwner { get; }
    public static string DescriptionAttributeCoolBarAdornmentsOwner { get; }
    public static string DescriptionAttributeCoolBarSlotDrawingOrder { get; }
    public static string DescriptionAttributeCoolBarDockSlotOwner2 { get; }
    public static string DescriptionAttributeCoolbarOwner { get; }
    public static string DescriptionAttributeCoolMenuItemOrganizer { get; }
    public static string DescriptionAttributeCoolBarAdornmentsGripperState { get; }
    public static string DescriptionAttributeCoolBarDesiredLocation { get; }
    public static string DescriptionAttributeCoolBarDockDesiredSize { get; }
    public static string DescriptionAttributeCoolBarButtonStyle { get; }
    public static string DescriptionAttributeCoolBarButtonDropImage { get; }
    public static string DescriptionAttributeCoolMenuFocusColor { get; }
    public static string DescriptionAttributeCommandGroupID { get; }
    public static string DescriptionAttributeCoolBarAdornmentsGripperHeight { get; }
    public static string DescriptionAttributeCoolBarSeparatorSeparatorVerticalBorders { get; }
    public static string DescriptionAttributeCoolMenuItemSeparatorHeight { get; }
    public static string DescriptionAttributeCoolBarComboBoxHeight { get; }
    public static string DescriptionAttributeCoolBarTextBoxHeight { get; }
    public static string DescriptionAttributeCommandID { get; }
    public static string DescriptionAttributeCoolBarButtonImageID { get; }
    public static string DescriptionAttributeCoolMenuItemImageID { get; }
    public static string DescriptionAttributeCoolBarImageList { get; }
    public static string DescriptionAttributeCoolMenuItemImageList { get; }
    public static string DescriptionAttributeCoolMenuItemImageIndex { get; }
    public static string DescriptionAttributeCoolMenuItem { get; }
    public static string DescriptionAttributeCoolBarMenuHeight { get; }
    public static string DescriptionAttributeCoolBarAdornmentsMouseLastOnMove { get; }
    public static string DescriptionAttributeCoolMenuItemImagePadRightOffset { get; }
    public static string DescriptionAttributeCoolMenuItemTextOffset { get; }
    public static string DescriptionAttributeCoolBarButton { get; }
    public static string DescriptionAttributeCoolBarSeporator { get; }
    public static string DescriptionAttributeCoolBarTextBox5 { get; }
    public static string DescriptionAttributeCoolBarSlotOwner { get; }
    public static string DescriptionAttributeCoolMenuItemRightTextPadding { get; }
    public static string DescriptionAttributeCoolMenuProperty { get; }
    public static string DescriptionAttributeCoolMenuItemProperty { get; }
    public static string DescriptionAttributeCoolBarRectangle { get; }
    public static string DescriptionAttributeCoolMenuSeparatorColor { get; }
    public static string DescriptionAttributeCoolBarSeparator { get; }
    public static string DescriptionAttributeCommandShortcut { get; }
    public static string DescriptionAttributeCoolBarButtonShowImageFlag { get; }
    public static string DescriptionAttributeCoolBarButtonShowImageFlag2 { get; }
    public static string DescriptionAttributeCoolBarButtonShowTextFlag { get; }
    public static string DescriptionAttributeCoolBarButtonShowTextFlag2 { get; }
    public static string DescriptionAttributeCoolBarDragPositionDelta { get; }
    public static string DescriptionAttributeCoolMenuItemTextAccelSpacing { get; }
    public static string DescriptionAttributeCommandSupportedElements { get; }
    public static string DescriptionAttributeDataPointLegendMapAreaType { get; }
    public static string DescriptionAttributeDataPointLabelMapAreaType { get; }
    public static string DescriptionAttributeDataPointMapAreaType { get; }
    public static string DescriptionAttributeCoolBarTextBox { get; }
    public static string DescriptionAttributeCoolMenuTextColor { get; }
    public static string DescriptionAttributeCoolBarToolTipHandler { get; }
    public static string DescriptionAttributeCoolMenuItemToolTipText5 { get; }
    public static string DescriptionAttributeCoolMenuItemToolTipText2 { get; }
    public static string DescriptionAttributeCommandVisibleEnabledFlag { get; }
    public static string DescriptionAttributeGripperWidth { get; }
    public static string DescriptionAttributeSeparatorWidth { get; }
    public static string DescriptionAttributeComboBoxWidth { get; }
    public static string DescriptionAttributeTextBoxWidth { get; }
    public static string DescriptionAttributeBackImage17 { get; }
    public static string DescriptionAttributeCoolMenuItemToolTipText { get; }
    public static string DescriptionAttributeAxis_ValueType { get; }
    public static string DescriptionAttributeSuppressCodeExceptions { get; }
    public static string DescriptionAttributeNoDataMessage { get; }
    public static string DescriptionAttributeReverseSeriesOrder { get; }
    public static string DescriptionAttributeWebProxyBypassList { get; }
    public static string DescriptionAttributeWebProxyBypassOnLocal { get; }
    public static string DescriptionAttributeWebProxyUri { get; }
    public static string DescriptionAttributeUserDefined { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_EmptyRectangles { get; }
    public static string DescriptionAttributeCoolBarSlotCollection_Remove { get; }
    public static string DescriptionAttributeRemove3 { get; }
    public static string DescriptionAttributeCoolBarDockDictionary_Remove { get; }
    public static string DescriptionAttributeCoolBarItemCollection_Remove { get; }
    public static string DescriptionAttributeCoolBarRectangleCollection_Remove { get; }
    public static string DescriptionAttributeCoolBarCollection_Remove { get; }
    public static string DescriptionAttributeCoolBarItemDictionary_Remove { get; }
    public static string DescriptionAttributeChartEvent_GetToolTipText { get; }
    public static string DescriptionAttributeArrowAnnotation_ArrowSize { get; }
    public static string DescriptionAttributeChartSerializer_Content { get; }
    public static string DescriptionAttributeEnabled { get; }
    public static string DescriptionAttributeToolBarAttributes_Enabled { get; }
    public static string DescriptionAttributeLegend_Enabled { get; }
    public static string DescriptionAttributeEnabled5 { get; }
    public static string DescriptionAttributeAxisScaleBreakStyle_Enabled { get; }
    public static string DescriptionAttributeEnabled7 { get; }
    public static string DescriptionAttributeLabel_Enabled { get; }
    public static string DescriptionAttributeContextMenuAttributes_Enabled { get; }
    public static string DescriptionAttributeCommand_Enabled { get; }
    public static string DescriptionAttributeLegendItem_Enabled { get; }
    public static string DescriptionAttributeAxisScrollBar_Enabled { get; }
    public static string DescriptionAttributeEnabled13 { get; }
    public static string DescriptionAttributeSeries_Enabled { get; }
    public static string DescriptionAttributeLegendCell_CellSpan { get; }
    public static string DescriptionAttributeCursor_SelectionColor { get; }
    public static string DescriptionAttributeInterlaced { get; }
    public static string DescriptionAttributeCoolBarSeparatorControl_CoolBarSeparatorControl { get; }
    public static string DescriptionAttributeMapArea_Coordinates { get; }
    public static string DescriptionAttributeControl { get; }
    public static string DescriptionAttributeControl3 { get; }
    public static string DescriptionAttributeCoolBarItem_Control { get; }
    public static string DescriptionAttributeSelectionManagerExtended_EnableSelection { get; }
    public static string DescriptionAttributeChartEvent_PostPaint { get; }
    public static string DescriptionAttributeChartEvent2_PostPaint { get; }
    public static string DescriptionAttributeStripLine_Title { get; }
    public static string DescriptionAttributeChartMirror_Title { get; }
    public static string DescriptionAttributeLegend_Title { get; }
    public static string DescriptionAttributeTitle5 { get; }
    public static string DescriptionAttributeTitle6 { get; }
    public static string DescriptionAttributeAnnotation_Annotation { get; }
    public static string DescriptionAttributeLegend_TitleFont { get; }
    public static string DescriptionAttributeStripLine_TitleFont { get; }
    public static string DescriptionAttributeTitleFont4 { get; }
    public static string DescriptionAttributeTitleFont5 { get; }
    public static string DescriptionAttributeChartArea_Axes { get; }
    public static string DescriptionAttributeCommandResult_IsSuccess { get; }
    public static string DescriptionAttributeChartSerializer_NonSerializableContent { get; }
    public static string DescriptionAttributeLegendItem_ShadowOffset { get; }
    public static string DescriptionAttributeLegend_ShadowOffset { get; }
    public static string DescriptionAttributeChartArea_ShadowOffset { get; }
    public static string DescriptionAttributeSeries_ShadowOffset { get; }
    public static string DescriptionAttributeTitle_ShadowOffset { get; }
    public static string DescriptionAttributeShadowOffset7 { get; }
    public static string DescriptionAttributeAnnotationGroup_ShadowOffset { get; }
    public static string DescriptionAttributeToolBarAttributes_ShadowOffset { get; }
    public static string DescriptionAttributeRepeat { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_MenuItemMeasureHandler { get; }
    public static string DescriptionAttributeCalloutLineAnchorCap { get; }
    public static string DescriptionAttributeStripLine_MapAreaAttributes { get; }
    public static string DescriptionAttributeMapAreaAttributes3 { get; }
    public static string DescriptionAttributeAxis_MapAreaAttributes { get; }
    public static string DescriptionAttributeLegendCell_MapAreaAttributes { get; }
    public static string DescriptionAttributeTitle_MapAreaAttributes { get; }
    public static string DescriptionAttributeLegendCellColumn_MapAreaAttributes { get; }
    public static string DescriptionAttributeMapArea_MapAreaAttributes { get; }
    public static string DescriptionAttributeMapAreaAttributes9 { get; }
    public static string DescriptionAttributeCustomLabel_MapAreaAttributes { get; }
    public static string DescriptionAttributeSubAxis_SubAxis { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_Convert { get; }
    public static string DescriptionAttributeMajorGrid { get; }
    public static string DescriptionAttributeItemProperty_ItemProperty { get; }
    public static string DescriptionAttributeCoolBarButtonControl_OnMouseEnter { get; }
    public static string DescriptionAttributeCoolBarTextBoxControl_CoolBarTextBoxControl { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_CoolMenuOrganizer { get; }
    public static string DescriptionAttributeElementPosition_Y { get; }
    public static string DescriptionAttributeY3 { get; }
    public static string DescriptionAttributeAnnotationPathPoint_Y { get; }
    public static string DescriptionAttributeToolTipEventArgs_Y { get; }
    public static string DescriptionAttributePoint3D_Y { get; }
    public static string DescriptionAttributePoint3D_Z { get; }
    public static string DescriptionAttributeAnimationCollection_AnimationCollection { get; }
    public static string DescriptionAttributeMajorTickMark { get; }
    public static string DescriptionAttributeDrawInfinitive { get; }
    public static string DescriptionAttributeAxisDataView_MinSize { get; }
    public static string DescriptionAttributeLegendCellColumnCollection_LegendCellColumnCollection { get; }
    public static string DescriptionAttributeCoolBarItemCollection_CoolBarItemCollection { get; }
    public static string DescriptionAttributeCoolBarButtonStyle_CoolBarButtonStyle { get; }
    public static string DescriptionAttributeMarkerOverlapping { get; }
    public static string DescriptionAttributeChart_OnCustomizeLegend { get; }
    public static string DescriptionAttributeLegendCellColumn_HeaderTextAlignment { get; }
    public static string DescriptionAttributeCommand_CommandType { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_DetachMenu { get; }
    public static string DescriptionAttributeScrollBarEventArgs_MousePositionY { get; }
    public static string DescriptionAttributeOrganizerPropertyChangedEventArgs_OrganizerPropertyChangedEventArgs { get; }
    public static string DescriptionAttributeNamedImage_NamedImage { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_SelectedTextColor { get; }
    public static string DescriptionAttributeScrollBar { get; }
    public static string DescriptionAttributeMapArea_MapArea { get; }
    public static string DescriptionAttributeLegend_CustomItems { get; }
    public static string DescriptionAttributeAnnotationSmartLabelsStyle_AnnotationSmartLabelsStyle { get; }
    public static string DescriptionAttributePolylineAnnotation_PolylineAnnotation { get; }
    public static string DescriptionAttributeChartEvent_AxisViewChanged { get; }
    public static string DescriptionAttributeChartEvent2_AxisViewChanged { get; }
    public static string DescriptionAttributeCoolBarCollection_IndexOf { get; }
    public static string DescriptionAttributeCoolBarRectangleCollection_IndexOf { get; }
    public static string DescriptionAttributeCoolBarItemCollection_IndexOf { get; }
    public static string DescriptionAttributeCoolBarSimpleCollection_IndexOf { get; }
    public static string DescriptionAttributeCoolBarSlotCollection_IndexOf { get; }
    public static string DescriptionAttributeAnimationElement_Object { get; }
    public static string DescriptionAttributeCrossing { get; }
    public static string DescriptionAttributeMargins_Top { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_CalculateRectangles { get; }
    public static string DescriptionAttributeLegendCellColumn_HeaderFont { get; }
    public static string DescriptionAttributeDundasNumericEditor_Columns { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_ImageIndex { get; }
    public static string DescriptionAttributeLegend_InterlacedRows { get; }
    public static string DescriptionAttributeCoolBarButtonControl_Button { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_DrawAccelerator { get; }
    public static string DescriptionAttributeCoolBarButtonControl_ShowText { get; }
    public static string DescriptionAttributeCoolMenuItem_ShowText { get; }
    public static string DescriptionAttributeAxisDataView_MinSizeType { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_MenuItemPropertyChanged { get; }
    public static string DescriptionAttributeCoolBarCollection_OnInsertComplete { get; }
    public static string DescriptionAttributeCoolBarSlotCollection_OnInsertComplete { get; }
    public static string DescriptionAttributeCoolBarItemCollection_OnInsertComplete { get; }
    public static string DescriptionAttributeLineWidth { get; }
    public static string DescriptionAttributeFinancialMarker_LineWidth { get; }
    public static string DescriptionAttributeTextAnnotation_LineWidth { get; }
    public static string DescriptionAttributeCalloutAnnotation_LineWidth { get; }
    public static string DescriptionAttributeCursor_LineWidth { get; }
    public static string DescriptionAttributeLineWidth7 { get; }
    public static string DescriptionAttributeLineWidth8 { get; }
    public static string DescriptionAttributeLineWidth9 { get; }
    public static string DescriptionAttributeAxisScaleBreakStyle_LineWidth { get; }
    public static string DescriptionAttributeImageAnnotation_LineWidth { get; }
    public static string DescriptionAttributeDataPoint_XValue { get; }
    public static string DescriptionAttributeToolBarAttributes_AllowMouseMoving { get; }
    public static string DescriptionAttributeItemPropertyChangedEventHandler_ItemPropertyChangedEventHandler { get; }
    public static string DescriptionAttributeFadingAnimation_StartShadowColor { get; }
    public static string DescriptionAttributeChartArea_AxisY2 { get; }
    public static string DescriptionAttributeChartArea_AxisX2 { get; }
    public static string DescriptionAttributeChartEvent_AnnotationPositionChanging { get; }
    public static string DescriptionAttributeStripLine_StripLine { get; }
    public static string DescriptionAttributeStripLine_TitleAngle { get; }
    public static string DescriptionAttributeBorderColor { get; }
    public static string DescriptionAttributeChartArea_BorderColor { get; }
    public static string DescriptionAttributeStripLine_BorderColor { get; }
    public static string DescriptionAttributeToolBarAttributes_BorderColor { get; }
    public static string DescriptionAttributeTitle_BorderColor { get; }
    public static string DescriptionAttributeLegend_BorderColor { get; }
    public static string DescriptionAttributeLegendItem_BorderColor { get; }
    public static string DescriptionAttributeBorderColor9 { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_MenuItemDrawHandler { get; }
    public static string DescriptionAttributeLegendText { get; }
    public static string DescriptionAttributeCustomLabel_LabelMark { get; }
    public static string DescriptionAttributeTextAntiAliasingQuality { get; }
    public static string DescriptionAttributeAllowMoving { get; }
    public static string DescriptionAttributeCalloutAnnotation_CalloutAnnotation { get; }
    public static string DescriptionAttributeStripLine_Name { get; }
    public static string DescriptionAttributeTitle_Name { get; }
    public static string DescriptionAttributeName4 { get; }
    public static string DescriptionAttributeAnnotationPathPoint_Name { get; }
    public static string DescriptionAttributeLegendCell_Name { get; }
    public static string DescriptionAttributeMapArea_Name { get; }
    public static string DescriptionAttributeFinancialMarker_Name { get; }
    public static string DescriptionAttributeSeries_Name { get; }
    public static string DescriptionAttributeAxis_Name { get; }
    public static string DescriptionAttributeNamedImage_Name { get; }
    public static string DescriptionAttributeSubAxis_Name { get; }
    public static string DescriptionAttributeDataPoint_Name { get; }
    public static string DescriptionAttributeLegendCellColumn_Name { get; }
    public static string DescriptionAttributeLegendItem_Name { get; }
    public static string DescriptionAttributeName16 { get; }
    public static string DescriptionAttributeCommand_Name { get; }
    public static string DescriptionAttributeLegend_Name { get; }
    public static string DescriptionAttributeCustomLabel_Name { get; }
    public static string DescriptionAttributeChartArea_Name { get; }
    public static string DescriptionAttributeCursor_Cursor { get; }
    public static string DescriptionAttributeCoolBarButton_RaiseDropDownEvent { get; }
    public static string DescriptionAttributeCoolBarButtonControl_Pushed { get; }
    public static string DescriptionAttributeChart_AnimationStartTime { get; }
    public static string DescriptionAttributeBorderSkinAttributes_FrameBackGradientType { get; }
    public static string DescriptionAttributeAnchorX { get; }
    public static string DescriptionAttributeToolTip { get; }
    public static string DescriptionAttributeLegendCellColumn_ToolTip { get; }
    public static string DescriptionAttributeToolTip4 { get; }
    public static string DescriptionAttributeLegendCell_ToolTip { get; }
    public static string DescriptionAttributeCustomLabel_ToolTip { get; }
    public static string DescriptionAttributeToolTip7 { get; }
    public static string DescriptionAttributeMapArea_ToolTip { get; }
    public static string DescriptionAttributeStripLine_ToolTip { get; }
    public static string DescriptionAttributeTitle_ToolTip { get; }
    public static string DescriptionAttributeLegend_TableStyle { get; }
    public static string DescriptionAttributeDataPoint_Empty { get; }
    public static string DescriptionAttributeScrollBarEventArgs_Handled { get; }
    public static string DescriptionAttributeAxisLabel { get; }
    public static string DescriptionAttributeAnnotationGroup_AllowPathEditing { get; }
    public static string DescriptionAttributeAllowPathEditing3 { get; }
    public static string DescriptionAttributeChart_CustomAnimation { get; }
    public static string DescriptionAttributeOnPaint { get; }
    public static string DescriptionAttributeCoolBar_OnPaint { get; }
    public static string DescriptionAttributeChart_OnPaint { get; }
    public static string DescriptionAttributeCoolBarGripper_OnPaint { get; }
    public static string DescriptionAttributeFinancialMarker_FirstYIndex { get; }
    public static string DescriptionAttributeCalloutAnnotation_AnchorOffsetX { get; }
    public static string DescriptionAttributeAnchorOffsetX3 { get; }
    public static string DescriptionAttributeCalloutAnnotation_AnchorOffsetY { get; }
    public static string DescriptionAttributeAnchorOffsetY3 { get; }
    public static string DescriptionAttributeChartEvent_CursorPositionChanging { get; }
    public static string DescriptionAttributeScrollBarEventArgs_ButtonType { get; }
    public static string DescriptionAttributeCoolBarButton_RecalcSize { get; }
    public static string DescriptionAttributeRecalcSize3 { get; }
    public static string DescriptionAttributeRecalcSize4 { get; }
    public static string DescriptionAttributeRecalcSize5 { get; }
    public static string DescriptionAttributeCoolBarDock_RecalcSize { get; }
    public static string DescriptionAttributeCoolBar_RecalcSize { get; }
    public static string DescriptionAttributeLabelsAutoFitStyle { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_ImagePadRectangle { get; }
    public static string DescriptionAttributeCoolBarButton_ClickStyle { get; }
    public static string DescriptionAttributeCoolBarButtonControl_ShowImage { get; }
    public static string DescriptionAttributeCoolMenuItem_ShowImage { get; }
    public static string DescriptionAttributeLabelStyle { get; }
    public static string DescriptionAttributeStripLine_IntervalOffsetType { get; }
    public static string DescriptionAttributeLabel_IntervalOffsetType { get; }
    public static string DescriptionAttributeIntervalOffsetType4 { get; }
    public static string DescriptionAttributeCursor_IntervalOffsetType { get; }
    public static string DescriptionAttributeIntervalOffsetType6 { get; }
    public static string DescriptionAttributeAxisScaleSegment_IntervalOffsetType { get; }
    public static string DescriptionAttributeReverse { get; }
    public static string DescriptionAttributeSeries_Points { get; }
    public static string DescriptionAttributeBorderSkinAttributes_SkinStyle { get; }
    public static string DescriptionAttributeColorBuilder_ColorBuilder { get; }
    public static string DescriptionAttributeChartUI_Commands { get; }
    public static string DescriptionAttributeSelectionManagerExtended_IgnoreTransparentObjects { get; }
    public static string DescriptionAttributeChartArea3DStyle_Clustered { get; }
    public static string DescriptionAttributeCoolBarComboBoxEvent_SelectedIndexChanged { get; }
    public static string DescriptionAttributeChartMirror_EnableToolbar { get; }
    public static string DescriptionAttributeAnchorDataPointName { get; }
    public static string DescriptionAttributeChart_WinControlUrl { get; }
    public static string DescriptionAttributeChartEvent_AnnotationPositionChanged { get; }
    public static string DescriptionAttributeAnnotationPathPoint_PointType { get; }
    public static string DescriptionAttributeChartArea3DStyle_PointGapDepth { get; }
    public static string DescriptionAttributeLegend_Reversed { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_MenuItemBackgroundColor { get; }
    public static string DescriptionAttributeCoolBarButton_OnDropDown { get; }
    public static string DescriptionAttributeAnnotation_AnnotationType { get; }
    public static string DescriptionAttributeTextAnnotation_AnnotationType { get; }
    public static string DescriptionAttributeAnnotationType4 { get; }
    public static string DescriptionAttributeLegendItem_MarkerImageTransparentColor { get; }
    public static string DescriptionAttributeMarkerImageTransparentColor3 { get; }
    public static string DescriptionAttributeBorderSkinAttributes_FrameBorderStyle { get; }
    public static string DescriptionAttributeLegend_HeaderSeparatorColor { get; }
    public static string DescriptionAttributeChartEvent_AnnotationSelectionChanged { get; }
    public static string DescriptionAttributeFont { get; }
    public static string DescriptionAttributeLegend_Font { get; }
    public static string DescriptionAttributeLegendCellColumn_Font { get; }
    public static string DescriptionAttributeLabel_Font { get; }
    public static string DescriptionAttributeTitle_Font { get; }
    public static string DescriptionAttributeLegendCell_Font { get; }
    public static string DescriptionAttributeFinancialMarker_Font { get; }
    public static string DescriptionAttributeCoolBarRectangle_CoolBarRectangle { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_IsSeparator { get; }
    public static string DescriptionAttributeSeries_ValueMemberX { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_Organizer { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_IsFromMainMenu { get; }
    public static string DescriptionAttributeArrows { get; }
    public static string DescriptionAttributeType { get; }
    public static string DescriptionAttributeSeries_Type { get; }
    public static string DescriptionAttributeBorder3DAnnotation_Border3DAnnotation { get; }
    public static string DescriptionAttributeChart_Images { get; }
    public static string DescriptionAttributeLegendToolTip { get; }
    public static string DescriptionAttributeIResultOutput_OutputResult { get; }
    public static string DescriptionAttributeCustomLabel_CustomLabel { get; }
    public static string DescriptionAttributeChartEvent_AnnotationPlaced { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_ReflectSystemColors { get; }
    public static string DescriptionAttributeCalloutBackColor { get; }
    public static string DescriptionAttributeLabel_ShowEndLabels { get; }
    public static string DescriptionAttributeLabelToolTip { get; }
    public static string DescriptionAttributeSeries_MarkerStep { get; }
    public static string DescriptionAttributeTickMark_Style { get; }
    public static string DescriptionAttributeTitle_Style { get; }
    public static string DescriptionAttribute_TextOrientation { get; }
    public static string DescriptionAttributeLegendItem_Style { get; }
    public static string DescriptionAttributeChartArea3DStyle_YAngle { get; }
    public static string DescriptionAttributeChart_ImageStorageMode { get; }
    public static string DescriptionAttributeBorderSkinAttributes_FrameBackImageAlign { get; }
    public static string DescriptionAttributeCoolBar_ShowGripper { get; }
    public static string DescriptionAttributeSizeAlwaysRelative { get; }
    public static string DescriptionAttributeSizeAlwaysRelative3 { get; }
    public static string DescriptionAttributeAnnotationGroup_SizeAlwaysRelative { get; }
    public static string DescriptionAttributeAnimationElement_DataPointElement { get; }
    public static string DescriptionAttributeToolBarAttributes_Placement { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_MainMenuTextColor { get; }
    public static string DescriptionAttributeCoolBarSlot_Bars { get; }
    public static string DescriptionAttributeChart_BorderlineWidth { get; }
    public static string DescriptionAttributeItemPropertyChangedEventArgs_ItemPropertyChangedEventArgs { get; }
    public static string DescriptionAttributeSeries_XValueIndexed { get; }
    public static string DescriptionAttributeEllipseAnnotation_EllipseAnnotation { get; }
    public static string DescriptionAttributeAnchorAlignment { get; }
    public static string DescriptionAttributeAnchorAlignment3 { get; }
    public static string DescriptionAttributeAnchorAlignment4 { get; }
    public static string DescriptionAttributeWidth { get; }
    public static string DescriptionAttributeElementPosition_Width { get; }
    public static string DescriptionAttributeWidth4 { get; }
    public static string DescriptionAttributeAxisXName { get; }
    public static string DescriptionAttributeEmptyX { get; }
    public static string DescriptionAttributeCommand_ToggleStyle { get; }
    public static string DescriptionAttributeMovingAnimation_StartPositionX { get; }
    public static string DescriptionAttributeChartArea3DStyle_XAngle { get; }
    public static string DescriptionAttributeCoolMenuItemEvent_ItemPropertyChanged { get; }
    public static string DescriptionAttributeCommand_PopupStyle { get; }
    public static string DescriptionAttributeOrganizerPropertyChangedEventHandler_OrganizerPropertyChangedEventHandler { get; }
    public static string DescriptionAttributeLegendCollection_LegendCollection { get; }
    public static string DescriptionAttributeAxisYName { get; }
    public static string DescriptionAttributeAxisScaleSegment_Spacing { get; }
    public static string DescriptionAttributeAxisScaleBreakStyle_Spacing { get; }
    public static string DescriptionAttributeSelected { get; }
    public static string DescriptionAttributeAnnotationGroup_Selected { get; }
    public static string DescriptionAttributeLabelBorderWidth { get; }
    public static string DescriptionAttributeVerticalLineAnnotation_VerticalLineAnnotation { get; }
    public static string DescriptionAttributeLabelsAutoFitMaxFontSize { get; }
    public static string DescriptionAttributeFreeDrawPlacement { get; }
    public static string DescriptionAttributeStripLinesCollection_StripLinesCollection { get; }
    public static string DescriptionAttributeAxisDataView_IsZoomed { get; }
    public static string DescriptionAttributeSeries_ChartType { get; }
    public static string DescriptionAttributeChartArea3DStyle_Perspective { get; }
    public static string DescriptionAttributeChart_RenderAsControl { get; }
    public static string DescriptionAttributeChart_UnusedColor { get; }
    public static string DescriptionAttributeChart_OnCustomize { get; }
    public static string DescriptionAttributeCoolBarDock_OnResize { get; }
    public static string DescriptionAttributeCoolBarSlot_OnResize { get; }
    public static string DescriptionAttributeCoolBarButton_RaiseClickEvent { get; }
    public static string DescriptionAttributeIResultOutput_Unindent { get; }
    public static string DescriptionAttributeLabel { get; }
    public static string DescriptionAttributeLabel_Label { get; }
    public static string DescriptionAttributeImageAnnotation_TextStyle { get; }
    public static string DescriptionAttributeTextStyle3 { get; }
    public static string DescriptionAttributeTextStyle4 { get; }
    public static string DescriptionAttributeTextStyle5 { get; }
    public static string DescriptionAttributePolygonAnnotation_StartCap { get; }
    public static string DescriptionAttributeStartCap3 { get; }
    public static string DescriptionAttributeFontColor { get; }
    public static string DescriptionAttributeLabel_FontColor { get; }
    public static string DescriptionAttributeLegend_FontColor { get; }
    public static string DescriptionAttributeCoolBarComboBoxControl_ComboBox { get; }
    public static string DescriptionAttributeCalloutLineWidth { get; }
    public static string DescriptionAttributeLabel_OffsetLabels { get; }
    public static string DescriptionAttributeMargin { get; }
    public static string DescriptionAttributeCoolBarDockDictionary_Add { get; }
    public static string DescriptionAttributeCoolBarCollection_Add { get; }
    public static string DescriptionAttributeCoolBarRectangleCollection_Add { get; }
    public static string DescriptionAttributeCoolBarItemDictionary_Add { get; }
    public static string DescriptionAttributeAdd6 { get; }
    public static string DescriptionAttributeCoolBarSlotCollection_Add { get; }
    public static string DescriptionAttributeCoolBarItemCollection_Add { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_Revert { get; }
    public static string DescriptionAttributeAnnotationPositionChangingEventArgs_AnnotationPositionChangingEventArgs { get; }
    public static string DescriptionAttributeCoolBar_DesiredLocation { get; }
    public static string DescriptionAttributeCursorEventArgs_NewSelectionStart { get; }
    public static string DescriptionAttributeSeries_XSubAxisName { get; }
    public static string DescriptionAttributeHideOverlapped { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_DrawSeparator { get; }
    public static string DescriptionAttributeLegendCellColumn_MaximumWidth { get; }
    public static string DescriptionAttributeChartToolBar_ChartId { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_DrawRadioCheckBox { get; }
    public static string DescriptionAttributeCommandUIItem_ShouldSerializeCommandName { get; }
    public static string DescriptionAttributeLegend_InsideChartArea { get; }
    public static string DescriptionAttributeBackImageTransparentColor { get; }
    public static string DescriptionAttributeLegend_BackImageTransparentColor { get; }
    public static string DescriptionAttributeLegendItem_BackImageTransparentColor { get; }
    public static string DescriptionAttributeTitle_BackImageTransparentColor { get; }
    public static string DescriptionAttributeBackImageTransparentColor6 { get; }
    public static string DescriptionAttributeLegend_EquallySpacedItems { get; }
    public static string DescriptionAttributeChartArea_CursorY { get; }
    public static string DescriptionAttributeCoolBarButton_CoolBarButton { get; }
    public static string DescriptionAttributeChart_Printing { get; }
    public static string DescriptionAttributeAxis { get; }
    public static string DescriptionAttributeAxis_Axis { get; }
    public static string DescriptionAttributeDundasNumericEditorEvent_TextChanged { get; }
    public static string DescriptionAttributeCoolBarComboBoxEvent_TextChanged { get; }
    public static string DescriptionAttributeCoolBarTextBoxEvent_TextChanged { get; }
    public static string DescriptionAttributeBackImageAlign { get; }
    public static string DescriptionAttributeLegend_BackImageAlign { get; }
    public static string DescriptionAttributeShowInLegend { get; }
    public static string DescriptionAttributeChartSerializer_ChartSerializer { get; }
    public static string DescriptionAttributeChart_Compression { get; }
    public static string DescriptionAttributeChartImage_Compression { get; }
    public static string DescriptionAttributeBorderSkinAttributes_FrameBackGradientEndColor { get; }
    public static string DescriptionAttributeCursor_AutoScroll { get; }
    public static string DescriptionAttributeElementPosition_Height { get; }
    public static string DescriptionAttributeHeight3 { get; }
    public static string DescriptionAttributeHeight4 { get; }
    public static string DescriptionAttributeFadingAnimation_StartGradientColor { get; }
    public static string DescriptionAttributeChart_ViewStateContent { get; }
    public static string DescriptionAttributeAxisDataView_SmallScrollSizeType { get; }
    public static string DescriptionAttributeLegend_CellColumns { get; }
    public static string DescriptionAttributeAxisScrollBar_Buttons { get; }
    public static string DescriptionAttributeElementId { get; }
    public static string DescriptionAttributeLegends { get; }
    public static string DescriptionAttributeChartEvent_CommandFired { get; }
    public static string DescriptionAttributeElementPosition_X { get; }
    public static string DescriptionAttributeAnnotationPathPoint_X { get; }
    public static string DescriptionAttributeX4 { get; }
    public static string DescriptionAttributePoint3D_X { get; }
    public static string DescriptionAttributeToolTipEventArgs_X { get; }
    public static string DescriptionAttributeCustomAttributesExtended { get; }
    public static string DescriptionAttributeMargins_Left { get; }
    public static string DescriptionAttributeAxisScrollBar_PositionInside { get; }
    public static string DescriptionAttributeTripleResolutionImage_TripleResolutionImage { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_CoolMenuItemInfo { get; }
    public static string DescriptionAttributeMovingAnimation_MovingAnimation { get; }
    public static string DescriptionAttributeCoolBarComboBoxControl_OnSelectedIndexChanged { get; }
    public static string DescriptionAttributeCoolBarComboBox_OnSelectedIndexChanged { get; }
    public static string DescriptionAttributeOneByOne { get; }
    public static string DescriptionAttributeSeries_ValueMembersY { get; }
    public static string DescriptionAttributeSmartLabelsStyle_SmartLabelsStyle { get; }
    public static string DescriptionAttributeChartEvent_SelectionRangeChanging { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_GetItemImageIndex { get; }
    public static string DescriptionAttributeCoolBarItem_CoolBarItem { get; }
    public static string DescriptionAttributeMapAreaId { get; }
    public static string DescriptionAttributeLabelsAutoFitMinFontSize { get; }
    public static string DescriptionAttributeMaxMovingDistance { get; }
    public static string DescriptionAttributeEnableText { get; }
    public static string DescriptionAttributeTitle_DockToChartArea { get; }
    public static string DescriptionAttributeLegend_DockToChartArea { get; }
    public static string DescriptionAttributeGripperState_GripperState { get; }
    public static string DescriptionAttributeChartArea3DStyle_RightAngleAxes { get; }
    public static string DescriptionAttributeCoolBarGripper_OnMouseDown { get; }
    public static string DescriptionAttributeCoolBarButtonControl_OnMouseDown { get; }
    public static string DescriptionAttributeCoolBarButtonClickStyle_CoolBarButtonClickStyle { get; }
    public static string DescriptionAttributeBorderSkinAttributes_FrameBackImageTransparentColor { get; }
    public static string DescriptionAttributeLegend_LegendStyle { get; }
    public static string DescriptionAttributeCoolBarDockDictionary_CoolBarDockDictionary { get; }
    public static string DescriptionAttributeLegendMapAreaAttributes { get; }
    public static string DescriptionAttributeCoolBarDock_DesiredSize { get; }
    public static string DescriptionAttributeCoolBarSlot_DesiredSize { get; }
    public static string DescriptionAttributeCoolBar_DesiredSize { get; }
    public static string DescriptionAttributeAxisDataView_AxisDataView { get; }
    public static string DescriptionAttributeCoolBarButtonEvent_DropDown { get; }
    public static string DescriptionAttributeCoolBar_CoolBar { get; }
    public static string DescriptionAttributeCoolBarRectangle_CoolBar { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_DrawText { get; }
    public static string DescriptionAttributeStripLine_BorderStyle { get; }
    public static string DescriptionAttributeBorderStyle3 { get; }
    public static string DescriptionAttributeLegend_BorderStyle { get; }
    public static string DescriptionAttributeChartArea_BorderStyle { get; }
    public static string DescriptionAttributeLegendItem_BorderStyle { get; }
    public static string DescriptionAttributeToolBarAttributes_BorderStyle { get; }
    public static string DescriptionAttributeBorderStyle8 { get; }
    public static string DescriptionAttributeTitle_BorderStyle { get; }
    public static string DescriptionAttributeLegendItem_BackGradientEndColor { get; }
    public static string DescriptionAttributeBackGradientEndColor3 { get; }
    public static string DescriptionAttributeBackGradientEndColor4 { get; }
    public static string DescriptionAttributeChartArea_BackGradientEndColor { get; }
    public static string DescriptionAttributeCalloutAnnotation_BackGradientEndColor { get; }
    public static string DescriptionAttributeBackGradientEndColor7 { get; }
    public static string DescriptionAttributeBackGradientEndColor8 { get; }
    public static string DescriptionAttributeStripLine_BackGradientEndColor { get; }
    public static string DescriptionAttributeLegend_BackGradientEndColor { get; }
    public static string DescriptionAttributeAnnotationGroup_BackGradientEndColor { get; }
    public static string DescriptionAttributeTitle_BackGradientEndColor { get; }
    public static string DescriptionAttributeBackGradientEndColor13 { get; }
    public static string DescriptionAttributePolygonAnnotation_BackGradientEndColor { get; }
    public static string DescriptionAttributeImageAnnotation_BackGradientEndColor { get; }
    public static string DescriptionAttributeLegend_TitleSeparator { get; }
    public static string DescriptionAttributeChartArea_InnerPlotPosition { get; }
    public static string DescriptionAttributeChartEvent_CustomizeLegend { get; }
    public static string DescriptionAttributeAnnotationPathPoint_AnnotationPathPoint { get; }
    public static string DescriptionAttributeChartEvent_CallbackComplete { get; }
    public static string DescriptionAttributeSeries_FinancialMarkers { get; }
    public static string DescriptionAttributeCoolBarSlotCollection_OnSet { get; }
    public static string DescriptionAttributeCoolBarCollection_OnSet { get; }
    public static string DescriptionAttributeCoolBarItemCollection_OnSet { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_OriginallyOwnerDrawn { get; }
    public static string DescriptionAttributeDataPoint_YValues { get; }
    public static string DescriptionAttributeChart_AnimationFramesPerSecond { get; }
    public static string DescriptionAttributeCustomLabel_RowIndex { get; }
    public static string DescriptionAttributeSeries_YSubAxisName { get; }
    public static string DescriptionAttributeChartArea_AlignType { get; }
    public static string DescriptionAttributeChartEvent_Paint { get; }
    public static string DescriptionAttributeTripleResolutionImage_RaiseImageChangedEvent { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_MainMenuBackgroundColor { get; }
    public static string DescriptionAttributeStartTime { get; }
    public static string DescriptionAttributeAllowResizing { get; }
    public static string DescriptionAttributeShowLabelAsValue { get; }
    public static string DescriptionAttributeLegendCellColumn_TextColor { get; }
    public static string DescriptionAttributeTextColor3 { get; }
    public static string DescriptionAttributeTextColor4 { get; }
    public static string DescriptionAttributeLegendCell_TextColor { get; }
    public static string DescriptionAttributeTextColor6 { get; }
    public static string DescriptionAttributeFinancialMarker_TextColor { get; }
    public static string DescriptionAttributeCustomLabel_TextColor { get; }
    public static string DescriptionAttributeImageAnnotation_TextColor { get; }
    public static string DescriptionAttributePathPoints { get; }
    public static string DescriptionAttributeMarkerBorderColor { get; }
    public static string DescriptionAttributeSelectionManagerExtended_MarkerBorderColor { get; }
    public static string DescriptionAttributeLegendItem_MarkerBorderColor { get; }
    public static string DescriptionAttributeViewEventArgs_NewSizeType { get; }
    public static string DescriptionAttributeChart_BuildNumber { get; }
    public static string DescriptionAttributeFinancialMarker_SecondPointIndex { get; }
    public static string DescriptionAttributeAxisScaleSegmentCollection_AxisScaleSegmentCollection { get; }
    public static string DescriptionAttributeCoolMenuItem_CoolMenuItem { get; }
    public static string DescriptionAttributeMarkerSize { get; }
    public static string DescriptionAttributeLegendItem_MarkerSize { get; }
    public static string DescriptionAttributeSelectionManagerExtended_MarkerSize { get; }
    public static string DescriptionAttributeLegendCell_SeriesSymbolSize { get; }
    public static string DescriptionAttributeLegendCellColumn_SeriesSymbolSize { get; }
    public static string DescriptionAttributeCoolBarSlotCollection_OnClear { get; }
    public static string DescriptionAttributeCoolBarItemCollection_OnClear { get; }
    public static string DescriptionAttributeCoolBarCollection_OnClear { get; }
    public static string DescriptionAttributeDisabled { get; }
    public static string DescriptionAttributeCoolBarDockDictionary_FindFirst { get; }
    public static string DescriptionAttributeCoolBarDictionary_FindFirst { get; }
    public static string DescriptionAttributeCoolBarItemDictionary_FindFirst { get; }
    public static string DescriptionAttributeChartSerializer_ResetWhenLoading { get; }
    public static string DescriptionAttributeTitleFontColor { get; }
    public static string DescriptionAttributeCoolBarButtonEvent_Click { get; }
    public static string DescriptionAttributeTitle_BackGradientType { get; }
    public static string DescriptionAttributeBackGradientType3 { get; }
    public static string DescriptionAttributeBackGradientType4 { get; }
    public static string DescriptionAttributeImageAnnotation_BackGradientType { get; }
    public static string DescriptionAttributeStripLine_BackGradientType { get; }
    public static string DescriptionAttributeChartArea_BackGradientType { get; }
    public static string DescriptionAttributeBackGradientType8 { get; }
    public static string DescriptionAttributeLegendItem_BackGradientType { get; }
    public static string DescriptionAttributeCalloutAnnotation_BackGradientType { get; }
    public static string DescriptionAttributeLegend_BackGradientType { get; }
    public static string DescriptionAttributeBackGradientType12 { get; }
    public static string DescriptionAttributeBackGradientType13 { get; }
    public static string DescriptionAttributeRepeatDelay { get; }
    public static string DescriptionAttributeChart_RepeatDelay { get; }
    public static string DescriptionAttributeDataSource { get; }
    public static string DescriptionAttributeCustomLabels { get; }
    public static string DescriptionAttributeBorderSkinAttributes_FrameBackImage { get; }
    public static string DescriptionAttributeDundasNumericEditor_MaxValue { get; }
    public static string DescriptionAttributeBorderSkinAttributes_FrameBackColor { get; }
    public static string DescriptionAttributeLabelBorderStyle { get; }
    public static string DescriptionAttributeCoolBarGripper_Down { get; }
    public static string DescriptionAttributeCoolBarRectangle_Rectangle { get; }
    public static string DescriptionAttributeArrowAnnotation_ArrowAnnotation { get; }
    public static string DescriptionAttributeCursor_AxisType { get; }
    public static string DescriptionAttributeLegendItem_Cells { get; }
    public static string DescriptionAttributeBorderSkinAttributes { get; }
    public static string DescriptionAttributeBorderSkinAttributes_BorderSkinAttributes { get; }
    public static string DescriptionAttributeCoolBarSlotCollection_OnRemoveComplete { get; }
    public static string DescriptionAttributeCoolBarItemCollection_OnRemoveComplete { get; }
    public static string DescriptionAttributeCoolBarCollection_OnRemoveComplete { get; }
    public static string DescriptionAttributeChartToolBar_FrameBorderColor { get; }
    public static string DescriptionAttributeBorderSkinAttributes_FrameBorderColor { get; }
    public static string DescriptionAttributeSubAxisCollection_SubAxisCollection { get; }
    public static string DescriptionAttributeAllowSelecting { get; }
    public static string DescriptionAttributeChartEvent_Customize { get; }
    public static string DescriptionAttributeInPopulation { get; }
    public static string DescriptionAttributeDuration { get; }
    public static string DescriptionAttributeChartMirror_TitlePlacement { get; }
    public static string DescriptionAttributeEnableImage { get; }
    public static string DescriptionAttributeCommand_Toggled { get; }
    public static string DescriptionAttributeImageAnnotation_ImageAnnotation { get; }
    public static string DescriptionAttributeAxisDataView_SmallScrollSize { get; }
    public static string DescriptionAttributeAxisScaleSegment_Interval { get; }
    public static string DescriptionAttributeCursor_Interval { get; }
    public static string DescriptionAttributeInterval4 { get; }
    public static string DescriptionAttributeStripLine_Interval { get; }
    public static string DescriptionAttributeInterval6 { get; }
    public static string DescriptionAttributeLabel_Interval { get; }
    public static string DescriptionAttributeStripLine_TitleLineAlignment { get; }
    public static string DescriptionAttributeChart_BorderlineColor { get; }
    public static string DescriptionAttributeMaximum { get; }
    public static string DescriptionAttributeLegend_TitleBackColor { get; }
    public static string DescriptionAttributeYAxisName { get; }
    public static string DescriptionAttributeElementPosition_Auto { get; }
    public static string DescriptionAttributeSeries_YAxisType { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_MenuPopupHandler { get; }
    public static string DescriptionAttributeTextAnnotation_LineStyle { get; }
    public static string DescriptionAttributeFinancialMarker_LineStyle { get; }
    public static string DescriptionAttributeLineStyle4 { get; }
    public static string DescriptionAttributeCursor_LineStyle { get; }
    public static string DescriptionAttributeLineStyle6 { get; }
    public static string DescriptionAttributeLineStyle7 { get; }
    public static string DescriptionAttributeAxisScaleBreakStyle_LineStyle { get; }
    public static string DescriptionAttributeLineStyle9 { get; }
    public static string DescriptionAttributeLogarithmBase { get; }
    public static string DescriptionAttributeCoolMenuItem_ImageID { get; }
    public static string DescriptionAttributeCoolBarButtonControl_ImageID { get; }
    public static string DescriptionAttributeCommand_ImageID { get; }
    public static string DescriptionAttributeAntiAlias { get; }
    public static string DescriptionAttributeAxisPosition { get; }
    public static string DescriptionAttributeCoolBarCollection_OnSetComplete { get; }
    public static string DescriptionAttributeCoolBarSlotCollection_OnSetComplete { get; }
    public static string DescriptionAttributeCoolBarItemCollection_OnSetComplete { get; }
    public static string DescriptionAttributeStripLine_BackImageMode { get; }
    public static string DescriptionAttributeBackImageMode3 { get; }
    public static string DescriptionAttributeBackImageMode4 { get; }
    public static string DescriptionAttributeLegend_BackImageMode { get; }
    public static string DescriptionAttributeTitle_BackImageMode { get; }
    public static string DescriptionAttributeChartArea_BackImageMode { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_DisplayingImage { get; }
    public static string DescriptionAttributeChartSerializer_IgnoreUnknownXmlAttributes { get; }
    public static string DescriptionAttributeAxisScaleSegment_Tag { get; }
    public static string DescriptionAttributeLegendItem_Tag { get; }
    public static string DescriptionAttributeCustomLabel_Tag { get; }
    public static string DescriptionAttributeTag5 { get; }
    public static string DescriptionAttributeDundasNumericEditor_Tag { get; }
    public static string DescriptionAttributeCoolBar_MinimumHeight { get; }
    public static string DescriptionAttributeAngleTrackFormEvent_ValueChanged { get; }
    public static string DescriptionAttributeImageAnnotation_ImageMode { get; }
    public static string DescriptionAttributeLegend { get; }
    public static string DescriptionAttributeLegend_Legend { get; }
    public static string DescriptionAttributeSeries_Legend { get; }
    public static string DescriptionAttributeCommand_Shortcut { get; }
    public static string DescriptionAttributeDataPointComparer_DataPointComparer { get; }
    public static string DescriptionAttributeBackHatchStyle { get; }
    public static string DescriptionAttributeCalloutAnnotation_BackHatchStyle { get; }
    public static string DescriptionAttributeBackHatchStyle4 { get; }
    public static string DescriptionAttributeBackHatchStyle5 { get; }
    public static string DescriptionAttributeLegendItem_BackHatchStyle { get; }
    public static string DescriptionAttributeTitle_BackHatchStyle { get; }
    public static string DescriptionAttributeLegend_BackHatchStyle { get; }
    public static string DescriptionAttributeBackHatchStyle9 { get; }
    public static string DescriptionAttributeImageAnnotation_BackHatchStyle { get; }
    public static string DescriptionAttributeCoolBarButtonControl_ButtonStyle { get; }
    public static string DescriptionAttributeCoolBarAdornments_CoolBarAdornments { get; }
    public static string DescriptionAttributeCoolBarDictionary_Item { get; }
    public static string DescriptionAttributeChartAreaCollection_Item { get; }
    public static string DescriptionAttributeLegendCollection_Item { get; }
    public static string DescriptionAttributeCoolBarItemDictionary_Item { get; }
    public static string DescriptionAttributeAnnotationCollection_Item { get; }
    public static string DescriptionAttributeSubAxisCollection_Item { get; }
    public static string DescriptionAttributeSeriesCollection_Item { get; }
    public static string DescriptionAttributeCoolBarSlotCollection_Item { get; }
    public static string DescriptionAttributeFinancialMarkersCollection_Item { get; }
    public static string DescriptionAttributeCoolBarItemCollection_Item { get; }
    public static string DescriptionAttributeAnnotationPathPointCollection_Item { get; }
    public static string DescriptionAttributeLegendCellColumnCollection_Item { get; }
    public static string DescriptionAttributeCoolBarSimpleCollection_Item { get; }
    public static string DescriptionAttributeCoolBarRectangleCollection_Item { get; }
    public static string DescriptionAttributeAxisScaleSegmentCollection_Item { get; }
    public static string DescriptionAttributeCoolBarDockDictionary_Item { get; }
    public static string DescriptionAttributeLegendCellCollection_Item { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_Item { get; }
    public static string DescriptionAttributeCoolBarCollection_Item { get; }
    public static string DescriptionAttributeNamedImagesCollection_Item { get; }
    public static string DescriptionAttributeCommand_CommandId { get; }
    public static string DescriptionAttributeCoolBarRectangleCollection_CoolBarRectangleCollection { get; }
    public static string DescriptionAttributeAxisScaleSegment_ScaleMinimum { get; }
    public static string DescriptionAttributeSmartLabels { get; }
    public static string DescriptionAttributeSeries_SmartLabels { get; }
    public static string DescriptionAttributeSmartLabels_SmartLabels { get; }
    public static string DescriptionAttributeChart_BorderlineStyle { get; }
    public static string DescriptionAttributeChartMirror_EnableContextMenu { get; }
    public static string DescriptionAttributeBorderSkinAttributes_FrameBackImageMode { get; }
    public static string DescriptionAttributeMinorTickMark { get; }
    public static string DescriptionAttributeMapAreasCollection_MapAreasCollection { get; }
    public static string DescriptionAttributeMovingDirection { get; }
    public static string DescriptionAttributeIResultOutput_IResultOutput { get; }
    public static string DescriptionAttributeCursor_UserSelection { get; }
    public static string DescriptionAttributeCoolBarItemDictionary_CoolBarItemDictionary { get; }
    public static string DescriptionAttributeChartArea { get; }
    public static string DescriptionAttributeSeries_ChartArea { get; }
    public static string DescriptionAttributeChartArea_ChartArea { get; }
    public static string DescriptionAttributeToolTipEventArgs_HitTestResult { get; }
    public static string DescriptionAttributeAxisScaleSegment_AxisScaleSegment { get; }
    public static string DescriptionAttributeCoolBarSlot_CoolBarSlot { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_DrawCheckBox { get; }
    public static string DescriptionAttributeLabelHref { get; }
    public static string DescriptionAttributeCoolBarButton_OnClick { get; }
    public static string DescriptionAttributeCoolBarButtonControl_OnClick { get; }
    public static string DescriptionAttributeLegend_ItemColumnSeparatorColor { get; }
    public static string DescriptionAttributeCoolBarSlotCollection_OnInsert { get; }
    public static string DescriptionAttributeCoolBarItemCollection_OnInsert { get; }
    public static string DescriptionAttributeCoolBarCollection_OnInsert { get; }
    public static string DescriptionAttributeDataManipulator { get; }
    public static string DescriptionAttributeTitle_Color { get; }
    public static string DescriptionAttributeLegendItem_Color { get; }
    public static string DescriptionAttributeColor4 { get; }
    public static string DescriptionAttributeMargins_Right { get; }
    public static string DescriptionAttributeRight3 { get; }
    public static string DescriptionAttributeChart_OnBackPaint { get; }
    public static string DescriptionAttributeLineColor { get; }
    public static string DescriptionAttributeLineColor3 { get; }
    public static string DescriptionAttributeTextAnnotation_LineColor { get; }
    public static string DescriptionAttributeLineColor5 { get; }
    public static string DescriptionAttributeCursor_LineColor { get; }
    public static string DescriptionAttributeAxisScaleBreakStyle_LineColor { get; }
    public static string DescriptionAttributeLineColor8 { get; }
    public static string DescriptionAttributeFinancialMarker_LineColor { get; }
    public static string DescriptionAttributeAxisScrollBar_LineColor { get; }
    public static string DescriptionAttributeImageAnnotation_LineColor { get; }
    public static string DescriptionAttributeFadingAnimation_StartTextColor { get; }
    public static string DescriptionAttributeCoolBar_ImageList { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_ImageList { get; }
    public static string DescriptionAttributeArrowAnnotation_ArrowStyle { get; }
    public static string DescriptionAttributeArrowStyle_ArrowStyle { get; }
    public static string DescriptionAttributeCalloutLineColor { get; }
    public static string DescriptionAttributeSeries_XValueType { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_PopupBackgroundColor { get; }
    public static string DescriptionAttributeCoolMenuItem_OnItemPropertyChanged { get; }
    public static string DescriptionAttributeAnnotationGroup_Annotations { get; }
    public static string DescriptionAttributeAnnotations3 { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_DrawBackground { get; }
    public static string DescriptionAttributeMinorGrid { get; }
    public static string DescriptionAttributeCoolMenuItem_ToolTipText { get; }
    public static string DescriptionAttributeToolTipText3 { get; }
    public static string DescriptionAttributeDundasNumericEditor_MaxLength { get; }
    public static string DescriptionAttributeCoolBarSlot_Owner { get; }
    public static string DescriptionAttributeCoolBarCollection_Owner { get; }
    public static string DescriptionAttributeCoolBarItemCollection_Owner { get; }
    public static string DescriptionAttributeCoolBarTextBoxControl_Owner { get; }
    public static string DescriptionAttributeCoolBarButtonControl_Owner { get; }
    public static string DescriptionAttributeCoolBarSlotCollection_Owner { get; }
    public static string DescriptionAttributeCoolBar_Owner { get; }
    public static string DescriptionAttributeCoolBarComboBoxControl_Owner { get; }
    public static string DescriptionAttributeCoolBarSeparatorControl_Owner { get; }
    public static string DescriptionAttributeOwner11 { get; }
    public static string DescriptionAttributeCoolBarGripper_Owner { get; }
    public static string DescriptionAttributeCoolBarGripper_OnMouseUp { get; }
    public static string DescriptionAttributeCoolBarButtonControl_OnMouseUp { get; }
    public static string DescriptionAttributeCommand_Description { get; }
    public static string DescriptionAttributeCoolBarSlotCollection_OnClearComplete { get; }
    public static string DescriptionAttributeCoolBarCollection_OnClearComplete { get; }
    public static string DescriptionAttributeCoolBarItemCollection_OnClearComplete { get; }
    public static string DescriptionAttributeMapArea_Custom { get; }
    public static string DescriptionAttributeCoolBarSimpleCollection_CoolBarSimpleCollection { get; }
    public static string DescriptionAttributeChart_EnableViewState { get; }
    public static string DescriptionAttributeChartArea3DStyle_Enable3D { get; }
    public static string DescriptionAttributeInterlacedColor { get; }
    public static string DescriptionAttributeLegendCellColumn_Margins { get; }
    public static string DescriptionAttributeMargins_Margins { get; }
    public static string DescriptionAttributeLegendCell_Margins { get; }
    public static string DescriptionAttributeLegendItem_MarkerColor { get; }
    public static string DescriptionAttributeMarkerColor3 { get; }
    public static string DescriptionAttributeSelectionManagerExtended_MarkerColor { get; }
    public static string DescriptionAttributeChart_Size { get; }
    public static string DescriptionAttributeTickMark_Size { get; }
    public static string DescriptionAttributeAxisScaleSegment_Size { get; }
    public static string DescriptionAttributeAxisDataView_Size { get; }
    public static string DescriptionAttributeAxisScrollBar_Size { get; }
    public static string DescriptionAttributeViewEventArgs_NewSize { get; }
    public static string DescriptionAttributeSeries_XAxisType { get; }
    public static string DescriptionAttributeAllowOutsidePlotArea { get; }
    public static string DescriptionAttributeLegendItem_MarkerStyle { get; }
    public static string DescriptionAttributeSelectionManagerExtended_MarkerStyle { get; }
    public static string DescriptionAttributeMarkerStyle4 { get; }
    public static string DescriptionAttributeLegendCell_ImageSize { get; }
    public static string DescriptionAttributeView { get; }
    public static string DescriptionAttributeSeriesCollection_SeriesCollection { get; }
    public static string DescriptionAttributeCursorEventArgs_NewPosition { get; }
    public static string DescriptionAttributeViewEventArgs_NewPosition { get; }
    public static string DescriptionAttributeCommand_Image { get; }
    public static string DescriptionAttributeLegendCell_Image { get; }
    public static string DescriptionAttributeNamedImage_Image { get; }
    public static string DescriptionAttributeImageAnnotation_Image { get; }
    public static string DescriptionAttributeLegendItem_Image { get; }
    public static string DescriptionAttributeCustomLabel_Image { get; }
    public static string DescriptionAttributeAxisScaleSegment_IntervalOffset { get; }
    public static string DescriptionAttributeIntervalOffset3 { get; }
    public static string DescriptionAttributeLabel_IntervalOffset { get; }
    public static string DescriptionAttributeCursor_IntervalOffset { get; }
    public static string DescriptionAttributeIntervalOffset6 { get; }
    public static string DescriptionAttributeStripLine_IntervalOffset { get; }
    public static string DescriptionAttributeLegend_DockInsideChartArea { get; }
    public static string DescriptionAttributeTitle_DockInsideChartArea { get; }
    public static string DescriptionAttributeChart_RenderType { get; }
    public static string DescriptionAttributeFinancialMarker_SecondYIndex { get; }
    public static string DescriptionAttributeAxisScaleBreakStyle_CollapsibleSpaceThreshold { get; }
    public static string DescriptionAttributeAnimationElement_AnimationElement { get; }
    public static string DescriptionAttributeCommandResult_Reason { get; }
    public static string DescriptionAttributeChartEvent_AxisViewChanging { get; }
    public static string DescriptionAttributeChartEvent2_AxisViewChanging { get; }
    public static string DescriptionAttributeLabelCalloutStyle_LabelCalloutStyle { get; }
    public static string DescriptionAttributeCoolBarImageHelper_CoolBarImageHelper { get; }
    public static string DescriptionAttributeLabelMapAreaAttributes { get; }
    public static string DescriptionAttributeCoolBarButtonControl_Hot { get; }
    public static string DescriptionAttributePath { get; }
    public static string DescriptionAttributeLegendItem_SeriesPointIndex { get; }
    public static string DescriptionAttributeMapAreas { get; }
    public static string DescriptionAttributeTickMark_TickMark { get; }
    public static string DescriptionAttributeLegendCellColumn_LegendCellColumn { get; }
    public static string DescriptionAttributeCoolBar_ToolTipHandler { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_MenuItemTextColor { get; }
    public static string DescriptionAttributeLegendItem_LegendItem { get; }
    public static string DescriptionAttributeTitleAlignment { get; }
    public static string DescriptionAttributeStripLine_TitleAlignment { get; }
    public static string DescriptionAttributeLegend_TitleAlignment { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_PopupTextColor { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_PopupFocusColor { get; }
    public static string DescriptionAttributeElementPosition_ElementPosition { get; }
    public static string DescriptionAttributeCustomLabel_To { get; }
    public static string DescriptionAttributeFinancialMarker_FirstPointIndex { get; }
    public static string DescriptionAttributeCoolBarComboBox_ResizeContent { get; }
    public static string DescriptionAttributeCoolBar_ResizeContent { get; }
    public static string DescriptionAttributeCoolBarButton_ResizeContent { get; }
    public static string DescriptionAttributeCoolBarTextBox_ResizeContent { get; }
    public static string DescriptionAttributeCoolBarDock_ResizeContent { get; }
    public static string DescriptionAttributeCoolBarGripper_ResizeContent { get; }
    public static string DescriptionAttributeResizeContent8 { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_RaiseOrganizerPropertyChangedEvent { get; }
    public static string DescriptionAttributeLabel_FontAngle { get; }
    public static string DescriptionAttributeFontAngle3 { get; }
    public static string DescriptionAttributeIntervalAutoMode { get; }
    public static string DescriptionAttributeFadingAnimation_StartBorderColor { get; }
    public static string DescriptionAttributeStripLine_StripWidth { get; }
    public static string DescriptionAttributeAnimationBase_AnimationBase { get; }
    public static string DescriptionAttributeConstructor { get; }
    public static string DescriptionAttributeConstructor3 { get; }
    public static string DescriptionAttributeCursor_UserEnabled { get; }
    public static string DescriptionAttributeBorderSkinAttributes_FrameBorderWidth { get; }
    public static string DescriptionAttributeChart_AnimationTheme { get; }
    public static string DescriptionAttributeBorderSkin { get; }
    public static string DescriptionAttributeToolBarAttributes_BorderSkin { get; }
    public static string DescriptionAttributeAxisScaleSegment_Position { get; }
    public static string DescriptionAttributeAxisDataView_Position { get; }
    public static string DescriptionAttributeTitle_Position { get; }
    public static string DescriptionAttributeLegend_Position { get; }
    public static string DescriptionAttributeChartArea_Position { get; }
    public static string DescriptionAttributeCursor_Position { get; }
    public static string DescriptionAttributeToolBarAttributes_Position { get; }
    public static string DescriptionAttributeCommand_ImageTransparentColor { get; }
    public static string DescriptionAttributeLegendCell_ImageTransparentColor { get; }
    public static string DescriptionAttributeCustomLabel_ImageTransparentColor { get; }
    public static string DescriptionAttributeImageAnnotation_ImageTransparentColor { get; }
    public static string DescriptionAttributeSubAxis_ParentAxis { get; }
    public static string DescriptionAttributeAnnotationCollectionEditor_AnnotationCollectionEditor { get; }
    public static string DescriptionAttributeBottom { get; }
    public static string DescriptionAttributeMargins_Bottom { get; }
    public static string DescriptionAttributeAxisScaleBreakStyle_AxisScaleBreakStyle { get; }
    public static string DescriptionAttributeChart_CallbackManager { get; }
    public static string DescriptionAttributeLegend_HeaderSeparator { get; }
    public static string DescriptionAttributeChartArea3DStyle_PointDepth { get; }
    public static string DescriptionAttributeAnnotationGroup_AnnotationGroup { get; }
    public static string DescriptionAttributeLabelBackColor { get; }
    public static string DescriptionAttributeAnnotationPathPointCollection_AnnotationPathPointCollection { get; }
    public static string DescriptionAttributeStripLine_StripWidthType { get; }
    public static string DescriptionAttributeCustomLabel_From { get; }
    public static string DescriptionAttributePoint3D_PointF { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_ItemRectangle { get; }
    public static string DescriptionAttributeSelectionManagerExtended_EnableDrawing { get; }
    public static string DescriptionAttributeCommand_CommandUIList { get; }
    public static string DescriptionAttributeMovingAnimation_StartPositionY { get; }
    public static string DescriptionAttributeChartEvent_Callback { get; }
    public static string DescriptionAttributeStripLine_BorderWidth { get; }
    public static string DescriptionAttributeLegendItem_BorderWidth { get; }
    public static string DescriptionAttributeBorderWidth4 { get; }
    public static string DescriptionAttributeToolBarAttributes_BorderWidth { get; }
    public static string DescriptionAttributeLegend_BorderWidth { get; }
    public static string DescriptionAttributeChartArea_BorderWidth { get; }
    public static string DescriptionAttributeBorderWidth8 { get; }
    public static string DescriptionAttributeTitle_BorderWidth { get; }
    public static string DescriptionAttributeDundasNumericEditor_Value { get; }
    public static string DescriptionAttributeCursor_SelectionEnd { get; }
    public static string DescriptionAttributeLineAnnotation_LineAnnotation { get; }
    public static string DescriptionAttributeAnnotationSmartLabels_AnnotationSmartLabels { get; }
    public static string DescriptionAttributeLabelBorderColor { get; }
    public static string DescriptionAttributeCustomLabel_ImageMapAreaAttributes { get; }
    public static string DescriptionAttributeCoolBarButton_RecalcLayout { get; }
    public static string DescriptionAttributeCoolBarTextBox_RecalcLayout { get; }
    public static string DescriptionAttributeCoolBarSlot_RecalcLayout { get; }
    public static string DescriptionAttributeCoolBar_RecalcLayout { get; }
    public static string DescriptionAttributeCoolBarDock_RecalcLayout { get; }
    public static string DescriptionAttributeCoolBarGripper_RecalcLayout { get; }
    public static string DescriptionAttributeCoolBarComboBox_RecalcLayout { get; }
    public static string DescriptionAttributeRecalcLayout9 { get; }
    public static string DescriptionAttributeUpdateUIPart_UpdateUIPart { get; }
    public static string DescriptionAttributeCoolBarComboBoxControl_CoolBarComboBoxControl { get; }
    public static string DescriptionAttributeAnnotationGroup_Visible { get; }
    public static string DescriptionAttributeChartArea_Visible { get; }
    public static string DescriptionAttributeTitle_Visible { get; }
    public static string DescriptionAttributeCommand_Visible { get; }
    public static string DescriptionAttributeVisible6 { get; }
    public static string DescriptionAttributeLegendItem_Separator { get; }
    public static string DescriptionAttributeCoolBarSeparatorControl_Separator { get; }
    public static string DescriptionAttributeLegendCell_CellType { get; }
    public static string DescriptionAttributeSelectionManagerExtended_MarkerBorderWidth { get; }
    public static string DescriptionAttributeMarkerBorderWidth3 { get; }
    public static string DescriptionAttributeLegendItem_MarkerBorderWidth { get; }
    public static string DescriptionAttributeCommand_Index { get; }
    public static string DescriptionAttributeChart_Serializer { get; }
    public static string DescriptionAttributeAnimationElementsCollection_AnimationElementsCollection { get; }
    public static string DescriptionAttributeAxisX { get; }
    public static string DescriptionAttributeChartArea_AxisX { get; }
    public static string DescriptionAttributeDundasNumericEditor_IncrementBy { get; }
    public static string DescriptionAttributeImageType { get; }
    public static string DescriptionAttributeCursor_SelectionStart { get; }
    public static string DescriptionAttributePolygonAnnotation_EndCap { get; }
    public static string DescriptionAttributeEndCap3 { get; }
    public static string DescriptionAttributeLabelsAutoFit { get; }
    public static string DescriptionAttributeLegendCellColumn_HeaderText { get; }
    public static string DescriptionAttributeMapEnabled { get; }
    public static string DescriptionAttributeAxisDataView_Zoomable { get; }
    public static string DescriptionAttributeCommand_UseLastSubcommand { get; }
    public static string DescriptionAttributeDataManager_PaletteCustomColors { get; }
    public static string DescriptionAttributeChart_PaletteCustomColors { get; }
    public static string DescriptionAttributeLegend_ItemColumnSeparator { get; }
    public static string DescriptionAttributeCoolBarGripper_OnMouseMove { get; }
    public static string DescriptionAttributeCoolBarButtonControl_OnMouseMove { get; }
    public static string DescriptionAttributeCursorEventArgs_NewSelectionEnd { get; }
    public static string DescriptionAttributeLegendItem_SeriesName { get; }
    public static string DescriptionAttributeIResultOutput_Indent { get; }
    public static string DescriptionAttributeChartAreas { get; }
    public static string DescriptionAttributeFadingAnimation_FadingAnimation { get; }
    public static string DescriptionAttributeOrganizerProperty_OrganizerProperty { get; }
    public static string DescriptionAttributeChartArea_AlignWithChartArea { get; }
    public static string DescriptionAttributeLegend_MaxAutoSize { get; }
    public static string DescriptionAttributeLineAnchorCap_LineAnchorCap { get; }
    public static string DescriptionAttributeAnnotationCollection_AnnotationCollection { get; }
    public static string DescriptionAttributeScaleSegments { get; }
    public static string DescriptionAttributeGrid_Grid { get; }
    public static string DescriptionAttributeCommandResult_IsFailed { get; }
    public static string DescriptionAttributeChartArea_EquallySizedAxesFont { get; }
    public static string DescriptionAttributeChartEvent_CustomizeMapAreas { get; }
    public static string DescriptionAttributeCommandUIItem_ResetCommandName { get; }
    public static string DescriptionAttributeCoolBarCollection_CoolBarCollection { get; }
    public static string DescriptionAttributeChartArea3DStyle_WallWidth { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_TextRectangle { get; }
    public static string DescriptionAttributeCustomLabel_Row { get; }
    public static string DescriptionAttributeLegend_TitleSeparatorColor { get; }
    public static string DescriptionAttributeToolBarAttributes_BackColor { get; }
    public static string DescriptionAttributeBackColor3 { get; }
    public static string DescriptionAttributeLegendCellColumn_BackColor { get; }
    public static string DescriptionAttributeBackColor5 { get; }
    public static string DescriptionAttributeLegendCell_BackColor { get; }
    public static string DescriptionAttributeAxisScrollBar_BackColor { get; }
    public static string DescriptionAttributeBackColor8 { get; }
    public static string DescriptionAttributeBackColor9 { get; }
    public static string DescriptionAttributeTitle_BackColor { get; }
    public static string DescriptionAttributeChartArea_BackColor { get; }
    public static string DescriptionAttributeStripLine_BackColor { get; }
    public static string DescriptionAttributeLegend_BackColor { get; }
    public static string DescriptionAttributeImageAnnotation_BackColor { get; }
    public static string DescriptionAttributeChartSerializer_TemplateMode { get; }
    public static string DescriptionAttributeChartEvent_SaveState { get; }
    public static string DescriptionAttributeSeries_ShadowColor { get; }
    public static string DescriptionAttributeTitle_ShadowColor { get; }
    public static string DescriptionAttributeShadowColor4 { get; }
    public static string DescriptionAttributeLegend_ShadowColor { get; }
    public static string DescriptionAttributeAnnotationGroup_ShadowColor { get; }
    public static string DescriptionAttributeLegendItem_ShadowColor { get; }
    public static string DescriptionAttributeChartArea_ShadowColor { get; }
    public static string DescriptionAttributeToolBarAttributes_ShadowColor { get; }
    public static string DescriptionAttributeAxisScaleBreakStyle_MaxNumberOfBreaks { get; }
    public static string DescriptionAttributeZoomResetEventArgs_NumberOfViews { get; }
    public static string DescriptionAttributeCommandUIItem_Parameters { get; }
    public static string DescriptionAttributeCommand_Parameters { get; }
    public static string DescriptionAttributeParameters4 { get; }
    public static string DescriptionAttributeChartEvent_AxisScrollBarClicked { get; }
    public static string DescriptionAttributeAnchorY { get; }
    public static string DescriptionAttributeLegend_AutoFitMinFontSize { get; }
    public static string DescriptionAttributeChartEvent_AnnotationTextChanged { get; }
    public static string DescriptionAttributeChart_Series { get; }
    public static string DescriptionAttributeSeries_Series { get; }
    public static string DescriptionAttributeToolBarAttributes_Items { get; }
    public static string DescriptionAttributeContextMenuAttributes_Items { get; }
    public static string DescriptionAttributeCoolBar_Items { get; }
    public static string DescriptionAttributeChart_RepeatAnimation { get; }
    public static string DescriptionAttributeResizingMode_ResizingMode { get; }
    public static string DescriptionAttributeMapArea_Shape { get; }
    public static string DescriptionAttributeLegend_TextWrapThreshold { get; }
    public static string DescriptionAttributeChart_CallbackStateContent { get; }
    public static string DescriptionAttributeLabelOutsidePlotAreaStyle_LabelOutsidePlotAreaStyle { get; }
    public static string DescriptionAttributeSubAxes { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_UserPreferenceChangedHandler { get; }
    public static string DescriptionAttributeCommandFiringEventArgs_Context { get; }
    public static string DescriptionAttributeAxisScaleBreakStyle_StartFromZero { get; }
    public static string DescriptionAttributeStartFromZero3 { get; }
    public static string DescriptionAttributeCoolBarDock_CoolBarDock { get; }
    public static string DescriptionAttributeRectangleAnnotation_RectangleAnnotation { get; }
    public static string DescriptionAttributeHref { get; }
    public static string DescriptionAttributeMapArea_Href { get; }
    public static string DescriptionAttributeAxis_Href { get; }
    public static string DescriptionAttributeLegendCell_Href { get; }
    public static string DescriptionAttributeLegendCellColumn_Href { get; }
    public static string DescriptionAttributeHref7 { get; }
    public static string DescriptionAttributeCustomLabel_Href { get; }
    public static string DescriptionAttributeStripLine_Href { get; }
    public static string DescriptionAttributeTitle_Href { get; }
    public static string DescriptionAttributeAxisScaleBreakStyle_BreakLineType { get; }
    public static string DescriptionAttributeCoolBarSlotCollection_OnRemove { get; }
    public static string DescriptionAttributeCoolBarItemCollection_OnRemove { get; }
    public static string DescriptionAttributeCoolBarCollection_OnRemove { get; }
    public static string DescriptionAttributeCoolBarButtonControl_OnMouseLeave { get; }
    public static string DescriptionAttributeChartEvent_CursorPositionChanged { get; }
    public static string DescriptionAttributeChartSerializer_SerializableContent { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_SelectedBackgroundColor { get; }
    public static string DescriptionAttributeCalloutAnnotation_CalloutStyle { get; }
    public static string DescriptionAttributeCalloutStyle3 { get; }
    public static string DescriptionAttributeCalloutStyle_CalloutStyle { get; }
    public static string DescriptionAttributeFinancialMarker_MarkerType { get; }
    public static string DescriptionAttributeCoolBarSlot_DrawingOrder { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_DrawImage { get; }
    public static string DescriptionAttributeToolBarAttributes_Docking { get; }
    public static string DescriptionAttributeTitle_Docking { get; }
    public static string DescriptionAttributeLegend_Docking { get; }
    public static string DescriptionAttributeTripleResolutionImageEvent_ImageChanged { get; }
    public static string DescriptionAttributeAnnotationGroup_AllowAnchorMoving { get; }
    public static string DescriptionAttributeAllowAnchorMoving3 { get; }
    public static string DescriptionAttributeCommand_Subcommands { get; }
    public static string DescriptionAttributeCoolBar_ShowCustomizeButton { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_AttachMenu { get; }
    public static string DescriptionAttributeTitleColor { get; }
    public static string DescriptionAttributeStripLine_TitleColor { get; }
    public static string DescriptionAttributeLegend_TitleColor { get; }
    public static string DescriptionAttributeTitles { get; }
    public static string DescriptionAttributeChart_UI { get; }
    public static string DescriptionAttributeUI3 { get; }
    public static string DescriptionAttributeCoolBarComboBox_OnTextChanged { get; }
    public static string DescriptionAttributeCoolBarTextBoxControl_OnTextChanged { get; }
    public static string DescriptionAttributeCoolBarTextBox_OnTextChanged { get; }
    public static string DescriptionAttributeCoolBarComboBoxControl_OnTextChanged { get; }
    public static string DescriptionAttributeFontHelper_FontHelper { get; }
    public static string DescriptionAttributePolygonAnnotation_PolygonAnnotation { get; }
    public static string DescriptionAttributeLabel_IntervalType { get; }
    public static string DescriptionAttributeIntervalType3 { get; }
    public static string DescriptionAttributeIntervalType4 { get; }
    public static string DescriptionAttributeStripLine_IntervalType { get; }
    public static string DescriptionAttributeAxisScaleSegment_IntervalType { get; }
    public static string DescriptionAttributeCursor_IntervalType { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_SeparatorColor { get; }
    public static string DescriptionAttributeLegendItem_SeparatorColor { get; }
    public static string DescriptionAttributeSelectionManagerExtended_MouseButtonToSelectElement { get; }
    public static string DescriptionAttributeTripleResolutionImage_OnImageChanged { get; }
    public static string DescriptionAttributeCommandName { get; }
    public static string DescriptionAttributeCommandUIItem_CommandName { get; }
    public static string DescriptionAttributeSeries_YValuesPerPoint { get; }
    public static string DescriptionAttributeBorderSkinAttributes_FrameBackHatchStyle { get; }
    public static string DescriptionAttributeChartEvent_PrePaint { get; }
    public static string DescriptionAttributeChartEvent2_PrePaint { get; }
    public static string DescriptionAttributeLegendHref { get; }
    public static string DescriptionAttributeCoolBarSimpleCollection_Contains { get; }
    public static string DescriptionAttributeCoolBarDockDictionary_Contains { get; }
    public static string DescriptionAttributeCoolBarItemCollection_Contains { get; }
    public static string DescriptionAttributeCoolBarCollection_Contains { get; }
    public static string DescriptionAttributeCoolBarRectangleCollection_Contains { get; }
    public static string DescriptionAttributeCoolBarSlotCollection_Contains { get; }
    public static string DescriptionAttributeCoolBarItemDictionary_Contains { get; }
    public static string DescriptionAttributeCoolBarDictionary_Contains { get; }
    public static string DescriptionAttributeCustomLabel_ImageHref { get; }
    public static string DescriptionAttributeLabel_Format { get; }
    public static string DescriptionAttributeChartSerializer_Format { get; }
    public static string DescriptionAttributeChartMirror_AreaSmartLabels { get; }
    public static string DescriptionAttributeStripLines { get; }
    public static string DescriptionAttributeChart_ViewStateData { get; }
    public static string DescriptionAttributeChartMirror_TickMarksEnabled { get; }
    public static string DescriptionAttributeTripleResolutionImage_ListImage { get; }
    public static string DescriptionAttributeTitle_DockOffset { get; }
    public static string DescriptionAttributeAnchorDataPoint { get; }
    public static string DescriptionAttributeLabelFormat { get; }
    public static string DescriptionAttributeSuppressExceptions { get; }
    public static string DescriptionAttributeTripleResolutionImage_IconImage { get; }
    public static string DescriptionAttributeSeries_EmptyPointStyle { get; }
    public static string DescriptionAttributeChartEvent_LoadState { get; }
    public static string DescriptionAttributeChart_GetCommand { get; }
    public static string DescriptionAttributeChartUI_GetCommand { get; }
    public static string DescriptionAttributeCustomAttributes { get; }
    public static string DescriptionAttributeChartArea_BackImage { get; }
    public static string DescriptionAttributeBackImage3 { get; }
    public static string DescriptionAttributeStripLine_BackImage { get; }
    public static string DescriptionAttributeTitle_BackImage { get; }
    public static string DescriptionAttributeBackImage6 { get; }
    public static string DescriptionAttributeLegend_BackImage { get; }
    public static string DescriptionAttributeChartMirror_LegendPlacement { get; }
    public static string DescriptionAttributeLegendCellCollection_LegendCellCollection { get; }
    public static string DescriptionAttributeCoolMenuOrganizerEvent_OrganizerPropertyChanged { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_SetItemImageIndex { get; }
    public static string DescriptionAttributeCoolBarDock_Slots { get; }
    public static string DescriptionAttributeCustomLabelsCollection_CustomLabelsCollection { get; }
    public static string DescriptionAttributeChart_ChartData { get; }
    public static string DescriptionAttributeFadingAnimation_StartFillColor { get; }
    public static string DescriptionAttributeCommand_SupportedElements { get; }
    public static string DescriptionAttributeCustomLabel_MarkColor { get; }
    public static string DescriptionAttributePalette { get; }
    public static string DescriptionAttributeChartEvent_AxisViewZoomReset { get; }
    public static string DescriptionAttributeScaleBreakStyle { get; }
    public static string DescriptionAttributeCoolBarSimpleCollection_Insert { get; }
    public static string DescriptionAttributeCoolBarSlotCollection_Insert { get; }
    public static string DescriptionAttributeCoolBarItemCollection_Insert { get; }
    public static string DescriptionAttributeCoolBarCollection_Insert { get; }
    public static string DescriptionAttributeCoolBarRectangleCollection_Insert { get; }
    public static string DescriptionAttributeCoolBarTextBox_CoolBarTextBox { get; }
    public static string DescriptionAttributeSelectionManagerExtended_MouseButtonToSelectCollection { get; }
    public static string DescriptionAttributeChart_ImageUrl { get; }
    public static string DescriptionAttributeLegendItem_MarkerImage { get; }
    public static string DescriptionAttributeMarkerImage3 { get; }
    public static string DescriptionAttributeLegend_InterlacedRowsColor { get; }
    public static string DescriptionAttributeLegendCellColumn_ColumnType { get; }
    public static string DescriptionAttributeCoolBarButtonControl_Latched { get; }
    public static string DescriptionAttributeDundasNumericEditor_Decimals { get; }
    public static string DescriptionAttributeChartArea_AlignOrientation { get; }
    public static string DescriptionAttributeEnableTooltip { get; }
    public static string DescriptionAttributeChart_SoftShadows { get; }
    public static string DescriptionAttributeSoftShadows3 { get; }
    public static string DescriptionAttributeCoolBarComboBox_RaiseSelectedIndexChangedEvent { get; }
    public static string DescriptionAttributeTripleResolutionImage_ThumbnailImage { get; }
    public static string DescriptionAttributeChartUI_ContextMenu { get; }
    public static string DescriptionAttributeCoolBarSeparator_CoolBarSeparator { get; }
    public static string DescriptionAttributeCoolBarComboBox_CoolBarComboBox { get; }
    public static string DescriptionAttributePrintingManager_PrintDocument { get; }
    public static string DescriptionAttributeMinimum { get; }
    public static string DescriptionAttributeCoolBarButtonControl_CoolBarButtonControl { get; }
    public static string DescriptionAttributeAxisScaleSegment_ScaleMaximum { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_ImageRectangle { get; }
    public static string DescriptionAttributeCoolBarDictionary_CoolBarDictionary { get; }
    public static string DescriptionAttributeScrollBarEventArgs_MousePositionX { get; }
    public static string DescriptionAttributeLabel_TruncatedLabels { get; }
    public static string DescriptionAttributeCoolMenuItem_RaiseItemPropertyChangedEvent { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_ImageBackgroundColor { get; }
    public static string DescriptionAttributeCustomLabel_GridTicks { get; }
    public static string DescriptionAttributeCoolBarSlotCollection_CoolBarSlotCollection { get; }
    public static string DescriptionAttributeLegendCellColumn_HeaderBackColor { get; }
    public static string DescriptionAttributeTitle_TitleAlwaysHorizontal { get; }
    public static string DescriptionAttributeTitleAlwaysHorizontal3 { get; }
    public static string DescriptionAttributeResultOutputType_ResultOutputType { get; }
    public static string DescriptionAttributeImageAnnotation_Alignment { get; }
    public static string DescriptionAttributeLegendCellColumn_Alignment { get; }
    public static string DescriptionAttributeTitle_Alignment { get; }
    public static string DescriptionAttributeLegendCell_Alignment { get; }
    public static string DescriptionAttributeLegend_Alignment { get; }
    public static string DescriptionAttributeAlignment7 { get; }
    public static string DescriptionAttributeAlignment8 { get; }
    public static string DescriptionAttributeChart_LicenseData { get; }
    public static string DescriptionAttributeChartEvent_ToolbarMouseMoved { get; }
    public static string DescriptionAttributeChart_OnCustomizeMapAreas { get; }
    public static string DescriptionAttributeSubAxis_LocationOffset { get; }
    public static string DescriptionAttributeLegendItemsCollection_LegendItemsCollection { get; }
    public static string DescriptionAttributeLegendCellColumn_MinimumWidth { get; }
    public static string DescriptionAttributeAnimatedElements { get; }
    public static string DescriptionAttributeSelectionPointsStyle_SelectionPointsStyle { get; }
    public static string DescriptionAttributeSelectionPointsStyle3 { get; }
    public static string DescriptionAttributeChartUI_ToolBar { get; }
    public static string DescriptionAttributeChart_AnimationDuration { get; }
    public static string DescriptionAttributeAxisY { get; }
    public static string DescriptionAttributeChartArea_AxisY { get; }
    public static string DescriptionAttributeTextFont { get; }
    public static string DescriptionAttributeImageAnnotation_TextFont { get; }
    public static string DescriptionAttributeTextFont4 { get; }
    public static string DescriptionAttributeTextFont5 { get; }
    public static string DescriptionAttributeAxisDataView_SizeType { get; }
    public static string DescriptionAttributeMinMovingDistance { get; }
    public static string DescriptionAttributeChartArea_CursorX { get; }
    public static string DescriptionAttributeAxisDataView_SmallScrollMinSize { get; }
    public static string DescriptionAttributeAxisDataView_SmallScrollMinSizeType { get; }
    public static string DescriptionAttributeCalloutLineStyle { get; }
    public static string DescriptionAttributeChart_Edition { get; }
    public static string DescriptionAttributeAntiAliasing { get; }
    public static string DescriptionAttributeAxisScrollBar_ButtonColor { get; }
    public static string DescriptionAttributeArea3DStyle { get; }
    public static string DescriptionAttributeChart { get; }
    public static string DescriptionAttributeChart_Chart { get; }
    public static string DescriptionAttributeChartToolBar_Chart { get; }
    public static string DescriptionAttributeChartToolBar_PageColor { get; }
    public static string DescriptionAttributeBorderSkinAttributes_PageColor { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_SelectedFocusColor { get; }
    public static string DescriptionAttributeChartMirror_ShowLegend { get; }
    public static string DescriptionAttributeGrowingAnimation_GrowingAnimation { get; }
    public static string DescriptionAttributeDataPoint_DataPoint { get; }
    public static string DescriptionAttributeChartArea3DStyle_Light { get; }
    public static string DescriptionAttributeDataPointAttributes_DataPointAttributes { get; }
    public static string DescriptionAttributeLegend_AutoFitText { get; }
    public static string DescriptionAttributeChart_ForeColor { get; }
    public static string DescriptionAttributeAllowTextEditing { get; }
    public static string DescriptionAttributeCustomLabel_Text { get; }
    public static string DescriptionAttributeLegendCell_Text { get; }
    public static string DescriptionAttributeText4 { get; }
    public static string DescriptionAttributeTitle_Text { get; }
    public static string DescriptionAttributeLegendCellColumn_Text { get; }
    public static string DescriptionAttributeCommand_Text { get; }
    public static string DescriptionAttributeToolTipEventArgs_Text { get; }
    public static string DescriptionAttributeMultiline { get; }
    public static string DescriptionAttributeChartEvent_CommandFiring { get; }
    public static string DescriptionAttributeTextAnnotation_TextAnnotation { get; }
    public static string DescriptionAttributeCommand_ToggleGroupId { get; }
    public static string DescriptionAttributeOrganizerPropertyChangedEventArgs_Property { get; }
    public static string DescriptionAttributeItemPropertyChangedEventArgs_Property { get; }
    public static string DescriptionAttributeCommand { get; }
    public static string DescriptionAttributeCommandUIItem_Command { get; }
    public static string DescriptionAttributeChartUI_SelectedChartObject { get; }
    public static string DescriptionAttributeClipToChartArea { get; }
    public static string DescriptionAttributeAnnotationGroup_ClipToChartArea { get; }
    public static string DescriptionAttributeChartEvent_BackPaint { get; }
    public static string DescriptionAttributeSeries_YValueType { get; }
    public static string DescriptionAttributeInternalIntervalType { get; }
    public static string DescriptionAttributeCalloutAnnotation_CalloutAnchorCap { get; }
    public static string DescriptionAttributeLogarithmic { get; }
    public static string DescriptionAttributeElements { get; }
    public static string DescriptionAttributeCoolBarComboBox_RaiseTextChangedEvent { get; }
    public static string DescriptionAttributeCoolBarTextBox_RaiseTextChangedEvent { get; }
    public static string DescriptionAttributeLegend_ItemColumnSpacing { get; }
    public static string DescriptionAttributeCompanyName { get; }
    public static string DescriptionAttributeMarksNextToAxis { get; }
    public static string DescriptionAttributeCoolMenuOrganizer_DisplayingText { get; }
    public static string DescriptionAttributeChartEvent_SelectionRangeChanged { get; }
    public static string DescriptionAttributeCoolMenuItemInfo_AcceleratorRectangle { get; }
    public static string DescriptionAttributeDataPointCollection_DataPointCollection { get; }
    public static string DescriptionAttributeDundasNumericEditor_MinValue { get; }
    public static string DescriptionAttributeTitleCollection_TitleCollection { get; }
    public static string DescriptionAttributeHorizontalLineAnnotation_HorizontalLineAnnotation { get; }
    public static string DescriptionAttributeCoolBarTextBoxControl_TextBox { get; }
    public static string DescriptionAttributeChartToolBar_BorderSkinStyle { get; }
    public static string DescriptionAttributeLegendCellColumn_HeaderColor { get; }
    public static string DescriptionAttributeLegendCell_LegendCell { get; }
    public static string DescriptionAttributeDataPoint_ToolTip { get; }
    public static string DescriptionAttributeChart_DataSetName { get; }
    public static string DescriptionAttributeChart_DynamicWidth { get; }
    public static string DescriptionAttributeChart_DynamicHeight { get; }
    public static string DescriptionAttributeBackImagePosition { get; }
    public static string DescriptionAttributeBackImageSource { get; }
    public static string DescriptionAttributeBackImageMIMEType { get; }
    public static string DescriptionAttributeBackImageValue { get; }
    public static string CategoryAttributeStateManagement { get; }
    public static string CategoryAttributeCellColumns { get; }
    public static string CategoryAttributeAxis { get; }
    public static string CategoryAttributeUserInterface { get; }
    public static string CategoryAttributeEditing { get; }
    public static string CategoryAttributeSize { get; }
    public static string CategoryAttributePosition { get; }
    public static string CategoryAttributeViewState { get; }
    public static string CategoryAttributeInterval { get; }
    public static string CategoryAttributeAppearance { get; }
    public static string CategoryAttributeOlap { get; }
    public static string CategoryAttributeOlapToolbar { get; }
    public static string CategoryAttributeDocking { get; }
    public static string CategoryAttributeDataSource { get; }
    public static string CategoryAttributeAxisView { get; }
    public static string CategoryAttributeStartColors { get; }
    public static string CategoryAttributeLayout { get; }
    public static string CategoryAttribute3D { get; }
    public static string CategoryAttributeTickMarks { get; }
    public static string CategoryAttributeData { get; }
    public static string CategoryAttributeTitle { get; }
    public static string CategoryAttributeToolTips { get; }
    public static string CategoryAttributeLabels { get; }
    public static string CategoryAttributeGridTickMarks { get; }
    public static string CategoryAttributeLabelAppearance { get; }
    public static string CategoryAttributeHeader { get; }
    public static string CategoryAttributeChartArea { get; }
    public static string CategoryAttributeAxes { get; }
    public static string CategoryAttributeFinancialMarkers { get; }
    public static string CategoryAttributeImage { get; }
    public static string CategoryAttributeEmptyPoints { get; }
    public static string CategoryAttributeCommand { get; }
    public static string CategoryAttributeAlignment { get; }
    public static string CategoryAttributeCallbacks { get; }
    public static string CategoryAttributeAnnotation { get; }
    public static string CategoryAttributeMarker { get; }
    public static string CategoryAttributeChart { get; }
    public static string CategoryAttributeLocation { get; }
    public static string CategoryAttributeToolTip { get; }
    public static string CategoryAttributeMap { get; }
    public static string CategoryAttributeMapArea { get; }
    public static string CategoryAttributeLabel { get; }
    public static string CategoryAttributeShape { get; }
    public static string CategoryAttributeMisc { get; }
    public static string CategoryAttributeSerializer { get; }
    public static string CategoryAttributeSubAxes { get; }
    public static string CategoryAttributeSeriesItems { get; }
    public static string CategoryAttributeDataView { get; }
    public static string CategoryAttributeCharttitle { get; }
    public static string CategoryAttributeLegend { get; }
    public static string CategoryAttributeAnimation { get; }
    public static string CategoryAttributeAction { get; }
    public static string CategoryAttributeScale { get; }
    public static string CategoryAttributeAnnotations { get; }
    public static string CategoryAttributeAnchor { get; }
    public static string CategoryAttributeBehavior { get; }
    public static string CategoryAttributeCursor { get; }
    public static string CategoryAttributeAnchorAxes { get; }
    public static string AccessibilityChartControlName { get; }
    public static string FormatErrorString { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ExceptionElementPositionConverter();
    public static string get_ExceptionInvalidServiceContainer();
    public static string get_ExceptionImageLoaderInvalidServiceContainer();
    public static string get_ExceptionImageMapAddedHasWrongType();
    public static string get_ExceptionImageMapInsertedHasWrongType();
    public static string get_ExceptionImageMapCircleShapeInvalid();
    public static string get_ExceptionImageMapRectangleShapeInvalid();
    public static string get_ExceptionImageMapPolygonShapeInvalid();
    public static string get_ExceptionAnnotationNameIsEmpty();
    public static string get_ExceptionAnnotationTextDrawingStyleUnknown();
    public static string get_ExceptionAnnotationPathAddLineAsSegmentsInvalid();
    public static string get_ExceptionAnnotationLineWidthIsNegative();
    public static string get_ExceptionAnnotationAnchorOffsetInvalid();
    public static string get_ExceptionAnnotationGroupedAnchorDataPointMustBeEmpty();
    public static string get_ExceptionAnnotationGroupedUnableToStartPlacement();
    public static string get_ExceptionAnnotationNotInCollection();
    public static string get_ExceptionAnnotationGroupedAxisMustBeEmpty();
    public static string get_ExceptionAnnotationArrowSizeIsZero();
    public static string get_ExceptionAnnotationArrowSizeMustBeLessThen100();
    public static string get_ExceptionAnnotationArrowStyleUnknown();
    public static string get_ExceptionInvalidIndexerArgumentType();
    public static string get_ExceptionTitleNameIsEmpty();
    public static string get_ExceptionTitleTextDrawingStyleUnknown();
    public static string get_ExceptionDataSeriesObjectRequired();
    public static string get_ExceptionDataSeriesNameIsEmpty();
    public static string get_ExceptionDataSeriesYValuesPerPointIsZero();
    public static string get_ExceptionDataSeriesYValueNumberInvalid();
    public static string get_ExceptionSeriesNameIsEmpty();
    public static string get_ExceptionEditorChartTypeRegistryServiceInaccessible();
    public static string get_ExceptionEditorMultipleSeriesEditiingUnsupported();
    public static string get_ExceptionEditorContectInstantsIsNotChartObject();
    public static string get_ExceptionEditorUITypeEditorInapplicable();
    public static string get_ExceptionEditorUITypeEditorInt32ApplicableOnly();
    public static string get_ExceptionObjectSelectorAlreadyRegistred();
    public static string get_ExceptionRectangleConverterStringFormatInvalid();
    public static string get_ExceptionChartAreaObjectRequired();
    public static string get_ExceptionChartAreaInsertedHasWrongType();
    public static string get_ExceptionChartAreaAlreadyExistsShort();
    public static string get_ExceptionChartAreaNameIsEmpty();
    public static string get_ExceptionChartArea3DPerspectiveInvalid();
    public static string get_ExceptionChartArea3DXAxisRotationInvalid();
    public static string get_ExceptionChartArea3DYAxisRotationInvalid();
    public static string get_ExceptionChartArea3DWallWidthInvalid();
    public static string get_ExceptionChartArea3DPointsDepthInvalid();
    public static string get_ExceptionChartArea3DPointsGapInvalid();
    public static string get_ExceptionCursorIntervalOffsetIsNegative();
    public static string get_ExceptionCursorLineWidthIsNegative();
    public static string get_ExceptionGraphicsMarkerStyleUnknown();
    public static string get_ExceptionGraphics3DMarkerStyleUnknown();
    public static string get_ExceptionGraphics3DCoordinatesInvalid();
    public static string get_ExceptionAxisLabelsAutoFitMinFontSizeValueInvalid();
    public static string get_ExceptionAxisLabelRowIndexIsNegative();
    public static string get_ExceptionAxisLabelRowIndexMustBe1Or2();
    public static string get_ExceptionAxisLabelIndexIsNegative();
    public static string get_ExceptionAxisLabelFontAngleInvalid();
    public static string get_ExceptionCustomLabelAddedHasWrongType();
    public static string get_ExceptionCustomLabelInsertedHasWrongType();
    public static string get_ExceptionSmartLabelsDirectionUndefined();
    public static string get_ExceptionSmartLabelsMinMovingDistanceIsNegative();
    public static string get_ExceptionSmartLabelsMaxMovingDistanceIsNegative();
    public static string get_ExceptionStripLineAddedHasWrongType();
    public static string get_ExceptionStripLineWidthIsNegative();
    public static string get_ExceptionStripLineTitleAngleInvalid();
    public static string get_ExceptionAxisWidthIsNegative();
    public static string get_ExceptionAxisDynamicIntervalCalculationFailed();
    public static string get_ExceptionAxisIntervalDecreasingFailed();
    public static string get_ExceptionAxisIntervalIncreasingFailed();
    public static string get_ExceptionAxisLabelsAutoFitMaxFontSizeInvalid();
    public static string get_ExceptionAxisMinimumMaximumInvalid();
    public static string get_ExceptionAxisStackedChartsDataPointsNumberMismatch();
    public static string get_ExceptionAxisStackedChartCrossingAxisUnsupported();
    public static string get_ExceptionAxisSeriesNotAligned();
    public static string get_ExceptionAxisScaleLogarithmBaseInvalid();
    public static string get_ExceptionAxisScalePositionInvalid();
    public static string get_ExceptionAxisScalePositionToValueCallFailed();
    public static string get_ExceptionAxisScaleIntervalIsZero();
    public static string get_ExceptionAxisScaleMinimumMaximumInvalid();
    public static string get_ExceptionAxisScaleIntervalIsLessThen1Year();
    public static string get_ExceptionAxisScaleAutoIntervalInvalid();
    public static string get_ExceptionAxisScaleMinimumValueIsGreaterThenMaximumDataPoint();
    public static string get_ExceptionAxisScaleLogarithmicNegativeValues();
    public static string get_ExceptionChartAreaAxisScaleLogarithmicUnsuitable();
    public static string get_ExceptionChartAreaChartTypesCanNotCombine();
    public static string get_ExceptionChartAreaSeriesNotFound();
    public static string get_ExceptionAxisScaleBreaksNumberInvalid();
    public static string get_ExceptionAxisScaleBreaksCollapsibleSpaceInvalid();
    public static string get_ExceptionAxisScaleBreaksSpacingInvalid();
    public static string get_ExceptionAxisScaleBreaksLineWidthInvalid();
    public static string get_ExceptionAxisScaleSegmentsPositionInvalid();
    public static string get_ExceptionAxisScaleSegmentsSizeInvalid();
    public static string get_ExceptionAxisScaleSegmentsSpacingInvalid();
    public static string get_ExceptionTickMarksIntervalIsZero();
    public static string get_ExceptionTickMarksIntervalIsNegative();
    public static string get_ExceptionScrollBarSizeInvalid();
    public static string get_ExceptionScrollBarZoomResetsNumberInvalid();
    public static string get_ExceptionFinancialMarkerObjectRequired();
    public static string get_ExceptionMarkerStepNegativeValue();
    public static string get_ExceptionTextThresholdIsNegative();
    public static string get_ExceptionNamedImageObjectRequired();
    public static string get_ExceptionNamedImageInsertedHasWrongType();
    public static string get_ExceptionLegendNameIsEmpty();
    public static string get_ExceptionLegendAddedHasWrongType();
    public static string get_ExceptionLegendInsertedHasWrongType();
    public static string get_ExceptionLegendBackGradientEndColorIsTransparent();
    public static string get_ExceptionLegendAutoFitMinFontSizeInvalid();
    public static string get_ExceptionLegendMaximumAutoSizeInvalid();
    public static string get_ExceptionLegendColumnSpacingInvalid();
    public static string get_ExceptionLegendMarkerBorderWidthIsNegative();
    public static string get_ExceptionLegendItemAddedHasWrongType();
    public static string get_ExceptionLegendItemInsertedHasWrongType();
    public static string get_ExceptionLegendColumnIsEmpty();
    public static string get_ExceptionSeriesSymbolSizeIsNegative();
    public static string get_ExceptionMinimumCellWidthIsWrong();
    public static string get_ExceptionMaximumCellWidthIsWrong();
    public static string get_ExceptionLegendCellNameIsEmpty();
    public static string get_ExceptionLegendCellImageSizeIsNegative();
    public static string get_ExceptionLegendCellSeriesSymbolSizeIsNegative();
    public static string get_ExceptionLegendCellSpanIsLessThenOne();
    public static string get_ExceptionMarginTopIsNegative();
    public static string get_ExceptionMarginBottomIsNegative();
    public static string get_ExceptionMarginLeftIsNegative();
    public static string get_ExceptionMarginRightIsNegative();
    public static string get_ExceptionAnimationFramesPerSecondIsNegative();
    public static string get_ExceptionAnimationFramesPerSecondIsOver32();
    public static string get_ExceptionAnimationDurationIsnegative();
    public static string get_ExceptionAnimationStartEndNegative();
    public static string get_ExceptionAnimationStartXRangeInvalid();
    public static string get_ExceptionAnimationStartYRangeInvalid();
    public static string get_ExceptionAnimationElementUnknown();
    public static string get_ExceptionAnimationUnsupported();
    public static string get_ExceptionAnimationStartGreaterThenEnd();
    public static string get_ExceptionAnimationElementStringInvalid();
    public static string get_ExceptionAnimationStartedWithoutBeingStopped();
    public static string get_ExceptionAnimationStoppedWithoutBeingStarted();
    public static string get_ExceptionAnimationManagerMutuallyExclusive();
    public static string get_ExceptionAnimationSvgRepeatDelayIsNotZiro();
    public static string get_ExceptionAnimationSvgRepeatAnimationUnsupported();
    public static string get_ExceptionAnimationRepeatDelayIsNegative();
    public static string get_ExceptionAnimationConstructorInvalid();
    public static string get_ExceptionAnimationObjectAddedIsNotAnimationBase();
    public static string get_ExceptionAnimationObjectInsertedIsNotAnimationBase();
    public static string get_ExceptionAnimationElementInsertedIsNotAnimationBase();
    public static string get_ExceptionAnimationSvgColorBrushNotExist();
    public static string get_ExceptionAnimationSvgColorPenNotExist();
    public static string get_ExceptionAnimationSvgDataPointInitializationInvalid();
    public static string get_ExceptionSvgPictureSizeInvalid();
    public static string get_ExceptionSvgTextWriterInvalid();
    public static string get_ExceptionSvgOutputWriterIsNull();
    public static string get_ExceptionSvgGradientUndefined();
    public static string get_ExceptionSvgWrapStringIsNull();
    public static string get_ExceptionElementPositionArgumentOutOfRange();
    public static string get_ExceptionRepeatDelayIsNegative();
    public static string get_ExceptionChartHeightIsNotInPixels();
    public static string get_ExceptionChartWidthIsNotInPixels();
    public static string get_ExceptionChartWidthLessThen5Pixels();
    public static string get_ExceptionChartHeightLessThen5Pixels();
    public static string get_ExceptionChartBorderIsNegative();
    public static string get_ExceptionChartCompressionInvalid();
    public static string get_ExceptionChartDataPointsAlignmentFaild();
    public static string get_ExceptionChartDataPointsAlignmentFaildAxisLabelsInvalid();
    public static string get_ExceptionChartDataPointsInsertionFailedYValuesEmpty();
    public static string get_ExceptionChartTypeHasNoInterface();
    public static string get_ExceptionBorderTypeHasNoInterface();
    public static string get_ExceptionChartSerializerContentFlagUnsupported();
    public static string get_ExceptionChartSerializerIsAlreadyRegistred();
    public static string get_ExceptionChartSerializerPropertyIdUnknown();
    public static string get_ExceptionChartSerializerContentStringFormatInvalid();
    public static string get_ExceptionChartSerializerClassNameUndefined();
    public static string get_ExceptionChartSerializerPropertyNameUndefined();
    public static string get_ExceptionChartSerializerWriterObjectInvalid();
    public static string get_ExceptionChartSerializerReaderObjectInvalid();
    public static string get_ExceptionChartSerializerDestinationObjectInvalid();
    public static string get_ExceptionChartSerializerSourceObjectInvalid();
    public static string get_ExceptionChartSerializerBinaryIgnoreUnknownAttributesUnsupported();
    public static string get_ExceptionChartSerializerBinaryFromatInvalid();
    public static string get_ExceptionChartSerializerPropertyNotFound();
    public static string get_ExceptionDataManipulatorPointCountIsZero();
    public static string get_ExceptionDataManipulatorIndexUndefined();
    public static string get_ExceptionDataManipulatorIndexFormatInvalid();
    public static string get_ExceptionDataManipulatorGroupedSeriesNotSorted();
    public static string get_ExceptionDataManipulatorGroupingFormulaUndefined();
    public static string get_ExceptionDataManipulatorGroupingFormulaUnsupported();
    public static string get_ExceptionDataManipulatorGroupingInputSeriesUndefined();
    public static string get_ExceptionDataManipulatorGroupingInputOutputSeriesNumberMismatch();
    public static string get_ExceptionDataBindYValuesToString();
    public static string get_ExceptionDataBindXValuesToString();
    public static string get_ExceptionDataBindSeriesToString();
    public static string get_ExceptionDataBindSeriesGroupByParameterIsEmpty();
    public static string get_ExceptionChartBackGradientEndColorIsTransparent();
    public static string get_ExceptionImageUrlIsEmpty();
    public static string get_ExceptionImageUrlInvalidFormatters();
    public static string get_ExceptionImageUrlInvalidFormat();
    public static string get_ExceptionImageUrlMissedFormatter();
    public static string get_ExceptionDataManager100StackedSeriesPointsNumeberMismatch();
    public static string get_ExceptionFormulaModuleHasNoInterface();
    public static string get_ExceptionDataPointConverterInvalidSorting();
    public static string get_ExceptionDataPointConverterWrongTypes();
    public static string get_ExceptionDataPointInsertionXValuesQtyIsLessYValues();
    public static string get_ExceptionDataPointValueNameInvalid();
    public static string get_ExceptionDataPointValueNameYIndexOutOfRange();
    public static string get_ExceptionDataPointValueNameYIndexIsNotPositive();
    public static string get_ExceptionDataPointInsertionNoDataSource();
    public static string get_ExceptionDataPointBindingYValueNotSpecified();
    public static string get_ExceptionDataPointInsertionYValueNotSpecified();
    public static string get_ExceptionAttributeUnableToDelete();
    public static string get_ExceptionAttributeNameIsEmpty();
    public static string get_ExceptionAttributeInvalidFormat();
    public static string get_ExceptionAttributeDrawSideBySideInvalid();
    public static string get_ExceptionLabelBorderIsNotPositive();
    public static string get_ExceptionBorderWidthIsNotPositive();
    public static string get_ExceptionAngleRangeInvalid();
    public static string get_ExceptionDataPointYValueStringFormat();
    public static string get_ExceptionParameterFormatInvalid();
    public static string get_ExceptionStatisticalAnalysesInvalidAlphaValue();
    public static string get_ExceptionStatisticalAnalysesInvalidProbabilityValue();
    public static string get_ExceptionStatisticalAnalysesInvalidDegreeOfFreedom();
    public static string get_ExceptionStatisticalAnalysesNegativeMeanDifference();
    public static string get_ExceptionStatisticalAnalysesInvalidSeriesNumber();
    public static string get_ExceptionStatisticalAnalysesInvalidMeanDifference();
    public static string get_ExceptionStatisticalAnalysesNotEnoughDataPoints();
    public static string get_ExceptionStatisticalAnalysesInvalidVariance();
    public static string get_ExceptionStatisticalAnalysesInvalidTValue();
    public static string get_ExceptionStatisticalAnalysesGammaBetaNegativeParameters();
    public static string get_ExceptionStatisticalAnalysesInvalidZValue();
    public static string get_ExceptionStatisticalAnalysesZeroVariance();
    public static string get_ExceptionStatisticalAnalysesNotEnoughInputSeries();
    public static string get_ExceptionStatisticalAnalysesInvalidVariableRanges();
    public static string get_ExceptionStatisticalAnalysesStudentsInvalidTValue();
    public static string get_ExceptionStatisticalAnalysesStudentsNegativeFreedomDegree();
    public static string get_ExceptionStatisticalAnalysesNormalInvalidProbabilityValue();
    public static string get_ExceptionStatisticalAnalysesInvalidSampleVariance();
    public static string get_ExceptionStatisticalAnalysesInvalidTailedParameter();
    public static string get_ExceptionStatisticalAnalysesInvalidInputParameter();
    public static string get_ExceptionStatisticalAnalysesNoneIntegerFreedomDegree();
    public static string get_ExceptionStatisticalAnalysesIncompleteBetaFunction();
    public static string get_ExceptionStatisticalAnalysesInvalidAnovaTest();
    public static string get_ExceptionStatisticalAnalysesCovariance();
    public static string get_ExceptionStatisticalAnalysesInvalidMedianConditions();
    public static string get_ExceptionStatisticalAnalysesInvalidMeanConditions();
    public static string get_ExceptionStatisticalAnalysesInvalidVarianceConditions();
    public static string get_ExceptionPeriodParameterIsNegative();
    public static string get_ExceptionPeriodAverageParameterIsNegative();
    public static string get_ExceptionPeriodShortParameterIsNegative();
    public static string get_ExceptionPeriodLongParameterIsNegative();
    public static string get_ExceptionIndicatorsDeviationMissing();
    public static string get_ExceptionIndicatorsLongPeriodLessThenShortPeriod();
    public static string get_ExceptionOscillatorObjectInvalidPeriod();
    public static string get_ExceptionOscillatorNegativeSignalPeriod();
    public static string get_ExceptionOscillatorNegativePeriodParameter();
    public static string get_ExceptionVolumeIndicatorStartValueMissing();
    public static string get_ExceptionPriceIndicatorsShiftParameterMissing();
    public static string get_ExceptionPriceIndicatorsSameYNumber();
    public static string get_ExceptionPriceIndicatorsSameXYNumber();
    public static string get_ExceptionPriceIndicatorsPeriodMissing();
    public static string get_ExceptionPriceIndicatorsNotEnoughPoints();
    public static string get_ExceptionPriceIndicatorsFormulaRequiresOneArray();
    public static string get_ExceptionPriceIndicatorsFormulaRequiresTwoArrays();
    public static string get_ExceptionPriceIndicatorsFormulaRequiresThreeArrays();
    public static string get_ExceptionPriceIndicatorsFormulaRequiresFourArrays();
    public static string get_ExceptionObjectReferenceIsNull();
    public static string get_ExceptionListIndexIsOutOfRange();
    public static string get_ExceptionThreeLineBreakCanNotCobine();
    public static string get_ExceptionThreeLineBreakNullReference();
    public static string get_ExceptionThreeLineBreakUsedYValueOutOfRange();
    public static string get_ExceptionThreeLineBreakNumberOfLinesInBreakFormatInvalid();
    public static string get_ExceptionThreeLineBreakUpBrickColorInvalid();
    public static string get_ExceptionThreeLineBreakUsedYValueInvalid();
    public static string get_ExceptionThreeLineBreakNumberOfLinesInBreakValueInvalid();
    public static string get_ExceptionRenkoCanNotCobine();
    public static string get_ExceptionRenkoNullReference();
    public static string get_ExceptionRenkoUsedYValueOutOfRange();
    public static string get_ExceptionRenkoBoxSizeFormatInvalid();
    public static string get_ExceptionRenkoUpBrickColorInvalid();
    public static string get_ExceptionRenkoUsedYValueFormatInvalid();
    public static string get_ExceptionPieIntervalsInvalid();
    public static string get_ExceptionPieUnassignedFrontBackPoints();
    public static string get_ExceptionPiePointOrderInvalid();
    public static string get_ExceptionPieHorizontalLineSizeInvalid();
    public static string get_ExceptionPieRadialLineSizeInvalid();
    public static string get_ExceptionPie3DLabelLineSizeInvalid();
    public static string get_ExceptionPieRadiusInvalid();
    public static string get_ExceptionPieMinimumRelativePieSizeInvalid();
    public static string get_ExceptionPieOrderOperationInvalid();
    public static string get_ExceptionPieIntervalsOverlapping();
    public static string get_ExceptionDoughnutNullReference();
    public static string get_ExceptionDoughnutThresholdInvalid();
    public static string get_ExceptionDoughnutCollectedThresholdUsePercentInvalid();
    public static string get_ExceptionDoughnutCollectedColorInvalidFormat();
    public static string get_ExceptionDoughnutCollectedThresholdInvalidFormat();
    public static string get_ExceptionDoughnutCollectedThresholdInvalidRange();
    public static string get_ExceptionPointAndFigureUpBrickColorInvalidFormat();
    public static string get_ExceptionPointAndFigureCanNotCombine();
    public static string get_ExceptionPointAndFigureNullReference();
    public static string get_ExceptionPointAndFigureUsedYValueHighOutOfRange();
    public static string get_ExceptionPointAndFigureUsedYValueLowOutOfrange();
    public static string get_ExceptionPointAndFigureReversalAmountInvalidFormat();
    public static string get_ExceptionPointAndFigureUsedYValueHighInvalidFormat();
    public static string get_ExceptionPointAndFigureUsedYValueLowInvalidFormat();
    public static string get_ExceptionFastPointMarkerStyleUnknown();
    public static string get_ExceptionFunnelAngleRangeInvalid();
    public static string get_ExceptionFunnelCanNotCombine();
    public static string get_ExceptionFunnelNeckHeightInvalid();
    public static string get_ExceptionFunnelNeckWidthInvalid();
    public static string get_ExceptionKagiNullReference();
    public static string get_ExceptionKagiCanNotCombine();
    public static string get_ExceptionStackedAreaChartSeriesDataPointsNumberMismatch();
    public static string get_Exception3DPieLabelsIndexInvalid();
    public static string get_Exception3DChartPointsXValuesUnsorted();
    public static string get_ExceptionFunnelMinimumPointHeightAttributeInvalid();
    public static string get_ExceptionErrorBarParameterUndefined();
    public static string get_Exception3DSplineY1ValueIsLessThenY2();
    public static string get_ExceptionCustomAttributeDefaultValueTypeInvalid();
    public static string get_ExceptionFormulaDataItemsNumberMismatch();
    public static string get_ExceptionFormulaDataItemsNumberMismatch2();
    public static string get_ExceptionFormulaDataOutputSeriesNumberYValuesIncorrect();
    public static string get_ExceptionFormulaDataZeroIndexedXValuesUnsupported();
    public static string get_ExceptionFormulaYIndexInvalid();
    public static string get_ExceptionFormulaXValuesNotAligned();
    public static string get_ExceptionFormulaInputOutputSeriesMismatch();
    public static string get_ExceptionFinancialMarkersDataPointsHaveSameXValues();
    public static string get_ExceptionFinancialMarkersFormulaNotFound();
    public static string get_ExceptionFinancialMarkersSeriesPointYValueIndexInvalid();
    public static string get_ExceptionForecastingDegreeInvalid();
    public static string get_ExceptionForecastingExponentialRegressionHasZeroYValues();
    public static string get_ExceptionForecastingPowerRegressionHasZeroYValues();
    public static string get_ExceptionCommandIndexISNegative();
    public static string get_ExceptionCommandNoOutputData();
    public static string get_ExceptionContextMenuAttributesOutOfChart();
    public static string get_ExceptionBorderWidthIsNegative();
    public static string get_ExceptionBorderWidthIsZero();
    public static string get_ExceptionLegendBorderWidthIsNegative();
    public static string get_ExceptionTitleBorderWidthIsNegative();
    public static string get_ExceptionMatrix3DNotinitialized();
    public static string get_ExceptionPaletteIsEmpty();
    public static string get_ExceptionChartCallBackIsAlreadyRegistred();
    public static string get_ExceptionChartCallBackClickCoordinatesInvalid();
    public static string get_ExceptionChartCallBackHandlerIsAlreadyRegistred();
    public static string get_ExceptionChartOrCallBackHandlerAreNull();
    public static string get_ExceptionHttpHandlerCanNotSave();
    public static string get_ExceptionHttpHandlerValueInvalid();
    public static string get_ExceptionHttpHandlerTimeoutParameterInvalid();
    public static string get_ExceptionHttpHandlerUrlMissing();
    public static string get_ExceptionHttpHandlerUrlInvalid();
    public static string get_ExceptionUtilitiesCanNotConvertNullToZoomIntervalData();
    public static string get_ExceptionLicenceProductKeyInvalid();
    public static string get_ExceptionCoolMenuImageIndexInvalid();
    public static string get_ExceptionCoolMenuItemIsNotAttached();
    public static string get_ExceptionCoolBarNotFound();
    public static string get_DescriptionCustomAttributeEmptyPointValue();
    public static string get_DescriptionCustomAttributePieDonutExploded();
    public static string get_DescriptionCustomAttributeProportionalSymbols();
    public static string get_DescriptionCustomAttributeDrawSideBySide();
    public static string get_DescriptionCustomAttributeShowMarkerLines();
    public static string get_DescriptionCustomAttributeShowOpenClose();
    public static string get_DescriptionCustomAttributeBoxPlotShowAverage();
    public static string get_DescriptionCustomAttributeBubbleUseSizeForLabel();
    public static string get_DescriptionCustomAttributeBoxPlotShowMedian();
    public static string get_DescriptionCustomAttributeBoxPlotShowUnusualValues();
    public static string get_DescriptionCustomAttributeBoxPlotSeries();
    public static string get_DescriptionCustomAttributePieStartAngle();
    public static string get_DescriptionCustomAttributeLabelStyle();
    public static string get_DescriptionCustomAttributeFunnelLabelStyle();
    public static string get_DescriptionCustomAttributeFunnelStyle();
    public static string get_DescriptionCustomAttributePolarDrawingStyle();
    public static string get_DescriptionCustomAttributePyramidLabelStyle();
    public static string get_DescriptionCustomAttributeRadarDrawingStyle();
    public static string get_DescriptionCustomAttributeBoxSize();
    public static string get_DescriptionCustomAttributeCollectedColor();
    public static string get_DescriptionCustomAttributeCollectedLabel();
    public static string get_DescriptionCustomAttributeCollectedLegendText();
    public static string get_DescriptionCustomAttributeCollectedLegendDefaultText();
    public static string get_DescriptionCustomAttributeCollectedLabelDefaultText();
    public static string get_DescriptionCustomAttributeCollectedToolTip();
    public static string get_DescriptionCustomAttributePyramidValueType();
    public static string get_DescriptionCustomAttribute_3DLabelLineSize();
    public static string get_DescriptionCustomAttributeFunnel3DRotationAngle();
    public static string get_DescriptionCustomAttributePyramid3DRotationAngle();
    public static string get_DescriptionCustomAttributePixelPointDepth();
    public static string get_DescriptionCustomAttributePixelPointGapDepth();
    public static string get_DescriptionCustomAttributeErrorBarCenterMarkerStyle();
    public static string get_DescriptionCustomAttributePointFigureBoxSize();
    public static string get_DescriptionCustomAttributeBubbleScaleMax();
    public static string get_DescriptionCustomAttributeBubbleScaleMin();
    public static string get_DescriptionCustomAttributeCollectedStyle();
    public static string get_DescriptionCustomAttributeCollectedThreshold();
    public static string get_DescriptionCustomAttributePieLineColor();
    public static string get_DescriptionCustomAttributeCalloutLineColor();
    public static string get_DescriptionCustomAttributePieLabelStyle();
    public static string get_DescriptionCustomAttributeFunnel3DDrawingStyle();
    public static string get_DescriptionCustomAttributePyramid3DDrawingStyle();
    public static string get_DescriptionCustomAttributeDrawingStyle();
    public static string get_DescriptionCustomAttributePieDrawingStyle();
    public static string get_DescriptionCustomAttributeCollectedSliceExploded();
    public static string get_DescriptionCustomAttributeCollectedThresholdUsePercent();
    public static string get_DescriptionCustomAttributeFunnelNeckHeight();
    public static string get_DescriptionCustomAttributeFunnelNeckWidth();
    public static string get_DescriptionCustomAttributePyramidPointGap();
    public static string get_DescriptionCustomAttributeFunnelPointGap();
    public static string get_DescriptionCustomAttributeLabelsHorizontalLineSize();
    public static string get_DescriptionCustomAttributeDoughnutRadius();
    public static string get_DescriptionCustomAttributePolarCircularLabelsStyle();
    public static string get_DescriptionCustomAttributeRadarCircularLabelsStyle();
    public static string get_DescriptionCustomAttributeOpenCloseStyle();
    public static string get_DescriptionCustomAttributeBubbleMaxSize();
    public static string get_DescriptionCustomAttributeMaxPixelPointWidth();
    public static string get_DescriptionCustomAttributePyramidMinPointHeight();
    public static string get_DescriptionCustomAttributeFunnelMinPointHeight();
    public static string get_DescriptionCustomAttributeMinimumRelativePieSize();
    public static string get_DescriptionCustomAttributeMinPixelPointWidth();
    public static string get_DescriptionCustomAttributeErrorBarSeries();
    public static string get_DescriptionCustomAttributeNumberOfLinesInBreak();
    public static string get_DescriptionCustomAttributePyramidOutsideLabelPlacement();
    public static string get_DescriptionCustomAttributeFunnelOutsideLabelPlacement();
    public static string get_DescriptionCustomAttributeBoxPlotPercentile();
    public static string get_DescriptionCustomAttributeBoxPlotWhiskerPercentile();
    public static string get_DescriptionCustomAttributeBarLabelStyle();
    public static string get_DescriptionCustomAttributeLabelsRadialLineSize();
    public static string get_DescriptionCustomAttributePointWidth();
    public static string get_DescriptionCustomAttributeReversalAmount();
    public static string get_DescriptionCustomAttributePolarAreaDrawingStyle();
    public static string get_DescriptionCustomAttributeRadarAreaDrawingStyle();
    public static string get_DescriptionCustomAttributeStackedGroupName();
    public static string get_DescriptionCustomAttributeLineTension();
    public static string get_DescriptionCustomAttributeCandlePriceUpColor();
    public static string get_DescriptionCustomAttributeBarsPriceUpColor();
    public static string get_DescriptionCustomAttributePriceDownColor();
    public static string get_DescriptionCustomAttributeUsedYValueHigh();
    public static string get_DescriptionCustomAttributeUsedYValueLow();
    public static string get_DescriptionCustomAttributeRenkoUsedYValue();
    public static string get_DescriptionCustomAttributeThreeLineBreakUsedYValue();
    public static string get_DescriptionCustomAttributePyramidInsideLabelAlignment();
    public static string get_DescriptionCustomAttributeFunnelInsideLabelAlignment();
    public static string get_DescriptionCustomAttributeErrorBarStyle();
    public static string get_DescriptionCustomAttributePixelPointWidth();
    public static string get_DescriptionCustomAttributeLabelValueType();
    public static string get_DescriptionCustomAttributeUsedYValue();
    public static string get_DescriptionCustomAttributeKagiReversalAmount();
    public static string get_DescriptionCustomAttributeErrorBarType();
    public static string get_DescriptionCustomAttributeSkipPaletteColorForEmptyPoint();
    public static string get_DescriptionCustomAttributeColumnChartShowColumnAs();
    public static string get_DescriptionCustomAttributeHistogramSegmentIntervalNumber();
    public static string get_DescriptionCustomAttributeHistogramSegmentIntervalWidth();
    public static string get_DescriptionCustomAttributeHistogramShowPercentOnSecondaryYAxis();
    public static string get_DescriptionCustomAttributeShowPieAsCollected();
    public static string get_DescriptionCustomAttributeShowCollectedLegend();
    public static string get_DescriptionCustomAttributeShowCollectedPointLabels();
    public static string get_DescriptionCustomAttributeCollectedPercentage();
    public static string get_DescriptionCustomAttributeCollectedSliceColor();
    public static string get_DescriptionCustomAttributeCollectedSliceLabel();
    public static string get_DescriptionKeyWordAverageYValues();
    public static string get_DescriptionKeyWordAxisLabelDataPoint();
    public static string get_DescriptionKeyWordIndexDataPoint();
    public static string get_DescriptionKeyWordLabelDataPoint();
    public static string get_DescriptionKeyWordYValuePercentTotal();
    public static string get_DescriptionKeyWordIndexDataPoint2();
    public static string get_DescriptionKeyWordLegendText();
    public static string get_DescriptionKeyWordMaximumYValues();
    public static string get_DescriptionKeyWordMinimumYValues();
    public static string get_DescriptionKeyWordSeriesName();
    public static string get_DescriptionKeyWordTotalYValues();
    public static string get_DescriptionKeyWordXValue();
    public static string get_DescriptionKeyWordFirstPointYValue();
    public static string get_DescriptionKeyWordLastPointYValue();
    public static string get_DescriptionKeyWordYValue();
    public static string get_DescriptionKeyWordNameIndexDataPoint();
    public static string get_DescriptionKeyWordNameXValue();
    public static string get_DescriptionKeyWordNameYValue();
    public static string get_DescriptionKeyWordNameTotalYValues();
    public static string get_DescriptionKeyWordNameYValuePercentTotal();
    public static string get_DescriptionKeyWordNameIndexTheDataPoint();
    public static string get_DescriptionKeyWordNameLabelDataPoint();
    public static string get_DescriptionKeyWordNameAxisLabelDataPoint();
    public static string get_DescriptionKeyWordNameLegendText();
    public static string get_DescriptionKeyWordNameSeriesName();
    public static string get_DescriptionKeyWordNameAverageYValues();
    public static string get_DescriptionKeyWordNameMaximumYValues();
    public static string get_DescriptionKeyWordNameMinimumYValues();
    public static string get_DescriptionKeyWordNameLastPointYValue();
    public static string get_DescriptionKeyWordNameFirstPointYValue();
    public static string get_DescriptionDateFormatSmallD();
    public static string get_DescriptionDateFormatCapitalD();
    public static string get_DescriptionDateFormatSmallT();
    public static string get_DescriptionDateFormatCapitalT();
    public static string get_DescriptionDateFormatSmallF();
    public static string get_DescriptionDateFormatCapitalF();
    public static string get_DescriptionDateFormatSmallG();
    public static string get_DescriptionDateFormatCapitalG();
    public static string get_DescriptionDateFormatCapitalM();
    public static string get_DescriptionDateFormatCapitalR();
    public static string get_DescriptionDateFormatSmallS();
    public static string get_DescriptionDateFormatSmallU();
    public static string get_DescriptionDateFormatCapitalU();
    public static string get_DescriptionDateFormatCapitalY();
    public static string get_DescriptionNumberFormatC();
    public static string get_DescriptionNumberFormatD();
    public static string get_DescriptionNumberFormatE();
    public static string get_DescriptionNumberFormatF();
    public static string get_DescriptionNumberFormatG();
    public static string get_DescriptionNumberFormatN();
    public static string get_DescriptionNumberFormatP();
    public static string get_DescriptionNumberFormatTypeCurrency();
    public static string get_DescriptionNumberFormatTypeDecimal();
    public static string get_DescriptionNumberFormatTypeScientific();
    public static string get_DescriptionNumberFormatTypeFixedPoint();
    public static string get_DescriptionNumberFormatTypeGeneral();
    public static string get_DescriptionNumberFormatTypeNumber();
    public static string get_DescriptionNumberFormatTypePercent();
    public static string get_DescriptionTypeNone();
    public static string get_DescriptionTypeNotSet();
    public static string get_DescriptionTypeCustom();
    public static string get_DescriptionTypeCurrent();
    public static string get_DescriptionTypeEmpty();
    public static string get_DescriptionTypePoint();
    public static string get_ComboItemDateFormatShortDate();
    public static string get_ComboItemDateFormatLongDate();
    public static string get_ComboItemDateFormatShortTime();
    public static string get_ComboItemDateFormatLongTime();
    public static string get_ComboItemDateFormatFullDateTimeShortTime();
    public static string get_ComboItemDateFormatFullDateTimeLongTime();
    public static string get_ComboItemDateFormatGeneralDateTime();
    public static string get_ComboItemDateFormatGeneralDateTimeShortTime();
    public static string get_ComboItemDateFormatGeneralDateTimeLongTime();
    public static string get_ComboItemDateFormatMonthDay();
    public static string get_ComboItemDateFormatRFC1123();
    public static string get_ComboItemDateFormatSortableDateTimeISO8601();
    public static string get_ComboItemDateFormatUniversalSortableDateTime();
    public static string get_ComboItemDateFormatUniversalFullDateTime();
    public static string get_ComboItemDateFormatYearMonth();
    public static string get_LabelPrecisionSpecifier();
    public static string get_LabelFormatType();
    public static string get_LabelFormatString();
    public static string get_LabelKeyFormat();
    public static string get_LabelKeyCustomFormat();
    public static string get_LabelSample();
    public static string get_LabelTabNumeric();
    public static string get_LabelTabDateTime();
    public static string get_LabelCustom();
    public static string get_LabelCustomNumericDateTimeFormatString();
    public static string get_LabelCustomFormatTypeNumber();
    public static string get_LabelCustomFormatTypeDateTime();
    public static string get_LabelLabelFormat();
    public static string get_LabelStringWithKeywords();
    public static string get_LabelEditKeyword();
    public static string get_LabelInsertNewKeyword();
    public static string get_LabelStringKeywordsEditor();
    public static string get_LabelKeywordEditor();
    public static string get_LabelEditChartItem();
    public static string get_LabelDescription();
    public static string get_LabelFormatKeySample();
    public static string get_LabelKeyYValueIndex();
    public static string get_LabelKeyPrecision();
    public static string get_LabelKeyKeywords();
    public static string get_LabelValueFormatting();
    public static string get_LabelAnimatedElements();
    public static string get_LabelKeyAnimatedElements();
    public static string get_LabelKeyNoAnimatedElements();
    public static string get_LabelButtonOk();
    public static string get_LabelButtonOkWithKey();
    public static string get_LabelButtonApply();
    public static string get_LabelButtonCancel();
    public static string get_LabelButtonCancelWithKey();
    public static string get_DesciptionCustomLabelFormatCharacters();
    public static string get_DescriptionToolTipCustomFormatCharacters();
    public static string get_DesciptionCustomLabelFormatSomeCharacters();
    public static string get_DesciptionCustomLabelEditorTitle();
    public static string get_DesciptionCustomLabelFormatInvalid();
    public static string get_LabelStatisticalSumOfSquaresBetweenGroups();
    public static string get_LabelStatisticalSumOfSquaresWithinGroups();
    public static string get_LabelStatisticalSumOfSquaresTotal();
    public static string get_LabelStatisticalDegreesOfFreedomBetweenGroups();
    public static string get_LabelStatisticalDegreesOfFreedomWithinGroups();
    public static string get_LabelStatisticalDegreesOfFreedomTotal();
    public static string get_LabelStatisticalMeanSquareVarianceBetweenGroups();
    public static string get_LabelStatisticalMeanSquareVarianceWithinGroups();
    public static string get_LabelStatisticalFRatio();
    public static string get_LabelStatisticalFCrit();
    public static string get_LabelStatisticalCorrelation();
    public static string get_LabelStatisticalCovariance();
    public static string get_LabelStatisticalProbability();
    public static string get_LabelStatisticalAverage();
    public static string get_LabelStatisticalVariance();
    public static string get_LabelStatisticalMedian();
    public static string get_LabelStatisticalBetaFunction();
    public static string get_LabelStatisticalGammaFunction();
    public static string get_LabelStatisticalTheFirstGroupMean();
    public static string get_LabelStatisticalTheSecondGroupMean();
    public static string get_LabelStatisticalTheFirstGroupVariance();
    public static string get_LabelStatisticalTheSecondGroupVariance();
    public static string get_LabelStatisticalFValue();
    public static string get_LabelStatisticalFCriticalValueOneTail();
    public static string get_LabelStatisticalZValue();
    public static string get_LabelStatisticalZCriticalValueOneTail();
    public static string get_LabelStatisticalZCriticalValueTwoTail();
    public static string get_LabelStatisticalPZLessEqualSmallZOneTail();
    public static string get_LabelStatisticalPZLessEqualSmallZTwoTail();
    public static string get_LabelStatisticalPFLessEqualSmallFOneTail();
    public static string get_LabelStatisticalTValue();
    public static string get_LabelStatisticalDegreeOfFreedom();
    public static string get_LabelStatisticalPTLessEqualSmallTOneTail();
    public static string get_LabelStatisticalSmallTCrititcalOneTail();
    public static string get_LabelStatisticalPTLessEqualSmallTTwoTail();
    public static string get_LabelStatisticalSmallTCrititcalTwoTail();
    public static string get_TraceMessageBeginDrawingChartLegend();
    public static string get_TraceMessageEndDrawingChartLegend();
    public static string get_TraceMessageStartChartControlRenderingAsInteractiveImageTag();
    public static string get_TraceMessageStartChartControlRenderingAsImageTag();
    public static string get_TraceMessageStartChartControlRenderingAsImageMap();
    public static string get_TraceMessageStartChartControlRenderingAsInputTag();
    public static string get_TraceMessageStartChartControlRenderingAsBinaryStream();
    public static string get_TraceMessageEndChartControlRendering();
    public static string get_DesignerVerbWizard();
    public static string get_DesignerVerbLoadTemplate();
    public static string get_DesignerVerbCreateTemplate();
    public static string get_DesignerVerbReset();
    public static string get_MessagePrecisionInvalid();
    public static string get_MessageChangingChartAreaPositionProperty();
    public static string get_MessageChangingChartAreaPositionConfirmAutomatic();
    public static string get_MessageChangingChartAreaPositionConfirmCustom();
    public static string get_MessagePrecisionValidValue();
    public static string get_MessageChartException();
    public static string get_MessageSite();
    public static string get_MessageStackTrace();
    public static string get_MessageWizardTitle();
    public static string get_MessageChartTitle();
    public static string get_MessageChartSpecialEditionTitle();
    public static string get_MessageSvgConverterTitle();
    public static string get_MessageUnableToLocateWizartAssemblyFile();
    public static string get_MessageUnableToLocateWizartAssemblyFileConfirm();
    public static string get_MessageCommandIsNotSupported();
    public static string get_MessageObjectCannotBeDeleted();
    public static string get_MessageCannotDeleteLastChartArea();
    public static string get_MessageTitleConfirmation();
    public static string get_MessageTitleConfirm();
    public static string get_MessageTitleInformation();
    public static string get_MessageSerializerCanNotCreateCollection();
    public static string get_MethodTransactionAddSeries();
    public static string get_MethodTransactionAddChartArea();
    public static string get_MethodTransactionAddDataSource();
    public static string get_MethodTransactionDeleteSeries();
    public static string get_ActionMemberDataSource();
    public static string get_ActionMemberPalette();
    public static string get_ActionMemberBorderStyle();
    public static string get_ActionMemberBorderColor();
    public static string get_ActionMemberAddChartAreaDots();
    public static string get_ActionMemberChartType();
    public static string get_ActionMemberImageType();
    public static string get_ActionMemberAnimationTheme();
    public static string get_ActionMemberTitle();
    public static string get_ActionMemberTitlePlacement();
    public static string get_ActionMemberShowLegend();
    public static string get_ActionMemberLegendPlacement();
    public static string get_ActionMemberEnableToolbar();
    public static string get_ActionMemberEnableContextMenu();
    public static string get_ActionMemberBackColor();
    public static string get_ActionMemberBackGradientEndColor();
    public static string get_ActionMemberBackGradientType();
    public static string get_ActionMemberBorderLineColor();
    public static string get_ActionMemberBorderLineWidth();
    public static string get_ActionMemberLegendStyle();
    public static string get_ActionMemberAutoFitText();
    public static string get_ActionMemberEquallySpacedItems();
    public static string get_ActionMemberDocking();
    public static string get_ActionMemberAlignment();
    public static string get_ActionMemberDockToChartArea();
    public static string get_ActionMemberDockInsideChartArea();
    public static string get_ActionMemberBorderWidth();
    public static string get_ActionMemberShadowOffset();
    public static string get_ActionMemberFont();
    public static string get_ActionMemberFontColor();
    public static string get_ActionMemberDeleteChartAreaDots();
    public static string get_ActionMemberAddNewSeriesDots();
    public static string get_ActionMemberEnable3D();
    public static string get_ActionMemberDeleteSeriesDots();
    public static string get_ActionMemberTooltip();
    public static string get_ActionMemberText();
    public static string get_ActionMemberStyle();
    public static string get_ActionMemberAreaSmartLabels();
    public static string get_ActionMemberAlignOrientation();
    public static string get_ActionMemberAlignType();
    public static string get_ActionMemberAlignWithChartArea();
    public static string get_ActionMemberClustered();
    public static string get_ActionMemberRightAngleAxes();
    public static string get_ActionMemberType();
    public static string get_ActionMemberChartArea();
    public static string get_ActionMemberValueMemberX();
    public static string get_ActionMemberValueMembersY();
    public static string get_ActionMemberShowLabelAsValue();
    public static string get_ActionMemberLabelFormat();
    public static string get_ActionMemberSmartLabels();
    public static string get_ActionMemberMarkerStyle();
    public static string get_ActionMemberMarkerColor();
    public static string get_ActionMemberMarkerSize();
    public static string get_ActionMemberColor();
    public static string get_ActionMemberEnableMajorGrid();
    public static string get_ActionMemberEnableMajorTickMark();
    public static string get_ActionMemberLogarithmic();
    public static string get_ActionMemberReverse();
    public static string get_ActionMemberStartFromZero();
    public static string get_ActionMemberLineColor();
    public static string get_ActionMemberLineWidth();
    public static string get_ActionMemberInterlaced();
    public static string get_ActionMemberInterlacedColor();
    public static string get_ActionMemberStartCap();
    public static string get_ActionMemberEndCap();
    public static string get_ActionMethodProperties();
    public static string get_ActionGroupData();
    public static string get_ActionGroupChart();
    public static string get_ActionGroupAppearance();
    public static string get_ActionGroupAppearance1();
    public static string get_ActionGroupLegend();
    public static string get_ActionGroupDocking();
    public static string get_ActionGroupTitle();
    public static string get_ActionGroupChartArea();
    public static string get_ActionGroupAlignment();
    public static string get_ActionGroupChart3D();
    public static string get_ActionGroupSeries();
    public static string get_ActionGroupLabels();
    public static string get_ActionGroupMarkers();
    public static string get_ActionGroupAxis();
    public static string get_ActionGroupAxisView();
    public static string get_ActionGroupAnnotation();
    public static string get_TitleAxisX();
    public static string get_TitleAxisY();
    public static string get_TitleAxisX2();
    public static string get_TitleAxisY2();
    public static string get_FormulaNamePriceIndicators();
    public static string get_FormulaNameGeneralTechnicalIndicators();
    public static string get_FormulaNameTechnicalVolumeIndicators();
    public static string get_FormulaNameOscillator();
    public static string get_FormulaNameGeneralFormulas();
    public static string get_FormulaNameTimeSeriesAndForecasting();
    public static string get_FormulaNameStatisticalAnalysis();
    public static string get_FormulaNameVolumeIndicators();
    public static string get_LabelText3DSeries();
    public static string get_LabelTextAngleColon();
    public static string get_LabelTextAutoColon();
    public static string get_LabelTextAutomaticLegendText();
    public static string get_LabelTextAutoSizeColon();
    public static string get_LabelTextAxis();
    public static string get_LabelTextAxisTitle();
    public static string get_LabelTextBackground();
    public static string get_LabelTextBold();
    public static string get_LabelTextItalic();
    public static string get_LabelTextStrikeout();
    public static string get_LabelTextUnderline();
    public static string get_LabelTextBorderAndLine();
    public static string get_LabelTextBoth();
    public static string get_LabelTextCancel();
    public static string get_LabelTextOK();
    public static string get_LabelTextApply();
    public static string get_LabelTextChartNbspTypeColon();
    public static string get_LabelTextChartTitle();
    public static string get_LabelTextClusteredColon();
    public static string get_LabelTextColor2Colon();
    public static string get_LabelTextColorColon();
    public static string get_LabelTextColumn();
    public static string get_LabelTextDepthColon();
    public static string get_LabelTextEnable3DColon();
    public static string get_LabelTextErrorBarsStyle();
    public static string get_LabelTextErrorCalculation();
    public static string get_LabelTextFixedValueColon();
    public static string get_LabelTextFont();
    public static string get_LabelTextFontAndSize();
    public static string get_LabelTextFontColon();
    public static string get_LabelTextFontEffects();
    public static string get_LabelTextFormatAndPrecision();
    public static string get_LabelTextFormula();
    public static string get_LabelTextGapDepthColon();
    public static string get_LabelTextGradientColon();
    public static string get_LabelTextHatchingColon();
    public static string get_LabelTextHorizontalColon();
    public static string get_LabelTextInsideChartAreaColon();
    public static string get_LabelTextInterlacedStrips();
    public static string get_LabelTextLegendPlacement();
    public static string get_LabelTextLegendText();
    public static string get_LabelTextLower();
    public static string get_LabelTextMajorGrids();
    public static string get_LabelTextMinorGrids();
    public static string get_LabelTextNone();
    public static string get_LabelTextNotSet();
    public static string get_LabelTextParameters();
    public static string get_LabelTextPercentageColon();
    public static string get_LabelTextPeriodColon();
    public static string get_LabelTextPerspectiveColon();
    public static string get_LabelTextPlacementColon();
    public static string get_LabelTextPolynominalDegreeColon();
    public static string get_LabelTextPosition();
    public static string get_LabelTextReversed();
    public static string get_LabelTextRightAngleAxesColon();
    public static string get_LabelTextRotation();
    public static string get_LabelTextRow();
    public static string get_LabelTextSansSeriff();
    public static string get_LabelTextShowLabelsColon();
    public static string get_LabelTextShowLegendColon();
    public static string get_LabelTextSideMargin();
    public static string get_LabelTextSizeAsNumberOfStandardDeviationsColon();
    public static string get_LabelTextSizeAsPercentOfMovingAverageColon();
    public static string get_LabelTextSmartLabelsColon();
    public static string get_LabelTextStandardDeviationsColon();
    public static string get_LabelTextStandardErrorsColon();
    public static string get_LabelTextStyleColon();
    public static string get_LabelTextTable();
    public static string get_LabelTextTextColorColon();
    public static string get_LabelTextTitleFont();
    public static string get_LabelTextTitleTextColon();
    public static string get_LabelTextUpper();
    public static string get_LabelTextVerticalColon();
    public static string get_LabelTextVisible();
    public static string get_LabelTextWidthColon();
    public static string get_LabelTextEditChartItem();
    public static string get_LabelTextOpenChartFile();
    public static string get_LabelTextChart();
    public static string get_AnimationTreeNodeLabels();
    public static string get_AnimationTreeNodeMarkers();
    public static string get_AnimationTreeNodePoints();
    public static string get_AnimationTreeNodeMarker();
    public static string get_AnimationTreeNodeLabel();
    public static string get_AnimationTreeNodePoint();
    public static string get_AnimationTreeNodeAxisX();
    public static string get_AnimationTreeNodeAxisY();
    public static string get_AnimationTreeNodeAxisX2();
    public static string get_AnimationTreeNodeAxisY2();
    public static string get_AnimationTreeNodePlottingArea();
    public static string get_AnimationTreeNodeTitles();
    public static string get_AnimationTreeNodeAnnotations();
    public static string get_AnimationTreeNodeLegends();
    public static string get_AnimationTreeNodeAxisLine();
    public static string get_AnimationTreeNodeMajorGridlines();
    public static string get_AnimationTreeNodeMinorGridlines();
    public static string get_AnimationTreeNodeMajorTickMark();
    public static string get_AnimationTreeNodeMinorTickMark();
    public static string get_AnimationTreeNodeAxisLabels();
    public static string get_AnimationTreeNodeStripLine();
    public static string get_AnimationTreeNodeStripLines();
    public static string get_AnimationTreeNodeInterlacedStriplines();
    public static string get_DescriptionAttributeRightToLeft();
    public static string get_DescriptionAttributeNameValueCollection();
    public static string get_DescriptionAttributeInResizeContent();
    public static string get_DescriptionAttributeAnimationManager();
    public static string get_DescriptionAttributeResizingMode();
    public static string get_DescriptionAttributeBlendColors();
    public static string get_DescriptionAttributeBuildColor();
    public static string get_DescriptionAttributeBackImage15();
    public static string get_DescriptionAttributeBackImage16();
    public static string get_DescriptionAttributeChartImageToolTip();
    public static string get_DescriptionAttributeCollectionCoolBarItems();
    public static string get_DescriptionAttributeBackImage10();
    public static string get_DescriptionAttributeMarkerImage10();
    public static string get_DescriptionAttributeDescriptionCommand();
    public static string get_DescriptionAttributeCommandUseLastSubCommand();
    public static string get_DescriptionAttributeCommandStyle();
    public static string get_DescriptionAttributeImageResolution();
    public static string get_DescriptionAttributeCoomandPopupStyle();
    public static string get_DescriptionAttributeToolBarAttributeShowInToolbar();
    public static string get_DescriptionAttributeToolBarAttributesGroupPriority();
    public static string get_DescriptionAttributeFontHelperFindBestStyle();
    public static string get_DescriptionAttributeAnnotationBaseY();
    public static string get_DescriptionAttributeAnnotationWidth();
    public static string get_DescriptionAttributeAnnotationHeight();
    public static string get_DescriptionAttributeAnnotationClipToChartArea();
    public static string get_DescriptionAttributeCommandUIItemZOrder();
    public static string get_DescriptionAttributeAnnotationBaseX();
    public static string get_DescriptionAttributeItemInfoHashtable();
    public static string get_DescriptionAttributeCoolMenuItemImageID5();
    public static string get_DescriptionAttributeCommandImageName();
    public static string get_DescriptionAttributeCommandImageColor();
    public static string get_DescriptionAttributeChartImageType();
    public static string get_DescriptionAttributeLegendBackImage7();
    public static string get_DescriptionAttributeCoolMenuList();
    public static string get_DescriptionAttributeLoadTransparentImage();
    public static string get_DescriptionAttributeImageMapMapAreaType();
    public static string get_DescriptionAttributeCoolBarMouseUpInDropButtonZone();
    public static string get_DescriptionAttributeCoolBarAdornmentsInMove();
    public static string get_DescriptionAttributeMultiValueSeparator();
    public static string get_DescriptionAttributeDataSeriesGroupID();
    public static string get_DescriptionAttributeCoolMenuItemState();
    public static string get_DescriptionAttributeBackImage18();
    public static string get_DescriptionAttributeCoomandText();
    public static string get_DescriptionAttributeCoolBarAdornments();
    public static string get_DescriptionAttributeChartSizing();
    public static string get_DescriptionAttributeCoolMenuBackgroundColor();
    public static string get_DescriptionAttributeCoolBarButtonBehindItem();
    public static string get_DescriptionAttributeCoolBarButtonHotFlag();
    public static string get_DescriptionAttributeCoolBarButtonLatchedFlag();
    public static string get_DescriptionAttributeCoolBarButtonPushedFlag();
    public static string get_DescriptionAttributeCoolBarButtonContentDropDownImageSpacing();
    public static string get_DescriptionAttributeCoolBarButtonDropButtonImageLineSpacing();
    public static string get_DescriptionAttributeCoolBarButtonBorderHeight();
    public static string get_DescriptionAttributeCoolBarButtonBorderWidth();
    public static string get_DescriptionAttributeCoolBarButtonPaddingHeight();
    public static string get_DescriptionAttributeCoolBarButtonImageTextSpacing();
    public static string get_DescriptionAttributeCoolBarDropButtonZone();
    public static string get_DescriptionAttributeCoolBarComboBox();
    public static string get_DescriptionAttributeCommandEnabledFlag();
    public static string get_DescriptionAttributeCommandParameter();
    public static string get_DescriptionAttributeSubCommands();
    public static string get_DescriptionAttributeCommandToggled();
    public static string get_DescriptionAttributeChartCommandType();
    public static string get_DescriptionAttributeCoolbarSlotBars();
    public static string get_DescriptionAttributeCoolBarDockOwner();
    public static string get_DescriptionAttributeCoolBarSlotOwner2();
    public static string get_DescriptionAttributeCoolBarRectangleCoolBar();
    public static string get_DescriptionAttributeCoolBarGripper();
    public static string get_DescriptionAttributeCoolBarItemOwner();
    public static string get_DescriptionAttributeCoolBarAdornmentsOwner();
    public static string get_DescriptionAttributeCoolBarSlotDrawingOrder();
    public static string get_DescriptionAttributeCoolBarDockSlotOwner2();
    public static string get_DescriptionAttributeCoolbarOwner();
    public static string get_DescriptionAttributeCoolMenuItemOrganizer();
    public static string get_DescriptionAttributeCoolBarAdornmentsGripperState();
    public static string get_DescriptionAttributeCoolBarDesiredLocation();
    public static string get_DescriptionAttributeCoolBarDockDesiredSize();
    public static string get_DescriptionAttributeCoolBarButtonStyle();
    public static string get_DescriptionAttributeCoolBarButtonDropImage();
    public static string get_DescriptionAttributeCoolMenuFocusColor();
    public static string get_DescriptionAttributeCommandGroupID();
    public static string get_DescriptionAttributeCoolBarAdornmentsGripperHeight();
    public static string get_DescriptionAttributeCoolBarSeparatorSeparatorVerticalBorders();
    public static string get_DescriptionAttributeCoolMenuItemSeparatorHeight();
    public static string get_DescriptionAttributeCoolBarComboBoxHeight();
    public static string get_DescriptionAttributeCoolBarTextBoxHeight();
    public static string get_DescriptionAttributeCommandID();
    public static string get_DescriptionAttributeCoolBarButtonImageID();
    public static string get_DescriptionAttributeCoolMenuItemImageID();
    public static string get_DescriptionAttributeCoolBarImageList();
    public static string get_DescriptionAttributeCoolMenuItemImageList();
    public static string get_DescriptionAttributeCoolMenuItemImageIndex();
    public static string get_DescriptionAttributeCoolMenuItem();
    public static string get_DescriptionAttributeCoolBarMenuHeight();
    public static string get_DescriptionAttributeCoolBarAdornmentsMouseLastOnMove();
    public static string get_DescriptionAttributeCoolMenuItemImagePadRightOffset();
    public static string get_DescriptionAttributeCoolMenuItemTextOffset();
    public static string get_DescriptionAttributeCoolBarButton();
    public static string get_DescriptionAttributeCoolBarSeporator();
    public static string get_DescriptionAttributeCoolBarTextBox5();
    public static string get_DescriptionAttributeCoolBarSlotOwner();
    public static string get_DescriptionAttributeCoolMenuItemRightTextPadding();
    public static string get_DescriptionAttributeCoolMenuProperty();
    public static string get_DescriptionAttributeCoolMenuItemProperty();
    public static string get_DescriptionAttributeCoolBarRectangle();
    public static string get_DescriptionAttributeCoolMenuSeparatorColor();
    public static string get_DescriptionAttributeCoolBarSeparator();
    public static string get_DescriptionAttributeCommandShortcut();
    public static string get_DescriptionAttributeCoolBarButtonShowImageFlag();
    public static string get_DescriptionAttributeCoolBarButtonShowImageFlag2();
    public static string get_DescriptionAttributeCoolBarButtonShowTextFlag();
    public static string get_DescriptionAttributeCoolBarButtonShowTextFlag2();
    public static string get_DescriptionAttributeCoolBarDragPositionDelta();
    public static string get_DescriptionAttributeCoolMenuItemTextAccelSpacing();
    public static string get_DescriptionAttributeCommandSupportedElements();
    public static string get_DescriptionAttributeDataPointLegendMapAreaType();
    public static string get_DescriptionAttributeDataPointLabelMapAreaType();
    public static string get_DescriptionAttributeDataPointMapAreaType();
    public static string get_DescriptionAttributeCoolBarTextBox();
    public static string get_DescriptionAttributeCoolMenuTextColor();
    public static string get_DescriptionAttributeCoolBarToolTipHandler();
    public static string get_DescriptionAttributeCoolMenuItemToolTipText5();
    public static string get_DescriptionAttributeCoolMenuItemToolTipText2();
    public static string get_DescriptionAttributeCommandVisibleEnabledFlag();
    public static string get_DescriptionAttributeGripperWidth();
    public static string get_DescriptionAttributeSeparatorWidth();
    public static string get_DescriptionAttributeComboBoxWidth();
    public static string get_DescriptionAttributeTextBoxWidth();
    public static string get_DescriptionAttributeBackImage17();
    public static string get_DescriptionAttributeCoolMenuItemToolTipText();
    public static string get_DescriptionAttributeAxis_ValueType();
    public static string get_DescriptionAttributeSuppressCodeExceptions();
    public static string get_DescriptionAttributeNoDataMessage();
    public static string get_DescriptionAttributeReverseSeriesOrder();
    public static string get_DescriptionAttributeWebProxyBypassList();
    public static string get_DescriptionAttributeWebProxyBypassOnLocal();
    public static string get_DescriptionAttributeWebProxyUri();
    public static string get_DescriptionAttributeUserDefined();
    public static string get_DescriptionAttributeCoolMenuItemInfo_EmptyRectangles();
    public static string get_DescriptionAttributeCoolBarSlotCollection_Remove();
    public static string get_DescriptionAttributeRemove3();
    public static string get_DescriptionAttributeCoolBarDockDictionary_Remove();
    public static string get_DescriptionAttributeCoolBarItemCollection_Remove();
    public static string get_DescriptionAttributeCoolBarRectangleCollection_Remove();
    public static string get_DescriptionAttributeCoolBarCollection_Remove();
    public static string get_DescriptionAttributeCoolBarItemDictionary_Remove();
    public static string get_DescriptionAttributeChartEvent_GetToolTipText();
    public static string get_DescriptionAttributeArrowAnnotation_ArrowSize();
    public static string get_DescriptionAttributeChartSerializer_Content();
    public static string get_DescriptionAttributeEnabled();
    public static string get_DescriptionAttributeToolBarAttributes_Enabled();
    public static string get_DescriptionAttributeLegend_Enabled();
    public static string get_DescriptionAttributeEnabled5();
    public static string get_DescriptionAttributeAxisScaleBreakStyle_Enabled();
    public static string get_DescriptionAttributeEnabled7();
    public static string get_DescriptionAttributeLabel_Enabled();
    public static string get_DescriptionAttributeContextMenuAttributes_Enabled();
    public static string get_DescriptionAttributeCommand_Enabled();
    public static string get_DescriptionAttributeLegendItem_Enabled();
    public static string get_DescriptionAttributeAxisScrollBar_Enabled();
    public static string get_DescriptionAttributeEnabled13();
    public static string get_DescriptionAttributeSeries_Enabled();
    public static string get_DescriptionAttributeLegendCell_CellSpan();
    public static string get_DescriptionAttributeCursor_SelectionColor();
    public static string get_DescriptionAttributeInterlaced();
    public static string get_DescriptionAttributeCoolBarSeparatorControl_CoolBarSeparatorControl();
    public static string get_DescriptionAttributeMapArea_Coordinates();
    public static string get_DescriptionAttributeControl();
    public static string get_DescriptionAttributeControl3();
    public static string get_DescriptionAttributeCoolBarItem_Control();
    public static string get_DescriptionAttributeSelectionManagerExtended_EnableSelection();
    public static string get_DescriptionAttributeChartEvent_PostPaint();
    public static string get_DescriptionAttributeChartEvent2_PostPaint();
    public static string get_DescriptionAttributeStripLine_Title();
    public static string get_DescriptionAttributeChartMirror_Title();
    public static string get_DescriptionAttributeLegend_Title();
    public static string get_DescriptionAttributeTitle5();
    public static string get_DescriptionAttributeTitle6();
    public static string get_DescriptionAttributeAnnotation_Annotation();
    public static string get_DescriptionAttributeLegend_TitleFont();
    public static string get_DescriptionAttributeStripLine_TitleFont();
    public static string get_DescriptionAttributeTitleFont4();
    public static string get_DescriptionAttributeTitleFont5();
    public static string get_DescriptionAttributeChartArea_Axes();
    public static string get_DescriptionAttributeCommandResult_IsSuccess();
    public static string get_DescriptionAttributeChartSerializer_NonSerializableContent();
    public static string get_DescriptionAttributeLegendItem_ShadowOffset();
    public static string get_DescriptionAttributeLegend_ShadowOffset();
    public static string get_DescriptionAttributeChartArea_ShadowOffset();
    public static string get_DescriptionAttributeSeries_ShadowOffset();
    public static string get_DescriptionAttributeTitle_ShadowOffset();
    public static string get_DescriptionAttributeShadowOffset7();
    public static string get_DescriptionAttributeAnnotationGroup_ShadowOffset();
    public static string get_DescriptionAttributeToolBarAttributes_ShadowOffset();
    public static string get_DescriptionAttributeRepeat();
    public static string get_DescriptionAttributeCoolMenuItemInfo_MenuItemMeasureHandler();
    public static string get_DescriptionAttributeCalloutLineAnchorCap();
    public static string get_DescriptionAttributeStripLine_MapAreaAttributes();
    public static string get_DescriptionAttributeMapAreaAttributes3();
    public static string get_DescriptionAttributeAxis_MapAreaAttributes();
    public static string get_DescriptionAttributeLegendCell_MapAreaAttributes();
    public static string get_DescriptionAttributeTitle_MapAreaAttributes();
    public static string get_DescriptionAttributeLegendCellColumn_MapAreaAttributes();
    public static string get_DescriptionAttributeMapArea_MapAreaAttributes();
    public static string get_DescriptionAttributeMapAreaAttributes9();
    public static string get_DescriptionAttributeCustomLabel_MapAreaAttributes();
    public static string get_DescriptionAttributeSubAxis_SubAxis();
    public static string get_DescriptionAttributeCoolMenuItemInfo_Convert();
    public static string get_DescriptionAttributeMajorGrid();
    public static string get_DescriptionAttributeItemProperty_ItemProperty();
    public static string get_DescriptionAttributeCoolBarButtonControl_OnMouseEnter();
    public static string get_DescriptionAttributeCoolBarTextBoxControl_CoolBarTextBoxControl();
    public static string get_DescriptionAttributeCoolMenuOrganizer_CoolMenuOrganizer();
    public static string get_DescriptionAttributeElementPosition_Y();
    public static string get_DescriptionAttributeY3();
    public static string get_DescriptionAttributeAnnotationPathPoint_Y();
    public static string get_DescriptionAttributeToolTipEventArgs_Y();
    public static string get_DescriptionAttributePoint3D_Y();
    public static string get_DescriptionAttributePoint3D_Z();
    public static string get_DescriptionAttributeAnimationCollection_AnimationCollection();
    public static string get_DescriptionAttributeMajorTickMark();
    public static string get_DescriptionAttributeDrawInfinitive();
    public static string get_DescriptionAttributeAxisDataView_MinSize();
    public static string get_DescriptionAttributeLegendCellColumnCollection_LegendCellColumnCollection();
    public static string get_DescriptionAttributeCoolBarItemCollection_CoolBarItemCollection();
    public static string get_DescriptionAttributeCoolBarButtonStyle_CoolBarButtonStyle();
    public static string get_DescriptionAttributeMarkerOverlapping();
    public static string get_DescriptionAttributeChart_OnCustomizeLegend();
    public static string get_DescriptionAttributeLegendCellColumn_HeaderTextAlignment();
    public static string get_DescriptionAttributeCommand_CommandType();
    public static string get_DescriptionAttributeCoolMenuOrganizer_DetachMenu();
    public static string get_DescriptionAttributeScrollBarEventArgs_MousePositionY();
    public static string get_DescriptionAttributeOrganizerPropertyChangedEventArgs_OrganizerPropertyChangedEventArgs();
    public static string get_DescriptionAttributeNamedImage_NamedImage();
    public static string get_DescriptionAttributeCoolMenuOrganizer_SelectedTextColor();
    public static string get_DescriptionAttributeScrollBar();
    public static string get_DescriptionAttributeMapArea_MapArea();
    public static string get_DescriptionAttributeLegend_CustomItems();
    public static string get_DescriptionAttributeAnnotationSmartLabelsStyle_AnnotationSmartLabelsStyle();
    public static string get_DescriptionAttributePolylineAnnotation_PolylineAnnotation();
    public static string get_DescriptionAttributeChartEvent_AxisViewChanged();
    public static string get_DescriptionAttributeChartEvent2_AxisViewChanged();
    public static string get_DescriptionAttributeCoolBarCollection_IndexOf();
    public static string get_DescriptionAttributeCoolBarRectangleCollection_IndexOf();
    public static string get_DescriptionAttributeCoolBarItemCollection_IndexOf();
    public static string get_DescriptionAttributeCoolBarSimpleCollection_IndexOf();
    public static string get_DescriptionAttributeCoolBarSlotCollection_IndexOf();
    public static string get_DescriptionAttributeAnimationElement_Object();
    public static string get_DescriptionAttributeCrossing();
    public static string get_DescriptionAttributeMargins_Top();
    public static string get_DescriptionAttributeCoolMenuItemInfo_CalculateRectangles();
    public static string get_DescriptionAttributeLegendCellColumn_HeaderFont();
    public static string get_DescriptionAttributeDundasNumericEditor_Columns();
    public static string get_DescriptionAttributeCoolMenuItemInfo_ImageIndex();
    public static string get_DescriptionAttributeLegend_InterlacedRows();
    public static string get_DescriptionAttributeCoolBarButtonControl_Button();
    public static string get_DescriptionAttributeCoolMenuOrganizer_DrawAccelerator();
    public static string get_DescriptionAttributeCoolBarButtonControl_ShowText();
    public static string get_DescriptionAttributeCoolMenuItem_ShowText();
    public static string get_DescriptionAttributeAxisDataView_MinSizeType();
    public static string get_DescriptionAttributeCoolMenuItemInfo_MenuItemPropertyChanged();
    public static string get_DescriptionAttributeCoolBarCollection_OnInsertComplete();
    public static string get_DescriptionAttributeCoolBarSlotCollection_OnInsertComplete();
    public static string get_DescriptionAttributeCoolBarItemCollection_OnInsertComplete();
    public static string get_DescriptionAttributeLineWidth();
    public static string get_DescriptionAttributeFinancialMarker_LineWidth();
    public static string get_DescriptionAttributeTextAnnotation_LineWidth();
    public static string get_DescriptionAttributeCalloutAnnotation_LineWidth();
    public static string get_DescriptionAttributeCursor_LineWidth();
    public static string get_DescriptionAttributeLineWidth7();
    public static string get_DescriptionAttributeLineWidth8();
    public static string get_DescriptionAttributeLineWidth9();
    public static string get_DescriptionAttributeAxisScaleBreakStyle_LineWidth();
    public static string get_DescriptionAttributeImageAnnotation_LineWidth();
    public static string get_DescriptionAttributeDataPoint_XValue();
    public static string get_DescriptionAttributeToolBarAttributes_AllowMouseMoving();
    public static string get_DescriptionAttributeItemPropertyChangedEventHandler_ItemPropertyChangedEventHandler();
    public static string get_DescriptionAttributeFadingAnimation_StartShadowColor();
    public static string get_DescriptionAttributeChartArea_AxisY2();
    public static string get_DescriptionAttributeChartArea_AxisX2();
    public static string get_DescriptionAttributeChartEvent_AnnotationPositionChanging();
    public static string get_DescriptionAttributeStripLine_StripLine();
    public static string get_DescriptionAttributeStripLine_TitleAngle();
    public static string get_DescriptionAttributeBorderColor();
    public static string get_DescriptionAttributeChartArea_BorderColor();
    public static string get_DescriptionAttributeStripLine_BorderColor();
    public static string get_DescriptionAttributeToolBarAttributes_BorderColor();
    public static string get_DescriptionAttributeTitle_BorderColor();
    public static string get_DescriptionAttributeLegend_BorderColor();
    public static string get_DescriptionAttributeLegendItem_BorderColor();
    public static string get_DescriptionAttributeBorderColor9();
    public static string get_DescriptionAttributeCoolMenuItemInfo_MenuItemDrawHandler();
    public static string get_DescriptionAttributeLegendText();
    public static string get_DescriptionAttributeCustomLabel_LabelMark();
    public static string get_DescriptionAttributeTextAntiAliasingQuality();
    public static string get_DescriptionAttributeAllowMoving();
    public static string get_DescriptionAttributeCalloutAnnotation_CalloutAnnotation();
    public static string get_DescriptionAttributeStripLine_Name();
    public static string get_DescriptionAttributeTitle_Name();
    public static string get_DescriptionAttributeName4();
    public static string get_DescriptionAttributeAnnotationPathPoint_Name();
    public static string get_DescriptionAttributeLegendCell_Name();
    public static string get_DescriptionAttributeMapArea_Name();
    public static string get_DescriptionAttributeFinancialMarker_Name();
    public static string get_DescriptionAttributeSeries_Name();
    public static string get_DescriptionAttributeAxis_Name();
    public static string get_DescriptionAttributeNamedImage_Name();
    public static string get_DescriptionAttributeSubAxis_Name();
    public static string get_DescriptionAttributeDataPoint_Name();
    public static string get_DescriptionAttributeLegendCellColumn_Name();
    public static string get_DescriptionAttributeLegendItem_Name();
    public static string get_DescriptionAttributeName16();
    public static string get_DescriptionAttributeCommand_Name();
    public static string get_DescriptionAttributeLegend_Name();
    public static string get_DescriptionAttributeCustomLabel_Name();
    public static string get_DescriptionAttributeChartArea_Name();
    public static string get_DescriptionAttributeCursor_Cursor();
    public static string get_DescriptionAttributeCoolBarButton_RaiseDropDownEvent();
    public static string get_DescriptionAttributeCoolBarButtonControl_Pushed();
    public static string get_DescriptionAttributeChart_AnimationStartTime();
    public static string get_DescriptionAttributeBorderSkinAttributes_FrameBackGradientType();
    public static string get_DescriptionAttributeAnchorX();
    public static string get_DescriptionAttributeToolTip();
    public static string get_DescriptionAttributeLegendCellColumn_ToolTip();
    public static string get_DescriptionAttributeToolTip4();
    public static string get_DescriptionAttributeLegendCell_ToolTip();
    public static string get_DescriptionAttributeCustomLabel_ToolTip();
    public static string get_DescriptionAttributeToolTip7();
    public static string get_DescriptionAttributeMapArea_ToolTip();
    public static string get_DescriptionAttributeStripLine_ToolTip();
    public static string get_DescriptionAttributeTitle_ToolTip();
    public static string get_DescriptionAttributeLegend_TableStyle();
    public static string get_DescriptionAttributeDataPoint_Empty();
    public static string get_DescriptionAttributeScrollBarEventArgs_Handled();
    public static string get_DescriptionAttributeAxisLabel();
    public static string get_DescriptionAttributeAnnotationGroup_AllowPathEditing();
    public static string get_DescriptionAttributeAllowPathEditing3();
    public static string get_DescriptionAttributeChart_CustomAnimation();
    public static string get_DescriptionAttributeOnPaint();
    public static string get_DescriptionAttributeCoolBar_OnPaint();
    public static string get_DescriptionAttributeChart_OnPaint();
    public static string get_DescriptionAttributeCoolBarGripper_OnPaint();
    public static string get_DescriptionAttributeFinancialMarker_FirstYIndex();
    public static string get_DescriptionAttributeCalloutAnnotation_AnchorOffsetX();
    public static string get_DescriptionAttributeAnchorOffsetX3();
    public static string get_DescriptionAttributeCalloutAnnotation_AnchorOffsetY();
    public static string get_DescriptionAttributeAnchorOffsetY3();
    public static string get_DescriptionAttributeChartEvent_CursorPositionChanging();
    public static string get_DescriptionAttributeScrollBarEventArgs_ButtonType();
    public static string get_DescriptionAttributeCoolBarButton_RecalcSize();
    public static string get_DescriptionAttributeRecalcSize3();
    public static string get_DescriptionAttributeRecalcSize4();
    public static string get_DescriptionAttributeRecalcSize5();
    public static string get_DescriptionAttributeCoolBarDock_RecalcSize();
    public static string get_DescriptionAttributeCoolBar_RecalcSize();
    public static string get_DescriptionAttributeLabelsAutoFitStyle();
    public static string get_DescriptionAttributeCoolMenuItemInfo_ImagePadRectangle();
    public static string get_DescriptionAttributeCoolBarButton_ClickStyle();
    public static string get_DescriptionAttributeCoolBarButtonControl_ShowImage();
    public static string get_DescriptionAttributeCoolMenuItem_ShowImage();
    public static string get_DescriptionAttributeLabelStyle();
    public static string get_DescriptionAttributeStripLine_IntervalOffsetType();
    public static string get_DescriptionAttributeLabel_IntervalOffsetType();
    public static string get_DescriptionAttributeIntervalOffsetType4();
    public static string get_DescriptionAttributeCursor_IntervalOffsetType();
    public static string get_DescriptionAttributeIntervalOffsetType6();
    public static string get_DescriptionAttributeAxisScaleSegment_IntervalOffsetType();
    public static string get_DescriptionAttributeReverse();
    public static string get_DescriptionAttributeSeries_Points();
    public static string get_DescriptionAttributeBorderSkinAttributes_SkinStyle();
    public static string get_DescriptionAttributeColorBuilder_ColorBuilder();
    public static string get_DescriptionAttributeChartUI_Commands();
    public static string get_DescriptionAttributeSelectionManagerExtended_IgnoreTransparentObjects();
    public static string get_DescriptionAttributeChartArea3DStyle_Clustered();
    public static string get_DescriptionAttributeCoolBarComboBoxEvent_SelectedIndexChanged();
    public static string get_DescriptionAttributeChartMirror_EnableToolbar();
    public static string get_DescriptionAttributeAnchorDataPointName();
    public static string get_DescriptionAttributeChart_WinControlUrl();
    public static string get_DescriptionAttributeChartEvent_AnnotationPositionChanged();
    public static string get_DescriptionAttributeAnnotationPathPoint_PointType();
    public static string get_DescriptionAttributeChartArea3DStyle_PointGapDepth();
    public static string get_DescriptionAttributeLegend_Reversed();
    public static string get_DescriptionAttributeCoolMenuOrganizer_MenuItemBackgroundColor();
    public static string get_DescriptionAttributeCoolBarButton_OnDropDown();
    public static string get_DescriptionAttributeAnnotation_AnnotationType();
    public static string get_DescriptionAttributeTextAnnotation_AnnotationType();
    public static string get_DescriptionAttributeAnnotationType4();
    public static string get_DescriptionAttributeLegendItem_MarkerImageTransparentColor();
    public static string get_DescriptionAttributeMarkerImageTransparentColor3();
    public static string get_DescriptionAttributeBorderSkinAttributes_FrameBorderStyle();
    public static string get_DescriptionAttributeLegend_HeaderSeparatorColor();
    public static string get_DescriptionAttributeChartEvent_AnnotationSelectionChanged();
    public static string get_DescriptionAttributeFont();
    public static string get_DescriptionAttributeLegend_Font();
    public static string get_DescriptionAttributeLegendCellColumn_Font();
    public static string get_DescriptionAttributeLabel_Font();
    public static string get_DescriptionAttributeTitle_Font();
    public static string get_DescriptionAttributeLegendCell_Font();
    public static string get_DescriptionAttributeFinancialMarker_Font();
    public static string get_DescriptionAttributeCoolBarRectangle_CoolBarRectangle();
    public static string get_DescriptionAttributeCoolMenuItemInfo_IsSeparator();
    public static string get_DescriptionAttributeSeries_ValueMemberX();
    public static string get_DescriptionAttributeCoolMenuItemInfo_Organizer();
    public static string get_DescriptionAttributeCoolMenuItemInfo_IsFromMainMenu();
    public static string get_DescriptionAttributeArrows();
    public static string get_DescriptionAttributeType();
    public static string get_DescriptionAttributeSeries_Type();
    public static string get_DescriptionAttributeBorder3DAnnotation_Border3DAnnotation();
    public static string get_DescriptionAttributeChart_Images();
    public static string get_DescriptionAttributeLegendToolTip();
    public static string get_DescriptionAttributeIResultOutput_OutputResult();
    public static string get_DescriptionAttributeCustomLabel_CustomLabel();
    public static string get_DescriptionAttributeChartEvent_AnnotationPlaced();
    public static string get_DescriptionAttributeCoolMenuOrganizer_ReflectSystemColors();
    public static string get_DescriptionAttributeCalloutBackColor();
    public static string get_DescriptionAttributeLabel_ShowEndLabels();
    public static string get_DescriptionAttributeLabelToolTip();
    public static string get_DescriptionAttributeSeries_MarkerStep();
    public static string get_DescriptionAttributeTickMark_Style();
    public static string get_DescriptionAttributeTitle_Style();
    public static string get_DescriptionAttribute_TextOrientation();
    public static string get_DescriptionAttributeLegendItem_Style();
    public static string get_DescriptionAttributeChartArea3DStyle_YAngle();
    public static string get_DescriptionAttributeChart_ImageStorageMode();
    public static string get_DescriptionAttributeBorderSkinAttributes_FrameBackImageAlign();
    public static string get_DescriptionAttributeCoolBar_ShowGripper();
    public static string get_DescriptionAttributeSizeAlwaysRelative();
    public static string get_DescriptionAttributeSizeAlwaysRelative3();
    public static string get_DescriptionAttributeAnnotationGroup_SizeAlwaysRelative();
    public static string get_DescriptionAttributeAnimationElement_DataPointElement();
    public static string get_DescriptionAttributeToolBarAttributes_Placement();
    public static string get_DescriptionAttributeCoolMenuOrganizer_MainMenuTextColor();
    public static string get_DescriptionAttributeCoolBarSlot_Bars();
    public static string get_DescriptionAttributeChart_BorderlineWidth();
    public static string get_DescriptionAttributeItemPropertyChangedEventArgs_ItemPropertyChangedEventArgs();
    public static string get_DescriptionAttributeSeries_XValueIndexed();
    public static string get_DescriptionAttributeEllipseAnnotation_EllipseAnnotation();
    public static string get_DescriptionAttributeAnchorAlignment();
    public static string get_DescriptionAttributeAnchorAlignment3();
    public static string get_DescriptionAttributeAnchorAlignment4();
    public static string get_DescriptionAttributeWidth();
    public static string get_DescriptionAttributeElementPosition_Width();
    public static string get_DescriptionAttributeWidth4();
    public static string get_DescriptionAttributeAxisXName();
    public static string get_DescriptionAttributeEmptyX();
    public static string get_DescriptionAttributeCommand_ToggleStyle();
    public static string get_DescriptionAttributeMovingAnimation_StartPositionX();
    public static string get_DescriptionAttributeChartArea3DStyle_XAngle();
    public static string get_DescriptionAttributeCoolMenuItemEvent_ItemPropertyChanged();
    public static string get_DescriptionAttributeCommand_PopupStyle();
    public static string get_DescriptionAttributeOrganizerPropertyChangedEventHandler_OrganizerPropertyChangedEventHandler();
    public static string get_DescriptionAttributeLegendCollection_LegendCollection();
    public static string get_DescriptionAttributeAxisYName();
    public static string get_DescriptionAttributeAxisScaleSegment_Spacing();
    public static string get_DescriptionAttributeAxisScaleBreakStyle_Spacing();
    public static string get_DescriptionAttributeSelected();
    public static string get_DescriptionAttributeAnnotationGroup_Selected();
    public static string get_DescriptionAttributeLabelBorderWidth();
    public static string get_DescriptionAttributeVerticalLineAnnotation_VerticalLineAnnotation();
    public static string get_DescriptionAttributeLabelsAutoFitMaxFontSize();
    public static string get_DescriptionAttributeFreeDrawPlacement();
    public static string get_DescriptionAttributeStripLinesCollection_StripLinesCollection();
    public static string get_DescriptionAttributeAxisDataView_IsZoomed();
    public static string get_DescriptionAttributeSeries_ChartType();
    public static string get_DescriptionAttributeChartArea3DStyle_Perspective();
    public static string get_DescriptionAttributeChart_RenderAsControl();
    public static string get_DescriptionAttributeChart_UnusedColor();
    public static string get_DescriptionAttributeChart_OnCustomize();
    public static string get_DescriptionAttributeCoolBarDock_OnResize();
    public static string get_DescriptionAttributeCoolBarSlot_OnResize();
    public static string get_DescriptionAttributeCoolBarButton_RaiseClickEvent();
    public static string get_DescriptionAttributeIResultOutput_Unindent();
    public static string get_DescriptionAttributeLabel();
    public static string get_DescriptionAttributeLabel_Label();
    public static string get_DescriptionAttributeImageAnnotation_TextStyle();
    public static string get_DescriptionAttributeTextStyle3();
    public static string get_DescriptionAttributeTextStyle4();
    public static string get_DescriptionAttributeTextStyle5();
    public static string get_DescriptionAttributePolygonAnnotation_StartCap();
    public static string get_DescriptionAttributeStartCap3();
    public static string get_DescriptionAttributeFontColor();
    public static string get_DescriptionAttributeLabel_FontColor();
    public static string get_DescriptionAttributeLegend_FontColor();
    public static string get_DescriptionAttributeCoolBarComboBoxControl_ComboBox();
    public static string get_DescriptionAttributeCalloutLineWidth();
    public static string get_DescriptionAttributeLabel_OffsetLabels();
    public static string get_DescriptionAttributeMargin();
    public static string get_DescriptionAttributeCoolBarDockDictionary_Add();
    public static string get_DescriptionAttributeCoolBarCollection_Add();
    public static string get_DescriptionAttributeCoolBarRectangleCollection_Add();
    public static string get_DescriptionAttributeCoolBarItemDictionary_Add();
    public static string get_DescriptionAttributeAdd6();
    public static string get_DescriptionAttributeCoolBarSlotCollection_Add();
    public static string get_DescriptionAttributeCoolBarItemCollection_Add();
    public static string get_DescriptionAttributeCoolMenuItemInfo_Revert();
    public static string get_DescriptionAttributeAnnotationPositionChangingEventArgs_AnnotationPositionChangingEventArgs();
    public static string get_DescriptionAttributeCoolBar_DesiredLocation();
    public static string get_DescriptionAttributeCursorEventArgs_NewSelectionStart();
    public static string get_DescriptionAttributeSeries_XSubAxisName();
    public static string get_DescriptionAttributeHideOverlapped();
    public static string get_DescriptionAttributeCoolMenuOrganizer_DrawSeparator();
    public static string get_DescriptionAttributeLegendCellColumn_MaximumWidth();
    public static string get_DescriptionAttributeChartToolBar_ChartId();
    public static string get_DescriptionAttributeCoolMenuOrganizer_DrawRadioCheckBox();
    public static string get_DescriptionAttributeCommandUIItem_ShouldSerializeCommandName();
    public static string get_DescriptionAttributeLegend_InsideChartArea();
    public static string get_DescriptionAttributeBackImageTransparentColor();
    public static string get_DescriptionAttributeLegend_BackImageTransparentColor();
    public static string get_DescriptionAttributeLegendItem_BackImageTransparentColor();
    public static string get_DescriptionAttributeTitle_BackImageTransparentColor();
    public static string get_DescriptionAttributeBackImageTransparentColor6();
    public static string get_DescriptionAttributeLegend_EquallySpacedItems();
    public static string get_DescriptionAttributeChartArea_CursorY();
    public static string get_DescriptionAttributeCoolBarButton_CoolBarButton();
    public static string get_DescriptionAttributeChart_Printing();
    public static string get_DescriptionAttributeAxis();
    public static string get_DescriptionAttributeAxis_Axis();
    public static string get_DescriptionAttributeDundasNumericEditorEvent_TextChanged();
    public static string get_DescriptionAttributeCoolBarComboBoxEvent_TextChanged();
    public static string get_DescriptionAttributeCoolBarTextBoxEvent_TextChanged();
    public static string get_DescriptionAttributeBackImageAlign();
    public static string get_DescriptionAttributeLegend_BackImageAlign();
    public static string get_DescriptionAttributeShowInLegend();
    public static string get_DescriptionAttributeChartSerializer_ChartSerializer();
    public static string get_DescriptionAttributeChart_Compression();
    public static string get_DescriptionAttributeChartImage_Compression();
    public static string get_DescriptionAttributeBorderSkinAttributes_FrameBackGradientEndColor();
    public static string get_DescriptionAttributeCursor_AutoScroll();
    public static string get_DescriptionAttributeElementPosition_Height();
    public static string get_DescriptionAttributeHeight3();
    public static string get_DescriptionAttributeHeight4();
    public static string get_DescriptionAttributeFadingAnimation_StartGradientColor();
    public static string get_DescriptionAttributeChart_ViewStateContent();
    public static string get_DescriptionAttributeAxisDataView_SmallScrollSizeType();
    public static string get_DescriptionAttributeLegend_CellColumns();
    public static string get_DescriptionAttributeAxisScrollBar_Buttons();
    public static string get_DescriptionAttributeElementId();
    public static string get_DescriptionAttributeLegends();
    public static string get_DescriptionAttributeChartEvent_CommandFired();
    public static string get_DescriptionAttributeElementPosition_X();
    public static string get_DescriptionAttributeAnnotationPathPoint_X();
    public static string get_DescriptionAttributeX4();
    public static string get_DescriptionAttributePoint3D_X();
    public static string get_DescriptionAttributeToolTipEventArgs_X();
    public static string get_DescriptionAttributeCustomAttributesExtended();
    public static string get_DescriptionAttributeMargins_Left();
    public static string get_DescriptionAttributeAxisScrollBar_PositionInside();
    public static string get_DescriptionAttributeTripleResolutionImage_TripleResolutionImage();
    public static string get_DescriptionAttributeCoolMenuItemInfo_CoolMenuItemInfo();
    public static string get_DescriptionAttributeMovingAnimation_MovingAnimation();
    public static string get_DescriptionAttributeCoolBarComboBoxControl_OnSelectedIndexChanged();
    public static string get_DescriptionAttributeCoolBarComboBox_OnSelectedIndexChanged();
    public static string get_DescriptionAttributeOneByOne();
    public static string get_DescriptionAttributeSeries_ValueMembersY();
    public static string get_DescriptionAttributeSmartLabelsStyle_SmartLabelsStyle();
    public static string get_DescriptionAttributeChartEvent_SelectionRangeChanging();
    public static string get_DescriptionAttributeCoolMenuOrganizer_GetItemImageIndex();
    public static string get_DescriptionAttributeCoolBarItem_CoolBarItem();
    public static string get_DescriptionAttributeMapAreaId();
    public static string get_DescriptionAttributeLabelsAutoFitMinFontSize();
    public static string get_DescriptionAttributeMaxMovingDistance();
    public static string get_DescriptionAttributeEnableText();
    public static string get_DescriptionAttributeTitle_DockToChartArea();
    public static string get_DescriptionAttributeLegend_DockToChartArea();
    public static string get_DescriptionAttributeGripperState_GripperState();
    public static string get_DescriptionAttributeChartArea3DStyle_RightAngleAxes();
    public static string get_DescriptionAttributeCoolBarGripper_OnMouseDown();
    public static string get_DescriptionAttributeCoolBarButtonControl_OnMouseDown();
    public static string get_DescriptionAttributeCoolBarButtonClickStyle_CoolBarButtonClickStyle();
    public static string get_DescriptionAttributeBorderSkinAttributes_FrameBackImageTransparentColor();
    public static string get_DescriptionAttributeLegend_LegendStyle();
    public static string get_DescriptionAttributeCoolBarDockDictionary_CoolBarDockDictionary();
    public static string get_DescriptionAttributeLegendMapAreaAttributes();
    public static string get_DescriptionAttributeCoolBarDock_DesiredSize();
    public static string get_DescriptionAttributeCoolBarSlot_DesiredSize();
    public static string get_DescriptionAttributeCoolBar_DesiredSize();
    public static string get_DescriptionAttributeAxisDataView_AxisDataView();
    public static string get_DescriptionAttributeCoolBarButtonEvent_DropDown();
    public static string get_DescriptionAttributeCoolBar_CoolBar();
    public static string get_DescriptionAttributeCoolBarRectangle_CoolBar();
    public static string get_DescriptionAttributeCoolMenuOrganizer_DrawText();
    public static string get_DescriptionAttributeStripLine_BorderStyle();
    public static string get_DescriptionAttributeBorderStyle3();
    public static string get_DescriptionAttributeLegend_BorderStyle();
    public static string get_DescriptionAttributeChartArea_BorderStyle();
    public static string get_DescriptionAttributeLegendItem_BorderStyle();
    public static string get_DescriptionAttributeToolBarAttributes_BorderStyle();
    public static string get_DescriptionAttributeBorderStyle8();
    public static string get_DescriptionAttributeTitle_BorderStyle();
    public static string get_DescriptionAttributeLegendItem_BackGradientEndColor();
    public static string get_DescriptionAttributeBackGradientEndColor3();
    public static string get_DescriptionAttributeBackGradientEndColor4();
    public static string get_DescriptionAttributeChartArea_BackGradientEndColor();
    public static string get_DescriptionAttributeCalloutAnnotation_BackGradientEndColor();
    public static string get_DescriptionAttributeBackGradientEndColor7();
    public static string get_DescriptionAttributeBackGradientEndColor8();
    public static string get_DescriptionAttributeStripLine_BackGradientEndColor();
    public static string get_DescriptionAttributeLegend_BackGradientEndColor();
    public static string get_DescriptionAttributeAnnotationGroup_BackGradientEndColor();
    public static string get_DescriptionAttributeTitle_BackGradientEndColor();
    public static string get_DescriptionAttributeBackGradientEndColor13();
    public static string get_DescriptionAttributePolygonAnnotation_BackGradientEndColor();
    public static string get_DescriptionAttributeImageAnnotation_BackGradientEndColor();
    public static string get_DescriptionAttributeLegend_TitleSeparator();
    public static string get_DescriptionAttributeChartArea_InnerPlotPosition();
    public static string get_DescriptionAttributeChartEvent_CustomizeLegend();
    public static string get_DescriptionAttributeAnnotationPathPoint_AnnotationPathPoint();
    public static string get_DescriptionAttributeChartEvent_CallbackComplete();
    public static string get_DescriptionAttributeSeries_FinancialMarkers();
    public static string get_DescriptionAttributeCoolBarSlotCollection_OnSet();
    public static string get_DescriptionAttributeCoolBarCollection_OnSet();
    public static string get_DescriptionAttributeCoolBarItemCollection_OnSet();
    public static string get_DescriptionAttributeCoolMenuItemInfo_OriginallyOwnerDrawn();
    public static string get_DescriptionAttributeDataPoint_YValues();
    public static string get_DescriptionAttributeChart_AnimationFramesPerSecond();
    public static string get_DescriptionAttributeCustomLabel_RowIndex();
    public static string get_DescriptionAttributeSeries_YSubAxisName();
    public static string get_DescriptionAttributeChartArea_AlignType();
    public static string get_DescriptionAttributeChartEvent_Paint();
    public static string get_DescriptionAttributeTripleResolutionImage_RaiseImageChangedEvent();
    public static string get_DescriptionAttributeCoolMenuOrganizer_MainMenuBackgroundColor();
    public static string get_DescriptionAttributeStartTime();
    public static string get_DescriptionAttributeAllowResizing();
    public static string get_DescriptionAttributeShowLabelAsValue();
    public static string get_DescriptionAttributeLegendCellColumn_TextColor();
    public static string get_DescriptionAttributeTextColor3();
    public static string get_DescriptionAttributeTextColor4();
    public static string get_DescriptionAttributeLegendCell_TextColor();
    public static string get_DescriptionAttributeTextColor6();
    public static string get_DescriptionAttributeFinancialMarker_TextColor();
    public static string get_DescriptionAttributeCustomLabel_TextColor();
    public static string get_DescriptionAttributeImageAnnotation_TextColor();
    public static string get_DescriptionAttributePathPoints();
    public static string get_DescriptionAttributeMarkerBorderColor();
    public static string get_DescriptionAttributeSelectionManagerExtended_MarkerBorderColor();
    public static string get_DescriptionAttributeLegendItem_MarkerBorderColor();
    public static string get_DescriptionAttributeViewEventArgs_NewSizeType();
    public static string get_DescriptionAttributeChart_BuildNumber();
    public static string get_DescriptionAttributeFinancialMarker_SecondPointIndex();
    public static string get_DescriptionAttributeAxisScaleSegmentCollection_AxisScaleSegmentCollection();
    public static string get_DescriptionAttributeCoolMenuItem_CoolMenuItem();
    public static string get_DescriptionAttributeMarkerSize();
    public static string get_DescriptionAttributeLegendItem_MarkerSize();
    public static string get_DescriptionAttributeSelectionManagerExtended_MarkerSize();
    public static string get_DescriptionAttributeLegendCell_SeriesSymbolSize();
    public static string get_DescriptionAttributeLegendCellColumn_SeriesSymbolSize();
    public static string get_DescriptionAttributeCoolBarSlotCollection_OnClear();
    public static string get_DescriptionAttributeCoolBarItemCollection_OnClear();
    public static string get_DescriptionAttributeCoolBarCollection_OnClear();
    public static string get_DescriptionAttributeDisabled();
    public static string get_DescriptionAttributeCoolBarDockDictionary_FindFirst();
    public static string get_DescriptionAttributeCoolBarDictionary_FindFirst();
    public static string get_DescriptionAttributeCoolBarItemDictionary_FindFirst();
    public static string get_DescriptionAttributeChartSerializer_ResetWhenLoading();
    public static string get_DescriptionAttributeTitleFontColor();
    public static string get_DescriptionAttributeCoolBarButtonEvent_Click();
    public static string get_DescriptionAttributeTitle_BackGradientType();
    public static string get_DescriptionAttributeBackGradientType3();
    public static string get_DescriptionAttributeBackGradientType4();
    public static string get_DescriptionAttributeImageAnnotation_BackGradientType();
    public static string get_DescriptionAttributeStripLine_BackGradientType();
    public static string get_DescriptionAttributeChartArea_BackGradientType();
    public static string get_DescriptionAttributeBackGradientType8();
    public static string get_DescriptionAttributeLegendItem_BackGradientType();
    public static string get_DescriptionAttributeCalloutAnnotation_BackGradientType();
    public static string get_DescriptionAttributeLegend_BackGradientType();
    public static string get_DescriptionAttributeBackGradientType12();
    public static string get_DescriptionAttributeBackGradientType13();
    public static string get_DescriptionAttributeRepeatDelay();
    public static string get_DescriptionAttributeChart_RepeatDelay();
    public static string get_DescriptionAttributeDataSource();
    public static string get_DescriptionAttributeCustomLabels();
    public static string get_DescriptionAttributeBorderSkinAttributes_FrameBackImage();
    public static string get_DescriptionAttributeDundasNumericEditor_MaxValue();
    public static string get_DescriptionAttributeBorderSkinAttributes_FrameBackColor();
    public static string get_DescriptionAttributeLabelBorderStyle();
    public static string get_DescriptionAttributeCoolBarGripper_Down();
    public static string get_DescriptionAttributeCoolBarRectangle_Rectangle();
    public static string get_DescriptionAttributeArrowAnnotation_ArrowAnnotation();
    public static string get_DescriptionAttributeCursor_AxisType();
    public static string get_DescriptionAttributeLegendItem_Cells();
    public static string get_DescriptionAttributeBorderSkinAttributes();
    public static string get_DescriptionAttributeBorderSkinAttributes_BorderSkinAttributes();
    public static string get_DescriptionAttributeCoolBarSlotCollection_OnRemoveComplete();
    public static string get_DescriptionAttributeCoolBarItemCollection_OnRemoveComplete();
    public static string get_DescriptionAttributeCoolBarCollection_OnRemoveComplete();
    public static string get_DescriptionAttributeChartToolBar_FrameBorderColor();
    public static string get_DescriptionAttributeBorderSkinAttributes_FrameBorderColor();
    public static string get_DescriptionAttributeSubAxisCollection_SubAxisCollection();
    public static string get_DescriptionAttributeAllowSelecting();
    public static string get_DescriptionAttributeChartEvent_Customize();
    public static string get_DescriptionAttributeInPopulation();
    public static string get_DescriptionAttributeDuration();
    public static string get_DescriptionAttributeChartMirror_TitlePlacement();
    public static string get_DescriptionAttributeEnableImage();
    public static string get_DescriptionAttributeCommand_Toggled();
    public static string get_DescriptionAttributeImageAnnotation_ImageAnnotation();
    public static string get_DescriptionAttributeAxisDataView_SmallScrollSize();
    public static string get_DescriptionAttributeAxisScaleSegment_Interval();
    public static string get_DescriptionAttributeCursor_Interval();
    public static string get_DescriptionAttributeInterval4();
    public static string get_DescriptionAttributeStripLine_Interval();
    public static string get_DescriptionAttributeInterval6();
    public static string get_DescriptionAttributeLabel_Interval();
    public static string get_DescriptionAttributeStripLine_TitleLineAlignment();
    public static string get_DescriptionAttributeChart_BorderlineColor();
    public static string get_DescriptionAttributeMaximum();
    public static string get_DescriptionAttributeLegend_TitleBackColor();
    public static string get_DescriptionAttributeYAxisName();
    public static string get_DescriptionAttributeElementPosition_Auto();
    public static string get_DescriptionAttributeSeries_YAxisType();
    public static string get_DescriptionAttributeCoolMenuOrganizer_MenuPopupHandler();
    public static string get_DescriptionAttributeTextAnnotation_LineStyle();
    public static string get_DescriptionAttributeFinancialMarker_LineStyle();
    public static string get_DescriptionAttributeLineStyle4();
    public static string get_DescriptionAttributeCursor_LineStyle();
    public static string get_DescriptionAttributeLineStyle6();
    public static string get_DescriptionAttributeLineStyle7();
    public static string get_DescriptionAttributeAxisScaleBreakStyle_LineStyle();
    public static string get_DescriptionAttributeLineStyle9();
    public static string get_DescriptionAttributeLogarithmBase();
    public static string get_DescriptionAttributeCoolMenuItem_ImageID();
    public static string get_DescriptionAttributeCoolBarButtonControl_ImageID();
    public static string get_DescriptionAttributeCommand_ImageID();
    public static string get_DescriptionAttributeAntiAlias();
    public static string get_DescriptionAttributeAxisPosition();
    public static string get_DescriptionAttributeCoolBarCollection_OnSetComplete();
    public static string get_DescriptionAttributeCoolBarSlotCollection_OnSetComplete();
    public static string get_DescriptionAttributeCoolBarItemCollection_OnSetComplete();
    public static string get_DescriptionAttributeStripLine_BackImageMode();
    public static string get_DescriptionAttributeBackImageMode3();
    public static string get_DescriptionAttributeBackImageMode4();
    public static string get_DescriptionAttributeLegend_BackImageMode();
    public static string get_DescriptionAttributeTitle_BackImageMode();
    public static string get_DescriptionAttributeChartArea_BackImageMode();
    public static string get_DescriptionAttributeCoolMenuOrganizer_DisplayingImage();
    public static string get_DescriptionAttributeChartSerializer_IgnoreUnknownXmlAttributes();
    public static string get_DescriptionAttributeAxisScaleSegment_Tag();
    public static string get_DescriptionAttributeLegendItem_Tag();
    public static string get_DescriptionAttributeCustomLabel_Tag();
    public static string get_DescriptionAttributeTag5();
    public static string get_DescriptionAttributeDundasNumericEditor_Tag();
    public static string get_DescriptionAttributeCoolBar_MinimumHeight();
    public static string get_DescriptionAttributeAngleTrackFormEvent_ValueChanged();
    public static string get_DescriptionAttributeImageAnnotation_ImageMode();
    public static string get_DescriptionAttributeLegend();
    public static string get_DescriptionAttributeLegend_Legend();
    public static string get_DescriptionAttributeSeries_Legend();
    public static string get_DescriptionAttributeCommand_Shortcut();
    public static string get_DescriptionAttributeDataPointComparer_DataPointComparer();
    public static string get_DescriptionAttributeBackHatchStyle();
    public static string get_DescriptionAttributeCalloutAnnotation_BackHatchStyle();
    public static string get_DescriptionAttributeBackHatchStyle4();
    public static string get_DescriptionAttributeBackHatchStyle5();
    public static string get_DescriptionAttributeLegendItem_BackHatchStyle();
    public static string get_DescriptionAttributeTitle_BackHatchStyle();
    public static string get_DescriptionAttributeLegend_BackHatchStyle();
    public static string get_DescriptionAttributeBackHatchStyle9();
    public static string get_DescriptionAttributeImageAnnotation_BackHatchStyle();
    public static string get_DescriptionAttributeCoolBarButtonControl_ButtonStyle();
    public static string get_DescriptionAttributeCoolBarAdornments_CoolBarAdornments();
    public static string get_DescriptionAttributeCoolBarDictionary_Item();
    public static string get_DescriptionAttributeChartAreaCollection_Item();
    public static string get_DescriptionAttributeLegendCollection_Item();
    public static string get_DescriptionAttributeCoolBarItemDictionary_Item();
    public static string get_DescriptionAttributeAnnotationCollection_Item();
    public static string get_DescriptionAttributeSubAxisCollection_Item();
    public static string get_DescriptionAttributeSeriesCollection_Item();
    public static string get_DescriptionAttributeCoolBarSlotCollection_Item();
    public static string get_DescriptionAttributeFinancialMarkersCollection_Item();
    public static string get_DescriptionAttributeCoolBarItemCollection_Item();
    public static string get_DescriptionAttributeAnnotationPathPointCollection_Item();
    public static string get_DescriptionAttributeLegendCellColumnCollection_Item();
    public static string get_DescriptionAttributeCoolBarSimpleCollection_Item();
    public static string get_DescriptionAttributeCoolBarRectangleCollection_Item();
    public static string get_DescriptionAttributeAxisScaleSegmentCollection_Item();
    public static string get_DescriptionAttributeCoolBarDockDictionary_Item();
    public static string get_DescriptionAttributeLegendCellCollection_Item();
    public static string get_DescriptionAttributeCoolMenuItemInfo_Item();
    public static string get_DescriptionAttributeCoolBarCollection_Item();
    public static string get_DescriptionAttributeNamedImagesCollection_Item();
    public static string get_DescriptionAttributeCommand_CommandId();
    public static string get_DescriptionAttributeCoolBarRectangleCollection_CoolBarRectangleCollection();
    public static string get_DescriptionAttributeAxisScaleSegment_ScaleMinimum();
    public static string get_DescriptionAttributeSmartLabels();
    public static string get_DescriptionAttributeSeries_SmartLabels();
    public static string get_DescriptionAttributeSmartLabels_SmartLabels();
    public static string get_DescriptionAttributeChart_BorderlineStyle();
    public static string get_DescriptionAttributeChartMirror_EnableContextMenu();
    public static string get_DescriptionAttributeBorderSkinAttributes_FrameBackImageMode();
    public static string get_DescriptionAttributeMinorTickMark();
    public static string get_DescriptionAttributeMapAreasCollection_MapAreasCollection();
    public static string get_DescriptionAttributeMovingDirection();
    public static string get_DescriptionAttributeIResultOutput_IResultOutput();
    public static string get_DescriptionAttributeCursor_UserSelection();
    public static string get_DescriptionAttributeCoolBarItemDictionary_CoolBarItemDictionary();
    public static string get_DescriptionAttributeChartArea();
    public static string get_DescriptionAttributeSeries_ChartArea();
    public static string get_DescriptionAttributeChartArea_ChartArea();
    public static string get_DescriptionAttributeToolTipEventArgs_HitTestResult();
    public static string get_DescriptionAttributeAxisScaleSegment_AxisScaleSegment();
    public static string get_DescriptionAttributeCoolBarSlot_CoolBarSlot();
    public static string get_DescriptionAttributeCoolMenuOrganizer_DrawCheckBox();
    public static string get_DescriptionAttributeLabelHref();
    public static string get_DescriptionAttributeCoolBarButton_OnClick();
    public static string get_DescriptionAttributeCoolBarButtonControl_OnClick();
    public static string get_DescriptionAttributeLegend_ItemColumnSeparatorColor();
    public static string get_DescriptionAttributeCoolBarSlotCollection_OnInsert();
    public static string get_DescriptionAttributeCoolBarItemCollection_OnInsert();
    public static string get_DescriptionAttributeCoolBarCollection_OnInsert();
    public static string get_DescriptionAttributeDataManipulator();
    public static string get_DescriptionAttributeTitle_Color();
    public static string get_DescriptionAttributeLegendItem_Color();
    public static string get_DescriptionAttributeColor4();
    public static string get_DescriptionAttributeMargins_Right();
    public static string get_DescriptionAttributeRight3();
    public static string get_DescriptionAttributeChart_OnBackPaint();
    public static string get_DescriptionAttributeLineColor();
    public static string get_DescriptionAttributeLineColor3();
    public static string get_DescriptionAttributeTextAnnotation_LineColor();
    public static string get_DescriptionAttributeLineColor5();
    public static string get_DescriptionAttributeCursor_LineColor();
    public static string get_DescriptionAttributeAxisScaleBreakStyle_LineColor();
    public static string get_DescriptionAttributeLineColor8();
    public static string get_DescriptionAttributeFinancialMarker_LineColor();
    public static string get_DescriptionAttributeAxisScrollBar_LineColor();
    public static string get_DescriptionAttributeImageAnnotation_LineColor();
    public static string get_DescriptionAttributeFadingAnimation_StartTextColor();
    public static string get_DescriptionAttributeCoolBar_ImageList();
    public static string get_DescriptionAttributeCoolMenuOrganizer_ImageList();
    public static string get_DescriptionAttributeArrowAnnotation_ArrowStyle();
    public static string get_DescriptionAttributeArrowStyle_ArrowStyle();
    public static string get_DescriptionAttributeCalloutLineColor();
    public static string get_DescriptionAttributeSeries_XValueType();
    public static string get_DescriptionAttributeCoolMenuOrganizer_PopupBackgroundColor();
    public static string get_DescriptionAttributeCoolMenuItem_OnItemPropertyChanged();
    public static string get_DescriptionAttributeAnnotationGroup_Annotations();
    public static string get_DescriptionAttributeAnnotations3();
    public static string get_DescriptionAttributeCoolMenuOrganizer_DrawBackground();
    public static string get_DescriptionAttributeMinorGrid();
    public static string get_DescriptionAttributeCoolMenuItem_ToolTipText();
    public static string get_DescriptionAttributeToolTipText3();
    public static string get_DescriptionAttributeDundasNumericEditor_MaxLength();
    public static string get_DescriptionAttributeCoolBarSlot_Owner();
    public static string get_DescriptionAttributeCoolBarCollection_Owner();
    public static string get_DescriptionAttributeCoolBarItemCollection_Owner();
    public static string get_DescriptionAttributeCoolBarTextBoxControl_Owner();
    public static string get_DescriptionAttributeCoolBarButtonControl_Owner();
    public static string get_DescriptionAttributeCoolBarSlotCollection_Owner();
    public static string get_DescriptionAttributeCoolBar_Owner();
    public static string get_DescriptionAttributeCoolBarComboBoxControl_Owner();
    public static string get_DescriptionAttributeCoolBarSeparatorControl_Owner();
    public static string get_DescriptionAttributeOwner11();
    public static string get_DescriptionAttributeCoolBarGripper_Owner();
    public static string get_DescriptionAttributeCoolBarGripper_OnMouseUp();
    public static string get_DescriptionAttributeCoolBarButtonControl_OnMouseUp();
    public static string get_DescriptionAttributeCommand_Description();
    public static string get_DescriptionAttributeCoolBarSlotCollection_OnClearComplete();
    public static string get_DescriptionAttributeCoolBarCollection_OnClearComplete();
    public static string get_DescriptionAttributeCoolBarItemCollection_OnClearComplete();
    public static string get_DescriptionAttributeMapArea_Custom();
    public static string get_DescriptionAttributeCoolBarSimpleCollection_CoolBarSimpleCollection();
    public static string get_DescriptionAttributeChart_EnableViewState();
    public static string get_DescriptionAttributeChartArea3DStyle_Enable3D();
    public static string get_DescriptionAttributeInterlacedColor();
    public static string get_DescriptionAttributeLegendCellColumn_Margins();
    public static string get_DescriptionAttributeMargins_Margins();
    public static string get_DescriptionAttributeLegendCell_Margins();
    public static string get_DescriptionAttributeLegendItem_MarkerColor();
    public static string get_DescriptionAttributeMarkerColor3();
    public static string get_DescriptionAttributeSelectionManagerExtended_MarkerColor();
    public static string get_DescriptionAttributeChart_Size();
    public static string get_DescriptionAttributeTickMark_Size();
    public static string get_DescriptionAttributeAxisScaleSegment_Size();
    public static string get_DescriptionAttributeAxisDataView_Size();
    public static string get_DescriptionAttributeAxisScrollBar_Size();
    public static string get_DescriptionAttributeViewEventArgs_NewSize();
    public static string get_DescriptionAttributeSeries_XAxisType();
    public static string get_DescriptionAttributeAllowOutsidePlotArea();
    public static string get_DescriptionAttributeLegendItem_MarkerStyle();
    public static string get_DescriptionAttributeSelectionManagerExtended_MarkerStyle();
    public static string get_DescriptionAttributeMarkerStyle4();
    public static string get_DescriptionAttributeLegendCell_ImageSize();
    public static string get_DescriptionAttributeView();
    public static string get_DescriptionAttributeSeriesCollection_SeriesCollection();
    public static string get_DescriptionAttributeCursorEventArgs_NewPosition();
    public static string get_DescriptionAttributeViewEventArgs_NewPosition();
    public static string get_DescriptionAttributeCommand_Image();
    public static string get_DescriptionAttributeLegendCell_Image();
    public static string get_DescriptionAttributeNamedImage_Image();
    public static string get_DescriptionAttributeImageAnnotation_Image();
    public static string get_DescriptionAttributeLegendItem_Image();
    public static string get_DescriptionAttributeCustomLabel_Image();
    public static string get_DescriptionAttributeAxisScaleSegment_IntervalOffset();
    public static string get_DescriptionAttributeIntervalOffset3();
    public static string get_DescriptionAttributeLabel_IntervalOffset();
    public static string get_DescriptionAttributeCursor_IntervalOffset();
    public static string get_DescriptionAttributeIntervalOffset6();
    public static string get_DescriptionAttributeStripLine_IntervalOffset();
    public static string get_DescriptionAttributeLegend_DockInsideChartArea();
    public static string get_DescriptionAttributeTitle_DockInsideChartArea();
    public static string get_DescriptionAttributeChart_RenderType();
    public static string get_DescriptionAttributeFinancialMarker_SecondYIndex();
    public static string get_DescriptionAttributeAxisScaleBreakStyle_CollapsibleSpaceThreshold();
    public static string get_DescriptionAttributeAnimationElement_AnimationElement();
    public static string get_DescriptionAttributeCommandResult_Reason();
    public static string get_DescriptionAttributeChartEvent_AxisViewChanging();
    public static string get_DescriptionAttributeChartEvent2_AxisViewChanging();
    public static string get_DescriptionAttributeLabelCalloutStyle_LabelCalloutStyle();
    public static string get_DescriptionAttributeCoolBarImageHelper_CoolBarImageHelper();
    public static string get_DescriptionAttributeLabelMapAreaAttributes();
    public static string get_DescriptionAttributeCoolBarButtonControl_Hot();
    public static string get_DescriptionAttributePath();
    public static string get_DescriptionAttributeLegendItem_SeriesPointIndex();
    public static string get_DescriptionAttributeMapAreas();
    public static string get_DescriptionAttributeTickMark_TickMark();
    public static string get_DescriptionAttributeLegendCellColumn_LegendCellColumn();
    public static string get_DescriptionAttributeCoolBar_ToolTipHandler();
    public static string get_DescriptionAttributeCoolMenuOrganizer_MenuItemTextColor();
    public static string get_DescriptionAttributeLegendItem_LegendItem();
    public static string get_DescriptionAttributeTitleAlignment();
    public static string get_DescriptionAttributeStripLine_TitleAlignment();
    public static string get_DescriptionAttributeLegend_TitleAlignment();
    public static string get_DescriptionAttributeCoolMenuOrganizer_PopupTextColor();
    public static string get_DescriptionAttributeCoolMenuOrganizer_PopupFocusColor();
    public static string get_DescriptionAttributeElementPosition_ElementPosition();
    public static string get_DescriptionAttributeCustomLabel_To();
    public static string get_DescriptionAttributeFinancialMarker_FirstPointIndex();
    public static string get_DescriptionAttributeCoolBarComboBox_ResizeContent();
    public static string get_DescriptionAttributeCoolBar_ResizeContent();
    public static string get_DescriptionAttributeCoolBarButton_ResizeContent();
    public static string get_DescriptionAttributeCoolBarTextBox_ResizeContent();
    public static string get_DescriptionAttributeCoolBarDock_ResizeContent();
    public static string get_DescriptionAttributeCoolBarGripper_ResizeContent();
    public static string get_DescriptionAttributeResizeContent8();
    public static string get_DescriptionAttributeCoolMenuOrganizer_RaiseOrganizerPropertyChangedEvent();
    public static string get_DescriptionAttributeLabel_FontAngle();
    public static string get_DescriptionAttributeFontAngle3();
    public static string get_DescriptionAttributeIntervalAutoMode();
    public static string get_DescriptionAttributeFadingAnimation_StartBorderColor();
    public static string get_DescriptionAttributeStripLine_StripWidth();
    public static string get_DescriptionAttributeAnimationBase_AnimationBase();
    public static string get_DescriptionAttributeConstructor();
    public static string get_DescriptionAttributeConstructor3();
    public static string get_DescriptionAttributeCursor_UserEnabled();
    public static string get_DescriptionAttributeBorderSkinAttributes_FrameBorderWidth();
    public static string get_DescriptionAttributeChart_AnimationTheme();
    public static string get_DescriptionAttributeBorderSkin();
    public static string get_DescriptionAttributeToolBarAttributes_BorderSkin();
    public static string get_DescriptionAttributeAxisScaleSegment_Position();
    public static string get_DescriptionAttributeAxisDataView_Position();
    public static string get_DescriptionAttributeTitle_Position();
    public static string get_DescriptionAttributeLegend_Position();
    public static string get_DescriptionAttributeChartArea_Position();
    public static string get_DescriptionAttributeCursor_Position();
    public static string get_DescriptionAttributeToolBarAttributes_Position();
    public static string get_DescriptionAttributeCommand_ImageTransparentColor();
    public static string get_DescriptionAttributeLegendCell_ImageTransparentColor();
    public static string get_DescriptionAttributeCustomLabel_ImageTransparentColor();
    public static string get_DescriptionAttributeImageAnnotation_ImageTransparentColor();
    public static string get_DescriptionAttributeSubAxis_ParentAxis();
    public static string get_DescriptionAttributeAnnotationCollectionEditor_AnnotationCollectionEditor();
    public static string get_DescriptionAttributeBottom();
    public static string get_DescriptionAttributeMargins_Bottom();
    public static string get_DescriptionAttributeAxisScaleBreakStyle_AxisScaleBreakStyle();
    public static string get_DescriptionAttributeChart_CallbackManager();
    public static string get_DescriptionAttributeLegend_HeaderSeparator();
    public static string get_DescriptionAttributeChartArea3DStyle_PointDepth();
    public static string get_DescriptionAttributeAnnotationGroup_AnnotationGroup();
    public static string get_DescriptionAttributeLabelBackColor();
    public static string get_DescriptionAttributeAnnotationPathPointCollection_AnnotationPathPointCollection();
    public static string get_DescriptionAttributeStripLine_StripWidthType();
    public static string get_DescriptionAttributeCustomLabel_From();
    public static string get_DescriptionAttributePoint3D_PointF();
    public static string get_DescriptionAttributeCoolMenuItemInfo_ItemRectangle();
    public static string get_DescriptionAttributeSelectionManagerExtended_EnableDrawing();
    public static string get_DescriptionAttributeCommand_CommandUIList();
    public static string get_DescriptionAttributeMovingAnimation_StartPositionY();
    public static string get_DescriptionAttributeChartEvent_Callback();
    public static string get_DescriptionAttributeStripLine_BorderWidth();
    public static string get_DescriptionAttributeLegendItem_BorderWidth();
    public static string get_DescriptionAttributeBorderWidth4();
    public static string get_DescriptionAttributeToolBarAttributes_BorderWidth();
    public static string get_DescriptionAttributeLegend_BorderWidth();
    public static string get_DescriptionAttributeChartArea_BorderWidth();
    public static string get_DescriptionAttributeBorderWidth8();
    public static string get_DescriptionAttributeTitle_BorderWidth();
    public static string get_DescriptionAttributeDundasNumericEditor_Value();
    public static string get_DescriptionAttributeCursor_SelectionEnd();
    public static string get_DescriptionAttributeLineAnnotation_LineAnnotation();
    public static string get_DescriptionAttributeAnnotationSmartLabels_AnnotationSmartLabels();
    public static string get_DescriptionAttributeLabelBorderColor();
    public static string get_DescriptionAttributeCustomLabel_ImageMapAreaAttributes();
    public static string get_DescriptionAttributeCoolBarButton_RecalcLayout();
    public static string get_DescriptionAttributeCoolBarTextBox_RecalcLayout();
    public static string get_DescriptionAttributeCoolBarSlot_RecalcLayout();
    public static string get_DescriptionAttributeCoolBar_RecalcLayout();
    public static string get_DescriptionAttributeCoolBarDock_RecalcLayout();
    public static string get_DescriptionAttributeCoolBarGripper_RecalcLayout();
    public static string get_DescriptionAttributeCoolBarComboBox_RecalcLayout();
    public static string get_DescriptionAttributeRecalcLayout9();
    public static string get_DescriptionAttributeUpdateUIPart_UpdateUIPart();
    public static string get_DescriptionAttributeCoolBarComboBoxControl_CoolBarComboBoxControl();
    public static string get_DescriptionAttributeAnnotationGroup_Visible();
    public static string get_DescriptionAttributeChartArea_Visible();
    public static string get_DescriptionAttributeTitle_Visible();
    public static string get_DescriptionAttributeCommand_Visible();
    public static string get_DescriptionAttributeVisible6();
    public static string get_DescriptionAttributeLegendItem_Separator();
    public static string get_DescriptionAttributeCoolBarSeparatorControl_Separator();
    public static string get_DescriptionAttributeLegendCell_CellType();
    public static string get_DescriptionAttributeSelectionManagerExtended_MarkerBorderWidth();
    public static string get_DescriptionAttributeMarkerBorderWidth3();
    public static string get_DescriptionAttributeLegendItem_MarkerBorderWidth();
    public static string get_DescriptionAttributeCommand_Index();
    public static string get_DescriptionAttributeChart_Serializer();
    public static string get_DescriptionAttributeAnimationElementsCollection_AnimationElementsCollection();
    public static string get_DescriptionAttributeAxisX();
    public static string get_DescriptionAttributeChartArea_AxisX();
    public static string get_DescriptionAttributeDundasNumericEditor_IncrementBy();
    public static string get_DescriptionAttributeImageType();
    public static string get_DescriptionAttributeCursor_SelectionStart();
    public static string get_DescriptionAttributePolygonAnnotation_EndCap();
    public static string get_DescriptionAttributeEndCap3();
    public static string get_DescriptionAttributeLabelsAutoFit();
    public static string get_DescriptionAttributeLegendCellColumn_HeaderText();
    public static string get_DescriptionAttributeMapEnabled();
    public static string get_DescriptionAttributeAxisDataView_Zoomable();
    public static string get_DescriptionAttributeCommand_UseLastSubcommand();
    public static string get_DescriptionAttributeDataManager_PaletteCustomColors();
    public static string get_DescriptionAttributeChart_PaletteCustomColors();
    public static string get_DescriptionAttributeLegend_ItemColumnSeparator();
    public static string get_DescriptionAttributeCoolBarGripper_OnMouseMove();
    public static string get_DescriptionAttributeCoolBarButtonControl_OnMouseMove();
    public static string get_DescriptionAttributeCursorEventArgs_NewSelectionEnd();
    public static string get_DescriptionAttributeLegendItem_SeriesName();
    public static string get_DescriptionAttributeIResultOutput_Indent();
    public static string get_DescriptionAttributeChartAreas();
    public static string get_DescriptionAttributeFadingAnimation_FadingAnimation();
    public static string get_DescriptionAttributeOrganizerProperty_OrganizerProperty();
    public static string get_DescriptionAttributeChartArea_AlignWithChartArea();
    public static string get_DescriptionAttributeLegend_MaxAutoSize();
    public static string get_DescriptionAttributeLineAnchorCap_LineAnchorCap();
    public static string get_DescriptionAttributeAnnotationCollection_AnnotationCollection();
    public static string get_DescriptionAttributeScaleSegments();
    public static string get_DescriptionAttributeGrid_Grid();
    public static string get_DescriptionAttributeCommandResult_IsFailed();
    public static string get_DescriptionAttributeChartArea_EquallySizedAxesFont();
    public static string get_DescriptionAttributeChartEvent_CustomizeMapAreas();
    public static string get_DescriptionAttributeCommandUIItem_ResetCommandName();
    public static string get_DescriptionAttributeCoolBarCollection_CoolBarCollection();
    public static string get_DescriptionAttributeChartArea3DStyle_WallWidth();
    public static string get_DescriptionAttributeCoolMenuItemInfo_TextRectangle();
    public static string get_DescriptionAttributeCustomLabel_Row();
    public static string get_DescriptionAttributeLegend_TitleSeparatorColor();
    public static string get_DescriptionAttributeToolBarAttributes_BackColor();
    public static string get_DescriptionAttributeBackColor3();
    public static string get_DescriptionAttributeLegendCellColumn_BackColor();
    public static string get_DescriptionAttributeBackColor5();
    public static string get_DescriptionAttributeLegendCell_BackColor();
    public static string get_DescriptionAttributeAxisScrollBar_BackColor();
    public static string get_DescriptionAttributeBackColor8();
    public static string get_DescriptionAttributeBackColor9();
    public static string get_DescriptionAttributeTitle_BackColor();
    public static string get_DescriptionAttributeChartArea_BackColor();
    public static string get_DescriptionAttributeStripLine_BackColor();
    public static string get_DescriptionAttributeLegend_BackColor();
    public static string get_DescriptionAttributeImageAnnotation_BackColor();
    public static string get_DescriptionAttributeChartSerializer_TemplateMode();
    public static string get_DescriptionAttributeChartEvent_SaveState();
    public static string get_DescriptionAttributeSeries_ShadowColor();
    public static string get_DescriptionAttributeTitle_ShadowColor();
    public static string get_DescriptionAttributeShadowColor4();
    public static string get_DescriptionAttributeLegend_ShadowColor();
    public static string get_DescriptionAttributeAnnotationGroup_ShadowColor();
    public static string get_DescriptionAttributeLegendItem_ShadowColor();
    public static string get_DescriptionAttributeChartArea_ShadowColor();
    public static string get_DescriptionAttributeToolBarAttributes_ShadowColor();
    public static string get_DescriptionAttributeAxisScaleBreakStyle_MaxNumberOfBreaks();
    public static string get_DescriptionAttributeZoomResetEventArgs_NumberOfViews();
    public static string get_DescriptionAttributeCommandUIItem_Parameters();
    public static string get_DescriptionAttributeCommand_Parameters();
    public static string get_DescriptionAttributeParameters4();
    public static string get_DescriptionAttributeChartEvent_AxisScrollBarClicked();
    public static string get_DescriptionAttributeAnchorY();
    public static string get_DescriptionAttributeLegend_AutoFitMinFontSize();
    public static string get_DescriptionAttributeChartEvent_AnnotationTextChanged();
    public static string get_DescriptionAttributeChart_Series();
    public static string get_DescriptionAttributeSeries_Series();
    public static string get_DescriptionAttributeToolBarAttributes_Items();
    public static string get_DescriptionAttributeContextMenuAttributes_Items();
    public static string get_DescriptionAttributeCoolBar_Items();
    public static string get_DescriptionAttributeChart_RepeatAnimation();
    public static string get_DescriptionAttributeResizingMode_ResizingMode();
    public static string get_DescriptionAttributeMapArea_Shape();
    public static string get_DescriptionAttributeLegend_TextWrapThreshold();
    public static string get_DescriptionAttributeChart_CallbackStateContent();
    public static string get_DescriptionAttributeLabelOutsidePlotAreaStyle_LabelOutsidePlotAreaStyle();
    public static string get_DescriptionAttributeSubAxes();
    public static string get_DescriptionAttributeCoolMenuOrganizer_UserPreferenceChangedHandler();
    public static string get_DescriptionAttributeCommandFiringEventArgs_Context();
    public static string get_DescriptionAttributeAxisScaleBreakStyle_StartFromZero();
    public static string get_DescriptionAttributeStartFromZero3();
    public static string get_DescriptionAttributeCoolBarDock_CoolBarDock();
    public static string get_DescriptionAttributeRectangleAnnotation_RectangleAnnotation();
    public static string get_DescriptionAttributeHref();
    public static string get_DescriptionAttributeMapArea_Href();
    public static string get_DescriptionAttributeAxis_Href();
    public static string get_DescriptionAttributeLegendCell_Href();
    public static string get_DescriptionAttributeLegendCellColumn_Href();
    public static string get_DescriptionAttributeHref7();
    public static string get_DescriptionAttributeCustomLabel_Href();
    public static string get_DescriptionAttributeStripLine_Href();
    public static string get_DescriptionAttributeTitle_Href();
    public static string get_DescriptionAttributeAxisScaleBreakStyle_BreakLineType();
    public static string get_DescriptionAttributeCoolBarSlotCollection_OnRemove();
    public static string get_DescriptionAttributeCoolBarItemCollection_OnRemove();
    public static string get_DescriptionAttributeCoolBarCollection_OnRemove();
    public static string get_DescriptionAttributeCoolBarButtonControl_OnMouseLeave();
    public static string get_DescriptionAttributeChartEvent_CursorPositionChanged();
    public static string get_DescriptionAttributeChartSerializer_SerializableContent();
    public static string get_DescriptionAttributeCoolMenuOrganizer_SelectedBackgroundColor();
    public static string get_DescriptionAttributeCalloutAnnotation_CalloutStyle();
    public static string get_DescriptionAttributeCalloutStyle3();
    public static string get_DescriptionAttributeCalloutStyle_CalloutStyle();
    public static string get_DescriptionAttributeFinancialMarker_MarkerType();
    public static string get_DescriptionAttributeCoolBarSlot_DrawingOrder();
    public static string get_DescriptionAttributeCoolMenuOrganizer_DrawImage();
    public static string get_DescriptionAttributeToolBarAttributes_Docking();
    public static string get_DescriptionAttributeTitle_Docking();
    public static string get_DescriptionAttributeLegend_Docking();
    public static string get_DescriptionAttributeTripleResolutionImageEvent_ImageChanged();
    public static string get_DescriptionAttributeAnnotationGroup_AllowAnchorMoving();
    public static string get_DescriptionAttributeAllowAnchorMoving3();
    public static string get_DescriptionAttributeCommand_Subcommands();
    public static string get_DescriptionAttributeCoolBar_ShowCustomizeButton();
    public static string get_DescriptionAttributeCoolMenuOrganizer_AttachMenu();
    public static string get_DescriptionAttributeTitleColor();
    public static string get_DescriptionAttributeStripLine_TitleColor();
    public static string get_DescriptionAttributeLegend_TitleColor();
    public static string get_DescriptionAttributeTitles();
    public static string get_DescriptionAttributeChart_UI();
    public static string get_DescriptionAttributeUI3();
    public static string get_DescriptionAttributeCoolBarComboBox_OnTextChanged();
    public static string get_DescriptionAttributeCoolBarTextBoxControl_OnTextChanged();
    public static string get_DescriptionAttributeCoolBarTextBox_OnTextChanged();
    public static string get_DescriptionAttributeCoolBarComboBoxControl_OnTextChanged();
    public static string get_DescriptionAttributeFontHelper_FontHelper();
    public static string get_DescriptionAttributePolygonAnnotation_PolygonAnnotation();
    public static string get_DescriptionAttributeLabel_IntervalType();
    public static string get_DescriptionAttributeIntervalType3();
    public static string get_DescriptionAttributeIntervalType4();
    public static string get_DescriptionAttributeStripLine_IntervalType();
    public static string get_DescriptionAttributeAxisScaleSegment_IntervalType();
    public static string get_DescriptionAttributeCursor_IntervalType();
    public static string get_DescriptionAttributeCoolMenuOrganizer_SeparatorColor();
    public static string get_DescriptionAttributeLegendItem_SeparatorColor();
    public static string get_DescriptionAttributeSelectionManagerExtended_MouseButtonToSelectElement();
    public static string get_DescriptionAttributeTripleResolutionImage_OnImageChanged();
    public static string get_DescriptionAttributeCommandName();
    public static string get_DescriptionAttributeCommandUIItem_CommandName();
    public static string get_DescriptionAttributeSeries_YValuesPerPoint();
    public static string get_DescriptionAttributeBorderSkinAttributes_FrameBackHatchStyle();
    public static string get_DescriptionAttributeChartEvent_PrePaint();
    public static string get_DescriptionAttributeChartEvent2_PrePaint();
    public static string get_DescriptionAttributeLegendHref();
    public static string get_DescriptionAttributeCoolBarSimpleCollection_Contains();
    public static string get_DescriptionAttributeCoolBarDockDictionary_Contains();
    public static string get_DescriptionAttributeCoolBarItemCollection_Contains();
    public static string get_DescriptionAttributeCoolBarCollection_Contains();
    public static string get_DescriptionAttributeCoolBarRectangleCollection_Contains();
    public static string get_DescriptionAttributeCoolBarSlotCollection_Contains();
    public static string get_DescriptionAttributeCoolBarItemDictionary_Contains();
    public static string get_DescriptionAttributeCoolBarDictionary_Contains();
    public static string get_DescriptionAttributeCustomLabel_ImageHref();
    public static string get_DescriptionAttributeLabel_Format();
    public static string get_DescriptionAttributeChartSerializer_Format();
    public static string get_DescriptionAttributeChartMirror_AreaSmartLabels();
    public static string get_DescriptionAttributeStripLines();
    public static string get_DescriptionAttributeChart_ViewStateData();
    public static string get_DescriptionAttributeChartMirror_TickMarksEnabled();
    public static string get_DescriptionAttributeTripleResolutionImage_ListImage();
    public static string get_DescriptionAttributeTitle_DockOffset();
    public static string get_DescriptionAttributeAnchorDataPoint();
    public static string get_DescriptionAttributeLabelFormat();
    public static string get_DescriptionAttributeSuppressExceptions();
    public static string get_DescriptionAttributeTripleResolutionImage_IconImage();
    public static string get_DescriptionAttributeSeries_EmptyPointStyle();
    public static string get_DescriptionAttributeChartEvent_LoadState();
    public static string get_DescriptionAttributeChart_GetCommand();
    public static string get_DescriptionAttributeChartUI_GetCommand();
    public static string get_DescriptionAttributeCustomAttributes();
    public static string get_DescriptionAttributeChartArea_BackImage();
    public static string get_DescriptionAttributeBackImage3();
    public static string get_DescriptionAttributeStripLine_BackImage();
    public static string get_DescriptionAttributeTitle_BackImage();
    public static string get_DescriptionAttributeBackImage6();
    public static string get_DescriptionAttributeLegend_BackImage();
    public static string get_DescriptionAttributeChartMirror_LegendPlacement();
    public static string get_DescriptionAttributeLegendCellCollection_LegendCellCollection();
    public static string get_DescriptionAttributeCoolMenuOrganizerEvent_OrganizerPropertyChanged();
    public static string get_DescriptionAttributeCoolMenuOrganizer_SetItemImageIndex();
    public static string get_DescriptionAttributeCoolBarDock_Slots();
    public static string get_DescriptionAttributeCustomLabelsCollection_CustomLabelsCollection();
    public static string get_DescriptionAttributeChart_ChartData();
    public static string get_DescriptionAttributeFadingAnimation_StartFillColor();
    public static string get_DescriptionAttributeCommand_SupportedElements();
    public static string get_DescriptionAttributeCustomLabel_MarkColor();
    public static string get_DescriptionAttributePalette();
    public static string get_DescriptionAttributeChartEvent_AxisViewZoomReset();
    public static string get_DescriptionAttributeScaleBreakStyle();
    public static string get_DescriptionAttributeCoolBarSimpleCollection_Insert();
    public static string get_DescriptionAttributeCoolBarSlotCollection_Insert();
    public static string get_DescriptionAttributeCoolBarItemCollection_Insert();
    public static string get_DescriptionAttributeCoolBarCollection_Insert();
    public static string get_DescriptionAttributeCoolBarRectangleCollection_Insert();
    public static string get_DescriptionAttributeCoolBarTextBox_CoolBarTextBox();
    public static string get_DescriptionAttributeSelectionManagerExtended_MouseButtonToSelectCollection();
    public static string get_DescriptionAttributeChart_ImageUrl();
    public static string get_DescriptionAttributeLegendItem_MarkerImage();
    public static string get_DescriptionAttributeMarkerImage3();
    public static string get_DescriptionAttributeLegend_InterlacedRowsColor();
    public static string get_DescriptionAttributeLegendCellColumn_ColumnType();
    public static string get_DescriptionAttributeCoolBarButtonControl_Latched();
    public static string get_DescriptionAttributeDundasNumericEditor_Decimals();
    public static string get_DescriptionAttributeChartArea_AlignOrientation();
    public static string get_DescriptionAttributeEnableTooltip();
    public static string get_DescriptionAttributeChart_SoftShadows();
    public static string get_DescriptionAttributeSoftShadows3();
    public static string get_DescriptionAttributeCoolBarComboBox_RaiseSelectedIndexChangedEvent();
    public static string get_DescriptionAttributeTripleResolutionImage_ThumbnailImage();
    public static string get_DescriptionAttributeChartUI_ContextMenu();
    public static string get_DescriptionAttributeCoolBarSeparator_CoolBarSeparator();
    public static string get_DescriptionAttributeCoolBarComboBox_CoolBarComboBox();
    public static string get_DescriptionAttributePrintingManager_PrintDocument();
    public static string get_DescriptionAttributeMinimum();
    public static string get_DescriptionAttributeCoolBarButtonControl_CoolBarButtonControl();
    public static string get_DescriptionAttributeAxisScaleSegment_ScaleMaximum();
    public static string get_DescriptionAttributeCoolMenuItemInfo_ImageRectangle();
    public static string get_DescriptionAttributeCoolBarDictionary_CoolBarDictionary();
    public static string get_DescriptionAttributeScrollBarEventArgs_MousePositionX();
    public static string get_DescriptionAttributeLabel_TruncatedLabels();
    public static string get_DescriptionAttributeCoolMenuItem_RaiseItemPropertyChangedEvent();
    public static string get_DescriptionAttributeCoolMenuOrganizer_ImageBackgroundColor();
    public static string get_DescriptionAttributeCustomLabel_GridTicks();
    public static string get_DescriptionAttributeCoolBarSlotCollection_CoolBarSlotCollection();
    public static string get_DescriptionAttributeLegendCellColumn_HeaderBackColor();
    public static string get_DescriptionAttributeTitle_TitleAlwaysHorizontal();
    public static string get_DescriptionAttributeTitleAlwaysHorizontal3();
    public static string get_DescriptionAttributeResultOutputType_ResultOutputType();
    public static string get_DescriptionAttributeImageAnnotation_Alignment();
    public static string get_DescriptionAttributeLegendCellColumn_Alignment();
    public static string get_DescriptionAttributeTitle_Alignment();
    public static string get_DescriptionAttributeLegendCell_Alignment();
    public static string get_DescriptionAttributeLegend_Alignment();
    public static string get_DescriptionAttributeAlignment7();
    public static string get_DescriptionAttributeAlignment8();
    public static string get_DescriptionAttributeChart_LicenseData();
    public static string get_DescriptionAttributeChartEvent_ToolbarMouseMoved();
    public static string get_DescriptionAttributeChart_OnCustomizeMapAreas();
    public static string get_DescriptionAttributeSubAxis_LocationOffset();
    public static string get_DescriptionAttributeLegendItemsCollection_LegendItemsCollection();
    public static string get_DescriptionAttributeLegendCellColumn_MinimumWidth();
    public static string get_DescriptionAttributeAnimatedElements();
    public static string get_DescriptionAttributeSelectionPointsStyle_SelectionPointsStyle();
    public static string get_DescriptionAttributeSelectionPointsStyle3();
    public static string get_DescriptionAttributeChartUI_ToolBar();
    public static string get_DescriptionAttributeChart_AnimationDuration();
    public static string get_DescriptionAttributeAxisY();
    public static string get_DescriptionAttributeChartArea_AxisY();
    public static string get_DescriptionAttributeTextFont();
    public static string get_DescriptionAttributeImageAnnotation_TextFont();
    public static string get_DescriptionAttributeTextFont4();
    public static string get_DescriptionAttributeTextFont5();
    public static string get_DescriptionAttributeAxisDataView_SizeType();
    public static string get_DescriptionAttributeMinMovingDistance();
    public static string get_DescriptionAttributeChartArea_CursorX();
    public static string get_DescriptionAttributeAxisDataView_SmallScrollMinSize();
    public static string get_DescriptionAttributeAxisDataView_SmallScrollMinSizeType();
    public static string get_DescriptionAttributeCalloutLineStyle();
    public static string get_DescriptionAttributeChart_Edition();
    public static string get_DescriptionAttributeAntiAliasing();
    public static string get_DescriptionAttributeAxisScrollBar_ButtonColor();
    public static string get_DescriptionAttributeArea3DStyle();
    public static string get_DescriptionAttributeChart();
    public static string get_DescriptionAttributeChart_Chart();
    public static string get_DescriptionAttributeChartToolBar_Chart();
    public static string get_DescriptionAttributeChartToolBar_PageColor();
    public static string get_DescriptionAttributeBorderSkinAttributes_PageColor();
    public static string get_DescriptionAttributeCoolMenuOrganizer_SelectedFocusColor();
    public static string get_DescriptionAttributeChartMirror_ShowLegend();
    public static string get_DescriptionAttributeGrowingAnimation_GrowingAnimation();
    public static string get_DescriptionAttributeDataPoint_DataPoint();
    public static string get_DescriptionAttributeChartArea3DStyle_Light();
    public static string get_DescriptionAttributeDataPointAttributes_DataPointAttributes();
    public static string get_DescriptionAttributeLegend_AutoFitText();
    public static string get_DescriptionAttributeChart_ForeColor();
    public static string get_DescriptionAttributeAllowTextEditing();
    public static string get_DescriptionAttributeCustomLabel_Text();
    public static string get_DescriptionAttributeLegendCell_Text();
    public static string get_DescriptionAttributeText4();
    public static string get_DescriptionAttributeTitle_Text();
    public static string get_DescriptionAttributeLegendCellColumn_Text();
    public static string get_DescriptionAttributeCommand_Text();
    public static string get_DescriptionAttributeToolTipEventArgs_Text();
    public static string get_DescriptionAttributeMultiline();
    public static string get_DescriptionAttributeChartEvent_CommandFiring();
    public static string get_DescriptionAttributeTextAnnotation_TextAnnotation();
    public static string get_DescriptionAttributeCommand_ToggleGroupId();
    public static string get_DescriptionAttributeOrganizerPropertyChangedEventArgs_Property();
    public static string get_DescriptionAttributeItemPropertyChangedEventArgs_Property();
    public static string get_DescriptionAttributeCommand();
    public static string get_DescriptionAttributeCommandUIItem_Command();
    public static string get_DescriptionAttributeChartUI_SelectedChartObject();
    public static string get_DescriptionAttributeClipToChartArea();
    public static string get_DescriptionAttributeAnnotationGroup_ClipToChartArea();
    public static string get_DescriptionAttributeChartEvent_BackPaint();
    public static string get_DescriptionAttributeSeries_YValueType();
    public static string get_DescriptionAttributeInternalIntervalType();
    public static string get_DescriptionAttributeCalloutAnnotation_CalloutAnchorCap();
    public static string get_DescriptionAttributeLogarithmic();
    public static string get_DescriptionAttributeElements();
    public static string get_DescriptionAttributeCoolBarComboBox_RaiseTextChangedEvent();
    public static string get_DescriptionAttributeCoolBarTextBox_RaiseTextChangedEvent();
    public static string get_DescriptionAttributeLegend_ItemColumnSpacing();
    public static string get_DescriptionAttributeCompanyName();
    public static string get_DescriptionAttributeMarksNextToAxis();
    public static string get_DescriptionAttributeCoolMenuOrganizer_DisplayingText();
    public static string get_DescriptionAttributeChartEvent_SelectionRangeChanged();
    public static string get_DescriptionAttributeCoolMenuItemInfo_AcceleratorRectangle();
    public static string get_DescriptionAttributeDataPointCollection_DataPointCollection();
    public static string get_DescriptionAttributeDundasNumericEditor_MinValue();
    public static string get_DescriptionAttributeTitleCollection_TitleCollection();
    public static string get_DescriptionAttributeHorizontalLineAnnotation_HorizontalLineAnnotation();
    public static string get_DescriptionAttributeCoolBarTextBoxControl_TextBox();
    public static string get_DescriptionAttributeChartToolBar_BorderSkinStyle();
    public static string get_DescriptionAttributeLegendCellColumn_HeaderColor();
    public static string get_DescriptionAttributeLegendCell_LegendCell();
    public static string get_DescriptionAttributeDataPoint_ToolTip();
    public static string get_DescriptionAttributeChart_DataSetName();
    public static string get_DescriptionAttributeChart_DynamicWidth();
    public static string get_DescriptionAttributeChart_DynamicHeight();
    public static string get_DescriptionAttributeBackImagePosition();
    public static string get_DescriptionAttributeBackImageSource();
    public static string get_DescriptionAttributeBackImageMIMEType();
    public static string get_DescriptionAttributeBackImageValue();
    public static string get_CategoryAttributeStateManagement();
    public static string get_CategoryAttributeCellColumns();
    public static string get_CategoryAttributeAxis();
    public static string get_CategoryAttributeUserInterface();
    public static string get_CategoryAttributeEditing();
    public static string get_CategoryAttributeSize();
    public static string get_CategoryAttributePosition();
    public static string get_CategoryAttributeViewState();
    public static string get_CategoryAttributeInterval();
    public static string get_CategoryAttributeAppearance();
    public static string get_CategoryAttributeOlap();
    public static string get_CategoryAttributeOlapToolbar();
    public static string get_CategoryAttributeDocking();
    public static string get_CategoryAttributeDataSource();
    public static string get_CategoryAttributeAxisView();
    public static string get_CategoryAttributeStartColors();
    public static string get_CategoryAttributeLayout();
    public static string get_CategoryAttribute3D();
    public static string get_CategoryAttributeTickMarks();
    public static string get_CategoryAttributeData();
    public static string get_CategoryAttributeTitle();
    public static string get_CategoryAttributeToolTips();
    public static string get_CategoryAttributeLabels();
    public static string get_CategoryAttributeGridTickMarks();
    public static string get_CategoryAttributeLabelAppearance();
    public static string get_CategoryAttributeHeader();
    public static string get_CategoryAttributeChartArea();
    public static string get_CategoryAttributeAxes();
    public static string get_CategoryAttributeFinancialMarkers();
    public static string get_CategoryAttributeImage();
    public static string get_CategoryAttributeEmptyPoints();
    public static string get_CategoryAttributeCommand();
    public static string get_CategoryAttributeAlignment();
    public static string get_CategoryAttributeCallbacks();
    public static string get_CategoryAttributeAnnotation();
    public static string get_CategoryAttributeMarker();
    public static string get_CategoryAttributeChart();
    public static string get_CategoryAttributeLocation();
    public static string get_CategoryAttributeToolTip();
    public static string get_CategoryAttributeMap();
    public static string get_CategoryAttributeMapArea();
    public static string get_CategoryAttributeLabel();
    public static string get_CategoryAttributeShape();
    public static string get_CategoryAttributeMisc();
    public static string get_CategoryAttributeSerializer();
    public static string get_CategoryAttributeSubAxes();
    public static string get_CategoryAttributeSeriesItems();
    public static string get_CategoryAttributeDataView();
    public static string get_CategoryAttributeCharttitle();
    public static string get_CategoryAttributeLegend();
    public static string get_CategoryAttributeAnimation();
    public static string get_CategoryAttributeAction();
    public static string get_CategoryAttributeScale();
    public static string get_CategoryAttributeAnnotations();
    public static string get_CategoryAttributeAnchor();
    public static string get_CategoryAttributeBehavior();
    public static string get_CategoryAttributeCursor();
    public static string get_CategoryAttributeAnchorAxes();
    public static string get_AccessibilityChartControlName();
    public static string get_FormatErrorString();
    public static string ExceptionImageLoaderUnsupportedType(string typeName);
    public static string ExceptionImageLoaderIncorrectImageUrl(string url);
    public static string ExceptionImageLoaderIncorrectImageLocation(string location);
    public static string ExceptionAnnotationNameIsNotUnique(string name);
    public static string ExceptionAnnotationNameAlreadyExistsInCollection(string name);
    public static string ExceptionAnnotationNameNotFound(string name);
    public static string ExceptionTitleNameIsNotUnique(string name);
    public static string ExceptionTitleNameAddedIsNotUnique(string name);
    public static string ExceptionTitleNameNotFound(string name);
    public static string ExceptionDataSeriesNameNotFound(string name);
    public static string ExceptionDataSeriesPointTypeUnsupported(string type);
    public static string ExceptionDataSeriesYValueIndexNotExists(string yValueIndex, string seriesName);
    public static string ExceptionDataSeriesKeywordFormatInvalid(string format);
    public static string ExceptionDataSeriesChartAreaInvalid(string chartArea, string seriesName);
    public static string ExceptionSeriesNameIsNotUnique(string name);
    public static string ExceptionSeriesNameAddedIsNotUnique(string name);
    public static string ExceptionEditorChartTypeRegistryServiceInObjectInaccessible(string objectName);
    public static string ExceptionLegendDesignerMarginObjectInvalid(string string);
    public static string ExceptionChartAreaAddedIsNotUnique(string name);
    public static string ExceptionChartAreaInsertedIsNotUnique(string name);
    public static string ExceptionChartAreaAlreadyExistsInCollection(string name);
    public static string ExceptionAxisLabelsIntervalTypeUnsupported(string type);
    public static string ExceptionSubAxisNameNotFoundShort(string name);
    public static string ExceptionSubAxisNameIsNotUnique(string name);
    public static string ExceptionNamedImageNotFound(string name);
    public static string ExceptionNamedImageAddedIsNotUnique(string name);
    public static string ExceptionNamedImageInsertedIsNotUnique(string name);
    public static string ExceptionLegendNameIsNotUnique(string name);
    public static string ExceptionLegendNotFound(string name);
    public static string ExceptionLegendAddedIsNotUnique(string name);
    public static string ExceptionLegendDockedChartAreaIsMissing(string name);
    public static string ExceptionLegendReferencedInSeriesNotFound(string seriesName, string legendName);
    public static string ExceptionLegendSeparatorTypeUnknown(string type);
    public static string ExceptionLegendCellTypeUnknown(string type);
    public static string ExceptionLegendColumnAlreadyExistsInCollection(string name);
    public static string ExceptionLegendCellNameAlreadyExistsInCollection(string name);
    public static string ExceptionLegendCellNotFound(string name);
    public static string ExceptionLegendCellColumnNotFound(string name);
    public static string ExceptionLegendCellColumnAlreadyExistsInCollection(string name);
    public static string ExceptionSvgMaximumGradientsNumberExceeded(string number);
    public static string ExceptionChartWebInteractivityFeatureRenderTypeInvalid(string renderType);
    public static string ExceptionChartWebInteractivityFeatureImageTypeInvalid(string renderType);
    public static string ExceptionChartAreaNameReferenceInvalid(string chartArea1, string chartArea2);
    public static string ExceptionEventManagerUnsupportedType(string name);
    public static string ExceptionTraceManagerUnsupportedType(string name);
    public static string ExceptionChartTypeRegistryUnsupportedType(string name);
    public static string ExceptionChartTypeNameIsNotUnique(string name);
    public static string ExceptionChartTypeUnknown(string name);
    public static string ExceptionChartTypeRequiresYValues(string name, string yValues);
    public static string ExceptionChartTypeSecondaryYAxisUnsupported(string name);
    public static string ExceptionChartTypeSecondaryXAxisUnsupported(string name);
    public static string ExceptionChartTypeCanNotCombine(string type1, string type2);
    public static string ExceptionBorderTypeRegistryUnsupportedType(string name);
    public static string ExceptionBorderTypeNameIsNotUnique(string name);
    public static string ExceptionBorderTypeUnknown(string name);
    public static string ExceptionChartSerializerUnsupportedType(string name);
    public static string ExceptionChartSerializerDefaultConstructorUndefined(string property);
    public static string ExceptionChartSerializerTypeUnsupported(string type);
    public static string ExceptionChartSerializerPropertyNameUnknown(string property, string object);
    public static string ExceptionChartSerializerBinaryTypeUnsupported(string type);
    public static string ExceptionChartSerializerBinaryHashCodeDuplicate(string anem1, string name2);
    public static string ExceptionChartSerializerPropertyNameDeserializationFailed(string property, string object);
    public static string ExceptionChartSerializerDefaultValueTypeInvalid(string property);
    public static string ExceptionChartSerializerObjectTypeFailed(string name);
    public static string ExceptionDataManipulatorYValuesIndexExceeded(string formula);
    public static string ExceptionDataManipulatorGroupingFormulaAlreadyDefined(string formulaName);
    public static string ExceptionDataManipulatorGroupingFormulaFormatInvalid(string formula);
    public static string ExceptionDataManipulatorGroupingFormulaNameInvalid(string name);
    public static string ExceptionColorConverterUnsupportedType(string name);
    public static string ExceptionChartPictureUnsupportedType(string name);
    public static string ExceptionChartLocationNotFound(string location);
    public static string ExceptionSubAxisNameNotFound(string name);
    public static string ExceptionSubAxisNameAlreadyExistsInCollection(string name);
    public static string ExceptionChartTitleSetIsNotUnique(string name);
    public static string ExceptionChartTitleAddedIsNotUnique(string name);
    public static string ExceptionChartTitleDockedChartAreaIsMissing(string name);
    public static string ExceptionDataManagerUnsupportedType(string name);
    public static string ExceptionKeywordsRegistryUnsupportedType(string name);
    public static string ExceptionCustomAttributesRegistryUnsupportedType(string name);
    public static string ExceptionFormulaModuleNameIsNotUnique(string name);
    public static string ExceptionFormulaModuleRegistryUnsupportedType(string name);
    public static string ExceptionFormulaModuleNameUnknown(string name);
    public static string ExceptionColumnNameNotFound(string name);
    public static string ExceptionDataPointConverterUnavailableSorting(string value, string count);
    public static string ExceptionDataPointYValuesCountMismatch(string count);
    public static string ExceptionDataPointYValuesBindingCountMismatch(string count);
    public static string ExceptionDataPointYValuesSettingCountMismatch(string count);
    public static string ExceptionAttributeNameIsNotUnique(string name);
    public static string ExceptionFormulaInvalidPeriod(string name);
    public static string ExceptionFormulaNotEnoughDataPoints(string name);
    public static string ExceptionKagiAttributeFormatInvalid(string attribute);
    public static string ExceptionKagiAttributeOutOfRange(string name);
    public static string ExceptionFunnelStyleUnknown(string style);
    public static string ExceptionErrorBarTypeInvalid(string type);
    public static string ExceptionErrorBarTypeFormatInvalid(string format);
    public static string ExceptionChartCanNotCombine(string name);
    public static string ExceptionCustomAttributeValueInvalid(string value, string name);
    public static string ExceptionCustomAttributeValueInvalid2(string name);
    public static string ExceptionCustomAttributeAngleOutOfRange(string name);
    public static string ExceptionCustomAttributeIsNotInRange0to1(string name);
    public static string ExceptionCustomAttributeIsNotInRange0to100(string name);
    public static string ExceptionCustomAttributeIsNotLargerThenZiro(string name);
    public static string ExceptionCustomAttributeIsNotInRange0to50(string name);
    public static string ExceptionCustomAttributeSeriesNameNotFound(string attributeName, string seriesName);
    public static string ExceptionCustomAttributeMustBeMoreThenValue(string attributeName, string value);
    public static string ExceptionCustomAttributeMustBeBiggerThenValue(string attributeName, string value);
    public static string ExceptionCustomAttributeMustBeInRange(string attributeName, string fromValue, string toValue);
    public static string ExceptionCustomAttributeTypeUnsupported(string type);
    public static string ExceptionCustomAttributeTypeOrMaximumPossibleValueInvalid(string attributeName);
    public static string ExceptionCustomAttributeTypeOrMinimumPossibleValueUnsupported(string name);
    public static string ExceptionCustomAttributeTypeOrMinimumPossibleValueInvalid(string attributeName);
    public static string ExceptionFormulaDataSeriesNameNotFoundInCollection(string name);
    public static string ExceptionFormulaDataSeriesNameNotFound(string name);
    public static string ExceptionFormulaDataFormatInvalid(string name);
    public static string ExceptionFormulaDataSeriesAreNotAlignedDifferentXValues(string series1, string series2);
    public static string ExceptionFormulaDataSeriesAreNotAlignedDifferentDataPoints(string series1, string series2);
    public static string ExceptionFormulaNotFound(string name);
    public static string ExceptionForecastingNotEnoughDataPoints(string minimum);
    public static string ExceptionCommandNotFound(string name);
    public static string ExceptionCommandCanNotConvertParams(string text);
    public static string ExceptionAjaxSeriesNameCanNotDeserialized(string seriesName);
    public static string ExceptionAjaxZoomAreaNotFound(string areaName);
    public static string ExceptionAjaxZoomAreaIndexedNotFound(string areaName);
    public static string ExceptionChartAreaZoomSecondaryAxisUnsupported(string seriesName);
    public static string ExceptionHttpHandlerResourceNotFound(string resourceName);
    public static string ExceptionHttpHandlerCanNotLoadType(string type);
    public static string ExceptionHttpHandlerImageHandlerInterfaceUnsupported(string name);
    public static string ExceptionHttpHandlerParameterUnknown(string name, string value);
    public static string ExceptionHttpHandlerTempDirectoryInvalid(string directory);
    public static string ExceptionHttpHandlerTempDirectoryUnaccesible(string directory);
    public static string ExceptionHttpHandlerStorageTypeUnsupported(string type);
    public static string ExceptionUtilitiesCanNotConvertStringToZoomIntervalData(string string);
    public static string ToolTipTitle(string toolTip);
    public static string TraceMessageBeginSortingDataPoints(string seriesName);
    public static string TraceMessageEndSortingDataPoints(string seriesName);
    public static string TraceMessageBeginPreparingChartDataInSeries(string seriesName);
    public static string TraceMessagePopulatingSeriesDataPoints(string seriesName);
    public static string TraceMessageSeriesPopulatedWithDataPoints(string seriesName, string dataPointsCount);
    public static string TraceMessageEndPreparingChartDataInSeries(string seriesName);
    public static string EvenLogMessageChartImageFileTimeToLive(string minutes);
    public static string MessageYValueIndexInvalid(string maxIndex);
    public static string MessageFileWillBeDeletedConfirm(string fileName);
    public static string MessageSeriesWillBeDeletedConfirm(string seriesName);
    public static string MessageChartAreaWillBeDeletedConfirm(string chartArea);
    public static string MethodTransactionEdit(string objectName);
    public static string MethodTransactionDeleteChartArea(string areaName);
    public static string ActionMethodConfigureDots(string headerName);
    public static string AnimationTreeNodePointName(string name);
    public static string AnimationTreeNodeSeries(string name);
    public static string AnimationTreeNodeChartArea(string name);
    public static string AnimationTreeNodeTitle(string name);
    public static string AnimationTreeNodeAnnotation(string name);
    public static string AnimationTreeNodeLegend(string name);
    public static string AccessibilityTitleName(string name);
    public static string AccessibilityAnnotationName(string name);
    public static string AccessibilityLegendName(string name);
    public static string AccessibilitySeriesName(string name);
    public static string AccessibilityDataPointName(int index);
    public static string AccessibilityDataPointLabelName(int index);
    public static string AccessibilityLegendTitleName(string name);
    public static string AccessibilityChartAreaName(string name);
    public static string AccessibilityChartAxisTitleName(string name);
    public static string AccessibilityChartAxisMajorGridlinesName(string name);
    public static string AccessibilityChartAxisMinorGridlinesName(string name);
}
[AttributeUsageAttribute("32767")]
internal class Microsoft.Reporting.Chart.WebForms.SRCategoryAttribute : CategoryAttribute {
    public SRCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class Microsoft.Reporting.Chart.WebForms.SRDescriptionAttribute : DescriptionAttribute {
    private bool replaced;
    public string Description { get; }
    public SRDescriptionAttribute(string description);
    public virtual string get_Description();
}
internal class Microsoft.Reporting.Chart.WebForms.Statistics : object {
    private string tempOutputSeriesName;
    private FormulaData formulaData;
    public Statistics(FormulaData formulaData);
    public ZTestResult ZTest(double hypothesizedMeanDifference, double varianceFirstGroup, double varianceSecondGroup, double probability, string firstInputSeriesName, string secondInputSeriesName);
    public TTestResult TTestUnequalVariances(double hypothesizedMeanDifference, double probability, string firstInputSeriesName, string secondInputSeriesName);
    public TTestResult TTestEqualVariances(double hypothesizedMeanDifference, double probability, string firstInputSeriesName, string secondInputSeriesName);
    public TTestResult TTestPaired(double hypothesizedMeanDifference, double probability, string firstInputSeriesName, string secondInputSeriesName);
    private void RemoveEmptyPoints(string seriesName);
    public FTestResult FTest(double probability, string firstInputSeriesName, string secondInputSeriesName);
    public AnovaResult Anova(double probability, string inputSeriesNames);
    public double NormalDistribution(double zValue);
    public double InverseNormalDistribution(double probability);
    public double FDistribution(double value, int firstDegreeOfFreedom, int secondDegreeOfFreedom);
    public double InverseFDistribution(double probability, int firstDegreeOfFreedom, int secondDegreeOfFreedom);
    public double TDistribution(double value, int degreeOfFreedom, bool oneTail);
    public double InverseTDistribution(double probability, int degreeOfFreedom);
    public double Covariance(string firstInputSeriesName, string secondInputSeriesName);
    public double Correlation(string firstInputSeriesName, string secondInputSeriesName);
    public double Mean(string inputSeriesName);
    public double Median(string inputSeriesName);
    public double Variance(string inputSeriesName, bool sampleVariance);
    public double BetaFunction(double m, double n);
    public double GammaFunction(double value);
}
[SRDescriptionAttribute("DescriptionAttributeStripLine_StripLine")]
[DefaultPropertyAttribute("IntervalOffset")]
internal class Microsoft.Reporting.Chart.WebForms.StripLine : object {
    internal Axis axis;
    private double intervalOffset;
    private double interval;
    private DateTimeIntervalType intervalType;
    internal DateTimeIntervalType intervalOffsetType;
    internal bool interlaced;
    private double stripWidth;
    private DateTimeIntervalType stripWidthType;
    private Color backColor;
    private ChartHatchStyle backHatchStyle;
    private string backImage;
    private ChartImageWrapMode backImageMode;
    private Color backImageTranspColor;
    private ChartImageAlign backImageAlign;
    private GradientType backGradientType;
    private Color backGradientEndColor;
    private Color borderColor;
    private int borderWidth;
    private ChartDashStyle borderStyle;
    private string title;
    private Color titleColor;
    private Font titleFont;
    private StringAlignment titleAlignment;
    private StringAlignment titleLineAlignment;
    private string toolTip;
    private string href;
    private string attributes;
    private object mapAreaTag;
    private TextOrientation textOrientation;
    private bool IsTextVertical { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttribute_TextOrientation")]
[NotifyParentPropertyAttribute("True")]
public TextOrientation TextOrientation { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_IntervalOffset")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.AxisLabelDateValueConverter")]
public double IntervalOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_IntervalOffsetType")]
[RefreshPropertiesAttribute("1")]
public DateTimeIntervalType IntervalOffsetType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_Interval")]
public double Interval { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_IntervalType")]
[RefreshPropertiesAttribute("1")]
public DateTimeIntervalType IntervalType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_StripWidth")]
public double StripWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeData")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_StripWidthType")]
[RefreshPropertiesAttribute("1")]
public DateTimeIntervalType StripWidthType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_BackColor")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_BorderColor")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_BorderStyle")]
public ChartDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_BorderWidth")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeBackImage18")]
[NotifyParentPropertyAttribute("True")]
public string BackImage { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_BackImageMode")]
public ChartImageWrapMode BackImageMode { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackImageTransparentColor")]
public Color BackImageTransparentColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackImageAlign")]
public ChartImageAlign BackImageAlign { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_BackGradientType")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_BackGradientEndColor")]
public Color BackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeBackHatchStyle9")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("False")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("StripLine")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_Name")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string Name { get; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_Title")]
[NotifyParentPropertyAttribute("True")]
public string Title { get; public set; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_TitleColor")]
[NotifyParentPropertyAttribute("True")]
public Color TitleColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.StringAlignment", "Far")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_TitleAlignment")]
[NotifyParentPropertyAttribute("True")]
public StringAlignment TitleAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.StringAlignment", "Near")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_TitleLineAlignment")]
[NotifyParentPropertyAttribute("True")]
public StringAlignment TitleLineAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeTitle")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_TitleFont")]
[NotifyParentPropertyAttribute("True")]
public Font TitleFont { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_ToolTip")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_Href")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    private object Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.Tag { get; private set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeStripLine_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    internal Axis GetAxis();
    private bool get_IsTextVertical();
    private TextOrientation GetTextOrientation();
    internal void Paint(ChartGraphics graph, CommonElements common, bool drawLinesOnly);
    private void Draw3DStrip(ChartGraphics graph, RectangleF rect, bool horizontal);
    private void InitAnimation3D(CommonElements common, RectangleF position, float positionZ, float depth, Matrix3D matrix, ChartGraphics graph, Axis axis);
    private void PaintTitle(ChartGraphics graph, PointF point1, PointF point2);
    private void PaintTitle(ChartGraphics graph, RectangleF rect);
    public TextOrientation get_TextOrientation();
    public void set_TextOrientation(TextOrientation value);
    public double get_IntervalOffset();
    public void set_IntervalOffset(double value);
    public DateTimeIntervalType get_IntervalOffsetType();
    public void set_IntervalOffsetType(DateTimeIntervalType value);
    public double get_Interval();
    public void set_Interval(double value);
    public DateTimeIntervalType get_IntervalType();
    public void set_IntervalType(DateTimeIntervalType value);
    public double get_StripWidth();
    public void set_StripWidth(double value);
    public DateTimeIntervalType get_StripWidthType();
    public void set_StripWidthType(DateTimeIntervalType value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public ChartDashStyle get_BorderStyle();
    public void set_BorderStyle(ChartDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public string get_BackImage();
    public void set_BackImage(string value);
    public ChartImageWrapMode get_BackImageMode();
    public void set_BackImageMode(ChartImageWrapMode value);
    public Color get_BackImageTransparentColor();
    public void set_BackImageTransparentColor(Color value);
    public ChartImageAlign get_BackImageAlign();
    public void set_BackImageAlign(ChartImageAlign value);
    public GradientType get_BackGradientType();
    public void set_BackGradientType(GradientType value);
    public Color get_BackGradientEndColor();
    public void set_BackGradientEndColor(Color value);
    public ChartHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(ChartHatchStyle value);
    public string get_Name();
    public string get_Title();
    public void set_Title(string value);
    public Color get_TitleColor();
    public void set_TitleColor(Color value);
    public StringAlignment get_TitleAlignment();
    public void set_TitleAlignment(StringAlignment value);
    public StringAlignment get_TitleLineAlignment();
    public void set_TitleLineAlignment(StringAlignment value);
    public Font get_TitleFont();
    public void set_TitleFont(Font value);
    public sealed virtual void set_ToolTip(string value);
    public sealed virtual string get_ToolTip();
    public sealed virtual void set_Href(string value);
    public sealed virtual string get_Href();
    private sealed virtual override object Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.set_Tag(object value);
    public sealed virtual void set_MapAreaAttributes(string value);
    public sealed virtual string get_MapAreaAttributes();
    private void Invalidate();
}
[DefaultMemberAttribute("Item")]
[SRDescriptionAttribute("DescriptionAttributeStripLinesCollection_StripLinesCollection")]
internal class Microsoft.Reporting.Chart.WebForms.StripLinesCollection : object {
    private ArrayList array;
    internal Axis axis;
    public StripLine Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public StripLinesCollection(Axis axis);
    public StripLine get_Item(int index);
    public void set_Item(int index, StripLine value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    public bool Contains(StripLine value);
    public int IndexOf(StripLine value);
    public void Remove(StripLine value);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public int Add(StripLine value);
    public sealed virtual int Add(object value);
    public void Insert(int index, StripLine value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    private void Invalidate();
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Chart.WebForms.SurfaceNames : Enum {
    public int value__;
    public static SurfaceNames Front;
    public static SurfaceNames Back;
    public static SurfaceNames Left;
    public static SurfaceNames Right;
    public static SurfaceNames Top;
    public static SurfaceNames Bottom;
}
internal class Microsoft.Reporting.Chart.WebForms.Svg.ChartParameters : SvgParameters {
    internal Color chartBrushColor;
    internal Color chartBrushSecondColor;
    internal Matrix chartMatrix;
    internal Font chartFont;
    internal StringFormat chartStringFormat;
    internal SvgGradientType chartSvgGradientType;
    internal Size chartPictureSize;
    internal WrapMode imageWrapMode;
    private SvgFillType svgFillType;
    private Color chartPenColor;
    private float chartPenWidth;
    private SvgDashStyle chartDashStyle;
    private FillMode tempFillMode;
    private Brush brush;
    private Pen pen;
    protected Color BrushColor { get; }
    public Brush Brush { get; public set; }
    public Pen Pen { get; public set; }
    protected Color BrushSecondColor { get; }
    protected SvgGradientType GradientType { get; }
    protected SvgFillType FillType { get; }
    protected Color PenColor { get; }
    protected double PenWidth { get; }
    protected SvgDashStyle DashStyle { get; }
    protected Matrix Transform { get; }
    protected Font Font { get; }
    protected StringFormat StringFormat { get; }
    public Size PictureSize { get; public set; }
    protected FillMode FillMode { get; protected set; }
    protected SvgLineCapStyle SvgLineCap { get; }
    protected SvgImageWrapMode ImageWrapMode { get; }
    protected Color TextColor { get; }
    protected virtual Color get_BrushColor();
    public Brush get_Brush();
    public void set_Brush(Brush value);
    public Pen get_Pen();
    public void set_Pen(Pen value);
    protected virtual Color get_BrushSecondColor();
    protected virtual SvgGradientType get_GradientType();
    protected virtual SvgFillType get_FillType();
    protected virtual Color get_PenColor();
    protected virtual double get_PenWidth();
    protected virtual SvgDashStyle get_DashStyle();
    protected virtual Matrix get_Transform();
    protected virtual Font get_Font();
    protected virtual StringFormat get_StringFormat();
    public virtual Size get_PictureSize();
    public virtual void set_PictureSize(Size value);
    protected virtual FillMode get_FillMode();
    protected virtual void set_FillMode(FillMode value);
    protected virtual SvgLineCapStyle get_SvgLineCap();
    protected virtual SvgImageWrapMode get_ImageWrapMode();
    protected virtual Color get_TextColor();
    protected string ToUSString(float number);
    protected string ToUSString(double number);
    protected virtual string GetX(double x);
    protected virtual string GetY(double y);
    protected virtual string GetX(PointF point);
    protected virtual string GetX(RectangleF rectangle);
    protected virtual string GetWidth(RectangleF rectangle);
    protected virtual string GetHeight(RectangleF rectangle);
    protected virtual string GetY(PointF point);
    protected virtual string GetY(RectangleF rectangle);
    private void SetBrush();
    private void SetPen();
}
internal class Microsoft.Reporting.Chart.WebForms.Svg.SvgChartGraphics : SvgRendering {
    private Graphics graphics;
    public Matrix Transform { get; public set; }
    public SmoothingMode SmoothingMode { get; public set; }
    public bool IsClipEmpty { get; }
    public Region Clip { get; public set; }
    public Graphics Graphics { get; public set; }
    public TextRenderingHint TextRenderingHint { get; public set; }
    public SvgChartGraphics(CommonElements common);
    public sealed virtual void DrawLine(Pen pen, PointF pt1, PointF pt2);
    public sealed virtual void DrawLine(Pen pen, float x1, float y1, float x2, float y2);
    public sealed virtual void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr);
    public sealed virtual void DrawEllipse(Pen pen, float x, float y, float width, float height);
    public sealed virtual void DrawCurve(Pen pen, PointF[] points, int offset, int numberOfSegments, float tension);
    public sealed virtual void DrawRectangle(Pen pen, int x, int y, int width, int height);
    public sealed virtual void DrawString(string s, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    public sealed virtual void DrawString(string s, Font font, Brush brush, PointF point, StringFormat format);
    public sealed virtual void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs);
    public sealed virtual void DrawRectangle(Pen pen, float x, float y, float width, float height);
    public sealed virtual void DrawPath(Pen pen, GraphicsPath path);
    public sealed virtual void DrawPie(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual void DrawArc(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual void DrawImage(Image image, RectangleF rect);
    public sealed virtual void DrawEllipse(Pen pen, RectangleF rect);
    public sealed virtual void DrawLines(Pen pen, PointF[] points);
    public sealed virtual void FillEllipse(Brush brush, RectangleF rect);
    public sealed virtual void FillPath(Brush brush, GraphicsPath path);
    public sealed virtual void FillRegion(Brush brush, Region region);
    public sealed virtual void FillRectangle(Brush brush, RectangleF rect);
    public sealed virtual void FillRectangle(Brush brush, float x, float y, float width, float height);
    public sealed virtual void FillPolygon(Brush brush, PointF[] points);
    public sealed virtual void FillPie(Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual Matrix get_Transform();
    public sealed virtual void set_Transform(Matrix value);
    public sealed virtual SmoothingMode get_SmoothingMode();
    public sealed virtual void set_SmoothingMode(SmoothingMode value);
    public sealed virtual void SetClip(RectangleF rect);
    public sealed virtual void ResetClip();
    public sealed virtual void SetClip(GraphicsPath path, CombineMode combineMode);
    public sealed virtual void TranslateTransform(float dx, float dy);
    public sealed virtual bool get_IsClipEmpty();
    public sealed virtual Region get_Clip();
    public sealed virtual void set_Clip(Region value);
    public sealed virtual Graphics get_Graphics();
    public sealed virtual void set_Graphics(Graphics value);
    public void SetGradient(Color firstColor, Color secondColor, GradientType gradientType);
    public sealed virtual void DrawPolygon(Pen pen, PointF[] points);
    public sealed virtual GraphicsState Save();
    public sealed virtual TextRenderingHint get_TextRenderingHint();
    public sealed virtual void set_TextRenderingHint(TextRenderingHint value);
    public sealed virtual void Restore(GraphicsState gstate);
    public sealed virtual SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    public sealed virtual SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat, Int32& charactersFitted, Int32& linesFilled);
    public sealed virtual SizeF MeasureString(string text, Font font);
    public sealed virtual void BeginSelection(string hRef, string title);
    public sealed virtual void EndSelection();
}
internal class Microsoft.Reporting.Chart.WebForms.Svg.SvgOpenParameters : ValueType {
    private bool m_toolTipsEnabled;
    private bool m_resizable;
    private bool m_preserveAspectRatio;
    public bool ToolTipsEnabled { get; public set; }
    public bool Resizable { get; public set; }
    public bool PreserveAspectRatio { get; public set; }
    public SvgOpenParameters(bool toolTipsEnabled, bool resizable, bool preserveAspectRatio);
    public bool get_ToolTipsEnabled();
    public void set_ToolTipsEnabled(bool value);
    public bool get_Resizable();
    public void set_Resizable(bool value);
    public bool get_PreserveAspectRatio();
    public void set_PreserveAspectRatio(bool value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(SvgOpenParameters other);
    public static bool op_Equality(SvgOpenParameters value1, SvgOpenParameters value2);
    public static bool op_Inequality(SvgOpenParameters value1, SvgOpenParameters value2);
}
internal abstract class Microsoft.Reporting.Chart.WebForms.Svg.SvgParameters : object {
    protected Color BrushColor { get; }
    protected Color TextColor { get; }
    protected Color BrushSecondColor { get; }
    protected SvgGradientType GradientType { get; }
    protected SvgFillType FillType { get; }
    protected FillMode FillMode { get; protected set; }
    protected SvgImageWrapMode ImageWrapMode { get; }
    protected Color PenColor { get; }
    protected double PenWidth { get; }
    protected SvgLineCapStyle SvgLineCap { get; }
    protected SvgDashStyle DashStyle { get; }
    protected Matrix Transform { get; }
    protected Font Font { get; }
    protected StringFormat StringFormat { get; }
    public Size PictureSize { get; public set; }
    protected abstract virtual string GetX(double x);
    protected abstract virtual string GetY(double y);
    protected abstract virtual string GetX(PointF point);
    protected abstract virtual string GetX(RectangleF rectangle);
    protected abstract virtual string GetWidth(RectangleF rectangle);
    protected abstract virtual string GetHeight(RectangleF rectangle);
    protected abstract virtual string GetY(PointF point);
    protected abstract virtual string GetY(RectangleF rectangle);
    protected abstract virtual Color get_BrushColor();
    protected abstract virtual Color get_TextColor();
    protected abstract virtual Color get_BrushSecondColor();
    protected abstract virtual SvgGradientType get_GradientType();
    protected abstract virtual SvgFillType get_FillType();
    protected abstract virtual FillMode get_FillMode();
    protected abstract virtual void set_FillMode(FillMode value);
    protected abstract virtual SvgImageWrapMode get_ImageWrapMode();
    protected abstract virtual Color get_PenColor();
    protected abstract virtual double get_PenWidth();
    protected abstract virtual SvgLineCapStyle get_SvgLineCap();
    protected abstract virtual SvgDashStyle get_DashStyle();
    protected abstract virtual Matrix get_Transform();
    protected abstract virtual Font get_Font();
    protected abstract virtual StringFormat get_StringFormat();
    public abstract virtual Size get_PictureSize();
    public abstract virtual void set_PictureSize(Size value);
}
internal class Microsoft.Reporting.Chart.WebForms.Svg.SvgRendering : ChartParameters {
    internal XmlTextWriter output;
    private int gradientIDNum;
    private int clipRegionIdNum;
    private bool selectionMode;
    private string gradientIDString;
    private Single[] oldMatrix;
    private bool antiAlias;
    internal bool antiAliasText;
    private bool transformOpen;
    private string toolTipsText;
    private string title;
    private bool toolTipsActive;
    private bool clipSet;
    private bool resizable;
    private Bitmap stringBitmap;
    private Graphics stringGraph;
    private string toolTipsScript;
    private string emptyLoadHandler;
    public void Open(XmlTextWriter svgWriter, Size pictureSize);
    public void SetTitle(string title);
    public void Open(XmlTextWriter svgWriter, Size pictureSize, SvgOpenParameters extraParameters);
    internal void Validate();
    public void Close();
    public void DrawLine(PointF point1, PointF point2);
    public void DrawLines(PointF[] points);
    public void DrawRectangle(RectangleF rect);
    private void SetRectangle(RectangleF rect);
    public void DrawPolygon(PointF[] points);
    private void SetPolygon(PointF[] points);
    public void DrawArc(RectangleF rect, float startAngle, float sweepAngle);
    public void DrawPie(RectangleF rect, float startAngle, float sweepAngle);
    private void SetPie(RectangleF rect, float startAngle, float sweepAngle);
    public void DrawEllipse(RectangleF rect);
    private void SetEllipse(RectangleF rect);
    public void DrawBezier(PointF pt1, PointF pt2, PointF pt3, PointF pt4);
    public void DrawBeziers(PointF[] points);
    public void DrawCurve(PointF[] points, float tension);
    public void DrawCurve(PointF[] points, int offset, int numberOfSegments, float tension);
    public void DrawPath(GraphicsPath path);
    public void DrawClosedCurve(PointF[] points, float tension);
    public void DrawImage(Image image, Rectangle destinationRect, int sourceX, int sourceY, int sourceWidth, int sourceHeight, GraphicsUnit sourceUnit, ImageAttributes imageAttr);
    public void DrawImage(Image image, RectangleF dstRect);
    public void DrawImage(Image image, Rectangle destinationRect, float sourceX, float sourceY, float sourceWidth, float sourceHeight, GraphicsUnit sourceUnit, ImageAttributes imageAttributes);
    public void FillTexturedRectangle(TextureBrush textureBrush, RectangleF dstRect);
    public void DrawString(string text, RectangleF layoutRect);
    public void DrawString(string text, PointF point);
    public void FillRectangle(RectangleF rect);
    public void FillPolygon(PointF[] points);
    public void FillPie(RectangleF rect, float startAngle, float sweepAngle);
    public void FillEllipse(RectangleF rect);
    public void FillClosedCurve(PointF[] points, float tension);
    public void FillPath(GraphicsPath path);
    public void FillBezier(PointF pt1, PointF pt2, PointF pt3, PointF pt4);
    public void FillCurve(PointF[] points, float tension);
    public void FillArc(RectangleF rect, float startAngle, float sweepAngle);
    private bool MatrixChanged();
    internal bool NoTransformMatrix();
    private void ResetTransformMatrix();
    public float WrapString(string text, RectangleF dstRectangle, String[]& stringArray);
    private String[] SplitText(string text);
    protected string ImageToString(Image image);
    private string GetDashStyle(SvgDashStyle dashStyle);
    internal string GetAlpha(Color color);
    internal string ColorToString(Color color);
    internal void SetStringAlignment(StringFormat stringFormat);
    internal void Transformations();
    public void SetSmoothingMode(bool antiAlias, bool shape);
    private string GetMatrix(Matrix matrix, bool setOldMatrix);
    private void SVGDefine(bool fill, bool outline);
    public void BeginSvgSelection(string href, string title);
    public void EndSvgSelection();
    internal void SetToolTip();
    internal void StartGraphicsParameters(bool fill, bool outline);
    internal void EndGraphicsParameters();
    private string SetGradient(Color firstColor, Color secondColor, SvgGradientType type);
    private void SetRadialGradient(string gradientID, Color firstColor, Color secondColor);
    private void SetLinearGradient(string gradientID, Color firstColor, Color secondColor, SvgGradientType type);
    public void SetClip(RectangleF rect);
    public void ResetClip();
}
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_TextAnnotation")]
internal class Microsoft.Reporting.Chart.WebForms.TextAnnotation : Annotation {
    private string text;
    private bool multiline;
    internal SizeF contentSize;
    internal bool isEllipse;
    internal bool restrictedPermissions;
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeText4")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeMultiline")]
public bool Multiline { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRDescriptionAttribute("DescriptionAttributeTextFont4")]
public Font TextFont { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public int LineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public ChartDashStyle LineStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
[NotifyParentPropertyAttribute("True")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_LineWidth")]
public Color BackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeTextAnnotation_AnnotationType")]
public string AnnotationType { get; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ParenthesizePropertyNameAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeSelectionPointsStyle3")]
internal SelectionPointsStyle SelectionPointsStyle { get; }
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual bool get_Multiline();
    public virtual void set_Multiline(bool value);
    public virtual Font get_TextFont();
    public virtual void set_TextFont(Font value);
    public virtual Color get_LineColor();
    public virtual void set_LineColor(Color value);
    public virtual int get_LineWidth();
    public virtual void set_LineWidth(int value);
    public virtual ChartDashStyle get_LineStyle();
    public virtual void set_LineStyle(ChartDashStyle value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ChartHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(ChartHatchStyle value);
    public virtual GradientType get_BackGradientType();
    public virtual void set_BackGradientType(GradientType value);
    public virtual Color get_BackGradientEndColor();
    public virtual void set_BackGradientEndColor(Color value);
    public virtual string get_AnnotationType();
    internal virtual SelectionPointsStyle get_SelectionPointsStyle();
    internal virtual void Paint(Chart chart, ChartGraphics graphics);
    internal RectangleF DrawText(ChartGraphics graphics, RectangleF textPosition, bool noSpacingForCenteredText, bool getTextPosition);
    internal virtual RectangleF GetContentPosition();
    internal virtual RectangleF GetTextSpacing(Boolean& annotationRelative);
}
internal enum Microsoft.Reporting.Chart.WebForms.TextAntiAliasingQuality : Enum {
    public int value__;
    public static TextAntiAliasingQuality Normal;
    public static TextAntiAliasingQuality High;
    public static TextAntiAliasingQuality SystemDefault;
}
internal enum Microsoft.Reporting.Chart.WebForms.TextOrientation : Enum {
    public int value__;
    public static TextOrientation Auto;
    public static TextOrientation Horizontal;
    public static TextOrientation Rotated90;
    public static TextOrientation Rotated270;
    public static TextOrientation Stacked;
}
internal enum Microsoft.Reporting.Chart.WebForms.TextStyle : Enum {
    public int value__;
    public static TextStyle Default;
    public static TextStyle Shadow;
    public static TextStyle Emboss;
    public static TextStyle Embed;
    public static TextStyle Frame;
}
[DefaultPropertyAttribute("Enabled")]
[SRDescriptionAttribute("DescriptionAttributeTickMark_TickMark")]
internal class Microsoft.Reporting.Chart.WebForms.TickMark : Grid {
    private TickMarkStyle style;
    private float size;
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeTickMark_Style")]
public TickMarkStyle Style { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeTickMark_Size")]
public float Size { get; public set; }
    public TickMark(Axis axis, bool major);
    internal void Paint(ChartGraphics graph, bool backElements);
    private double GetLogMinimum(double current, Series axisSeries);
    internal void PaintCustom(ChartGraphics graph, bool backElements);
    internal void Draw3DTickLine(ChartGraphics graph, PointF point1, PointF point2, bool horizontal, float scrollBarSize, bool backElements);
    internal void Draw3DTickLine(ChartGraphics graph, PointF point1, PointF point2, bool horizontal, float scrollBarSize, bool backElements, bool selectionMode);
    public TickMarkStyle get_Style();
    public void set_Style(TickMarkStyle value);
    public float get_Size();
    public void set_Size(float value);
}
internal enum Microsoft.Reporting.Chart.WebForms.TickMarkStyle : Enum {
    public int value__;
    public static TickMarkStyle None;
    public static TickMarkStyle Outside;
    public static TickMarkStyle Inside;
    public static TickMarkStyle Cross;
}
[SRDescriptionAttribute("DescriptionAttributeTitle5")]
internal class Microsoft.Reporting.Chart.WebForms.Title : object {
    private Chart chart;
    internal int titleBorderSpacing;
    private object mapAreaTag;
    private string name;
    private string text;
    private TextStyle style;
    private ElementPosition position;
    private bool visible;
    private Color backColor;
    private ChartHatchStyle backHatchStyle;
    private string backImage;
    private ChartImageWrapMode backImageMode;
    private Color backImageTranspColor;
    private ChartImageAlign backImageAlign;
    private GradientType backGradientType;
    private Color backGradientEndColor;
    private int shadowOffset;
    private Color shadowColor;
    private Color borderColor;
    private int borderWidth;
    private ChartDashStyle borderStyle;
    private Font font;
    private Color color;
    private ContentAlignment alignment;
    private Docking docking;
    private string dockToChartArea;
    private bool dockInsideChartArea;
    private int dockOffset;
    private string toolTip;
    private string href;
    private string mapAreaAttributes;
    private TextOrientation textOrientation;
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttribute_TextOrientation")]
[NotifyParentPropertyAttribute("True")]
public TextOrientation TextOrientation { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTitle_Visible")]
[ParenthesizePropertyNameAttribute("True")]
public bool Visible { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttributeMisc")]
[SRDescriptionAttribute("DescriptionAttributeTitle_Name")]
[DefaultValueAttribute("Chart Title")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttributeDocking")]
[BindableAttribute("True")]
[DefaultValueAttribute("NotSet")]
[SRDescriptionAttribute("DescriptionAttributeTitle_DockToChartArea")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.LegendAreaNameConverter")]
[NotifyParentPropertyAttribute("True")]
public string DockToChartArea { get; public set; }
    [SRCategoryAttribute("CategoryAttributeDocking")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTitle_DockInsideChartArea")]
[NotifyParentPropertyAttribute("True")]
public bool DockInsideChartArea { get; public set; }
    [SRCategoryAttribute("CategoryAttributeDocking")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeTitle_DockOffset")]
[NotifyParentPropertyAttribute("True")]
public int DockOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTitle_Position")]
[DefaultValueAttribute("Microsoft.Reporting.Chart.WebForms.ElementPosition", "Auto")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Chart.WebForms.Design.ElementPositionConverter")]
[SerializationVisibilityAttribute("2")]
public ElementPosition Position { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeTitle_Text")]
[NotifyParentPropertyAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeTitle_Style")]
[NotifyParentPropertyAttribute("True")]
public TextStyle Style { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeTitle_BackColor")]
[NotifyParentPropertyAttribute("True")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeTitle_BorderColor")]
[NotifyParentPropertyAttribute("True")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeTitle_BorderStyle")]
[NotifyParentPropertyAttribute("True")]
public ChartDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeTitle_BorderWidth")]
[NotifyParentPropertyAttribute("True")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeBackImage17")]
[NotifyParentPropertyAttribute("True")]
public string BackImage { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTitle_BackImageMode")]
public ChartImageWrapMode BackImageMode { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTitle_BackImageTransparentColor")]
public Color BackImageTransparentColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeBackImageAlign")]
public ChartImageAlign BackImageAlign { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTitle_BackGradientType")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTitle_BackGradientEndColor")]
public Color BackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTitle_BackHatchStyle")]
public ChartHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRDescriptionAttribute("DescriptionAttributeTitle_Font")]
[NotifyParentPropertyAttribute("True")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeTitle_Color")]
[NotifyParentPropertyAttribute("True")]
public Color Color { get; public set; }
    [SRCategoryAttribute("CategoryAttributeDocking")]
[BindableAttribute("True")]
[DefaultValueAttribute]
[SRDescriptionAttribute("DescriptionAttributeTitle_Alignment")]
[NotifyParentPropertyAttribute("True")]
public ContentAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CategoryAttributeDocking")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeTitle_Docking")]
[NotifyParentPropertyAttribute("True")]
public Docking Docking { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeTitle_ShadowOffset")]
[NotifyParentPropertyAttribute("True")]
public int ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttributeAppearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "128, 0, 0, 0")]
[SRDescriptionAttribute("DescriptionAttributeTitle_ShadowColor")]
[NotifyParentPropertyAttribute("True")]
public Color ShadowColor { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTitle_ToolTip")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTitle_Href")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string Href { get; public set; }
    [SRCategoryAttribute("CategoryAttributeMapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTitle_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    private object Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.Tag { get; private set; }
    internal bool BackGroundIsVisible { get; }
    internal Chart Chart { get; internal set; }
    private bool IsTextVertical { get; }
    public Title(string text);
    public Title(string text, Docking docking);
    public Title(string text, Docking docking, Font font, Color color);
    private void Initialize(string text, Docking docking, Font font, Color color);
    public TextOrientation get_TextOrientation();
    public void set_TextOrientation(TextOrientation value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_DockToChartArea();
    public void set_DockToChartArea(string value);
    public bool get_DockInsideChartArea();
    public void set_DockInsideChartArea(bool value);
    public int get_DockOffset();
    public void set_DockOffset(int value);
    public ElementPosition get_Position();
    public void set_Position(ElementPosition value);
    public string get_Text();
    public void set_Text(string value);
    public TextStyle get_Style();
    public void set_Style(TextStyle value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public ChartDashStyle get_BorderStyle();
    public void set_BorderStyle(ChartDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public string get_BackImage();
    public void set_BackImage(string value);
    public ChartImageWrapMode get_BackImageMode();
    public void set_BackImageMode(ChartImageWrapMode value);
    public Color get_BackImageTransparentColor();
    public void set_BackImageTransparentColor(Color value);
    public ChartImageAlign get_BackImageAlign();
    public void set_BackImageAlign(ChartImageAlign value);
    public GradientType get_BackGradientType();
    public void set_BackGradientType(GradientType value);
    public Color get_BackGradientEndColor();
    public void set_BackGradientEndColor(Color value);
    public ChartHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(ChartHatchStyle value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_Color();
    public void set_Color(Color value);
    public ContentAlignment get_Alignment();
    public void set_Alignment(ContentAlignment value);
    public Docking get_Docking();
    public void set_Docking(Docking value);
    public int get_ShadowOffset();
    public void set_ShadowOffset(int value);
    public Color get_ShadowColor();
    public void set_ShadowColor(Color value);
    public sealed virtual void set_ToolTip(string value);
    public sealed virtual string get_ToolTip();
    public sealed virtual void set_Href(string value);
    public sealed virtual string get_Href();
    public sealed virtual void set_MapAreaAttributes(string value);
    public sealed virtual string get_MapAreaAttributes();
    private sealed virtual override object Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Chart.WebForms.IMapAreaAttributes.set_Tag(object value);
    internal bool get_BackGroundIsVisible();
    internal Chart get_Chart();
    internal void set_Chart(Chart value);
    private bool get_IsTextVertical();
    private TextOrientation GetTextOrientation();
    internal bool IsVisible();
    internal void Invalidate(bool invalidateTitleOnly);
    internal void Paint(ChartGraphics chartGraph);
    internal void CalcTitlePosition(ChartGraphics chartGraph, RectangleF& chartAreasRectangle, RectangleF& frameTitlePosition, float elementSpacing);
}
[DefaultMemberAttribute("Item")]
[SRDescriptionAttribute("DescriptionAttributeTitles")]
internal class Microsoft.Reporting.Chart.WebForms.TitleCollection : CollectionBase {
    internal Chart chart;
    private IServiceContainer serviceContainer;
    private Chart Chart { get; }
    public Title Item { get; public set; }
    public TitleCollection(IServiceContainer serviceContainer);
    private Chart get_Chart();
    public Title get_Item(object parameter);
    public void set_Item(object parameter, Title value);
    public int Add(Title title);
    public Title Add(string text);
    public Title Add(string text, Docking docking);
    public Title Add(string text, Docking docking, Font font, Color color);
    public void Insert(int index, Title title);
    public void Insert(int index, string text);
    public void Insert(int index, string text, Docking docking);
    public void Insert(int index, string text, Docking docking, Font font, Color color);
    public bool Contains(Title value);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnClearComplete();
    private bool IsUniqueName(string name);
    public int IndexOf(string name);
    public int GetIndex(string name);
    public void Remove(Title title);
    public int IndexOf(Title title);
    private void Invalidate();
    internal static void CalcOutsideTitlePosition(ChartPicture chartPicture, ChartGraphics chartGraph, ChartArea area, RectangleF& chartAreasRectangle, float elementSpacing);
    internal static void CalcInsideTitlePosition(ChartPicture chartPicture, ChartGraphics chartGraph, float elementSpacing);
}
internal class Microsoft.Reporting.Chart.WebForms.TraceManager : object {
    internal IServiceContainer serviceContainer;
    private ITraceContext traceContext;
    internal ITraceContext TraceContext { get; internal set; }
    public bool TraceEnabled { get; }
    public TraceManager(IServiceContainer container);
    public sealed virtual object GetService(Type serviceType);
    internal ITraceContext get_TraceContext();
    internal void set_TraceContext(ITraceContext value);
    public bool get_TraceEnabled();
    public void Write(string category, string message);
}
internal class Microsoft.Reporting.Chart.WebForms.TTestResult : object {
    internal double firstSeriesMean;
    internal double secondSeriesMean;
    internal double firstSeriesVariance;
    internal double secondSeriesVariance;
    internal double tValue;
    internal double degreeOfFreedom;
    internal double probabilityTOneTail;
    internal double tCriticalValueOneTail;
    internal double probabilityTTwoTail;
    internal double tCriticalValueTwoTail;
    public double FirstSeriesMean { get; }
    public double SecondSeriesMean { get; }
    public double FirstSeriesVariance { get; }
    public double SecondSeriesVariance { get; }
    public double TValue { get; }
    public double DegreeOfFreedom { get; }
    public double ProbabilityTOneTail { get; }
    public double TCriticalValueOneTail { get; }
    public double ProbabilityTTwoTail { get; }
    public double TCriticalValueTwoTail { get; }
    public double get_FirstSeriesMean();
    public double get_SecondSeriesMean();
    public double get_FirstSeriesVariance();
    public double get_SecondSeriesVariance();
    public double get_TValue();
    public double get_DegreeOfFreedom();
    public double get_ProbabilityTOneTail();
    public double get_TCriticalValueOneTail();
    public double get_ProbabilityTTwoTail();
    public double get_TCriticalValueTwoTail();
}
internal class Microsoft.Reporting.Chart.WebForms.Utilities.BinaryFormatSerializer : SerializerBase {
    public virtual void Serialize(object objectToSerialize, object destination);
    public void Serialize(object objectToSerialize, string fileName);
    public void Serialize(object objectToSerialize, Stream stream);
    public void Serialize(object objectToSerialize, BinaryWriter writer);
    protected virtual void SerializeObject(object objectToSerialize, object parent, string elementName, BinaryWriter writer);
    protected virtual void SerializeCollection(object objectToSerialize, string elementName, BinaryWriter writer);
    protected virtual void SerializeProperty(object objectToSerialize, object parent, string elementName, BinaryWriter writer);
    protected void WritePropertyValue(object obj, object parent, string elementName, BinaryWriter writer);
    public void CheckPropertiesID(ArrayList propNames);
    public virtual void Deserialize(object objectToDeserialize, object source);
    public void Deserialize(object objectToDeserialize, string fileName);
    public void Deserialize(object objectToDeserialize, Stream stream);
    public void Deserialize(object objectToDeserialize, BinaryReader reader);
    protected virtual int DeserializeObject(object objectToDeserialize, object parent, string elementName, BinaryReader reader);
    private bool SetPropertyValue(object obj, PropertyInfo pi, BinaryReader reader);
    private PropertyInfo ReadPropertyInfo(object objectToDeserialize, object parent, PropertyInfo[] properties, BinaryReader reader);
}
internal class Microsoft.Reporting.Chart.WebForms.Utilities.BitWriter : object {
    private Stream baseStream;
    private long startOffset;
    private byte currentByte;
    private int currentBitIndex;
    public Stream BaseStream { get; }
    public long BytesWritten { get; }
    public BitWriter(Stream stream);
    public Stream get_BaseStream();
    public long get_BytesWritten();
    public void Flush();
    public void Close();
    public void WriteBit(bool bitValue);
    public void WriteByte(byte byteValue);
    public void WriteBytes(Byte[] byteValues);
    public void WriteBits(Byte[] byteValues, int bitNumber);
    public void WriteSI32(int intValue);
    public void WriteSI16(short shortValue);
    public void WriteBitValue(int intValue, int bitNumber, bool signed);
    private Byte[] SplitAndShiftByte(byte byteValue, int splitIndex);
}
internal static class Microsoft.Reporting.Chart.WebForms.Utilities.ChartPaletteColors : object {
    private static Color[] colorsGrayScale;
    private static Color[] colorsDefault;
    private static Color[] colorsPastel;
    private static Color[] colorsEarth;
    private static Color[] colorsSemiTransparent;
    private static Color[] colorsLight;
    private static Color[] colorsExcel;
    private static Color[] colorsBerry;
    private static Color[] colorsChocolate;
    private static Color[] colorsFire;
    private static Color[] colorsSeaGreen;
    private static Color[] colorsDundas;
    private static Color[] colorsPacific;
    private static Color[] colorsPacificLight;
    private static Color[] colorsPacificSemitransparent;
    private static ChartPaletteColors();
    public static Color[] GetPaletteColors(ChartColorPalette palette);
}
internal enum Microsoft.Reporting.Chart.WebForms.Utilities.CircularAreaDrawingStyles : Enum {
    public int value__;
    public static CircularAreaDrawingStyles Polygon;
    public static CircularAreaDrawingStyles Circle;
}
internal enum Microsoft.Reporting.Chart.WebForms.Utilities.CollectedPieStyle : Enum {
    public int value__;
    public static CollectedPieStyle None;
    public static CollectedPieStyle SingleSlice;
    public static CollectedPieStyle CollectedPie;
}
internal enum Microsoft.Reporting.Chart.WebForms.Utilities.ColumnChartExtensions : Enum {
    public int value__;
    public static ColumnChartExtensions Pareto;
    public static ColumnChartExtensions Histogram;
    public static ColumnChartExtensions Normal;
}
internal class Microsoft.Reporting.Chart.WebForms.Utilities.CustomAttributeInfo : object {
    public string Name;
    public Type ValueType;
    public object DefaultValue;
    public string Description;
    public SeriesChartType[] AppliesToChartType;
    public bool AppliesToSeries;
    public bool AppliesToDataPoint;
    public bool AppliesTo3D;
    public bool AppliesTo2D;
    public object MinValue;
    public object MaxValue;
    public CustomAttributeInfo(string name, Type valueType, object defaultValue, string description, SeriesChartType[] appliesToChartType, bool appliesToSeries, bool appliesToDataPoint);
}
internal static class Microsoft.Reporting.Chart.WebForms.Utilities.CustomAttributeName : object {
    internal static string DrawSideBySide;
    internal static string EmptyPointValue;
    internal static string BarLabelStyle;
    internal static string StackedGroupName;
    internal static string DrawingStyle;
    internal static string PointWidth;
    internal static string PixelPointWidth;
    internal static string MinPixelPointWidth;
    internal static string MaxPixelPointWidth;
    internal static string PriceUpColor;
    internal static string PriceDownColor;
    internal static string LabelValueType;
    internal static string OpenCloseStyle;
    internal static string ShowOpenClose;
    internal static string BubbleScaleMin;
    internal static string BubbleScaleMax;
    internal static string BubbleMaxSize;
    internal static string BubbleMinSize;
    internal static string BubbleUseSizeForLabel;
    internal static string PieDrawingStyle;
    internal static string CollectedStyle;
    internal static string CollectedThreshold;
    internal static double DefaultCollectedThreshold;
    internal static string CollectedThresholdUsePercent;
    internal static string CollectedSliceExploded;
    internal static string CollectedLabel;
    internal static string CollectedLegendText;
    internal static string CollectedToolTip;
    internal static string CollectedColor;
    internal static string CollectedChartShowLegend;
    internal static string CollectedChartShowLabels;
    internal static string PieStartAngle;
    internal static string Exploded;
    internal static string LabelsRadialLineSize;
    internal static string LabelsHorizontalLineSize;
    internal static string PieLabelStyle;
    internal static string MinimumRelativePieSize;
    internal static string _3DLabelLineSize;
    internal static string PieLineColor;
    internal static string PieAutoAxisLabels;
    internal static string DoughnutRadius;
    internal static string LabelStyle;
    internal static string ShowMarkerLines;
    internal static string LineTension;
    internal static string PixelPointDepth;
    internal static string PixelPointGapDepth;
    internal static string PermittedPixelError;
    internal static string CircularLabelsStyle;
    internal static string PolarDrawingStyle;
    internal static string AreaDrawingStyle;
    internal static string RadarDrawingStyle;
    internal static string BoxPlotPercentile;
    internal static string BoxPlotWhiskerPercentile;
    internal static string BoxPlotShowAverage;
    internal static string BoxPlotShowMedian;
    internal static string BoxPlotShowUnusualValues;
    internal static string BoxPlotSeries;
    internal static string ErrorBarStyle;
    internal static string ErrorBarCenterMarkerStyle;
    internal static string ErrorBarSeries;
    internal static string ErrorBarType;
    internal static string UsedYValueHigh;
    internal static string UsedYValueLow;
    internal static string BoxSize;
    internal static string ProportionalSymbols;
    internal static string ReversalAmount;
    internal static string UsedYValue;
    internal static string NumberOfLinesInBreak;
    internal static string FunnelLabelStyle;
    internal static string FunnelNeckWidth;
    internal static string FunnelNeckHeight;
    internal static string FunnelMinPointHeight;
    internal static string Funnel3DRotationAngle;
    internal static string FunnelPointGap;
    internal static string Funnel3DDrawingStyle;
    internal static string FunnelStyle;
    internal static string FunnelInsideLabelAlignment;
    internal static string FunnelOutsideLabelPlacement;
    internal static string CalloutLineColor;
    internal static string PyramidLabelStyle;
    internal static string PyramidMinPointHeight;
    internal static string Pyramid3DRotationAngle;
    internal static string PyramidPointGap;
    internal static string Pyramid3DDrawingStyle;
    internal static string PyramidInsideLabelAlignment;
    internal static string PyramidOutsideLabelPlacement;
    internal static string PyramidValueType;
    internal static string SkipPaletteColorForEmptyPoint;
    internal static string LabelsVisible;
}
internal class Microsoft.Reporting.Chart.WebForms.Utilities.CustomAttributeRegistry : object {
    private IServiceContainer serviceContainer;
    internal ArrayList registeredCustomAttributes;
    public CustomAttributeRegistry(IServiceContainer container);
    [EditorBrowsableAttribute("1")]
public sealed virtual object GetService(Type serviceType);
    private void RegisterAttributes();
    public void Register(CustomAttributeInfo customAttributeInfo);
}
internal enum Microsoft.Reporting.Chart.WebForms.Utilities.EmptyPointTypes : Enum {
    public int value__;
    public static EmptyPointTypes Average;
    public static EmptyPointTypes Zero;
}
internal enum Microsoft.Reporting.Chart.WebForms.Utilities.ErrorBarMarkerStyles : Enum {
    public int value__;
    public static ErrorBarMarkerStyles None;
    public static ErrorBarMarkerStyles Square;
    public static ErrorBarMarkerStyles Circle;
    public static ErrorBarMarkerStyles Diamond;
    public static ErrorBarMarkerStyles Triangle;
    public static ErrorBarMarkerStyles Cross;
    public static ErrorBarMarkerStyles Star4;
    public static ErrorBarMarkerStyles Star5;
    public static ErrorBarMarkerStyles Star6;
    public static ErrorBarMarkerStyles Star10;
    public static ErrorBarMarkerStyles Line;
}
[ExtensionAttribute]
internal static class Microsoft.Reporting.Chart.WebForms.Utilities.GraphicsPathExtensions : object {
    [ExtensionAttribute]
public static bool IsSuperSetOf(GraphicsPath path1, GraphicsPath path2, Graphics graphics);
}
internal class Microsoft.Reporting.Chart.WebForms.Utilities.ImageLoader : object {
    private Hashtable imageData;
    private IServiceContainer serviceContainer;
    public ImageLoader(IServiceContainer container);
    [EditorBrowsableAttribute("1")]
public sealed virtual object GetService(Type serviceType);
    public sealed virtual void Dispose();
    public Image LoadImage(string imageURL);
    public Image LoadImage(string imageURL, bool saveImage);
    private Image LoadFromFile(string fileName);
    internal bool GetAdjustedImageSize(string name, Graphics graphics, SizeF& size);
    internal static void GetAdjustedImageSize(Image image, Graphics graphics, SizeF& size);
    internal static bool DoDpisMatch(Image image, Graphics graphics);
    internal static Image GetScaledImage(Image image, Graphics graphics);
}
internal class Microsoft.Reporting.Chart.WebForms.Utilities.KeywordInfo : object {
    public string Name;
    public string Keyword;
    public string KeywordAliases;
    public string Description;
    public string AppliesToTypes;
    public string AppliesToProperties;
    public bool SupportsFormatting;
    public bool SupportsValueIndex;
    public KeywordInfo(string name, string keyword, string keywordAliases, string description, string appliesToTypes, string appliesToProperties, bool supportsFormatting, bool supportsValueIndex);
    public virtual string ToString();
}
internal static class Microsoft.Reporting.Chart.WebForms.Utilities.KeywordName : object {
    internal static string Index;
    internal static string ValX;
    internal static string ValY;
    internal static string Val;
    internal static string Total;
    internal static string Percent;
    internal static string Label;
    internal static string AxisLabel;
    internal static string LegendText;
    internal static string SeriesName;
    internal static string Ser;
    internal static string Avg;
    internal static string Max;
    internal static string Min;
    internal static string Last;
    internal static string First;
    internal static string CustomAttribute;
}
internal class Microsoft.Reporting.Chart.WebForms.Utilities.KeywordsRegistry : object {
    private IServiceContainer serviceContainer;
    internal ArrayList registeredKeywords;
    public KeywordsRegistry(IServiceContainer container);
    [EditorBrowsableAttribute("1")]
public sealed virtual object GetService(Type serviceType);
    private void RegisterKeywords();
    public void Register(string name, string keyword, string keywordAliases, string description, string appliesToTypes, string appliesToProperties, bool supportsFormatting, bool supportsValueIndex);
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Chart.WebForms.Utilities.LabelAlignments : Enum {
    public int value__;
    public static LabelAlignments Auto;
    public static LabelAlignments Top;
    public static LabelAlignments Bottom;
    public static LabelAlignments Right;
    public static LabelAlignments Left;
    public static LabelAlignments TopLeft;
    public static LabelAlignments TopRight;
    public static LabelAlignments BottomLeft;
    public static LabelAlignments BottomRight;
    public static LabelAlignments Center;
}
internal enum Microsoft.Reporting.Chart.WebForms.Utilities.PolarDrawingStyles : Enum {
    public int value__;
    public static PolarDrawingStyles Line;
    public static PolarDrawingStyles Marker;
}
internal class Microsoft.Reporting.Chart.WebForms.Utilities.ProductKeyEncoder : object {
    private Byte[] rijnKey;
    private Byte[] rijnIV;
    private string BytesToString(Byte[] bytes);
    private Byte[] StringToBytes(string str);
    public string DecryptLicenseKey(string key);
}
[ExtensionAttribute]
internal static class Microsoft.Reporting.Chart.WebForms.Utilities.RegionExtensions : object {
    [ExtensionAttribute]
public static bool IsSuperSetOf(Region region1, Region region2, Graphics graphics);
}
internal class Microsoft.Reporting.Chart.WebForms.Utilities.SelectionManager : object {
    private IServiceContainer service;
    private ArrayList selectableObjectList;
    private bool enabled;
    internal Point selectionPoint;
    internal bool invalidated;
    private ContextElementTypes selectableTypes;
    internal ObjectInfo selectedObjectInfo;
    private HotRegion hotRegion;
    private Chart chartControl;
    private ChartPicture chartPicture;
    private DataManager dataManager;
    internal Chart ChartControl { get; }
    internal ChartPicture Chart { get; }
    internal DataManager DataManager { get; }
    internal ChartGraphics Graph { get; }
    internal ContextElementTypes SelectableTypes { get; internal set; }
    public Point SelectionPoint { get; public set; }
    internal ObjectInfo Result { get; internal set; }
    internal HitTestResult HitTestResult { get; internal set; }
    internal HotRegion HotRegion { get; internal set; }
    internal bool Enabled { get; internal set; }
    internal SelectionManager(IServiceContainer service, bool assignService);
    internal SelectionManager(IServiceContainer service);
    internal Chart get_ChartControl();
    internal ChartPicture get_Chart();
    internal DataManager get_DataManager();
    internal ChartGraphics get_Graph();
    internal ContextElementTypes get_SelectableTypes();
    internal void set_SelectableTypes(ContextElementTypes value);
    public virtual Point get_SelectionPoint();
    public virtual void set_SelectionPoint(Point value);
    internal ObjectInfo get_Result();
    internal void set_Result(ObjectInfo value);
    internal HitTestResult get_HitTestResult();
    internal void set_HitTestResult(HitTestResult value);
    internal HotRegion get_HotRegion();
    internal void set_HotRegion(HotRegion value);
    internal bool get_Enabled();
    internal void set_Enabled(bool value);
    internal bool SelectChartElement(ChartElementType elementType, object chartObject, object chartSubObject);
    internal bool IsChartElementSelected(ChartElementType elementType, object chartObject, object chartSubObject);
    internal void Invalidate();
    internal virtual void CheckInvalidated();
    private PointF GetRelativeHitPoint();
    private IList GetHitOrderList();
    protected bool IsArea3D(ChartArea area);
    protected internal virtual IList GetAxisMarkers(ChartGraphics graph, Axis axis);
    protected internal bool IsChartAreaCircular(ChartArea area);
    protected internal virtual IList GetAreaMarkers(ChartGraphics graph, ChartArea area);
    protected internal virtual void SearchForHotRegion();
    internal void Reset();
    internal virtual void HitTest();
    internal virtual void DrawSelection();
    protected internal virtual IList GetMarkers(RectangleF rect);
    protected internal virtual IList GetMarkers(RectangleF rect, bool addAdditionalMarkers);
    protected internal PointF Transform3D(ChartArea3D chartArea, DataPoint point, ChartGraphics graph);
    internal bool IsElementClickable(object element, ChartElementType chartElementType);
    protected internal virtual IList GetMarkers(ChartGraphics graph);
    internal virtual void DrawSelection(Graphics g);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
internal enum Microsoft.Reporting.Chart.WebForms.Utilities.SerializationStatus : Enum {
    public int value__;
    public static SerializationStatus None;
    public static SerializationStatus Loading;
    public static SerializationStatus Saving;
    public static SerializationStatus Resetting;
}
internal enum Microsoft.Reporting.Chart.WebForms.Utilities.SerializationVisibility : Enum {
    public int value__;
    public static SerializationVisibility Hidden;
    public static SerializationVisibility Attribute;
    public static SerializationVisibility Element;
}
[AttributeUsageAttribute("32767")]
internal class Microsoft.Reporting.Chart.WebForms.Utilities.SerializationVisibilityAttribute : Attribute {
    private SerializationVisibility visibility;
    public SerializationVisibility Visibility { get; }
    public SerializationVisibilityAttribute(SerializationVisibility visibility);
    public SerializationVisibility get_Visibility();
}
internal abstract class Microsoft.Reporting.Chart.WebForms.Utilities.SerializerBase : object {
    private bool ignoreUnknown;
    private bool templateMode;
    private bool resetWhenLoading;
    private string serializableContent;
    private string nonSerializableContent;
    protected int binaryFormatVersion;
    internal static FontConverter fontConverter;
    internal static ColorConverter colorConverter;
    internal static SizeConverter sizeConverter;
    internal static ArrayConverter arrayConverter;
    protected static CaseInsensitiveHashCodeProvider hashCodeProvider;
    private ArrayList serializableContentList;
    private ArrayList nonSerializableContentList;
    public bool IgnoreUnknownAttributes { get; public set; }
    public bool TemplateMode { get; public set; }
    public bool ResetWhenLoading { get; public set; }
    public string SerializableContent { get; public set; }
    public string NonSerializableContent { get; public set; }
    private static SerializerBase();
    public bool get_IgnoreUnknownAttributes();
    public void set_IgnoreUnknownAttributes(bool value);
    public bool get_TemplateMode();
    public void set_TemplateMode(bool value);
    public bool get_ResetWhenLoading();
    public void set_ResetWhenLoading(bool value);
    public string get_SerializableContent();
    public void set_SerializableContent(string value);
    public string get_NonSerializableContent();
    public void set_NonSerializableContent(string value);
    public virtual void ResetObjectProperties(object objectToReset);
    protected virtual void ResetObjectProperties(object objectToReset, object parent, string elementName);
    public abstract virtual void Serialize(object objectToSerialize, object destination);
    public abstract virtual void Deserialize(object objectToDeserialize, object source);
    internal static string FontToString(Font font);
    internal static Font FontFromString(string fontString);
    internal static short GetStringHashCode(string str);
    protected short ReadHashID(BinaryReader reader, bool isCollectionMember);
    protected short MapHashValueVersion200(short oldHashValue);
    protected bool IsChartBaseProperty(object objectToSerialize, object parent, PropertyInfo pi);
    internal static string ImageToString(Image image);
    protected static Image ImageFromString(string data);
    internal string GetObjectName(object obj);
    protected object GetListNewItem(IList list, string itemTypeName, String& itemName, Boolean& reusedObject);
    protected bool ShouldSerializeAsAttribute(PropertyInfo pi, object parent);
    protected bool SerializeICollAsAtribute(PropertyInfo pi, object objectToSerialize);
    internal bool IsSerializableContent(string propertyName, object parent);
    private bool IsPropertyInList(ArrayList contentList, string className, string propertyName, Int32& classFitType, Int32& propertyFitType);
    private bool NameMatchMask(ItemInfo itemInfo, string objectName, Int32& type);
    private ArrayList GetSerializableContentList();
    private ArrayList GetNonSerializableContentList();
    private void FillContentList(ArrayList list, string content);
    private void CheckWildCars(ItemInfo info);
}
internal enum Microsoft.Reporting.Chart.WebForms.Utilities.StockLabelValueTypes : Enum {
    public int value__;
    public static StockLabelValueTypes High;
    public static StockLabelValueTypes Low;
    public static StockLabelValueTypes Open;
    public static StockLabelValueTypes Close;
}
internal enum Microsoft.Reporting.Chart.WebForms.Utilities.StockShowOpenCloseTypes : Enum {
    public int value__;
    public static StockShowOpenCloseTypes Both;
    public static StockShowOpenCloseTypes Open;
    public static StockShowOpenCloseTypes Close;
}
internal static class Microsoft.Reporting.Chart.WebForms.Utilities.StringHashCodeConverter : object {
    internal static Int16[] hashCodes200;
    internal static Int16[] hashCodes300;
    private static StringHashCodeConverter();
}
internal static class Microsoft.Reporting.Chart.WebForms.Utilities.ValueConverter : object {
    public static string FormatValue(Chart chart, object obj, double value, string format, ChartValueTypes valueType, ChartElementType elementType);
}
internal class Microsoft.Reporting.Chart.WebForms.Utilities.XmlFormatSerializer : SerializerBase {
    public void Serialize(object objectToSerialize, Stream stream);
    public void Serialize(object objectToSerialize, XmlWriter xmlWriter);
    public void Serialize(object objectToSerialize, TextWriter textWriter);
    public void Serialize(object objectToSerialize, string fileName);
    public virtual void Serialize(object objectToSerialize, object writer);
    protected virtual void SerializeObject(object objectToSerialize, object parent, string elementName, XmlNode xmlParentNode, XmlDocument xmlDocument);
    protected virtual void SerializeCollection(object objectToSerialize, string elementName, XmlNode xmlParentNode, XmlDocument xmlDocument);
    protected virtual void SerializeProperty(object objectToSerialize, object parent, string elementName, XmlNode xmlParentNode, XmlDocument xmlDocument);
    protected string GetXmlValue(object obj, object parent, string elementName);
    private void RemoveEmptyChildNodes(XmlNode xmlNode);
    public void Deserialize(object objectToDeserialize, Stream stream);
    public void Deserialize(object objectToDeserialize, XmlReader xmlReader);
    public void Deserialize(object objectToDeserialize, TextReader textReader);
    public void Deserialize(object objectToDeserialize, string fileName);
    public virtual void Deserialize(object objectToDeserialize, object reader);
    protected virtual int DeserializeObject(object objectToDeserialize, object parent, string elementName, XmlNode xmlParentNode, XmlDocument xmlDocument);
    private void SetXmlValue(object obj, string attrName, string attrValue);
}
internal class Microsoft.Reporting.Chart.WebForms.ValueA : object {
    private float startValue;
    private float endValue;
    private double startTime;
    private double endTime;
    private bool repeat;
    private double repeatDelay;
    public float StartValue { get; public set; }
    public float EndValue { get; public set; }
    public double StartTime { get; public set; }
    public double EndTime { get; public set; }
    public bool Repeat { get; public set; }
    public double RepeatDelay { get; public set; }
    public float get_StartValue();
    public void set_StartValue(float value);
    public float get_EndValue();
    public void set_EndValue(float value);
    public double get_StartTime();
    public void set_StartTime(double value);
    public double get_EndTime();
    public void set_EndTime(double value);
    public bool get_Repeat();
    public void set_Repeat(bool value);
    public double get_RepeatDelay();
    public void set_RepeatDelay(double value);
}
[SRDescriptionAttribute("DescriptionAttributeVerticalLineAnnotation_VerticalLineAnnotation")]
internal class Microsoft.Reporting.Chart.WebForms.VerticalLineAnnotation : LineAnnotation {
    [SRCategoryAttribute("CategoryAttributeMisc")]
[BindableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeAnnotationType4")]
public string AnnotationType { get; }
    public virtual string get_AnnotationType();
    internal virtual void AdjustLineCoordinates(PointF& point1, PointF& point2, RectangleF& selectionRect);
    internal virtual RectangleF GetContentPosition();
}
internal class Microsoft.Reporting.Chart.WebForms.ZTestResult : object {
    internal double firstSeriesMean;
    internal double secondSeriesMean;
    internal double firstSeriesVariance;
    internal double secondSeriesVariance;
    internal double zValue;
    internal double probabilityZOneTail;
    internal double zCriticalValueOneTail;
    internal double probabilityZTwoTail;
    internal double zCriticalValueTwoTail;
    public double FirstSeriesMean { get; }
    public double SecondSeriesMean { get; }
    public double FirstSeriesVariance { get; }
    public double SecondSeriesVariance { get; }
    public double ZValue { get; }
    public double ProbabilityZOneTail { get; }
    public double ZCriticalValueOneTail { get; }
    public double ProbabilityZTwoTail { get; }
    public double ZCriticalValueTwoTail { get; }
    public double get_FirstSeriesMean();
    public double get_SecondSeriesMean();
    public double get_FirstSeriesVariance();
    public double get_SecondSeriesVariance();
    public double get_ZValue();
    public double get_ProbabilityZOneTail();
    public double get_ZCriticalValueOneTail();
    public double get_ProbabilityZTwoTail();
    public double get_ZCriticalValueTwoTail();
}
internal enum Microsoft.Reporting.Gauge.WebForms.AntiAlias : Enum {
    public int value__;
    public static AntiAlias On;
    public static AntiAlias Off;
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Gauge.WebForms.AntiAliasing : Enum {
    public int value__;
    public static AntiAliasing None;
    public static AntiAliasing Text;
    public static AntiAliasing Graphics;
    public static AntiAliasing All;
}
internal enum Microsoft.Reporting.Gauge.WebForms.AutoBool : Enum {
    public int value__;
    public static AutoBool Auto;
    public static AutoBool True;
    public static AutoBool False;
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.BackFrameConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.BackFrame : GaugeObject {
    private XamlRenderer xamlRenderer;
    private BackFrameStyle style;
    private BackFrameShape shape;
    private float frameWidth;
    private Color frameColor;
    private GradientType frameGradientType;
    private Color frameGradientEndColor;
    private GaugeHatchStyle frameHatchStyle;
    private string image;
    private Color imageTransColor;
    private Color imageHueColor;
    private Color borderColor;
    private GaugeDashStyle borderStyle;
    private int borderWidth;
    private Color backColor;
    private GradientType backGradientType;
    private Color backGradientEndColor;
    private GaugeHatchStyle backHatchStyle;
    private float shadowOffset;
    private GlassEffect glassEffect;
    private bool clipImage;
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_FrameStyle")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[NotifyParentPropertyAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
[SerializationVisibilityAttribute("0")]
[ObsoleteAttribute("This property is obsolete in Dundas Gauge 2.0. FrameStyle is supposed to be used instead.")]
public BackFrameStyle Style { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_FrameStyle")]
[NotifyParentPropertyAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
public BackFrameStyle FrameStyle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_FrameShape")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[RefreshPropertiesAttribute("1")]
[NotifyParentPropertyAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
[SerializationVisibilityAttribute("0")]
[ObsoleteAttribute("This property is obsolete in Dundas Gauge 2.0. FrameShape is supposed to be used instead.")]
public BackFrameShape Shape { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_FrameShape")]
[RefreshPropertiesAttribute("1")]
[NotifyParentPropertyAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
public BackFrameShape FrameShape { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_FrameWidth")]
[NotifyParentPropertyAttribute("True")]
[ValidateBound("0", "50")]
[DefaultValueAttribute("8")]
public float FrameWidth { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_FrameColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Gainsboro")]
public Color FrameColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_FrameGradientType")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType FrameGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_FrameGradientEndColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Gray")]
public Color FrameGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_FrameHatchStyle")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("Microsoft.Reporting.Gauge.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeHatchStyle FrameHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_Image")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
public string Image { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_ImageTransColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageTransColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_ImageHueColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageHueColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_BorderColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_BorderStyle")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_BorderWidth")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_BackColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Silver")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_BackGradientType")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_BackGradientEndColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Gray")]
public Color BackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_BackHatchStyle")]
[EditorAttribute("Microsoft.Reporting.Gauge.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeShadowOffset4")]
[NotifyParentPropertyAttribute("True")]
[ValidateBound("-5", "5")]
[DefaultValueAttribute("0")]
public float ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_GlassEffect")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GlassEffect GlassEffect { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame_ClipImage")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("False")]
public bool ClipImage { get; public set; }
    public BackFrame(object parent);
    public BackFrame(object parent, BackFrameStyle style, BackFrameShape shape);
    public BackFrameStyle get_Style();
    public void set_Style(BackFrameStyle value);
    protected bool ShouldSerializeStyle();
    public BackFrameStyle get_FrameStyle();
    public void set_FrameStyle(BackFrameStyle value);
    public BackFrameShape get_Shape();
    public void set_Shape(BackFrameShape value);
    protected bool ShouldSerializeShape();
    public BackFrameShape get_FrameShape();
    public void set_FrameShape(BackFrameShape value);
    public float get_FrameWidth();
    public void set_FrameWidth(float value);
    public Color get_FrameColor();
    public void set_FrameColor(Color value);
    public GradientType get_FrameGradientType();
    public void set_FrameGradientType(GradientType value);
    public Color get_FrameGradientEndColor();
    public void set_FrameGradientEndColor(Color value);
    public GaugeHatchStyle get_FrameHatchStyle();
    public void set_FrameHatchStyle(GaugeHatchStyle value);
    public string get_Image();
    public void set_Image(string value);
    public Color get_ImageTransColor();
    public void set_ImageTransColor(Color value);
    public Color get_ImageHueColor();
    public void set_ImageHueColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public GaugeDashStyle get_BorderStyle();
    public void set_BorderStyle(GaugeDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public GradientType get_BackGradientType();
    public void set_BackGradientType(GradientType value);
    public Color get_BackGradientEndColor();
    public void set_BackGradientEndColor(Color value);
    public GaugeHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(GaugeHatchStyle value);
    public float get_ShadowOffset();
    public void set_ShadowOffset(float value);
    public GlassEffect get_GlassEffect();
    public void set_GlassEffect(GlassEffect value);
    public bool get_ClipImage();
    public void set_ClipImage(bool value);
    [EditorBrowsableAttribute("1")]
protected void ResetFrameStyle();
    [EditorBrowsableAttribute("1")]
protected void ResetFrameShape();
    internal XamlRenderer GetCachedXamlRenderer(GaugeGraphics g);
    internal void ResetCachedXamlRenderer();
    internal GraphicsPath GetFramePath(GaugeGraphics g, float shrinkBy);
    internal GraphicsPath GetBackPath(GaugeGraphics g);
    private void BuildCircularGaugeAutoFrame(GaugeGraphics g, GraphicsPath path, CircularGauge gauge, float shrinkBy);
    internal static float GetXamlFrameAspectRatio(BackFrameShape shape);
    internal GraphicsPath GetShadowPath(GaugeGraphics g);
    internal void DrawFrameImage(GaugeGraphics g);
    internal bool IsCustomXamlFrame();
    internal void RenderFrame(GaugeGraphics g);
    internal void RenderShadow(GaugeGraphics g);
    internal Brush GetBrush(GaugeGraphics g, RectangleF rect, GaugeHatchStyle hatchStyle, GradientType gradientType, Color fillColor, Color gradientEndColor, bool frame, float frameWidth);
    internal RectangleF GetFrameRectangle(GaugeGraphics g);
    internal void RenderGlassEffect(GaugeGraphics g);
}
internal class Microsoft.Reporting.Gauge.WebForms.BackFrameConverter : NoNameExpandableObjectConverter {
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal enum Microsoft.Reporting.Gauge.WebForms.BackFrameShape : Enum {
    public int value__;
    public static BackFrameShape Circular;
    public static BackFrameShape Rectangular;
    public static BackFrameShape RoundedRectangular;
    public static BackFrameShape AutoShape;
    public static BackFrameShape CustomCircular1;
    public static BackFrameShape CustomCircular2;
    public static BackFrameShape CustomCircular3;
    public static BackFrameShape CustomCircular4;
    public static BackFrameShape CustomCircular5;
    public static BackFrameShape CustomCircular6;
    public static BackFrameShape CustomCircular7;
    public static BackFrameShape CustomCircular8;
    public static BackFrameShape CustomCircular9;
    public static BackFrameShape CustomCircular10;
    public static BackFrameShape CustomCircular11;
    public static BackFrameShape CustomCircular12;
    public static BackFrameShape CustomCircular13;
    public static BackFrameShape CustomCircular14;
    public static BackFrameShape CustomCircular15;
    public static BackFrameShape CustomSemiCircularN1;
    public static BackFrameShape CustomSemiCircularN2;
    public static BackFrameShape CustomSemiCircularN3;
    public static BackFrameShape CustomSemiCircularN4;
    public static BackFrameShape CustomSemiCircularS1;
    public static BackFrameShape CustomSemiCircularS2;
    public static BackFrameShape CustomSemiCircularS3;
    public static BackFrameShape CustomSemiCircularS4;
    public static BackFrameShape CustomSemiCircularE1;
    public static BackFrameShape CustomSemiCircularE2;
    public static BackFrameShape CustomSemiCircularE3;
    public static BackFrameShape CustomSemiCircularE4;
    public static BackFrameShape CustomSemiCircularW1;
    public static BackFrameShape CustomSemiCircularW2;
    public static BackFrameShape CustomSemiCircularW3;
    public static BackFrameShape CustomSemiCircularW4;
    public static BackFrameShape CustomQuarterCircularNE1;
    public static BackFrameShape CustomQuarterCircularNE2;
    public static BackFrameShape CustomQuarterCircularNE3;
    public static BackFrameShape CustomQuarterCircularNE4;
    public static BackFrameShape CustomQuarterCircularNW1;
    public static BackFrameShape CustomQuarterCircularNW2;
    public static BackFrameShape CustomQuarterCircularNW3;
    public static BackFrameShape CustomQuarterCircularNW4;
    public static BackFrameShape CustomQuarterCircularSE1;
    public static BackFrameShape CustomQuarterCircularSE2;
    public static BackFrameShape CustomQuarterCircularSE3;
    public static BackFrameShape CustomQuarterCircularSE4;
    public static BackFrameShape CustomQuarterCircularSW1;
    public static BackFrameShape CustomQuarterCircularSW2;
    public static BackFrameShape CustomQuarterCircularSW3;
    public static BackFrameShape CustomQuarterCircularSW4;
}
internal enum Microsoft.Reporting.Gauge.WebForms.BackFrameStyle : Enum {
    public int value__;
    public static BackFrameStyle None;
    public static BackFrameStyle Simple;
    public static BackFrameStyle Edged;
}
internal enum Microsoft.Reporting.Gauge.WebForms.BarStart : Enum {
    public int value__;
    public static BarStart Zero;
    public static BarStart ScaleStart;
}
internal enum Microsoft.Reporting.Gauge.WebForms.BarStyle : Enum {
    public int value__;
    public static BarStyle Style1;
}
internal class Microsoft.Reporting.Gauge.WebForms.BarStyleAttrib : object {
    public GraphicsPath primaryPath;
    public Brush primaryBrush;
    public GraphicsPath[] secondaryPaths;
    public Brush[] secondaryBrushes;
    public GraphicsPath totalPath;
    public Brush totalBrush;
    public void Dispose();
}
internal class Microsoft.Reporting.Gauge.WebForms.BinaryFormatSerializer : SerializerBase {
    private CaseInsensitiveHashCodeProvider hashCodeProvider;
    public virtual void Serialize(object objectToSerialize, object destination);
    public void Serialize(object objectToSerialize, string fileName);
    public void Serialize(object objectToSerialize, Stream stream);
    public void Serialize(object objectToSerialize, BinaryWriter writer);
    private void SerializeObject(object objectToSerialize, object parent, string elementName, BinaryWriter writer);
    private void SerializeCollection(object objectToSerialize, string elementName, BinaryWriter writer);
    private void SerializeProperty(object objectToSerialize, object parent, string elementName, BinaryWriter writer);
    private void WritePropertyValue(object obj, object parent, string elementName, BinaryWriter writer);
    public void CheckPropertiesID(ArrayList propNames);
    public virtual void Deserialize(object objectToDeserialize, object source);
    public void Deserialize(object objectToDeserialize, string fileName);
    public void Deserialize(object objectToDeserialize, Stream stream);
    public void Deserialize(object objectToDeserialize, BinaryReader reader);
    protected virtual int DeserializeObject(object objectToDeserialize, object parent, string elementName, BinaryReader reader);
    private bool SetPropertyValue(object obj, PropertyInfo pi, BinaryReader reader);
    private PropertyInfo ReadPropertyInfo(object objectToDeserialize, object parent, PropertyInfo[] properties, BinaryReader reader);
}
internal class Microsoft.Reporting.Gauge.WebForms.BufferBitmap : object {
    private Bitmap bitmap;
    private Graphics graphics;
    private Size size;
    private float dpiX;
    private float dpiY;
    private bool disposed;
    public Size Size { get; public set; }
    public Bitmap Bitmap { get; }
    public Graphics Graphics { get; }
    public BufferBitmap(float dpiX, float dpiY);
    public Size get_Size();
    public void set_Size(Size value);
    public Bitmap get_Bitmap();
    public Graphics get_Graphics();
    private void DisposeObjects();
    public void Invalidate();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.CalculatedValueConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.CalculatedValue : ValueBase {
    private IValueProvider provider;
    private TimerData timerData;
    internal bool timerRefreshCall;
    internal bool noMoreData;
    internal GaugePeriod refreshRate;
    internal GaugeDuration aggregateDuration;
    private string baseValueName;
    [SRCategoryAttribute("CategoryBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeRefreshRate3")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleNanValueConverter")]
public double RefreshRate { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeRefreshRateType")]
public PeriodType RefreshRateType { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributePeriod")]
public long Period { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributePeriodType")]
public DurationType PeriodType { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[BrowsableAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeTypeName")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string TypeName { get; }
    [SRCategoryAttribute("CategoryData")]
[SRDescriptionAttribute("DescriptionAttributeBaseValueName")]
[RefreshPropertiesAttribute("2")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.CalculatedValueNameConverter")]
public string BaseValueName { get; public set; }
    [SRCategoryAttribute("CategoryData")]
[BindableAttribute("False")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("не число")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleNanValueConverter")]
[SRDescriptionAttribute("DescriptionAttributeValue8")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public double Value { get; }
    internal CommonElements Common { get; internal set; }
    internal InputValue InputValueObj { get; }
    protected virtual void OnDispose();
    public virtual double get_RefreshRate();
    public virtual void set_RefreshRate(double value);
    public virtual PeriodType get_RefreshRateType();
    public virtual void set_RefreshRateType(PeriodType value);
    public virtual long get_Period();
    public virtual void set_Period(long value);
    public virtual DurationType get_PeriodType();
    public virtual void set_PeriodType(DurationType value);
    public string get_TypeName();
    public string get_BaseValueName();
    public void set_BaseValueName(string value);
    public double get_Value();
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
    private void InitTimer();
    internal void InitTimerData();
    internal void StartTimer();
    protected void StopTimer();
    private void AttachToProvider();
    private IValueProvider LocateProviderByName(string name);
    private bool IsConnectedInCollecton();
    internal virtual void OnAdded();
    internal InputValue get_InputValueObj();
    internal virtual void EndInit();
    internal virtual object CloneInternals(object copy);
    internal virtual void Recalculate(double value, DateTime timestamp);
    internal virtual void CalculateValue(double value, DateTime timestamp);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IValueConsumer.ProviderRemoved(IValueProvider provider);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IValueConsumer.ProviderNameChanged(IValueProvider provider);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IValueConsumer.InputValueChanged(object sender, ValueChangedEventArgs e);
    private sealed virtual override IValueProvider Microsoft.Reporting.Gauge.WebForms.IValueConsumer.GetProvider();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IValueConsumer.Reset();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IValueConsumer.Refresh();
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.CalculatedValueAverageConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.CalculatedValueAverage : CalculatedValue {
    internal virtual void CalculateValue(double value, DateTime timestamp);
}
internal class Microsoft.Reporting.Gauge.WebForms.CalculatedValueAverageConverter : CollectionItemTypeConverter {
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.CalculatedValueCollection : NamedCollection {
    public CalculatedValue Item { get; public set; }
    private CalculatedValue Item { get; private set; }
    private CalculatedValue Item { get; private set; }
    internal CalculatedValueCollection(NamedElement parent, CommonElements common);
    public CalculatedValue Add(string name);
    public int Add(CalculatedValue value);
    public void Insert(int index, CalculatedValue value);
    public void Remove(CalculatedValue value);
    public bool Contains(CalculatedValue value);
    public int IndexOf(CalculatedValue value);
    internal virtual string GetElementNameFormat(NamedElement el);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual bool IsCorrectType(object value);
    internal virtual void IsValidNameCheck(string name, NamedElement element);
    internal virtual bool IsUniqueName(string name);
    public CalculatedValue get_Item(object obj);
    public void set_Item(object obj, CalculatedValue value);
    private CalculatedValue get_Item(string name);
    private void set_Item(string name, CalculatedValue value);
    private CalculatedValue get_Item(int index);
    private void set_Item(int index, CalculatedValue value);
}
internal class Microsoft.Reporting.Gauge.WebForms.CalculatedValueConverter : CollectionItemTypeConverter {
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.CalculatedValueIntegralConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.CalculatedValueIntegral : CalculatedValue {
    private GaugePeriod interval;
    private double integralBase;
    private double integralResult;
    private DataSampleRC oldValue;
    [SRCategoryAttribute("CategoryBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeCalculatedValueIntegral_IntegralInterval")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleNanValueConverter")]
public double IntegralInterval { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCalculatedValueIntegral_IntegralIntervalType")]
public PeriodType IntegralIntervalType { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCalculatedValueIntegral_IntegralBase")]
[DefaultValueAttribute("0")]
public double IntegralBase { get; public set; }
    [BrowsableAttribute("False")]
public long Period { get; public set; }
    [BrowsableAttribute("False")]
public DurationType PeriodType { get; public set; }
    public double get_IntegralInterval();
    public void set_IntegralInterval(double value);
    public PeriodType get_IntegralIntervalType();
    public void set_IntegralIntervalType(PeriodType value);
    public double get_IntegralBase();
    public void set_IntegralBase(double value);
    public virtual long get_Period();
    public virtual void set_Period(long value);
    public virtual DurationType get_PeriodType();
    public virtual void set_PeriodType(DurationType value);
    internal virtual void CalculateValue(double value, DateTime timestamp);
    private void RegenerateIntegralResult();
    public virtual void Reset();
    internal virtual void RefreshConsumers();
    internal virtual object CloneInternals(object copy);
}
internal class Microsoft.Reporting.Gauge.WebForms.CalculatedValueIntegralConverter : CollectionItemTypeConverter {
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.CalculatedValueLinearConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.CalculatedValueLinear : CalculatedValue {
    private double multiplier;
    private double addend;
    [SRCategoryAttribute("CategoryBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeCalculatedValueLinear_Multiplier")]
public double Multiplier { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeCalculatedValueLinear_Adder")]
public double AddConstant { get; public set; }
    [BrowsableAttribute("False")]
public long Period { get; public set; }
    [BrowsableAttribute("False")]
public DurationType PeriodType { get; public set; }
    [BrowsableAttribute("False")]
public double RefreshRate { get; public set; }
    [BrowsableAttribute("False")]
public PeriodType RefreshRateType { get; public set; }
    public double get_Multiplier();
    public void set_Multiplier(double value);
    public double get_AddConstant();
    public void set_AddConstant(double value);
    public virtual long get_Period();
    public virtual void set_Period(long value);
    public virtual DurationType get_PeriodType();
    public virtual void set_PeriodType(DurationType value);
    public virtual double get_RefreshRate();
    public virtual void set_RefreshRate(double value);
    public virtual PeriodType get_RefreshRateType();
    public virtual void set_RefreshRateType(PeriodType value);
    internal virtual void CalculateValue(double value, DateTime timestamp);
}
internal class Microsoft.Reporting.Gauge.WebForms.CalculatedValueLinearConverter : CollectionItemTypeConverter {
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.CalculatedValueMaxConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.CalculatedValueMax : CalculatedValue {
    internal virtual void CalculateValue(double value, DateTime timestamp);
}
internal class Microsoft.Reporting.Gauge.WebForms.CalculatedValueMaxConverter : CollectionItemTypeConverter {
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.CalculatedValueMinConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.CalculatedValueMin : CalculatedValue {
    internal virtual void CalculateValue(double value, DateTime timestamp);
}
internal class Microsoft.Reporting.Gauge.WebForms.CalculatedValueMinConverter : CollectionItemTypeConverter {
}
internal class Microsoft.Reporting.Gauge.WebForms.CalculatedValueNameConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.CalculatedValueRateOfChangeConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.CalculatedValueRateOfChange : CalculatedValue {
    private DataSampleRC[] oldValues;
    private GaugePeriod rateOfChange;
    [SRCategoryAttribute("CategoryBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeCalculatedValueRateOfChange_RateOfChangePeriod")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleNanValueConverter")]
public double RateOfChangePeriod { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeCalculatedValueRateOfChange_RateOfChangePeriodType")]
public PeriodType RateOfChangePeriodType { get; public set; }
    [BrowsableAttribute("False")]
public long Period { get; public set; }
    [BrowsableAttribute("False")]
public DurationType PeriodType { get; public set; }
    public virtual double get_RateOfChangePeriod();
    public virtual void set_RateOfChangePeriod(double value);
    public virtual PeriodType get_RateOfChangePeriodType();
    public virtual void set_RateOfChangePeriodType(PeriodType value);
    public virtual long get_Period();
    public virtual void set_Period(long value);
    public virtual DurationType get_PeriodType();
    public virtual void set_PeriodType(DurationType value);
    internal virtual void CalculateValue(double value, DateTime timestamp);
    private double GetResult(double value, DateTime timestamp, DataSampleRC rc, TimeSpan period);
    internal virtual object CloneInternals(object copy);
}
internal class Microsoft.Reporting.Gauge.WebForms.CalculatedValueRateOfChangeConverter : CollectionItemTypeConverter {
}
internal class Microsoft.Reporting.Gauge.WebForms.CallbackEventArgs : EventArgs {
    private string commandName;
    private string commandArgument;
    public string CommandName { get; }
    public string CommandArgument { get; }
    public CallbackEventArgs(string commandName, string commandArgument);
    public string get_CommandName();
    public string get_CommandArgument();
}
internal class Microsoft.Reporting.Gauge.WebForms.CallbackEventHandler : MulticastDelegate {
    public CallbackEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CallbackEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CallbackEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.Gauge.WebForms.CallbackManager : object {
    private string jsCode;
    private string controlUpdates;
    private bool disableClientUpdate;
    private string returnCommandName;
    private string returnCommandArgument;
    public bool DisableClientUpdate { get; public set; }
    public string ReturnCommandName { get; public set; }
    public string ReturnCommandArgument { get; public set; }
    public bool get_DisableClientUpdate();
    public void set_DisableClientUpdate(bool value);
    public string get_ReturnCommandName();
    public void set_ReturnCommandName(string value);
    public string get_ReturnCommandArgument();
    public void set_ReturnCommandArgument(string value);
    public void ExecuteClientScript(string jsSourceCode);
    internal void Reset();
    internal string GetJavaScript();
    internal string GetControlUpdates();
}
internal enum Microsoft.Reporting.Gauge.WebForms.CapStyle : Enum {
    public int value__;
    public static CapStyle Simple;
    public static CapStyle CustomCap1;
    public static CapStyle CustomCap2;
    public static CapStyle CustomCap3;
    public static CapStyle CustomCap4;
    public static CapStyle CustomCap5;
    public static CapStyle CustomCap6;
    public static CapStyle CustomCap7;
    public static CapStyle CustomCap8;
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.CircularGaugeConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.CircularGauge : GaugeBase {
    internal RectangleF absoluteRect;
    private CircularScaleCollection scales;
    private CircularRangeCollection ranges;
    private CircularPointerCollection pointers;
    private KnobCollection knobs;
    private GaugeLocation pivotPoint;
    [DesignerSerializationVisibilityAttribute("2")]
public CircularScaleCollection Scales { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public CircularRangeCollection Ranges { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public CircularPointerCollection Pointers { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("2")]
public KnobCollection Knobs { get; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeCircularGauge_PivotPoint")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.LocationConverter")]
[DesignerSerializationVisibilityAttribute("2")]
[DefaultValueAttribute("Microsoft.Reporting.Gauge.WebForms.GaugeLocation", "50F, 50F")]
[ValidateBound("100", "100")]
public GaugeLocation PivotPoint { get; public set; }
    internal CommonElements Common { get; internal set; }
    public CircularScaleCollection get_Scales();
    public CircularRangeCollection get_Ranges();
    public CircularPointerCollection get_Pointers();
    public KnobCollection get_Knobs();
    public GaugeLocation get_PivotPoint();
    public void set_PivotPoint(GaugeLocation value);
    public virtual string ToString();
    internal void RenderTopImage(GaugeGraphics g);
    internal virtual RectangleF GetAspectRatioBounds();
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
    internal virtual void BeginInit();
    internal virtual void EndInit();
    protected virtual void OnDispose();
    internal virtual void ReconnectData(bool exact);
    internal virtual void Notify(MessageType msg, NamedElement element, object param);
    internal virtual IEnumerable GetRanges();
    internal virtual void PointerValueChanged(PointerBase sender);
    internal virtual RectangleF GetBoundRect(GaugeGraphics g);
    internal virtual void RenderStaticElements(GaugeGraphics g);
    internal virtual void RenderDynamicElements(GaugeGraphics g);
    internal void RenderDynamicShadows(GaugeGraphics g);
    internal void RenderStaticShadows(GaugeGraphics g);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.ISelectable.DrawSelection(GaugeGraphics g, bool designTimeSelection);
    public virtual object Clone();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.CircularGaugeCollection : NamedCollection {
    private CircularGauge Item { get; private set; }
    private CircularGauge Item { get; private set; }
    public CircularGauge Item { get; public set; }
    internal CircularGaugeCollection(NamedElement parent, CommonElements common);
    public CircularGauge Add(string name);
    public int Add(CircularGauge value);
    public void Remove(CircularGauge value);
    public bool Contains(CircularGauge value);
    public void Insert(int index, CircularGauge value);
    public int IndexOf(CircularGauge value);
    private CircularGauge get_Item(int index);
    private void set_Item(int index, CircularGauge value);
    private CircularGauge get_Item(string name);
    private void set_Item(string name, CircularGauge value);
    public CircularGauge get_Item(object obj);
    public void set_Item(object obj, CircularGauge value);
    internal virtual string GetElementNameFormat(NamedElement el);
}
internal class Microsoft.Reporting.Gauge.WebForms.CircularGaugeConverter : CollectionItemTypeConverter {
}
internal class Microsoft.Reporting.Gauge.WebForms.CircularLabelStyle : LinearLabelStyle {
    private bool rotateLabels;
    private bool allowUpsideDown;
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeCircularLabelStyle_RotateLabels")]
[DefaultValueAttribute("True")]
public bool RotateLabels { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeCircularLabelStyle_AllowUpsideDown")]
[DefaultValueAttribute("False")]
public bool AllowUpsideDown { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFont3")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 14pt")]
public Font Font { get; public set; }
    public CircularLabelStyle(object parent);
    public bool get_RotateLabels();
    public void set_RotateLabels(bool value);
    public bool get_AllowUpsideDown();
    public void set_AllowUpsideDown(bool value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
}
internal class Microsoft.Reporting.Gauge.WebForms.CircularMajorTickMark : TickMark {
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeShape3")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MarkerStyle Shape { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLength3")]
[NotifyParentPropertyAttribute("True")]
[ValidateBound("0", "50")]
[DefaultValueAttribute("14")]
public float Length { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeWidth7")]
[NotifyParentPropertyAttribute("True")]
[ValidateBound("0", "30")]
[DefaultValueAttribute("8")]
public float Width { get; public set; }
    public CircularMajorTickMark(object parent);
    public virtual MarkerStyle get_Shape();
    public virtual void set_Shape(MarkerStyle value);
    public virtual float get_Length();
    public virtual void set_Length(float value);
    public virtual float get_Width();
    public virtual void set_Width(float value);
}
internal class Microsoft.Reporting.Gauge.WebForms.CircularMinorTickMark : TickMark {
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeShape3")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MarkerStyle Shape { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLength3")]
[NotifyParentPropertyAttribute("True")]
[ValidateBound("0", "50")]
[DefaultValueAttribute("8")]
public float Length { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeWidth7")]
[NotifyParentPropertyAttribute("True")]
[ValidateBound("0", "30")]
[DefaultValueAttribute("3")]
public float Width { get; public set; }
    public CircularMinorTickMark(object parent);
    public virtual MarkerStyle get_Shape();
    public virtual void set_Shape(MarkerStyle value);
    public virtual float get_Length();
    public virtual void set_Length(float value);
    public virtual float get_Width();
    public virtual void set_Width(float value);
}
internal class Microsoft.Reporting.Gauge.WebForms.CircularPinLabel : LinearPinLabel {
    private bool rotateLabels;
    private bool allowUpsideDown;
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeCircularPinLabel_RotateLabel")]
[DefaultValueAttribute("False")]
public bool RotateLabel { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeCircularPinLabel_AllowUpsideDown")]
[DefaultValueAttribute("False")]
public bool AllowUpsideDown { get; public set; }
    public CircularPinLabel(object parent);
    public bool get_RotateLabel();
    public void set_RotateLabel(bool value);
    public bool get_AllowUpsideDown();
    public void set_AllowUpsideDown(bool value);
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.CircularPointerConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.CircularPointer : PointerBase {
    private XamlRenderer xamlRenderer;
    private CircularPointerType type;
    private NeedleStyle needleStyle;
    private bool capVisible;
    private bool capOnTop;
    private bool capReflection;
    private float capWidth;
    private string capImage;
    private Color capImageTransColor;
    private Color capImageHueColor;
    private Point capImageOrigin;
    private Placement placement;
    private CapStyle capStyle;
    private Color capFillColor;
    private GradientType capFillGradientType;
    private Color capFillGradientEndColor;
    private GaugeHatchStyle capFillHatchStyle;
    private bool selected;
    private GraphicsPath[] hotRegions;
    [SRCategoryAttribute("CategoryTypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeCircularPointer_Type")]
[ParenthesizePropertyNameAttribute("True")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CircularPointerType Type { get; public set; }
    [SRCategoryAttribute("CategoryTypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeCircularPointer_NeedleStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public NeedleStyle NeedleStyle { get; public set; }
    [SRCategoryAttribute("CategoryPointerCap")]
[SRDescriptionAttribute("DescriptionAttributeCircularPointer_CapVisible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool CapVisible { get; public set; }
    [SRCategoryAttribute("CategoryPointerCap")]
[SRDescriptionAttribute("DescriptionAttributeCircularPointer_CapOnTop")]
[DefaultValueAttribute("True")]
public bool CapOnTop { get; public set; }
    [SRCategoryAttribute("CategoryPointerCap")]
[SRDescriptionAttribute("DescriptionAttributeCircularPointer_CapReflection")]
[DefaultValueAttribute("False")]
public bool CapReflection { get; public set; }
    [SRCategoryAttribute("CategoryPointerCap")]
[SRDescriptionAttribute("DescriptionAttributeCircularPointer_CapWidth")]
[ValidateBound("0", "100")]
[DefaultValueAttribute("26")]
public float CapWidth { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeCircularPointer_CapImage")]
[DefaultValueAttribute("")]
public string CapImage { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeCircularPointer_CapImageTransColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color CapImageTransColor { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeCapImageHueColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color CapImageHueColor { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeCircularPointer_CapImageOrigin")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.EmptyPointConverter")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
public Point CapImageOrigin { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributePlacement")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Placement Placement { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeWidth")]
[ValidateBound("0", "30")]
[DefaultValueAttribute("15")]
public float Width { get; public set; }
    [SRCategoryAttribute("CategoryTypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeMarkerStyle4")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MarkerStyle MarkerStyle { get; public set; }
    [SRCategoryAttribute("CategoryTypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeMarkerLength4")]
[ValidateBound("0", "50")]
[DefaultValueAttribute("10")]
public float MarkerLength { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFillGradientType6")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType FillGradientType { get; public set; }
    [SRCategoryAttribute("CategoryPointerCap")]
[SRDescriptionAttribute("DescriptionAttributeCircularPointer_CapStyle")]
[ParenthesizePropertyNameAttribute("True")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CapStyle CapStyle { get; public set; }
    [SRCategoryAttribute("CategoryPointerCap")]
[SRDescriptionAttribute("DescriptionAttributeCircularPointer_CapFillColor")]
[DefaultValueAttribute("System.Drawing.Color", "Gainsboro")]
public Color CapFillColor { get; public set; }
    [SRCategoryAttribute("CategoryPointerCap")]
[SRDescriptionAttribute("DescriptionAttributeCircularPointer_CapFillGradientType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType CapFillGradientType { get; public set; }
    [SRCategoryAttribute("CategoryPointerCap")]
[SRDescriptionAttribute("DescriptionAttributeCircularPointer_CapFillGradientEndColor")]
[DefaultValueAttribute("System.Drawing.Color", "DimGray")]
public Color CapFillGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryPointerCap")]
[SRDescriptionAttribute("DescriptionAttributeCircularPointer_CapFillHatchStyle")]
[EditorAttribute("Microsoft.Reporting.Gauge.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeHatchStyle CapFillHatchStyle { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeCursor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeCursor Cursor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeDampeningEnabled3")]
[DefaultValueAttribute("False")]
public bool DampeningEnabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeSelected")]
[DefaultValueAttribute("False")]
public bool Selected { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public bool NeedleCapVisible { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public bool NeedleCapOnTop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public float NeedleCapWidth { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public string NeedleCapImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public Color NeedleCapImageTransColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public Point NeedleCapImageOrigin { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public Color NeedleCapFillColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public GradientType NeedleCapFillGradientType { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public Color NeedleCapFillGradientEndColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public GaugeHatchStyle NeedleCapFillHatchStyle { get; public set; }
    public CircularPointerType get_Type();
    public void set_Type(CircularPointerType value);
    public NeedleStyle get_NeedleStyle();
    public void set_NeedleStyle(NeedleStyle value);
    public bool get_CapVisible();
    public void set_CapVisible(bool value);
    public bool get_CapOnTop();
    public void set_CapOnTop(bool value);
    public bool get_CapReflection();
    public void set_CapReflection(bool value);
    public float get_CapWidth();
    public void set_CapWidth(float value);
    public string get_CapImage();
    public void set_CapImage(string value);
    public Color get_CapImageTransColor();
    public void set_CapImageTransColor(Color value);
    public Color get_CapImageHueColor();
    public void set_CapImageHueColor(Color value);
    public Point get_CapImageOrigin();
    public void set_CapImageOrigin(Point value);
    public Placement get_Placement();
    public void set_Placement(Placement value);
    public virtual float get_Width();
    public virtual void set_Width(float value);
    public virtual MarkerStyle get_MarkerStyle();
    public virtual void set_MarkerStyle(MarkerStyle value);
    public virtual float get_MarkerLength();
    public virtual void set_MarkerLength(float value);
    public virtual GradientType get_FillGradientType();
    public virtual void set_FillGradientType(GradientType value);
    public CapStyle get_CapStyle();
    public void set_CapStyle(CapStyle value);
    public Color get_CapFillColor();
    public void set_CapFillColor(Color value);
    public GradientType get_CapFillGradientType();
    public void set_CapFillGradientType(GradientType value);
    public Color get_CapFillGradientEndColor();
    public void set_CapFillGradientEndColor(Color value);
    public GaugeHatchStyle get_CapFillHatchStyle();
    public void set_CapFillHatchStyle(GaugeHatchStyle value);
    public virtual GaugeCursor get_Cursor();
    public virtual void set_Cursor(GaugeCursor value);
    public virtual bool get_DampeningEnabled();
    public virtual void set_DampeningEnabled(bool value);
    public bool get_Selected();
    public void set_Selected(bool value);
    public bool get_NeedleCapVisible();
    public void set_NeedleCapVisible(bool value);
    public bool get_NeedleCapOnTop();
    public void set_NeedleCapOnTop(bool value);
    public float get_NeedleCapWidth();
    public void set_NeedleCapWidth(float value);
    public string get_NeedleCapImage();
    public void set_NeedleCapImage(string value);
    public Color get_NeedleCapImageTransColor();
    public void set_NeedleCapImageTransColor(Color value);
    public Point get_NeedleCapImageOrigin();
    public void set_NeedleCapImageOrigin(Point value);
    public Color get_NeedleCapFillColor();
    public void set_NeedleCapFillColor(Color value);
    public GradientType get_NeedleCapFillGradientType();
    public void set_NeedleCapFillGradientType(GradientType value);
    public Color get_NeedleCapFillGradientEndColor();
    public void set_NeedleCapFillGradientEndColor(Color value);
    public GaugeHatchStyle get_NeedleCapFillHatchStyle();
    public void set_NeedleCapFillHatchStyle(GaugeHatchStyle value);
    internal Brush GetNeedleFillBrush(GaugeGraphics g, bool primary, GraphicsPath path, PointF pointOrigin, float angle);
    internal NeedleStyleAttrib GetNeedleStyleAttrib(GaugeGraphics g, PointF pointOrigin, float angle);
    internal MarkerStyleAttrib GetMarkerStyleAttrib(GaugeGraphics g);
    internal float CalculateMarkerDistance();
    internal BarStyleAttrib GetBarStyleAttrib(GaugeGraphics g);
    private CircularRange[] GetColorRanges();
    private double GetBarStartValue();
    internal RectangleF CalculateBarRectangle();
    internal RectangleF GetNeedleCapBounds(GaugeGraphics g, PointF pointOrigin);
    internal virtual void Render(GaugeGraphics g);
    internal void DrawImage(GaugeGraphics g, bool primary, bool drawShadow);
    internal GraphicsPath GetPointerPath(GaugeGraphics g, bool shadowPath);
    internal GraphicsPath GetShadowPath(GaugeGraphics g);
    internal void AddHotRegion(GraphicsPath path, bool primary);
    internal void SetAllHotRegions(GaugeGraphics g);
    public virtual string ToString();
    public CircularGauge GetGauge();
    public CircularScale GetScale();
    internal float GetNeedleTailLength();
    internal XamlRenderer GetCachedXamlRenderer(RectangleF bounds);
    internal void ResetCachedXamlRenderer();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.ISelectable.DrawSelection(GaugeGraphics g, bool designTimeSelection);
    public virtual object Clone();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.CircularPointerCollection : NamedCollection {
    private CircularPointer Item { get; private set; }
    private CircularPointer Item { get; private set; }
    public CircularPointer Item { get; public set; }
    internal CircularPointerCollection(NamedElement parent, CommonElements common);
    public CircularPointer Add(string name);
    public int Add(CircularPointer value);
    public void Remove(CircularPointer value);
    public bool Contains(CircularPointer value);
    public void Insert(int index, CircularPointer value);
    public int IndexOf(CircularPointer value);
    private CircularPointer get_Item(int index);
    private void set_Item(int index, CircularPointer value);
    private CircularPointer get_Item(string name);
    private void set_Item(string name, CircularPointer value);
    public CircularPointer get_Item(object obj);
    public void set_Item(object obj, CircularPointer value);
    internal virtual string GetElementNameFormat(NamedElement el);
}
internal class Microsoft.Reporting.Gauge.WebForms.CircularPointerConverter : CollectionItemTypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal enum Microsoft.Reporting.Gauge.WebForms.CircularPointerType : Enum {
    public int value__;
    public static CircularPointerType Needle;
    public static CircularPointerType Marker;
    public static CircularPointerType Bar;
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.CircularRangeConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.CircularRange : RangeBase {
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeStartValue")]
[DefaultValueAttribute("70")]
public double StartValue { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeEndValue3")]
[DefaultValueAttribute("100")]
public double EndValue { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeCircularRange_StartWidth")]
[ValidateBound("0", "100")]
[DefaultValueAttribute("15")]
public float StartWidth { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeCircularRange_EndWidth")]
[ValidateBound("0", "100")]
[DefaultValueAttribute("30")]
public float EndWidth { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeDistanceFromScale8")]
[ValidateBound("0", "100")]
[DefaultValueAttribute("30")]
public float DistanceFromScale { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributePlacement7")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Placement Placement { get; public set; }
    public virtual double get_StartValue();
    public virtual void set_StartValue(double value);
    public virtual double get_EndValue();
    public virtual void set_EndValue(double value);
    public virtual float get_StartWidth();
    public virtual void set_StartWidth(float value);
    public virtual float get_EndWidth();
    public virtual void set_EndWidth(float value);
    public virtual float get_DistanceFromScale();
    public virtual void set_DistanceFromScale(float value);
    public virtual Placement get_Placement();
    public virtual void set_Placement(Placement value);
    public virtual string ToString();
    public CircularGauge GetGauge();
    public CircularScale GetScale();
    internal virtual void Render(GaugeGraphics g);
    internal RectangleF CalculateRangeRectangle();
    internal GraphicsPath GetPath(GaugeGraphics g, bool getShadowPath);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.ISelectable.DrawSelection(GaugeGraphics g, bool designTimeSelection);
    public virtual object Clone();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.CircularRangeCollection : NamedCollection {
    private CircularRange Item { get; private set; }
    private CircularRange Item { get; private set; }
    public CircularRange Item { get; public set; }
    internal CircularRangeCollection(NamedElement parent, CommonElements common);
    public CircularRange Add(string name);
    public int Add(CircularRange value);
    public void Remove(CircularRange value);
    public bool Contains(CircularRange value);
    public void Insert(int index, CircularRange value);
    public int IndexOf(CircularRange value);
    private CircularRange get_Item(int index);
    private void set_Item(int index, CircularRange value);
    private CircularRange get_Item(string name);
    private void set_Item(string name, CircularRange value);
    public CircularRange get_Item(object obj);
    public void set_Item(object obj, CircularRange value);
    internal virtual string GetElementNameFormat(NamedElement el);
}
internal class Microsoft.Reporting.Gauge.WebForms.CircularRangeConverter : CollectionItemTypeConverter {
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.CircularScaleConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.CircularScale : ScaleBase {
    private float radius;
    [SRCategoryAttribute("CategoryLabelsAndTickMarks")]
[SRDescriptionAttribute("DescriptionAttributeLabelStyle")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public CircularLabelStyle LabelStyle { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeCircularScale_Radius")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.FloatAutoValueConverter")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("37")]
[ValidateBound("5", "90")]
public float Radius { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeCircularScale_StartAngle")]
[DefaultValueAttribute("20")]
[ValidateBound("0", "360")]
public float StartAngle { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeCircularScale_SweepAngle")]
[DefaultValueAttribute("320")]
[ValidateBound("0", "360")]
public float SweepAngle { get; public set; }
    [SRCategoryAttribute("CategoryLabelsAndTickMarks")]
[SRDescriptionAttribute("DescriptionAttributeCircularScale_MajorTickMark")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public CircularMajorTickMark MajorTickMark { get; public set; }
    [SRCategoryAttribute("CategoryLabelsAndTickMarks")]
[SRDescriptionAttribute("DescriptionAttributeCircularScale_MinorTickMark")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public CircularMinorTickMark MinorTickMark { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeCircularScale_GaugePivotPoint")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.LocationConverter")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[DefaultValueAttribute("Microsoft.Reporting.Gauge.WebForms.GaugeLocation", "50F, 50F")]
[ValidateBound("100", "100")]
public GaugeLocation GaugePivotPoint { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeMinimumPin")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public CircularSpecialPosition MinimumPin { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeMaximumPin")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public CircularSpecialPosition MaximumPin { get; public set; }
    public CircularLabelStyle get_LabelStyle();
    public void set_LabelStyle(CircularLabelStyle value);
    public float get_Radius();
    public void set_Radius(float value);
    public float get_StartAngle();
    public void set_StartAngle(float value);
    public float get_SweepAngle();
    public void set_SweepAngle(float value);
    public CircularMajorTickMark get_MajorTickMark();
    public void set_MajorTickMark(CircularMajorTickMark value);
    public CircularMinorTickMark get_MinorTickMark();
    public void set_MinorTickMark(CircularMinorTickMark value);
    public GaugeLocation get_GaugePivotPoint();
    public void set_GaugePivotPoint(GaugeLocation value);
    public CircularSpecialPosition get_MinimumPin();
    public void set_MinimumPin(CircularSpecialPosition value);
    public CircularSpecialPosition get_MaximumPin();
    public void set_MaximumPin(CircularSpecialPosition value);
    internal float GetRadius();
    internal PointF GetPivotPoint();
    private GraphicsPath GetBarPath(float barOffsetInside, float barOffsetOutside, float angularMargin);
    private void SetScaleHitTestPath(GaugeGraphics g);
    internal GraphicsPath GetCompoundPath(GaugeGraphics g);
    internal GraphicsPath GetShadowPath(GaugeGraphics g);
    private void RenderBar(GaugeGraphics g);
    internal virtual void DrawTickMark(GaugeGraphics g, CustomTickMark tickMark, double value, float offset);
    internal virtual LinearLabelStyle GetLabelStyle();
    private void DrawLabel(Placement placement, string labelStr, double position, float labelPos, float rotateLabelAngle, Font font, Color color, bool rotateLabels, bool allowUpsideDown, FontUnit fontUnit);
    private void RenderLabels(GaugeGraphics g);
    internal virtual void DrawCustomLabel(CustomLabel label);
    internal virtual void DrawSpecialPosition(GaugeGraphics g, SpecialPosition label, float angle);
    internal void RenderStaticElements(GaugeGraphics g);
    internal void RenderDynamicElements(GaugeGraphics g);
    internal void SetDrawRegion(GaugeGraphics g);
    public virtual string ToString();
    public CircularGauge GetGauge();
    private float GetPositionFromValueNormalized(double value);
    protected virtual PointF GetPoint(float position, float offset);
    internal virtual double GetValue(PointF c, PointF p);
    internal float GetLargestRadius(GaugeGraphics g);
    internal float GetCustomLabelOffset(GaugeGraphics g, CustomLabel customLabel);
    internal float GetTickMarkOffset(GaugeGraphics g, TickMark tickMark);
    internal float GetLabelsOffset(GaugeGraphics g);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.ISelectable.DrawSelection(GaugeGraphics g, bool designTimeSelection);
    internal PointF[] GetSelectionMarkers(GaugeGraphics g, float barOffsetInside, float barOffsetOutside, float angularMargin);
    internal void GetBoundsFromPoints(PointF[] points, PointF& minPoint, PointF& maxPoint);
    public virtual object Clone();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.CircularScaleCollection : NamedCollection {
    private CircularScale Item { get; private set; }
    private CircularScale Item { get; private set; }
    public CircularScale Item { get; public set; }
    internal CircularScaleCollection(NamedElement parent, CommonElements common);
    public CircularScale Add(string name);
    public int Add(CircularScale value);
    public void Remove(CircularScale value);
    public bool Contains(CircularScale value);
    public void Insert(int index, CircularScale value);
    public int IndexOf(CircularScale value);
    private CircularScale get_Item(int index);
    private void set_Item(int index, CircularScale value);
    private CircularScale get_Item(string name);
    private void set_Item(string name, CircularScale value);
    public CircularScale get_Item(object obj);
    public void set_Item(object obj, CircularScale value);
    internal virtual string GetElementNameFormat(NamedElement el);
}
internal class Microsoft.Reporting.Gauge.WebForms.CircularScaleConverter : CollectionItemTypeConverter {
}
internal class Microsoft.Reporting.Gauge.WebForms.CircularSpecialPosition : SpecialPosition {
    private CircularPinLabel pinCircularLabel;
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLabelStyle3")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public CircularPinLabel LabelStyle { get; public set; }
    public CircularSpecialPosition(object parent);
    public CircularPinLabel get_LabelStyle();
    public void set_LabelStyle(CircularPinLabel value);
}
internal class Microsoft.Reporting.Gauge.WebForms.CollectionItemTypeConverter : TypeConverter {
    internal Type simpleType;
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal static class Microsoft.Reporting.Gauge.WebForms.ColorHandler : object {
    internal static Color HSVtoColor(HSV hsv);
    internal static HSV ColorToHSV(Color color);
    internal static RGB HSVtoRGB(HSV HSV);
    internal static HSV RGBtoHSV(RGB RGB);
}
internal class Microsoft.Reporting.Gauge.WebForms.CommonElements : object {
    private GaugeGraphics graph;
    internal IServiceContainer container;
    internal bool processModePaint;
    internal bool processModeRegions;
    internal ObjectLinker objectLinker;
    private int width;
    private int height;
    private GaugeCore gaugeCore;
    internal ImageLoader ImageLoader { get; }
    internal GaugeCore GaugeCore { get; }
    internal GaugeContainer GaugeContainer { get; }
    internal GaugeGraphics Graph { get; internal set; }
    internal ObjectLinker ObjectLinker { get; }
    internal int Width { get; internal set; }
    internal int Height { get; internal set; }
    internal CommonElements(IServiceContainer container);
    internal ImageLoader get_ImageLoader();
    internal GaugeCore get_GaugeCore();
    internal GaugeContainer get_GaugeContainer();
    internal GaugeGraphics get_Graph();
    internal void set_Graph(GaugeGraphics value);
    internal ObjectLinker get_ObjectLinker();
    internal int get_Width();
    internal void set_Width(int value);
    internal int get_Height();
    internal void set_Height(int value);
    internal void InvokePrePaint(object sender);
    internal void InvokePostPaint(object sender);
}
internal static class Microsoft.Reporting.Gauge.WebForms.Constants : object {
    public static string DefaultName;
    public static string AutoValue;
    public static string NotSetValue;
    public static string NameValueString;
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.CustomLabelConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.CustomLabel : NamedElement {
    private double labelValue;
    private CustomTickMark tickMarkStyle;
    private string text;
    private Font font;
    private FontUnit fontUnit;
    private Color textColor;
    private bool visible;
    private Placement placement;
    private bool rotateLabels;
    private bool allowUpsideDown;
    private float fontAngle;
    private float scaleOffset;
    [SRCategoryAttribute("CategoryMisc")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_Value")]
[DefaultValueAttribute("0")]
public double Value { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_TickMarkStyle")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
[DefaultValueAttribute("Microsoft.Reporting.Gauge.WebForms.CustomTickMark", "MarkerStyle.Trapezoid, 10F, 6F")]
public CustomTickMark TickMarkStyle { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeText5")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_Font")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 14pt")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFontUnit")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FontUnit FontUnit { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_TextColor")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_Visible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_Placement")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Placement Placement { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_RotateLabel")]
[DefaultValueAttribute("False")]
public bool RotateLabel { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_AllowUpsideDown")]
[DefaultValueAttribute("False")]
public bool AllowUpsideDown { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_FontAngle")]
[ValidateBound("0", "360")]
[DefaultValueAttribute("0")]
public float FontAngle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomLabel_DistanceFromScale")]
[ValidateBound("-30", "30")]
[DefaultValueAttribute("0")]
public float DistanceFromScale { get; public set; }
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public double get_Value();
    public void set_Value(double value);
    public CustomTickMark get_TickMarkStyle();
    public void set_TickMarkStyle(CustomTickMark value);
    public string get_Text();
    public void set_Text(string value);
    public Font get_Font();
    public void set_Font(Font value);
    public FontUnit get_FontUnit();
    public void set_FontUnit(FontUnit value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public Placement get_Placement();
    public void set_Placement(Placement value);
    public bool get_RotateLabel();
    public void set_RotateLabel(bool value);
    public bool get_AllowUpsideDown();
    public void set_AllowUpsideDown(bool value);
    public float get_FontAngle();
    public void set_FontAngle(float value);
    public float get_DistanceFromScale();
    public void set_DistanceFromScale(float value);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.CustomLabelCollection : NamedCollection {
    private CustomLabel Item { get; private set; }
    private CustomLabel Item { get; private set; }
    public CustomLabel Item { get; public set; }
    internal CustomLabelCollection(NamedElement parent, CommonElements common);
    public CustomLabel Add(string name);
    public int Add(CustomLabel value);
    public void Remove(CustomLabel value);
    public bool Contains(CustomLabel value);
    public void Insert(int index, CustomLabel value);
    public int IndexOf(CustomLabel value);
    private CustomLabel get_Item(int index);
    private void set_Item(int index, CustomLabel value);
    private CustomLabel get_Item(string name);
    private void set_Item(string name, CustomLabel value);
    public CustomLabel get_Item(object obj);
    public void set_Item(object obj, CustomLabel value);
    internal virtual string GetDefaultElementName(NamedElement el);
}
internal class Microsoft.Reporting.Gauge.WebForms.CustomLabelConverter : CollectionItemTypeConverter {
}
internal class Microsoft.Reporting.Gauge.WebForms.CustomTickMark : GaugeObject {
    private bool visible;
    private Placement placement;
    private Color borderColor;
    private GaugeDashStyle borderStyle;
    private int borderWidth;
    private Color fillColor;
    private bool enableGradient;
    private float gradientDensity;
    private float offset;
    private MarkerStyle shape;
    private float length;
    private float width;
    private string image;
    private Color imageTransColor;
    private Color imageHueColor;
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeVisible12")]
[NotifyParentPropertyAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributePlacement6")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Placement Placement { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor3")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "DimGray")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderStyle3")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderWidth")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFillColor4")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "WhiteSmoke")]
public Color FillColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeEnableGradient")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("True")]
public bool EnableGradient { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGradientDensity")]
[NotifyParentPropertyAttribute("True")]
[ValidateBound("0", "100")]
[DefaultValueAttribute("30")]
public float GradientDensity { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeDistanceFromScale4")]
[NotifyParentPropertyAttribute("True")]
[ValidateBound("-30", "30")]
[DefaultValueAttribute("0")]
public float DistanceFromScale { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeShape3")]
[NotifyParentPropertyAttribute("True")]
public MarkerStyle Shape { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLength")]
[NotifyParentPropertyAttribute("True")]
public float Length { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeWidth7")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("3")]
public float Width { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeImage5")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
public string Image { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeImageTransColor4")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageTransColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeImageHueColor6")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageHueColor { get; public set; }
    public CustomTickMark(object parent);
    public CustomTickMark(object parent, MarkerStyle shape, float length, float width);
    public bool get_Visible();
    public void set_Visible(bool value);
    public Placement get_Placement();
    public void set_Placement(Placement value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public GaugeDashStyle get_BorderStyle();
    public void set_BorderStyle(GaugeDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public bool get_EnableGradient();
    public void set_EnableGradient(bool value);
    public float get_GradientDensity();
    public void set_GradientDensity(float value);
    public float get_DistanceFromScale();
    public void set_DistanceFromScale(float value);
    public virtual MarkerStyle get_Shape();
    public virtual void set_Shape(MarkerStyle value);
    public virtual float get_Length();
    public virtual void set_Length(float value);
    public virtual float get_Width();
    public virtual void set_Width(float value);
    public string get_Image();
    public void set_Image(string value);
    public Color get_ImageTransColor();
    public void set_ImageTransColor(Color value);
    public Color get_ImageHueColor();
    public void set_ImageHueColor(Color value);
}
internal class Microsoft.Reporting.Gauge.WebForms.DataAttributes : GaugeObject {
    private double dValue;
    private bool isPercentBased;
    private double minimum;
    private double maximum;
    private string valueSource;
    private double oldValue;
    private DateTime dateValueStamp;
    private IValueProvider provider;
    internal double Value { get; internal set; }
    public bool IsPercentBased { get; public set; }
    public double Minimum { get; public set; }
    public double Maximum { get; public set; }
    internal string ValueSource { get; internal set; }
    internal double OldValue { get; internal set; }
    internal DateTime DateValueStamp { get; }
    internal DataAttributes(object parent);
    internal double get_Value();
    internal void set_Value(double value);
    public bool get_IsPercentBased();
    public void set_IsPercentBased(bool value);
    internal double GetValueInPercents();
    public double get_Minimum();
    public void set_Minimum(double value);
    public double get_Maximum();
    public void set_Maximum(double value);
    internal string get_ValueSource();
    internal void set_ValueSource(string value);
    internal double get_OldValue();
    internal void set_OldValue(double value);
    internal DateTime get_DateValueStamp();
    internal void SetValue(double value, bool initialize);
    private Hashtable CollectValues();
    private void AttachToProvider(bool exact);
    internal virtual void EndInit();
    internal virtual void ReconnectData(bool exact);
    internal virtual void Notify(MessageType msg, NamedElement element, object param);
    internal bool StartDampening(double targetValue, double minimum, double maximum, double dampeningSweepTime, double refreshRate);
    internal void StopDampening();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IValueConsumer.ProviderRemoved(IValueProvider provider);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IValueConsumer.ProviderNameChanged(IValueProvider provider);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IValueConsumer.InputValueChanged(object sender, ValueChangedEventArgs e);
    private sealed virtual override IValueProvider Microsoft.Reporting.Gauge.WebForms.IValueConsumer.GetProvider();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IValueConsumer.Reset();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IValueConsumer.Refresh();
    protected virtual void OnDispose();
}
internal class Microsoft.Reporting.Gauge.WebForms.DataFieldMemberConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    private void AddToList(ArrayList names, DataTable dataTable, bool includeTableName);
    internal static ArrayList GetDataSourceMemberNames(object dataSource);
}
internal class Microsoft.Reporting.Gauge.WebForms.DataMemberConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Gauge.WebForms.DataSampleRC : HistoryEntry {
    internal bool Invalid;
    public DateTime Timestamp { get; public set; }
    public double Value { get; public set; }
    public virtual DateTime get_Timestamp();
    public virtual void set_Timestamp(DateTime value);
    public virtual double get_Value();
    public virtual void set_Value(double value);
    internal void Assign(DataSampleRC data);
}
internal class Microsoft.Reporting.Gauge.WebForms.DataSourceConverter : ReferenceConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    private void FillList(ArrayList list1, StandardValuesCollection collection1);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal static class Microsoft.Reporting.Gauge.WebForms.DigitalSegment : object {
    internal static float widthRatio;
    internal static float shearFactor;
    internal static float sgmntWidth7;
    private static PointF[] GetSegment7(PointF p, SizeF s);
    private static PointF[] GetSegmentHKLN(PointF p, SizeF s, float smallWidth, bool left);
    private static GraphicsPath GetSegment7(LEDSegment7 segment, PointF p, float size);
    private static GraphicsPath GetSegment14(LEDSegment14 segment, PointF p, float size);
    internal static GraphicsPath GetSegments(LEDSegment7 segments, PointF point, float size);
    internal static GraphicsPath GetOrientedSegments(LEDSegment7 segments, PointF point, float size, SegmentsCache cache);
    internal static GraphicsPath GetSegments(LEDSegment14 segments, PointF point, float size);
    internal static GraphicsPath GetOrientedSegments(LEDSegment14 segments, PointF point, float size, SegmentsCache cache);
    internal static GraphicsPath GetSymbol7(char symbol, PointF point, float size, bool decDot, bool comma, bool sepDots, SegmentsCache cache);
    internal static GraphicsPath GetSymbol14(char symbol, PointF point, float size, bool decDot, bool comma, bool sepDots, SegmentsCache cache);
}
internal class Microsoft.Reporting.Gauge.WebForms.DoubleAutoValueConverter : DoubleConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[AttributeUsageAttribute("128")]
internal class Microsoft.Reporting.Gauge.WebForms.DoubleConverterHint : Attribute {
    private double bound;
    public double Bound { get; }
    public DoubleConverterHint(double bound);
    public double get_Bound();
}
internal class Microsoft.Reporting.Gauge.WebForms.DoubleInfinityConverter : DoubleConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Gauge.WebForms.DoubleNanValueConverter : DoubleConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal enum Microsoft.Reporting.Gauge.WebForms.DurationType : Enum {
    public int value__;
    public static DurationType Infinite;
    public static DurationType Milliseconds;
    public static DurationType Seconds;
    public static DurationType Minutes;
    public static DurationType Hours;
    public static DurationType Days;
    public static DurationType Count;
}
internal class Microsoft.Reporting.Gauge.WebForms.EmptyPointConverter : PointConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Gauge.WebForms.FlagsEnumCheckedListBox : CheckedListBox {
    private object editValue;
    private Type editType;
    public FlagsEnumCheckedListBox(object editValue, Type editType);
    private void FillList();
    public object GetNewValue();
}
internal class Microsoft.Reporting.Gauge.WebForms.FlagsEnumUITypeEditor : UITypeEditor {
    private Type enumType;
    private IWindowsFormsEditorService edSvc;
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Gauge.WebForms.FloatAutoValueConverter : SingleConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Gauge.WebForms.FloatNanValueConverter : SingleConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal enum Microsoft.Reporting.Gauge.WebForms.FontUnit : Enum {
    public int value__;
    public static FontUnit Percent;
    public static FontUnit Default;
}
internal class Microsoft.Reporting.Gauge.WebForms.FormatNumberHandler : MulticastDelegate {
    public FormatNumberHandler(object object, IntPtr method);
    public virtual string Invoke(object sender, double value, string format);
    public virtual IAsyncResult BeginInvoke(object sender, double value, string format, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.Gauge.WebForms.Gap : object {
    public float Inside;
    public float Center;
    public float Outside;
    private float baseInside;
    private float baseOutside;
    public Gap(float center);
    public void SetBase();
    public void SetOffset(Placement placement, float length);
    public void SetOffsetBase(Placement placement, float length);
}
internal abstract class Microsoft.Reporting.Gauge.WebForms.GaugeBase : NamedElement {
    private string parent;
    private NamedElement parentSystem;
    private string toolTip;
    private string href;
    private string mapAreaAttributes;
    private GaugeLocation location;
    private GaugeSize size;
    private int zOrder;
    private bool visible;
    private BackFrame frame;
    private bool clipContent;
    private bool selected;
    private string topImage;
    private Color topImageTransColor;
    private Color topImageHueColor;
    private float aspectRatio;
    private object imagMapProviderTag;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeParent5")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.ParentSourceConverter")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
public string Parent { get; public set; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeParentObject")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public NamedElement ParentObject { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryMisc")]
[SRDescriptionAttribute("DescriptionAttributeName3")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeToolTip8")]
[LocalizableAttribute("True")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeHref3")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeMapAreaAttributes4")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryPosition")]
[SRDescriptionAttribute("DescriptionAttributeLocation5")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.LocationConverter")]
[DesignerSerializationVisibilityAttribute("2")]
[ValidateBound("100", "100")]
public GaugeLocation Location { get; public set; }
    [SRCategoryAttribute("CategoryPosition")]
[SRDescriptionAttribute("DescriptionAttributeSize5")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.SizeConverter")]
[DesignerSerializationVisibilityAttribute("2")]
[ValidateBound("100", "100")]
public GaugeSize Size { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeZOrder4")]
[DefaultValueAttribute("0")]
public int ZOrder { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeVisible3")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBackFrame")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
public BackFrame BackFrame { get; public set; }
    protected BackFrame Frame { get; protected set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeClipContent")]
[DefaultValueAttribute("True")]
public bool ClipContent { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeSelected7")]
[DefaultValueAttribute("False")]
public bool Selected { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeTopImage4")]
[DefaultValueAttribute("")]
public string TopImage { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeTopImageTransColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color TopImageTransColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeTopImageHueColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color TopImageHueColor { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeGauge_AspectRatio")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.FloatAutoValueConverter")]
[DefaultValueAttribute("не число")]
public float AspectRatio { get; public set; }
    internal Position Position { get; }
    private object Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.Tag { get; private set; }
    public string get_Parent();
    public void set_Parent(string value);
    public NamedElement get_ParentObject();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public string get_Href();
    public sealed virtual void set_Href(string value);
    public string get_MapAreaAttributes();
    public void set_MapAreaAttributes(string value);
    public GaugeLocation get_Location();
    public void set_Location(GaugeLocation value);
    public GaugeSize get_Size();
    public void set_Size(GaugeSize value);
    public int get_ZOrder();
    public void set_ZOrder(int value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public BackFrame get_BackFrame();
    public void set_BackFrame(BackFrame value);
    protected BackFrame get_Frame();
    protected void set_Frame(BackFrame value);
    public bool get_ClipContent();
    public void set_ClipContent(bool value);
    public bool get_Selected();
    public void set_Selected(bool value);
    public string get_TopImage();
    public void set_TopImage(string value);
    public Color get_TopImageTransColor();
    public void set_TopImageTransColor(Color value);
    public Color get_TopImageHueColor();
    public void set_TopImageHueColor(Color value);
    public float get_AspectRatio();
    public void set_AspectRatio(float value);
    internal Position get_Position();
    private void RemoveAutoLayout();
    internal abstract virtual IEnumerable GetRanges();
    internal string GetDefaultScaleName(string scaleName);
    private void ConnectToParent(bool exact);
    internal virtual void OnAdded();
    internal virtual void EndInit();
    internal abstract virtual RectangleF GetAspectRatioBounds();
    internal virtual RectangleF GetBoundRect(GaugeGraphics g);
    internal virtual void RenderStaticElements(GaugeGraphics g);
    internal virtual void RenderDynamicElements(GaugeGraphics g);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IRenderable.RenderStaticElements(GaugeGraphics g);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IRenderable.RenderDynamicElements(GaugeGraphics g);
    private sealed virtual override int Microsoft.Reporting.Gauge.WebForms.IRenderable.GetZOrder();
    private sealed virtual override RectangleF Microsoft.Reporting.Gauge.WebForms.IRenderable.GetBoundRect(GaugeGraphics g);
    private sealed virtual override object Microsoft.Reporting.Gauge.WebForms.IRenderable.GetParentRenderable();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IRenderable.GetParentRenderableName();
    internal abstract virtual void PointerValueChanged(PointerBase sender);
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IToolTipProvider.GetToolTip(HitTestResult ht);
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetHref();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetMapAreaAttributes();
    private sealed virtual override object Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.set_Tag(object value);
}
[DisplayNameAttribute("Dundas Gauge")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_GaugeContainer")]
internal class Microsoft.Reporting.Gauge.WebForms.GaugeContainer : object {
    private static string smartClientDll;
    private static string jsFilename;
    internal GaugeCore gauge;
    internal string webFormDocumentURL;
    internal string applicationDocumentURL;
    internal static ITypeDescriptorContext controlCurrentContext;
    private string cachedImageUrl;
    internal static string productID;
    private bool pollServer;
    private Color backColor;
    private int width;
    private int height;
    private bool enabled;
    public FormatNumberHandler FormatNumberHandler;
    [CompilerGeneratedAttribute]
private GaugePaintEventHandler PrePaint;
    [CompilerGeneratedAttribute]
private GaugePaintEventHandler PostPaint;
    [CompilerGeneratedAttribute]
private RealTimeDataEventHandler RealTimeData;
    [CompilerGeneratedAttribute]
private CallbackEventHandler Callback;
    [CategoryAttribute("Data")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_Values")]
[DesignerSerializationVisibilityAttribute("2")]
public InputValueCollection Values { get; }
    [CategoryAttribute("Gauge Container")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_CircularGauges")]
[DesignerSerializationVisibilityAttribute("2")]
public CircularGaugeCollection CircularGauges { get; }
    [CategoryAttribute("Gauge Container")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_LinearGauges")]
[DesignerSerializationVisibilityAttribute("2")]
public LinearGaugeCollection LinearGauges { get; }
    [CategoryAttribute("Gauge Container")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_NumericIndicators")]
[DesignerSerializationVisibilityAttribute("2")]
public NumericIndicatorCollection NumericIndicators { get; }
    [CategoryAttribute("Gauge Container")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_StateIndicators")]
[DesignerSerializationVisibilityAttribute("2")]
public StateIndicatorCollection StateIndicators { get; }
    [CategoryAttribute("Gauge Container")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_Images")]
[DesignerSerializationVisibilityAttribute("2")]
public GaugeImageCollection Images { get; }
    [CategoryAttribute("Gauge Container")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_Labels")]
[DesignerSerializationVisibilityAttribute("2")]
public GaugeLabelCollection Labels { get; }
    [BrowsableAttribute("False")]
[CategoryAttribute("Gauge Container")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_NamedImages")]
[DesignerSerializationVisibilityAttribute("0")]
public NamedImageCollection NamedImages { get; }
    [CategoryAttribute("Image")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_MapAreas")]
[DesignerSerializationVisibilityAttribute("2")]
public MapAreaCollection MapAreas { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
public string LicenseData { get; public set; }
    [DescriptionAttribute("Separator to be used with the multiple value parameters.")]
public string MultiValueSeparator { get; public set; }
    public float ImageResolution { get; public set; }
    [CategoryAttribute("Gauge Behavior")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_RefreshRate")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleNanValueConverter")]
[DefaultValueAttribute("30")]
public double RefreshRate { get; public set; }
    [CategoryAttribute("Image")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_MapEnabled")]
[DefaultValueAttribute("True")]
public bool MapEnabled { get; public set; }
    [CategoryAttribute("Gauge Behavior")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_AutoLayout")]
[DefaultValueAttribute("True")]
public bool AutoLayout { get; public set; }
    [CategoryAttribute("Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_ShadowIntensity")]
[ValidateBound("0", "100")]
[DefaultValueAttribute("25")]
public float ShadowIntensity { get; public set; }
    [CategoryAttribute("Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_BackFrame")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
public BackFrame BackFrame { get; public set; }
    [CategoryAttribute("Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_TopImage")]
[DefaultValueAttribute("")]
public string TopImage { get; public set; }
    [CategoryAttribute("Appearance")]
[SRDescriptionAttribute("DescriptionAttributeTopImageTransColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color TopImageTransColor { get; public set; }
    [CategoryAttribute("Appearance")]
[SRDescriptionAttribute("DescriptionAttributeTopImageHueColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color TopImageHueColor { get; public set; }
    [CategoryAttribute("Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_AntiAliasing")]
[DefaultValueAttribute("Microsoft.Reporting.Gauge.WebForms.AntiAliasing", "All")]
public AntiAliasing AntiAliasing { get; public set; }
    [CategoryAttribute("Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_TextAntiAliasingQuality")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TextAntiAliasingQuality TextAntiAliasingQuality { get; public set; }
    [CategoryAttribute("Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_RightToLeft")]
[DefaultValueAttribute]
public RightToLeft RightToLeft { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public GaugeSerializer Serializer { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public CallbackManager CallbackManager { get; }
    [CategoryAttribute("Data")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_RealTimeDataInterval")]
[DefaultValueAttribute("1")]
public float RealTimeDataInterval { get; public set; }
    [CategoryAttribute("ViewState")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_ViewStateContent")]
public SerializationContent ViewStateContent { get; public set; }
    [CategoryAttribute("Image")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_ImageType")]
public ImageType ImageType { get; public set; }
    [CategoryAttribute("Image")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_Compression")]
public int Compression { get; public set; }
    [CategoryAttribute("Image")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_ImageUrl")]
[DefaultValueAttribute("TempFiles/GaugePic_#SEQ(300,3)")]
public string ImageUrl { get; public set; }
    [CategoryAttribute("Image")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_RenderType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public RenderType RenderType { get; public set; }
    [CategoryAttribute("Image")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_TransparentColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color TransparentColor { get; public set; }
    [CategoryAttribute("Smart Client")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_RenderAsControl")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AutoBool RenderAsControl { get; public set; }
    [CategoryAttribute("Smart Client")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_WinControlUrl")]
public string WinControlUrl { get; public set; }
    [CategoryAttribute("Smart Client")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_LoadingDataText")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Loading...")]
public string LoadingDataText { get; public set; }
    [CategoryAttribute("Smart Client")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_LoadingDataImage")]
[DefaultValueAttribute("")]
public string LoadingDataImage { get; public set; }
    [CategoryAttribute("Smart Client")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_LoadingDataImage")]
[DefaultValueAttribute("")]
public string LoadingControlImage { get; public set; }
    [CategoryAttribute("Image")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_TagAttributes")]
[DefaultValueAttribute("")]
public string TagAttributes { get; public set; }
    [CategoryAttribute("Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_SelectionMarkerColor")]
[DefaultValueAttribute("System.Drawing.Color", "LightBlue")]
public Color SelectionMarkerColor { get; public set; }
    [CategoryAttribute("Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_SelectionBorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color SelectionBorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_BorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_BorderStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_BorderWidth")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "White")]
public Color BackColor { get; public set; }
    [CategoryAttribute("Image")]
[DefaultValueAttribute("320")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_Width")]
public int Width { get; public set; }
    [CategoryAttribute("Image")]
[DefaultValueAttribute("240")]
[SRDescriptionAttribute("DescriptionAttributeGaugeContainer_Height")]
public int Height { get; public set; }
    [CategoryAttribute("Image")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    internal ISelectable SelectedDesignTimeElement { get; internal set; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Provides a tooltip to be displayed on the rendered image.")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool EnableTheming { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string SkinID { get; public set; }
    private static GaugeContainer();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public InputValueCollection get_Values();
    public CircularGaugeCollection get_CircularGauges();
    public LinearGaugeCollection get_LinearGauges();
    public NumericIndicatorCollection get_NumericIndicators();
    public StateIndicatorCollection get_StateIndicators();
    public GaugeImageCollection get_Images();
    public GaugeLabelCollection get_Labels();
    public NamedImageCollection get_NamedImages();
    public MapAreaCollection get_MapAreas();
    public string get_LicenseData();
    public void set_LicenseData(string value);
    public void set_MultiValueSeparator(string value);
    public string get_MultiValueSeparator();
    public float get_ImageResolution();
    public void set_ImageResolution(float value);
    public double get_RefreshRate();
    public void set_RefreshRate(double value);
    public bool get_MapEnabled();
    public void set_MapEnabled(bool value);
    public bool get_AutoLayout();
    public void set_AutoLayout(bool value);
    public float get_ShadowIntensity();
    public void set_ShadowIntensity(float value);
    public BackFrame get_BackFrame();
    public void set_BackFrame(BackFrame value);
    public string get_TopImage();
    public void set_TopImage(string value);
    public Color get_TopImageTransColor();
    public void set_TopImageTransColor(Color value);
    public Color get_TopImageHueColor();
    public void set_TopImageHueColor(Color value);
    public AntiAliasing get_AntiAliasing();
    public void set_AntiAliasing(AntiAliasing value);
    public TextAntiAliasingQuality get_TextAntiAliasingQuality();
    public void set_TextAntiAliasingQuality(TextAntiAliasingQuality value);
    public RightToLeft get_RightToLeft();
    public void set_RightToLeft(RightToLeft value);
    public GaugeSerializer get_Serializer();
    public CallbackManager get_CallbackManager();
    public float get_RealTimeDataInterval();
    public void set_RealTimeDataInterval(float value);
    public SerializationContent get_ViewStateContent();
    public void set_ViewStateContent(SerializationContent value);
    public ImageType get_ImageType();
    public void set_ImageType(ImageType value);
    public int get_Compression();
    public void set_Compression(int value);
    public string get_ImageUrl();
    public void set_ImageUrl(string value);
    public RenderType get_RenderType();
    public void set_RenderType(RenderType value);
    public Color get_TransparentColor();
    public void set_TransparentColor(Color value);
    public AutoBool get_RenderAsControl();
    public void set_RenderAsControl(AutoBool value);
    public string get_WinControlUrl();
    public void set_WinControlUrl(string value);
    public string get_LoadingDataText();
    public void set_LoadingDataText(string value);
    public string get_LoadingDataImage();
    public void set_LoadingDataImage(string value);
    public string get_LoadingControlImage();
    public void set_LoadingControlImage(string value);
    public string get_TagAttributes();
    public void set_TagAttributes(string value);
    public Color get_SelectionMarkerColor();
    public void set_SelectionMarkerColor(Color value);
    public Color get_SelectionBorderColor();
    public void set_SelectionBorderColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public GaugeDashStyle get_BorderStyle();
    public void set_BorderStyle(GaugeDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    private void SaveAsImage(string fileName, GaugeImageFormat format);
    private void SaveAsImage(string fileName, GaugeImageFormat format, int compression);
    internal void SaveAsImage(Stream stream, GaugeImageFormat format);
    private void SaveAsImage(Stream stream, GaugeImageFormat format, int compression);
    public void SaveAsImage(Stream stream);
    private void SaveAsImage(string fileName);
    private void PrintPaint(Graphics graphics, Rectangle position);
    public RectangleF GetAbsoluteRectangle(NamedElement element, RectangleF relativeRect);
    public RectangleF GetRelativeRectangle(NamedElement element, RectangleF absoluteRect);
    public PointF GetAbsolutePoint(NamedElement element, PointF relativePoint);
    public PointF GetRelativePoint(NamedElement element, PointF absolutePoint);
    public SizeF GetAbsoluteSize(NamedElement element, SizeF relativeSize);
    public SizeF GetRelativeSize(NamedElement element, SizeF absoluteSize);
    public NamedElement[] GetSelectedElements();
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    internal ISelectable get_SelectedDesignTimeElement();
    internal void set_SelectedDesignTimeElement(ISelectable value);
    private string GetImageRefreshScript(string gaugeContainerID, float refreshInterval);
    private string GetFlashRefreshScript(string gaugeContainerID, float refreshInterval, bool isIE);
    internal void SaveFiles(string fullImagePath);
    private string ObfuscateJavaScript(string text);
    internal void Invalidate();
    internal void Refresh();
    private void CheckImageUrlSeqFormat(string imageUrl);
    internal bool IsDesignMode();
    public void SaveXml(string fileName);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    [CompilerGeneratedAttribute]
public void add_PrePaint(GaugePaintEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PrePaint(GaugePaintEventHandler value);
    [CompilerGeneratedAttribute]
public void add_PostPaint(GaugePaintEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PostPaint(GaugePaintEventHandler value);
    internal void OnPrePaint(object sender, GaugePaintEventArgs e);
    internal void OnPostPaint(object sender, GaugePaintEventArgs e);
    public void RaisePostBackEvent(string eventArgument);
    [CompilerGeneratedAttribute]
public void add_RealTimeData(RealTimeDataEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RealTimeData(RealTimeDataEventHandler value);
    internal void OnRealTimeData(object sender, RealTimeDataEventArgs e);
    [CompilerGeneratedAttribute]
public void add_Callback(CallbackEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Callback(CallbackEventHandler value);
    internal void OnCallback(object sender, CallbackEventArgs e);
    internal void OnValueChanged(object sender, ValueChangedEventArgs e);
    internal void OnPlaybackStateChanged(object sender, PlaybackStateChangedEventArgs e);
    internal void OnValueLimitOverflow(object sender, ValueChangedEventArgs e);
    internal void OnValueRateOfChangeExceed(object sender, ValueChangedEventArgs e);
    internal void OnValueRangeEnter(object sender, ValueRangeEventArgs e);
    internal void OnValueRangeLeave(object sender, ValueRangeEventArgs e);
    internal void OnValueRangeTimeOut(object sender, ValueRangeEventArgs e);
    internal void OnValueScaleEnter(object sender, ValueRangeEventArgs e);
    internal void OnValueScaleLeave(object sender, ValueRangeEventArgs e);
    internal void OnPointerPositionChange(object sender, PointerPositionChangeEventArgs e);
    public bool get_EnableTheming();
    public void set_EnableTheming(bool value);
    public string get_SkinID();
    public void set_SkinID(string value);
}
internal class Microsoft.Reporting.Gauge.WebForms.GaugeCore : NamedElement {
    private InputValueCollection inputValues;
    private CircularGaugeCollection circularGauges;
    private LinearGaugeCollection linearGauges;
    private NumericIndicatorCollection numericIndicators;
    private StateIndicatorCollection stateIndicators;
    private GaugeImageCollection images;
    private GaugeLabelCollection labels;
    private NamedImageCollection namedImages;
    internal bool silentPaint;
    internal RenderContent renderContent;
    internal string loadedBuildNumber;
    internal bool hasTransparentBackground;
    private MapAreaCollection mapAreas;
    private IRenderable[] renderableElements;
    private BufferBitmap bmpGauge;
    private BufferBitmap bmpFaces;
    private ImageLoader imageLoader;
    internal bool dirtyFlag;
    internal bool disableInvalidate;
    internal bool layoutFlag;
    internal bool isInitializing;
    internal bool refreshPending;
    internal bool boundToDataSource;
    private bool isPrinting;
    private Size printSize;
    internal ServiceContainer serviceContainer;
    private NamedCollection[] elementCollections;
    private TraceManager traceManager;
    public string licenseData;
    private string valueExpression;
    private string toolTip;
    private string multiValueSeparator;
    private float imageResolution;
    private GaugeThemes gaugeTheme;
    private bool autoLayout;
    private double refreshRate;
    private BackFrame frame;
    private string topImage;
    private Color topImageTransColor;
    private Color topImageHueColor;
    private AntiAliasing antiAliasing;
    private TextAntiAliasingQuality textAntiAliasingQuality;
    private float shadowIntensity;
    private RightToLeft rightToLeft;
    private Color selectionMarkerColor;
    private Color selectionBorderColor;
    private Color borderColor;
    private GaugeDashStyle borderStyle;
    private int borderWidth;
    private float realTimeDataInterval;
    private ImageType imageType;
    private int compression;
    private string gaugeImageUrl;
    private bool mapEnabled;
    private RenderType renderType;
    private Color transparentColor;
    private SerializationContent viewStateContent;
    private AutoBool renderAsControl;
    private string winControlUrl;
    private string loadingDataText;
    private string loadingDataImage;
    private string loadingControlImage;
    private string tagAttributes;
    private object dataSource;
    private GaugeSerializer serializer;
    private CallbackManager callbackManager;
    private GaugeContainer parent;
    private HotRegionList hotRegionList;
    private bool serializing;
    private ISelectable selectedDesignTimeElement;
    private bool savingToMetafile;
    public InputValueCollection Values { get; }
    public NamedImageCollection NamedImages { get; }
    public CircularGaugeCollection CircularGauges { get; }
    public LinearGaugeCollection LinearGauges { get; }
    public NumericIndicatorCollection NumericIndicators { get; }
    public StateIndicatorCollection StateIndicators { get; }
    public GaugeImageCollection Images { get; }
    public GaugeLabelCollection Labels { get; }
    public MapAreaCollection MapAreas { get; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string ValueExpression { get; public set; }
    [DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [DefaultValueAttribute("\#\")]
[SRCategoryAttribute("CategoryGaugeContainer")]
[SRDescriptionAttribute("DescriptionAttributeMultiValueSeparator")]
public string MultiValueSeparator { get; public set; }
    [DefaultValueAttribute("96")]
[SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeImageResolution")]
public float ImageResolution { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeThemes GaugeTheme { get; public set; }
    [DefaultValueAttribute("True")]
public bool AutoLayout { get; public set; }
    [DefaultValueAttribute("30")]
public double RefreshRate { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public BackFrame BackFrame { get; public set; }
    [DefaultValueAttribute("")]
public string TopImage { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
public Color TopImageTransColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
public Color TopImageHueColor { get; public set; }
    [DefaultValueAttribute("Microsoft.Reporting.Gauge.WebForms.AntiAliasing", "All")]
public AntiAliasing AntiAliasing { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TextAntiAliasingQuality TextAntiAliasingQuality { get; public set; }
    [DefaultValueAttribute("25")]
public float ShadowIntensity { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "White")]
public Color BackColor { get; public set; }
    [DefaultValueAttribute]
public RightToLeft RightToLeft { get; public set; }
    [SerializationVisibilityAttribute("0")]
public int Width { get; public set; }
    [SerializationVisibilityAttribute("0")]
public int Height { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    [SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeGaugeCore_BuildNumber")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("")]
public string BuildNumber { get; public set; }
    [SerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeGaugeCore_ControlType")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("")]
public string ControlType { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "LightBlue")]
public Color SelectionMarkerColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color SelectionBorderColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color BorderColor { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeDashStyle BorderStyle { get; public set; }
    [DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [DefaultValueAttribute("1")]
public float RealTimeDataInterval { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ImageType ImageType { get; public set; }
    [DefaultValueAttribute("0")]
public int Compression { get; public set; }
    [DefaultValueAttribute("TempFiles/GaugePic_#SEQ(300,3)")]
public string ImageUrl { get; public set; }
    [DefaultValueAttribute("True")]
public bool MapEnabled { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public RenderType RenderType { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
public Color TransparentColor { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SerializationContent ViewStateContent { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AutoBool RenderAsControl { get; public set; }
    [DefaultValueAttribute("")]
public string WinControlUrl { get; public set; }
    [DefaultValueAttribute("Loading...")]
public string LoadingDataText { get; public set; }
    [DefaultValueAttribute("")]
public string LoadingDataImage { get; public set; }
    [DefaultValueAttribute("")]
public string LoadingControlImage { get; public set; }
    [DefaultValueAttribute("")]
public string TagAttributes { get; public set; }
    internal object DataSource { get; internal set; }
    [SerializationVisibilityAttribute("0")]
internal GaugeSerializer Serializer { get; }
    [SerializationVisibilityAttribute("0")]
internal CallbackManager CallbackManager { get; }
    internal GaugeContainer GaugeContainer { get; }
    internal HotRegionList HotRegionList { get; }
    internal bool Serializing { get; internal set; }
    internal ISelectable SelectedDesignTimeElement { get; internal set; }
    internal bool SavingToMetafile { get; internal set; }
    internal bool InvokeRequired { get; }
    internal GaugeCore(GaugeContainer parent);
    public InputValueCollection get_Values();
    public NamedImageCollection get_NamedImages();
    public CircularGaugeCollection get_CircularGauges();
    public LinearGaugeCollection get_LinearGauges();
    public NumericIndicatorCollection get_NumericIndicators();
    public StateIndicatorCollection get_StateIndicators();
    public GaugeImageCollection get_Images();
    public GaugeLabelCollection get_Labels();
    public MapAreaCollection get_MapAreas();
    public string get_ValueExpression();
    public void set_ValueExpression(string value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public void set_MultiValueSeparator(string value);
    public string get_MultiValueSeparator();
    public void set_ImageResolution(float value);
    public float get_ImageResolution();
    public GaugeThemes get_GaugeTheme();
    public void set_GaugeTheme(GaugeThemes value);
    public bool get_AutoLayout();
    public void set_AutoLayout(bool value);
    public double get_RefreshRate();
    public void set_RefreshRate(double value);
    public BackFrame get_BackFrame();
    public void set_BackFrame(BackFrame value);
    public string get_TopImage();
    public void set_TopImage(string value);
    public Color get_TopImageTransColor();
    public void set_TopImageTransColor(Color value);
    public Color get_TopImageHueColor();
    public void set_TopImageHueColor(Color value);
    public AntiAliasing get_AntiAliasing();
    public void set_AntiAliasing(AntiAliasing value);
    public TextAntiAliasingQuality get_TextAntiAliasingQuality();
    public void set_TextAntiAliasingQuality(TextAntiAliasingQuality value);
    public float get_ShadowIntensity();
    public void set_ShadowIntensity(float value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public RightToLeft get_RightToLeft();
    public void set_RightToLeft(RightToLeft value);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public string get_BuildNumber();
    public void set_BuildNumber(string value);
    public string get_ControlType();
    public void set_ControlType(string value);
    public Color get_SelectionMarkerColor();
    public void set_SelectionMarkerColor(Color value);
    public Color get_SelectionBorderColor();
    public void set_SelectionBorderColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public GaugeDashStyle get_BorderStyle();
    public void set_BorderStyle(GaugeDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public float get_RealTimeDataInterval();
    public void set_RealTimeDataInterval(float value);
    public ImageType get_ImageType();
    public void set_ImageType(ImageType value);
    public int get_Compression();
    public void set_Compression(int value);
    public string get_ImageUrl();
    public void set_ImageUrl(string value);
    public bool get_MapEnabled();
    public void set_MapEnabled(bool value);
    public RenderType get_RenderType();
    public void set_RenderType(RenderType value);
    public Color get_TransparentColor();
    public void set_TransparentColor(Color value);
    public SerializationContent get_ViewStateContent();
    public void set_ViewStateContent(SerializationContent value);
    public AutoBool get_RenderAsControl();
    public void set_RenderAsControl(AutoBool value);
    public string get_WinControlUrl();
    public void set_WinControlUrl(string value);
    public string get_LoadingDataText();
    public void set_LoadingDataText(string value);
    public string get_LoadingDataImage();
    public void set_LoadingDataImage(string value);
    public string get_LoadingControlImage();
    public void set_LoadingControlImage(string value);
    public string get_TagAttributes();
    public void set_TagAttributes(string value);
    internal object get_DataSource();
    internal void set_DataSource(object value);
    internal GaugeSerializer get_Serializer();
    internal CallbackManager get_CallbackManager();
    internal GaugeContainer get_GaugeContainer();
    internal HotRegionList get_HotRegionList();
    internal bool get_Serializing();
    internal void set_Serializing(bool value);
    internal ISelectable get_SelectedDesignTimeElement();
    internal void set_SelectedDesignTimeElement(ISelectable value);
    internal bool get_SavingToMetafile();
    internal void set_SavingToMetafile(bool value);
    internal void DoAutoLayout();
    private bool ShouldStackHorizontally(LinearGauge[] linearGauges, RectangleF availableRect);
    private float GetHorizontalStackAspectRatio(LinearGauge[] horizontalGauges, float pixelWidth, float pixelHeight);
    private float GetVerticalStackAspectRatio(LinearGauge[] verticalGauges, float pixelWidth, float pixelHeight);
    private void SplitAutoLayoutGauges(LinearGauge[] autoLayoutGauges, float pixelWidth, float pixelHeight, LinearGauge[]& horizontalGauges, LinearGauge[]& verticalGauges);
    private float GetPreferredAspectRatio(GaugeBase gauge, float pixelWidth, float pixelHeight);
    internal CircularGauge[] GetCircularAutoLayoutGauges();
    internal LinearGauge[] GetLinearAutoLayoutGauges();
    internal StateIndicator[] GetAutoLayoutStateIndicators();
    private void LayoutSingleLine(GaugeBase[] gauges, RectangleF rect, bool stackHorizontally);
    private void CompensateForShadowAndBorder(GaugeBase gauge);
    private void LayoutMatrix(GaugeBase[] gauges, RectangleF rect, bool stackHorizontally, int lineCount);
    private void LayoutSingleLine(StateIndicator[] indicators, RectangleF rect, bool stackHorizontally);
    internal int GetWidth();
    internal int GetHeight();
    internal void ResetAutoValues();
    internal virtual void Invalidate();
    internal void OnFontChanged();
    private void refreshTimer_Elapsed(object source, ElapsedEventArgs e);
    internal virtual void Refresh();
    internal NamedCollection[] GetRenderCollections();
    internal virtual void BeginInit();
    internal virtual void EndInit();
    internal bool get_InvokeRequired();
    internal virtual void ReconnectData(bool exact);
    internal virtual void Notify(MessageType msg, NamedElement element, object param);
    private BufferBitmap InitBitmap(BufferBitmap bmp, float dpiX, float dpiY);
    internal BufferBitmap InitBitmap(BufferBitmap bmp, Size size, float dpiX, float dpiY);
    private SmoothingMode GetSmootingMode();
    private TextRenderingHint GetTextRenderingHint();
    public GaugeGraphics GetGraphics(RenderingType renderingType, Graphics g, Stream outputStream);
    internal IRenderable[] GetGraphElements();
    private void RenderWaterMark(GaugeGraphics g);
    internal void RenderOneDynamicElement(GaugeGraphics g, IRenderable element, bool renderChildrenFirst);
    internal void RenderElements(GaugeGraphics g, IRenderable parentElement, bool renderStaticElements);
    internal void RenderSelection(GaugeGraphics g);
    internal NamedElement[] GetSelectedElements();
    internal void RenderTopImage(GaugeGraphics g);
    internal void RenderStaticElements(GaugeGraphics g);
    private void RenderBorder(GaugeGraphics g);
    internal void RenderStaticElementsBufered(GaugeGraphics g);
    internal void RenderDynamicElements(GaugeGraphics g);
    internal void Paint(Graphics gdiGraph, RenderingType renderingType, Stream stream, bool buffered);
    internal void PrintPaint(Graphics g, Rectangle position);
    internal void Paint(Graphics g);
    internal void SaveTo(Stream stream, GaugeImageFormat imageFormat, int compression, float dpiX, float dpiY);
    internal void SaveTo(Stream stream, GaugeImageFormat imageFormat, float dpiX, float dpiY);
    internal void SaveTo(string fileName, GaugeImageFormat imageFormat, float dpiX, float dpiY);
    internal void SaveTo(string fileName, GaugeImageFormat imageFormat, int compression, float dpiX, float dpiY);
    private static ImageCodecInfo GetEncoderInfo(string mimeType);
    public void SaveIntoMetafile(Stream imageStream);
    private Region GetClipRegion();
    internal bool IsDesignMode();
    internal void DrawException(Graphics graphics, Exception e);
    internal HitTestResult[] HitTest(int x, int y, Type[] objectTypes, bool returnMultipleElements);
    internal HotRegion GetHotRegion(NamedElement element);
    internal void PopulateImageMaps();
    internal void WriteMapTag(TextWriter output, string mapName);
    internal void PerformDataBinding(IEnumerable data);
    internal void AutoDataBind(bool forceBinding);
    internal static bool IsValidDataSource(object dataSource);
    internal string ResolveAllKeywords(string original, NamedElement element);
    internal string ResolveKeyword(string original, string keyword, double val);
    internal void TraceWrite(string category, string message);
    internal object GetService(Type serviceType);
    protected virtual void OnDispose();
    internal static bool CheckLicense();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.ISelectable.DrawSelection(GaugeGraphics g, bool designTimeSelection);
}
internal enum Microsoft.Reporting.Gauge.WebForms.GaugeCursor : Enum {
    public int value__;
    public static GaugeCursor AppStarting;
    public static GaugeCursor Arrow;
    public static GaugeCursor Cross;
    public static GaugeCursor Default;
    public static GaugeCursor Hand;
    public static GaugeCursor Help;
    public static GaugeCursor HSplit;
    public static GaugeCursor IBeam;
    public static GaugeCursor No;
    public static GaugeCursor NoMove2D;
    public static GaugeCursor NoMoveHorizontal;
    public static GaugeCursor NoMoveVertical;
    public static GaugeCursor PanEast;
    public static GaugeCursor PanNE;
    public static GaugeCursor PanNorth;
    public static GaugeCursor PanNW;
    public static GaugeCursor PanSE;
    public static GaugeCursor PanSouth;
    public static GaugeCursor PanSW;
    public static GaugeCursor PanWest;
    public static GaugeCursor SizeAll;
    public static GaugeCursor SizeNESW;
    public static GaugeCursor SizeNS;
    public static GaugeCursor SizeNWSE;
    public static GaugeCursor SizeWE;
    public static GaugeCursor UpArrow;
    public static GaugeCursor VSplit;
    public static GaugeCursor WaitCursor;
}
internal enum Microsoft.Reporting.Gauge.WebForms.GaugeDashStyle : Enum {
    public int value__;
    public static GaugeDashStyle NotSet;
    public static GaugeDashStyle Dash;
    public static GaugeDashStyle DashDot;
    public static GaugeDashStyle DashDotDot;
    public static GaugeDashStyle Dot;
    public static GaugeDashStyle Solid;
}
[DesignerCategoryAttribute("code")]
[DebuggerStepThroughAttribute]
[ToolboxItemAttribute("False")]
internal class Microsoft.Reporting.Gauge.WebForms.GaugeData : DataSet {
    private ValuesDataTable tableValues;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public ValuesDataTable Values { get; }
    private GaugeData(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public ValuesDataTable get_Values();
    public virtual DataSet Clone();
    protected virtual bool ShouldSerializeTables();
    protected virtual bool ShouldSerializeRelations();
    protected virtual void ReadXmlSerializable(XmlReader reader);
    protected virtual XmlSchema GetSchemaSerializable();
    internal void InitVars();
    private void InitClass();
    private bool ShouldSerializeValues();
    private void SchemaChanged(object sender, CollectionChangeEventArgs e);
}
internal class Microsoft.Reporting.Gauge.WebForms.GaugeDuration : object {
    private DurationType durationType;
    private double count;
    private TimeSpan timeSpan;
    private bool ivalidated;
    public double Count { get; public set; }
    internal DurationType DurationType { get; internal set; }
    internal bool IsTimeBased { get; }
    internal bool IsCountBased { get; }
    internal bool IsInfinity { get; }
    internal bool IsEmpty { get; }
    internal GaugeDuration(double count, DurationType durationType);
    public double get_Count();
    public void set_Count(double value);
    internal DurationType get_DurationType();
    internal void set_DurationType(DurationType value);
    internal bool get_IsTimeBased();
    internal bool get_IsCountBased();
    internal bool get_IsInfinity();
    internal bool get_IsEmpty();
    internal static PeriodType MapToPeriodType(DurationType type);
    internal TimeSpan ToTimeSpan();
    internal void Extend(GaugeDuration extend, DateTime topDate, DateTime btmDate);
    public sealed virtual object Clone();
}
internal class Microsoft.Reporting.Gauge.WebForms.GaugeGraphics : RenderingEngine {
    internal CommonElements common;
    private Pen pen;
    private SolidBrush solidBrush;
    private float width;
    private float height;
    internal bool softShadows;
    private AntiAliasing antiAliasing;
    internal bool IsMetafile;
    internal PointF InitialOffset;
    private Stack graphicStates;
    public Graphics Graphics { get; public set; }
    internal AntiAliasing AntiAliasing { get; internal set; }
    internal GaugeGraphics(CommonElements common);
    internal static Brush GetHatchBrush(GaugeHatchStyle hatchStyle, Color backColor, Color foreColor);
    internal Brush GetTextureBrush(string name, Color backImageTranspColor, GaugeImageWrapMode mode);
    internal Brush GetShadowBrush();
    internal Color GetShadowColor();
    internal Brush GetGradientBrush(RectangleF rectangle, Color firstColor, Color secondColor, GradientType type);
    internal Brush GetPieGradientBrush(RectangleF rectangle, Color firstColor, Color secondColor);
    internal DashStyle GetPenStyle(GaugeDashStyle style);
    internal Brush GetMarkerBrush(GraphicsPath path, MarkerStyle markerStyle, PointF pointOrigin, float angle, Color fillColor, GradientType fillGradientType, Color fillGradientEndColor, GaugeHatchStyle fillHatchStyle);
    internal GraphicsPath CreateMarker(PointF point, float markerWidth, float markerHeight, MarkerStyle markerStyle);
    internal PointF[] CreateStarPolygon(RectangleF rectReal, int numberOfCorners);
    internal void DrawPathShadowAbs(GraphicsPath path, Color shadowColor, float shadowWidth);
    internal void DrawPathAbs(GraphicsPath path, Color backColor, GaugeHatchStyle backHatchStyle, string backImage, GaugeImageWrapMode backImageMode, Color backImageTranspColor, GaugeImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor, Color borderColor, int borderWidth, GaugeDashStyle borderStyle, PenAlignment penAlignment);
    internal Brush CreateBrush(RectangleF rect, Color backColor, GaugeHatchStyle backHatchStyle, string backImage, GaugeImageWrapMode backImageMode, Color backImageTranspColor, GaugeImageAlign backImageAlign, GradientType backGradientType, Color backGradientEndColor);
    public PointF PixelsToPercents(PointF pointInPixels);
    public PointF PercentsToPixels(PointF pointInPercents);
    public SizeF PixelsToPercents(SizeF sizeInPixels);
    public SizeF PercentsToPixels(SizeF sizeInPercents);
    internal float GetRelativeX(float absoluteX);
    internal float GetRelativeY(float absoluteY);
    internal float GetRelativeWidth(float absoluteWidth);
    internal float GetRelativeHeight(float absoluteHeight);
    internal float GetAbsoluteX(float relativeX);
    internal float GetAbsoluteY(float relativeY);
    internal float GetAbsoluteWidth(float relativeWidth);
    internal float GetAbsoluteHeight(float relativeHeight);
    public RectangleF GetRelativeRectangle(RectangleF absolute);
    public PointF GetRelativePoint(PointF absolute);
    public SizeF GetRelativeSize(SizeF size);
    internal float GetAbsoluteDimension(float relative);
    internal float GetRelativeDimension(float absolute);
    public PointF GetAbsolutePoint(PointF relative);
    public RectangleF GetAbsoluteRectangle(RectangleF relative);
    public SizeF GetAbsoluteSize(SizeF relative);
    internal GraphicsPath CreateRoundedRectPath(RectangleF rect, Single[] cornerRadius);
    internal Brush GetCircularRangeBrush(RectangleF rect, float startAngle, float sweepAngle, Color backColor, GaugeHatchStyle backHatchStyle, string backImage, GaugeImageWrapMode backImageMode, Color backImageTranspColor, GaugeImageAlign backImageAlign, RangeGradientType backGradientType, Color backGradientEndColor);
    internal GraphicsPath GetCircularRangePath(RectangleF rect, float startAngle, float sweepAngle, float startRadius, float endRadius, Placement placement);
    internal Color[] GetSurroundColors(Color startColor, Color endColor, int colorCount);
    internal GraphicsPath GetLinearRangePath(float startPosition, float endPosition, float startWidth, float endWidth, float scalePosition, GaugeOrientation orientation, float distanceFromScale, Placement placement, float scaleBarWidth);
    internal Brush GetLinearRangeBrush(RectangleF absRect, Color backColor, GaugeHatchStyle backHatchStyle, RangeGradientType backGradientType, Color backGradientEndColor, GaugeOrientation orientation, bool reversedScale, double startValue, double endValue);
    internal GraphicsPath GetThermometerPath(float startPosition, float endPosition, float barWidth, float scalePosition, GaugeOrientation orientation, float distanceFromScale, Placement placement, bool reversedScale, float scaleBarWidth, float bulbOffset, float bulbSize, ThermometerStyle thermometerStyle);
    internal void GetCircularEdgeReflection(RectangleF bounds, float angle, int alpha, PointF pointOrigin, GraphicsPath& pathResult, Brush& brushResult);
    internal void SetPictureSize(float width, float height);
    internal void CreateDrawRegion(RectangleF rect);
    internal void RestoreDrawRegion();
    public virtual void Close();
    public Graphics get_Graphics();
    public void set_Graphics(Graphics value);
    internal AntiAliasing get_AntiAliasing();
    internal void set_AntiAliasing(AntiAliasing value);
    internal Pen GetSelectionPen(bool designTimeSelection, Color borderColor);
    internal Brush GetDesignTimeSelectionFillBrush();
    internal Pen GetDesignTimeSelectionBorderPen();
    internal void DrawSelection(RectangleF rect, bool designTimeSelection, Color borderColor, Color markerColor);
    internal void DrawSelection(RectangleF rect, float inflateBy, bool designTimeSelection, Color borderColor, Color markerColor);
    internal void DrawRadialSelection(GaugeGraphics g, GraphicsPath selectionPath, PointF[] markerPositions, bool designTimeSelection, Color borderColor, Color markerColor);
}
internal class Microsoft.Reporting.Gauge.WebForms.GaugeGraphState : object {
    internal GraphicsState state;
    internal float width;
    internal float height;
    internal GaugeGraphState(GraphicsState state, float width, float height);
}
internal enum Microsoft.Reporting.Gauge.WebForms.GaugeHatchStyle : Enum {
    public int value__;
    public static GaugeHatchStyle None;
    public static GaugeHatchStyle BackwardDiagonal;
    public static GaugeHatchStyle Cross;
    public static GaugeHatchStyle DarkDownwardDiagonal;
    public static GaugeHatchStyle DarkHorizontal;
    public static GaugeHatchStyle DarkUpwardDiagonal;
    public static GaugeHatchStyle DarkVertical;
    public static GaugeHatchStyle DashedDownwardDiagonal;
    public static GaugeHatchStyle DashedHorizontal;
    public static GaugeHatchStyle DashedUpwardDiagonal;
    public static GaugeHatchStyle DashedVertical;
    public static GaugeHatchStyle DiagonalBrick;
    public static GaugeHatchStyle DiagonalCross;
    public static GaugeHatchStyle Divot;
    public static GaugeHatchStyle DottedDiamond;
    public static GaugeHatchStyle DottedGrid;
    public static GaugeHatchStyle ForwardDiagonal;
    public static GaugeHatchStyle Horizontal;
    public static GaugeHatchStyle HorizontalBrick;
    public static GaugeHatchStyle LargeCheckerBoard;
    public static GaugeHatchStyle LargeConfetti;
    public static GaugeHatchStyle LargeGrid;
    public static GaugeHatchStyle LightDownwardDiagonal;
    public static GaugeHatchStyle LightHorizontal;
    public static GaugeHatchStyle LightUpwardDiagonal;
    public static GaugeHatchStyle LightVertical;
    public static GaugeHatchStyle NarrowHorizontal;
    public static GaugeHatchStyle NarrowVertical;
    public static GaugeHatchStyle OutlinedDiamond;
    public static GaugeHatchStyle Percent05;
    public static GaugeHatchStyle Percent10;
    public static GaugeHatchStyle Percent20;
    public static GaugeHatchStyle Percent25;
    public static GaugeHatchStyle Percent30;
    public static GaugeHatchStyle Percent40;
    public static GaugeHatchStyle Percent50;
    public static GaugeHatchStyle Percent60;
    public static GaugeHatchStyle Percent70;
    public static GaugeHatchStyle Percent75;
    public static GaugeHatchStyle Percent80;
    public static GaugeHatchStyle Percent90;
    public static GaugeHatchStyle Plaid;
    public static GaugeHatchStyle Shingle;
    public static GaugeHatchStyle SmallCheckerBoard;
    public static GaugeHatchStyle SmallConfetti;
    public static GaugeHatchStyle SmallGrid;
    public static GaugeHatchStyle SolidDiamond;
    public static GaugeHatchStyle Sphere;
    public static GaugeHatchStyle Trellis;
    public static GaugeHatchStyle Vertical;
    public static GaugeHatchStyle Wave;
    public static GaugeHatchStyle Weave;
    public static GaugeHatchStyle WideDownwardDiagonal;
    public static GaugeHatchStyle WideUpwardDiagonal;
    public static GaugeHatchStyle ZigZag;
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.GaugeImageConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.GaugeImage : NamedElement {
    private string parent;
    private int zOrder;
    private string toolTip;
    private string href;
    private string mapAreaAttributes;
    private GaugeLocation location;
    private GaugeSize size;
    private bool visible;
    private ResizeMode resizeMode;
    private string image;
    private Color imageTransColor;
    private float shadowOffset;
    private float angle;
    private float transparency;
    private bool selected;
    private NamedElement parentSystem;
    private bool defaultParent;
    private object imageMapProviderTag;
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeGaugeImage_Parent")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.ParentSourceConverter")]
[NotifyParentPropertyAttribute("True")]
public string Parent { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeGaugeImage_ZOrder")]
[DefaultValueAttribute("0")]
public int ZOrder { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeGaugeImage_ToolTip")]
[LocalizableAttribute("True")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeGaugeImage_Href")]
[LocalizableAttribute("True")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeGaugeImage_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryMisc")]
[SRDescriptionAttribute("DescriptionAttributeGaugeImage_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryPosition")]
[SRDescriptionAttribute("DescriptionAttributeGaugeImage_Location")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.LocationConverter")]
[DesignerSerializationVisibilityAttribute("2")]
[ValidateBound("100", "100")]
public GaugeLocation Location { get; public set; }
    [SRCategoryAttribute("CategoryPosition")]
[SRDescriptionAttribute("DescriptionAttributeGaugeImage_Size")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.SizeConverter")]
[DesignerSerializationVisibilityAttribute("2")]
[ValidateBound("100", "100")]
public GaugeSize Size { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeImage_Visible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeGaugeImage_ResizeMode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ResizeMode ResizeMode { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeGaugeImage_Image")]
[DefaultValueAttribute("")]
public string Image { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeImageTransColor6")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageTransColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeShadowOffset4")]
[NotifyParentPropertyAttribute("True")]
[ValidateBound("-5", "5")]
[DefaultValueAttribute("1")]
public float ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryPosition")]
[SRDescriptionAttribute("DescriptionAttributeGaugeImage_Angle")]
[DefaultValueAttribute("0")]
[ValidateBound("0", "360")]
public float Angle { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeGaugeImage_Transparency")]
[DefaultValueAttribute("0")]
[ValidateBound("0", "100")]
public float Transparency { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeImage_Selected")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
public bool Selected { get; public set; }
    internal Position Position { get; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeParentObject3")]
[DesignerSerializationVisibilityAttribute("0")]
public NamedElement ParentObject { get; }
    internal bool DefaultParent { get; internal set; }
    private object Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.Tag { get; private set; }
    public string get_Parent();
    public void set_Parent(string value);
    public int get_ZOrder();
    public void set_ZOrder(int value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public string get_Href();
    public sealed virtual void set_Href(string value);
    public string get_MapAreaAttributes();
    public void set_MapAreaAttributes(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public GaugeLocation get_Location();
    public void set_Location(GaugeLocation value);
    public GaugeSize get_Size();
    public void set_Size(GaugeSize value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public ResizeMode get_ResizeMode();
    public void set_ResizeMode(ResizeMode value);
    public string get_Image();
    public void set_Image(string value);
    public Color get_ImageTransColor();
    public void set_ImageTransColor(Color value);
    public float get_ShadowOffset();
    public void set_ShadowOffset(float value);
    public float get_Angle();
    public void set_Angle(float value);
    public float get_Transparency();
    public void set_Transparency(float value);
    public bool get_Selected();
    public void set_Selected(bool value);
    internal Position get_Position();
    public NamedElement get_ParentObject();
    internal bool get_DefaultParent();
    internal void set_DefaultParent(bool value);
    public virtual string ToString();
    internal void DrawImage(GaugeGraphics g, string imageName, bool drawShadow);
    internal GraphicsPath GetTextPath(GaugeGraphics g);
    internal GraphicsPath GetBackPath(GaugeGraphics g);
    internal virtual void EndInit();
    private void ConnectToParent(bool exact);
    internal virtual void Notify(MessageType msg, NamedElement element, object param);
    internal virtual void OnAdded();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IRenderable.RenderStaticElements(GaugeGraphics g);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IRenderable.RenderDynamicElements(GaugeGraphics g);
    private sealed virtual override int Microsoft.Reporting.Gauge.WebForms.IRenderable.GetZOrder();
    private sealed virtual override RectangleF Microsoft.Reporting.Gauge.WebForms.IRenderable.GetBoundRect(GaugeGraphics g);
    private sealed virtual override object Microsoft.Reporting.Gauge.WebForms.IRenderable.GetParentRenderable();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IRenderable.GetParentRenderableName();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IToolTipProvider.GetToolTip(HitTestResult ht);
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetHref();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetMapAreaAttributes();
    private sealed virtual override object Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.set_Tag(object value);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.ISelectable.DrawSelection(GaugeGraphics g, bool designTimeSelection);
    public virtual object Clone();
}
internal enum Microsoft.Reporting.Gauge.WebForms.GaugeImageAlign : Enum {
    public int value__;
    public static GaugeImageAlign TopLeft;
    public static GaugeImageAlign Top;
    public static GaugeImageAlign TopRight;
    public static GaugeImageAlign Right;
    public static GaugeImageAlign BottomRight;
    public static GaugeImageAlign Bottom;
    public static GaugeImageAlign BottomLeft;
    public static GaugeImageAlign Left;
    public static GaugeImageAlign Center;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.GaugeImageCollection : NamedCollection {
    private GaugeImage Item { get; private set; }
    private GaugeImage Item { get; private set; }
    public GaugeImage Item { get; public set; }
    internal GaugeImageCollection(NamedElement parent, CommonElements common);
    public GaugeImage Add(string name);
    public int Add(GaugeImage value);
    public void Remove(GaugeImage value);
    public bool Contains(GaugeImage value);
    public void Insert(int index, GaugeImage value);
    public int IndexOf(GaugeImage value);
    private GaugeImage get_Item(int index);
    private void set_Item(int index, GaugeImage value);
    private GaugeImage get_Item(string name);
    private void set_Item(string name, GaugeImage value);
    public GaugeImage get_Item(object obj);
    public void set_Item(object obj, GaugeImage value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    protected virtual void OnInsertComplete(int index, object value);
}
internal class Microsoft.Reporting.Gauge.WebForms.GaugeImageConverter : CollectionItemTypeConverter {
}
internal enum Microsoft.Reporting.Gauge.WebForms.GaugeImageFormat : Enum {
    public int value__;
    public static GaugeImageFormat Jpeg;
    public static GaugeImageFormat Png;
    public static GaugeImageFormat Bmp;
    public static GaugeImageFormat Tiff;
    public static GaugeImageFormat Gif;
    public static GaugeImageFormat Emf;
}
internal enum Microsoft.Reporting.Gauge.WebForms.GaugeImageWrapMode : Enum {
    public int value__;
    public static GaugeImageWrapMode Scaled;
    public static GaugeImageWrapMode Tile;
    public static GaugeImageWrapMode TileFlipX;
    public static GaugeImageWrapMode TileFlipXY;
    public static GaugeImageWrapMode TileFlipY;
    public static GaugeImageWrapMode Unscaled;
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.GaugeLabelConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.GaugeLabel : NamedElement {
    private string parent;
    private int zOrder;
    private string toolTip;
    private string href;
    private string mapAreaAttributes;
    private GaugeLocation location;
    private GaugeSize size;
    private ContentAlignment textAlignment;
    private bool visible;
    private Font font;
    private ResizeMode resizeMode;
    private FontUnit fontUnit;
    private Color borderColor;
    private GaugeDashStyle borderStyle;
    private int borderWidth;
    private Color backColor;
    private Color textColor;
    private GradientType backGradientType;
    private Color backGradientEndColor;
    private GaugeHatchStyle backHatchStyle;
    private string text;
    private int backShadowOffset;
    private int textShadowOffset;
    private float angle;
    private bool selected;
    private NamedElement parentSystem;
    private bool defaultParent;
    private object imageMapProviderTag;
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_Parent")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.ParentSourceConverter")]
[NotifyParentPropertyAttribute("True")]
public string Parent { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_ZOrder")]
[DefaultValueAttribute("0")]
public int ZOrder { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_ToolTip")]
[LocalizableAttribute("True")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_Href")]
[LocalizableAttribute("True")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeMapAreaAttributes4")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryMisc")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryPosition")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_Location")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.LocationConverter")]
[DesignerSerializationVisibilityAttribute("2")]
[ValidateBound("100", "100")]
public GaugeLocation Location { get; public set; }
    [SRCategoryAttribute("CategoryPosition")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_Size")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.SizeConverter")]
[DesignerSerializationVisibilityAttribute("2")]
[ValidateBound("100", "100")]
public GaugeSize Size { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_TextAlignment")]
[DefaultValueAttribute]
public ContentAlignment TextAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_Visible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_Font")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8.25pt")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeResizeMode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ResizeMode ResizeMode { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFontUnit3")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FontUnit FontUnit { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_BorderColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_BorderStyle")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_BorderWidth")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_BackColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Empty")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_TextColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_BackGradientType")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_BackGradientEndColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Empty")]
public Color BackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_BackHatchStyle")]
[EditorAttribute("Microsoft.Reporting.Gauge.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_Text")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Text")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_BackShadowOffset")]
[NotifyParentPropertyAttribute("True")]
[ValidateBound("-5", "5")]
[DefaultValueAttribute("0")]
public int BackShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_TextShadowOffset")]
[NotifyParentPropertyAttribute("True")]
[ValidateBound("-5", "5")]
[DefaultValueAttribute("0")]
public int TextShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryPosition")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_Angle")]
[DefaultValueAttribute("0")]
[ValidateBound("0", "360")]
public float Angle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLabel_Selected")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
public bool Selected { get; public set; }
    internal Position Position { get; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeParentObject3")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public NamedElement ParentObject { get; }
    internal bool DefaultParent { get; internal set; }
    private object Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.Tag { get; private set; }
    public string get_Parent();
    public void set_Parent(string value);
    public int get_ZOrder();
    public void set_ZOrder(int value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public string get_Href();
    public sealed virtual void set_Href(string value);
    public string get_MapAreaAttributes();
    public void set_MapAreaAttributes(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public GaugeLocation get_Location();
    public void set_Location(GaugeLocation value);
    public GaugeSize get_Size();
    public void set_Size(GaugeSize value);
    public ContentAlignment get_TextAlignment();
    public void set_TextAlignment(ContentAlignment value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public Font get_Font();
    public void set_Font(Font value);
    public ResizeMode get_ResizeMode();
    public void set_ResizeMode(ResizeMode value);
    public FontUnit get_FontUnit();
    public void set_FontUnit(FontUnit value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public GaugeDashStyle get_BorderStyle();
    public void set_BorderStyle(GaugeDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public GradientType get_BackGradientType();
    public void set_BackGradientType(GradientType value);
    public Color get_BackGradientEndColor();
    public void set_BackGradientEndColor(Color value);
    public GaugeHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(GaugeHatchStyle value);
    public string get_Text();
    public void set_Text(string value);
    public int get_BackShadowOffset();
    public void set_BackShadowOffset(int value);
    public int get_TextShadowOffset();
    public void set_TextShadowOffset(int value);
    public float get_Angle();
    public void set_Angle(float value);
    public bool get_Selected();
    public void set_Selected(bool value);
    internal Position get_Position();
    public NamedElement get_ParentObject();
    internal bool get_DefaultParent();
    internal void set_DefaultParent(bool value);
    public virtual string ToString();
    internal virtual void EndInit();
    private void ConnectToParent(bool exact);
    internal virtual void Notify(MessageType msg, NamedElement element, object param);
    internal virtual void OnAdded();
    internal GraphicsPath GetBackPath(GaugeGraphics g);
    internal GraphicsPath GetTextPath(GaugeGraphics g);
    internal Brush GetBackBrush(GaugeGraphics g);
    internal Pen GetPen(GaugeGraphics g);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IRenderable.RenderStaticElements(GaugeGraphics g);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IRenderable.RenderDynamicElements(GaugeGraphics g);
    private sealed virtual override int Microsoft.Reporting.Gauge.WebForms.IRenderable.GetZOrder();
    private sealed virtual override RectangleF Microsoft.Reporting.Gauge.WebForms.IRenderable.GetBoundRect(GaugeGraphics g);
    private sealed virtual override object Microsoft.Reporting.Gauge.WebForms.IRenderable.GetParentRenderable();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IRenderable.GetParentRenderableName();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IToolTipProvider.GetToolTip(HitTestResult ht);
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetHref();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetMapAreaAttributes();
    private sealed virtual override object Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.set_Tag(object value);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.ISelectable.DrawSelection(GaugeGraphics g, bool designTimeSelection);
    public virtual object Clone();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.GaugeLabelCollection : NamedCollection {
    private GaugeLabel Item { get; private set; }
    private GaugeLabel Item { get; private set; }
    public GaugeLabel Item { get; public set; }
    internal GaugeLabelCollection(NamedElement parent, CommonElements common);
    public GaugeLabel Add(string name);
    public int Add(GaugeLabel value);
    public void Remove(GaugeLabel value);
    public bool Contains(GaugeLabel value);
    public void Insert(int index, GaugeLabel value);
    public int IndexOf(GaugeLabel value);
    private GaugeLabel get_Item(int index);
    private void set_Item(int index, GaugeLabel value);
    private GaugeLabel get_Item(string name);
    private void set_Item(string name, GaugeLabel value);
    public GaugeLabel get_Item(object obj);
    public void set_Item(object obj, GaugeLabel value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    protected virtual void OnInsertComplete(int index, object value);
}
internal class Microsoft.Reporting.Gauge.WebForms.GaugeLabelConverter : CollectionItemTypeConverter {
}
internal class Microsoft.Reporting.Gauge.WebForms.GaugeLocation : GaugeObject {
    private PointF point;
    private bool defaultValues;
    [SRCategoryAttribute("CategoryValues")]
[SRDescriptionAttribute("DescriptionAttributeGaugeLocation_X")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
[ValidateBound("0", "100", "False")]
public float X { get; public set; }
    [SRCategoryAttribute("CategoryValues")]
[SRDescriptionAttribute("DescriptionAttributeY")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
[ValidateBound("0", "100", "False")]
public float Y { get; public set; }
    internal bool DefaultValues { get; internal set; }
    internal GaugeLocation(object parent);
    internal GaugeLocation(object parent, float x, float y);
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    internal bool get_DefaultValues();
    internal void set_DefaultValues(bool value);
    public virtual string ToString();
    public PointF ToPoint();
    public static PointF op_Implicit(GaugeLocation location);
    public sealed virtual object Clone();
    internal PointF GetPointF();
    private void RemoveAutoLayout();
}
internal class Microsoft.Reporting.Gauge.WebForms.GaugeObject : object {
    internal bool initialized;
    private object parent;
    private CommonElements common;
    private bool disposed;
    internal object Parent { get; internal set; }
    internal CommonElements Common { get; internal set; }
    internal GaugeObject(object parent);
    internal virtual object get_Parent();
    internal virtual void set_Parent(object value);
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
    internal virtual void Invalidate();
    internal virtual void Refresh();
    internal virtual void BeginInit();
    internal virtual void EndInit();
    internal virtual void ReconnectData(bool exact);
    internal virtual void Notify(MessageType msg, NamedElement element, object param);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnDispose();
}
internal enum Microsoft.Reporting.Gauge.WebForms.GaugeOrientation : Enum {
    public int value__;
    public static GaugeOrientation Horizontal;
    public static GaugeOrientation Vertical;
    public static GaugeOrientation Auto;
}
internal class Microsoft.Reporting.Gauge.WebForms.GaugePaintEventArgs : EventArgs {
    private GaugeContainer gauge;
    private GaugeGraphics graphics;
    internal GaugeContainer Gauge { get; }
    public GaugeGraphics Graphics { get; }
    internal GaugePaintEventArgs(GaugeContainer gauge, GaugeGraphics graphics);
    internal GaugeContainer get_Gauge();
    public GaugeGraphics get_Graphics();
}
internal class Microsoft.Reporting.Gauge.WebForms.GaugePaintEventHandler : MulticastDelegate {
    public GaugePaintEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GaugePaintEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GaugePaintEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.Gauge.WebForms.GaugePeriod : object {
    private double duration;
    private PeriodType periodType;
    private TimeSpan timeSpan;
    private bool ivalidated;
    internal double Duration { get; internal set; }
    internal PeriodType PeriodType { get; internal set; }
    internal GaugePeriod(double duration, PeriodType periodType);
    internal double get_Duration();
    internal void set_Duration(double value);
    internal PeriodType get_PeriodType();
    internal void set_PeriodType(PeriodType value);
    internal TimeSpan ToTimeSpan();
    internal static TimeSpan PeriodToTimeSpan(double timeTicks, PeriodType period);
    internal GaugePeriod Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
[SRDescriptionAttribute("DescriptionAttributeGaugeSerializer_GaugeSerializer")]
[DefaultPropertyAttribute("Format")]
internal class Microsoft.Reporting.Gauge.WebForms.GaugeSerializer : object {
    private IServiceContainer serviceContainer;
    private GaugeCore gaugeObject;
    private SerializerBase serializer;
    private SerializationFormat format;
    private SerializationContent content;
    [SRCategoryAttribute("CategoryMisc")]
[DefaultValueAttribute("Microsoft.Reporting.Gauge.WebForms.SerializationContent", "All")]
[SRDescriptionAttribute("DescriptionAttributeGaugeSerializer_Content")]
public SerializationContent Content { get; public set; }
    [SRCategoryAttribute("CategoryMisc")]
[DefaultValueAttribute("Microsoft.Reporting.Gauge.WebForms.SerializationFormat", "Xml")]
[SRDescriptionAttribute("DescriptionAttributeGaugeSerializer_Format")]
public SerializationFormat Format { get; public set; }
    [SRCategoryAttribute("CategoryMisc")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeGaugeSerializer_ResetWhenLoading")]
public bool ResetWhenLoading { get; public set; }
    [SRCategoryAttribute("CategoryMisc")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeGaugeSerializer_IgnoreUnknownXmlAttributes")]
public bool IgnoreUnknownXmlAttributes { get; public set; }
    [SRCategoryAttribute("CategoryMisc")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeGaugeSerializer_TemplateMode")]
public bool TemplateMode { get; public set; }
    [SRCategoryAttribute("CategoryMisc")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeGaugeSerializer_SerializableContent")]
public string SerializableContent { get; public set; }
    [SRCategoryAttribute("CategoryMisc")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeGaugeSerializer_NonSerializableContent")]
public string NonSerializableContent { get; public set; }
    public GaugeSerializer(IServiceContainer container);
    [EditorBrowsableAttribute("1")]
public sealed virtual object GetService(Type serviceType);
    public SerializationContent get_Content();
    public void set_Content(SerializationContent value);
    public SerializationFormat get_Format();
    public void set_Format(SerializationFormat value);
    public bool get_ResetWhenLoading();
    public void set_ResetWhenLoading(bool value);
    public bool get_IgnoreUnknownXmlAttributes();
    public void set_IgnoreUnknownXmlAttributes(bool value);
    public bool get_TemplateMode();
    public void set_TemplateMode(bool value);
    public string get_SerializableContent();
    public void set_SerializableContent(string value);
    public string get_NonSerializableContent();
    public void set_NonSerializableContent(string value);
    public void Reset();
    public void Save(string fileName);
    public void Save(Stream stream);
    public void Save(XmlWriter writer);
    public void Save(TextWriter writer);
    public void Load(string fileName);
    public void Load(Stream stream);
    public void Load(XmlReader reader);
    public void Load(TextReader reader);
    protected void SetSerializableContentFromFlags();
    internal string GetFlagContentString(SerializationContent flag, bool serializable);
    internal GaugeCore GetGaugeObject();
}
internal class Microsoft.Reporting.Gauge.WebForms.GaugeSize : GaugeObject {
    private SizeF size;
    private bool defaultValues;
    [SRCategoryAttribute("CategoryValues")]
[SRDescriptionAttribute("DescriptionAttributeGaugeSize_Width")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
[ValidateBound("0", "100")]
public float Width { get; public set; }
    [SRCategoryAttribute("CategoryValues")]
[SRDescriptionAttribute("DescriptionAttributeGaugeSize_Height")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
[ValidateBound("0", "100")]
public float Height { get; public set; }
    internal bool DefaultValues { get; internal set; }
    internal GaugeSize(object parent);
    internal GaugeSize(object parent, float width, float height);
    internal GaugeSize(object parent, SizeF size);
    public float get_Width();
    public void set_Width(float value);
    public float get_Height();
    public void set_Height(float value);
    internal bool get_DefaultValues();
    internal void set_DefaultValues(bool value);
    public virtual string ToString();
    public SizeF ToSize();
    public static SizeF op_Implicit(GaugeSize size);
    public sealed virtual object Clone();
    private void RemoveAutoLayout();
}
internal enum Microsoft.Reporting.Gauge.WebForms.GaugeThemes : Enum {
    public int value__;
    public static GaugeThemes Graphite;
    public static GaugeThemes WhiteAndBlack;
    public static GaugeThemes BlackAndWhite;
    public static GaugeThemes Blue;
    public static GaugeThemes Gold;
    public static GaugeThemes LCD;
    public static GaugeThemes Gray;
    public static GaugeThemes Default;
}
internal class Microsoft.Reporting.Gauge.WebForms.GdiGraphics : object {
    private Graphics graphics;
    public Matrix Transform { get; public set; }
    public SmoothingMode SmoothingMode { get; public set; }
    public TextRenderingHint TextRenderingHint { get; public set; }
    public Region Clip { get; public set; }
    public bool IsClipEmpty { get; }
    public Graphics Graphics { get; public set; }
    public sealed virtual void DrawLine(Pen pen, PointF pt1, PointF pt2);
    public sealed virtual void DrawLine(Pen pen, float x1, float y1, float x2, float y2);
    public sealed virtual void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr);
    public sealed virtual void DrawEllipse(Pen pen, float x, float y, float width, float height);
    public sealed virtual void DrawCurve(Pen pen, PointF[] points, int offset, int numberOfSegments, float tension);
    public sealed virtual void DrawRectangle(Pen pen, int x, int y, int width, int height);
    public sealed virtual void DrawPolygon(Pen pen, PointF[] points);
    public sealed virtual void DrawString(string s, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    public sealed virtual void DrawString(string s, Font font, Brush brush, PointF point, StringFormat format);
    public sealed virtual void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs);
    public sealed virtual void DrawRectangle(Pen pen, float x, float y, float width, float height);
    public sealed virtual void DrawPath(Pen pen, GraphicsPath path);
    public sealed virtual void DrawPie(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual void DrawArc(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual void DrawImage(Image image, RectangleF rect);
    public sealed virtual void DrawEllipse(Pen pen, RectangleF rect);
    public sealed virtual void DrawLines(Pen pen, PointF[] points);
    public sealed virtual void FillEllipse(Brush brush, RectangleF rect);
    public sealed virtual void FillPath(Brush brush, GraphicsPath path);
    public sealed virtual void FillPath(Brush brush, GraphicsPath path, float angle, bool useBrushOffset, bool circularFill);
    public sealed virtual void FillRegion(Brush brush, Region region);
    public sealed virtual void FillRectangle(Brush brush, RectangleF rect);
    public sealed virtual void FillRectangle(Brush brush, float x, float y, float width, float height);
    public sealed virtual void FillPolygon(Brush brush, PointF[] points);
    public sealed virtual void FillPie(Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    public sealed virtual SizeF MeasureString(string text, Font font);
    public sealed virtual GraphicsState Save();
    public sealed virtual void Restore(GraphicsState gstate);
    public sealed virtual void ResetClip();
    public sealed virtual void SetClip(RectangleF rect);
    public sealed virtual void SetClip(GraphicsPath path, CombineMode combineMode);
    public sealed virtual void TranslateTransform(float dx, float dy);
    public sealed virtual void BeginSelection(string hRef, string title);
    public sealed virtual void EndSelection();
    public sealed virtual Matrix get_Transform();
    public sealed virtual void set_Transform(Matrix value);
    public sealed virtual SmoothingMode get_SmoothingMode();
    public sealed virtual void set_SmoothingMode(SmoothingMode value);
    public sealed virtual TextRenderingHint get_TextRenderingHint();
    public sealed virtual void set_TextRenderingHint(TextRenderingHint value);
    public sealed virtual Region get_Clip();
    public sealed virtual void set_Clip(Region value);
    public sealed virtual bool get_IsClipEmpty();
    public sealed virtual Graphics get_Graphics();
    public sealed virtual void set_Graphics(Graphics value);
}
internal enum Microsoft.Reporting.Gauge.WebForms.GlassEffect : Enum {
    public int value__;
    public static GlassEffect None;
    public static GlassEffect Simple;
}
internal static class Microsoft.Reporting.Gauge.WebForms.GlobalizationHelper : object {
    public static MessageBoxOptions GetMessageBoxOptions(Control owner);
    public static MessageBoxOptions GetMessageBoxOptions();
}
internal enum Microsoft.Reporting.Gauge.WebForms.GradientType : Enum {
    public int value__;
    public static GradientType None;
    public static GradientType LeftRight;
    public static GradientType TopBottom;
    public static GradientType Center;
    public static GradientType DiagonalLeft;
    public static GradientType DiagonalRight;
    public static GradientType HorizontalCenter;
    public static GradientType VerticalCenter;
}
internal class Microsoft.Reporting.Gauge.WebForms.HatchStyleEditor : UITypeEditor {
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual void PaintValue(PaintValueEventArgs e);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.HistoryCollection : CollectionBase {
    private long truncatedTicks;
    private double accumulatedValue;
    private ValueBase parent;
    public HistoryEntry Item { get; public set; }
    internal HistoryEntry Top { get; }
    internal double AccumulatedValue { get; }
    public HistoryCollection(ValueBase parent);
    public HistoryEntry get_Item(int index);
    public void set_Item(int index, HistoryEntry value);
    internal HistoryEntry get_Top();
    internal double get_AccumulatedValue();
    protected virtual void OnClear();
    protected virtual void OnRemove(int index, object value);
    public void Add(DateTime timestamp, double value);
    public void LoadEntries(HistoryCollection sourceHistory);
    internal void Truncate(GaugeDuration d);
    internal int Locate(DateTime timestamp);
    internal int SearchInternal(DateTime timestamp, bool exact);
    internal HistoryEntry[] Select();
    internal HistoryEntry[] Select(DateTime fromDate, DateTime toDate);
    internal HistoryEntry[] Select(int fromPoint);
    internal HistoryEntry[] Select(int fromPoint, int toPoint);
    internal HistoryEntry[] Select(GaugeDuration duration, DateTime currentDate);
    internal DataTable ToDataTable();
    internal DataTable ToDataTable(DateTime toPoint);
    internal DataTable ToDataTable(int toPoint);
    public sealed virtual object Clone();
    public int Add(HistoryEntry value);
    public void Remove(HistoryEntry value);
    public bool Contains(HistoryEntry value);
    public void Insert(int index, HistoryEntry value);
    public int IndexOf(HistoryEntry value);
}
internal class Microsoft.Reporting.Gauge.WebForms.HistoryEntry : object {
    private DateTime timestamp;
    private double value;
    [BrowsableAttribute("False")]
public DateTime Timestamp { get; public set; }
    [BrowsableAttribute("False")]
public double Value { get; public set; }
    public HistoryEntry(DateTime timestamp, double value);
    public virtual DateTime get_Timestamp();
    public virtual void set_Timestamp(DateTime value);
    public virtual double get_Value();
    public virtual void set_Value(double value);
    public sealed virtual int CompareTo(object obj);
    public virtual bool Equals(object obj);
    public bool Equals(HistoryEntry other);
    public virtual int GetHashCode();
    public static bool op_Equality(HistoryEntry he1, HistoryEntry he2);
    public static bool op_Inequality(HistoryEntry he1, HistoryEntry he2);
    public static bool op_LessThan(HistoryEntry he1, HistoryEntry he2);
    public static bool op_GreaterThan(HistoryEntry he1, HistoryEntry he2);
    public sealed virtual object Clone();
}
internal class Microsoft.Reporting.Gauge.WebForms.HitTestResult : object {
    private PointF htPoint;
    private object obj;
    private HotRegion region;
    public object Object { get; }
    public bool Success { get; }
    public string Name { get; }
    public double ScaleValue { get; }
    internal HitTestResult(HotRegion region, PointF hitTestPoint);
    public object get_Object();
    public bool get_Success();
    public string get_Name();
    public double get_ScaleValue();
}
internal class Microsoft.Reporting.Gauge.WebForms.HLSColor : ValueType {
    private static int ShadowAdj;
    private static int HilightAdj;
    private static int WatermarkAdj;
    private static int Range;
    private static int HLSMax;
    private static int RGBMax;
    private static int Undefined;
    private int hue;
    private int saturation;
    private int luminosity;
    public HLSColor(int red, int green, int blue);
    public Color Lighten(float percLighter);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public static bool op_Equality(HLSColor a, HLSColor b);
    public static bool op_Inequality(HLSColor a, HLSColor b);
    private Color ColorFromHLS(int hue, int luminosity, int saturation);
    private int HueToRGB(int n1, int n2, int hue);
    private int NewLuma(int n, bool scale);
    private int NewLuma(int luminosity, int n, bool scale);
}
internal class Microsoft.Reporting.Gauge.WebForms.HotRegion : object {
    private GraphicsPath[] paths;
    private RectangleF boundingRectangle;
    private object selectedObject;
    private PointF circularPinPoint;
    private Matrix relMatrix;
    private Matrix absMatrix;
    private PointF[] pointsRect;
    private PointF[] pointsPoint;
    protected bool disposed;
    internal GraphicsPath[] Paths { get; internal set; }
    internal RectangleF BoundingRectangle { get; }
    internal object SelectedObject { get; internal set; }
    internal PointF PinPoint { get; internal set; }
    internal GraphicsPath[] get_Paths();
    internal void set_Paths(GraphicsPath[] value);
    internal RectangleF get_BoundingRectangle();
    internal object get_SelectedObject();
    internal void set_SelectedObject(object value);
    internal PointF get_PinPoint();
    internal void set_PinPoint(PointF value);
    internal void BuildMatrices(GaugeGraphics g);
    internal RectangleF GetAbsoluteRectangle(RectangleF relativeRect);
    internal RectangleF GetRelativeRectangle(RectangleF absoluteRect);
    internal PointF GetAbsolutePoint(PointF relativePoint);
    internal PointF GetRelativePoint(PointF absolutePoint);
    public SizeF GetAbsoluteSize(SizeF relativeSize);
    internal SizeF GetRelativeSize(SizeF absoluteSize);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.Reporting.Gauge.WebForms.HotRegionList : GaugeObject {
    private ArrayList list;
    internal ArrayList List { get; }
    public HotRegionList(object parent);
    internal ArrayList get_List();
    internal int LocateObject(object selectedObject);
    public void SetHotRegion(object selectedObject, GraphicsPath[] paths);
    public void SetHotRegion(object selectedObject, PointF pinPoint, GraphicsPath[] paths);
    internal HotRegion[] CheckHotRegions(int x, int y, Type[] objectTypes);
    internal bool IsOfType(Type[] objectTypes, object obj);
    internal void Clear();
}
internal class Microsoft.Reporting.Gauge.WebForms.HSV : ValueType {
    internal int Hue;
    internal int Saturation;
    internal int value;
    internal HSV(int H, int S, int V);
}
internal interface Microsoft.Reporting.Gauge.WebForms.IGaugeRenderingEngine {
    public Matrix Transform { get; public set; }
    public SmoothingMode SmoothingMode { get; public set; }
    public TextRenderingHint TextRenderingHint { get; public set; }
    public Region Clip { get; public set; }
    public Graphics Graphics { get; public set; }
    public bool IsClipEmpty { get; }
    public abstract virtual void DrawLine(Pen pen, PointF pt1, PointF pt2);
    public abstract virtual void DrawLine(Pen pen, float x1, float y1, float x2, float y2);
    public abstract virtual void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr);
    public abstract virtual void DrawEllipse(Pen pen, float x, float y, float width, float height);
    public abstract virtual void DrawCurve(Pen pen, PointF[] points, int offset, int numberOfSegments, float tension);
    public abstract virtual void DrawRectangle(Pen pen, int x, int y, int width, int height);
    public abstract virtual void DrawPolygon(Pen pen, PointF[] points);
    public abstract virtual void DrawString(string s, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    public abstract virtual void DrawString(string s, Font font, Brush brush, PointF point, StringFormat format);
    public abstract virtual void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs);
    public abstract virtual void DrawRectangle(Pen pen, float x, float y, float width, float height);
    public abstract virtual void DrawPath(Pen pen, GraphicsPath path);
    public abstract virtual void DrawPie(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public abstract virtual void DrawArc(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public abstract virtual void DrawImage(Image image, RectangleF rect);
    public abstract virtual void DrawEllipse(Pen pen, RectangleF rect);
    public abstract virtual void DrawLines(Pen pen, PointF[] points);
    public abstract virtual void FillEllipse(Brush brush, RectangleF rect);
    public abstract virtual void FillPath(Brush brush, GraphicsPath path);
    public abstract virtual void FillPath(Brush brush, GraphicsPath path, float angle, bool useBrushOffset, bool circularFill);
    public abstract virtual void FillRegion(Brush brush, Region region);
    public abstract virtual void FillRectangle(Brush brush, RectangleF rect);
    public abstract virtual void FillRectangle(Brush brush, float x, float y, float width, float height);
    public abstract virtual void FillPolygon(Brush brush, PointF[] points);
    public abstract virtual void FillPie(Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public abstract virtual SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    public abstract virtual SizeF MeasureString(string text, Font font);
    public abstract virtual GraphicsState Save();
    public abstract virtual void Restore(GraphicsState gstate);
    public abstract virtual void ResetClip();
    public abstract virtual void SetClip(RectangleF rect);
    public abstract virtual void SetClip(GraphicsPath path, CombineMode combineMode);
    public abstract virtual void TranslateTransform(float dx, float dy);
    public abstract virtual void BeginSelection(string hRef, string title);
    public abstract virtual void EndSelection();
    public abstract virtual Matrix get_Transform();
    public abstract virtual void set_Transform(Matrix value);
    public abstract virtual SmoothingMode get_SmoothingMode();
    public abstract virtual void set_SmoothingMode(SmoothingMode value);
    public abstract virtual TextRenderingHint get_TextRenderingHint();
    public abstract virtual void set_TextRenderingHint(TextRenderingHint value);
    public abstract virtual Region get_Clip();
    public abstract virtual void set_Clip(Region value);
    public abstract virtual Graphics get_Graphics();
    public abstract virtual void set_Graphics(Graphics value);
    public abstract virtual bool get_IsClipEmpty();
}
internal interface Microsoft.Reporting.Gauge.WebForms.IImageMapProvider {
    unknown string Href {public set; }
    public object Tag { get; public set; }
    public abstract virtual string GetToolTip();
    public abstract virtual string GetHref();
    public abstract virtual string GetMapAreaAttributes();
    public abstract virtual void set_Href(string value);
    public abstract virtual void set_Tag(object value);
    public abstract virtual object get_Tag();
}
internal class Microsoft.Reporting.Gauge.WebForms.ImageLoader : object {
    private Hashtable imageData;
    private IServiceContainer serviceContainer;
    public ImageLoader(IServiceContainer container);
    [EditorBrowsableAttribute("1")]
public sealed virtual object GetService(Type serviceType);
    public sealed virtual void Dispose();
    public Image LoadImage(string imageURL);
    public Image LoadImage(string imageURL, bool saveImage);
    private Image LoadFromFile(string fileName);
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.ImageOrigin/Converter")]
internal class Microsoft.Reporting.Gauge.WebForms.ImageOrigin : object {
    private Point point;
    private bool notSet;
    private bool defaultValues;
    [SRCategoryAttribute("CategoryValues")]
[SRDescriptionAttribute("DescriptionAttributeImageOrigin_X")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public int X { get; public set; }
    [SRCategoryAttribute("CategoryValues")]
[SRDescriptionAttribute("DescriptionAttributeY")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public int Y { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryValues")]
[SRDescriptionAttribute("DescriptionAttributeImageOrigin_NotSet")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public bool NotSet { get; public set; }
    internal bool DefaultValues { get; internal set; }
    public ImageOrigin(bool notSet, int x, int y);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public bool get_NotSet();
    public void set_NotSet(bool value);
    internal bool get_DefaultValues();
    internal void set_DefaultValues(bool value);
    public virtual string ToString();
    public Point ToPoint();
    public sealed virtual object Clone();
}
internal class Microsoft.Reporting.Gauge.WebForms.ImageSmoothingState : object {
    public GaugeGraphics g;
    private SmoothingMode oldSmoothingMode;
    private CompositingQuality compositingQuality;
    private InterpolationMode oldInterpolationMode;
    public ImageSmoothingState(GaugeGraphics g);
    public void Set();
    public void Restore();
}
internal enum Microsoft.Reporting.Gauge.WebForms.ImageType : Enum {
    public int value__;
    public static ImageType Bmp;
    public static ImageType Jpeg;
    public static ImageType Png;
    public static ImageType Emf;
}
internal interface Microsoft.Reporting.Gauge.WebForms.IMapAreaAttributes {
    public string ToolTip { get; public set; }
    public string Href { get; public set; }
    public string MapAreaAttributes { get; public set; }
    public abstract virtual void set_ToolTip(string value);
    public abstract virtual string get_ToolTip();
    public abstract virtual void set_Href(string value);
    public abstract virtual string get_Href();
    public abstract virtual void set_MapAreaAttributes(string value);
    public abstract virtual string get_MapAreaAttributes();
}
[BindableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.InputValueConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.InputValue : ValueBase {
    private CalculatedValueCollection calculatedValues;
    private string dataMember;
    private string dateFieldMember;
    private string valueFieldMember;
    private InputValue playBackValue;
    private Timer playBackTimer;
    private int playBackMarker;
    private float speedMultiplier;
    private bool pointersInitialized;
    private bool paused;
    [DesignerSerializationVisibilityAttribute("2")]
public CalculatedValueCollection CalculatedValues { get; }
    [SRCategoryAttribute("CategoryData")]
[BindableAttribute("True")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("не число")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleNanValueConverter")]
[SRDescriptionAttribute("DescriptionAttributeInputValue_Value")]
public double Value { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeInputValue_HistoryDepth")]
public long HistoryDepth { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeInputValue_HistoryDepthType")]
public DurationType HistoryDepthType { get; public set; }
    [SRCategoryAttribute("CategoryData")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeInputValue_DataMember")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DataMemberConverter")]
public string DataMember { get; public set; }
    [SRCategoryAttribute("CategoryData")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeDataSource")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DataSourceConverter")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
internal object DataSource { get; }
    [SRCategoryAttribute("CategoryData")]
[BindableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DataFieldMemberConverter")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeInputValue_DateFieldMember")]
public string DateFieldMember { get; public set; }
    [SRCategoryAttribute("CategoryData")]
[BindableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DataFieldMemberConverter")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeInputValue_ValueFieldMember")]
public string ValueFieldMember { get; public set; }
    internal CommonElements Common { get; internal set; }
    internal float SpeedMultiplier { get; }
    public CalculatedValueCollection get_CalculatedValues();
    public virtual double get_Value();
    public virtual void set_Value(double value);
    public long get_HistoryDepth();
    public void set_HistoryDepth(long value);
    public DurationType get_HistoryDepthType();
    public void set_HistoryDepthType(DurationType value);
    public string get_DataMember();
    public void set_DataMember(string value);
    internal object get_DataSource();
    public string get_DateFieldMember();
    public void set_DateFieldMember(string value);
    public string get_ValueFieldMember();
    public void set_ValueFieldMember(string value);
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
    public void IncValue();
    public void IncValue(double increment);
    public void SetValue(double value);
    public void SetValue(double value, DateTime timestamp);
    internal float get_SpeedMultiplier();
    private void InitTimer();
    private void OnPlayBackRefreshInternal();
    private void OnPlayBackRefresh(object sender, ElapsedEventArgs e);
    private void PlaybackReverse(float speedMultiplier, int numberOfRecords);
    public void Playback(float speedMultiplier);
    public void Playback(float speedMultiplier, DateTime startTime);
    public void Playback(float speedMultiplier, int numberOfRecords);
    public void Stop();
    public void Pause();
    public void Resume();
    public double GetPlaybackValue();
    public DateTime GetPlaybackTimestamp();
    public bool IsPlaybackMode();
    public DataTable GetData();
    public DataTable GetData(int toPoint);
    public DataTable GetData(DateTime toPoint);
    public void DataBind();
    public void DataBind(object dataSource, string valueFieldName, string dateFieldName);
    public void DataBind(object dataSource, string valueFieldName, string dateFieldName, string dataMember);
    internal void AutoDataBind();
    internal void PerformDataBinding(IEnumerable data);
    private IEnumerable GetDataSourceAsIEnumerable(object data, string dataMember, Boolean& closeDataReader, IDbConnection& connection);
    private object ConvertEnumerationItem(object item, string fieldName);
    private void PlaybackComplete();
    internal virtual void BeginInit();
    internal virtual void EndInit();
    protected virtual void OnDispose();
    public virtual void Reset();
    internal virtual object CloneInternals(object copy);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.InputValueCollection : NamedCollection {
    private InputValue Item { get; private set; }
    private InputValue Item { get; private set; }
    public InputValue Item { get; public set; }
    internal InputValueCollection(NamedElement parent, CommonElements common);
    private InputValue get_Item(string name);
    private void set_Item(string name, InputValue value);
    private InputValue get_Item(int index);
    private void set_Item(int index, InputValue value);
    public InputValue get_Item(object obj);
    public void set_Item(object obj, InputValue value);
    public InputValue Add(string name);
    public int Add(InputValue value);
    public void Insert(int index, InputValue value);
    public void Remove(InputValue value);
    public bool Contains(InputValue value);
    public int IndexOf(InputValue value);
}
internal class Microsoft.Reporting.Gauge.WebForms.InputValueConverter : CollectionItemTypeConverter {
}
internal enum Microsoft.Reporting.Gauge.WebForms.IntervalTypes : Enum {
    public int value__;
    public static IntervalTypes Main;
    public static IntervalTypes Minor;
    public static IntervalTypes Major;
    public static IntervalTypes Labels;
}
internal interface Microsoft.Reporting.Gauge.WebForms.IPointerProvider {
    public double Position { get; public set; }
    public abstract virtual void DataValueChanged(bool initialize);
    public abstract virtual double get_Position();
    public abstract virtual void set_Position(double value);
}
internal interface Microsoft.Reporting.Gauge.WebForms.IRenderable {
    public abstract virtual void RenderStaticElements(GaugeGraphics g);
    public abstract virtual void RenderDynamicElements(GaugeGraphics g);
    public abstract virtual int GetZOrder();
    public abstract virtual RectangleF GetBoundRect(GaugeGraphics g);
    public abstract virtual object GetParentRenderable();
    public abstract virtual string GetParentRenderableName();
}
internal interface Microsoft.Reporting.Gauge.WebForms.ISelectable {
    public abstract virtual void DrawSelection(GaugeGraphics g, bool designTimeSelection);
}
internal class Microsoft.Reporting.Gauge.WebForms.ItemInfo : object {
    public string name;
    public bool any;
    public bool startsWith;
    public bool endsWith;
}
internal interface Microsoft.Reporting.Gauge.WebForms.IToolTipProvider {
    public abstract virtual string GetToolTip(HitTestResult ht);
}
internal interface Microsoft.Reporting.Gauge.WebForms.ITraceContext {
    public bool TraceEnabled { get; }
    public abstract virtual bool get_TraceEnabled();
    public abstract virtual void Write(string category, string message);
}
internal interface Microsoft.Reporting.Gauge.WebForms.IValueConsumer {
    public abstract virtual void ProviderRemoved(IValueProvider provider);
    public abstract virtual void ProviderNameChanged(IValueProvider provider);
    public abstract virtual void InputValueChanged(object sender, ValueChangedEventArgs e);
    public abstract virtual void Reset();
    public abstract virtual void Refresh();
    public abstract virtual IValueProvider GetProvider();
}
internal interface Microsoft.Reporting.Gauge.WebForms.IValueProvider {
    public abstract virtual void AttachConsumer(IValueConsumer consumer);
    public abstract virtual void DetachConsumer(IValueConsumer consumer);
    public abstract virtual double GetValue();
    public abstract virtual DateTime GetDate();
    public abstract virtual string GetValueProviderName();
    public abstract virtual HistoryCollection GetData(GaugeDuration period, DateTime currentDate);
    public abstract virtual bool GetPlayBackMode();
    public abstract virtual ValueState GetProvderState();
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.KnobConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.Knob : PointerBase {
    private bool capVisible;
    private bool capReflection;
    private float capWidth;
    private string capImage;
    private Color capImageTransColor;
    private Color capImageHueColor;
    private Point capImageOrigin;
    private KnobStyle style;
    private Color capFillColor;
    private GradientType capFillGradientType;
    private Color capFillGradientEndColor;
    private GaugeHatchStyle capFillHatchStyle;
    private float markerLength;
    private float markerWidth;
    private float markerPosition;
    private Color markerFillColor;
    private GradientType markerFillGradientType;
    private Color markerFillGradientEndColor;
    private GaugeHatchStyle markerFillHatchStyle;
    private float capShadowOffset;
    private bool rotateGradient;
    private bool capRotateGradient;
    private bool markerRotateGradient;
    private bool selected;
    private GraphicsPath[] hotRegions;
    [SRCategoryAttribute("CategoryMisc")]
[SRDescriptionAttribute("DescriptionAttributeKnob_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryMisc")]
[SRDescriptionAttribute("DescriptionAttributeKnob_ScaleName")]
[DefaultValueAttribute("Default")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.ScaleSourceConverter")]
public string ScaleName { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeKnob_Image")]
[DefaultValueAttribute("")]
public string Image { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeKnob_ImageTransColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageTransColor { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeKnob_ImageHueColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageHueColor { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeKnob_ImageOrigin")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.EmptyPointConverter")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
public Point ImageOrigin { get; public set; }
    [SRCategoryAttribute("CategoryData")]
[SRDescriptionAttribute("DescriptionAttributeKnob_Value")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("не число")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleNanValueConverter")]
public double Value { get; public set; }
    [SRCategoryAttribute("CategoryData")]
[SRDescriptionAttribute("DescriptionAttributeKnob_ValueSource")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.ValueSourceConverter")]
[RefreshPropertiesAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
public string ValueSource { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeKnob_SnappingEnabled")]
[DefaultValueAttribute("False")]
public bool SnappingEnabled { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeKnob_DampeningEnabled")]
[DefaultValueAttribute("False")]
public bool DampeningEnabled { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeKnob_ToolTip")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeKnob_Interactive")]
[DefaultValueAttribute("True")]
public bool Interactive { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeKnob_Visible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeKnob_FillColor")]
[DefaultValueAttribute("System.Drawing.Color", "Gainsboro")]
public Color FillColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeKnob_FillGradientEndColor")]
[DefaultValueAttribute("System.Drawing.Color", "Gray")]
public Color FillGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeKnob_FillHatchStyle")]
[EditorAttribute("Microsoft.Reporting.Gauge.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeHatchStyle FillHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeKnob_FillGradientType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType FillGradientType { get; public set; }
    [SRCategoryAttribute("CategoryKnobCap")]
[SRDescriptionAttribute("DescriptionAttributeKnob_CapVisible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool CapVisible { get; public set; }
    [SRCategoryAttribute("CategoryKnobCap")]
[SRDescriptionAttribute("DescriptionAttributeKnob_CapReflection")]
[DefaultValueAttribute("True")]
public bool CapReflection { get; public set; }
    [SRCategoryAttribute("CategoryKnobCap")]
[SRDescriptionAttribute("DescriptionAttributeKnob_CapWidth")]
[ValidateBound("0", "100")]
[DefaultValueAttribute("60")]
public float CapWidth { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeKnob_CapImage")]
[DefaultValueAttribute("")]
public string CapImage { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeKnob_CapImageTransColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color CapImageTransColor { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeCapImageHueColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color CapImageHueColor { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeKnob_CapImageOrigin")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.EmptyPointConverter")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
public Point CapImageOrigin { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeKnob_Width")]
[ValidateBound("0", "200")]
[DefaultValueAttribute("80")]
public float Width { get; public set; }
    [SRCategoryAttribute("CategoryMarker")]
[SRDescriptionAttribute("DescriptionAttributeKnob_Style")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MarkerStyle MarkerStyle { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeKnob_Style")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SerializationVisibilityAttribute("0")]
[ObsoleteAttribute("This property is obsolete in Dundas Gauge 2.0. KnobStyle is supposed to be used instead.")]
public KnobStyle Style { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeKnob_Style")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public KnobStyle KnobStyle { get; public set; }
    [SRCategoryAttribute("CategoryKnobCap")]
[SRDescriptionAttribute("DescriptionAttributeKnob_CapFillColor")]
[DefaultValueAttribute("System.Drawing.Color", "Gainsboro")]
public Color CapFillColor { get; public set; }
    [SRCategoryAttribute("CategoryKnobCap")]
[SRDescriptionAttribute("DescriptionAttributeKnob_MarkerFillGradientType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType CapFillGradientType { get; public set; }
    [SRCategoryAttribute("CategoryKnobCap")]
[SRDescriptionAttribute("DescriptionAttributeKnob_CapFillGradientEndColor")]
[DefaultValueAttribute("System.Drawing.Color", "Gray")]
public Color CapFillGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryKnobCap")]
[SRDescriptionAttribute("DescriptionAttributeKnob_CapFillHatchStyle")]
[EditorAttribute("Microsoft.Reporting.Gauge.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeHatchStyle CapFillHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryMarker")]
[SRDescriptionAttribute("DescriptionAttributeKnob_MarkerLength")]
[ValidateBound("0", "50")]
[DefaultValueAttribute("15")]
public float MarkerLength { get; public set; }
    [SRCategoryAttribute("CategoryMarker")]
[SRDescriptionAttribute("DescriptionAttributeKnob_MarkerWidth")]
[ValidateBound("0", "50")]
[DefaultValueAttribute("10")]
public float MarkerWidth { get; public set; }
    [SRCategoryAttribute("CategoryMarker")]
[SRDescriptionAttribute("DescriptionAttributeKnob_MarkerPosition")]
[ValidateBound("0", "100")]
[DefaultValueAttribute("36")]
public float MarkerPosition { get; public set; }
    [SRCategoryAttribute("CategoryMarker")]
[SRDescriptionAttribute("DescriptionAttributeKnob_MarkerFillColor")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color MarkerFillColor { get; public set; }
    [SRCategoryAttribute("CategoryMarker")]
[SRDescriptionAttribute("DescriptionAttributeKnob_MarkerFillGradientType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType MarkerFillGradientType { get; public set; }
    [SRCategoryAttribute("CategoryMarker")]
[SRDescriptionAttribute("DescriptionAttributeKnob_MarkerFillGradientEndColor")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
public Color MarkerFillGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryMarker")]
[SRDescriptionAttribute("DescriptionAttributeKnob_MarkerFillHatchStyle")]
[EditorAttribute("Microsoft.Reporting.Gauge.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeHatchStyle MarkerFillHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryKnobCap")]
[SRDescriptionAttribute("DescriptionAttributeKnob_CapShadowOffset")]
[ValidateBound("-5", "5")]
[DefaultValueAttribute("2")]
public float CapShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeKnob_RotateGradient")]
[DefaultValueAttribute("False")]
public bool RotateGradient { get; public set; }
    [SRCategoryAttribute("CategoryKnobCap")]
[SRDescriptionAttribute("DescriptionAttributeKnob_CapRotateGradient")]
[DefaultValueAttribute("False")]
public bool CapRotateGradient { get; public set; }
    [SRCategoryAttribute("CategoryMarker")]
[SRDescriptionAttribute("DescriptionAttributeKnob_MarkerRotateGradient")]
[DefaultValueAttribute("True")]
public bool MarkerRotateGradient { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeKnob_Cursor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeCursor Cursor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeKnob_Selected")]
[DefaultValueAttribute("False")]
public bool Selected { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public float DistanceFromScale { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public BarStart BarStart { get; public set; }
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_ScaleName();
    public virtual void set_ScaleName(string value);
    public virtual string get_Image();
    public virtual void set_Image(string value);
    public virtual Color get_ImageTransColor();
    public virtual void set_ImageTransColor(Color value);
    public virtual Color get_ImageHueColor();
    public virtual void set_ImageHueColor(Color value);
    public virtual Point get_ImageOrigin();
    public virtual void set_ImageOrigin(Point value);
    public virtual double get_Value();
    public virtual void set_Value(double value);
    public virtual string get_ValueSource();
    public virtual void set_ValueSource(string value);
    public virtual bool get_SnappingEnabled();
    public virtual void set_SnappingEnabled(bool value);
    public virtual bool get_DampeningEnabled();
    public virtual void set_DampeningEnabled(bool value);
    public virtual string get_ToolTip();
    public virtual void set_ToolTip(string value);
    public virtual bool get_Interactive();
    public virtual void set_Interactive(bool value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_FillGradientEndColor();
    public virtual void set_FillGradientEndColor(Color value);
    public virtual GaugeHatchStyle get_FillHatchStyle();
    public virtual void set_FillHatchStyle(GaugeHatchStyle value);
    public virtual GradientType get_FillGradientType();
    public virtual void set_FillGradientType(GradientType value);
    public bool get_CapVisible();
    public void set_CapVisible(bool value);
    public bool get_CapReflection();
    public void set_CapReflection(bool value);
    public float get_CapWidth();
    public void set_CapWidth(float value);
    public string get_CapImage();
    public void set_CapImage(string value);
    public Color get_CapImageTransColor();
    public void set_CapImageTransColor(Color value);
    public Color get_CapImageHueColor();
    public void set_CapImageHueColor(Color value);
    public Point get_CapImageOrigin();
    public void set_CapImageOrigin(Point value);
    public virtual float get_Width();
    public virtual void set_Width(float value);
    public virtual MarkerStyle get_MarkerStyle();
    public virtual void set_MarkerStyle(MarkerStyle value);
    public KnobStyle get_Style();
    public void set_Style(KnobStyle value);
    protected bool ShouldSerializeStyle();
    public KnobStyle get_KnobStyle();
    public void set_KnobStyle(KnobStyle value);
    public Color get_CapFillColor();
    public void set_CapFillColor(Color value);
    public GradientType get_CapFillGradientType();
    public void set_CapFillGradientType(GradientType value);
    public Color get_CapFillGradientEndColor();
    public void set_CapFillGradientEndColor(Color value);
    public GaugeHatchStyle get_CapFillHatchStyle();
    public void set_CapFillHatchStyle(GaugeHatchStyle value);
    public virtual float get_MarkerLength();
    public virtual void set_MarkerLength(float value);
    public float get_MarkerWidth();
    public void set_MarkerWidth(float value);
    public float get_MarkerPosition();
    public void set_MarkerPosition(float value);
    public Color get_MarkerFillColor();
    public void set_MarkerFillColor(Color value);
    public GradientType get_MarkerFillGradientType();
    public void set_MarkerFillGradientType(GradientType value);
    public Color get_MarkerFillGradientEndColor();
    public void set_MarkerFillGradientEndColor(Color value);
    public GaugeHatchStyle get_MarkerFillHatchStyle();
    public void set_MarkerFillHatchStyle(GaugeHatchStyle value);
    public float get_CapShadowOffset();
    public void set_CapShadowOffset(float value);
    public bool get_RotateGradient();
    public void set_RotateGradient(bool value);
    public bool get_CapRotateGradient();
    public void set_CapRotateGradient(bool value);
    public bool get_MarkerRotateGradient();
    public void set_MarkerRotateGradient(bool value);
    public virtual GaugeCursor get_Cursor();
    public virtual void set_Cursor(GaugeCursor value);
    public bool get_Selected();
    public void set_Selected(bool value);
    public virtual float get_DistanceFromScale();
    public virtual void set_DistanceFromScale(float value);
    public virtual BarStart get_BarStart();
    public virtual void set_BarStart(BarStart value);
    internal KnobStyleAttrib GetKnobStyleAttrib(GaugeGraphics g, PointF pointOrigin, float angle);
    private GraphicsPath GetKnobPath(GaugeGraphics g, float knobRadius, float capRadius);
    private PathGradientBrush GetSpecialCapBrush(GaugeGraphics g, GraphicsPath path, PointF pointOrigin, float angle, Color fillColor, GradientType fillGradientType, Color fillGradientEndColor, GaugeHatchStyle fillHatchStyle);
    private Brush GetFillBrush(GaugeGraphics g, GraphicsPath path, PointF pointOrigin, float angle, Color fillColor, GradientType fillGradientType, Color fillGradientEndColor, GaugeHatchStyle fillHatchStyle);
    internal virtual void Render(GaugeGraphics g);
    internal void DrawImage(GaugeGraphics g, bool primary, bool drawShadow);
    internal GraphicsPath GetPointerPath(GaugeGraphics g);
    internal GraphicsPath GetShadowPath(GaugeGraphics g);
    internal void AddHotRegion(GraphicsPath path, bool primary);
    internal void SetAllHotRegions(GaugeGraphics g);
    public virtual string ToString();
    public CircularGauge GetGauge();
    public CircularScale GetScale();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.ISelectable.DrawSelection(GaugeGraphics g, bool designTimeSelection);
    public virtual object Clone();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.KnobCollection : NamedCollection {
    private Knob Item { get; private set; }
    private Knob Item { get; private set; }
    public Knob Item { get; public set; }
    internal KnobCollection(NamedElement parent, CommonElements common);
    public Knob Add(string name);
    public int Add(Knob value);
    public void Remove(Knob value);
    public bool Contains(Knob value);
    public void Insert(int index, Knob value);
    public int IndexOf(Knob value);
    private Knob get_Item(int index);
    private void set_Item(int index, Knob value);
    private Knob get_Item(string name);
    private void set_Item(string name, Knob value);
    public Knob get_Item(object obj);
    public void set_Item(object obj, Knob value);
    internal virtual string GetElementNameFormat(NamedElement el);
}
internal class Microsoft.Reporting.Gauge.WebForms.KnobConverter : CollectionItemTypeConverter {
}
internal enum Microsoft.Reporting.Gauge.WebForms.KnobStyle : Enum {
    public int value__;
    public static KnobStyle Style1;
    public static KnobStyle Style2;
    public static KnobStyle Style3;
}
internal class Microsoft.Reporting.Gauge.WebForms.KnobStyleAttrib : object {
    public GraphicsPath[] paths;
    public Brush[] brushes;
    public void Dispose();
}
internal class Microsoft.Reporting.Gauge.WebForms.LabelFormatEditor : UITypeEditor {
    private IWindowsFormsEditorService edSvc;
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Gauge.WebForms.LabelFormatEditorForm : Form {
    internal string resultFormat;
    private string formatString;
    private string formatNumeric;
    private TabControl tabControl;
    private ComboBox comboBoxFormatType;
    private TabPage tabPageNumeric;
    private TabPage tabPageCustom;
    private TextBox textBoxFormatString;
    private TextBox textBoxCustomSample;
    private Label labelCustomDescription;
    private Label labelNumericFormatDescription;
    private TextBox textBoxNumericSample;
    private Button buttonOk;
    private Button buttonCancel;
    private Label label1;
    private Label label2;
    private Label label6;
    private Label label4;
    private Label label3;
    private TextBox textBoxPrecision;
    private Container components;
    private void InitializeComponent();
    protected virtual void Dispose(bool disposing);
    private void UpdateNumericSample();
    private void comboBoxFormatType_SelectedIndexChanged(object sender, EventArgs e);
    private void LabelFormatEditorForm_Load(object sender, EventArgs e);
    private void textBoxPrecision_TextChanged(object sender, EventArgs e);
    private void textBoxFormatString_TextChanged(object sender, EventArgs e);
    private void UpdateCustomExample();
    private void tabControl_SelectedIndexChanged(object sender, EventArgs e);
    private void buttonOk_Click(object sender, EventArgs e);
    private void buttonCancel_Click(object sender, EventArgs e);
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Gauge.WebForms.LEDSegment14 : Enum {
    public ulong value__;
    public static LEDSegment14 Empty;
    public static LEDSegment14 SA;
    public static LEDSegment14 SB;
    public static LEDSegment14 SC;
    public static LEDSegment14 SD;
    public static LEDSegment14 SE;
    public static LEDSegment14 SF;
    public static LEDSegment14 SG1;
    public static LEDSegment14 SG2;
    public static LEDSegment14 SG;
    public static LEDSegment14 SH;
    public static LEDSegment14 SK;
    public static LEDSegment14 SJ;
    public static LEDSegment14 SL;
    public static LEDSegment14 SM;
    public static LEDSegment14 SN;
    public static LEDSegment14 SDP;
    public static LEDSegment14 SComma;
    public static LEDSegment14 N1;
    public static LEDSegment14 N2;
    public static LEDSegment14 N3;
    public static LEDSegment14 N4;
    public static LEDSegment14 N5;
    public static LEDSegment14 N6;
    public static LEDSegment14 N7;
    public static LEDSegment14 N8;
    public static LEDSegment14 N9;
    public static LEDSegment14 N0;
    public static LEDSegment14 Neg;
    public static LEDSegment14 Plus;
    public static LEDSegment14 Unknown;
    public static LEDSegment14 All;
    public static LEDSegment14 CA;
    public static LEDSegment14 CB;
    public static LEDSegment14 CC;
    public static LEDSegment14 CD;
    public static LEDSegment14 CE;
    public static LEDSegment14 CF;
    public static LEDSegment14 CG;
    public static LEDSegment14 CH;
    public static LEDSegment14 CI;
    public static LEDSegment14 CJ;
    public static LEDSegment14 CK;
    public static LEDSegment14 CL;
    public static LEDSegment14 CM;
    public static LEDSegment14 CN;
    public static LEDSegment14 CO;
    public static LEDSegment14 CP;
    public static LEDSegment14 CQ;
    public static LEDSegment14 CR;
    public static LEDSegment14 CS;
    public static LEDSegment14 CT;
    public static LEDSegment14 CU;
    public static LEDSegment14 CV;
    public static LEDSegment14 CW;
    public static LEDSegment14 CX;
    public static LEDSegment14 CY;
    public static LEDSegment14 CZ;
    public static LEDSegment14 CDollar;
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Gauge.WebForms.LEDSegment7 : Enum {
    public ulong value__;
    public static LEDSegment7 Empty;
    public static LEDSegment7 SA;
    public static LEDSegment7 SB;
    public static LEDSegment7 SC;
    public static LEDSegment7 SD;
    public static LEDSegment7 SE;
    public static LEDSegment7 SF;
    public static LEDSegment7 SG;
    public static LEDSegment7 SDP;
    public static LEDSegment7 SComma;
    public static LEDSegment7 N1;
    public static LEDSegment7 N2;
    public static LEDSegment7 N3;
    public static LEDSegment7 N4;
    public static LEDSegment7 N5;
    public static LEDSegment7 N6;
    public static LEDSegment7 N7;
    public static LEDSegment7 N8;
    public static LEDSegment7 N9;
    public static LEDSegment7 N0;
    public static LEDSegment7 Neg;
    public static LEDSegment7 Unknown;
    public static LEDSegment7 All;
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.LinearGaugeConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.LinearGauge : GaugeBase {
    private LinearScaleCollection scales;
    private LinearRangeCollection ranges;
    private LinearPointerCollection pointers;
    private GaugeOrientation orientation;
    private SizeF absoluteSize;
    [DesignerSerializationVisibilityAttribute("2")]
public LinearScaleCollection Scales { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public LinearRangeCollection Ranges { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public LinearPointerCollection Pointers { get; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeLinearGauge_Orientation")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeOrientation Orientation { get; public set; }
    internal SizeF AbsoluteSize { get; internal set; }
    internal CommonElements Common { get; internal set; }
    public LinearScaleCollection get_Scales();
    public LinearRangeCollection get_Ranges();
    public LinearPointerCollection get_Pointers();
    public GaugeOrientation get_Orientation();
    public void set_Orientation(GaugeOrientation value);
    internal SizeF get_AbsoluteSize();
    internal void set_AbsoluteSize(SizeF value);
    public virtual string ToString();
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
    internal virtual void BeginInit();
    internal virtual void EndInit();
    protected virtual void OnDispose();
    internal virtual void ReconnectData(bool exact);
    internal virtual void Notify(MessageType msg, NamedElement element, object param);
    internal virtual IEnumerable GetRanges();
    internal GaugeOrientation GetOrientation();
    internal virtual void PointerValueChanged(PointerBase sender);
    internal void RenderTopImage(GaugeGraphics g);
    internal virtual RectangleF GetAspectRatioBounds();
    internal virtual RectangleF GetBoundRect(GaugeGraphics g);
    internal virtual void RenderStaticElements(GaugeGraphics g);
    internal virtual void RenderDynamicElements(GaugeGraphics g);
    internal void RenderDynamicShadows(GaugeGraphics g);
    internal void RenderStaticShadows(GaugeGraphics g);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.ISelectable.DrawSelection(GaugeGraphics g, bool designTimeSelection);
    public virtual object Clone();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.LinearGaugeCollection : NamedCollection {
    private LinearGauge Item { get; private set; }
    private LinearGauge Item { get; private set; }
    public LinearGauge Item { get; public set; }
    internal LinearGaugeCollection(NamedElement parent, CommonElements common);
    public LinearGauge Add(string name);
    public int Add(LinearGauge value);
    public void Remove(LinearGauge value);
    public bool Contains(LinearGauge value);
    public void Insert(int index, LinearGauge value);
    public int IndexOf(LinearGauge value);
    private LinearGauge get_Item(int index);
    private void set_Item(int index, LinearGauge value);
    private LinearGauge get_Item(string name);
    private void set_Item(string name, LinearGauge value);
    public LinearGauge get_Item(object obj);
    public void set_Item(object obj, LinearGauge value);
    internal virtual string GetElementNameFormat(NamedElement el);
}
internal class Microsoft.Reporting.Gauge.WebForms.LinearGaugeConverter : CollectionItemTypeConverter {
}
internal class Microsoft.Reporting.Gauge.WebForms.LinearLabelStyle : GaugeObject {
    private string formatStr;
    private bool visible;
    private Placement placement;
    private Font font;
    private FontUnit fontUnit;
    private float fontAngle;
    private Color textColor;
    private double interval;
    private double intervalOffset;
    private bool showEndLabels;
    private float scaleOffset;
    private string formatString;
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeVisible6")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributePlacement5")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Placement Placement { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFont3")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 14pt")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFontUnit")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FontUnit FontUnit { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFontAngle3")]
[ValidateBound("0", "360")]
[DefaultValueAttribute("0")]
public float FontAngle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeTextColor5")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeInterval")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleAutoValueConverter")]
[DefaultValueAttribute("не число")]
public double Interval { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeIntervalOffset3")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleAutoValueConverter")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("не число")]
public double IntervalOffset { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeShowEndLabels")]
[DefaultValueAttribute("True")]
public bool ShowEndLabels { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeDistanceFromScale5")]
[ValidateBound("-30", "30")]
[DefaultValueAttribute("2")]
public float DistanceFromScale { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFormatString3")]
[LocalizableAttribute("True")]
[EditorAttribute("Microsoft.Reporting.Gauge.WebForms.LabelFormatEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
public string FormatString { get; public set; }
    public LinearLabelStyle(object parent);
    protected LinearLabelStyle(object parent, Font font);
    public bool get_Visible();
    public void set_Visible(bool value);
    public Placement get_Placement();
    public void set_Placement(Placement value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public FontUnit get_FontUnit();
    public void set_FontUnit(FontUnit value);
    public float get_FontAngle();
    public void set_FontAngle(float value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public double get_Interval();
    public void set_Interval(double value);
    public double get_IntervalOffset();
    public void set_IntervalOffset(double value);
    public bool get_ShowEndLabels();
    public void set_ShowEndLabels(bool value);
    public float get_DistanceFromScale();
    public void set_DistanceFromScale(float value);
    public string get_FormatString();
    public void set_FormatString(string value);
    internal string GetFormatStr();
}
internal class Microsoft.Reporting.Gauge.WebForms.LinearMajorTickMark : TickMark {
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeShape3")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MarkerStyle Shape { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLength3")]
[NotifyParentPropertyAttribute("True")]
[ValidateBound("0", "50")]
[DefaultValueAttribute("15")]
public float Length { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeWidth7")]
[NotifyParentPropertyAttribute("True")]
[ValidateBound("0", "30")]
[DefaultValueAttribute("4")]
public float Width { get; public set; }
    public LinearMajorTickMark(object parent);
    public virtual MarkerStyle get_Shape();
    public virtual void set_Shape(MarkerStyle value);
    public virtual float get_Length();
    public virtual void set_Length(float value);
    public virtual float get_Width();
    public virtual void set_Width(float value);
}
internal class Microsoft.Reporting.Gauge.WebForms.LinearMinorTickMark : TickMark {
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeShape3")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MarkerStyle Shape { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLength3")]
[NotifyParentPropertyAttribute("True")]
[ValidateBound("0", "50")]
[DefaultValueAttribute("9")]
public float Length { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeWidth7")]
[NotifyParentPropertyAttribute("True")]
[ValidateBound("0", "30")]
[DefaultValueAttribute("3")]
public float Width { get; public set; }
    public LinearMinorTickMark(object parent);
    public virtual MarkerStyle get_Shape();
    public virtual void set_Shape(MarkerStyle value);
    public virtual float get_Length();
    public virtual void set_Length(float value);
    public virtual float get_Width();
    public virtual void set_Width(float value);
}
internal class Microsoft.Reporting.Gauge.WebForms.LinearPinLabel : GaugeObject {
    private string text;
    private Font font;
    private FontUnit fontUnit;
    private Color textColor;
    private Placement placement;
    private float fontAngle;
    private float scaleOffset;
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeText5")]
[LocalizableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFont4")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 12pt")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFontUnit")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FontUnit FontUnit { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeTextColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributePlacement3")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Placement Placement { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFontAngle")]
[ValidateBound("0", "360")]
[DefaultValueAttribute("0")]
public float FontAngle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeDistanceFromScale6")]
[ValidateBound("-30", "30")]
[DefaultValueAttribute("2")]
public float DistanceFromScale { get; public set; }
    public LinearPinLabel(object parent);
    public string get_Text();
    public void set_Text(string value);
    public Font get_Font();
    public void set_Font(Font value);
    public FontUnit get_FontUnit();
    public void set_FontUnit(FontUnit value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public Placement get_Placement();
    public void set_Placement(Placement value);
    public float get_FontAngle();
    public void set_FontAngle(float value);
    public float get_DistanceFromScale();
    public void set_DistanceFromScale(float value);
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.LinearPointerConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.LinearPointer : PointerBase {
    private LinearPointerType type;
    private Placement placement;
    private float thermometerBulbOffset;
    private float thermometerBulbSize;
    private Color thermometerBackColor;
    private GradientType thermometerBackGradientType;
    private Color thermometerBackGradientEndColor;
    private GaugeHatchStyle thermometerBackHatchStyle;
    private ThermometerStyle thermometerStyle;
    private bool selected;
    private GraphicsPath[] hotRegions;
    [SRCategoryAttribute("CategoryTypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_Type")]
[ParenthesizePropertyNameAttribute("True")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public LinearPointerType Type { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributePlacement")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Placement Placement { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeWidth")]
[ValidateBound("0", "100")]
[DefaultValueAttribute("20")]
public float Width { get; public set; }
    [SRCategoryAttribute("CategoryTypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeMarkerStyle4")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MarkerStyle MarkerStyle { get; public set; }
    [SRCategoryAttribute("CategoryTypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeMarkerLength4")]
[ValidateBound("0", "100")]
[DefaultValueAttribute("20")]
public float MarkerLength { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFillGradientType6")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType FillGradientType { get; public set; }
    [SRCategoryAttribute("CategoryTypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_ThermometerBulbOffset")]
[ValidateBound("0", "30")]
[DefaultValueAttribute("5")]
public float ThermometerBulbOffset { get; public set; }
    [SRCategoryAttribute("CategoryTypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_ThermometerBulbSize")]
[ValidateBound("0", "100")]
[DefaultValueAttribute("50")]
public float ThermometerBulbSize { get; public set; }
    [SRCategoryAttribute("CategoryTypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_ThermometerBackColor")]
[DefaultValueAttribute("System.Drawing.Color", "Empty")]
public Color ThermometerBackColor { get; public set; }
    [SRCategoryAttribute("CategoryTypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_ThermometerBackGradientType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType ThermometerBackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryTypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_ThermometerBackGradientEndColor")]
[DefaultValueAttribute("System.Drawing.Color", "Empty")]
public Color ThermometerBackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryTypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_ThermometerBackHatchStyle")]
[EditorAttribute("Microsoft.Reporting.Gauge.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeHatchStyle ThermometerBackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryTypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_ThermometerStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ThermometerStyle ThermometerStyle { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeCursor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeCursor Cursor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeDampeningEnabled3")]
[DefaultValueAttribute("False")]
public bool DampeningEnabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeSelected")]
[DefaultValueAttribute("False")]
public bool Selected { get; public set; }
    public LinearPointerType get_Type();
    public void set_Type(LinearPointerType value);
    public Placement get_Placement();
    public void set_Placement(Placement value);
    public virtual float get_Width();
    public virtual void set_Width(float value);
    public virtual MarkerStyle get_MarkerStyle();
    public virtual void set_MarkerStyle(MarkerStyle value);
    public virtual float get_MarkerLength();
    public virtual void set_MarkerLength(float value);
    public virtual GradientType get_FillGradientType();
    public virtual void set_FillGradientType(GradientType value);
    public float get_ThermometerBulbOffset();
    public void set_ThermometerBulbOffset(float value);
    public float get_ThermometerBulbSize();
    public void set_ThermometerBulbSize(float value);
    public Color get_ThermometerBackColor();
    public void set_ThermometerBackColor(Color value);
    public GradientType get_ThermometerBackGradientType();
    public void set_ThermometerBackGradientType(GradientType value);
    public Color get_ThermometerBackGradientEndColor();
    public void set_ThermometerBackGradientEndColor(Color value);
    public GaugeHatchStyle get_ThermometerBackHatchStyle();
    public void set_ThermometerBackHatchStyle(GaugeHatchStyle value);
    public ThermometerStyle get_ThermometerStyle();
    public void set_ThermometerStyle(ThermometerStyle value);
    public virtual GaugeCursor get_Cursor();
    public virtual void set_Cursor(GaugeCursor value);
    public virtual bool get_DampeningEnabled();
    public virtual void set_DampeningEnabled(bool value);
    public bool get_Selected();
    public void set_Selected(bool value);
    internal virtual void Render(GaugeGraphics g);
    internal BarStyleAttrib GetBarStyleAttrib(GaugeGraphics g);
    internal BarStyleAttrib GetThermometerStyleAttrib(GaugeGraphics g);
    private LinearRange[] GetColorRanges();
    private double GetBarStartValue();
    internal void DrawImage(GaugeGraphics g, bool drawShadow);
    internal MarkerStyleAttrib GetMarkerStyleAttrib(GaugeGraphics g);
    internal float CalculateMarkerDistance();
    internal GraphicsPath GetPointerPath(GaugeGraphics g);
    internal GraphicsPath GetShadowPath(GaugeGraphics g);
    internal void AddHotRegion(GraphicsPath path, bool primary);
    internal void SetAllHotRegions(GaugeGraphics g);
    public virtual string ToString();
    public LinearGauge GetGauge();
    public LinearScale GetScale();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.ISelectable.DrawSelection(GaugeGraphics g, bool designTimeSelection);
    public virtual object Clone();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.LinearPointerCollection : NamedCollection {
    private LinearPointer Item { get; private set; }
    private LinearPointer Item { get; private set; }
    public LinearPointer Item { get; public set; }
    internal LinearPointerCollection(NamedElement parent, CommonElements common);
    public LinearPointer Add(string name);
    public int Add(LinearPointer value);
    public void Remove(LinearPointer value);
    public bool Contains(LinearPointer value);
    public void Insert(int index, LinearPointer value);
    public int IndexOf(LinearPointer value);
    private LinearPointer get_Item(int index);
    private void set_Item(int index, LinearPointer value);
    private LinearPointer get_Item(string name);
    private void set_Item(string name, LinearPointer value);
    public LinearPointer get_Item(object obj);
    public void set_Item(object obj, LinearPointer value);
    internal virtual string GetElementNameFormat(NamedElement el);
}
internal class Microsoft.Reporting.Gauge.WebForms.LinearPointerConverter : CollectionItemTypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal enum Microsoft.Reporting.Gauge.WebForms.LinearPointerType : Enum {
    public int value__;
    public static LinearPointerType Marker;
    public static LinearPointerType Bar;
    public static LinearPointerType Thermometer;
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.LinearRangeConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.LinearRange : RangeBase {
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeStartValue")]
[DefaultValueAttribute("60")]
public double StartValue { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeEndValue3")]
[DefaultValueAttribute("100")]
public double EndValue { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeLinearRange_StartWidth")]
[ValidateBound("0", "100")]
[DefaultValueAttribute("10")]
public float StartWidth { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeLinearRange_EndWidth")]
[ValidateBound("0", "100")]
[DefaultValueAttribute("10")]
public float EndWidth { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributePlacement7")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Placement Placement { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeDistanceFromScale8")]
[ValidateBound("0", "100")]
[DefaultValueAttribute("10")]
public float DistanceFromScale { get; public set; }
    public virtual double get_StartValue();
    public virtual void set_StartValue(double value);
    public virtual double get_EndValue();
    public virtual void set_EndValue(double value);
    public virtual float get_StartWidth();
    public virtual void set_StartWidth(float value);
    public virtual float get_EndWidth();
    public virtual void set_EndWidth(float value);
    public virtual Placement get_Placement();
    public virtual void set_Placement(Placement value);
    public virtual float get_DistanceFromScale();
    public virtual void set_DistanceFromScale(float value);
    public virtual string ToString();
    public LinearGauge GetGauge();
    public LinearScale GetScale();
    internal virtual void Render(GaugeGraphics g);
    internal GraphicsPath GetPath(GaugeGraphics g, bool getShadowPath);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.ISelectable.DrawSelection(GaugeGraphics g, bool designTimeSelection);
    public virtual object Clone();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.LinearRangeCollection : NamedCollection {
    private LinearRange Item { get; private set; }
    private LinearRange Item { get; private set; }
    public LinearRange Item { get; public set; }
    internal LinearRangeCollection(NamedElement parent, CommonElements common);
    public LinearRange Add(string name);
    public int Add(LinearRange value);
    public void Remove(LinearRange value);
    public bool Contains(LinearRange value);
    public void Insert(int index, LinearRange value);
    public int IndexOf(LinearRange value);
    private LinearRange get_Item(int index);
    private void set_Item(int index, LinearRange value);
    private LinearRange get_Item(string name);
    private void set_Item(string name, LinearRange value);
    public LinearRange get_Item(object obj);
    public void set_Item(object obj, LinearRange value);
    internal virtual string GetElementNameFormat(NamedElement el);
}
internal class Microsoft.Reporting.Gauge.WebForms.LinearRangeConverter : CollectionItemTypeConverter {
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.LinearScaleConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.LinearScale : ScaleBase {
    private float position;
    [SRCategoryAttribute("CategoryLabelsAndTickMarks")]
[SRDescriptionAttribute("DescriptionAttributeLabelStyle")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public LinearLabelStyle LabelStyle { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_Position")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.FloatAutoValueConverter")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("50")]
[ValidateBound("5", "90")]
public float Position { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_StartMargin")]
[DefaultValueAttribute("8")]
[ValidateBound("0", "100")]
public float StartMargin { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_EndMargin")]
[DefaultValueAttribute("8")]
[ValidateBound("0", "100")]
public float EndMargin { get; public set; }
    [SRCategoryAttribute("CategoryLabelsAndTickMarks")]
[SRDescriptionAttribute("DescriptionAttributeMajorTickMarkInt")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public LinearMajorTickMark MajorTickMark { get; public set; }
    [SRCategoryAttribute("CategoryLabelsAndTickMarks")]
[SRDescriptionAttribute("DescriptionAttributeMinorTickMarkInt")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public LinearMinorTickMark MinorTickMark { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_Width")]
[ValidateBound("0", "30")]
[DefaultValueAttribute("5")]
public float Width { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeMinimumPin")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public LinearSpecialPosition MinimumPin { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeMaximumPin")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public LinearSpecialPosition MaximumPin { get; public set; }
    internal LinearGauge ParentGauge { get; }
    public LinearLabelStyle get_LabelStyle();
    public void set_LabelStyle(LinearLabelStyle value);
    public float get_Position();
    public void set_Position(float value);
    public float get_StartMargin();
    public void set_StartMargin(float value);
    public float get_EndMargin();
    public void set_EndMargin(float value);
    public LinearMajorTickMark get_MajorTickMark();
    public void set_MajorTickMark(LinearMajorTickMark value);
    public LinearMinorTickMark get_MinorTickMark();
    public void set_MinorTickMark(LinearMinorTickMark value);
    public virtual float get_Width();
    public virtual void set_Width(float value);
    public LinearSpecialPosition get_MinimumPin();
    public void set_MinimumPin(LinearSpecialPosition value);
    public LinearSpecialPosition get_MaximumPin();
    public void set_MaximumPin(LinearSpecialPosition value);
    private GraphicsPath GetBarPath(float barOffsetInside, float barOffsetOutside);
    private void SetScaleHitTestPath(GaugeGraphics g);
    internal GraphicsPath GetShadowPath();
    private void RenderBar(GaugeGraphics g);
    internal virtual void DrawTickMark(GaugeGraphics g, CustomTickMark tickMark, double value, float offset);
    internal virtual LinearLabelStyle GetLabelStyle();
    private void DrawLabel(Placement placement, string labelStr, double value, float labelPos, float rotateLabelAngle, Font font, Color color, FontUnit fontUnit);
    private void RenderLabels(GaugeGraphics g);
    internal virtual void DrawCustomLabel(CustomLabel label);
    internal virtual void DrawSpecialPosition(GaugeGraphics g, SpecialPosition label, float angle);
    internal void RenderStaticElements(GaugeGraphics g);
    internal void RenderDynamicElements(GaugeGraphics g);
    public virtual string ToString();
    public LinearGauge GetGauge();
    protected virtual bool IsReversed();
    protected virtual PointF GetPoint(float position, float offset);
    internal virtual double GetValue(PointF c, PointF p);
    internal LinearGauge get_ParentGauge();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.ISelectable.DrawSelection(GaugeGraphics g, bool designTimeSelection);
    public virtual object Clone();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.LinearScaleCollection : NamedCollection {
    private LinearScale Item { get; private set; }
    private LinearScale Item { get; private set; }
    public LinearScale Item { get; public set; }
    internal LinearScaleCollection(NamedElement parent, CommonElements common);
    public LinearScale Add(string name);
    public int Add(LinearScale value);
    public void Remove(LinearScale value);
    public bool Contains(LinearScale value);
    public void Insert(int index, LinearScale value);
    public int IndexOf(LinearScale value);
    private LinearScale get_Item(int index);
    private void set_Item(int index, LinearScale value);
    private LinearScale get_Item(string name);
    private void set_Item(string name, LinearScale value);
    public LinearScale get_Item(object obj);
    public void set_Item(object obj, LinearScale value);
    internal virtual string GetElementNameFormat(NamedElement el);
}
internal class Microsoft.Reporting.Gauge.WebForms.LinearScaleConverter : CollectionItemTypeConverter {
}
internal class Microsoft.Reporting.Gauge.WebForms.LinearSpecialPosition : SpecialPosition {
    private LinearPinLabel pinLinearLabel;
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLabelStyle3")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public LinearPinLabel LabelStyle { get; public set; }
    public LinearSpecialPosition(object parent);
    public LinearPinLabel get_LabelStyle();
    public void set_LabelStyle(LinearPinLabel value);
}
internal class Microsoft.Reporting.Gauge.WebForms.LocationConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[DefaultPropertyAttribute("ToolTip")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_MapArea")]
internal class Microsoft.Reporting.Gauge.WebForms.MapArea : object {
    private string toolTip;
    private string href;
    private string attributes;
    private Single[] coordinates;
    private string name;
    private bool custom;
    private MapAreaShape shape;
    private object imagMapProviderTag;
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_Custom")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
internal bool Custom { get; internal set; }
    [CategoryAttribute("Shape")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_Coordinates")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.MapAreaCoordinatesConverter")]
public Single[] Coordinates { get; public set; }
    [CategoryAttribute("Shape")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_Shape")]
[DefaultValueAttribute("Microsoft.Reporting.Gauge.WebForms.MapAreaShape", "Rectangle")]
public MapAreaShape Shape { get; public set; }
    [CategoryAttribute("Data")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_Name")]
[DefaultValueAttribute("Map Area")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    [CategoryAttribute("MapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_ToolTip")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [CategoryAttribute("MapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_Href")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[CategoryAttribute("MapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapAreaAttributes4")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    internal object Tag { get; internal set; }
    internal string GetTag();
    internal bool get_Custom();
    internal void set_Custom(bool value);
    public Single[] get_Coordinates();
    public void set_Coordinates(Single[] value);
    public MapAreaShape get_Shape();
    public void set_Shape(MapAreaShape value);
    public string get_Name();
    public void set_Name(string value);
    public sealed virtual void set_ToolTip(string value);
    public sealed virtual string get_ToolTip();
    public sealed virtual void set_Href(string value);
    public sealed virtual string get_Href();
    public sealed virtual void set_MapAreaAttributes(string value);
    public sealed virtual string get_MapAreaAttributes();
    internal void set_Tag(object value);
    internal object get_Tag();
}
[DefaultMemberAttribute("Item")]
[SRDescriptionAttribute("DescriptionAttributeMapAreaCollection_MapAreaCollection")]
internal class Microsoft.Reporting.Gauge.WebForms.MapAreaCollection : object {
    internal ArrayList array;
    public MapArea Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public MapArea get_Item(int index);
    public void set_Item(int index, MapArea value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual int Add(object value);
    public void Insert(int index, MapArea value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public int Add(string toolTip, string href, string attr, GraphicsPath path, object tag);
    public int Add(string toolTip, string href, string attr, GraphicsPath path);
    public int Add(string toolTip, string href, string attr, RectangleF rect);
    public int Add(MapAreaShape shape, string toolTip, string href, string attr, Single[] coordinates);
    public void Insert(int index, string toolTip, string href, string attr, GraphicsPath path);
    public void Insert(int index, string toolTip, string href, string attr, RectangleF rect);
    public void Insert(int index, MapAreaShape shape, string toolTip, string href, string attr, Single[] coordinates);
    public int Add(MapArea value);
    public void Remove(MapArea value);
    public bool Contains(MapArea value);
    public int IndexOf(MapArea value);
    internal void RemoveNonCustom();
}
internal class Microsoft.Reporting.Gauge.WebForms.MapAreaCoordinatesConverter : ArrayConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal enum Microsoft.Reporting.Gauge.WebForms.MapAreaShape : Enum {
    public int value__;
    public static MapAreaShape Rectangle;
    public static MapAreaShape Circle;
    public static MapAreaShape Polygon;
}
internal class Microsoft.Reporting.Gauge.WebForms.MarkerPosition : object {
    internal float position;
    internal double value;
    internal Placement placement;
    internal MarkerPosition(float position, double value, Placement placement);
    internal static bool IsExistsInArray(ArrayList array, MarkerPosition markerPos);
    internal static double Snap(ArrayList array, double value);
    public sealed virtual int CompareTo(object obj);
}
internal enum Microsoft.Reporting.Gauge.WebForms.MarkerStyle : Enum {
    public int value__;
    public static MarkerStyle None;
    public static MarkerStyle Rectangle;
    public static MarkerStyle Triangle;
    public static MarkerStyle Circle;
    public static MarkerStyle Diamond;
    public static MarkerStyle Trapezoid;
    public static MarkerStyle Star;
    public static MarkerStyle Wedge;
    public static MarkerStyle Pentagon;
}
internal class Microsoft.Reporting.Gauge.WebForms.MarkerStyleAttrib : object {
    public GraphicsPath path;
    public Brush brush;
    public void Dispose();
}
internal enum Microsoft.Reporting.Gauge.WebForms.MessageType : Enum {
    public int value__;
    public static MessageType NamedElementAdded;
    public static MessageType NamedElementRemove;
    public static MessageType NamedElementRename;
    public static MessageType DataInvalidated;
    public static MessageType PrepareSnapShot;
}
[ListBindableAttribute("False")]
internal abstract class Microsoft.Reporting.Gauge.WebForms.NamedCollection : CollectionBase {
    internal CommonElements common;
    internal Type elementType;
    internal NamedElement parent;
    internal bool editModeActive;
    private bool disposed;
    public NamedElement ParentElement { get; }
    internal CommonElements Common { get; internal set; }
    internal NamedCollection(NamedElement parent, CommonElements common);
    public NamedElement get_ParentElement();
    internal CommonElements get_Common();
    internal void set_Common(CommonElements value);
    public int GetIndex(string name);
    public NamedElement GetByName(string name);
    public NamedElement GetByIndex(int index);
    public virtual int IndexOf(object value);
    protected virtual void OnClear();
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    private void CheckForTypeDublicatesAndName(object value);
    internal virtual void IsValidNameCheck(string name, NamedElement element);
    internal virtual bool IsUniqueName(string name);
    internal string GenerateUniqueName(NamedElement element);
    internal NamedElement GetByNameCheck(string name);
    internal bool SetByName(string name, NamedElement element);
    internal void SetByNameCheck(string name, NamedElement element);
    internal virtual bool IsCorrectType(object value);
    internal virtual void BeginInit();
    internal virtual void EndInit();
    internal virtual void ReconnectData(bool exact);
    internal virtual string GetElementNameFormat(NamedElement el);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual void Invalidate();
    internal virtual string GetCollectionName();
    internal virtual void Notify(MessageType msg, NamedElement element, object param);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnDispose();
    public virtual object Clone();
}
internal class Microsoft.Reporting.Gauge.WebForms.NamedElement : object {
    private string name;
    internal CommonElements common;
    internal NamedCollection collection;
    internal bool initialized;
    private object tag;
    internal bool disposed;
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeCommon")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
internal CommonElements Common { get; internal set; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeCollection")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public NamedCollection Collection { get; public set; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeParentElement")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public NamedElement ParentElement { get; }
    internal string DefaultName { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeName10")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public object Tag { get; public set; }
    protected NamedElement(string name);
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
    public virtual NamedCollection get_Collection();
    public virtual void set_Collection(NamedCollection value);
    public virtual NamedElement get_ParentElement();
    internal virtual string get_DefaultName();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual object get_Tag();
    public virtual void set_Tag(object value);
    internal virtual void OnRemove();
    internal virtual void OnAdded();
    internal virtual void OnNameChanged();
    internal virtual void BeginInit();
    internal virtual void EndInit();
    internal virtual void Invalidate();
    internal virtual void Refresh();
    internal virtual void ReconnectData(bool exact);
    internal virtual void Notify(MessageType msg, NamedElement element, object param);
    internal string GetNameAsParent();
    internal string GetNameAsParent(string newName);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnDispose();
    public virtual object Clone();
    internal virtual object InitiateCopy();
    internal virtual object CloneInternals(object copy);
}
[SRDescriptionAttribute("DescriptionAttributeNamedImage_NamedImage")]
[DefaultPropertyAttribute("Name")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NamedImageConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.NamedImage : NamedElement {
    private Image image;
    [SRDescriptionAttribute("DescriptionAttributeNamedImage_Image")]
public Image Image { get; public set; }
    public NamedImage(string name, Image image);
    public Image get_Image();
    public void set_Image(Image value);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.NamedImageCollection : NamedCollection {
    private NamedImage Item { get; private set; }
    private NamedImage Item { get; private set; }
    public NamedImage Item { get; public set; }
    internal NamedImageCollection(NamedElement parent, CommonElements common);
    public int Add(NamedImage value);
    public void Remove(NamedImage value);
    public bool Contains(NamedImage value);
    public void Insert(int index, NamedImage value);
    public int IndexOf(NamedImage value);
    private NamedImage get_Item(int index);
    private void set_Item(int index, NamedImage value);
    private NamedImage get_Item(string name);
    private void set_Item(string name, NamedImage value);
    public NamedImage get_Item(object obj);
    public void set_Item(object obj, NamedImage value);
    internal virtual string GetElementNameFormat(NamedElement el);
    internal virtual string GetDefaultElementName(NamedElement el);
}
internal class Microsoft.Reporting.Gauge.WebForms.NamedImageConverter : CollectionItemTypeConverter {
}
internal enum Microsoft.Reporting.Gauge.WebForms.NeedleStyle : Enum {
    public int value__;
    public static NeedleStyle Style1;
    public static NeedleStyle Style2;
    public static NeedleStyle Style3;
    public static NeedleStyle Style4;
    public static NeedleStyle Style5;
    public static NeedleStyle Style6;
    public static NeedleStyle Style7;
    public static NeedleStyle Style8;
    public static NeedleStyle Style9;
    public static NeedleStyle Style10;
    public static NeedleStyle Style11;
}
internal class Microsoft.Reporting.Gauge.WebForms.NeedleStyleAttrib : object {
    public GraphicsPath primaryPath;
    public GraphicsPath secondaryPath;
    public Brush primaryBrush;
    public Brush secondaryBrush;
    public GraphicsPath[] reflectionPaths;
    public Brush[] reflectionBrushes;
    public void Dispose();
}
internal class Microsoft.Reporting.Gauge.WebForms.NoNameExpandableObjectConverter : ExpandableObjectConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NumericIndicatorConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.NumericIndicator : NamedElement {
    private double numberPosition;
    private DataAttributes data;
    private bool refreshPending;
    private double pendingNumberPosition;
    private SegmentsCache segmentsCache;
    private NumericRangeCollection ranges;
    private NamedElement parentSystem;
    private string parent;
    private int zOrder;
    private string toolTip;
    private string href;
    private string mapAreaAttributes;
    private NumericIndicatorStyle style;
    private int digits;
    private int decimals;
    private FontUnit fontUnit;
    private ResizeMode resizeMode;
    private float shadowOffset;
    private string formatString;
    private bool showDecimal;
    private bool showLeadingZeros;
    private float refreshRate;
    private string offString;
    private string outOfRangeString;
    private ShowSign showSign;
    private double minimum;
    private double maximum;
    private double multiplier;
    private bool snappingEnabled;
    private double snappingInterval;
    private bool dampeningEnabled;
    private double dampeningSweepTime;
    private GaugeLocation location;
    private GaugeSize size;
    private bool visible;
    private Font font;
    private Color borderColor;
    private GaugeDashStyle borderStyle;
    private int borderWidth;
    private Color separatorColor;
    private float separatorWidth;
    private Color backColor;
    private GradientType backGradientType;
    private Color backGradientEndColor;
    private GaugeHatchStyle backHatchStyle;
    private Color digitColor;
    private Color decimalColor;
    private Color ledDimColor;
    private bool selected;
    private bool defaultParent;
    private object imageMapProviderTag;
    [DesignerSerializationVisibilityAttribute("2")]
public NumericRangeCollection Ranges { get; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeParentObject3")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public NamedElement ParentObject { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_Parent")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.ParentSourceConverter")]
[NotifyParentPropertyAttribute("True")]
public string Parent { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_ZOrder")]
[DefaultValueAttribute("0")]
public int ZOrder { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_ToolTip")]
[LocalizableAttribute("True")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_Href")]
[LocalizableAttribute("True")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryMisc")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryStyleSpecific")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_Style")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SerializationVisibilityAttribute("0")]
[ObsoleteAttribute("This property is obsolete in Dundas Gauge 2.0. IndicatorStyle is supposed to be used instead.")]
public NumericIndicatorStyle Style { get; public set; }
    [SRCategoryAttribute("CategoryStyleSpecific")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_Style")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public NumericIndicatorStyle IndicatorStyle { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_Digits")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("6")]
public int Digits { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_Decimals")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("1")]
public int Decimals { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_FontUnit")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FontUnit FontUnit { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeResizeMode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ResizeMode ResizeMode { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeShadowOffset")]
[ValidateBound("-5", "5")]
[DefaultValueAttribute("0")]
public float ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_FormatString")]
[LocalizableAttribute("True")]
[EditorAttribute("Microsoft.Reporting.Gauge.WebForms.LabelFormatEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
public string FormatString { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_ShowDecimalPoint")]
[DefaultValueAttribute("False")]
public bool ShowDecimalPoint { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_ShowLeadingZeros")]
[DefaultValueAttribute("True")]
public bool ShowLeadingZeros { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_RefreshRate")]
[DefaultValueAttribute("10")]
public float RefreshRate { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_OffString")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("-")]
public string OffString { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_OutOfRangeString")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Error")]
public string OutOfRangeString { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_ShowSign")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ShowSign ShowSign { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_Minimum")]
[DoubleConverterHint("-∞")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleInfinityConverter")]
[DefaultValueAttribute("-∞")]
public double Minimum { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_Maximum")]
[DoubleConverterHint("∞")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleInfinityConverter")]
[DefaultValueAttribute("∞")]
public double Maximum { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_Multiplier")]
[DefaultValueAttribute("1")]
public double Multiplier { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_SnappingEnabled")]
[DefaultValueAttribute("False")]
public bool SnappingEnabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_SnappingInterval")]
[DefaultValueAttribute("0")]
public double SnappingInterval { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_DampeningEnabled")]
[DefaultValueAttribute("False")]
public bool DampeningEnabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeDampeningSweepTime")]
[DefaultValueAttribute("1")]
public double DampeningSweepTime { get; public set; }
    [SRCategoryAttribute("CategoryPosition")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_Location")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.LocationConverter")]
[DesignerSerializationVisibilityAttribute("2")]
[ValidateBound("100", "100")]
public GaugeLocation Location { get; public set; }
    [SRCategoryAttribute("CategoryPosition")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_Size")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.SizeConverter")]
[DesignerSerializationVisibilityAttribute("2")]
[ValidateBound("100", "100")]
public GaugeSize Size { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_Visible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_Font")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8.25pt")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_BorderColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "DimGray")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_BorderStyle")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_BorderWidth")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryStyleSpecific")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_SeparatorColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "DimGray")]
public Color SeparatorColor { get; public set; }
    [SRCategoryAttribute("CategoryStyleSpecific")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_SeparatorWidth")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("1")]
public float SeparatorWidth { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_BackColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "DimGray")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_BackGradientType")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_BackGradientEndColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
public Color BackGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_BackHatchStyle")]
[EditorAttribute("Microsoft.Reporting.Gauge.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_DigitColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "SteelBlue")]
public Color DigitColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_DecimalColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Firebrick")]
public Color DecimalColor { get; public set; }
    [SRCategoryAttribute("CategoryStyleSpecific")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_LedDimColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Empty")]
public Color LedDimColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryData")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_Value")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("не число")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleNanValueConverter")]
public double Value { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryData")]
[SRDescriptionAttribute("DescriptionAttributeValueSource")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.ValueSourceConverter")]
[RefreshPropertiesAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
public string ValueSource { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeNumericIndicator_Selected")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
public bool Selected { get; public set; }
    internal Position Position { get; }
    internal double NumberPosition { get; internal set; }
    internal CommonElements Common { get; internal set; }
    internal DataAttributes Data { get; }
    internal bool DefaultParent { get; internal set; }
    private object Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.Tag { get; private set; }
    private double Microsoft.Reporting.Gauge.WebForms.IPointerProvider.Position { get; private set; }
    public NumericRangeCollection get_Ranges();
    public NamedElement get_ParentObject();
    public string get_Parent();
    public void set_Parent(string value);
    public int get_ZOrder();
    public void set_ZOrder(int value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public string get_Href();
    public sealed virtual void set_Href(string value);
    public string get_MapAreaAttributes();
    public void set_MapAreaAttributes(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public NumericIndicatorStyle get_Style();
    public void set_Style(NumericIndicatorStyle value);
    protected bool ShouldSerializeStyle();
    public NumericIndicatorStyle get_IndicatorStyle();
    public void set_IndicatorStyle(NumericIndicatorStyle value);
    public int get_Digits();
    public void set_Digits(int value);
    public int get_Decimals();
    public void set_Decimals(int value);
    public FontUnit get_FontUnit();
    public void set_FontUnit(FontUnit value);
    public ResizeMode get_ResizeMode();
    public void set_ResizeMode(ResizeMode value);
    public float get_ShadowOffset();
    public void set_ShadowOffset(float value);
    public string get_FormatString();
    public void set_FormatString(string value);
    public bool get_ShowDecimalPoint();
    public void set_ShowDecimalPoint(bool value);
    public bool get_ShowLeadingZeros();
    public void set_ShowLeadingZeros(bool value);
    public float get_RefreshRate();
    public void set_RefreshRate(float value);
    public string get_OffString();
    public void set_OffString(string value);
    public string get_OutOfRangeString();
    public void set_OutOfRangeString(string value);
    public ShowSign get_ShowSign();
    public void set_ShowSign(ShowSign value);
    public double get_Minimum();
    public void set_Minimum(double value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public double get_Multiplier();
    public void set_Multiplier(double value);
    public bool get_SnappingEnabled();
    public void set_SnappingEnabled(bool value);
    public double get_SnappingInterval();
    public void set_SnappingInterval(double value);
    public bool get_DampeningEnabled();
    public void set_DampeningEnabled(bool value);
    public double get_DampeningSweepTime();
    public void set_DampeningSweepTime(double value);
    public GaugeLocation get_Location();
    public void set_Location(GaugeLocation value);
    public GaugeSize get_Size();
    public void set_Size(GaugeSize value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public GaugeDashStyle get_BorderStyle();
    public void set_BorderStyle(GaugeDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public Color get_SeparatorColor();
    public void set_SeparatorColor(Color value);
    public float get_SeparatorWidth();
    public void set_SeparatorWidth(float value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public GradientType get_BackGradientType();
    public void set_BackGradientType(GradientType value);
    public Color get_BackGradientEndColor();
    public void set_BackGradientEndColor(Color value);
    public GaugeHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(GaugeHatchStyle value);
    public Color get_DigitColor();
    public void set_DigitColor(Color value);
    public Color get_DecimalColor();
    public void set_DecimalColor(Color value);
    public Color get_LedDimColor();
    public void set_LedDimColor(Color value);
    public double get_Value();
    public void set_Value(double value);
    public string get_ValueSource();
    public void set_ValueSource(string value);
    public bool get_Selected();
    public void set_Selected(bool value);
    internal Position get_Position();
    internal double get_NumberPosition();
    internal void set_NumberPosition(double value);
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
    internal DataAttributes get_Data();
    internal bool get_DefaultParent();
    internal void set_DefaultParent(bool value);
    public virtual string ToString();
    private Color GetRangeColor(Color color, bool decimalColor);
    private Brush GetFontBrush(GaugeGraphics g, Color color);
    private double GetNumber();
    private double GetNumber(double number);
    private string GetDefaultFormat();
    private string GetLabel(Boolean& digitsPrinted);
    private void DrawSymbol(GaugeGraphics g, string symbol, RectangleF rect, Font font, Brush brush, StringFormat format, bool decDot, bool comma);
    private void DrawSeparator(GaugeGraphics g, Brush brush, float digitsCount, float rectPosition, RectangleF gaugeRect, float separatorWidth);
    private bool IsStandardFormat();
    private void RenderIndicator(GaugeGraphics g);
    private void RenderBackground(GaugeGraphics g);
    private void ConnectToParent(bool exact);
    internal virtual void Notify(MessageType msg, NamedElement element, object param);
    internal virtual void OnAdded();
    internal virtual void BeginInit();
    internal virtual void EndInit();
    internal virtual void ReconnectData(bool exact);
    protected virtual void OnDispose();
    internal virtual void Invalidate();
    internal virtual void PointerValueChanged();
    private void refreshTimer_Elapsed(object source, ElapsedEventArgs e);
    private void RefreshIndicator();
    private double GetSnapValue(double value);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IRenderable.RenderStaticElements(GaugeGraphics g);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IRenderable.RenderDynamicElements(GaugeGraphics g);
    private sealed virtual override int Microsoft.Reporting.Gauge.WebForms.IRenderable.GetZOrder();
    private sealed virtual override RectangleF Microsoft.Reporting.Gauge.WebForms.IRenderable.GetBoundRect(GaugeGraphics g);
    private sealed virtual override object Microsoft.Reporting.Gauge.WebForms.IRenderable.GetParentRenderable();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IRenderable.GetParentRenderableName();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IToolTipProvider.GetToolTip(HitTestResult ht);
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetHref();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetMapAreaAttributes();
    private sealed virtual override object Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.set_Tag(object value);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IPointerProvider.DataValueChanged(bool initialize);
    private sealed virtual override double Microsoft.Reporting.Gauge.WebForms.IPointerProvider.get_Position();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IPointerProvider.set_Position(double value);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.ISelectable.DrawSelection(GaugeGraphics g, bool designTimeSelection);
    public virtual object Clone();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.NumericIndicatorCollection : NamedCollection {
    private NumericIndicator Item { get; private set; }
    private NumericIndicator Item { get; private set; }
    public NumericIndicator Item { get; public set; }
    internal NumericIndicatorCollection(NamedElement parent, CommonElements common);
    public NumericIndicator Add(string name);
    public int Add(NumericIndicator value);
    public void Remove(NumericIndicator value);
    public bool Contains(NumericIndicator value);
    public void Insert(int index, NumericIndicator value);
    public int IndexOf(NumericIndicator value);
    private NumericIndicator get_Item(int index);
    private void set_Item(int index, NumericIndicator value);
    private NumericIndicator get_Item(string name);
    private void set_Item(string name, NumericIndicator value);
    public NumericIndicator get_Item(object obj);
    public void set_Item(object obj, NumericIndicator value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    protected virtual void OnInsertComplete(int index, object value);
}
internal class Microsoft.Reporting.Gauge.WebForms.NumericIndicatorConverter : CollectionItemTypeConverter {
}
internal enum Microsoft.Reporting.Gauge.WebForms.NumericIndicatorStyle : Enum {
    public int value__;
    public static NumericIndicatorStyle Digital7Segment;
    public static NumericIndicatorStyle Digital14Segment;
    public static NumericIndicatorStyle Mechanical;
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NumericRangeConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.NumericRange : Range {
    private static double DEFAULT_START_VALUE;
    private static double DEFAULT_END_VALUE;
    private Color digitColor;
    private Color decimalColor;
    [SRCategoryAttribute("CategoryMisc")]
[SRDescriptionAttribute("DescriptionAttributeName13")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeStartValue")]
[DefaultValueAttribute("7000")]
public double StartValue { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeEndValue3")]
[DefaultValueAttribute("10000")]
public double EndValue { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeNumericRange_DigitColor")]
[DefaultValueAttribute("System.Drawing.Color", "Red")]
public Color DigitColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeNumericRange_DecimalColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Red")]
public Color DecimalColor { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeInRangeTimeout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("0")]
public double InRangeTimeout { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeInRangeTimeoutType")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public PeriodType InRangeTimeoutType { get; public set; }
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual double get_StartValue();
    public virtual void set_StartValue(double value);
    public virtual double get_EndValue();
    public virtual void set_EndValue(double value);
    public Color get_DigitColor();
    public void set_DigitColor(Color value);
    public Color get_DecimalColor();
    public void set_DecimalColor(Color value);
    public virtual double get_InRangeTimeout();
    public virtual void set_InRangeTimeout(double value);
    public virtual PeriodType get_InRangeTimeoutType();
    public virtual void set_InRangeTimeoutType(PeriodType value);
    public virtual string ToString();
    internal virtual void OnAdded();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.NumericRangeCollection : NamedCollection {
    private NumericRange Item { get; private set; }
    private NumericRange Item { get; private set; }
    public NumericRange Item { get; public set; }
    internal NumericRangeCollection(NamedElement parent, CommonElements common);
    public NumericRange Add(string name);
    public int Add(NumericRange value);
    public void Remove(NumericRange value);
    public bool Contains(NumericRange value);
    public void Insert(int index, NumericRange value);
    public int IndexOf(NumericRange value);
    private NumericRange get_Item(int index);
    private void set_Item(int index, NumericRange value);
    private NumericRange get_Item(string name);
    private void set_Item(string name, NumericRange value);
    public NumericRange get_Item(object obj);
    public void set_Item(object obj, NumericRange value);
    internal virtual string GetElementNameFormat(NamedElement el);
}
internal class Microsoft.Reporting.Gauge.WebForms.NumericRangeConverter : CollectionItemTypeConverter {
}
internal class Microsoft.Reporting.Gauge.WebForms.ObjectLinker : GaugeObject {
    private bool invalidated;
    private Hashtable elements;
    private Hashtable Elements { get; }
    internal ObjectLinker(object parent);
    private Hashtable get_Elements();
    internal virtual void Invalidate();
    private Hashtable CollectValues();
    internal ArrayList GetObjectNames(object thisObject);
    internal NamedElement GetElement(string name);
    internal bool IsParentElementValid(IRenderable r, object startObject, bool raiseException);
}
internal class Microsoft.Reporting.Gauge.WebForms.ParentSourceConverter : StringConverter {
    internal static string parentNone;
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal enum Microsoft.Reporting.Gauge.WebForms.PeriodType : Enum {
    public int value__;
    public static PeriodType Milliseconds;
    public static PeriodType Seconds;
    public static PeriodType Minutes;
    public static PeriodType Hours;
    public static PeriodType Days;
}
internal class Microsoft.Reporting.Gauge.WebForms.PinMajorTickMark : CustomTickMark {
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeShape3")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MarkerStyle Shape { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLength3")]
[NotifyParentPropertyAttribute("True")]
[ValidateBound("0", "50")]
[DefaultValueAttribute("6")]
public float Length { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeWidth7")]
[NotifyParentPropertyAttribute("True")]
[ValidateBound("0", "30")]
[DefaultValueAttribute("6")]
public float Width { get; public set; }
    public PinMajorTickMark(object parent);
    public PinMajorTickMark(object parent, MarkerStyle shape, float length, float width);
    public virtual MarkerStyle get_Shape();
    public virtual void set_Shape(MarkerStyle value);
    public virtual float get_Length();
    public virtual void set_Length(float value);
    public virtual float get_Width();
    public virtual void set_Width(float value);
}
internal enum Microsoft.Reporting.Gauge.WebForms.PinPointPosition : Enum {
    public int value__;
    public static PinPointPosition TopLeft;
    public static PinPointPosition TopCenter;
    public static PinPointPosition Center;
    public static PinPointPosition TopRight;
    public static PinPointPosition CenterLeft;
    public static PinPointPosition CenterRight;
    public static PinPointPosition BottomLeft;
    public static PinPointPosition BottomCenter;
    public static PinPointPosition BottomRight;
}
internal enum Microsoft.Reporting.Gauge.WebForms.Placement : Enum {
    public int value__;
    public static Placement Inside;
    public static Placement Outside;
    public static Placement Cross;
}
internal enum Microsoft.Reporting.Gauge.WebForms.PlaybackState : Enum {
    public int value__;
    public static PlaybackState Started;
    public static PlaybackState Stopped;
    public static PlaybackState Paused;
    public static PlaybackState Resumed;
    public static PlaybackState Complete;
}
internal class Microsoft.Reporting.Gauge.WebForms.PlaybackStateChangedEventArgs : EventArgs {
    private double value;
    private DateTime date;
    private PlaybackState playbackState;
    private string senderName;
    public PlaybackStateChangedEventArgs(PlaybackState playbackState, double value, DateTime date, string senderName);
}
internal class Microsoft.Reporting.Gauge.WebForms.PointerBase : NamedElement {
    private double position;
    private DataAttributes data;
    internal bool dragging;
    private string scaleName;
    private float distanceFromScale;
    private string image;
    private Color imageTransColor;
    private float imageTransparency;
    private Color imageHueColor;
    private Point imageOrigin;
    private bool snappingEnabled;
    private double snappingInterval;
    private bool dampeningEnabled;
    private double dampeningSweepTime;
    private string toolTip;
    private string href;
    private string mapAreaAttributes;
    private bool interactive;
    private bool visible;
    private BarStyle barStyle;
    private BarStart barStart;
    private float shadowOffset;
    private Color borderColor;
    private GaugeDashStyle borderStyle;
    private int borderWidth;
    private Color fillColor;
    private Color fillGradientEndColor;
    private GaugeHatchStyle fillHatchStyle;
    private GradientType fillGradientType;
    private MarkerStyle markerStyle;
    private float markerLength;
    private float width;
    private GaugeCursor cursor;
    private object imageMapProviderTag;
    [SRCategoryAttribute("CategoryMisc")]
[SRDescriptionAttribute("DescriptionAttributeName9")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryMisc")]
[SRDescriptionAttribute("DescriptionAttributeScaleName4")]
[DefaultValueAttribute("Default")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.ScaleSourceConverter")]
public string ScaleName { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeDistanceFromScale3")]
[ValidateBound("0", "100")]
[DefaultValueAttribute("0")]
public float DistanceFromScale { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeImage7")]
[DefaultValueAttribute("")]
public string Image { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeImageTransColor5")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageTransColor { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeImageTransparency5")]
[DefaultValueAttribute("System.Single", "0")]
public float ImageTransparency { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeImageHueColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageHueColor { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeCircularPointer_CapImageOrigin")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.EmptyPointConverter")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
public Point ImageOrigin { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryData")]
[SRDescriptionAttribute("DescriptionAttributeValue6")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("не число")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleNanValueConverter")]
public double Value { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryData")]
[SRDescriptionAttribute("DescriptionAttributeValueSource")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.ValueSourceConverter")]
[RefreshPropertiesAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
public string ValueSource { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeSnappingEnabled4")]
[DefaultValueAttribute("False")]
public bool SnappingEnabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeSnappingInterval")]
[DefaultValueAttribute("0")]
public double SnappingInterval { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeDampeningEnabled3")]
[DefaultValueAttribute("False")]
public bool DampeningEnabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeDampeningSweepTime")]
[DefaultValueAttribute("1")]
public double DampeningSweepTime { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeToolTip5")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeHref10")]
[LocalizableAttribute("True")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeMapAreaAttributes4")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeInteractive3")]
[DefaultValueAttribute("False")]
public bool Interactive { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeVisible7")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryTypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeBarStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
internal BarStyle BarStyle { get; internal set; }
    [SRCategoryAttribute("CategoryTypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeBarStart")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public BarStart BarStart { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeShadowOffset")]
[ValidateBound("-5", "5")]
[DefaultValueAttribute("2")]
public float ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor5")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderStyle3")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderWidth9")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFillColor3")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
public Color FillColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFillGradientEndColor")]
[DefaultValueAttribute("System.Drawing.Color", "Red")]
public Color FillGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFillHatchStyle3")]
[EditorAttribute("Microsoft.Reporting.Gauge.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeHatchStyle FillHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFillGradientType6")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType FillGradientType { get; public set; }
    [SRCategoryAttribute("CategoryTypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributePointerBase_MarkerStyle")]
public MarkerStyle MarkerStyle { get; public set; }
    [SRCategoryAttribute("CategoryTypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributePointerBase_MarkerLength")]
public float MarkerLength { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributePointerBase_Width")]
public float Width { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeCursor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeCursor Cursor { get; public set; }
    internal double Position { get; internal set; }
    internal CommonElements Common { get; internal set; }
    internal DataAttributes Data { get; }
    private object Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.Tag { get; private set; }
    private double Microsoft.Reporting.Gauge.WebForms.IPointerProvider.Position { get; private set; }
    protected PointerBase(MarkerStyle markerStyle, float markerLength, float width, GradientType fillGradientType);
    protected PointerBase(MarkerStyle markerStyle, float markerLength, float width, GradientType fillGradientType, Color fillColor, Color fillGradientEndColor, bool interactive);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_ScaleName();
    public virtual void set_ScaleName(string value);
    public virtual float get_DistanceFromScale();
    public virtual void set_DistanceFromScale(float value);
    public virtual string get_Image();
    public virtual void set_Image(string value);
    public virtual Color get_ImageTransColor();
    public virtual void set_ImageTransColor(Color value);
    public virtual float get_ImageTransparency();
    public virtual void set_ImageTransparency(float value);
    public virtual Color get_ImageHueColor();
    public virtual void set_ImageHueColor(Color value);
    public virtual Point get_ImageOrigin();
    public virtual void set_ImageOrigin(Point value);
    public virtual double get_Value();
    public virtual void set_Value(double value);
    public virtual string get_ValueSource();
    public virtual void set_ValueSource(string value);
    public virtual bool get_SnappingEnabled();
    public virtual void set_SnappingEnabled(bool value);
    public double get_SnappingInterval();
    public void set_SnappingInterval(double value);
    public virtual bool get_DampeningEnabled();
    public virtual void set_DampeningEnabled(bool value);
    public double get_DampeningSweepTime();
    public void set_DampeningSweepTime(double value);
    public virtual string get_ToolTip();
    public virtual void set_ToolTip(string value);
    public string get_Href();
    public sealed virtual void set_Href(string value);
    public string get_MapAreaAttributes();
    public void set_MapAreaAttributes(string value);
    public virtual bool get_Interactive();
    public virtual void set_Interactive(bool value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    internal BarStyle get_BarStyle();
    internal void set_BarStyle(BarStyle value);
    public virtual BarStart get_BarStart();
    public virtual void set_BarStart(BarStart value);
    public float get_ShadowOffset();
    public void set_ShadowOffset(float value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public GaugeDashStyle get_BorderStyle();
    public void set_BorderStyle(GaugeDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_FillGradientEndColor();
    public virtual void set_FillGradientEndColor(Color value);
    public virtual GaugeHatchStyle get_FillHatchStyle();
    public virtual void set_FillHatchStyle(GaugeHatchStyle value);
    public virtual GradientType get_FillGradientType();
    public virtual void set_FillGradientType(GradientType value);
    public virtual MarkerStyle get_MarkerStyle();
    public virtual void set_MarkerStyle(MarkerStyle value);
    public virtual float get_MarkerLength();
    public virtual void set_MarkerLength(float value);
    public virtual float get_Width();
    public virtual void set_Width(float value);
    public virtual GaugeCursor get_Cursor();
    public virtual void set_Cursor(GaugeCursor value);
    internal double get_Position();
    internal void set_Position(double value);
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
    internal DataAttributes get_Data();
    internal virtual void DragTo(int x, int y, PointF refPoint);
    internal virtual void Render(GaugeGraphics g);
    internal virtual void RenderShadow(GaugeGraphics g);
    internal GaugeBase GetGaugeBase();
    internal ScaleBase GetScaleBase();
    internal virtual void BeginInit();
    internal virtual void EndInit();
    internal virtual void OnAdded();
    internal virtual void ReconnectData(bool exact);
    protected virtual void OnDispose();
    internal virtual void Notify(MessageType msg, NamedElement element, object param);
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IToolTipProvider.GetToolTip(HitTestResult ht);
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetHref();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetMapAreaAttributes();
    private sealed virtual override object Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.set_Tag(object value);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IPointerProvider.DataValueChanged(bool initialize);
    private sealed virtual override double Microsoft.Reporting.Gauge.WebForms.IPointerProvider.get_Position();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IPointerProvider.set_Position(double value);
}
internal class Microsoft.Reporting.Gauge.WebForms.PointerPositionChangeEventArgs : ValueChangedEventArgs {
    private bool accept;
    public bool Accept { get; }
    public PointerPositionChangeEventArgs(double value, DateTime date, string senderName, bool playbackMode);
    public bool get_Accept();
}
internal class Microsoft.Reporting.Gauge.WebForms.PointerPositionChangeEventHandler : MulticastDelegate {
    public PointerPositionChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PointerPositionChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PointerPositionChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.Gauge.WebForms.Position : object {
    private GaugeLocation location;
    private GaugeSize size;
    private ContentAlignment locationAlignment;
    public bool DefaultValues { get; }
    internal RectangleF Rectangle { get; }
    public Position(GaugeLocation location, GaugeSize size, ContentAlignment locationAlignment);
    public bool get_DefaultValues();
    internal RectangleF get_Rectangle();
}
internal class Microsoft.Reporting.Gauge.WebForms.Range : NamedElement {
    private Hashtable inRangeTable;
    private double startValue;
    private double endValue;
    private double inRangeTimeout;
    private PeriodType inRangeTimeoutType;
    public double StartValue { get; public set; }
    public double EndValue { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("0")]
public double InRangeTimeout { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public PeriodType InRangeTimeoutType { get; public set; }
    protected Range(double start, double end);
    public virtual double get_StartValue();
    public virtual void set_StartValue(double value);
    public virtual double get_EndValue();
    public virtual void set_EndValue(double value);
    public virtual double get_InRangeTimeout();
    public virtual void set_InRangeTimeout(double value);
    public virtual PeriodType get_InRangeTimeoutType();
    public virtual void set_InRangeTimeoutType(PeriodType value);
    internal RangeDataState GetDataState(DataAttributes data);
    private void InvalidateState();
    internal virtual void OnValueRangeTimeOut(object sender, ValueRangeEventArgs e);
    internal virtual void OnValueRangeEnter(object sender, ValueRangeEventArgs e);
    internal virtual void OnValueRangeLeave(object sender, ValueRangeEventArgs e);
    internal virtual void PointerValueChanged(DataAttributes data);
    internal virtual void Notify(MessageType msg, NamedElement element, object param);
    protected virtual void OnDispose();
}
internal abstract class Microsoft.Reporting.Gauge.WebForms.RangeBase : Range {
    private Placement placement;
    private float distanceFromScale;
    private string scaleName;
    private Color inRangeTickMarkColor;
    private Color inRangeLabelColor;
    private Color inRangeBarPointerColor;
    private string toolTip;
    private string href;
    private string mapAreaAttributes;
    private bool visible;
    private Color borderColor;
    private float shadowOffset;
    private GaugeDashStyle borderStyle;
    private int borderWidth;
    private Color fillColor;
    private RangeGradientType fillGradientType;
    private Color fillGradientEndColor;
    private GaugeHatchStyle fillHatchStyle;
    private bool selected;
    private float startWidth;
    private float endWidth;
    private object imageMapProviderTag;
    [SRCategoryAttribute("CategoryMisc")]
[SRDescriptionAttribute("DescriptionAttributeName13")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeRangeBase_Placement")]
public Placement Placement { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeRangeBase_DistanceFromScale")]
[ValidateBound("0", "100")]
[DefaultValueAttribute("10")]
public float DistanceFromScale { get; public set; }
    [SRCategoryAttribute("CategoryMisc")]
[SRDescriptionAttribute("DescriptionAttributeScaleName3")]
[DefaultValueAttribute("Default")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.ScaleSourceConverter")]
public string ScaleName { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeInRangeTickMarkColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color InRangeTickMarkColor { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeInRangeLabelColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color InRangeLabelColor { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeInRangeBarPointerColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color InRangeBarPointerColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeToolTip9")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeHref8")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeMapAreaAttributes4")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeVisible9")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor4")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeShadowOffset4")]
[ValidateBound("-5", "5")]
[DefaultValueAttribute("0")]
public float ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderStyle8")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderWidth5")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFillColor8")]
[DefaultValueAttribute("System.Drawing.Color", "Lime")]
public Color FillColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFillGradientType5")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public RangeGradientType FillGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFillGradientEndColor5")]
[DefaultValueAttribute("System.Drawing.Color", "Red")]
public Color FillGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFillHatchStyle7")]
[EditorAttribute("Microsoft.Reporting.Gauge.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeHatchStyle FillHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeInRangeTimeout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("0")]
public double InRangeTimeout { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeInRangeTimeoutType")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public PeriodType InRangeTimeoutType { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeSelected4")]
[DefaultValueAttribute("False")]
public bool Selected { get; public set; }
    public float StartWidth { get; public set; }
    public float EndWidth { get; public set; }
    private object Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.Tag { get; private set; }
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual Placement get_Placement();
    public virtual void set_Placement(Placement value);
    public virtual float get_DistanceFromScale();
    public virtual void set_DistanceFromScale(float value);
    public string get_ScaleName();
    public void set_ScaleName(string value);
    public Color get_InRangeTickMarkColor();
    public void set_InRangeTickMarkColor(Color value);
    public Color get_InRangeLabelColor();
    public void set_InRangeLabelColor(Color value);
    public Color get_InRangeBarPointerColor();
    public void set_InRangeBarPointerColor(Color value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public string get_Href();
    public sealed virtual void set_Href(string value);
    public string get_MapAreaAttributes();
    public void set_MapAreaAttributes(string value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public float get_ShadowOffset();
    public void set_ShadowOffset(float value);
    public GaugeDashStyle get_BorderStyle();
    public void set_BorderStyle(GaugeDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public RangeGradientType get_FillGradientType();
    public void set_FillGradientType(RangeGradientType value);
    public Color get_FillGradientEndColor();
    public void set_FillGradientEndColor(Color value);
    public GaugeHatchStyle get_FillHatchStyle();
    public void set_FillHatchStyle(GaugeHatchStyle value);
    public virtual double get_InRangeTimeout();
    public virtual void set_InRangeTimeout(double value);
    public virtual PeriodType get_InRangeTimeoutType();
    public virtual void set_InRangeTimeoutType(PeriodType value);
    public bool get_Selected();
    public void set_Selected(bool value);
    public virtual float get_StartWidth();
    public virtual void set_StartWidth(float value);
    public virtual float get_EndWidth();
    public virtual void set_EndWidth(float value);
    internal abstract virtual void Render(GaugeGraphics g);
    internal GaugeBase GetGaugeBase();
    internal virtual void OnAdded();
    internal virtual void Notify(MessageType msg, NamedElement element, object param);
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IToolTipProvider.GetToolTip(HitTestResult ht);
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetHref();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetMapAreaAttributes();
    private sealed virtual override object Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.set_Tag(object value);
}
internal class Microsoft.Reporting.Gauge.WebForms.RangeDataState : object {
    internal bool IsInRange;
    internal bool IsTimerExceed;
    internal DataAttributes data;
    internal bool IsRangeActive { get; }
    internal RangeDataState(Range range, DataAttributes data);
    internal bool get_IsRangeActive();
}
internal enum Microsoft.Reporting.Gauge.WebForms.RangeGradientType : Enum {
    public int value__;
    public static RangeGradientType None;
    public static RangeGradientType StartToEnd;
    public static RangeGradientType LeftRight;
    public static RangeGradientType TopBottom;
    public static RangeGradientType Center;
    public static RangeGradientType DiagonalLeft;
    public static RangeGradientType DiagonalRight;
    public static RangeGradientType HorizontalCenter;
    public static RangeGradientType VerticalCenter;
}
internal class Microsoft.Reporting.Gauge.WebForms.RealTimeDataEventArgs : EventArgs {
    private RealTimeValueCollection realTimeValues;
    public RealTimeValueCollection RealTimeValues { get; }
    public RealTimeValueCollection get_RealTimeValues();
}
internal class Microsoft.Reporting.Gauge.WebForms.RealTimeDataEventHandler : MulticastDelegate {
    public RealTimeDataEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RealTimeDataEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RealTimeDataEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.Gauge.WebForms.RealTimeValue : object {
    private string inputValueName;
    private double value;
    private DateTime timestamp;
    public string InputValueName { get; public set; }
    public double Value { get; public set; }
    public DateTime Timestamp { get; public set; }
    public RealTimeValue(string inputValueName, double value, DateTime timestamp);
    public string get_InputValueName();
    public void set_InputValueName(string value);
    public double get_Value();
    public void set_Value(double value);
    public DateTime get_Timestamp();
    public void set_Timestamp(DateTime value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.RealTimeValueCollection : CollectionBase {
    public RealTimeValue Item { get; public set; }
    public int Add(string inputValueName, double value);
    public int Add(RealTimeValue value);
    public int Add(string inputValueName, double value, DateTime timestamp);
    public void Remove(RealTimeValue value);
    public bool Contains(RealTimeValue value);
    public void Insert(int index, RealTimeValue value);
    public int IndexOf(RealTimeValue value);
    public RealTimeValue get_Item(int index);
    public void set_Item(int index, RealTimeValue value);
}
internal enum Microsoft.Reporting.Gauge.WebForms.RenderContent : Enum {
    public int value__;
    public static RenderContent All;
    public static RenderContent Static;
    public static RenderContent Dynamic;
}
internal class Microsoft.Reporting.Gauge.WebForms.RenderingEngine : object {
    internal bool shadowDrawingMode;
    private RenderingType activeRenderingType;
    private GdiGraphics gdiGraphics;
    private string documentTitle;
    internal IGaugeRenderingEngine RenderingObject { get; }
    internal RenderingType ActiveRenderingType { get; internal set; }
    public TextRenderingHint TextRenderingHint { get; public set; }
    public Matrix Transform { get; public set; }
    public SmoothingMode SmoothingMode { get; public set; }
    public Region Clip { get; public set; }
    public bool IsClipEmpty { get; }
    public Graphics Graphics { get; public set; }
    public sealed virtual void DrawLine(Pen pen, PointF pt1, PointF pt2);
    public sealed virtual void DrawLine(Pen pen, float x1, float y1, float x2, float y2);
    public sealed virtual void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr);
    public sealed virtual void DrawEllipse(Pen pen, float x, float y, float width, float height);
    public sealed virtual void DrawCurve(Pen pen, PointF[] points, int offset, int numberOfSegments, float tension);
    public sealed virtual void DrawRectangle(Pen pen, int x, int y, int width, int height);
    public sealed virtual void DrawPolygon(Pen pen, PointF[] points);
    public sealed virtual void DrawString(string s, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    public sealed virtual void DrawString(string s, Font font, Brush brush, PointF point, StringFormat format);
    public sealed virtual void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs);
    public sealed virtual void DrawRectangle(Pen pen, float x, float y, float width, float height);
    public sealed virtual void DrawPath(Pen pen, GraphicsPath path);
    public sealed virtual void DrawPie(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual void DrawArc(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual void DrawImage(Image image, RectangleF rect);
    public sealed virtual void DrawEllipse(Pen pen, RectangleF rect);
    public sealed virtual void DrawLines(Pen pen, PointF[] points);
    public sealed virtual void FillEllipse(Brush brush, RectangleF rect);
    public sealed virtual void FillPath(Brush brush, GraphicsPath path);
    public sealed virtual void FillPath(Brush brush, GraphicsPath path, float angle, bool useBrushOffset, bool circularFill);
    public sealed virtual void FillRegion(Brush brush, Region region);
    public sealed virtual void FillRectangle(Brush brush, RectangleF rect);
    public sealed virtual void FillRectangle(Brush brush, float x, float y, float width, float height);
    public sealed virtual void FillPolygon(Brush brush, PointF[] points);
    public sealed virtual void FillPie(Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public void SetGradient(Color firstColor, Color secondColor, GradientType gradientType);
    public virtual void Close();
    internal Color TransformHueColor(Color hueColor);
    public void StartHotRegion(NamedElement obj);
    public void EndHotRegion();
    public sealed virtual SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    public sealed virtual SizeF MeasureString(string text, Font font);
    public sealed virtual GraphicsState Save();
    public sealed virtual void Restore(GraphicsState gstate);
    public sealed virtual void ResetClip();
    public sealed virtual void SetClip(RectangleF rect);
    public void SetTitle(string title);
    public sealed virtual void SetClip(GraphicsPath path, CombineMode combineMode);
    public sealed virtual void TranslateTransform(float dx, float dy);
    public sealed virtual void BeginSelection(string hRef, string title);
    public sealed virtual void EndSelection();
    internal IGaugeRenderingEngine get_RenderingObject();
    internal RenderingType get_ActiveRenderingType();
    internal void set_ActiveRenderingType(RenderingType value);
    public sealed virtual TextRenderingHint get_TextRenderingHint();
    public sealed virtual void set_TextRenderingHint(TextRenderingHint value);
    public sealed virtual Matrix get_Transform();
    public sealed virtual void set_Transform(Matrix value);
    public sealed virtual SmoothingMode get_SmoothingMode();
    public sealed virtual void set_SmoothingMode(SmoothingMode value);
    public sealed virtual Region get_Clip();
    public sealed virtual void set_Clip(Region value);
    public sealed virtual bool get_IsClipEmpty();
    public sealed virtual Graphics get_Graphics();
    public sealed virtual void set_Graphics(Graphics value);
}
internal enum Microsoft.Reporting.Gauge.WebForms.RenderingType : Enum {
    public int value__;
    public static RenderingType Gdi;
}
internal enum Microsoft.Reporting.Gauge.WebForms.RenderType : Enum {
    public int value__;
    public static RenderType ImageTag;
    public static RenderType InputTag;
    public static RenderType BinaryStreaming;
    public static RenderType ImageMap;
    public static RenderType RealTimeStreaming;
}
internal enum Microsoft.Reporting.Gauge.WebForms.ResizeMode : Enum {
    public int value__;
    public static ResizeMode None;
    public static ResizeMode AutoFit;
}
internal class Microsoft.Reporting.Gauge.WebForms.RGB : ValueType {
    internal int Red;
    internal int Green;
    internal int Blue;
    internal RGB(int R, int G, int B);
}
internal abstract class Microsoft.Reporting.Gauge.WebForms.ScaleBase : NamedElement {
    internal float _startPosition;
    internal float _endPosition;
    internal float _sweepPosition;
    internal float coordSystemRatio;
    internal LinearLabelStyle baseLabelStyle;
    internal ArrayList markers;
    internal ArrayList labels;
    internal static double MaxMajorTickMarks;
    internal bool staticRendering;
    private CustomLabelCollection customLabels;
    private double minimum;
    private double maximum;
    private double multiplier;
    private double interval;
    private double intervalOffset;
    private string toolTip;
    private string href;
    private string mapAreaAttributes;
    internal TickMark majorTickMarkA;
    internal TickMark minorTickMarkA;
    private bool tickMarksOnTop;
    private bool reversed;
    private bool logarithmic;
    private double logarithmicBase;
    internal SpecialPosition minimumPin;
    internal SpecialPosition maximumPin;
    private bool visible;
    private float width;
    private Color borderColor;
    private GaugeDashStyle borderStyle;
    private int borderWidth;
    private Color fillColor;
    private GradientType fillGradientType;
    private Color fillGradientEndColor;
    private GaugeHatchStyle fillHatchStyle;
    private float shadowOffset;
    private bool selected;
    private object imageMapProviderTag;
    [DesignerSerializationVisibilityAttribute("2")]
public CustomLabelCollection CustomLabels { get; }
    [SRCategoryAttribute("CategoryMisc")]
[SRDescriptionAttribute("DescriptionAttributeName11")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeMinimum3")]
[DefaultValueAttribute("0")]
public double Minimum { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeMaximum3")]
[DefaultValueAttribute("100")]
public double Maximum { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeMultiplier")]
[DefaultValueAttribute("1")]
public double Multiplier { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeInterval4")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleAutoValueConverter")]
[DefaultValueAttribute("не число")]
public double Interval { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeIntervalOffset4")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleAutoValueConverter")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("не число")]
public double IntervalOffset { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeToolTip3")]
[LocalizableAttribute("True")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeHref7")]
[LocalizableAttribute("True")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeMapAreaAttributes4")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryLabelsAndTickMarks")]
[SRDescriptionAttribute("DescriptionAttributeMajorTickMarkInt")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
internal TickMark MajorTickMarkInt { get; internal set; }
    [SRCategoryAttribute("CategoryLabelsAndTickMarks")]
[SRDescriptionAttribute("DescriptionAttributeMinorTickMarkInt")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
internal TickMark MinorTickMarkInt { get; internal set; }
    [SRCategoryAttribute("CategoryLabelsAndTickMarks")]
[SRDescriptionAttribute("DescriptionAttributeTickMarksOnTop")]
[DefaultValueAttribute("False")]
public bool TickMarksOnTop { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeReversed")]
[DefaultValueAttribute("False")]
public bool Reversed { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeLogarithmic")]
[DefaultValueAttribute("False")]
public bool Logarithmic { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeLogarithmicBase")]
[DefaultValueAttribute("10")]
public double LogarithmicBase { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeMinimumPin")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
internal SpecialPosition MinimumPin { get; internal set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeMaximumPin")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
internal SpecialPosition MaximumPin { get; internal set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeVisible10")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeWidth9")]
[ValidateBound("0", "30")]
[DefaultValueAttribute("5")]
public float Width { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderColor6")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderStyle9")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeBorderWidth10")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFillColor5")]
[DefaultValueAttribute("System.Drawing.Color", "CornflowerBlue")]
public Color FillColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFillGradientType3")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType FillGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFillGradientEndColor3")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
public Color FillGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFillHatchStyle5")]
[EditorAttribute("Microsoft.Reporting.Gauge.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeHatchStyle FillHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeShadowOffset3")]
[ValidateBound("-5", "5")]
[DefaultValueAttribute("1")]
public float ShadowOffset { get; public set; }
    internal double MinimumLog { get; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeSelected10")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
public bool Selected { get; public set; }
    internal float StartPosition { get; }
    internal float EndPosition { get; }
    internal float SweepPosition { get; }
    private object Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.Tag { get; private set; }
    public CustomLabelCollection get_CustomLabels();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public double get_Minimum();
    public void set_Minimum(double value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public double get_Multiplier();
    public void set_Multiplier(double value);
    public double get_Interval();
    public void set_Interval(double value);
    public double get_IntervalOffset();
    public void set_IntervalOffset(double value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public string get_Href();
    public sealed virtual void set_Href(string value);
    public string get_MapAreaAttributes();
    public void set_MapAreaAttributes(string value);
    internal TickMark get_MajorTickMarkInt();
    internal void set_MajorTickMarkInt(TickMark value);
    internal TickMark get_MinorTickMarkInt();
    internal void set_MinorTickMarkInt(TickMark value);
    public bool get_TickMarksOnTop();
    public void set_TickMarksOnTop(bool value);
    public bool get_Reversed();
    public void set_Reversed(bool value);
    public bool get_Logarithmic();
    public void set_Logarithmic(bool value);
    public double get_LogarithmicBase();
    public void set_LogarithmicBase(double value);
    internal SpecialPosition get_MinimumPin();
    internal void set_MinimumPin(SpecialPosition value);
    internal SpecialPosition get_MaximumPin();
    internal void set_MaximumPin(SpecialPosition value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public virtual float get_Width();
    public virtual void set_Width(float value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public GaugeDashStyle get_BorderStyle();
    public void set_BorderStyle(GaugeDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public GradientType get_FillGradientType();
    public void set_FillGradientType(GradientType value);
    public Color get_FillGradientEndColor();
    public void set_FillGradientEndColor(Color value);
    public GaugeHatchStyle get_FillHatchStyle();
    public void set_FillHatchStyle(GaugeHatchStyle value);
    public float get_ShadowOffset();
    public void set_ShadowOffset(float value);
    internal double get_MinimumLog();
    public bool get_Selected();
    public void set_Selected(bool value);
    private float GetMaxOffset(LinearGauge gauge);
    internal float get_StartPosition();
    internal float get_EndPosition();
    internal float get_SweepPosition();
    internal GaugeBase GetGauge();
    internal bool GetReversed();
    internal CustomTickMark GetEndLabelTickMark();
    internal Brush GetLightBrush(GaugeGraphics g, CustomTickMark tickMark, Color fillColor, GraphicsPath path);
    internal abstract virtual void DrawTickMark(GaugeGraphics g, CustomTickMark tickMark, double value, float offset);
    internal void DrawTickMark(GaugeGraphics g, CustomTickMark tickMark, double value, float offset, Matrix matrix);
    internal void DrawTickMarkImage(GaugeGraphics g, CustomTickMark tickMark, Matrix matrix, PointF centerPoint, bool drawShadow);
    internal float GetTickMarkOffset(CustomTickMark tickMark);
    internal void RenderTicks(GaugeGraphics g, TickMark tickMark, double interval, double max, double min, double intOffset, bool forceLinear);
    internal void RenderGrid(GaugeGraphics g);
    internal abstract virtual void DrawCustomLabel(CustomLabel label);
    internal abstract virtual LinearLabelStyle GetLabelStyle();
    internal float GetOffsetLabelPos(Placement placement, float scaleOffset, float scalePosition);
    internal Font GetResizedFont(Font font, FontUnit fontUnit);
    internal void RenderCustomLabels(GaugeGraphics g);
    internal abstract virtual void DrawSpecialPosition(GaugeGraphics g, SpecialPosition label, float angle);
    internal void RenderPins(GaugeGraphics g);
    protected void InvalidateEndPosition();
    protected void InvalidateSweepPosition();
    internal Color GetRangeTickMarkColor(double value, Color color);
    internal Color GetRangeLabelsColor(double value, Color color);
    internal virtual double GetValueLimit(double value, bool snapEnable, double snapInterval);
    internal virtual double GetValueLimit(double value);
    internal double GetIntervalOffset(IntervalTypes type);
    internal double GetInterval(IntervalTypes type);
    internal double GetNextPosition(double position, double interval, bool forceLinear);
    protected virtual double GetValueAgainstScaleRatio(double value);
    protected virtual double GetValueByRatio(float ratio);
    protected virtual bool IsReversed();
    protected float GetPositionFromValue(double value, float startPos, float endPos);
    internal virtual float GetPositionFromValue(double value);
    internal virtual double GetValueFromPosition(float position);
    internal abstract virtual double GetValue(PointF c, PointF p);
    protected abstract virtual PointF GetPoint(float position, float offset);
    internal virtual PointF GetPointRel(double value, float offset);
    internal virtual PointF GetPointAbs(double value, float offset);
    internal virtual void PointerValueChanged(PointerBase sender);
    internal virtual void OnAdded();
    internal virtual void OnRemove();
    internal virtual void BeginInit();
    internal virtual void EndInit();
    internal virtual void Invalidate();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IToolTipProvider.GetToolTip(HitTestResult ht);
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetHref();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetMapAreaAttributes();
    private sealed virtual override object Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.set_Tag(object value);
}
internal class Microsoft.Reporting.Gauge.WebForms.ScaleSourceConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal enum Microsoft.Reporting.Gauge.WebForms.ScaleType : Enum {
    public int value__;
    public static ScaleType Linear;
    public static ScaleType Logarithmic;
}
internal class Microsoft.Reporting.Gauge.WebForms.SegmentsCache : object {
    private Hashtable cacheTable;
    private Matrix matrix;
    private float size;
    internal GraphicsPath GetSegment(Enum segments, PointF p, float size);
    internal void Reset();
    private void CheckCache(float size);
    internal void SetSegment(Enum segment, GraphicsPath path, PointF p, float size);
}
internal enum Microsoft.Reporting.Gauge.WebForms.SerializableProperties : Enum {
    public int value__;
    public static SerializableProperties Adder;
    public static SerializableProperties AllowUpsideDown;
    public static SerializableProperties Angle;
    public static SerializableProperties AntiAliasing;
    public static SerializableProperties AutoLayout;
    public static SerializableProperties BackColor;
    public static SerializableProperties BackFrame;
    public static SerializableProperties BackGradientEndColor;
    public static SerializableProperties BackGradientType;
    public static SerializableProperties BackHatchStyle;
    public static SerializableProperties BackShadowOffset;
    public static SerializableProperties BarStart;
    public static SerializableProperties BaseValueName;
    public static SerializableProperties BorderColor;
    public static SerializableProperties BorderStyle;
    public static SerializableProperties BorderWidth;
    public static SerializableProperties BuildNumber;
    public static SerializableProperties CalculatedValues;
    public static SerializableProperties CapFillColor;
    public static SerializableProperties CapFillGradientEndColor;
    public static SerializableProperties CapFillGradientType;
    public static SerializableProperties CapFillHatchStyle;
    public static SerializableProperties CapImage;
    public static SerializableProperties CapImageHueColor;
    public static SerializableProperties CapImageOrigin;
    public static SerializableProperties CapImageTransColor;
    public static SerializableProperties CapOnTop;
    public static SerializableProperties CapReflection;
    public static SerializableProperties CapRotateGradient;
    public static SerializableProperties CapShadowOffset;
    public static SerializableProperties CapStyle;
    public static SerializableProperties CapVisible;
    public static SerializableProperties CapWidth;
    public static SerializableProperties CircularGauges;
    public static SerializableProperties ClipContent;
    public static SerializableProperties ClipImage;
    public static SerializableProperties ControlType;
    public static SerializableProperties Cursor;
    public static SerializableProperties CustomLabels;
    public static SerializableProperties DampeningEnabled;
    public static SerializableProperties DampeningSweepTime;
    public static SerializableProperties DataMember;
    public static SerializableProperties DateFieldMember;
    public static SerializableProperties DecimalColor;
    public static SerializableProperties Decimals;
    public static SerializableProperties DigitColor;
    public static SerializableProperties Digits;
    public static SerializableProperties DistanceFromScale;
    public static SerializableProperties Enable;
    public static SerializableProperties EnableGradient;
    public static SerializableProperties EndMargin;
    public static SerializableProperties EndValue;
    public static SerializableProperties EndWidth;
    public static SerializableProperties FillColor;
    public static SerializableProperties FillGradientEndColor;
    public static SerializableProperties FillGradientType;
    public static SerializableProperties FillHatchStyle;
    public static SerializableProperties Font;
    public static SerializableProperties FontAngle;
    public static SerializableProperties FontUnit;
    public static SerializableProperties FormatString;
    public static SerializableProperties FrameColor;
    public static SerializableProperties FrameGradientEndColor;
    public static SerializableProperties FrameGradientType;
    public static SerializableProperties FrameHatchStyle;
    public static SerializableProperties FrameShape;
    public static SerializableProperties FrameStyle;
    public static SerializableProperties FrameWidth;
    public static SerializableProperties GaugeCore;
    public static SerializableProperties GlassEffect;
    public static SerializableProperties GradientDensity;
    public static SerializableProperties Height;
    public static SerializableProperties History;
    public static SerializableProperties HistoryDepth;
    public static SerializableProperties HistoryDepthType;
    public static SerializableProperties Image;
    public static SerializableProperties ImageHueColor;
    public static SerializableProperties ImageOrigin;
    public static SerializableProperties Images;
    public static SerializableProperties ImageTransColor;
    public static SerializableProperties ImageTransparency;
    public static SerializableProperties IndicatorStyle;
    public static SerializableProperties InRangeBarPointerColor;
    public static SerializableProperties InRangeLabelColor;
    public static SerializableProperties InRangeTickMarkColor;
    public static SerializableProperties InRangeTimeout;
    public static SerializableProperties InRangeTimeoutType;
    public static SerializableProperties IntegralBase;
    public static SerializableProperties IntegralInterval;
    public static SerializableProperties IntegralIntervalType;
    public static SerializableProperties Interactive;
    public static SerializableProperties Interval;
    public static SerializableProperties IntervalOffset;
    public static SerializableProperties Knobs;
    public static SerializableProperties KnobStyle;
    public static SerializableProperties Labels;
    public static SerializableProperties LabelStyle;
    public static SerializableProperties LedDimColor;
    public static SerializableProperties Length;
    public static SerializableProperties LinearGauges;
    public static SerializableProperties Location;
    public static SerializableProperties Logarithmic;
    public static SerializableProperties LogarithmicBase;
    public static SerializableProperties MajorTickMark;
    public static SerializableProperties MarkerFillColor;
    public static SerializableProperties MarkerFillGradientEndColor;
    public static SerializableProperties MarkerFillGradientType;
    public static SerializableProperties MarkerFillHatchStyle;
    public static SerializableProperties MarkerLength;
    public static SerializableProperties MarkerPosition;
    public static SerializableProperties MarkerRotateGradient;
    public static SerializableProperties MarkerStyle;
    public static SerializableProperties MarkerWidth;
    public static SerializableProperties Maximum;
    public static SerializableProperties MaximumPin;
    public static SerializableProperties Minimum;
    public static SerializableProperties MinimumPin;
    public static SerializableProperties MinorTickMark;
    public static SerializableProperties Multiplier;
    public static SerializableProperties Name;
    public static SerializableProperties NamedImages;
    public static SerializableProperties NeedleStyle;
    public static SerializableProperties NumericIndicators;
    public static SerializableProperties OffString;
    public static SerializableProperties Orientation;
    public static SerializableProperties OutOfRangeString;
    public static SerializableProperties Parent;
    public static SerializableProperties Period;
    public static SerializableProperties PeriodType;
    public static SerializableProperties PivotPoint;
    public static SerializableProperties Placement;
    public static SerializableProperties Pointers;
    public static SerializableProperties Position;
    public static SerializableProperties Radius;
    public static SerializableProperties Ranges;
    public static SerializableProperties RateOfChangePeriod;
    public static SerializableProperties RateOfChangePeriodType;
    public static SerializableProperties RealTimeDataInterval;
    public static SerializableProperties RefreshRate;
    public static SerializableProperties RefreshRateType;
    public static SerializableProperties ResizeMode;
    public static SerializableProperties Reversed;
    public static SerializableProperties RightToLeft;
    public static SerializableProperties RotateGradient;
    public static SerializableProperties RotateLabel;
    public static SerializableProperties RotateLabels;
    public static SerializableProperties ScaleName;
    public static SerializableProperties Scales;
    public static SerializableProperties Selected;
    public static SerializableProperties SelectionBorderColor;
    public static SerializableProperties SelectionMarkerColor;
    public static SerializableProperties SeparatorColor;
    public static SerializableProperties SeparatorWidth;
    public static SerializableProperties ShadowIntensity;
    public static SerializableProperties ShadowOffset;
    public static SerializableProperties Shape;
    public static SerializableProperties ShowDecimalPoint;
    public static SerializableProperties ShowEndLabels;
    public static SerializableProperties ShowLeadingZeros;
    public static SerializableProperties ShowSign;
    public static SerializableProperties Size;
    public static SerializableProperties SnappingEnabled;
    public static SerializableProperties SnappingInterval;
    public static SerializableProperties StartAngle;
    public static SerializableProperties StartMargin;
    public static SerializableProperties StartValue;
    public static SerializableProperties StartWidth;
    public static SerializableProperties StateIndicators;
    public static SerializableProperties States;
    public static SerializableProperties SweepAngle;
    public static SerializableProperties Text;
    public static SerializableProperties TextAlignment;
    public static SerializableProperties TextAntiAliasingQuality;
    public static SerializableProperties TextColor;
    public static SerializableProperties TextShadowOffset;
    public static SerializableProperties ThermometerBackColor;
    public static SerializableProperties ThermometerBackGradientEndColor;
    public static SerializableProperties ThermometerBackGradientType;
    public static SerializableProperties ThermometerBackHatchStyle;
    public static SerializableProperties ThermometerBulbOffset;
    public static SerializableProperties ThermometerBulbSize;
    public static SerializableProperties ThermometerStyle;
    public static SerializableProperties TickMarksOnTop;
    public static SerializableProperties TickMarkStyle;
    public static SerializableProperties Timestamp;
    public static SerializableProperties ToolTip;
    public static SerializableProperties TopImage;
    public static SerializableProperties TopImageHueColor;
    public static SerializableProperties TopImageTransColor;
    public static SerializableProperties Transparency;
    public static SerializableProperties TriggerDelay;
    public static SerializableProperties TriggerDelayType;
    public static SerializableProperties Type;
    public static SerializableProperties Value;
    public static SerializableProperties ValueFieldMember;
    public static SerializableProperties ValueLimit;
    public static SerializableProperties Values;
    public static SerializableProperties ValueSource;
    public static SerializableProperties Visible;
    public static SerializableProperties Width;
    public static SerializableProperties X;
    public static SerializableProperties Y;
    public static SerializableProperties ZOrder;
}
internal enum Microsoft.Reporting.Gauge.WebForms.SerializationContent : Enum {
    public int value__;
    public static SerializationContent None;
    public static SerializationContent Appearance;
    public static SerializationContent All;
}
internal enum Microsoft.Reporting.Gauge.WebForms.SerializationFormat : Enum {
    public int value__;
    public static SerializationFormat Xml;
    public static SerializationFormat Binary;
}
internal enum Microsoft.Reporting.Gauge.WebForms.SerializationVisibility : Enum {
    public int value__;
    public static SerializationVisibility Hidden;
    public static SerializationVisibility Attribute;
    public static SerializationVisibility Element;
}
[AttributeUsageAttribute("32767")]
internal class Microsoft.Reporting.Gauge.WebForms.SerializationVisibilityAttribute : Attribute {
    private SerializationVisibility visibility;
    public SerializationVisibility Visibility { get; public set; }
    public SerializationVisibilityAttribute(SerializationVisibility visibility);
    public SerializationVisibility get_Visibility();
    public void set_Visibility(SerializationVisibility value);
}
internal abstract class Microsoft.Reporting.Gauge.WebForms.SerializerBase : object {
    private bool ignoreUnknown;
    private bool templateMode;
    private bool resetWhenLoading;
    private string serializableContent;
    private string nonSerializableContent;
    internal static FontConverter fontConverter;
    internal static CursorConverter cursorConverter;
    internal static ColorConverter colorConverter;
    internal static SizeConverter sizeConverter;
    private ArrayList serializableContentList;
    private ArrayList nonSerializableContentList;
    public bool IgnoreUnknownAttributes { get; public set; }
    public bool TemplateMode { get; public set; }
    public bool ResetWhenLoading { get; public set; }
    public string SerializableContent { get; public set; }
    public string NonSerializableContent { get; public set; }
    private static SerializerBase();
    public bool get_IgnoreUnknownAttributes();
    public void set_IgnoreUnknownAttributes(bool value);
    public bool get_TemplateMode();
    public void set_TemplateMode(bool value);
    public bool get_ResetWhenLoading();
    public void set_ResetWhenLoading(bool value);
    public string get_SerializableContent();
    public void set_SerializableContent(string value);
    public string get_NonSerializableContent();
    public void set_NonSerializableContent(string value);
    public virtual void ResetObjectProperties(object objectToReset);
    protected void ResetObjectProperties(object objectToReset, object parent, string elementName);
    public abstract virtual void Serialize(object objectToSerialize, object destination);
    public abstract virtual void Deserialize(object objectToDeserialize, object source);
    protected bool IsGaugeBaseProperty(object objectToSerialize, object parent, PropertyInfo pi);
    protected string ImageToString(Image image);
    protected static Image ImageFromString(string data);
    protected string GetObjectName(object obj);
    protected object GetListNewItem(IList list, string itemTypeName, String& itemName, Boolean& reusedObject);
    protected bool ShouldSerializeAsAttribute(PropertyInfo pi, object parent);
    protected bool IsSerializableContent(string propertyName, object parent);
    private bool IsPropertyInList(ArrayList contentList, string className, string propertyName, Int32& classFitType, Int32& propertyFitType);
    private bool NameMatchMask(ItemInfo itemInfo, string objectName, Int32& type);
    private ArrayList GetSerializableContentList();
    private ArrayList GetNonSerializableContentList();
    private void FillContentList(ArrayList list, string content);
    private void CheckWildCars(ItemInfo info);
}
internal enum Microsoft.Reporting.Gauge.WebForms.ShowSign : Enum {
    public int value__;
    public static ShowSign None;
    public static ShowSign NegativeOnly;
    public static ShowSign Both;
}
internal class Microsoft.Reporting.Gauge.WebForms.SizeConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal static class Microsoft.Reporting.Gauge.WebForms.SmartClientSerializerHelper : object {
    private static CaseInsensitiveHashCodeProvider hashCodeProvider;
    private static SmartClientSerializerHelper();
}
internal class Microsoft.Reporting.Gauge.WebForms.SpecialPosition : PinMajorTickMark {
    private bool enable;
    private float location;
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeEnable")]
[NotifyParentPropertyAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("False")]
public bool Enable { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeLocation6")]
[DefaultValueAttribute("5")]
[ValidateBound("-50", "50")]
public float Location { get; public set; }
    public SpecialPosition(object parent);
    public bool get_Enable();
    public void set_Enable(bool value);
    public virtual float get_Location();
    public virtual void set_Location(float value);
}
[CompilerGeneratedAttribute]
internal class Microsoft.Reporting.Gauge.WebForms.SR : object {
    public static CultureInfo Culture { get; public set; }
    public static string DefaultFontFamily { get; }
    public static string LabelFormatDescriptionF { get; }
    public static string LabelFormatDescriptionC { get; }
    public static string LabelFormatDescriptionE { get; }
    public static string LabelFormatDescriptionG { get; }
    public static string LabelFormatDescriptionN { get; }
    public static string LabelFormatDescriptionP { get; }
    public static string LabelFormatPrecisionMsg { get; }
    public static string LabelFormatPrecisionMsgCaption { get; }
    public static string LabelFormatInvalidCustomFormat { get; }
    public static string GaugeDesignException { get; }
    public static string GaugeDesignStack { get; }
    public static string CollectionEditorMoveUp { get; }
    public static string CollectionEditorMoveDown { get; }
    public static string CollectionEditorClone { get; }
    public static string ImageUIOpenFileFilter { get; }
    public static string SerializerCollectionDefaultError { get; }
    public static string NoImageString { get; }
    public static string SvgHeaderComment { get; }
    public static string DefaultMeazureStringSimbol { get; }
    public static string DescriptionAttributeStateIndicator_FillHatchStyle { get; }
    public static string DescriptionAttributeFillHatchStyle3 { get; }
    public static string DescriptionAttributeState_FillHatchStyle { get; }
    public static string DescriptionAttributeFillHatchStyle5 { get; }
    public static string DescriptionAttributeKnob_FillHatchStyle { get; }
    public static string DescriptionAttributeFillHatchStyle7 { get; }
    public static string DescriptionAttributeNumericIndicator_ToolTip { get; }
    public static string DescriptionAttributeToolTip3 { get; }
    public static string DescriptionAttributeKnob_ToolTip { get; }
    public static string DescriptionAttributeToolTip5 { get; }
    public static string DescriptionAttributeMapArea_ToolTip { get; }
    public static string DescriptionAttributeGaugeLabel_ToolTip { get; }
    public static string DescriptionAttributeToolTip8 { get; }
    public static string DescriptionAttributeToolTip9 { get; }
    public static string DescriptionAttributeStateIndicator_ToolTip { get; }
    public static string DescriptionAttributeGaugeImage_ToolTip { get; }
    public static string DescriptionAttributeGaugeContainer_DynamicWidth { get; }
    public static string DescriptionAttributeGaugeContainer_DynamicHeight { get; }
    public static string DescriptionAttributeGaugeContainer_DataSetName { get; }
    public static string DescriptionAttributeGaugeContainer_ImageUrl { get; }
    public static string DescriptionAttributeParentObject { get; }
    public static string DescriptionAttributeParentObject3 { get; }
    public static string DescriptionAttributeLinearPointer_ThermometerBackColor { get; }
    public static string DescriptionAttributeNamedImage_NamedImage { get; }
    public static string DescriptionAttributeNumericIndicator_Digits { get; }
    public static string DescriptionAttributeState_TriggerDelay { get; }
    public static string DescriptionAttributeTickMarksOnTop { get; }
    public static string DescriptionAttributeTextColor { get; }
    public static string DescriptionAttributeGaugeLabel_TextColor { get; }
    public static string DescriptionAttributeCustomLabel_TextColor { get; }
    public static string DescriptionAttributeTextColor5 { get; }
    public static string DescriptionAttributeCircularPointer_CapOnTop { get; }
    public static string DescriptionAttributeCalculatedValueLinear_Adder { get; }
    public static string DescriptionAttributeKnob_Visible { get; }
    public static string DescriptionAttributeVisible3 { get; }
    public static string DescriptionAttributeCustomLabel_Visible { get; }
    public static string DescriptionAttributeGaugeLabel_Visible { get; }
    public static string DescriptionAttributeVisible6 { get; }
    public static string DescriptionAttributeVisible7 { get; }
    public static string DescriptionAttributeNumericIndicator_Visible { get; }
    public static string DescriptionAttributeVisible9 { get; }
    public static string DescriptionAttributeVisible10 { get; }
    public static string DescriptionAttributeGaugeImage_Visible { get; }
    public static string DescriptionAttributeVisible12 { get; }
    public static string DescriptionAttributeStateIndicator_Visible { get; }
    public static string DescriptionAttributeStateIndicator_Minimum { get; }
    public static string DescriptionAttributeStateIndicator_Maximum { get; }
    public static string DescriptionAttributeStateIndicator_IsPercentBased { get; }
    public static string DescriptionAttributeNumericIndicator_BackGradientType { get; }
    public static string DescriptionAttributeGaugeLabel_BackGradientType { get; }
    public static string DescriptionAttributeBackFrame_BackGradientType { get; }
    public static string DescriptionAttributeNumericIndicator_Maximum { get; }
    public static string DescriptionAttributeMaximum3 { get; }
    public static string DescriptionAttributeMinimumPin { get; }
    public static string DescriptionAttributeGaugeCore_BuildNumber { get; }
    public static string DescriptionAttributeGaugeLabel_TextAlignment { get; }
    public static string DescriptionAttributeImageHueColor { get; }
    public static string DescriptionAttributeBackFrame_ImageHueColor { get; }
    public static string DescriptionAttributeImageHueColor4 { get; }
    public static string DescriptionAttributeKnob_ImageHueColor { get; }
    public static string DescriptionAttributeImageHueColor6 { get; }
    public static string DescriptionAttributeMapArea_Shape { get; }
    public static string DescriptionAttributeShape3 { get; }
    public static string DescriptionAttributeBackFrame_Shape { get; }
    public static string DescriptionAttributeBackFrame_Image { get; }
    public static string DescriptionAttributeGaugeImage_Image { get; }
    public static string DescriptionAttributeKnob_Image { get; }
    public static string DescriptionAttributeImage5 { get; }
    public static string DescriptionAttributeNamedImage_Image { get; }
    public static string DescriptionAttributeImage7 { get; }
    public static string DescriptionAttributeStateIndicator_Image { get; }
    public static string DescriptionAttributeState_Image { get; }
    public static string DescriptionAttributeLinearPointer_ThermometerBackHatchStyle { get; }
    public static string DescriptionAttributeRefreshRateType { get; }
    public static string DescriptionAttributeGradientDensity { get; }
    public static string DescriptionAttributeBorderWidth { get; }
    public static string DescriptionAttributeGaugeLabel_BorderWidth { get; }
    public static string DescriptionAttributeStateIndicator_BorderWidth { get; }
    public static string DescriptionAttributeBorderWidth5 { get; }
    public static string DescriptionAttributeBackFrame_BorderWidth { get; }
    public static string DescriptionAttributeGaugeContainer_BorderWidth { get; }
    public static string DescriptionAttributeState_BorderWidth { get; }
    public static string DescriptionAttributeNumericIndicator_BorderWidth { get; }
    public static string DescriptionAttributeBorderWidth9 { get; }
    public static string DescriptionAttributeBorderWidth10 { get; }
    public static string DescriptionAttributeGaugeImage_Transparency { get; }
    public static string DescriptionAttributeBackFrame_BorderStyle { get; }
    public static string DescriptionAttributeGaugeContainer_BorderStyle { get; }
    public static string DescriptionAttributeBorderStyle3 { get; }
    public static string DescriptionAttributeNumericIndicator_BorderStyle { get; }
    public static string DescriptionAttributeState_BorderStyle { get; }
    public static string DescriptionAttributeGaugeLabel_BorderStyle { get; }
    public static string DescriptionAttributeStateIndicator_BorderStyle { get; }
    public static string DescriptionAttributeBorderStyle8 { get; }
    public static string DescriptionAttributeBorderStyle9 { get; }
    public static string DescriptionAttributeKnob_SnappingEnabled { get; }
    public static string DescriptionAttributeNumericIndicator_SnappingEnabled { get; }
    public static string DescriptionAttributeSnappingEnabled4 { get; }
    public static string DescriptionAttributeY { get; }
    public static string DescriptionAttributeKnob_Interactive { get; }
    public static string DescriptionAttributeInteractive3 { get; }
    public static string DescriptionAttributeGaugeContainer_WinControlUrl { get; }
    public static string DescriptionAttributeGaugeSerializer_NonSerializableContent { get; }
    public static string DescriptionAttributeCircularGauge_PivotPoint { get; }
    public static string DescriptionAttributeNumericIndicator_IndicatorStyle { get; }
    public static string DescriptionAttributeStateIndicator_IndicatorStyle { get; }
    public static string DescriptionAttributeBackFrame_ImageTransColor { get; }
    public static string DescriptionAttributeKnob_ImageTransColor { get; }
    public static string DescriptionAttributeImageTransColor4 { get; }
    public static string DescriptionAttributeImageTransColor5 { get; }
    public static string DescriptionAttributeImageTransColor6 { get; }
    public static string DescriptionAttributeImageTransparency5 { get; }
    public static string DescriptionAttributeGaugeSerializer_SerializableContent { get; }
    public static string DescriptionAttributeCircularLabelStyle_RotateLabels { get; }
    public static string DescriptionAttributeCapImageHueColor { get; }
    public static string DescriptionAttributeInputValue_ValueFieldMember { get; }
    public static string DescriptionAttributeGaugeContainer_AntiAliasing { get; }
    public static string DescriptionAttributeGaugeContainer2_AntiAliasing { get; }
    public static string DescriptionAttributeShowEndLabels { get; }
    public static string DescriptionAttributeNumericIndicator_Ranges { get; }
    public static string DescriptionAttributeRanges3 { get; }
    public static string DescriptionAttributeDate { get; }
    public static string DescriptionAttributeInputValue_HistoryDepthType { get; }
    public static string DescriptionAttributeGaugeContainer_LinearGauges { get; }
    public static string DescriptionAttributeGaugeContainer2_LinearGauges { get; }
    public static string DescriptionAttributeCircularPointer_CapImage { get; }
    public static string DescriptionAttributeKnob_CapImage { get; }
    public static string DescriptionAttributeNumericIndicator_OffString { get; }
    public static string DescriptionAttributeGaugeContainer_EnableViewState { get; }
    public static string DescriptionAttributeStateIndicator_ImageTransparency { get; }
    public static string DescriptionAttributeCustomLabel_TickMarkStyle { get; }
    public static string DescriptionAttributeGaugeContainer_RenderAsControl { get; }
    public static string DescriptionAttributeImageOrigin_NotSet { get; }
    public static string DescriptionAttributeInRangeBarPointerColor { get; }
    public static string DescriptionAttributeMapArea_Coordinates { get; }
    public static string DescriptionAttributeGaugeSerializer_TemplateMode { get; }
    public static string DescriptionAttributeInputValue_DateFieldMember { get; }
    public static string DescriptionAttributeCalculatedValueIntegral_IntegralInterval { get; }
    public static string DescriptionAttributeKnob_MarkerStyle { get; }
    public static string DescriptionAttributePointerBase_MarkerStyle { get; }
    public static string DescriptionAttributeMarkerStyle4 { get; }
    public static string DescriptionAttributeFontAngle { get; }
    public static string DescriptionAttributeFontAngle3 { get; }
    public static string DescriptionAttributeCustomLabel_FontAngle { get; }
    public static string DescriptionAttributeKnob_RotateGradient { get; }
    public static string DescriptionAttributeNumericIndicator_ShowSign { get; }
    public static string DescriptionAttributeLinearGauge_Orientation { get; }
    public static string DescriptionAttributeGaugeLabel_Parent { get; }
    public static string DescriptionAttributeNumericIndicator_Parent { get; }
    public static string DescriptionAttributeStateIndicator_Parent { get; }
    public static string DescriptionAttributeParent5 { get; }
    public static string DescriptionAttributeGaugeImage_Parent { get; }
    public static string DescriptionAttributePointerBase_MarkerLength { get; }
    public static string DescriptionAttributeKnob_MarkerLength { get; }
    public static string DescriptionAttributeMarkerLength4 { get; }
    public static string DescriptionAttributeCircularRange_StartWidth { get; }
    public static string DescriptionAttributeLinearRange_StartWidth { get; }
    public static string DescriptionAttributeKnob_MarkerFillColor { get; }
    public static string DescriptionAttributeCircularPointer_CapReflection { get; }
    public static string DescriptionAttributeKnob_CapReflection { get; }
    public static string DescriptionAttributeBackFrame_FrameGradientEndColor { get; }
    public static string DescriptionAttributeGaugeContainer_CircularGauges { get; }
    public static string DescriptionAttributeGaugeContainer2_CircularGauges { get; }
    public static string DescriptionAttributeReversed { get; }
    public static string DescriptionAttributeMapAreaCollection_MapAreaCollection { get; }
    public static string DescriptionAttributeGaugeContainerEvent_PointerScaleEnter { get; }
    public static string DescriptionAttributeInputValue_HistoryDepth { get; }
    public static string DescriptionAttributeCircularPointer_CapImageOrigin { get; }
    public static string DescriptionAttributeKnob_CapImageOrigin { get; }
    public static string DescriptionAttributeBarStart { get; }
    public static string DescriptionAttributeGaugeContainer_TopImage { get; }
    public static string DescriptionAttributeGaugeContainer2_TopImage { get; }
    public static string DescriptionAttributeTopImage4 { get; }
    public static string DescriptionAttributeNumericIndicator_Location { get; }
    public static string DescriptionAttributeGaugeImage_Location { get; }
    public static string DescriptionAttributeGaugeLabel_Location { get; }
    public static string DescriptionAttributeLocation5 { get; }
    public static string DescriptionAttributeLocation6 { get; }
    public static string DescriptionAttributeStateIndicator_Location { get; }
    public static string DescriptionAttributeValueLimit { get; }
    public static string DescriptionAttributeCommon { get; }
    public static string DescriptionAttributeGaugeContainer_TransparentColor { get; }
    public static string DescriptionAttributeGaugeImage_Angle { get; }
    public static string DescriptionAttributeGaugeLabel_Angle { get; }
    public static string DescriptionAttributeStateIndicator_Angle { get; }
    public static string DescriptionAttributeStateIndicator_ScaleFactor { get; }
    public static string DescriptionAttributeLinearScale_Position { get; }
    public static string DescriptionAttributeGaugeImage_MapAreaAttributes { get; }
    public static string DescriptionAttributeNumericIndicator_MapAreaAttributes { get; }
    public static string DescriptionAttributeMapAreaAttributes4 { get; }
    public static string DescriptionAttributeGaugeContainerEvent_PlaybackStateChanged { get; }
    public static string DescriptionAttributeNumericIndicator_Minimum { get; }
    public static string DescriptionAttributeMinimum3 { get; }
    public static string DescriptionAttributeResizeMode { get; }
    public static string DescriptionAttributeStateIndicator_ResizeMode { get; }
    public static string DescriptionAttributeGaugeImage_ResizeMode { get; }
    public static string DescriptionAttributeNumericIndicator_Value { get; }
    public static string DescriptionAttributeKnob_Value { get; }
    public static string DescriptionAttributeCustomLabel_Value { get; }
    public static string DescriptionAttributeStateIndicator_Value { get; }
    public static string DescriptionAttributeValue6 { get; }
    public static string DescriptionAttributeInputValue_Value { get; }
    public static string DescriptionAttributeValue8 { get; }
    public static string DescriptionAttributeLinearPointer_ThermometerBulbSize { get; }
    public static string DescriptionAttributeCircularPointer_NeedleStyle { get; }
    public static string DescriptionAttributeKnob_CapFillGradientEndColor { get; }
    public static string DescriptionAttributeCircularPointer_CapFillGradientEndColor { get; }
    public static string DescriptionAttributeGaugeLabel_BackGradientEndColor { get; }
    public static string DescriptionAttributeNumericIndicator_BackGradientEndColor { get; }
    public static string DescriptionAttributeBackFrame_BackGradientEndColor { get; }
    public static string DescriptionAttributeCircularScale_GaugePivotPoint { get; }
    public static string DescriptionAttributeState_EndValue { get; }
    public static string DescriptionAttributeEndValue3 { get; }
    public static string DescriptionAttributeMapArea_Custom { get; }
    public static string DescriptionAttributeCustomLabels { get; }
    public static string DescriptionAttributeGaugeLabel_BackShadowOffset { get; }
    public static string DescriptionAttributeKnob_MarkerPosition { get; }
    public static string DescriptionAttributeGaugeSerializer_GaugeSerializer { get; }
    public static string DescriptionAttributePointers { get; }
    public static string DescriptionAttributeCircularScale_SweepAngle { get; }
    public static string DescriptionAttributeMinorTickMarkInt { get; }
    public static string DescriptionAttributeCompanyName { get; }
    public static string DescriptionAttributeBaseValueName { get; }
    public static string DescriptionAttributeGaugeLabel_BackHatchStyle { get; }
    public static string DescriptionAttributeBackFrame_BackHatchStyle { get; }
    public static string DescriptionAttributeNumericIndicator_BackHatchStyle { get; }
    public static string DescriptionAttributeStartValue { get; }
    public static string DescriptionAttributeState_StartValue { get; }
    public static string DescriptionAttributeCircularScale_MinorTickMark { get; }
    public static string DescriptionAttributeLinearScale_MinorTickMark { get; }
    public static string DescriptionAttributeBackFrame_FrameColor { get; }
    public static string DescriptionAttributeCustomLabel_DistanceFromScale { get; }
    public static string DescriptionAttributeDistanceFromScale3 { get; }
    public static string DescriptionAttributeDistanceFromScale4 { get; }
    public static string DescriptionAttributeDistanceFromScale5 { get; }
    public static string DescriptionAttributeDistanceFromScale6 { get; }
    public static string DescriptionAttributeRangeBase_DistanceFromScale { get; }
    public static string DescriptionAttributeDistanceFromScale8 { get; }
    public static string DescriptionAttributeGaugeContainer_Values { get; }
    public static string DescriptionAttributeGaugeContainer2_Values { get; }
    public static string DescriptionAttributeGaugeContainer_Images { get; }
    public static string DescriptionAttributeGaugeContainer2_Images { get; }
    public static string DescriptionAttributeCircularScale_Radius { get; }
    public static string DescriptionAttributeGaugeContainerEvent_PointerRangeTimeout { get; }
    public static string DescriptionAttributeGaugeContainerEvent_PointerPositionChange { get; }
    public static string DescriptionAttributeLogarithmicBase { get; }
    public static string DescriptionAttributeLinearPointer_Type { get; }
    public static string DescriptionAttributeCircularPointer_Type { get; }
    public static string DescriptionAttributeEnable { get; }
    public static string DescriptionAttributeNumericIndicator_Decimals { get; }
    public static string DescriptionAttributeState { get; }
    public static string DescriptionAttributeGaugeContainer_LoadingControlImage { get; }
    public static string DescriptionAttributeGaugeImage_Size { get; }
    public static string DescriptionAttributeStateIndicator_Size { get; }
    public static string DescriptionAttributeGaugeLabel_Size { get; }
    public static string DescriptionAttributeSize5 { get; }
    public static string DescriptionAttributeNumericIndicator_Size { get; }
    public static string DescriptionAttributeLinearScale_StartMargin { get; }
    public static string DescriptionAttributeGaugeContainer_TextAntiAliasingQuality { get; }
    public static string DescriptionAttributeGaugeContainer2_TextAntiAliasingQuality { get; }
    public static string DescriptionAttributeKnob_CapImageTransColor { get; }
    public static string DescriptionAttributeCircularPointer_CapImageTransColor { get; }
    public static string DescriptionAttributeGaugeContainerEvent_PointerScaleLeave { get; }
    public static string DescriptionAttributeGaugeLabel_TextShadowOffset { get; }
    public static string DescriptionAttributeCursor { get; }
    public static string DescriptionAttributeKnob_Cursor { get; }
    public static string DescriptionAttributeNumericIndicator_DampeningEnabled { get; }
    public static string DescriptionAttributeDampeningEnabled3 { get; }
    public static string DescriptionAttributeKnob_DampeningEnabled { get; }
    public static string DescriptionAttributeBackFrame_FrameShape { get; }
    public static string DescriptionAttributeNumericIndicator_ShowDecimalPoint { get; }
    public static string DescriptionAttributeKnob_ScaleName { get; }
    public static string DescriptionAttributeScaleName3 { get; }
    public static string DescriptionAttributeScaleName4 { get; }
    public static string DescriptionAttributeKnob_CapVisible { get; }
    public static string DescriptionAttributeCircularPointer_CapVisible { get; }
    public static string DescriptionAttributeTopImageTransColor { get; }
    public static string DescriptionAttributeGaugeSerializer_Content { get; }
    public static string DescriptionAttributeGaugeContainerEvent_RealTimeData { get; }
    public static string DescriptionAttributeInRangeTimeout { get; }
    public static string DescriptionAttributeSnappingInterval { get; }
    public static string DescriptionAttributeNumericIndicator_SnappingInterval { get; }
    public static string DescriptionAttributeGaugeContainerEvent_PostPaint { get; }
    public static string DescriptionAttributeStateIndicator_ZOrder { get; }
    public static string DescriptionAttributeGaugeLabel_ZOrder { get; }
    public static string DescriptionAttributeZOrder4 { get; }
    public static string DescriptionAttributeGaugeImage_ZOrder { get; }
    public static string DescriptionAttributeNumericIndicator_ZOrder { get; }
    public static string DescriptionAttributePeriod { get; }
    public static string DescriptionAttributeInRangeLabelColor { get; }
    public static string DescriptionAttributeGaugeContainer_RealTimeDataInterval { get; }
    public static string DescriptionAttributeBackFrame_FrameStyle { get; }
    public static string DescriptionAttributeNumericIndicator_OutOfRangeString { get; }
    public static string DescriptionAttributeStateIndicator_CurrentState { get; }
    public static string DescriptionAttributeLabelStyle { get; }
    public static string DescriptionAttributeLabelStyle3 { get; }
    public static string DescriptionAttributeTopImageHueColor { get; }
    public static string DescriptionAttributeKnob_MarkerRotateGradient { get; }
    public static string DescriptionAttributeInputValue_DataMember { get; }
    public static string DescriptionAttributeKnob_KnobStyle { get; }
    public static string DescriptionAttributeGaugeContainer_MapEnabled { get; }
    public static string DescriptionAttributeLinearPointer_ThermometerBackGradientType { get; }
    public static string DescriptionAttributeNumericIndicator_Font { get; }
    public static string DescriptionAttributeFont3 { get; }
    public static string DescriptionAttributeFont4 { get; }
    public static string DescriptionAttributeState_Font { get; }
    public static string DescriptionAttributeCustomLabel_Font { get; }
    public static string DescriptionAttributeStateIndicator_Font { get; }
    public static string DescriptionAttributeGaugeLabel_Font { get; }
    public static string DescriptionAttributeValueSource { get; }
    public static string DescriptionAttributeKnob_ValueSource { get; }
    public static string DescriptionAttributeGaugeContainer_Compression { get; }
    public static string DescriptionAttributeScales { get; }
    public static string DescriptionAttributeState_FillColor { get; }
    public static string DescriptionAttributeFillColor3 { get; }
    public static string DescriptionAttributeFillColor4 { get; }
    public static string DescriptionAttributeFillColor5 { get; }
    public static string DescriptionAttributeKnob_FillColor { get; }
    public static string DescriptionAttributeStateIndicator_FillColor { get; }
    public static string DescriptionAttributeFillColor8 { get; }
    public static string DescriptionAttributeGaugeContainer_ImageType { get; }
    public static string DescriptionAttributeInRangeTickMarkColor { get; }
    public static string DescriptionAttributeGaugeContainer_Height { get; }
    public static string DescriptionAttributeGaugeSize_Height { get; }
    public static string DescriptionAttributeCircularPointer_CapStyle { get; }
    public static string DescriptionAttributeLength { get; }
    public static string DescriptionAttributeLength3 { get; }
    public static string DescriptionAttributeNumericRange_DigitColor { get; }
    public static string DescriptionAttributeNumericIndicator_DigitColor { get; }
    public static string DescriptionAttributeGaugeContainerEvent_PrePaint { get; }
    public static string DescriptionAttributeInterval { get; }
    public static string DescriptionAttributeInterval3 { get; }
    public static string DescriptionAttributeInterval4 { get; }
    public static string DescriptionAttributeBackFrame_GlassEffect { get; }
    public static string DescriptionAttributeIntervalOffset { get; }
    public static string DescriptionAttributeIntervalOffset3 { get; }
    public static string DescriptionAttributeIntervalOffset4 { get; }
    public static string DescriptionAttributeGaugeContainer_ShadowIntensity { get; }
    public static string DescriptionAttributeGaugeContainer2_ShadowIntensity { get; }
    public static string DescriptionAttributePeriodType { get; }
    public static string DescriptionAttributeCollection { get; }
    public static string DescriptionAttributeCircularLabelStyle_AllowUpsideDown { get; }
    public static string DescriptionAttributeCustomLabel_AllowUpsideDown { get; }
    public static string DescriptionAttributeCircularPinLabel_AllowUpsideDown { get; }
    public static string DescriptionAttributeNumericIndicator_SeparatorColor { get; }
    public static string DescriptionAttributeClipContent { get; }
    public static string DescriptionAttributeKnob_CapFillHatchStyle { get; }
    public static string DescriptionAttributeCircularPointer_CapFillHatchStyle { get; }
    public static string DescriptionAttributeKnob_CapFillColor { get; }
    public static string DescriptionAttributeCircularPointer_CapFillColor { get; }
    public static string DescriptionAttributeLinearPointer_ThermometerBackGradientEndColor { get; }
    public static string DescriptionAttributeKnob_ImageOrigin { get; }
    public static string DescriptionAttributeImageOrigin3 { get; }
    public static string DescriptionAttributeFillGradientEndColor { get; }
    public static string DescriptionAttributeFillGradientEndColor3 { get; }
    public static string DescriptionAttributeStateIndicator_FillGradientEndColor { get; }
    public static string DescriptionAttributeFillGradientEndColor5 { get; }
    public static string DescriptionAttributeKnob_FillGradientEndColor { get; }
    public static string DescriptionAttributeBackFrame_FrameGradientType { get; }
    public static string DescriptionAttributeGaugeContainer_RenderType { get; }
    public static string DescriptionAttributeGaugeContainerEvent_Callback { get; }
    public static string DescriptionAttributeGaugeContainer_MapAreas { get; }
    public static string DescriptionAttributeSelected { get; }
    public static string DescriptionAttributeKnob_Selected { get; }
    public static string DescriptionAttributeSelected4 { get; }
    public static string DescriptionAttributeGaugeLabel_Selected { get; }
    public static string DescriptionAttributeGaugeImage_Selected { get; }
    public static string DescriptionAttributeSelected7 { get; }
    public static string DescriptionAttributeNumericIndicator_Selected { get; }
    public static string DescriptionAttributeStateIndicator_Selected { get; }
    public static string DescriptionAttributeSelected10 { get; }
    public static string DescriptionAttributeGaugeCore_ControlType { get; }
    public static string DescriptionAttributeBarStyle { get; }
    public static string DescriptionAttributeCalculatedValueIntegral_IntegralIntervalType { get; }
    public static string DescriptionAttributeNumericIndicator_FormatString { get; }
    public static string DescriptionAttributeFormatString3 { get; }
    public static string DescriptionAttributeKnob_FillGradientType { get; }
    public static string DescriptionAttributeFillGradientType3 { get; }
    public static string DescriptionAttributeState_FillGradientType { get; }
    public static string DescriptionAttributeFillGradientType5 { get; }
    public static string DescriptionAttributeFillGradientType6 { get; }
    public static string DescriptionAttributeStateIndicator_FillGradientType { get; }
    public static string DescriptionAttributeNumericIndicator_ShowLeadingZeros { get; }
    public static string DescriptionAttributeLinearScale_EndMargin { get; }
    public static string DescriptionAttributeNumericIndicator_Style { get; }
    public static string DescriptionAttributeKnob_Style { get; }
    public static string DescriptionAttributeStateIndicator_Style { get; }
    public static string DescriptionAttributeBackFrame_Style { get; }
    public static string DescriptionAttributeGaugeSerializer_ResetWhenLoading { get; }
    public static string DescriptionAttributeBackFrame_FrameWidth { get; }
    public static string DescriptionAttributeGaugeContainerEvent_ValueLimitOverflow { get; }
    public static string DescriptionAttributeMajorTickMarkInt { get; }
    public static string DescriptionAttributeCustomLabel_RotateLabel { get; }
    public static string DescriptionAttributeCircularPinLabel_RotateLabel { get; }
    public static string DescriptionAttributeGaugeContainer_ViewStateContent { get; }
    public static string DescriptionAttributeTypeName { get; }
    public static string DescriptionAttributeKnob_MarkerFillGradientEndColor { get; }
    public static string DescriptionAttributeGaugeContainer_GaugeContainer { get; }
    public static string DescriptionAttributeGaugeContainer2_GaugeContainer { get; }
    public static string DescriptionAttributeGaugeLocation_X { get; }
    public static string DescriptionAttributeImageOrigin_X { get; }
    public static string DescriptionAttributeGaugeContainer_LoadingDataImage { get; }
    public static string DescriptionAttributeNumericIndicator_SeparatorWidth { get; }
    public static string DescriptionAttributeStateIndicator_BorderColor { get; }
    public static string DescriptionAttributeBorderColor3 { get; }
    public static string DescriptionAttributeBorderColor4 { get; }
    public static string DescriptionAttributeBorderColor5 { get; }
    public static string DescriptionAttributeBorderColor6 { get; }
    public static string DescriptionAttributeState_BorderColor { get; }
    public static string DescriptionAttributeNumericIndicator_BorderColor { get; }
    public static string DescriptionAttributeBackFrame_BorderColor { get; }
    public static string DescriptionAttributeGaugeContainer_BorderColor { get; }
    public static string DescriptionAttributeGaugeLabel_BorderColor { get; }
    public static string DescriptionAttributeGaugeContainer_SelectionMarkerColor { get; }
    public static string DescriptionAttributeGaugeContainerEvent_PointerRangeLeave { get; }
    public static string DescriptionAttributeCircularGauge_Knobs { get; }
    public static string DescriptionAttributeBackFrame_FrameHatchStyle { get; }
    public static string DescriptionAttributeShadowOffset { get; }
    public static string DescriptionAttributeShadowOffset3 { get; }
    public static string DescriptionAttributeShadowOffset4 { get; }
    public static string DescriptionAttributeEnableGradient { get; }
    public static string DescriptionAttributeLinearPointer_ThermometerStyle { get; }
    public static string DescriptionAttributePrintingManager_PrintDocument { get; }
    public static string DescriptionAttributeGaugeImage_Href { get; }
    public static string DescriptionAttributeHref3 { get; }
    public static string DescriptionAttributeNumericIndicator_Href { get; }
    public static string DescriptionAttributeGaugeLabel_Href { get; }
    public static string DescriptionAttributeMapArea_Href { get; }
    public static string DescriptionAttributeHref7 { get; }
    public static string DescriptionAttributeHref8 { get; }
    public static string DescriptionAttributeStateIndicator_Href { get; }
    public static string DescriptionAttributeHref10 { get; }
    public static string DescriptionAttributeGaugeContainer_AutoLayout { get; }
    public static string DescriptionAttributeGaugeContainer2_AutoLayout { get; }
    public static string DescriptionAttributeGaugeContainerEvent_Click { get; }
    public static string DescriptionAttributeKnob_MarkerFillGradientType { get; }
    public static string DescriptionAttributeCalculatedValueIntegral_IntegralBase { get; }
    public static string DescriptionAttributeNumericIndicator_RefreshRate { get; }
    public static string DescriptionAttributeRefreshRate3 { get; }
    public static string DescriptionAttributeGaugeContainer_RefreshRate { get; }
    public static string DescriptionAttributeCircularPointer_CapFillGradientType { get; }
    public static string DescriptionAttributeKnob_CapFillGradientType { get; }
    public static string DescriptionAttributeInputValue_CalculatedValues { get; }
    public static string DescriptionAttributeParentElement { get; }
    public static string DescriptionAttributeGaugeSerializer_Format { get; }
    public static string DescriptionAttributePlacement { get; }
    public static string DescriptionAttributePlacement3 { get; }
    public static string DescriptionAttributeCustomLabel_Placement { get; }
    public static string DescriptionAttributePlacement5 { get; }
    public static string DescriptionAttributePlacement6 { get; }
    public static string DescriptionAttributePlacement7 { get; }
    public static string DescriptionAttributeRangeBase_Placement { get; }
    public static string DescriptionAttributeGaugeContainer_Printing { get; }
    public static string DescriptionAttributeWidth { get; }
    public static string DescriptionAttributeGaugeSize_Width { get; }
    public static string DescriptionAttributeGaugeContainer_Width { get; }
    public static string DescriptionAttributePointerBase_Width { get; }
    public static string DescriptionAttributeKnob_Width { get; }
    public static string DescriptionAttributeWidth7 { get; }
    public static string DescriptionAttributeLinearScale_Width { get; }
    public static string DescriptionAttributeWidth9 { get; }
    public static string DescriptionAttributeMaximumPin { get; }
    public static string DescriptionAttributeKnob_CapWidth { get; }
    public static string DescriptionAttributeCircularPointer_CapWidth { get; }
    public static string DescriptionAttributeGaugeSerializer_IgnoreUnknownXmlAttributes { get; }
    public static string DescriptionAttributeGaugeContainer_SelectionBorderColor { get; }
    public static string DescriptionAttributeInRangeTimeoutType { get; }
    public static string DescriptionAttributeFontUnit { get; }
    public static string DescriptionAttributeFontUnit3 { get; }
    public static string DescriptionAttributeNumericIndicator_FontUnit { get; }
    public static string DescriptionAttributeStateIndicator_States { get; }
    public static string DescriptionAttributeDataSource { get; }
    public static string DescriptionAttributeGaugeContainer_DataSource { get; }
    public static string DescriptionAttributeBackFrame { get; }
    public static string DescriptionAttributeGaugeContainer_BackFrame { get; }
    public static string DescriptionAttributeCalculatedValueRateOfChange_RateOfChangePeriodType { get; }
    public static string DescriptionAttributeCalculatedValueRateOfChange_RateOfChangePeriod { get; }
    public static string DescriptionAttributeCircularScale_StartAngle { get; }
    public static string DescriptionAttributeKnob_CapShadowOffset { get; }
    public static string DescriptionAttributeGaugeContainer_NumericIndicators { get; }
    public static string DescriptionAttributeGaugeContainer2_NumericIndicators { get; }
    public static string DescriptionAttributeGaugeContainer_NamedImages { get; }
    public static string DescriptionAttributeGaugeContainer2_NamedImages { get; }
    public static string DescriptionAttributeGaugeContainerEvent_PointerRangeEnter { get; }
    public static string DescriptionAttributeDampeningSweepTime { get; }
    public static string DescriptionAttributeLinearScale_MajorTickMark { get; }
    public static string DescriptionAttributeCircularScale_MajorTickMark { get; }
    public static string DescriptionAttributeNumericIndicator_LedDimColor { get; }
    public static string DescriptionAttributeGaugeContainer_RightToLeft { get; }
    public static string DescriptionAttributeLogarithmic { get; }
    public static string DescriptionAttributeCircularRange_EndWidth { get; }
    public static string DescriptionAttributeLinearRange_EndWidth { get; }
    public static string DescriptionAttributeNumericRange_DecimalColor { get; }
    public static string DescriptionAttributeNumericIndicator_DecimalColor { get; }
    public static string DescriptionAttributeMapArea_MapArea { get; }
    public static string DescriptionAttributeGaugeContainerEvent_ValueChanged { get; }
    public static string DescriptionAttributeMultiplier { get; }
    public static string DescriptionAttributeNumericIndicator_Multiplier { get; }
    public static string DescriptionAttributeCalculatedValueLinear_Multiplier { get; }
    public static string DescriptionAttributeKnob_MarkerWidth { get; }
    public static string DescriptionAttributeGaugeContainer_LoadingDataText { get; }
    public static string DescriptionAttributeState_Text { get; }
    public static string DescriptionAttributeGaugeLabel_Text { get; }
    public static string DescriptionAttributeStateIndicator_Text { get; }
    public static string DescriptionAttributeText5 { get; }
    public static string DescriptionAttributeGaugeContainer_TagAttributes { get; }
    public static string DescriptionAttributeKnob_CapRotateGradient { get; }
    public static string DescriptionAttributeKnob_MarkerFillHatchStyle { get; }
    public static string DescriptionAttributeGaugeLabel_BackColor { get; }
    public static string DescriptionAttributeBackFrame_BackColor { get; }
    public static string DescriptionAttributeNumericIndicator_BackColor { get; }
    public static string DescriptionAttributeLinearPointer_ThermometerBulbOffset { get; }
    public static string DescriptionAttributeBackFrame_ClipImage { get; }
    public static string DescriptionAttributeGaugeContainer_Labels { get; }
    public static string DescriptionAttributeGaugeContainer2_Labels { get; }
    public static string DescriptionAttributeGaugeContainer_StateIndicators { get; }
    public static string DescriptionAttributeGaugeContainer2_StateIndicators { get; }
    public static string DescriptionAttributeName { get; }
    public static string DescriptionAttributeName3 { get; }
    public static string DescriptionAttributeGaugeLabel_Name { get; }
    public static string DescriptionAttributeKnob_Name { get; }
    public static string DescriptionAttributeState_Name { get; }
    public static string DescriptionAttributeMapArea_Name { get; }
    public static string DescriptionAttributeCustomLabel_Name { get; }
    public static string DescriptionAttributeName9 { get; }
    public static string DescriptionAttributeName10 { get; }
    public static string DescriptionAttributeName11 { get; }
    public static string DescriptionAttributeStateIndicator_Name { get; }
    public static string DescriptionAttributeName13 { get; }
    public static string DescriptionAttributeNumericIndicator_Name { get; }
    public static string DescriptionAttributeGaugeImage_Name { get; }
    public static string DescriptionAttributeState_TriggerDelayType { get; }
    public static string DescriptionAttributeMapAreaType { get; }
    public static string DescriptionAttributeMapAreaID { get; }
    public static string DescriptionAttributeReportParameters { get; }
    public static string DescriptionAttributeMultiValueSeparator { get; }
    public static string DescriptionAttributeImageResolution { get; }
    public static string DescriptionAttributeImageSizing { get; }
    public static string DescriptionAttributeRSTooltip { get; }
    public static string DescriptionAttributeNamedElement_Tag { get; }
    public static string DescriptionAttributeGauge_AspectRatio { get; }
    public static string CategoryAppearance { get; }
    public static string CategoryBehavior { get; }
    public static string CategoryData { get; }
    public static string CategoryStates { get; }
    public static string CategoryLayout { get; }
    public static string CategoryMisc { get; }
    public static string CategoryImage { get; }
    public static string CategoryLabelsAndTickMarks { get; }
    public static string CategoryStyleSpecific { get; }
    public static string CategoryTypeSpecific { get; }
    public static string CategoryPosition { get; }
    public static string CategoryDesign { get; }
    public static string CategoryPointerCap { get; }
    public static string CategoryGaugeContainer { get; }
    public static string CategoryValues { get; }
    public static string CategoryKnobCap { get; }
    public static string CategoryMarker { get; }
    public static string CategoryGaugeBehavior { get; }
    public static string CategoryValue { get; }
    public static string CategoryRange { get; }
    public static string CategoryPointer { get; }
    public static string CategoryOutOfRangeAppearance { get; }
    public static string ExceptionBadDatasource { get; }
    public static string ExceptionBadDatasourceFields { get; }
    public static string ExceptioncalCulatedValueProvider { get; }
    public static string ExceptionCircularReference { get; }
    public static string ExceptionColumnNotFound { get; }
    public static string ExceptionDatabindState { get; }
    public static string ExceptionDecimalsDigitsDrror { get; }
    public static string ExceptionDecimalsNegative { get; }
    public static string ExceptionDigitsDecimals { get; }
    public static string ExceptionDigitsNegative { get; }
    public static string ExceptionDuplicateNameFailed { get; }
    public static string ExceptionDuplicateObjectFailed { get; }
    public static string ExceptionDurationNegative { get; }
    public static string ExceptionElementNotFound { get; }
    public static string ExceptionEmptyNameFailed { get; }
    public static string ExceptionGdiNonInitialized { get; }
    public static string ExceptionGenerateNameFailed { get; }
    public static string ExceptionHistoryCannotNull { get; }
    public static string ExceptionHotRegionInitialize { get; }
    public static string ExceptionHotRegionSupport { get; }
    public static string ExceptionImageLoaderInvalidLocation { get; }
    public static string ExceptionImageLoaderInvalidUrl { get; }
    public static string ExceptionImageLoaderMissingSerivice { get; }
    public static string ExceptionImagemapInvalidCircle { get; }
    public static string ExceptionImagemapInvalidObject { get; }
    public static string ExceptionImagemapInvalidPolygon { get; }
    public static string ExceptionImagemapInvalidRectangle { get; }
    public static string ExceptionIntervalNegative { get; }
    public static string ExceptionIntervalOffsetNegative { get; }
    public static string ExceptionInvalidImageDualFormat { get; }
    public static string ExceptionInvalidImageFormat { get; }
    public static string ExceptionInvalidImageMissingFormat { get; }
    public static string ExceptionInvalidImageUrlTag { get; }
    public static string ExceptionInvalidIndexer { get; }
    public static string ExceptionInvalidIndexer2 { get; }
    public static string ExceptionInvalidKeywordFormat { get; }
    public static string ExceptionInvalidMarkerType { get; }
    public static string ExceptionInvalidObjectType { get; }
    public static string ExceptionInvalidParent { get; }
    public static string ExceptionInvalidPlacementType { get; }
    public static string ExceptionInvalidServiceContainer { get; }
    public static string ExceptionInvalidValue { get; }
    public static string ExceptionListOutOfRange { get; }
    public static string ExceptionListUniqueName { get; }
    public static string ExceptionLocateCProviderFailed { get; }
    public static string ExceptionLocateIProviderFailed { get; }
    public static string ExceptionLocationFormat { get; }
    public static string ExceptionMapDurationArgument { get; }
    public static string ExceptionMapPeriodTypeArgument { get; }
    public static string ExceptionMargin { get; }
    public static string ExceptionMaxMin { get; }
    public static string ExceptionMinLog { get; }
    public static string ExceptionMinMax { get; }
    public static string ExceptionMustInRange { get; }
    public static string ExceptionNegativeValue { get; }
    public static string ExceptionOutOfrange { get; }
    public static string ExceptionOutOfRangeMinClose { get; }
    public static string ExceptionOutOfRangeMinOpen { get; }
    public static string ExceptionParentNotRenderable { get; }
    public static string ExceptionPeriodNegative { get; }
    public static string ExceptionPeriodTimespanArgument { get; }
    public static string ExceptionPlaybackCount { get; }
    public static string ExceptionPlaybackDataEmpty { get; }
    public static string ExceptionPropertyNegative { get; }
    public static string ExceptionSerializerHashProperty { get; }
    public static string ExceptionSerializerIdLoading { get; }
    public static string ExceptionSerializerInvalidBinary { get; }
    public static string ExceptionSerializerInvalidClassName { get; }
    public static string ExceptionSerializerInvalidConstructor { get; }
    public static string ExceptionSerializerInvalidContentFormat { get; }
    public static string ExceptionSerializerInvalidFlag { get; }
    public static string ExceptionSerializerInvalidObjectType { get; }
    public static string ExceptionSerializerInvalidPropertyName { get; }
    public static string ExceptionSerializerInvalidReader { get; }
    public static string ExceptionSerializerInvalidWriter { get; }
    public static string ExceptionSerializerMissingSerivice { get; }
    public static string ExceptionSerializerUnknownProperty { get; }
    public static string ExceptionSerializerUnsupportedAttribute { get; }
    public static string ExceptionSizeFormat { get; }
    public static string ExceptionSvgInvalidGradient { get; }
    public static string ExceptionSvgInvalidOutput { get; }
    public static string ExceptionSvgInvalidSize { get; }
    public static string ExceptionSvgInvalidWriter { get; }
    public static string ExceptionSvgMaximumGradients { get; }
    public static string ExceptionSvgWrapStrings { get; }
    public static string ExceptionUiMissingContext { get; }
    public static string ExceptionUiTypeEditorEnum { get; }
    public static string ExceptionUiTypeEditorEnumInt32 { get; }
    public static string ExceptionValueDbNull { get; }
    public static string ExceptionWebPixelSize { get; }
    public static string ExceptionWebPixelSizeWidth { get; }
    public static string ExceptionXamlBrushNotSupported { get; }
    public static string ExceptionXamlGeometryNotSupported { get; }
    public static string ExceptionXamlInvalidCanvasSize { get; }
    public static string ExceptionXamlShapeNotSupported { get; }
    public static string AccessibilityGaugeControlName { get; }
    public static string TraceStartingPaint { get; }
    public static string TracePaintComplete { get; }
    public static string TraceStartingRenderingStaticElements { get; }
    public static string TraceFinishedRenderingStaticElements { get; }
    public static string TraceStartingRenderingDynamicElements { get; }
    public static string TraceFinishedRenderingDynamicElements { get; }
    public static string TraceStartRenderingFrame { get; }
    public static string TraceFrameRenderingComplete { get; }
    public static string TraceStartRenderingImageFrame { get; }
    public static string TraceImageFrameRenderingComplete { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_DefaultFontFamily();
    public static string get_LabelFormatDescriptionF();
    public static string get_LabelFormatDescriptionC();
    public static string get_LabelFormatDescriptionE();
    public static string get_LabelFormatDescriptionG();
    public static string get_LabelFormatDescriptionN();
    public static string get_LabelFormatDescriptionP();
    public static string get_LabelFormatPrecisionMsg();
    public static string get_LabelFormatPrecisionMsgCaption();
    public static string get_LabelFormatInvalidCustomFormat();
    public static string get_GaugeDesignException();
    public static string get_GaugeDesignStack();
    public static string get_CollectionEditorMoveUp();
    public static string get_CollectionEditorMoveDown();
    public static string get_CollectionEditorClone();
    public static string get_ImageUIOpenFileFilter();
    public static string get_SerializerCollectionDefaultError();
    public static string get_NoImageString();
    public static string get_SvgHeaderComment();
    public static string get_DefaultMeazureStringSimbol();
    public static string get_DescriptionAttributeStateIndicator_FillHatchStyle();
    public static string get_DescriptionAttributeFillHatchStyle3();
    public static string get_DescriptionAttributeState_FillHatchStyle();
    public static string get_DescriptionAttributeFillHatchStyle5();
    public static string get_DescriptionAttributeKnob_FillHatchStyle();
    public static string get_DescriptionAttributeFillHatchStyle7();
    public static string get_DescriptionAttributeNumericIndicator_ToolTip();
    public static string get_DescriptionAttributeToolTip3();
    public static string get_DescriptionAttributeKnob_ToolTip();
    public static string get_DescriptionAttributeToolTip5();
    public static string get_DescriptionAttributeMapArea_ToolTip();
    public static string get_DescriptionAttributeGaugeLabel_ToolTip();
    public static string get_DescriptionAttributeToolTip8();
    public static string get_DescriptionAttributeToolTip9();
    public static string get_DescriptionAttributeStateIndicator_ToolTip();
    public static string get_DescriptionAttributeGaugeImage_ToolTip();
    public static string get_DescriptionAttributeGaugeContainer_DynamicWidth();
    public static string get_DescriptionAttributeGaugeContainer_DynamicHeight();
    public static string get_DescriptionAttributeGaugeContainer_DataSetName();
    public static string get_DescriptionAttributeGaugeContainer_ImageUrl();
    public static string get_DescriptionAttributeParentObject();
    public static string get_DescriptionAttributeParentObject3();
    public static string get_DescriptionAttributeLinearPointer_ThermometerBackColor();
    public static string get_DescriptionAttributeNamedImage_NamedImage();
    public static string get_DescriptionAttributeNumericIndicator_Digits();
    public static string get_DescriptionAttributeState_TriggerDelay();
    public static string get_DescriptionAttributeTickMarksOnTop();
    public static string get_DescriptionAttributeTextColor();
    public static string get_DescriptionAttributeGaugeLabel_TextColor();
    public static string get_DescriptionAttributeCustomLabel_TextColor();
    public static string get_DescriptionAttributeTextColor5();
    public static string get_DescriptionAttributeCircularPointer_CapOnTop();
    public static string get_DescriptionAttributeCalculatedValueLinear_Adder();
    public static string get_DescriptionAttributeKnob_Visible();
    public static string get_DescriptionAttributeVisible3();
    public static string get_DescriptionAttributeCustomLabel_Visible();
    public static string get_DescriptionAttributeGaugeLabel_Visible();
    public static string get_DescriptionAttributeVisible6();
    public static string get_DescriptionAttributeVisible7();
    public static string get_DescriptionAttributeNumericIndicator_Visible();
    public static string get_DescriptionAttributeVisible9();
    public static string get_DescriptionAttributeVisible10();
    public static string get_DescriptionAttributeGaugeImage_Visible();
    public static string get_DescriptionAttributeVisible12();
    public static string get_DescriptionAttributeStateIndicator_Visible();
    public static string get_DescriptionAttributeStateIndicator_Minimum();
    public static string get_DescriptionAttributeStateIndicator_Maximum();
    public static string get_DescriptionAttributeStateIndicator_IsPercentBased();
    public static string get_DescriptionAttributeNumericIndicator_BackGradientType();
    public static string get_DescriptionAttributeGaugeLabel_BackGradientType();
    public static string get_DescriptionAttributeBackFrame_BackGradientType();
    public static string get_DescriptionAttributeNumericIndicator_Maximum();
    public static string get_DescriptionAttributeMaximum3();
    public static string get_DescriptionAttributeMinimumPin();
    public static string get_DescriptionAttributeGaugeCore_BuildNumber();
    public static string get_DescriptionAttributeGaugeLabel_TextAlignment();
    public static string get_DescriptionAttributeImageHueColor();
    public static string get_DescriptionAttributeBackFrame_ImageHueColor();
    public static string get_DescriptionAttributeImageHueColor4();
    public static string get_DescriptionAttributeKnob_ImageHueColor();
    public static string get_DescriptionAttributeImageHueColor6();
    public static string get_DescriptionAttributeMapArea_Shape();
    public static string get_DescriptionAttributeShape3();
    public static string get_DescriptionAttributeBackFrame_Shape();
    public static string get_DescriptionAttributeBackFrame_Image();
    public static string get_DescriptionAttributeGaugeImage_Image();
    public static string get_DescriptionAttributeKnob_Image();
    public static string get_DescriptionAttributeImage5();
    public static string get_DescriptionAttributeNamedImage_Image();
    public static string get_DescriptionAttributeImage7();
    public static string get_DescriptionAttributeStateIndicator_Image();
    public static string get_DescriptionAttributeState_Image();
    public static string get_DescriptionAttributeLinearPointer_ThermometerBackHatchStyle();
    public static string get_DescriptionAttributeRefreshRateType();
    public static string get_DescriptionAttributeGradientDensity();
    public static string get_DescriptionAttributeBorderWidth();
    public static string get_DescriptionAttributeGaugeLabel_BorderWidth();
    public static string get_DescriptionAttributeStateIndicator_BorderWidth();
    public static string get_DescriptionAttributeBorderWidth5();
    public static string get_DescriptionAttributeBackFrame_BorderWidth();
    public static string get_DescriptionAttributeGaugeContainer_BorderWidth();
    public static string get_DescriptionAttributeState_BorderWidth();
    public static string get_DescriptionAttributeNumericIndicator_BorderWidth();
    public static string get_DescriptionAttributeBorderWidth9();
    public static string get_DescriptionAttributeBorderWidth10();
    public static string get_DescriptionAttributeGaugeImage_Transparency();
    public static string get_DescriptionAttributeBackFrame_BorderStyle();
    public static string get_DescriptionAttributeGaugeContainer_BorderStyle();
    public static string get_DescriptionAttributeBorderStyle3();
    public static string get_DescriptionAttributeNumericIndicator_BorderStyle();
    public static string get_DescriptionAttributeState_BorderStyle();
    public static string get_DescriptionAttributeGaugeLabel_BorderStyle();
    public static string get_DescriptionAttributeStateIndicator_BorderStyle();
    public static string get_DescriptionAttributeBorderStyle8();
    public static string get_DescriptionAttributeBorderStyle9();
    public static string get_DescriptionAttributeKnob_SnappingEnabled();
    public static string get_DescriptionAttributeNumericIndicator_SnappingEnabled();
    public static string get_DescriptionAttributeSnappingEnabled4();
    public static string get_DescriptionAttributeY();
    public static string get_DescriptionAttributeKnob_Interactive();
    public static string get_DescriptionAttributeInteractive3();
    public static string get_DescriptionAttributeGaugeContainer_WinControlUrl();
    public static string get_DescriptionAttributeGaugeSerializer_NonSerializableContent();
    public static string get_DescriptionAttributeCircularGauge_PivotPoint();
    public static string get_DescriptionAttributeNumericIndicator_IndicatorStyle();
    public static string get_DescriptionAttributeStateIndicator_IndicatorStyle();
    public static string get_DescriptionAttributeBackFrame_ImageTransColor();
    public static string get_DescriptionAttributeKnob_ImageTransColor();
    public static string get_DescriptionAttributeImageTransColor4();
    public static string get_DescriptionAttributeImageTransColor5();
    public static string get_DescriptionAttributeImageTransColor6();
    public static string get_DescriptionAttributeImageTransparency5();
    public static string get_DescriptionAttributeGaugeSerializer_SerializableContent();
    public static string get_DescriptionAttributeCircularLabelStyle_RotateLabels();
    public static string get_DescriptionAttributeCapImageHueColor();
    public static string get_DescriptionAttributeInputValue_ValueFieldMember();
    public static string get_DescriptionAttributeGaugeContainer_AntiAliasing();
    public static string get_DescriptionAttributeGaugeContainer2_AntiAliasing();
    public static string get_DescriptionAttributeShowEndLabels();
    public static string get_DescriptionAttributeNumericIndicator_Ranges();
    public static string get_DescriptionAttributeRanges3();
    public static string get_DescriptionAttributeDate();
    public static string get_DescriptionAttributeInputValue_HistoryDepthType();
    public static string get_DescriptionAttributeGaugeContainer_LinearGauges();
    public static string get_DescriptionAttributeGaugeContainer2_LinearGauges();
    public static string get_DescriptionAttributeCircularPointer_CapImage();
    public static string get_DescriptionAttributeKnob_CapImage();
    public static string get_DescriptionAttributeNumericIndicator_OffString();
    public static string get_DescriptionAttributeGaugeContainer_EnableViewState();
    public static string get_DescriptionAttributeStateIndicator_ImageTransparency();
    public static string get_DescriptionAttributeCustomLabel_TickMarkStyle();
    public static string get_DescriptionAttributeGaugeContainer_RenderAsControl();
    public static string get_DescriptionAttributeImageOrigin_NotSet();
    public static string get_DescriptionAttributeInRangeBarPointerColor();
    public static string get_DescriptionAttributeMapArea_Coordinates();
    public static string get_DescriptionAttributeGaugeSerializer_TemplateMode();
    public static string get_DescriptionAttributeInputValue_DateFieldMember();
    public static string get_DescriptionAttributeCalculatedValueIntegral_IntegralInterval();
    public static string get_DescriptionAttributeKnob_MarkerStyle();
    public static string get_DescriptionAttributePointerBase_MarkerStyle();
    public static string get_DescriptionAttributeMarkerStyle4();
    public static string get_DescriptionAttributeFontAngle();
    public static string get_DescriptionAttributeFontAngle3();
    public static string get_DescriptionAttributeCustomLabel_FontAngle();
    public static string get_DescriptionAttributeKnob_RotateGradient();
    public static string get_DescriptionAttributeNumericIndicator_ShowSign();
    public static string get_DescriptionAttributeLinearGauge_Orientation();
    public static string get_DescriptionAttributeGaugeLabel_Parent();
    public static string get_DescriptionAttributeNumericIndicator_Parent();
    public static string get_DescriptionAttributeStateIndicator_Parent();
    public static string get_DescriptionAttributeParent5();
    public static string get_DescriptionAttributeGaugeImage_Parent();
    public static string get_DescriptionAttributePointerBase_MarkerLength();
    public static string get_DescriptionAttributeKnob_MarkerLength();
    public static string get_DescriptionAttributeMarkerLength4();
    public static string get_DescriptionAttributeCircularRange_StartWidth();
    public static string get_DescriptionAttributeLinearRange_StartWidth();
    public static string get_DescriptionAttributeKnob_MarkerFillColor();
    public static string get_DescriptionAttributeCircularPointer_CapReflection();
    public static string get_DescriptionAttributeKnob_CapReflection();
    public static string get_DescriptionAttributeBackFrame_FrameGradientEndColor();
    public static string get_DescriptionAttributeGaugeContainer_CircularGauges();
    public static string get_DescriptionAttributeGaugeContainer2_CircularGauges();
    public static string get_DescriptionAttributeReversed();
    public static string get_DescriptionAttributeMapAreaCollection_MapAreaCollection();
    public static string get_DescriptionAttributeGaugeContainerEvent_PointerScaleEnter();
    public static string get_DescriptionAttributeInputValue_HistoryDepth();
    public static string get_DescriptionAttributeCircularPointer_CapImageOrigin();
    public static string get_DescriptionAttributeKnob_CapImageOrigin();
    public static string get_DescriptionAttributeBarStart();
    public static string get_DescriptionAttributeGaugeContainer_TopImage();
    public static string get_DescriptionAttributeGaugeContainer2_TopImage();
    public static string get_DescriptionAttributeTopImage4();
    public static string get_DescriptionAttributeNumericIndicator_Location();
    public static string get_DescriptionAttributeGaugeImage_Location();
    public static string get_DescriptionAttributeGaugeLabel_Location();
    public static string get_DescriptionAttributeLocation5();
    public static string get_DescriptionAttributeLocation6();
    public static string get_DescriptionAttributeStateIndicator_Location();
    public static string get_DescriptionAttributeValueLimit();
    public static string get_DescriptionAttributeCommon();
    public static string get_DescriptionAttributeGaugeContainer_TransparentColor();
    public static string get_DescriptionAttributeGaugeImage_Angle();
    public static string get_DescriptionAttributeGaugeLabel_Angle();
    public static string get_DescriptionAttributeStateIndicator_Angle();
    public static string get_DescriptionAttributeStateIndicator_ScaleFactor();
    public static string get_DescriptionAttributeLinearScale_Position();
    public static string get_DescriptionAttributeGaugeImage_MapAreaAttributes();
    public static string get_DescriptionAttributeNumericIndicator_MapAreaAttributes();
    public static string get_DescriptionAttributeMapAreaAttributes4();
    public static string get_DescriptionAttributeGaugeContainerEvent_PlaybackStateChanged();
    public static string get_DescriptionAttributeNumericIndicator_Minimum();
    public static string get_DescriptionAttributeMinimum3();
    public static string get_DescriptionAttributeResizeMode();
    public static string get_DescriptionAttributeStateIndicator_ResizeMode();
    public static string get_DescriptionAttributeGaugeImage_ResizeMode();
    public static string get_DescriptionAttributeNumericIndicator_Value();
    public static string get_DescriptionAttributeKnob_Value();
    public static string get_DescriptionAttributeCustomLabel_Value();
    public static string get_DescriptionAttributeStateIndicator_Value();
    public static string get_DescriptionAttributeValue6();
    public static string get_DescriptionAttributeInputValue_Value();
    public static string get_DescriptionAttributeValue8();
    public static string get_DescriptionAttributeLinearPointer_ThermometerBulbSize();
    public static string get_DescriptionAttributeCircularPointer_NeedleStyle();
    public static string get_DescriptionAttributeKnob_CapFillGradientEndColor();
    public static string get_DescriptionAttributeCircularPointer_CapFillGradientEndColor();
    public static string get_DescriptionAttributeGaugeLabel_BackGradientEndColor();
    public static string get_DescriptionAttributeNumericIndicator_BackGradientEndColor();
    public static string get_DescriptionAttributeBackFrame_BackGradientEndColor();
    public static string get_DescriptionAttributeCircularScale_GaugePivotPoint();
    public static string get_DescriptionAttributeState_EndValue();
    public static string get_DescriptionAttributeEndValue3();
    public static string get_DescriptionAttributeMapArea_Custom();
    public static string get_DescriptionAttributeCustomLabels();
    public static string get_DescriptionAttributeGaugeLabel_BackShadowOffset();
    public static string get_DescriptionAttributeKnob_MarkerPosition();
    public static string get_DescriptionAttributeGaugeSerializer_GaugeSerializer();
    public static string get_DescriptionAttributePointers();
    public static string get_DescriptionAttributeCircularScale_SweepAngle();
    public static string get_DescriptionAttributeMinorTickMarkInt();
    public static string get_DescriptionAttributeCompanyName();
    public static string get_DescriptionAttributeBaseValueName();
    public static string get_DescriptionAttributeGaugeLabel_BackHatchStyle();
    public static string get_DescriptionAttributeBackFrame_BackHatchStyle();
    public static string get_DescriptionAttributeNumericIndicator_BackHatchStyle();
    public static string get_DescriptionAttributeStartValue();
    public static string get_DescriptionAttributeState_StartValue();
    public static string get_DescriptionAttributeCircularScale_MinorTickMark();
    public static string get_DescriptionAttributeLinearScale_MinorTickMark();
    public static string get_DescriptionAttributeBackFrame_FrameColor();
    public static string get_DescriptionAttributeCustomLabel_DistanceFromScale();
    public static string get_DescriptionAttributeDistanceFromScale3();
    public static string get_DescriptionAttributeDistanceFromScale4();
    public static string get_DescriptionAttributeDistanceFromScale5();
    public static string get_DescriptionAttributeDistanceFromScale6();
    public static string get_DescriptionAttributeRangeBase_DistanceFromScale();
    public static string get_DescriptionAttributeDistanceFromScale8();
    public static string get_DescriptionAttributeGaugeContainer_Values();
    public static string get_DescriptionAttributeGaugeContainer2_Values();
    public static string get_DescriptionAttributeGaugeContainer_Images();
    public static string get_DescriptionAttributeGaugeContainer2_Images();
    public static string get_DescriptionAttributeCircularScale_Radius();
    public static string get_DescriptionAttributeGaugeContainerEvent_PointerRangeTimeout();
    public static string get_DescriptionAttributeGaugeContainerEvent_PointerPositionChange();
    public static string get_DescriptionAttributeLogarithmicBase();
    public static string get_DescriptionAttributeLinearPointer_Type();
    public static string get_DescriptionAttributeCircularPointer_Type();
    public static string get_DescriptionAttributeEnable();
    public static string get_DescriptionAttributeNumericIndicator_Decimals();
    public static string get_DescriptionAttributeState();
    public static string get_DescriptionAttributeGaugeContainer_LoadingControlImage();
    public static string get_DescriptionAttributeGaugeImage_Size();
    public static string get_DescriptionAttributeStateIndicator_Size();
    public static string get_DescriptionAttributeGaugeLabel_Size();
    public static string get_DescriptionAttributeSize5();
    public static string get_DescriptionAttributeNumericIndicator_Size();
    public static string get_DescriptionAttributeLinearScale_StartMargin();
    public static string get_DescriptionAttributeGaugeContainer_TextAntiAliasingQuality();
    public static string get_DescriptionAttributeGaugeContainer2_TextAntiAliasingQuality();
    public static string get_DescriptionAttributeKnob_CapImageTransColor();
    public static string get_DescriptionAttributeCircularPointer_CapImageTransColor();
    public static string get_DescriptionAttributeGaugeContainerEvent_PointerScaleLeave();
    public static string get_DescriptionAttributeGaugeLabel_TextShadowOffset();
    public static string get_DescriptionAttributeCursor();
    public static string get_DescriptionAttributeKnob_Cursor();
    public static string get_DescriptionAttributeNumericIndicator_DampeningEnabled();
    public static string get_DescriptionAttributeDampeningEnabled3();
    public static string get_DescriptionAttributeKnob_DampeningEnabled();
    public static string get_DescriptionAttributeBackFrame_FrameShape();
    public static string get_DescriptionAttributeNumericIndicator_ShowDecimalPoint();
    public static string get_DescriptionAttributeKnob_ScaleName();
    public static string get_DescriptionAttributeScaleName3();
    public static string get_DescriptionAttributeScaleName4();
    public static string get_DescriptionAttributeKnob_CapVisible();
    public static string get_DescriptionAttributeCircularPointer_CapVisible();
    public static string get_DescriptionAttributeTopImageTransColor();
    public static string get_DescriptionAttributeGaugeSerializer_Content();
    public static string get_DescriptionAttributeGaugeContainerEvent_RealTimeData();
    public static string get_DescriptionAttributeInRangeTimeout();
    public static string get_DescriptionAttributeSnappingInterval();
    public static string get_DescriptionAttributeNumericIndicator_SnappingInterval();
    public static string get_DescriptionAttributeGaugeContainerEvent_PostPaint();
    public static string get_DescriptionAttributeStateIndicator_ZOrder();
    public static string get_DescriptionAttributeGaugeLabel_ZOrder();
    public static string get_DescriptionAttributeZOrder4();
    public static string get_DescriptionAttributeGaugeImage_ZOrder();
    public static string get_DescriptionAttributeNumericIndicator_ZOrder();
    public static string get_DescriptionAttributePeriod();
    public static string get_DescriptionAttributeInRangeLabelColor();
    public static string get_DescriptionAttributeGaugeContainer_RealTimeDataInterval();
    public static string get_DescriptionAttributeBackFrame_FrameStyle();
    public static string get_DescriptionAttributeNumericIndicator_OutOfRangeString();
    public static string get_DescriptionAttributeStateIndicator_CurrentState();
    public static string get_DescriptionAttributeLabelStyle();
    public static string get_DescriptionAttributeLabelStyle3();
    public static string get_DescriptionAttributeTopImageHueColor();
    public static string get_DescriptionAttributeKnob_MarkerRotateGradient();
    public static string get_DescriptionAttributeInputValue_DataMember();
    public static string get_DescriptionAttributeKnob_KnobStyle();
    public static string get_DescriptionAttributeGaugeContainer_MapEnabled();
    public static string get_DescriptionAttributeLinearPointer_ThermometerBackGradientType();
    public static string get_DescriptionAttributeNumericIndicator_Font();
    public static string get_DescriptionAttributeFont3();
    public static string get_DescriptionAttributeFont4();
    public static string get_DescriptionAttributeState_Font();
    public static string get_DescriptionAttributeCustomLabel_Font();
    public static string get_DescriptionAttributeStateIndicator_Font();
    public static string get_DescriptionAttributeGaugeLabel_Font();
    public static string get_DescriptionAttributeValueSource();
    public static string get_DescriptionAttributeKnob_ValueSource();
    public static string get_DescriptionAttributeGaugeContainer_Compression();
    public static string get_DescriptionAttributeScales();
    public static string get_DescriptionAttributeState_FillColor();
    public static string get_DescriptionAttributeFillColor3();
    public static string get_DescriptionAttributeFillColor4();
    public static string get_DescriptionAttributeFillColor5();
    public static string get_DescriptionAttributeKnob_FillColor();
    public static string get_DescriptionAttributeStateIndicator_FillColor();
    public static string get_DescriptionAttributeFillColor8();
    public static string get_DescriptionAttributeGaugeContainer_ImageType();
    public static string get_DescriptionAttributeInRangeTickMarkColor();
    public static string get_DescriptionAttributeGaugeContainer_Height();
    public static string get_DescriptionAttributeGaugeSize_Height();
    public static string get_DescriptionAttributeCircularPointer_CapStyle();
    public static string get_DescriptionAttributeLength();
    public static string get_DescriptionAttributeLength3();
    public static string get_DescriptionAttributeNumericRange_DigitColor();
    public static string get_DescriptionAttributeNumericIndicator_DigitColor();
    public static string get_DescriptionAttributeGaugeContainerEvent_PrePaint();
    public static string get_DescriptionAttributeInterval();
    public static string get_DescriptionAttributeInterval3();
    public static string get_DescriptionAttributeInterval4();
    public static string get_DescriptionAttributeBackFrame_GlassEffect();
    public static string get_DescriptionAttributeIntervalOffset();
    public static string get_DescriptionAttributeIntervalOffset3();
    public static string get_DescriptionAttributeIntervalOffset4();
    public static string get_DescriptionAttributeGaugeContainer_ShadowIntensity();
    public static string get_DescriptionAttributeGaugeContainer2_ShadowIntensity();
    public static string get_DescriptionAttributePeriodType();
    public static string get_DescriptionAttributeCollection();
    public static string get_DescriptionAttributeCircularLabelStyle_AllowUpsideDown();
    public static string get_DescriptionAttributeCustomLabel_AllowUpsideDown();
    public static string get_DescriptionAttributeCircularPinLabel_AllowUpsideDown();
    public static string get_DescriptionAttributeNumericIndicator_SeparatorColor();
    public static string get_DescriptionAttributeClipContent();
    public static string get_DescriptionAttributeKnob_CapFillHatchStyle();
    public static string get_DescriptionAttributeCircularPointer_CapFillHatchStyle();
    public static string get_DescriptionAttributeKnob_CapFillColor();
    public static string get_DescriptionAttributeCircularPointer_CapFillColor();
    public static string get_DescriptionAttributeLinearPointer_ThermometerBackGradientEndColor();
    public static string get_DescriptionAttributeKnob_ImageOrigin();
    public static string get_DescriptionAttributeImageOrigin3();
    public static string get_DescriptionAttributeFillGradientEndColor();
    public static string get_DescriptionAttributeFillGradientEndColor3();
    public static string get_DescriptionAttributeStateIndicator_FillGradientEndColor();
    public static string get_DescriptionAttributeFillGradientEndColor5();
    public static string get_DescriptionAttributeKnob_FillGradientEndColor();
    public static string get_DescriptionAttributeBackFrame_FrameGradientType();
    public static string get_DescriptionAttributeGaugeContainer_RenderType();
    public static string get_DescriptionAttributeGaugeContainerEvent_Callback();
    public static string get_DescriptionAttributeGaugeContainer_MapAreas();
    public static string get_DescriptionAttributeSelected();
    public static string get_DescriptionAttributeKnob_Selected();
    public static string get_DescriptionAttributeSelected4();
    public static string get_DescriptionAttributeGaugeLabel_Selected();
    public static string get_DescriptionAttributeGaugeImage_Selected();
    public static string get_DescriptionAttributeSelected7();
    public static string get_DescriptionAttributeNumericIndicator_Selected();
    public static string get_DescriptionAttributeStateIndicator_Selected();
    public static string get_DescriptionAttributeSelected10();
    public static string get_DescriptionAttributeGaugeCore_ControlType();
    public static string get_DescriptionAttributeBarStyle();
    public static string get_DescriptionAttributeCalculatedValueIntegral_IntegralIntervalType();
    public static string get_DescriptionAttributeNumericIndicator_FormatString();
    public static string get_DescriptionAttributeFormatString3();
    public static string get_DescriptionAttributeKnob_FillGradientType();
    public static string get_DescriptionAttributeFillGradientType3();
    public static string get_DescriptionAttributeState_FillGradientType();
    public static string get_DescriptionAttributeFillGradientType5();
    public static string get_DescriptionAttributeFillGradientType6();
    public static string get_DescriptionAttributeStateIndicator_FillGradientType();
    public static string get_DescriptionAttributeNumericIndicator_ShowLeadingZeros();
    public static string get_DescriptionAttributeLinearScale_EndMargin();
    public static string get_DescriptionAttributeNumericIndicator_Style();
    public static string get_DescriptionAttributeKnob_Style();
    public static string get_DescriptionAttributeStateIndicator_Style();
    public static string get_DescriptionAttributeBackFrame_Style();
    public static string get_DescriptionAttributeGaugeSerializer_ResetWhenLoading();
    public static string get_DescriptionAttributeBackFrame_FrameWidth();
    public static string get_DescriptionAttributeGaugeContainerEvent_ValueLimitOverflow();
    public static string get_DescriptionAttributeMajorTickMarkInt();
    public static string get_DescriptionAttributeCustomLabel_RotateLabel();
    public static string get_DescriptionAttributeCircularPinLabel_RotateLabel();
    public static string get_DescriptionAttributeGaugeContainer_ViewStateContent();
    public static string get_DescriptionAttributeTypeName();
    public static string get_DescriptionAttributeKnob_MarkerFillGradientEndColor();
    public static string get_DescriptionAttributeGaugeContainer_GaugeContainer();
    public static string get_DescriptionAttributeGaugeContainer2_GaugeContainer();
    public static string get_DescriptionAttributeGaugeLocation_X();
    public static string get_DescriptionAttributeImageOrigin_X();
    public static string get_DescriptionAttributeGaugeContainer_LoadingDataImage();
    public static string get_DescriptionAttributeNumericIndicator_SeparatorWidth();
    public static string get_DescriptionAttributeStateIndicator_BorderColor();
    public static string get_DescriptionAttributeBorderColor3();
    public static string get_DescriptionAttributeBorderColor4();
    public static string get_DescriptionAttributeBorderColor5();
    public static string get_DescriptionAttributeBorderColor6();
    public static string get_DescriptionAttributeState_BorderColor();
    public static string get_DescriptionAttributeNumericIndicator_BorderColor();
    public static string get_DescriptionAttributeBackFrame_BorderColor();
    public static string get_DescriptionAttributeGaugeContainer_BorderColor();
    public static string get_DescriptionAttributeGaugeLabel_BorderColor();
    public static string get_DescriptionAttributeGaugeContainer_SelectionMarkerColor();
    public static string get_DescriptionAttributeGaugeContainerEvent_PointerRangeLeave();
    public static string get_DescriptionAttributeCircularGauge_Knobs();
    public static string get_DescriptionAttributeBackFrame_FrameHatchStyle();
    public static string get_DescriptionAttributeShadowOffset();
    public static string get_DescriptionAttributeShadowOffset3();
    public static string get_DescriptionAttributeShadowOffset4();
    public static string get_DescriptionAttributeEnableGradient();
    public static string get_DescriptionAttributeLinearPointer_ThermometerStyle();
    public static string get_DescriptionAttributePrintingManager_PrintDocument();
    public static string get_DescriptionAttributeGaugeImage_Href();
    public static string get_DescriptionAttributeHref3();
    public static string get_DescriptionAttributeNumericIndicator_Href();
    public static string get_DescriptionAttributeGaugeLabel_Href();
    public static string get_DescriptionAttributeMapArea_Href();
    public static string get_DescriptionAttributeHref7();
    public static string get_DescriptionAttributeHref8();
    public static string get_DescriptionAttributeStateIndicator_Href();
    public static string get_DescriptionAttributeHref10();
    public static string get_DescriptionAttributeGaugeContainer_AutoLayout();
    public static string get_DescriptionAttributeGaugeContainer2_AutoLayout();
    public static string get_DescriptionAttributeGaugeContainerEvent_Click();
    public static string get_DescriptionAttributeKnob_MarkerFillGradientType();
    public static string get_DescriptionAttributeCalculatedValueIntegral_IntegralBase();
    public static string get_DescriptionAttributeNumericIndicator_RefreshRate();
    public static string get_DescriptionAttributeRefreshRate3();
    public static string get_DescriptionAttributeGaugeContainer_RefreshRate();
    public static string get_DescriptionAttributeCircularPointer_CapFillGradientType();
    public static string get_DescriptionAttributeKnob_CapFillGradientType();
    public static string get_DescriptionAttributeInputValue_CalculatedValues();
    public static string get_DescriptionAttributeParentElement();
    public static string get_DescriptionAttributeGaugeSerializer_Format();
    public static string get_DescriptionAttributePlacement();
    public static string get_DescriptionAttributePlacement3();
    public static string get_DescriptionAttributeCustomLabel_Placement();
    public static string get_DescriptionAttributePlacement5();
    public static string get_DescriptionAttributePlacement6();
    public static string get_DescriptionAttributePlacement7();
    public static string get_DescriptionAttributeRangeBase_Placement();
    public static string get_DescriptionAttributeGaugeContainer_Printing();
    public static string get_DescriptionAttributeWidth();
    public static string get_DescriptionAttributeGaugeSize_Width();
    public static string get_DescriptionAttributeGaugeContainer_Width();
    public static string get_DescriptionAttributePointerBase_Width();
    public static string get_DescriptionAttributeKnob_Width();
    public static string get_DescriptionAttributeWidth7();
    public static string get_DescriptionAttributeLinearScale_Width();
    public static string get_DescriptionAttributeWidth9();
    public static string get_DescriptionAttributeMaximumPin();
    public static string get_DescriptionAttributeKnob_CapWidth();
    public static string get_DescriptionAttributeCircularPointer_CapWidth();
    public static string get_DescriptionAttributeGaugeSerializer_IgnoreUnknownXmlAttributes();
    public static string get_DescriptionAttributeGaugeContainer_SelectionBorderColor();
    public static string get_DescriptionAttributeInRangeTimeoutType();
    public static string get_DescriptionAttributeFontUnit();
    public static string get_DescriptionAttributeFontUnit3();
    public static string get_DescriptionAttributeNumericIndicator_FontUnit();
    public static string get_DescriptionAttributeStateIndicator_States();
    public static string get_DescriptionAttributeDataSource();
    public static string get_DescriptionAttributeGaugeContainer_DataSource();
    public static string get_DescriptionAttributeBackFrame();
    public static string get_DescriptionAttributeGaugeContainer_BackFrame();
    public static string get_DescriptionAttributeCalculatedValueRateOfChange_RateOfChangePeriodType();
    public static string get_DescriptionAttributeCalculatedValueRateOfChange_RateOfChangePeriod();
    public static string get_DescriptionAttributeCircularScale_StartAngle();
    public static string get_DescriptionAttributeKnob_CapShadowOffset();
    public static string get_DescriptionAttributeGaugeContainer_NumericIndicators();
    public static string get_DescriptionAttributeGaugeContainer2_NumericIndicators();
    public static string get_DescriptionAttributeGaugeContainer_NamedImages();
    public static string get_DescriptionAttributeGaugeContainer2_NamedImages();
    public static string get_DescriptionAttributeGaugeContainerEvent_PointerRangeEnter();
    public static string get_DescriptionAttributeDampeningSweepTime();
    public static string get_DescriptionAttributeLinearScale_MajorTickMark();
    public static string get_DescriptionAttributeCircularScale_MajorTickMark();
    public static string get_DescriptionAttributeNumericIndicator_LedDimColor();
    public static string get_DescriptionAttributeGaugeContainer_RightToLeft();
    public static string get_DescriptionAttributeLogarithmic();
    public static string get_DescriptionAttributeCircularRange_EndWidth();
    public static string get_DescriptionAttributeLinearRange_EndWidth();
    public static string get_DescriptionAttributeNumericRange_DecimalColor();
    public static string get_DescriptionAttributeNumericIndicator_DecimalColor();
    public static string get_DescriptionAttributeMapArea_MapArea();
    public static string get_DescriptionAttributeGaugeContainerEvent_ValueChanged();
    public static string get_DescriptionAttributeMultiplier();
    public static string get_DescriptionAttributeNumericIndicator_Multiplier();
    public static string get_DescriptionAttributeCalculatedValueLinear_Multiplier();
    public static string get_DescriptionAttributeKnob_MarkerWidth();
    public static string get_DescriptionAttributeGaugeContainer_LoadingDataText();
    public static string get_DescriptionAttributeState_Text();
    public static string get_DescriptionAttributeGaugeLabel_Text();
    public static string get_DescriptionAttributeStateIndicator_Text();
    public static string get_DescriptionAttributeText5();
    public static string get_DescriptionAttributeGaugeContainer_TagAttributes();
    public static string get_DescriptionAttributeKnob_CapRotateGradient();
    public static string get_DescriptionAttributeKnob_MarkerFillHatchStyle();
    public static string get_DescriptionAttributeGaugeLabel_BackColor();
    public static string get_DescriptionAttributeBackFrame_BackColor();
    public static string get_DescriptionAttributeNumericIndicator_BackColor();
    public static string get_DescriptionAttributeLinearPointer_ThermometerBulbOffset();
    public static string get_DescriptionAttributeBackFrame_ClipImage();
    public static string get_DescriptionAttributeGaugeContainer_Labels();
    public static string get_DescriptionAttributeGaugeContainer2_Labels();
    public static string get_DescriptionAttributeGaugeContainer_StateIndicators();
    public static string get_DescriptionAttributeGaugeContainer2_StateIndicators();
    public static string get_DescriptionAttributeName();
    public static string get_DescriptionAttributeName3();
    public static string get_DescriptionAttributeGaugeLabel_Name();
    public static string get_DescriptionAttributeKnob_Name();
    public static string get_DescriptionAttributeState_Name();
    public static string get_DescriptionAttributeMapArea_Name();
    public static string get_DescriptionAttributeCustomLabel_Name();
    public static string get_DescriptionAttributeName9();
    public static string get_DescriptionAttributeName10();
    public static string get_DescriptionAttributeName11();
    public static string get_DescriptionAttributeStateIndicator_Name();
    public static string get_DescriptionAttributeName13();
    public static string get_DescriptionAttributeNumericIndicator_Name();
    public static string get_DescriptionAttributeGaugeImage_Name();
    public static string get_DescriptionAttributeState_TriggerDelayType();
    public static string get_DescriptionAttributeMapAreaType();
    public static string get_DescriptionAttributeMapAreaID();
    public static string get_DescriptionAttributeReportParameters();
    public static string get_DescriptionAttributeMultiValueSeparator();
    public static string get_DescriptionAttributeImageResolution();
    public static string get_DescriptionAttributeImageSizing();
    public static string get_DescriptionAttributeRSTooltip();
    public static string get_DescriptionAttributeNamedElement_Tag();
    public static string get_DescriptionAttributeGauge_AspectRatio();
    public static string get_CategoryAppearance();
    public static string get_CategoryBehavior();
    public static string get_CategoryData();
    public static string get_CategoryStates();
    public static string get_CategoryLayout();
    public static string get_CategoryMisc();
    public static string get_CategoryImage();
    public static string get_CategoryLabelsAndTickMarks();
    public static string get_CategoryStyleSpecific();
    public static string get_CategoryTypeSpecific();
    public static string get_CategoryPosition();
    public static string get_CategoryDesign();
    public static string get_CategoryPointerCap();
    public static string get_CategoryGaugeContainer();
    public static string get_CategoryValues();
    public static string get_CategoryKnobCap();
    public static string get_CategoryMarker();
    public static string get_CategoryGaugeBehavior();
    public static string get_CategoryValue();
    public static string get_CategoryRange();
    public static string get_CategoryPointer();
    public static string get_CategoryOutOfRangeAppearance();
    public static string get_ExceptionBadDatasource();
    public static string get_ExceptionBadDatasourceFields();
    public static string get_ExceptioncalCulatedValueProvider();
    public static string get_ExceptionCircularReference();
    public static string get_ExceptionColumnNotFound();
    public static string get_ExceptionDatabindState();
    public static string get_ExceptionDecimalsDigitsDrror();
    public static string get_ExceptionDecimalsNegative();
    public static string get_ExceptionDigitsDecimals();
    public static string get_ExceptionDigitsNegative();
    public static string get_ExceptionDuplicateNameFailed();
    public static string get_ExceptionDuplicateObjectFailed();
    public static string get_ExceptionDurationNegative();
    public static string get_ExceptionElementNotFound();
    public static string get_ExceptionEmptyNameFailed();
    public static string get_ExceptionGdiNonInitialized();
    public static string get_ExceptionGenerateNameFailed();
    public static string get_ExceptionHistoryCannotNull();
    public static string get_ExceptionHotRegionInitialize();
    public static string get_ExceptionHotRegionSupport();
    public static string get_ExceptionImageLoaderInvalidLocation();
    public static string get_ExceptionImageLoaderInvalidUrl();
    public static string get_ExceptionImageLoaderMissingSerivice();
    public static string get_ExceptionImagemapInvalidCircle();
    public static string get_ExceptionImagemapInvalidObject();
    public static string get_ExceptionImagemapInvalidPolygon();
    public static string get_ExceptionImagemapInvalidRectangle();
    public static string get_ExceptionIntervalNegative();
    public static string get_ExceptionIntervalOffsetNegative();
    public static string get_ExceptionInvalidImageDualFormat();
    public static string get_ExceptionInvalidImageFormat();
    public static string get_ExceptionInvalidImageMissingFormat();
    public static string get_ExceptionInvalidImageUrlTag();
    public static string get_ExceptionInvalidIndexer();
    public static string get_ExceptionInvalidIndexer2();
    public static string get_ExceptionInvalidKeywordFormat();
    public static string get_ExceptionInvalidMarkerType();
    public static string get_ExceptionInvalidObjectType();
    public static string get_ExceptionInvalidParent();
    public static string get_ExceptionInvalidPlacementType();
    public static string get_ExceptionInvalidServiceContainer();
    public static string get_ExceptionInvalidValue();
    public static string get_ExceptionListOutOfRange();
    public static string get_ExceptionListUniqueName();
    public static string get_ExceptionLocateCProviderFailed();
    public static string get_ExceptionLocateIProviderFailed();
    public static string get_ExceptionLocationFormat();
    public static string get_ExceptionMapDurationArgument();
    public static string get_ExceptionMapPeriodTypeArgument();
    public static string get_ExceptionMargin();
    public static string get_ExceptionMaxMin();
    public static string get_ExceptionMinLog();
    public static string get_ExceptionMinMax();
    public static string get_ExceptionMustInRange();
    public static string get_ExceptionNegativeValue();
    public static string get_ExceptionOutOfrange();
    public static string get_ExceptionOutOfRangeMinClose();
    public static string get_ExceptionOutOfRangeMinOpen();
    public static string get_ExceptionParentNotRenderable();
    public static string get_ExceptionPeriodNegative();
    public static string get_ExceptionPeriodTimespanArgument();
    public static string get_ExceptionPlaybackCount();
    public static string get_ExceptionPlaybackDataEmpty();
    public static string get_ExceptionPropertyNegative();
    public static string get_ExceptionSerializerHashProperty();
    public static string get_ExceptionSerializerIdLoading();
    public static string get_ExceptionSerializerInvalidBinary();
    public static string get_ExceptionSerializerInvalidClassName();
    public static string get_ExceptionSerializerInvalidConstructor();
    public static string get_ExceptionSerializerInvalidContentFormat();
    public static string get_ExceptionSerializerInvalidFlag();
    public static string get_ExceptionSerializerInvalidObjectType();
    public static string get_ExceptionSerializerInvalidPropertyName();
    public static string get_ExceptionSerializerInvalidReader();
    public static string get_ExceptionSerializerInvalidWriter();
    public static string get_ExceptionSerializerMissingSerivice();
    public static string get_ExceptionSerializerUnknownProperty();
    public static string get_ExceptionSerializerUnsupportedAttribute();
    public static string get_ExceptionSizeFormat();
    public static string get_ExceptionSvgInvalidGradient();
    public static string get_ExceptionSvgInvalidOutput();
    public static string get_ExceptionSvgInvalidSize();
    public static string get_ExceptionSvgInvalidWriter();
    public static string get_ExceptionSvgMaximumGradients();
    public static string get_ExceptionSvgWrapStrings();
    public static string get_ExceptionUiMissingContext();
    public static string get_ExceptionUiTypeEditorEnum();
    public static string get_ExceptionUiTypeEditorEnumInt32();
    public static string get_ExceptionValueDbNull();
    public static string get_ExceptionWebPixelSize();
    public static string get_ExceptionWebPixelSizeWidth();
    public static string get_ExceptionXamlBrushNotSupported();
    public static string get_ExceptionXamlGeometryNotSupported();
    public static string get_ExceptionXamlInvalidCanvasSize();
    public static string get_ExceptionXamlShapeNotSupported();
    public static string get_AccessibilityGaugeControlName();
    public static string get_TraceStartingPaint();
    public static string get_TracePaintComplete();
    public static string get_TraceStartingRenderingStaticElements();
    public static string get_TraceFinishedRenderingStaticElements();
    public static string get_TraceStartingRenderingDynamicElements();
    public static string get_TraceFinishedRenderingDynamicElements();
    public static string get_TraceStartRenderingFrame();
    public static string get_TraceFrameRenderingComplete();
    public static string get_TraceStartRenderingImageFrame();
    public static string get_TraceImageFrameRenderingComplete();
    public static string GaugeDesignSite(string siteName);
    public static string NotImplemented(string item);
    public static string ExceptionTraceManagerUnsupportedType(string name);
    public static string AccessibilityCircularGaugeName(string name);
    public static string AccessibilityKnobName(string name);
    public static string AccessibilityCircularPointerName(string name);
    public static string AccessibilityCircularRangeName(string name);
    public static string AccessibilityCircularScaleName(string name);
    public static string AccessibilityLinearGaugeName(string name);
    public static string AccessibilityLinearPointerName(string name);
    public static string AccessibilityLinearRangeName(string name);
    public static string AccessibilityLinearScaleName(string name);
    public static string AccessibilityGaugeImageName(string name);
    public static string AccessibilityLabelName(string name);
    public static string AccessibilityNumericIndicatorName(string name);
    public static string AccessibilityStateIndicatorName(string name);
    public static string TraceStartRendering(string name);
    public static string TraceRenderingComplete(string name);
}
[AttributeUsageAttribute("32767")]
internal class Microsoft.Reporting.Gauge.WebForms.SRCategoryAttribute : CategoryAttribute {
    public SRCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class Microsoft.Reporting.Gauge.WebForms.SRDescriptionAttribute : DescriptionAttribute {
    private bool replaced;
    public string Description { get; }
    public SRDescriptionAttribute(string description);
    public virtual string get_Description();
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.StateConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.State : Range {
    private Font font;
    private Color borderColor;
    private GaugeDashStyle borderStyle;
    private int borderWidth;
    private Color fillColor;
    private GradientType fillGradientType;
    private Color fillGradientEndColor;
    private GaugeHatchStyle fillHatchStyle;
    private string text;
    private StateIndicatorStyle style;
    private float scaleFactor;
    private string image;
    private Color imageTransColor;
    private Color imageHueColor;
    [SRCategoryAttribute("CategoryMisc")]
[SRDescriptionAttribute("DescriptionAttributeState_Name")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeState_EndValue")]
[DefaultValueAttribute("70")]
public double StartValue { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeState_EndValue")]
[DefaultValueAttribute("100")]
public double EndValue { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeState_TriggerDelay")]
[DefaultValueAttribute("0")]
internal double TriggerDelay { get; internal set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeState_TriggerDelayType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
internal PeriodType TriggerDelayType { get; internal set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeState_Font")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8.25pt")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeState_BorderColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeState_BorderStyle")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeState_BorderWidth")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeState_FillColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Red")]
public Color FillColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeState_FillGradientType")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType FillGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFillGradientEndColor5")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "DarkRed")]
public Color FillGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeState_FillHatchStyle")]
[EditorAttribute("Microsoft.Reporting.Gauge.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeHatchStyle FillHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeState_Text")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Text")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_IndicatorStyle")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public StateIndicatorStyle IndicatorStyle { get; public set; }
    [SRCategoryAttribute("CategoryPosition")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_ScaleFactor")]
[DefaultValueAttribute("1")]
[ValidateBound("0", "1")]
public float ScaleFactor { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeState_Image")]
[DefaultValueAttribute("")]
public string Image { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeImageTransColor6")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageTransColor { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeImageHueColor4")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageHueColor { get; public set; }
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual double get_StartValue();
    public virtual void set_StartValue(double value);
    public virtual double get_EndValue();
    public virtual void set_EndValue(double value);
    internal double get_TriggerDelay();
    internal void set_TriggerDelay(double value);
    internal PeriodType get_TriggerDelayType();
    internal void set_TriggerDelayType(PeriodType value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public GaugeDashStyle get_BorderStyle();
    public void set_BorderStyle(GaugeDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public GradientType get_FillGradientType();
    public void set_FillGradientType(GradientType value);
    public Color get_FillGradientEndColor();
    public void set_FillGradientEndColor(Color value);
    public GaugeHatchStyle get_FillHatchStyle();
    public void set_FillHatchStyle(GaugeHatchStyle value);
    public string get_Text();
    public void set_Text(string value);
    public StateIndicatorStyle get_IndicatorStyle();
    public void set_IndicatorStyle(StateIndicatorStyle value);
    public float get_ScaleFactor();
    public void set_ScaleFactor(float value);
    public string get_Image();
    public void set_Image(string value);
    public Color get_ImageTransColor();
    public void set_ImageTransColor(Color value);
    public Color get_ImageHueColor();
    public void set_ImageHueColor(Color value);
    public virtual string ToString();
    internal virtual void OnAdded();
    internal virtual void OnValueRangeTimeOut(object sender, ValueRangeEventArgs e);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.StateCollection : NamedCollection {
    private State Item { get; private set; }
    private State Item { get; private set; }
    public State Item { get; public set; }
    internal StateCollection(NamedElement parent, CommonElements common);
    public State Add(string name);
    public int Add(State value);
    public void Remove(State value);
    public bool Contains(State value);
    public void Insert(int index, State value);
    public int IndexOf(State value);
    private State get_Item(int index);
    private void set_Item(int index, State value);
    private State get_Item(string name);
    private void set_Item(string name, State value);
    public State get_Item(object obj);
    public void set_Item(object obj, State value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
}
internal class Microsoft.Reporting.Gauge.WebForms.StateConverter : CollectionItemTypeConverter {
}
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.StateIndicatorConverter")]
internal class Microsoft.Reporting.Gauge.WebForms.StateIndicator : NamedElement {
    private DataAttributes data;
    private double internalValue;
    private StateCollection states;
    private NamedElement parentSystem;
    private string parent;
    private int zOrder;
    private string toolTip;
    private string href;
    private string mapAreaAttributes;
    private StateIndicatorStyle style;
    private GaugeLocation location;
    private GaugeSize size;
    private bool visible;
    private Font font;
    private Color borderColor;
    private GaugeDashStyle borderStyle;
    private int borderWidth;
    private Color fillColor;
    private GradientType fillGradientType;
    private Color fillGradientEndColor;
    private GaugeHatchStyle fillHatchStyle;
    private string text;
    private string image;
    private Color imageTransColor;
    private Color imageHueColor;
    private float shadowOffset;
    private bool showBorder;
    private float angle;
    private float scaleFactor;
    private ResizeMode resizeMode;
    private float imageTransparency;
    private FontUnit fontUnit;
    private bool selected;
    private bool defaultParent;
    private object imageMapProviderTag;
    [DesignerSerializationVisibilityAttribute("2")]
public StateCollection States { get; }
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeParentObject3")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public NamedElement ParentObject { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_Parent")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.ParentSourceConverter")]
[NotifyParentPropertyAttribute("True")]
public string Parent { get; public set; }
    [SRCategoryAttribute("CategoryLayout")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_ZOrder")]
[DefaultValueAttribute("0")]
public int ZOrder { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_ToolTip")]
[LocalizableAttribute("True")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_Href")]
[LocalizableAttribute("True")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeMapAreaAttributes4")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryMisc")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_IndicatorStyle")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SerializationVisibilityAttribute("0")]
[ObsoleteAttribute("This property is obsolete in Dundas Gauge 2.0. IndicatorStyle is supposed to be used instead.")]
public StateIndicatorStyle Style { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_IndicatorStyle")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public StateIndicatorStyle IndicatorStyle { get; public set; }
    [SRCategoryAttribute("CategoryPosition")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_Location")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.LocationConverter")]
[DesignerSerializationVisibilityAttribute("2")]
[ValidateBound("100", "100")]
public GaugeLocation Location { get; public set; }
    [SRCategoryAttribute("CategoryPosition")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_Size")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.SizeConverter")]
[DesignerSerializationVisibilityAttribute("2")]
[ValidateBound("100", "100")]
public GaugeSize Size { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_Visible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_Font")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8.25pt")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_BorderColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_BorderStyle")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_BorderWidth")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_FillColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "LawnGreen")]
public Color FillColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_FillGradientType")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType FillGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_FillGradientEndColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGreen")]
public Color FillGradientEndColor { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_FillHatchStyle")]
[EditorAttribute("Microsoft.Reporting.Gauge.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GaugeHatchStyle FillHatchStyle { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryData")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_Value")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("не число")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleNanValueConverter")]
public double Value { get; public set; }
    [SRCategoryAttribute("CategoryData")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_Visible")]
[DefaultValueAttribute("True")]
public bool IsPercentBased { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryData")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_Minimum")]
[DefaultValueAttribute("0")]
public double Minimum { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryData")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_Maximum")]
[DefaultValueAttribute("100")]
public double Maximum { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryData")]
[SRDescriptionAttribute("DescriptionAttributeValueSource")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.ValueSourceConverter")]
[RefreshPropertiesAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
public string ValueSource { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_Text")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Text")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_Image")]
[DefaultValueAttribute("")]
public string Image { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeImageTransColor6")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageTransColor { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeImageHueColor4")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageHueColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeStateIndicator_CurrentState")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string CurrentState { get; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeShadowOffset4")]
[NotifyParentPropertyAttribute("True")]
[ValidateBound("-5", "5")]
[DefaultValueAttribute("1")]
public float ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeShowBorder")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("False")]
public bool ShowBorder { get; public set; }
    [SRCategoryAttribute("CategoryPosition")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_Angle")]
[DefaultValueAttribute("0")]
[ValidateBound("0", "360")]
public float Angle { get; public set; }
    [SRCategoryAttribute("CategoryPosition")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_ScaleFactor")]
[DefaultValueAttribute("1")]
[ValidateBound("0", "1")]
public float ScaleFactor { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_ResizeMode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ResizeMode ResizeMode { get; public set; }
    [SRCategoryAttribute("CategoryImage")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_ImageTransparency")]
[DefaultValueAttribute("0")]
[ValidateBound("0", "100")]
public float ImageTransparency { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeFontUnit3")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FontUnit FontUnit { get; public set; }
    [SRCategoryAttribute("CategoryAppearance")]
[SRDescriptionAttribute("DescriptionAttributeStateIndicator_Selected")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("False")]
public bool Selected { get; public set; }
    internal Position Position { get; }
    internal CommonElements Common { get; internal set; }
    internal DataAttributes Data { get; }
    internal double InternalValue { get; internal set; }
    internal bool DefaultParent { get; internal set; }
    private object Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.Tag { get; private set; }
    private double Microsoft.Reporting.Gauge.WebForms.IPointerProvider.Position { get; private set; }
    public StateCollection get_States();
    public NamedElement get_ParentObject();
    public string get_Parent();
    public void set_Parent(string value);
    public int get_ZOrder();
    public void set_ZOrder(int value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public string get_Href();
    public sealed virtual void set_Href(string value);
    public string get_MapAreaAttributes();
    public void set_MapAreaAttributes(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public StateIndicatorStyle get_Style();
    public void set_Style(StateIndicatorStyle value);
    protected bool ShouldSerializeStyle();
    public StateIndicatorStyle get_IndicatorStyle();
    public void set_IndicatorStyle(StateIndicatorStyle value);
    public GaugeLocation get_Location();
    public void set_Location(GaugeLocation value);
    public GaugeSize get_Size();
    public void set_Size(GaugeSize value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public GaugeDashStyle get_BorderStyle();
    public void set_BorderStyle(GaugeDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public GradientType get_FillGradientType();
    public void set_FillGradientType(GradientType value);
    public Color get_FillGradientEndColor();
    public void set_FillGradientEndColor(Color value);
    public GaugeHatchStyle get_FillHatchStyle();
    public void set_FillHatchStyle(GaugeHatchStyle value);
    public double get_Value();
    public void set_Value(double value);
    public bool get_IsPercentBased();
    public void set_IsPercentBased(bool value);
    public double GetValueInPercents();
    public double get_Minimum();
    public void set_Minimum(double value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public string get_ValueSource();
    public void set_ValueSource(string value);
    public string get_Text();
    public void set_Text(string value);
    public string get_Image();
    public void set_Image(string value);
    public Color get_ImageTransColor();
    public void set_ImageTransColor(Color value);
    public Color get_ImageHueColor();
    public void set_ImageHueColor(Color value);
    public string get_CurrentState();
    public float get_ShadowOffset();
    public void set_ShadowOffset(float value);
    public bool get_ShowBorder();
    public void set_ShowBorder(bool value);
    public float get_Angle();
    public void set_Angle(float value);
    public float get_ScaleFactor();
    public void set_ScaleFactor(float value);
    public ResizeMode get_ResizeMode();
    public void set_ResizeMode(ResizeMode value);
    public float get_ImageTransparency();
    public void set_ImageTransparency(float value);
    public FontUnit get_FontUnit();
    public void set_FontUnit(FontUnit value);
    public bool get_Selected();
    public void set_Selected(bool value);
    internal Position get_Position();
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
    internal DataAttributes get_Data();
    internal double get_InternalValue();
    internal void set_InternalValue(double value);
    internal bool get_DefaultParent();
    internal void set_DefaultParent(bool value);
    internal static XamlRenderer CreateXamlRenderer(StateIndicatorStyle style, Color color, RectangleF rect, bool addBorder);
    internal XamlRenderer GetXamlRenderer(GaugeGraphics g, State currentState);
    internal static bool IsXamlMarker(StateIndicatorStyle style);
    internal static RectangleF CalculateXamlMarkerBounds(StateIndicatorStyle markerStyle, PointF centerPoint, float width, float height);
    public virtual string ToString();
    internal GraphicsPath GetPath(GaugeGraphics g, State currentState);
    internal Brush GetBrush(GaugeGraphics g, State currentState, RectangleF rect);
    internal Pen GetPen(GaugeGraphics g, State currentState);
    private RectangleF GetSquareScaledAbsoluteRectangle(GaugeGraphics g, float scaleFactor, RectangleF rect);
    private RectangleF GetScaledAbsoluteRectangle(GaugeGraphics g, float scaleFactor, RectangleF rect);
    internal void DrawImage(GaugeGraphics g, string imageName, float scaleFactor, Color imageTransColor, Color imageHueColor, bool drawShadow);
    internal State GetCurrentState();
    internal bool IsCircular();
    internal virtual void BeginInit();
    internal virtual void EndInit();
    internal virtual void ReconnectData(bool exact);
    protected virtual void OnDispose();
    private void ConnectToParent(bool exact);
    internal virtual void Notify(MessageType msg, NamedElement element, object param);
    internal virtual void OnAdded();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IRenderable.RenderStaticElements(GaugeGraphics g);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IRenderable.RenderDynamicElements(GaugeGraphics g);
    private sealed virtual override int Microsoft.Reporting.Gauge.WebForms.IRenderable.GetZOrder();
    private sealed virtual override RectangleF Microsoft.Reporting.Gauge.WebForms.IRenderable.GetBoundRect(GaugeGraphics g);
    private sealed virtual override object Microsoft.Reporting.Gauge.WebForms.IRenderable.GetParentRenderable();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IRenderable.GetParentRenderableName();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IToolTipProvider.GetToolTip(HitTestResult ht);
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetHref();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.GetMapAreaAttributes();
    private sealed virtual override object Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IImageMapProvider.set_Tag(object value);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IPointerProvider.DataValueChanged(bool initialize);
    private sealed virtual override double Microsoft.Reporting.Gauge.WebForms.IPointerProvider.get_Position();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IPointerProvider.set_Position(double value);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.ISelectable.DrawSelection(GaugeGraphics g, bool designTimeSelection);
    public virtual object Clone();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Gauge.WebForms.StateIndicatorCollection : NamedCollection {
    private StateIndicator Item { get; private set; }
    private StateIndicator Item { get; private set; }
    public StateIndicator Item { get; public set; }
    internal StateIndicatorCollection(NamedElement parent, CommonElements common);
    public StateIndicator Add(string name);
    public int Add(StateIndicator value);
    public void Remove(StateIndicator value);
    public bool Contains(StateIndicator value);
    public void Insert(int index, StateIndicator value);
    public int IndexOf(StateIndicator value);
    private StateIndicator get_Item(int index);
    private void set_Item(int index, StateIndicator value);
    private StateIndicator get_Item(string name);
    private void set_Item(string name, StateIndicator value);
    public StateIndicator get_Item(object obj);
    public void set_Item(object obj, StateIndicator value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    protected virtual void OnInsertComplete(int index, object value);
}
internal class Microsoft.Reporting.Gauge.WebForms.StateIndicatorConverter : CollectionItemTypeConverter {
}
internal enum Microsoft.Reporting.Gauge.WebForms.StateIndicatorStyle : Enum {
    public int value__;
    public static StateIndicatorStyle None;
    public static StateIndicatorStyle RectangularLed;
    public static StateIndicatorStyle CircularLed;
    public static StateIndicatorStyle RoundedRectangularLed;
    public static StateIndicatorStyle Text;
    public static StateIndicatorStyle Image;
    public static StateIndicatorStyle Circle;
    public static StateIndicatorStyle Flag;
    public static StateIndicatorStyle ArrowDown;
    public static StateIndicatorStyle ArrowDownIncline;
    public static StateIndicatorStyle ArrowSide;
    public static StateIndicatorStyle ArrowUp;
    public static StateIndicatorStyle ArrowUpIncline;
    public static StateIndicatorStyle BoxesAllFilled;
    public static StateIndicatorStyle BoxesNoneFilled;
    public static StateIndicatorStyle BoxesOneFilled;
    public static StateIndicatorStyle BoxesTwoFilled;
    public static StateIndicatorStyle BoxesThreeFilled;
    public static StateIndicatorStyle LightArrowDown;
    public static StateIndicatorStyle LightArrowDownIncline;
    public static StateIndicatorStyle LightArrowSide;
    public static StateIndicatorStyle LightArrowUp;
    public static StateIndicatorStyle LightArrowUpIncline;
    public static StateIndicatorStyle QuartersAllFilled;
    public static StateIndicatorStyle QuartersNoneFilled;
    public static StateIndicatorStyle QuartersOneFilled;
    public static StateIndicatorStyle QuartersTwoFilled;
    public static StateIndicatorStyle QuartersThreeFilled;
    public static StateIndicatorStyle SignalMeterFourFilled;
    public static StateIndicatorStyle SignalMeterNoneFilled;
    public static StateIndicatorStyle SignalMeterOneFill;
    public static StateIndicatorStyle SignalMeterThreeFilled;
    public static StateIndicatorStyle SignalMeterTwoFilled;
    public static StateIndicatorStyle StarQuartersAllFilled;
    public static StateIndicatorStyle StarQuartersNoneFilled;
    public static StateIndicatorStyle StarQuartersOneFilled;
    public static StateIndicatorStyle StarQuartersTwoFilled;
    public static StateIndicatorStyle StarQuartersThreeFilled;
    public static StateIndicatorStyle ThreeSignsCircle;
    public static StateIndicatorStyle ThreeSignsDiamond;
    public static StateIndicatorStyle ThreeSignsTriangle;
    public static StateIndicatorStyle ThreeSymbolCheck;
    public static StateIndicatorStyle ThreeSymbolCross;
    public static StateIndicatorStyle ThreeSymbolExclamation;
    public static StateIndicatorStyle ThreeSymbolUnCircledCheck;
    public static StateIndicatorStyle ThreeSymbolUnCircledCross;
    public static StateIndicatorStyle ThreeSymbolUnCircledExclamation;
    public static StateIndicatorStyle TrafficLight;
    public static StateIndicatorStyle TrafficLightUnrimmed;
    public static StateIndicatorStyle TriangleDash;
    public static StateIndicatorStyle TriangleDown;
    public static StateIndicatorStyle TriangleUp;
    public static StateIndicatorStyle ButtonStop;
    public static StateIndicatorStyle ButtonPlay;
    public static StateIndicatorStyle ButtonPause;
    public static StateIndicatorStyle FaceSmile;
    public static StateIndicatorStyle FaceNeutral;
    public static StateIndicatorStyle FaceFrown;
}
internal enum Microsoft.Reporting.Gauge.WebForms.TextAntiAliasingQuality : Enum {
    public int value__;
    public static TextAntiAliasingQuality Normal;
    public static TextAntiAliasingQuality High;
    public static TextAntiAliasingQuality SystemDefault;
}
internal enum Microsoft.Reporting.Gauge.WebForms.ThermometerStyle : Enum {
    public int value__;
    public static ThermometerStyle Standard;
    public static ThermometerStyle Flask;
}
internal class Microsoft.Reporting.Gauge.WebForms.TickMark : CustomTickMark {
    private double interval;
    private double intervalOffset;
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeInterval3")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleAutoValueConverter")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("не число")]
public double Interval { get; public set; }
    [SRCategoryAttribute("CategoryBehavior")]
[SRDescriptionAttribute("DescriptionAttributeIntervalOffset")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleAutoValueConverter")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("не число")]
public double IntervalOffset { get; public set; }
    public TickMark(object parent);
    public TickMark(object parent, MarkerStyle shape, float length, float width);
    public virtual double get_Interval();
    public virtual void set_Interval(double value);
    public virtual double get_IntervalOffset();
    public virtual void set_IntervalOffset(double value);
}
internal class Microsoft.Reporting.Gauge.WebForms.TimerData : object {
    public TimeSpan ticks;
    public DateTime timestamp;
    public TimerData(TimeSpan ticks, DateTime timestamp);
    public sealed virtual object Clone();
}
internal class Microsoft.Reporting.Gauge.WebForms.TraceManager : object {
    internal IServiceContainer serviceContainer;
    private ITraceContext traceContext;
    internal ITraceContext TraceContext { get; internal set; }
    public bool TraceEnabled { get; }
    public TraceManager(IServiceContainer container);
    public sealed virtual object GetService(Type serviceType);
    internal ITraceContext get_TraceContext();
    internal void set_TraceContext(ITraceContext value);
    public bool get_TraceEnabled();
    public void Write(string category, string message);
}
internal static class Microsoft.Reporting.Gauge.WebForms.Utils : object {
    internal static float GoldenRatio;
    internal static string SRGetStr(string key, Object[] p);
    internal static double Round(double value, int precision);
    internal static float Deg2Rad(float angleInDegree);
    internal static float Rad2Deg(float angleInRadians);
    internal static float NormalizeAngle(float angle);
    internal static float GetContactPointOffset(SizeF size, float angle);
    internal static float ToGDIAngle(float angle);
    internal static RectangleF NormalizeRectangle(RectangleF boundRect, SizeF insetSize, bool resizeResult);
}
[AttributeUsageAttribute("128")]
internal class Microsoft.Reporting.Gauge.WebForms.ValidateBound : Attribute {
    private double minimum;
    private double maximum;
    private bool required;
    internal double Minimum { get; }
    internal double Maximum { get; }
    internal bool Required { get; }
    internal ValidateBound(double minimum, double maximum);
    internal ValidateBound(double minimum, double maximum, bool required);
    internal double get_Minimum();
    internal double get_Maximum();
    internal bool get_Required();
}
internal class Microsoft.Reporting.Gauge.WebForms.ValueBase : NamedElement {
    internal GaugeDuration historyDept;
    internal GaugeDuration queryDept;
    private double valueLimit;
    internal double inputValue;
    internal DateTime inputDate;
    internal double outputValue;
    internal DateTime outputDate;
    internal HistoryCollection history;
    [CompilerGeneratedAttribute]
private ValueChangedEventHandler ValueChanged;
    [CompilerGeneratedAttribute]
private ValueChangedEventHandler ValueLimitOverflow;
    internal ArrayList consumers;
    internal ValueState provderState;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HistoryCollection History { get; }
    [SRDescriptionAttribute("DescriptionAttributeName")]
[BrowsableAttribute("True")]
[SRCategoryAttribute("CategoryMisc")]
[NotifyParentPropertyAttribute("True")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryData")]
[SRDescriptionAttribute("DescriptionAttributeDate")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DateTime Date { get; }
    [SRCategoryAttribute("CategoryBehavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("не число")]
[SRDescriptionAttribute("DescriptionAttributeValueLimit")]
[TypeConverterAttribute("Microsoft.Reporting.Gauge.WebForms.DoubleNanValueConverter")]
internal double ValueLimit { get; internal set; }
    internal GaugeDuration HistoryDeptInternal { get; }
    [SRCategoryAttribute("CategoryMisc")]
[BindableAttribute("False")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeState")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
internal ValueState State { get; }
    internal ValueState IntState { get; internal set; }
    internal bool IsPlayBackMode { get; }
    internal bool IsEventsEnable { get; }
    [CompilerGeneratedAttribute]
internal void add_ValueChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_ValueChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_ValueLimitOverflow(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_ValueLimitOverflow(ValueChangedEventHandler value);
    public HistoryCollection get_History();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public DateTime get_Date();
    internal virtual double get_ValueLimit();
    internal virtual void set_ValueLimit(double value);
    internal virtual GaugeDuration get_HistoryDeptInternal();
    internal virtual ValueState get_State();
    internal virtual ValueState get_IntState();
    internal virtual void set_IntState(ValueState value);
    internal bool get_IsPlayBackMode();
    internal bool get_IsEventsEnable();
    public virtual string ToString();
    public virtual void Reset();
    internal virtual void SetValueInternal(double value);
    internal virtual void SetValueInternal(double value, DateTime timestamp);
    public virtual double GetValue();
    internal void ClearUpHistory();
    internal void AddToHistory();
    internal void AddToHistoryInt(double value, DateTime timestamp);
    internal virtual void OnValueLimitOverflow(ValueChangedEventArgs e);
    internal virtual void CheckLimit();
    internal virtual void OnValueChanged(ValueChangedEventArgs e);
    internal virtual void OnNameChanged();
    internal virtual void OnRemove();
    internal virtual void OnAdded();
    internal virtual void Recalculate(double value, DateTime timestamp);
    internal virtual void CalculateValue(double value, DateTime timestamp);
    internal virtual void RefreshConsumers();
    internal virtual void Invalidate();
    protected virtual void OnDispose();
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IValueProvider.AttachConsumer(IValueConsumer consumer);
    private sealed virtual override void Microsoft.Reporting.Gauge.WebForms.IValueProvider.DetachConsumer(IValueConsumer consumer);
    private sealed virtual override double Microsoft.Reporting.Gauge.WebForms.IValueProvider.GetValue();
    private sealed virtual override DateTime Microsoft.Reporting.Gauge.WebForms.IValueProvider.GetDate();
    private sealed virtual override string Microsoft.Reporting.Gauge.WebForms.IValueProvider.GetValueProviderName();
    private sealed virtual override HistoryCollection Microsoft.Reporting.Gauge.WebForms.IValueProvider.GetData(GaugeDuration period, DateTime currentDate);
    private sealed virtual override bool Microsoft.Reporting.Gauge.WebForms.IValueProvider.GetPlayBackMode();
    private sealed virtual override ValueState Microsoft.Reporting.Gauge.WebForms.IValueProvider.GetProvderState();
    internal virtual object CloneInternals(object copy);
}
internal class Microsoft.Reporting.Gauge.WebForms.ValueChangedEventArgs : EventArgs {
    private double value;
    private DateTime date;
    private bool playbackMode;
    private string senderName;
    public double Value { get; }
    public DateTime Date { get; }
    public ValueChangedEventArgs(double value, DateTime date, string senderName, bool playbackMode);
    public double get_Value();
    public DateTime get_Date();
}
internal class Microsoft.Reporting.Gauge.WebForms.ValueChangedEventHandler : MulticastDelegate {
    public ValueChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ValueChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ValueChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.Gauge.WebForms.ValueRangeEventArgs : ValueChangedEventArgs {
    private NamedElement pointer;
    public ValueRangeEventArgs(double value, DateTime date, string senderName, bool playbackMode, NamedElement pointer);
}
internal class Microsoft.Reporting.Gauge.WebForms.ValueRangeEventHandler : MulticastDelegate {
    public ValueRangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ValueRangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ValueRangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
[DebuggerStepThroughAttribute]
internal class Microsoft.Reporting.Gauge.WebForms.ValuesDataTable : DataTable {
    private static string DATESTAMP_COLUMN_SERIALIZATION_ID;
    private static string VALUE_COLUMN_SERIALIZATION_ID;
    private DataColumn columnDateStamp;
    private DataColumn columnValue;
    [CompilerGeneratedAttribute]
private ValuesRowChangeEventHandler ValuesRowChanged;
    [CompilerGeneratedAttribute]
private ValuesRowChangeEventHandler ValuesRowChanging;
    [CompilerGeneratedAttribute]
private ValuesRowChangeEventHandler ValuesRowDeleted;
    [CompilerGeneratedAttribute]
private ValuesRowChangeEventHandler ValuesRowDeleting;
    [BrowsableAttribute("False")]
public int Count { get; }
    internal DataColumn DateStampColumn { get; }
    internal DataColumn ValueColumn { get; }
    public ValuesRow Item { get; }
    internal ValuesDataTable(DataTable table);
    private ValuesDataTable(SerializationInfo info, StreamingContext context);
    public int get_Count();
    internal DataColumn get_DateStampColumn();
    internal DataColumn get_ValueColumn();
    public ValuesRow get_Item(int index);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public void add_ValuesRowChanged(ValuesRowChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValuesRowChanged(ValuesRowChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ValuesRowChanging(ValuesRowChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValuesRowChanging(ValuesRowChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ValuesRowDeleted(ValuesRowChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValuesRowDeleted(ValuesRowChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ValuesRowDeleting(ValuesRowChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValuesRowDeleting(ValuesRowChangeEventHandler value);
    public void AddValuesRow(ValuesRow row);
    public ValuesRow AddValuesRow(DateTime dateStamp, double value);
    public ValuesRow FindByDateStamp(DateTime dateStamp);
    public sealed virtual IEnumerator GetEnumerator();
    public virtual DataTable Clone();
    protected virtual DataTable CreateInstance();
    internal void InitVars();
    private void InitClass();
    public ValuesRow NewValuesRow();
    protected virtual DataRow NewRowFromBuilder(DataRowBuilder builder);
    protected virtual Type GetRowType();
    protected virtual void OnRowChanged(DataRowChangeEventArgs e);
    protected virtual void OnRowChanging(DataRowChangeEventArgs e);
    protected virtual void OnRowDeleted(DataRowChangeEventArgs e);
    protected virtual void OnRowDeleting(DataRowChangeEventArgs e);
    public void RemoveValuesRow(ValuesRow row);
}
internal class Microsoft.Reporting.Gauge.WebForms.ValueSourceConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
[DebuggerStepThroughAttribute]
internal class Microsoft.Reporting.Gauge.WebForms.ValuesRow : DataRow {
    private ValuesDataTable tableValues;
    public DateTime DateStamp { get; public set; }
    public double Value { get; public set; }
    internal ValuesRow(DataRowBuilder rb);
    public DateTime get_DateStamp();
    public void set_DateStamp(DateTime value);
    public double get_Value();
    public void set_Value(double value);
    public bool IsValueNull();
    public void SetValueNull();
}
[DebuggerStepThroughAttribute]
internal class Microsoft.Reporting.Gauge.WebForms.ValuesRowChangeEventArgs : EventArgs {
    private ValuesRow eventRow;
    private DataRowAction eventAction;
    public ValuesRow Row { get; }
    public DataRowAction Action { get; }
    public ValuesRowChangeEventArgs(ValuesRow row, DataRowAction action);
    public ValuesRow get_Row();
    public DataRowAction get_Action();
}
internal class Microsoft.Reporting.Gauge.WebForms.ValuesRowChangeEventHandler : MulticastDelegate {
    public ValuesRowChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ValuesRowChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ValuesRowChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum Microsoft.Reporting.Gauge.WebForms.ValueState : Enum {
    public int value__;
    public static ValueState Suspended;
    public static ValueState Playback;
    public static ValueState DataLoading;
    public static ValueState Interactive;
}
internal class Microsoft.Reporting.Gauge.WebForms.XamlLayer : object {
    private GraphicsPath[] paths;
    private Brush[] brushes;
    private Pen[] pens;
    private XamlLayer[] innerLayers;
    private bool disposed;
    public GraphicsPath[] Paths { get; public set; }
    public Brush[] Brushes { get; public set; }
    public Pen[] Pens { get; public set; }
    public XamlLayer[] InnerLayers { get; public set; }
    public GraphicsPath[] get_Paths();
    public void set_Paths(GraphicsPath[] value);
    public Brush[] get_Brushes();
    public void set_Brushes(Brush[] value);
    public Pen[] get_Pens();
    public void set_Pens(Pen[] value);
    public XamlLayer[] get_InnerLayers();
    public void set_InnerLayers(XamlLayer[] value);
    public void Render(GaugeGraphics g);
    public void SetSingleBrush(Brush brush);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class Microsoft.Reporting.Gauge.WebForms.XamlRenderer : object {
    private XmlDocument xaml;
    private bool allowPathGradientTransform;
    private Color[] layerHues;
    private XamlLayer[] layers;
    private bool disposed;
    public XmlDocument Xaml { get; }
    public bool AllowPathGradientTransform { get; public set; }
    private Color[] LayerHues { get; }
    public XamlLayer[] Layers { get; public set; }
    public XamlRenderer(string xamlResource);
    public XmlDocument get_Xaml();
    public bool get_AllowPathGradientTransform();
    public void set_AllowPathGradientTransform(bool value);
    private Color[] get_LayerHues();
    public XamlLayer[] get_Layers();
    public void set_Layers(XamlLayer[] value);
    public void ParseXaml(RectangleF viewportRect, Color[] layerHues, Nullable`1<int> maxLayers);
    private RectangleF GetRootCanvasBoundingRectangle(XmlNode rootCanvas);
    private RectangleF GetCanvasBoundingRectangle(XmlNode canvasNode);
    private XamlLayer ParseCanvas(XmlNode canvasNode, int layerIndex, RectangleF fromBounds, RectangleF toBounds);
    private RectangleF[] TransformSlicedBounds(RectangleF[] slicedBounds, RectangleF fromBounds, RectangleF toBounds);
    private RectangleF[] GetSlicedBounds(XmlNode canvasNode);
    private Brush CreateBrush(XmlNode brushNode, int layerIndex, RectangleF shapeRect, RectangleF originalShapeRect, RectangleF fromBounds, RectangleF toBounds);
    private void ApplyTransform(XmlNode transformNode, RectangleF shapeRect, RectangleF fromBounds, RectangleF toBounds, PointF& startPoint, PointF& endPoint);
    private void ApplyTransform(XmlNode transformNode, RectangleF shapeRect, RectangleF fromBounds, RectangleF toBounds, Brush& brush);
    private void ApplyRelativeTransform(XmlNode transformNode, RectangleF originalShapeRect, RectangleF shapeRect, RectangleF fromBounds, RectangleF toBounds, Brush& brush);
    private void StretchBrushPoints(float stretchFactor, PointF& startPoint, PointF& endPoint);
    private float CalculateStretchFactor(PointF startPoint, PointF endPoint, RectangleF shapeRect);
    private ColorBlend CreateColorBlend(XmlNode gradientStopsNode, int layerIndex, float stretchFactor, bool radialBrush);
    private RectangleF GetStreamGeometryBounds(String[] parts, bool includeOrigin);
    private String[] GetStreamGeometryParts(string streamGeometry);
    private void IntepretStreamGeometry(String[] parts, PointF shapeOffset, float stretchFactorX, float stretchFactorY, bool includeOrigin, RectangleF fromBounds, RectangleF toBounds, GraphicsPath& graphicsPath);
    private PointF RelativeToAbsolute(PointF relativePoint, RectangleF relativeToRect);
    private PointF AbsoluteToRelative(PointF alsolutePoint, RectangleF relativeToRect);
    private XmlNode FindFillNode(XmlNode shapeNode);
    private XmlNode FindStrokeNode(XmlNode shapeNode);
    private XmlNode FindChildNode(XmlNode parent, string childName);
    private int CountChildNodes(XmlNode parentNode);
    private PointF OffsetPoint(PointF point, PointF offset);
    private PointF TransformPoint(PointF point, RectangleF fromBounds, RectangleF toBounds);
    private RectangleF TransformRectangle(RectangleF rect, RectangleF fromBounds, RectangleF toBounds);
    private Color TransformColor(Color color, int layerIndex);
    private PointF ParsePoint(string point);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class Microsoft.Reporting.Gauge.WebForms.XmlFormatSerializer : SerializerBase {
    public virtual void Serialize(object objectToSerialize, object writer);
    private void SerializeObject(object objectToSerialize, object parent, string elementName, XmlNode xmlParentNode, XmlDocument xmlDocument);
    private void SerializeCollection(object objectToSerialize, string elementName, XmlNode xmlParentNode, XmlDocument xmlDocument);
    private void SerializeProperty(object objectToSerialize, object parent, string elementName, XmlNode xmlParentNode, XmlDocument xmlDocument);
    private string GetXmlValue(object obj, object parent, string elementName);
    private void RemoveEmptyChildNodes(XmlNode xmlNode);
    public virtual void Deserialize(object objectToDeserialize, object reader);
    protected virtual int DeserializeObject(object objectToDeserialize, object parent, string elementName, XmlNode xmlParentNode, XmlDocument xmlDocument);
    private void SetXmlValue(object obj, string attrName, string attrValue);
}
internal class Microsoft.Reporting.Gauge.WebForms.ZOrderSort : object {
    private ArrayList collection;
    public ZOrderSort(ArrayList collection);
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
}
[GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
[DesignerCategoryAttribute("code")]
[ToolboxItemAttribute("False")]
[XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
[XmlRootAttribute("GaugeData")]
[HelpKeywordAttribute("vs.data.DataSet")]
internal class Microsoft.Reporting.Gauge.WinForms.DataEngine.GaugeData : DataSet {
    private ValuesDataTable tableValues;
    private SchemaSerializationMode _schemaSerializationMode;
    [DebuggerNonUserCodeAttribute]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public ValuesDataTable Values { get; }
    [DebuggerNonUserCodeAttribute]
[BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("1")]
public SchemaSerializationMode SchemaSerializationMode { get; public set; }
    [DebuggerNonUserCodeAttribute]
[DesignerSerializationVisibilityAttribute("0")]
public DataTableCollection Tables { get; }
    [DebuggerNonUserCodeAttribute]
[DesignerSerializationVisibilityAttribute("0")]
public DataRelationCollection Relations { get; }
    [DebuggerNonUserCodeAttribute]
protected GaugeData(SerializationInfo info, StreamingContext context);
    public ValuesDataTable get_Values();
    public virtual SchemaSerializationMode get_SchemaSerializationMode();
    public virtual void set_SchemaSerializationMode(SchemaSerializationMode value);
    public DataTableCollection get_Tables();
    public DataRelationCollection get_Relations();
    [DebuggerNonUserCodeAttribute]
protected virtual void InitializeDerivedDataSet();
    [DebuggerNonUserCodeAttribute]
public virtual DataSet Clone();
    [DebuggerNonUserCodeAttribute]
protected virtual bool ShouldSerializeTables();
    [DebuggerNonUserCodeAttribute]
protected virtual bool ShouldSerializeRelations();
    [DebuggerNonUserCodeAttribute]
protected virtual void ReadXmlSerializable(XmlReader reader);
    [DebuggerNonUserCodeAttribute]
protected virtual XmlSchema GetSchemaSerializable();
    [DebuggerNonUserCodeAttribute]
internal void InitVars();
    [DebuggerNonUserCodeAttribute]
internal void InitVars(bool initTable);
    [DebuggerNonUserCodeAttribute]
private void InitClass();
    [DebuggerNonUserCodeAttribute]
private bool ShouldSerializeValues();
    [DebuggerNonUserCodeAttribute]
private void SchemaChanged(object sender, CollectionChangeEventArgs e);
    [DebuggerNonUserCodeAttribute]
public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs);
}
internal enum Microsoft.Reporting.Map.WebForms.AffectedSymbolAttributes : Enum {
    public int value__;
    public static AffectedSymbolAttributes All;
    public static AffectedSymbolAttributes ColorOnly;
    public static AffectedSymbolAttributes MarkerOnly;
    public static AffectedSymbolAttributes SizeOnly;
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Map.WebForms.AntiAliasing : Enum {
    public int value__;
    public static AntiAliasing None;
    public static AntiAliasing Text;
    public static AntiAliasing Graphics;
    public static AntiAliasing All;
}
internal enum Microsoft.Reporting.Map.WebForms.AutoBool : Enum {
    public int value__;
    public static AutoBool Auto;
    public static AutoBool True;
    public static AutoBool False;
}
internal abstract class Microsoft.Reporting.Map.WebForms.AutoSizePanel : DockablePanel {
    private bool autoSize;
    private float maximumPanelAutoSize;
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeAutoSizePanel_AutoSize")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("True")]
public bool AutoSize { get; public set; }
    public MapSize Size { get; public set; }
    public int BorderWidth { get; public set; }
    internal bool IsEmpty { get; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Layout")]
[DefaultValueAttribute("100")]
[SRDescriptionAttribute("DescriptionAttributeAutoSizePanel_MaxAutoSize")]
public float MaxAutoSize { get; public set; }
    internal AutoSizePanel(CommonElements common);
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    public virtual MapSize get_Size();
    public virtual void set_Size(MapSize value);
    public virtual int get_BorderWidth();
    public virtual void set_BorderWidth(int value);
    internal abstract virtual bool get_IsEmpty();
    public virtual float get_MaxAutoSize();
    public virtual void set_MaxAutoSize(float value);
    internal abstract virtual SizeF GetOptimalSize(MapGraphics g, SizeF maxSizeAbs);
    internal void AdjustAutoSize(MapGraphics g);
    protected virtual SizeF CalculateUndockedAutoSize(SizeF size);
    internal virtual bool IsVisible();
    internal virtual void Invalidate();
    protected void Invalidate(bool layout);
    internal virtual bool IsRenderVisible(MapGraphics g, RectangleF clipRect);
}
internal class Microsoft.Reporting.Map.WebForms.AutoSizePanelConverter : DockablePanelConverter {
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal enum Microsoft.Reporting.Map.WebForms.BasicMapElements : Enum {
    public int value__;
    public static BasicMapElements Shapes;
    public static BasicMapElements Paths;
    public static BasicMapElements Symbols;
}
internal class Microsoft.Reporting.Map.WebForms.BendingText : object {
    protected char WHITESPACE_SUBSTITUTE;
    public GraphicsPath CreatePath(Font font, PointF[] points, string text, int startIndex, int labelOffset);
    protected int BendText(GraphicsPath& gBendedText, PointF[] points, string text, Font font, int startIndex, bool backward, bool calculateOnly, int labelOffset);
    private int FindNearestPoint(PointF[] points, int startIndex, double distanceDesired, Double& distanceFound);
    private int FindNearestPoint(PointF[] points, PointF point, int startIndex, double distanceDesired, Double& distanceFound);
}
internal class Microsoft.Reporting.Map.WebForms.BinaryFormatSerializer : SerializerBase {
    private CaseInsensitiveHashCodeProvider hashCodeProvider;
    public virtual void Serialize(object objectToSerialize, object destination);
    public void Serialize(object objectToSerialize, string fileName);
    public void Serialize(object objectToSerialize, Stream stream);
    public void Serialize(object objectToSerialize, BinaryWriter writer);
    private void SerializeObject(object objectToSerialize, object parent, string elementName, BinaryWriter writer);
    private void SerializeCollection(object objectToSerialize, string elementName, BinaryWriter writer);
    private void SerializeProperty(object objectToSerialize, object parent, string elementName, BinaryWriter writer);
    private void WritePropertyValue(object obj, object parent, string elementName, BinaryWriter writer);
    public void CheckPropertiesID(ArrayList propNames);
    public virtual void Deserialize(object objectToDeserialize, object source);
    public void Deserialize(object objectToDeserialize, string fileName);
    public void Deserialize(object objectToDeserialize, Stream stream);
    public void Deserialize(object objectToDeserialize, BinaryReader reader);
    protected virtual int DeserializeObject(object objectToDeserialize, object parent, string elementName, BinaryReader reader);
    private bool SetPropertyValue(object obj, PropertyInfo pi, BinaryReader reader);
    private PropertyInfo ReadPropertyInfo(object objectToDeserialize, object parent, PropertyInfo[] properties, BinaryReader reader);
}
internal class Microsoft.Reporting.Map.WebForms.BindingFieldRuleConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal enum Microsoft.Reporting.Map.WebForms.BindingType : Enum {
    public int value__;
    public static BindingType Shapes;
    public static BindingType Groups;
    public static BindingType Paths;
    public static BindingType Symbols;
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.Address : object {
    [CompilerGeneratedAttribute]
private string <AddressLine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdminDistrict>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdminDistrict2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CountryRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Locality>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostalCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CountryRegionIso2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormattedAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Neighborhood>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Landmark>k__BackingField;
    [DataMemberAttribute]
public string AddressLine { get; public set; }
    [DataMemberAttribute]
public string AdminDistrict { get; public set; }
    [DataMemberAttribute]
public string AdminDistrict2 { get; public set; }
    [DataMemberAttribute]
public string CountryRegion { get; public set; }
    [DataMemberAttribute]
public string Locality { get; public set; }
    [DataMemberAttribute]
public string PostalCode { get; public set; }
    [DataMemberAttribute]
public string CountryRegionIso2 { get; public set; }
    [DataMemberAttribute]
public string FormattedAddress { get; public set; }
    [DataMemberAttribute]
public string Neighborhood { get; public set; }
    [DataMemberAttribute]
public string Landmark { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AddressLine();
    [CompilerGeneratedAttribute]
public void set_AddressLine(string value);
    [CompilerGeneratedAttribute]
public string get_AdminDistrict();
    [CompilerGeneratedAttribute]
public void set_AdminDistrict(string value);
    [CompilerGeneratedAttribute]
public string get_AdminDistrict2();
    [CompilerGeneratedAttribute]
public void set_AdminDistrict2(string value);
    [CompilerGeneratedAttribute]
public string get_CountryRegion();
    [CompilerGeneratedAttribute]
public void set_CountryRegion(string value);
    [CompilerGeneratedAttribute]
public string get_Locality();
    [CompilerGeneratedAttribute]
public void set_Locality(string value);
    [CompilerGeneratedAttribute]
public string get_PostalCode();
    [CompilerGeneratedAttribute]
public void set_PostalCode(string value);
    [CompilerGeneratedAttribute]
public string get_CountryRegionIso2();
    [CompilerGeneratedAttribute]
public void set_CountryRegionIso2(string value);
    [CompilerGeneratedAttribute]
public string get_FormattedAddress();
    [CompilerGeneratedAttribute]
public void set_FormattedAddress(string value);
    [CompilerGeneratedAttribute]
public string get_Neighborhood();
    [CompilerGeneratedAttribute]
public void set_Neighborhood(string value);
    [CompilerGeneratedAttribute]
public string get_Landmark();
    [CompilerGeneratedAttribute]
public void set_Landmark(string value);
}
internal class Microsoft.Reporting.Map.WebForms.BingMaps.BingMapsService : object {
    public static Response GetImageryMetadata(ImageryMetadataRequest imageryRequest);
    public static IAsyncResult GetImageryMetadataAsync(ImageryMetadataRequest imageryRequest, Action`1<Response> clientCallback, Action`1<Exception> clientErrorCallback);
    private static void RespCallback(IAsyncResult asynchronousResult);
    private static Response ReadResponse(HttpWebResponse httpResponse);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.BirdseyeMetadata : ImageryMetadata {
    [CompilerGeneratedAttribute]
private double <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TilesX>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TilesY>k__BackingField;
    [DataMemberAttribute]
public double Orientation { get; public set; }
    [DataMemberAttribute]
public int TilesX { get; public set; }
    [DataMemberAttribute]
public int TilesY { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Orientation();
    [CompilerGeneratedAttribute]
public void set_Orientation(double value);
    [CompilerGeneratedAttribute]
public int get_TilesX();
    [CompilerGeneratedAttribute]
public void set_TilesX(int value);
    [CompilerGeneratedAttribute]
public int get_TilesY();
    [CompilerGeneratedAttribute]
public void set_TilesY(int value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.CompressedPointList : Resource {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [DataMemberAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.CoverageArea : object {
    [CompilerGeneratedAttribute]
private Double[] <BoundingBox>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ZoomMax>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ZoomMin>k__BackingField;
    [DataMemberAttribute]
public Double[] BoundingBox { get; public set; }
    [DataMemberAttribute]
public int ZoomMax { get; public set; }
    [DataMemberAttribute]
public int ZoomMin { get; public set; }
    [CompilerGeneratedAttribute]
public Double[] get_BoundingBox();
    [CompilerGeneratedAttribute]
public void set_BoundingBox(Double[] value);
    [CompilerGeneratedAttribute]
public int get_ZoomMax();
    [CompilerGeneratedAttribute]
public void set_ZoomMax(int value);
    [CompilerGeneratedAttribute]
public int get_ZoomMin();
    [CompilerGeneratedAttribute]
public void set_ZoomMin(int value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.Detail : object {
    [CompilerGeneratedAttribute]
private int <CompassDegrees>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManeuverType>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <StartPathIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <EndPathIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoadType>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LocationCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Names>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private RoadShield <roadShieldRequestParameters>k__BackingField;
    [DataMemberAttribute]
public int CompassDegrees { get; public set; }
    [DataMemberAttribute]
public string ManeuverType { get; public set; }
    [DataMemberAttribute]
public Int32[] StartPathIndices { get; public set; }
    [DataMemberAttribute]
public Int32[] EndPathIndices { get; public set; }
    [DataMemberAttribute]
public string RoadType { get; public set; }
    [DataMemberAttribute]
public String[] LocationCodes { get; public set; }
    [DataMemberAttribute]
public String[] Names { get; public set; }
    [DataMemberAttribute]
public string Mode { get; public set; }
    [DataMemberAttribute]
public RoadShield roadShieldRequestParameters { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CompassDegrees();
    [CompilerGeneratedAttribute]
public void set_CompassDegrees(int value);
    [CompilerGeneratedAttribute]
public string get_ManeuverType();
    [CompilerGeneratedAttribute]
public void set_ManeuverType(string value);
    [CompilerGeneratedAttribute]
public Int32[] get_StartPathIndices();
    [CompilerGeneratedAttribute]
public void set_StartPathIndices(Int32[] value);
    [CompilerGeneratedAttribute]
public Int32[] get_EndPathIndices();
    [CompilerGeneratedAttribute]
public void set_EndPathIndices(Int32[] value);
    [CompilerGeneratedAttribute]
public string get_RoadType();
    [CompilerGeneratedAttribute]
public void set_RoadType(string value);
    [CompilerGeneratedAttribute]
public String[] get_LocationCodes();
    [CompilerGeneratedAttribute]
public void set_LocationCodes(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Names();
    [CompilerGeneratedAttribute]
public void set_Names(String[] value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
    [CompilerGeneratedAttribute]
public RoadShield get_roadShieldRequestParameters();
    [CompilerGeneratedAttribute]
public void set_roadShieldRequestParameters(RoadShield value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.ElevationData : Resource {
    [CompilerGeneratedAttribute]
private Int32[] <Elevations>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ZoomLevel>k__BackingField;
    [DataMemberAttribute]
public Int32[] Elevations { get; public set; }
    [DataMemberAttribute]
public int ZoomLevel { get; public set; }
    [CompilerGeneratedAttribute]
public Int32[] get_Elevations();
    [CompilerGeneratedAttribute]
public void set_Elevations(Int32[] value);
    [CompilerGeneratedAttribute]
public int get_ZoomLevel();
    [CompilerGeneratedAttribute]
public void set_ZoomLevel(int value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.Generalization : object {
    [CompilerGeneratedAttribute]
private Int32[] <PathIndices>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LatLongTolerance>k__BackingField;
    [DataMemberAttribute]
public Int32[] PathIndices { get; public set; }
    [DataMemberAttribute]
public double LatLongTolerance { get; public set; }
    [CompilerGeneratedAttribute]
public Int32[] get_PathIndices();
    [CompilerGeneratedAttribute]
public void set_PathIndices(Int32[] value);
    [CompilerGeneratedAttribute]
public double get_LatLongTolerance();
    [CompilerGeneratedAttribute]
public void set_LatLongTolerance(double value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.GeospatialEndpointResponse : Resource {
    [CompilerGeneratedAttribute]
private bool <IsDisputedArea>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private GeospatialService[] <Services>k__BackingField;
    [DataMemberAttribute]
public bool IsDisputedArea { get; public set; }
    [DataMemberAttribute]
public bool IsSupported { get; public set; }
    [DataMemberAttribute]
public string UserRegion { get; public set; }
    [DataMemberAttribute]
public GeospatialService[] Services { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsDisputedArea();
    [CompilerGeneratedAttribute]
public void set_IsDisputedArea(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSupported();
    [CompilerGeneratedAttribute]
public void set_IsSupported(bool value);
    [CompilerGeneratedAttribute]
public string get_UserRegion();
    [CompilerGeneratedAttribute]
public void set_UserRegion(string value);
    [CompilerGeneratedAttribute]
public GeospatialService[] get_Services();
    [CompilerGeneratedAttribute]
public void set_Services(GeospatialService[] value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.GeospatialService : object {
    [CompilerGeneratedAttribute]
private string <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FallbackLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LanguageSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    [DataMemberAttribute]
public string Endpoint { get; public set; }
    [DataMemberAttribute]
public string FallbackLanguage { get; public set; }
    [DataMemberAttribute]
public bool LanguageSupported { get; public set; }
    [DataMemberAttribute]
public string ServiceName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(string value);
    [CompilerGeneratedAttribute]
public string get_FallbackLanguage();
    [CompilerGeneratedAttribute]
public void set_FallbackLanguage(string value);
    [CompilerGeneratedAttribute]
public bool get_LanguageSupported();
    [CompilerGeneratedAttribute]
public void set_LanguageSupported(bool value);
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(string value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.Hint : object {
    [CompilerGeneratedAttribute]
private string <HintType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [DataMemberAttribute]
public string HintType { get; public set; }
    [DataMemberAttribute]
public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public string get_HintType();
    [CompilerGeneratedAttribute]
public void set_HintType(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.Reporting.Map.WebForms.BingMaps.StaticMapMetadata")]
[KnownTypeAttribute("Microsoft.Reporting.Map.WebForms.BingMaps.BirdseyeMetadata")]
public class Microsoft.Reporting.Map.WebForms.BingMaps.ImageryMetadata : Resource {
    [CompilerGeneratedAttribute]
private int <ImageHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ImageWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageryProvider[] <ImageryProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ImageUrlSubdomains>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VintageEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VintageStart>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ZoomMax>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ZoomMin>k__BackingField;
    [DataMemberAttribute]
public int ImageHeight { get; public set; }
    [DataMemberAttribute]
public int ImageWidth { get; public set; }
    [DataMemberAttribute]
public ImageryProvider[] ImageryProviders { get; public set; }
    [DataMemberAttribute]
public string ImageUrl { get; public set; }
    [DataMemberAttribute]
public String[] ImageUrlSubdomains { get; public set; }
    [DataMemberAttribute]
public string VintageEnd { get; public set; }
    [DataMemberAttribute]
public string VintageStart { get; public set; }
    [DataMemberAttribute]
public int ZoomMax { get; public set; }
    [DataMemberAttribute]
public int ZoomMin { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ImageHeight();
    [CompilerGeneratedAttribute]
public void set_ImageHeight(int value);
    [CompilerGeneratedAttribute]
public int get_ImageWidth();
    [CompilerGeneratedAttribute]
public void set_ImageWidth(int value);
    [CompilerGeneratedAttribute]
public ImageryProvider[] get_ImageryProviders();
    [CompilerGeneratedAttribute]
public void set_ImageryProviders(ImageryProvider[] value);
    [CompilerGeneratedAttribute]
public string get_ImageUrl();
    [CompilerGeneratedAttribute]
public void set_ImageUrl(string value);
    [CompilerGeneratedAttribute]
public String[] get_ImageUrlSubdomains();
    [CompilerGeneratedAttribute]
public void set_ImageUrlSubdomains(String[] value);
    [CompilerGeneratedAttribute]
public string get_VintageEnd();
    [CompilerGeneratedAttribute]
public void set_VintageEnd(string value);
    [CompilerGeneratedAttribute]
public string get_VintageStart();
    [CompilerGeneratedAttribute]
public void set_VintageStart(string value);
    [CompilerGeneratedAttribute]
public int get_ZoomMax();
    [CompilerGeneratedAttribute]
public void set_ZoomMax(int value);
    [CompilerGeneratedAttribute]
public int get_ZoomMin();
    [CompilerGeneratedAttribute]
public void set_ZoomMin(int value);
}
internal class Microsoft.Reporting.Map.WebForms.BingMaps.ImageryMetadataRequest : object {
    private double orientation;
    private int zoomLevel;
    [CompilerGeneratedAttribute]
private string <BingMapsKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageryType <ImagerySet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeImageryProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseHTTPS>k__BackingField;
    public string BingMapsKey { get; public set; }
    public string Culture { get; public set; }
    public ImageryType ImagerySet { get; public set; }
    public bool IncludeImageryProviders { get; public set; }
    public double Orientation { get; public set; }
    public int ZoomLevel { get; public set; }
    public bool UseHTTPS { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BingMapsKey();
    [CompilerGeneratedAttribute]
public void set_BingMapsKey(string value);
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(string value);
    [CompilerGeneratedAttribute]
public ImageryType get_ImagerySet();
    [CompilerGeneratedAttribute]
public void set_ImagerySet(ImageryType value);
    [CompilerGeneratedAttribute]
public bool get_IncludeImageryProviders();
    [CompilerGeneratedAttribute]
public void set_IncludeImageryProviders(bool value);
    public double get_Orientation();
    public void set_Orientation(double value);
    public int get_ZoomLevel();
    public void set_ZoomLevel(int value);
    [CompilerGeneratedAttribute]
public bool get_UseHTTPS();
    [CompilerGeneratedAttribute]
public void set_UseHTTPS(bool value);
    public string GetRequestUrl();
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.ImageryProvider : object {
    [CompilerGeneratedAttribute]
private string <Attribution>k__BackingField;
    [CompilerGeneratedAttribute]
private CoverageArea[] <CoverageAreas>k__BackingField;
    [DataMemberAttribute]
public string Attribution { get; public set; }
    [DataMemberAttribute]
public CoverageArea[] CoverageAreas { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Attribution();
    [CompilerGeneratedAttribute]
public void set_Attribution(string value);
    [CompilerGeneratedAttribute]
public CoverageArea[] get_CoverageAreas();
    [CompilerGeneratedAttribute]
public void set_CoverageAreas(CoverageArea[] value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.Instruction : object {
    [CompilerGeneratedAttribute]
private string <ManeuverType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormattedText>k__BackingField;
    [DataMemberAttribute]
public string ManeuverType { get; public set; }
    [DataMemberAttribute]
public string Text { get; public set; }
    [DataMemberAttribute]
public string FormattedText { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ManeuverType();
    [CompilerGeneratedAttribute]
public void set_ManeuverType(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_FormattedText();
    [CompilerGeneratedAttribute]
public void set_FormattedText(string value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.ItineraryItem : object {
    [CompilerGeneratedAttribute]
private ItineraryItem[] <ChildItineraryItems>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompassDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private Detail[] <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exit>k__BackingField;
    [CompilerGeneratedAttribute]
private Hint[] <Hints>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconType>k__BackingField;
    [CompilerGeneratedAttribute]
private Instruction <Instruction>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <ManeuverPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SideOfStreet>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Signs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Time>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TollZone>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TowardsRoadName>k__BackingField;
    [CompilerGeneratedAttribute]
private TransitLine <TransitLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TransitStopId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TransitTerminus>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TravelDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TravelDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TravelMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Warning[] <Warning>k__BackingField;
    [DataMemberAttribute]
public ItineraryItem[] ChildItineraryItems { get; public set; }
    [DataMemberAttribute]
public string CompassDirection { get; public set; }
    [DataMemberAttribute]
public Detail[] Details { get; public set; }
    [DataMemberAttribute]
public string Exit { get; public set; }
    [DataMemberAttribute]
public Hint[] Hints { get; public set; }
    [DataMemberAttribute]
public string IconType { get; public set; }
    [DataMemberAttribute]
public Instruction Instruction { get; public set; }
    [DataMemberAttribute]
public Point ManeuverPoint { get; public set; }
    [DataMemberAttribute]
public string SideOfStreet { get; public set; }
    [DataMemberAttribute]
public String[] Signs { get; public set; }
    [DataMemberAttribute]
public string Time { get; public set; }
    public DateTime TimeUtc { get; public set; }
    [DataMemberAttribute]
public string TollZone { get; public set; }
    [DataMemberAttribute]
public string TowardsRoadName { get; public set; }
    [DataMemberAttribute]
public TransitLine TransitLine { get; public set; }
    [DataMemberAttribute]
public int TransitStopId { get; public set; }
    [DataMemberAttribute]
public string TransitTerminus { get; public set; }
    [DataMemberAttribute]
public double TravelDistance { get; public set; }
    [DataMemberAttribute]
public double TravelDuration { get; public set; }
    [DataMemberAttribute]
public string TravelMode { get; public set; }
    [DataMemberAttribute]
public Warning[] Warning { get; public set; }
    [CompilerGeneratedAttribute]
public ItineraryItem[] get_ChildItineraryItems();
    [CompilerGeneratedAttribute]
public void set_ChildItineraryItems(ItineraryItem[] value);
    [CompilerGeneratedAttribute]
public string get_CompassDirection();
    [CompilerGeneratedAttribute]
public void set_CompassDirection(string value);
    [CompilerGeneratedAttribute]
public Detail[] get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(Detail[] value);
    [CompilerGeneratedAttribute]
public string get_Exit();
    [CompilerGeneratedAttribute]
public void set_Exit(string value);
    [CompilerGeneratedAttribute]
public Hint[] get_Hints();
    [CompilerGeneratedAttribute]
public void set_Hints(Hint[] value);
    [CompilerGeneratedAttribute]
public string get_IconType();
    [CompilerGeneratedAttribute]
public void set_IconType(string value);
    [CompilerGeneratedAttribute]
public Instruction get_Instruction();
    [CompilerGeneratedAttribute]
public void set_Instruction(Instruction value);
    [CompilerGeneratedAttribute]
public Point get_ManeuverPoint();
    [CompilerGeneratedAttribute]
public void set_ManeuverPoint(Point value);
    [CompilerGeneratedAttribute]
public string get_SideOfStreet();
    [CompilerGeneratedAttribute]
public void set_SideOfStreet(string value);
    [CompilerGeneratedAttribute]
public String[] get_Signs();
    [CompilerGeneratedAttribute]
public void set_Signs(String[] value);
    [CompilerGeneratedAttribute]
public string get_Time();
    [CompilerGeneratedAttribute]
public void set_Time(string value);
    public DateTime get_TimeUtc();
    public void set_TimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public string get_TollZone();
    [CompilerGeneratedAttribute]
public void set_TollZone(string value);
    [CompilerGeneratedAttribute]
public string get_TowardsRoadName();
    [CompilerGeneratedAttribute]
public void set_TowardsRoadName(string value);
    [CompilerGeneratedAttribute]
public TransitLine get_TransitLine();
    [CompilerGeneratedAttribute]
public void set_TransitLine(TransitLine value);
    [CompilerGeneratedAttribute]
public int get_TransitStopId();
    [CompilerGeneratedAttribute]
public void set_TransitStopId(int value);
    [CompilerGeneratedAttribute]
public string get_TransitTerminus();
    [CompilerGeneratedAttribute]
public void set_TransitTerminus(string value);
    [CompilerGeneratedAttribute]
public double get_TravelDistance();
    [CompilerGeneratedAttribute]
public void set_TravelDistance(double value);
    [CompilerGeneratedAttribute]
public double get_TravelDuration();
    [CompilerGeneratedAttribute]
public void set_TravelDuration(double value);
    [CompilerGeneratedAttribute]
public string get_TravelMode();
    [CompilerGeneratedAttribute]
public void set_TravelMode(string value);
    [CompilerGeneratedAttribute]
public Warning[] get_Warning();
    [CompilerGeneratedAttribute]
public void set_Warning(Warning[] value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.Line : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[][] <Coordinates>k__BackingField;
    [DataMemberAttribute]
public string Type { get; public set; }
    [DataMemberAttribute]
public Double[][] Coordinates { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public Double[][] get_Coordinates();
    [CompilerGeneratedAttribute]
public void set_Coordinates(Double[][] value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.Location : Resource {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <Point>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Address <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Confidence>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <MatchCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private Point[] <GeocodePoints>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryParseValue[] <QueryParseValues>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public Point Point { get; public set; }
    [DataMemberAttribute]
public string EntityType { get; public set; }
    [DataMemberAttribute]
public Address Address { get; public set; }
    [DataMemberAttribute]
public string Confidence { get; public set; }
    [DataMemberAttribute]
public String[] MatchCodes { get; public set; }
    [DataMemberAttribute]
public Point[] GeocodePoints { get; public set; }
    [DataMemberAttribute]
public QueryParseValue[] QueryParseValues { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Point get_Point();
    [CompilerGeneratedAttribute]
public void set_Point(Point value);
    [CompilerGeneratedAttribute]
public string get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(string value);
    [CompilerGeneratedAttribute]
public Address get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(Address value);
    [CompilerGeneratedAttribute]
public string get_Confidence();
    [CompilerGeneratedAttribute]
public void set_Confidence(string value);
    [CompilerGeneratedAttribute]
public String[] get_MatchCodes();
    [CompilerGeneratedAttribute]
public void set_MatchCodes(String[] value);
    [CompilerGeneratedAttribute]
public Point[] get_GeocodePoints();
    [CompilerGeneratedAttribute]
public void set_GeocodePoints(Point[] value);
    [CompilerGeneratedAttribute]
public QueryParseValue[] get_QueryParseValues();
    [CompilerGeneratedAttribute]
public void set_QueryParseValues(QueryParseValue[] value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.Pixel : object {
    [CompilerGeneratedAttribute]
private string <X>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Y>k__BackingField;
    [DataMemberAttribute]
public string X { get; public set; }
    [DataMemberAttribute]
public string Y { get; public set; }
    [CompilerGeneratedAttribute]
public string get_X();
    [CompilerGeneratedAttribute]
public void set_X(string value);
    [CompilerGeneratedAttribute]
public string get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(string value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.Point : Shape {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <Coordinates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CalculationMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <UsageTypes>k__BackingField;
    [DataMemberAttribute]
public string Type { get; public set; }
    [DataMemberAttribute]
public Double[] Coordinates { get; public set; }
    [DataMemberAttribute]
public string CalculationMethod { get; public set; }
    [DataMemberAttribute]
public String[] UsageTypes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public Double[] get_Coordinates();
    [CompilerGeneratedAttribute]
public void set_Coordinates(Double[] value);
    [CompilerGeneratedAttribute]
public string get_CalculationMethod();
    [CompilerGeneratedAttribute]
public void set_CalculationMethod(string value);
    [CompilerGeneratedAttribute]
public String[] get_UsageTypes();
    [CompilerGeneratedAttribute]
public void set_UsageTypes(String[] value);
    public Coordinate GetCoordinate();
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.PushpinMetdata : object {
    [CompilerGeneratedAttribute]
private Pixel <Anchor>k__BackingField;
    [CompilerGeneratedAttribute]
private Pixel <BottomRightOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private Pixel <TopLeftOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <Point>k__BackingField;
    [DataMemberAttribute]
public Pixel Anchor { get; public set; }
    [DataMemberAttribute]
public Pixel BottomRightOffset { get; public set; }
    [DataMemberAttribute]
public Pixel TopLeftOffset { get; public set; }
    [DataMemberAttribute]
public Point Point { get; public set; }
    [CompilerGeneratedAttribute]
public Pixel get_Anchor();
    [CompilerGeneratedAttribute]
public void set_Anchor(Pixel value);
    [CompilerGeneratedAttribute]
public Pixel get_BottomRightOffset();
    [CompilerGeneratedAttribute]
public void set_BottomRightOffset(Pixel value);
    [CompilerGeneratedAttribute]
public Pixel get_TopLeftOffset();
    [CompilerGeneratedAttribute]
public void set_TopLeftOffset(Pixel value);
    [CompilerGeneratedAttribute]
public Point get_Point();
    [CompilerGeneratedAttribute]
public void set_Point(Point value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.QueryParseValue : object {
    [CompilerGeneratedAttribute]
private string <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [DataMemberAttribute]
public string Property { get; public set; }
    [DataMemberAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.Reporting.Map.WebForms.BingMaps.Location")]
[KnownTypeAttribute("Microsoft.Reporting.Map.WebForms.BingMaps.Route")]
[KnownTypeAttribute("Microsoft.Reporting.Map.WebForms.BingMaps.TrafficIncident")]
[KnownTypeAttribute("Microsoft.Reporting.Map.WebForms.BingMaps.ImageryMetadata")]
[KnownTypeAttribute("Microsoft.Reporting.Map.WebForms.BingMaps.ElevationData")]
[KnownTypeAttribute("Microsoft.Reporting.Map.WebForms.BingMaps.SeaLevelData")]
[KnownTypeAttribute("Microsoft.Reporting.Map.WebForms.BingMaps.CompressedPointList")]
[KnownTypeAttribute("Microsoft.Reporting.Map.WebForms.BingMaps.GeospatialEndpointResponse")]
public class Microsoft.Reporting.Map.WebForms.BingMaps.Resource : object {
    [CompilerGeneratedAttribute]
private Double[] <BoundingBox>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [DataMemberAttribute]
public Double[] BoundingBox { get; public set; }
    [DataMemberAttribute]
public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public Double[] get_BoundingBox();
    [CompilerGeneratedAttribute]
public void set_BoundingBox(Double[] value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.ResourceSet : object {
    [CompilerGeneratedAttribute]
private long <EstimatedTotal>k__BackingField;
    [CompilerGeneratedAttribute]
private Resource[] <Resources>k__BackingField;
    [DataMemberAttribute]
public long EstimatedTotal { get; public set; }
    [DataMemberAttribute]
public Resource[] Resources { get; public set; }
    [CompilerGeneratedAttribute]
public long get_EstimatedTotal();
    [CompilerGeneratedAttribute]
public void set_EstimatedTotal(long value);
    [CompilerGeneratedAttribute]
public Resource[] get_Resources();
    [CompilerGeneratedAttribute]
public void set_Resources(Resource[] value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.Response : object {
    [CompilerGeneratedAttribute]
private string <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrandLogoUri>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationResultCode>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <errorDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceId>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceSet[] <ResourceSets>k__BackingField;
    [DataMemberAttribute]
public string Copyright { get; public set; }
    [DataMemberAttribute]
public string BrandLogoUri { get; public set; }
    [DataMemberAttribute]
public int StatusCode { get; public set; }
    [DataMemberAttribute]
public string StatusDescription { get; public set; }
    [DataMemberAttribute]
public string AuthenticationResultCode { get; public set; }
    [DataMemberAttribute]
public String[] errorDetails { get; public set; }
    [DataMemberAttribute]
public string TraceId { get; public set; }
    [DataMemberAttribute]
public ResourceSet[] ResourceSets { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Copyright();
    [CompilerGeneratedAttribute]
public void set_Copyright(string value);
    [CompilerGeneratedAttribute]
public string get_BrandLogoUri();
    [CompilerGeneratedAttribute]
public void set_BrandLogoUri(string value);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public string get_StatusDescription();
    [CompilerGeneratedAttribute]
public void set_StatusDescription(string value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationResultCode();
    [CompilerGeneratedAttribute]
public void set_AuthenticationResultCode(string value);
    [CompilerGeneratedAttribute]
public String[] get_errorDetails();
    [CompilerGeneratedAttribute]
public void set_errorDetails(String[] value);
    [CompilerGeneratedAttribute]
public string get_TraceId();
    [CompilerGeneratedAttribute]
public void set_TraceId(string value);
    [CompilerGeneratedAttribute]
public ResourceSet[] get_ResourceSets();
    [CompilerGeneratedAttribute]
public void set_ResourceSets(ResourceSet[] value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.RoadShield : object {
    [CompilerGeneratedAttribute]
private int <Bucket>k__BackingField;
    [CompilerGeneratedAttribute]
private Shield[] <Shields>k__BackingField;
    [DataMemberAttribute]
public int Bucket { get; public set; }
    [DataMemberAttribute]
public Shield[] Shields { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Bucket();
    [CompilerGeneratedAttribute]
public void set_Bucket(int value);
    [CompilerGeneratedAttribute]
public Shield[] get_Shields();
    [CompilerGeneratedAttribute]
public void set_Shields(Shield[] value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.Route : Resource {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DistanceUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DurationUnit>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TravelDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TravelDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TravelDurationTraffic>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TrafficCongestion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TrafficDataUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteLeg[] <RouteLegs>k__BackingField;
    [CompilerGeneratedAttribute]
private RoutePath <RoutePath>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string DistanceUnit { get; public set; }
    [DataMemberAttribute]
public string DurationUnit { get; public set; }
    [DataMemberAttribute]
public double TravelDistance { get; public set; }
    [DataMemberAttribute]
public double TravelDuration { get; public set; }
    [DataMemberAttribute]
public double TravelDurationTraffic { get; public set; }
    [DataMemberAttribute]
public string TrafficCongestion { get; public set; }
    [DataMemberAttribute]
public string TrafficDataUsed { get; public set; }
    [DataMemberAttribute]
public RouteLeg[] RouteLegs { get; public set; }
    [DataMemberAttribute]
public RoutePath RoutePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_DistanceUnit();
    [CompilerGeneratedAttribute]
public void set_DistanceUnit(string value);
    [CompilerGeneratedAttribute]
public string get_DurationUnit();
    [CompilerGeneratedAttribute]
public void set_DurationUnit(string value);
    [CompilerGeneratedAttribute]
public double get_TravelDistance();
    [CompilerGeneratedAttribute]
public void set_TravelDistance(double value);
    [CompilerGeneratedAttribute]
public double get_TravelDuration();
    [CompilerGeneratedAttribute]
public void set_TravelDuration(double value);
    [CompilerGeneratedAttribute]
public double get_TravelDurationTraffic();
    [CompilerGeneratedAttribute]
public void set_TravelDurationTraffic(double value);
    [CompilerGeneratedAttribute]
public string get_TrafficCongestion();
    [CompilerGeneratedAttribute]
public void set_TrafficCongestion(string value);
    [CompilerGeneratedAttribute]
public string get_TrafficDataUsed();
    [CompilerGeneratedAttribute]
public void set_TrafficDataUsed(string value);
    [CompilerGeneratedAttribute]
public RouteLeg[] get_RouteLegs();
    [CompilerGeneratedAttribute]
public void set_RouteLegs(RouteLeg[] value);
    [CompilerGeneratedAttribute]
public RoutePath get_RoutePath();
    [CompilerGeneratedAttribute]
public void set_RoutePath(RoutePath value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.RouteLeg : object {
    [CompilerGeneratedAttribute]
private double <TravelDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TravelDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Cost>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <ActualStart>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <ActualEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private Location <StartLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Location <EndLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private ItineraryItem[] <ItineraryItems>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RouteRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private RouteSubLeg[] <RouteSubLegs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <AlternateVias>k__BackingField;
    [DataMemberAttribute]
public double TravelDistance { get; public set; }
    [DataMemberAttribute]
public double TravelDuration { get; public set; }
    [DataMemberAttribute]
public double Cost { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public Point ActualStart { get; public set; }
    [DataMemberAttribute]
public Point ActualEnd { get; public set; }
    [DataMemberAttribute]
public Location StartLocation { get; public set; }
    [DataMemberAttribute]
public Location EndLocation { get; public set; }
    [DataMemberAttribute]
public ItineraryItem[] ItineraryItems { get; public set; }
    [DataMemberAttribute]
public string RouteRegion { get; public set; }
    [DataMemberAttribute]
public RouteSubLeg[] RouteSubLegs { get; public set; }
    [DataMemberAttribute]
public string StartTime { get; public set; }
    public DateTime StartTimeUtc { get; public set; }
    [DataMemberAttribute]
public string EndTime { get; public set; }
    public DateTime EndTimeUtc { get; public set; }
    [DataMemberAttribute]
public Object[] AlternateVias { get; public set; }
    [CompilerGeneratedAttribute]
public double get_TravelDistance();
    [CompilerGeneratedAttribute]
public void set_TravelDistance(double value);
    [CompilerGeneratedAttribute]
public double get_TravelDuration();
    [CompilerGeneratedAttribute]
public void set_TravelDuration(double value);
    [CompilerGeneratedAttribute]
public double get_Cost();
    [CompilerGeneratedAttribute]
public void set_Cost(double value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Point get_ActualStart();
    [CompilerGeneratedAttribute]
public void set_ActualStart(Point value);
    [CompilerGeneratedAttribute]
public Point get_ActualEnd();
    [CompilerGeneratedAttribute]
public void set_ActualEnd(Point value);
    [CompilerGeneratedAttribute]
public Location get_StartLocation();
    [CompilerGeneratedAttribute]
public void set_StartLocation(Location value);
    [CompilerGeneratedAttribute]
public Location get_EndLocation();
    [CompilerGeneratedAttribute]
public void set_EndLocation(Location value);
    [CompilerGeneratedAttribute]
public ItineraryItem[] get_ItineraryItems();
    [CompilerGeneratedAttribute]
public void set_ItineraryItems(ItineraryItem[] value);
    [CompilerGeneratedAttribute]
public string get_RouteRegion();
    [CompilerGeneratedAttribute]
public void set_RouteRegion(string value);
    [CompilerGeneratedAttribute]
public RouteSubLeg[] get_RouteSubLegs();
    [CompilerGeneratedAttribute]
public void set_RouteSubLegs(RouteSubLeg[] value);
    [CompilerGeneratedAttribute]
public string get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(string value);
    public DateTime get_StartTimeUtc();
    public void set_StartTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public string get_EndTime();
    [CompilerGeneratedAttribute]
public void set_EndTime(string value);
    public DateTime get_EndTimeUtc();
    public void set_EndTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public Object[] get_AlternateVias();
    [CompilerGeneratedAttribute]
public void set_AlternateVias(Object[] value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.RoutePath : object {
    [CompilerGeneratedAttribute]
private Line <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private Generalization[] <Generalizations>k__BackingField;
    [DataMemberAttribute]
public Line Line { get; public set; }
    [DataMemberAttribute]
public Generalization[] Generalizations { get; public set; }
    [CompilerGeneratedAttribute]
public Line get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(Line value);
    [CompilerGeneratedAttribute]
public Generalization[] get_Generalizations();
    [CompilerGeneratedAttribute]
public void set_Generalizations(Generalization[] value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.RouteSubLeg : object {
    [CompilerGeneratedAttribute]
private Waypoint <EndWaypoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Waypoint <StartWaypoint>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TravelDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TravelDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TravelDurationTraffic>k__BackingField;
    [DataMemberAttribute]
public Waypoint EndWaypoint { get; public set; }
    [DataMemberAttribute]
public Waypoint StartWaypoint { get; public set; }
    [DataMemberAttribute]
public double TravelDistance { get; public set; }
    [DataMemberAttribute]
public double TravelDuration { get; public set; }
    [DataMemberAttribute]
public double TravelDurationTraffic { get; public set; }
    [CompilerGeneratedAttribute]
public Waypoint get_EndWaypoint();
    [CompilerGeneratedAttribute]
public void set_EndWaypoint(Waypoint value);
    [CompilerGeneratedAttribute]
public Waypoint get_StartWaypoint();
    [CompilerGeneratedAttribute]
public void set_StartWaypoint(Waypoint value);
    [CompilerGeneratedAttribute]
public double get_TravelDistance();
    [CompilerGeneratedAttribute]
public void set_TravelDistance(double value);
    [CompilerGeneratedAttribute]
public double get_TravelDuration();
    [CompilerGeneratedAttribute]
public void set_TravelDuration(double value);
    [CompilerGeneratedAttribute]
public double get_TravelDurationTraffic();
    [CompilerGeneratedAttribute]
public void set_TravelDurationTraffic(double value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.SeaLevelData : Resource {
    [CompilerGeneratedAttribute]
private Int32[] <Offsets>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ZoomLevel>k__BackingField;
    [DataMemberAttribute]
public Int32[] Offsets { get; public set; }
    [DataMemberAttribute]
public int ZoomLevel { get; public set; }
    [CompilerGeneratedAttribute]
public Int32[] get_Offsets();
    [CompilerGeneratedAttribute]
public void set_Offsets(Int32[] value);
    [CompilerGeneratedAttribute]
public int get_ZoomLevel();
    [CompilerGeneratedAttribute]
public void set_ZoomLevel(int value);
}
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.Reporting.Map.WebForms.BingMaps.Point")]
public class Microsoft.Reporting.Map.WebForms.BingMaps.Shape : object {
    [CompilerGeneratedAttribute]
private Double[] <BoundingBox>k__BackingField;
    [DataMemberAttribute]
public Double[] BoundingBox { get; public set; }
    [CompilerGeneratedAttribute]
public Double[] get_BoundingBox();
    [CompilerGeneratedAttribute]
public void set_BoundingBox(Double[] value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.Shield : object {
    [CompilerGeneratedAttribute]
private String[] <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RoadShieldType>k__BackingField;
    [DataMemberAttribute]
public String[] Labels { get; public set; }
    [DataMemberAttribute]
public int RoadShieldType { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(String[] value);
    [CompilerGeneratedAttribute]
public int get_RoadShieldType();
    [CompilerGeneratedAttribute]
public void set_RoadShieldType(int value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.StaticMapMetadata : ImageryMetadata {
    [CompilerGeneratedAttribute]
private Point <MapCenter>k__BackingField;
    [CompilerGeneratedAttribute]
private PushpinMetdata[] <Pushpins>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Zoom>k__BackingField;
    [DataMemberAttribute]
public Point MapCenter { get; public set; }
    [DataMemberAttribute]
public PushpinMetdata[] Pushpins { get; public set; }
    [DataMemberAttribute]
public string Zoom { get; public set; }
    [CompilerGeneratedAttribute]
public Point get_MapCenter();
    [CompilerGeneratedAttribute]
public void set_MapCenter(Point value);
    [CompilerGeneratedAttribute]
public PushpinMetdata[] get_Pushpins();
    [CompilerGeneratedAttribute]
public void set_Pushpins(PushpinMetdata[] value);
    [CompilerGeneratedAttribute]
public string get_Zoom();
    [CompilerGeneratedAttribute]
public void set_Zoom(string value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.TrafficIncident : Resource {
    [CompilerGeneratedAttribute]
private Point <Point>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Congestion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Detour>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private string <End>k__BackingField;
    [CompilerGeneratedAttribute]
private long <IncidentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Lane>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastModified>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RoadClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <ToPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LocationCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verified>k__BackingField;
    [DataMemberAttribute]
public Point Point { get; public set; }
    [DataMemberAttribute]
public string Congestion { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public string Detour { get; public set; }
    [DataMemberAttribute]
public string Start { get; public set; }
    public DateTime StartDateTimeUtc { get; public set; }
    [DataMemberAttribute]
public string End { get; public set; }
    public DateTime EndDateTimeUtc { get; public set; }
    [DataMemberAttribute]
public long IncidentId { get; public set; }
    [DataMemberAttribute]
public string Lane { get; public set; }
    [DataMemberAttribute]
public string LastModified { get; public set; }
    public DateTime LastModifiedDateTimeUtc { get; public set; }
    [DataMemberAttribute]
public bool RoadClosed { get; public set; }
    [DataMemberAttribute]
public int Severity { get; public set; }
    [DataMemberAttribute]
public Point ToPoint { get; public set; }
    [DataMemberAttribute]
public String[] LocationCodes { get; public set; }
    [DataMemberAttribute]
public int Type { get; public set; }
    [DataMemberAttribute]
public bool Verified { get; public set; }
    [CompilerGeneratedAttribute]
public Point get_Point();
    [CompilerGeneratedAttribute]
public void set_Point(Point value);
    [CompilerGeneratedAttribute]
public string get_Congestion();
    [CompilerGeneratedAttribute]
public void set_Congestion(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Detour();
    [CompilerGeneratedAttribute]
public void set_Detour(string value);
    [CompilerGeneratedAttribute]
public string get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(string value);
    public DateTime get_StartDateTimeUtc();
    public void set_StartDateTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public string get_End();
    [CompilerGeneratedAttribute]
public void set_End(string value);
    public DateTime get_EndDateTimeUtc();
    public void set_EndDateTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public long get_IncidentId();
    [CompilerGeneratedAttribute]
public void set_IncidentId(long value);
    [CompilerGeneratedAttribute]
public string get_Lane();
    [CompilerGeneratedAttribute]
public void set_Lane(string value);
    [CompilerGeneratedAttribute]
public string get_LastModified();
    [CompilerGeneratedAttribute]
public void set_LastModified(string value);
    public DateTime get_LastModifiedDateTimeUtc();
    public void set_LastModifiedDateTimeUtc(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_RoadClosed();
    [CompilerGeneratedAttribute]
public void set_RoadClosed(bool value);
    [CompilerGeneratedAttribute]
public int get_Severity();
    [CompilerGeneratedAttribute]
public void set_Severity(int value);
    [CompilerGeneratedAttribute]
public Point get_ToPoint();
    [CompilerGeneratedAttribute]
public void set_ToPoint(Point value);
    [CompilerGeneratedAttribute]
public String[] get_LocationCodes();
    [CompilerGeneratedAttribute]
public void set_LocationCodes(String[] value);
    [CompilerGeneratedAttribute]
public int get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(int value);
    [CompilerGeneratedAttribute]
public bool get_Verified();
    [CompilerGeneratedAttribute]
public void set_Verified(bool value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.TransitLine : object {
    [CompilerGeneratedAttribute]
private string <VerboseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AbbreviatedName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AgencyId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AgencyName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LineTextColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhoneNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderInfo>k__BackingField;
    [DataMemberAttribute]
public string VerboseName { get; public set; }
    [DataMemberAttribute]
public string AbbreviatedName { get; public set; }
    [DataMemberAttribute]
public long AgencyId { get; public set; }
    [DataMemberAttribute]
public string AgencyName { get; public set; }
    [DataMemberAttribute]
public long LineColor { get; public set; }
    [DataMemberAttribute]
public long LineTextColor { get; public set; }
    [DataMemberAttribute]
public string Uri { get; public set; }
    [DataMemberAttribute]
public string PhoneNumber { get; public set; }
    [DataMemberAttribute]
public string ProviderInfo { get; public set; }
    [CompilerGeneratedAttribute]
public string get_VerboseName();
    [CompilerGeneratedAttribute]
public void set_VerboseName(string value);
    [CompilerGeneratedAttribute]
public string get_AbbreviatedName();
    [CompilerGeneratedAttribute]
public void set_AbbreviatedName(string value);
    [CompilerGeneratedAttribute]
public long get_AgencyId();
    [CompilerGeneratedAttribute]
public void set_AgencyId(long value);
    [CompilerGeneratedAttribute]
public string get_AgencyName();
    [CompilerGeneratedAttribute]
public void set_AgencyName(string value);
    [CompilerGeneratedAttribute]
public long get_LineColor();
    [CompilerGeneratedAttribute]
public void set_LineColor(long value);
    [CompilerGeneratedAttribute]
public long get_LineTextColor();
    [CompilerGeneratedAttribute]
public void set_LineTextColor(long value);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public string get_PhoneNumber();
    [CompilerGeneratedAttribute]
public void set_PhoneNumber(string value);
    [CompilerGeneratedAttribute]
public string get_ProviderInfo();
    [CompilerGeneratedAttribute]
public void set_ProviderInfo(string value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.Warning : object {
    [CompilerGeneratedAttribute]
private string <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <To>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WarningType>k__BackingField;
    [DataMemberAttribute]
public string Origin { get; public set; }
    public Coordinate OriginCoordinate { get; public set; }
    [DataMemberAttribute]
public string Severity { get; public set; }
    [DataMemberAttribute]
public string Text { get; public set; }
    [DataMemberAttribute]
public string To { get; public set; }
    public Coordinate ToCoordinate { get; public set; }
    [DataMemberAttribute]
public string WarningType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Origin();
    [CompilerGeneratedAttribute]
public void set_Origin(string value);
    public Coordinate get_OriginCoordinate();
    public void set_OriginCoordinate(Coordinate value);
    [CompilerGeneratedAttribute]
public string get_Severity();
    [CompilerGeneratedAttribute]
public void set_Severity(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_To();
    [CompilerGeneratedAttribute]
public void set_To(string value);
    public Coordinate get_ToCoordinate();
    public void set_ToCoordinate(Coordinate value);
    [CompilerGeneratedAttribute]
public string get_WarningType();
    [CompilerGeneratedAttribute]
public void set_WarningType(string value);
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.BingMaps.Waypoint : Point {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVia>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocationIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RoutePathIndex>k__BackingField;
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public bool IsVia { get; public set; }
    [DataMemberAttribute]
public string LocationIdentifier { get; public set; }
    [DataMemberAttribute]
public int RoutePathIndex { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_IsVia();
    [CompilerGeneratedAttribute]
public void set_IsVia(bool value);
    [CompilerGeneratedAttribute]
public string get_LocationIdentifier();
    [CompilerGeneratedAttribute]
public void set_LocationIdentifier(string value);
    [CompilerGeneratedAttribute]
public int get_RoutePathIndex();
    [CompilerGeneratedAttribute]
public void set_RoutePathIndex(int value);
}
internal class Microsoft.Reporting.Map.WebForms.BitWriter : object {
    private Stream baseStream;
    private long startOffset;
    private byte currentByte;
    private int currentBitIndex;
    public Stream BaseStream { get; }
    public long BytesWritten { get; }
    public BitWriter(Stream stream);
    public Stream get_BaseStream();
    public long get_BytesWritten();
    public void Flush();
    public void Close();
    public void WriteBit(bool bitValue);
    public void WriteByte(byte byteValue);
    public void WriteBytes(Byte[] byteValues);
    public void WriteBits(Byte[] byteValues, int bitNumber);
    public void WriteSI32(int intValue);
    public void WriteSI16(short shortValue);
    public void WriteBitValue(int intValue, int bitNumber, bool signed);
    private Byte[] SplitAndShiftByte(byte byteValue, int splitIndex);
}
internal class Microsoft.Reporting.Map.WebForms.BorderTypeRegistry : object {
    internal Hashtable registeredBorderTypes;
    private Hashtable createdBorderTypes;
    private IServiceContainer serviceContainer;
    public BorderTypeRegistry(IServiceContainer container);
    [EditorBrowsableAttribute("1")]
public sealed virtual object GetService(Type serviceType);
    public void Register(string name, Type borderType);
    public IBorderType GetBorderType(string name);
}
internal class Microsoft.Reporting.Map.WebForms.BufferBitmap : object {
    private Bitmap bitmap;
    private Graphics graphics;
    private Size size;
    private bool disposed;
    public Size Size { get; public set; }
    public Bitmap Bitmap { get; }
    public Graphics Graphics { get; }
    public Size get_Size();
    public void set_Size(Size value);
    public Bitmap get_Bitmap();
    public Graphics get_Graphics();
    private void DisposeObjects();
    public void Invalidate();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class Microsoft.Reporting.Map.WebForms.CallbackEvent : MulticastDelegate {
    public CallbackEvent(object object, IntPtr method);
    public virtual void Invoke(object sender, CallbackEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CallbackEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.Map.WebForms.CallbackEventArgs : EventArgs {
    private string commandName;
    private string commandArgument;
    private MapControl mapControl;
    private string returnCommandName;
    private string returnCommandArgument;
    public string CommandName { get; }
    public string CommandArgument { get; }
    public MapControl MapControl { get; }
    public string ReturnCommandName { get; public set; }
    public string ReturnCommandArgument { get; public set; }
    public CallbackEventArgs(string commandName, string commandArgument, MapControl mapControl);
    public string get_CommandName();
    public string get_CommandArgument();
    public MapControl get_MapControl();
    public string get_ReturnCommandName();
    public void set_ReturnCommandName(string value);
    public string get_ReturnCommandArgument();
    public void set_ReturnCommandArgument(string value);
}
internal class Microsoft.Reporting.Map.WebForms.CallbackManager : MapObject {
    private string jsCode;
    private string controlUpdates;
    private bool disableClientUpdate;
    public bool DisableClientUpdate { get; public set; }
    public CallbackManager(object parent);
    public bool get_DisableClientUpdate();
    public void set_DisableClientUpdate(bool value);
    public void ExecuteClientScript(string jsSourceCode);
    internal void Reset();
    internal string GetJavaScript();
    internal void ResetControlUpdates();
    internal string GetControlUpdates();
}
internal class Microsoft.Reporting.Map.WebForms.ClickEvent : MulticastDelegate {
    public ClickEvent(object object, IntPtr method);
    public virtual void Invoke(object sender, ClickEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ClickEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.Map.WebForms.ClickEventArgs : EventArgs {
    private int x;
    private int y;
    private MapControl mapControl;
    private string returnCommandName;
    private string returnCommandArgument;
    public int X { get; }
    public int Y { get; }
    public MapControl MapControl { get; }
    public string ReturnCommandName { get; public set; }
    public string ReturnCommandArgument { get; public set; }
    public ClickEventArgs(int x, int y, MapControl mapControl);
    public int get_X();
    public int get_Y();
    public MapControl get_MapControl();
    public string get_ReturnCommandName();
    public void set_ReturnCommandName(string value);
    public string get_ReturnCommandArgument();
    public void set_ReturnCommandArgument(string value);
}
internal class Microsoft.Reporting.Map.WebForms.CollectionItemTypeConverter : TypeConverter {
    internal Type simpleType;
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class Microsoft.Reporting.Map.WebForms.ColorGenerator : object {
    private static Color[] colorsDundas;
    private static Color[] colorsPacific;
    private static ColorGenerator();
    internal Color[] GenerateColors(MapColorPalette palette, int colorCount);
    private bool CheckDistance(Color color, Color[] colors, int index, int minimumDistance);
}
internal class Microsoft.Reporting.Map.WebForms.ColorHandler : object {
    internal static RGB HSVtoRGB(int H, int S, int V);
    internal static Color HSVtoColor(HSV hsv);
    internal static Color HSVtoColor(int H, int S, int V);
    internal static HSV ColorToHSV(Color color);
    internal static RGB HSVtoRGB(HSV HSV);
    internal static HSV RGBtoHSV(RGB RGB);
}
internal enum Microsoft.Reporting.Map.WebForms.ColoringMode : Enum {
    public int value__;
    public static ColoringMode ColorRange;
    public static ColoringMode DistinctColors;
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.AutoSizePanelConverter")]
internal class Microsoft.Reporting.Map.WebForms.ColorSwatchPanel : AutoSizePanel {
    private static int DummyItemsCount;
    private int PanelPadding;
    private int TitleSeparatorSize;
    private int TickMarkLabelGapSize;
    private float TrimmingProtector;
    private bool showSelectedTitle;
    private RectangleF titlePosition;
    private Font font;
    private Color outlineColor;
    private Color labelColor;
    private LabelAlignment labelAlignment;
    private Color rangeGapsColor;
    private string numricLabelFormat;
    private SwatchLabelType labelType;
    private bool showEndLabels;
    private int tickMarkLength;
    private int labelInterval;
    private SwatchColorCollection swatchColors;
    private string noDataText;
    private Font titleFont;
    private Color titleColor;
    private StringAlignment titleAlignment;
    private string title;
    [NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
internal bool ShowSelectedTitle { get; internal set; }
    [NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
internal RectangleF TitleSelectionRectangle { get; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeColorSwatchPanel_Font")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8.25pt")]
public Font Font { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeColorSwatchPanel_OutlineColor")]
[DefaultValueAttribute("System.Drawing.Color", "DimGray")]
public Color OutlineColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeColorSwatchPanel_LabelColor")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color LabelColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeColorSwatchPanel_LabelAlignment")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public LabelAlignment LabelAlignment { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeColorSwatchPanel_RangeGapColor")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
public Color RangeGapColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeColorSwatchPanel_NumericLabelFormat")]
[DefaultValueAttribute("#,##0.##")]
public string NumericLabelFormat { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeColorSwatchPanel_LabelType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SwatchLabelType LabelType { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeColorSwatchPanel_ShowEndLabels")]
[DefaultValueAttribute("True")]
public bool ShowEndLabels { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeColorSwatchPanel_TickMarkLength")]
[DefaultValueAttribute("3")]
public int TickMarkLength { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeColorSwatchPanel_LabelInterval")]
[DefaultValueAttribute("1")]
public int LabelInterval { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeColorSwatchPanel_Colors")]
[DesignerSerializationVisibilityAttribute("2")]
public SwatchColorCollection Colors { get; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeColorSwatchPanel_NoDataText")]
[DefaultValueAttribute("N/A")]
public string NoDataText { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Title")]
[SRDescriptionAttribute("DescriptionAttributeColorSwatchPanel_TitleFont")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8.25pt, style=Bold")]
public Font TitleFont { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Title")]
[SRDescriptionAttribute("DescriptionAttributeColorSwatchPanel_TitleColor")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color TitleColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Title")]
[SRDescriptionAttribute("DescriptionAttributeColorSwatchPanel_TitleAlignment")]
[DefaultValueAttribute]
public StringAlignment TitleAlignment { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Title")]
[SRDescriptionAttribute("DescriptionAttributeColorSwatchPanel_Title")]
[DefaultValueAttribute("")]
public string Title { get; public set; }
    internal bool IsEmpty { get; }
    internal ColorSwatchPanel(CommonElements common);
    internal bool get_ShowSelectedTitle();
    internal void set_ShowSelectedTitle(bool value);
    internal RectangleF get_TitleSelectionRectangle();
    public virtual RectangleF GetSelectionRectangle(MapGraphics g, RectangleF clipRect);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_OutlineColor();
    public void set_OutlineColor(Color value);
    public Color get_LabelColor();
    public void set_LabelColor(Color value);
    public LabelAlignment get_LabelAlignment();
    public void set_LabelAlignment(LabelAlignment value);
    public Color get_RangeGapColor();
    public void set_RangeGapColor(Color value);
    public string get_NumericLabelFormat();
    public void set_NumericLabelFormat(string value);
    public SwatchLabelType get_LabelType();
    public void set_LabelType(SwatchLabelType value);
    public bool get_ShowEndLabels();
    public void set_ShowEndLabels(bool value);
    public int get_TickMarkLength();
    public void set_TickMarkLength(int value);
    public int get_LabelInterval();
    public void set_LabelInterval(int value);
    public SwatchColorCollection get_Colors();
    public string get_NoDataText();
    public void set_NoDataText(string value);
    public Font get_TitleFont();
    public void set_TitleFont(Font value);
    public Color get_TitleColor();
    public void set_TitleColor(Color value);
    public StringAlignment get_TitleAlignment();
    public void set_TitleAlignment(StringAlignment value);
    public string get_Title();
    public void set_Title(string value);
    internal virtual bool get_IsEmpty();
    public SwatchLabelType GetLabelType();
    internal virtual void Render(MapGraphics g);
    internal virtual object GetDefaultPropertyValue(string prop, object currentValue);
    private void CreateColorBarPath(RectangleF panelBounds, RectangleF colorBarBounds, Int32[] colorsRef, SwatchLabelType currentLabelType, GraphicsPath& outlinePath, GraphicsPath& fillPath);
    private Int32[] GetColorsRef(SwatchLabelType currentLabelType);
    private RectangleF GetLabelBounds(int colorIndex, Int32[] colorRef, RectangleF panelBounds, RectangleF colorBarBounds, SizeF labelBoxSize, SizeF colorBoxSize, float longestEndLabelWidth, bool getFromValue, SwatchLabelType curLabelType, bool alignedBottom, SizeF firstCaptionSize, SizeF lastCaptionSize, StringAlignment& horizontalAlignemnt);
    private RectangleF CalculateMaxColorBarBounds(MapGraphics g, RectangleF bounds, float endCaptionWidth, int colorsNumber, SwatchLabelType currentLabelType);
    private string GetLabelCaption(int swatchColorIndex, bool getFromValue, SwatchLabelType currentLabelType);
    private SizeF GetLabelMaxSize(MapGraphics g, SizeF layoutArea, SwatchLabelType currentLabelType);
    private bool MustPrintLabel(Int32[] colorsRef, int colorRefIndex, bool isFromValue, SwatchLabelType currentLabelType);
    private Brush CreateColorBoxBrush(MapGraphics g, RectangleF colorBoxBoundsAbs, int colorIndex);
    private void CalculateFontDependentData(MapGraphics g, SizeF layoutSize);
    private void PopulateDummyData();
    internal virtual SizeF GetOptimalSize(MapGraphics g, SizeF maxSizeAbs);
}
internal enum Microsoft.Reporting.Map.WebForms.ColumnImportMode : Enum {
    public int value__;
    public static ColumnImportMode FirstValue;
    public static ColumnImportMode Sum;
    public static ColumnImportMode Average;
}
internal class Microsoft.Reporting.Map.WebForms.CommonElements : object {
    private MapGraphics graph;
    internal IServiceContainer container;
    internal bool processModePaint;
    internal bool processModeRegions;
    private int width;
    private int height;
    private MapCore mapCore;
    internal Size Size { get; }
    internal bool ProcessModePaint { get; }
    internal bool ProcessModeRegions { get; }
    internal ImageLoader ImageLoader { get; }
    internal MapCore MapCore { get; }
    internal MapControl MapControl { get; }
    internal bool IsGraphicsInitialized { get; }
    internal MapGraphics Graph { get; internal set; }
    internal int Width { get; internal set; }
    internal int Height { get; internal set; }
    internal BorderTypeRegistry BorderTypeRegistry { get; }
    internal CommonElements(IServiceContainer container);
    internal Size get_Size();
    internal bool get_ProcessModePaint();
    internal bool get_ProcessModeRegions();
    internal ImageLoader get_ImageLoader();
    internal MapCore get_MapCore();
    internal MapControl get_MapControl();
    internal bool get_IsGraphicsInitialized();
    internal MapGraphics get_Graph();
    internal void set_Graph(MapGraphics value);
    internal int get_Width();
    internal void set_Width(int value);
    internal int get_Height();
    internal void set_Height(int value);
    internal BorderTypeRegistry get_BorderTypeRegistry();
    internal void InvokePrePaint(NamedElement sender);
    internal void InvokePostPaint(NamedElement sender);
    internal void InvokeElementAdded(NamedElement sender);
    internal void InvokeElementRemoved(NamedElement sender);
    internal static double ParseDouble(string stringToParse);
    internal static float ParseFloat(string stringToParse);
}
internal enum Microsoft.Reporting.Map.WebForms.ControlPersistence : Enum {
    public int value__;
    public static ControlPersistence None;
    public static ControlPersistence SessionState;
    public static ControlPersistence ApplicationState;
}
[DataContractAttribute]
public class Microsoft.Reporting.Map.WebForms.Coordinate : object {
    private double _latitude;
    private double _longitude;
    [DataMemberAttribute]
public double Latitude { get; public set; }
    [DataMemberAttribute]
public double Longitude { get; public set; }
    public Coordinate(double latitude, double longitude);
    public double get_Latitude();
    public void set_Latitude(double value);
    public double get_Longitude();
    public void set_Longitude(double value);
    public virtual string ToString();
}
internal class Microsoft.Reporting.Map.WebForms.CoordinateFieldConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal enum Microsoft.Reporting.Map.WebForms.CoordinateUnit : Enum {
    public int value__;
    public static CoordinateUnit Pixel;
    public static CoordinateUnit Percent;
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.CustomColorConverter")]
internal class Microsoft.Reporting.Map.WebForms.CustomColor : NamedElement {
    private Color borderColor;
    private Color color;
    private Color secondaryColor;
    private GradientType gradientType;
    private MapHatchStyle hatchStyle;
    private string fromValue;
    private string toValue;
    private string legendText;
    private string text;
    private string toolTip;
    private ArrayList affectedElements;
    private string fromValueInt;
    private string toValueInt;
    private bool visibleInt;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public object Tag { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomColor_BorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomColor_Color")]
[DefaultValueAttribute("System.Drawing.Color", "Green")]
public Color Color { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomColor_SecondaryColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color SecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomColor_GradientType")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.GradientEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType GradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomColor_HatchStyle")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapHatchStyle HatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeCustomColor_FromValue")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("")]
public string FromValue { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeCustomColor_ToValue")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("")]
public string ToValue { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomColor_LegendText")]
[DefaultValueAttribute("")]
public string LegendText { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeCustomColor_Text")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("#NAME")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeCustomColor_ToolTip")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    internal ArrayList AffectedElements { get; internal set; }
    internal string FromValueInt { get; internal set; }
    internal string ToValueInt { get; internal set; }
    public bool VisibleInt { get; public set; }
    internal CustomColor(CommonElements common);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual object get_Tag();
    public virtual void set_Tag(object value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public Color get_Color();
    public void set_Color(Color value);
    public Color get_SecondaryColor();
    public void set_SecondaryColor(Color value);
    public GradientType get_GradientType();
    public void set_GradientType(GradientType value);
    public MapHatchStyle get_HatchStyle();
    public void set_HatchStyle(MapHatchStyle value);
    public string get_FromValue();
    public void set_FromValue(string value);
    public string get_ToValue();
    public void set_ToValue(string value);
    public string get_LegendText();
    public void set_LegendText(string value);
    public string get_Text();
    public void set_Text(string value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public virtual string ToString();
    public ArrayList GetAffectedElements();
    internal RuleBase GetRule();
    internal virtual void OnAdded();
    internal virtual void OnRemove();
    internal void InvalidateRules();
    internal MapCore GetMapCore();
    internal ArrayList get_AffectedElements();
    internal void set_AffectedElements(ArrayList value);
    internal string get_FromValueInt();
    internal void set_FromValueInt(string value);
    internal string get_ToValueInt();
    internal void set_ToValueInt(string value);
    public bool get_VisibleInt();
    public void set_VisibleInt(bool value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.CustomColorCollection : NamedCollection {
    private CustomColor Item { get; private set; }
    private CustomColor Item { get; private set; }
    public CustomColor Item { get; public set; }
    internal CustomColorCollection(NamedElement parent, CommonElements common);
    public CustomColor Add(string name);
    public int Add(CustomColor value);
    public void Remove(CustomColor value);
    private CustomColor get_Item(int index);
    private void set_Item(int index, CustomColor value);
    private CustomColor get_Item(string name);
    private void set_Item(string name, CustomColor value);
    public CustomColor get_Item(object obj);
    public void set_Item(object obj, CustomColor value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    protected virtual void OnInsertComplete(int index, object value);
}
internal class Microsoft.Reporting.Map.WebForms.CustomColorConverter : CollectionItemTypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    private Field GetField(CustomColor customColor);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal class Microsoft.Reporting.Map.WebForms.CustomColorPropertyDescriptor : PropertyDescriptor {
    private Field field;
    public Type ComponentType { get; }
    public bool IsBrowsable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public CustomColorPropertyDescriptor(Field field, string name, Attribute[] attrs);
    public virtual Type get_ComponentType();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
}
internal enum Microsoft.Reporting.Map.WebForms.CustomPropertyTag : Enum {
    public int value__;
    public static CustomPropertyTag ImageError;
    public static CustomPropertyTag ImageProviders;
}
internal class Microsoft.Reporting.Map.WebForms.CustomTickMark : MapObject {
    private bool visible;
    private Placement placement;
    private Color borderColor;
    private int borderWidth;
    private Color fillColor;
    private bool enableGradient;
    private float gradientDensity;
    private float offset;
    private MarkerStyle shape;
    private float length;
    private float width;
    private string image;
    private Color imageTransColor;
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomTickMark_Visible")]
[NotifyParentPropertyAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomTickMark_Placement")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Placement Placement { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomTickMark_BorderColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomTickMark_BorderWidth")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomTickMark_FillColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "WhiteSmoke")]
public Color FillColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomTickMark_EnableGradient")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("True")]
public bool EnableGradient { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomTickMark_GradientDensity")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("30")]
public float GradientDensity { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomTickMark_DistanceFromScale")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("0")]
public float DistanceFromScale { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomTickMark_Shape")]
[NotifyParentPropertyAttribute("True")]
public MarkerStyle Shape { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomTickMark_Length")]
[NotifyParentPropertyAttribute("True")]
public float Length { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomTickMark_Width")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("3")]
public float Width { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomTickMark_Image")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
public string Image { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomTickMark_ImageTransColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageTransColor { get; public set; }
    public CustomTickMark(object parent);
    public CustomTickMark(object parent, MarkerStyle shape, float length, float width);
    public bool get_Visible();
    public void set_Visible(bool value);
    public Placement get_Placement();
    public void set_Placement(Placement value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public bool get_EnableGradient();
    public void set_EnableGradient(bool value);
    public float get_GradientDensity();
    public void set_GradientDensity(float value);
    public float get_DistanceFromScale();
    public void set_DistanceFromScale(float value);
    public virtual MarkerStyle get_Shape();
    public virtual void set_Shape(MarkerStyle value);
    public virtual float get_Length();
    public virtual void set_Length(float value);
    public virtual float get_Width();
    public virtual void set_Width(float value);
    public string get_Image();
    public void set_Image(string value);
    public Color get_ImageTransColor();
    public void set_ImageTransColor(Color value);
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.CustomWidthConverter")]
internal class Microsoft.Reporting.Map.WebForms.CustomWidth : NamedElement {
    private float width;
    private string fromValue;
    private string toValue;
    private string legendText;
    private string text;
    private string toolTip;
    private ArrayList affectedElements;
    private string fromValueInt;
    private string toValueInt;
    private bool visibleInt;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public object Tag { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomWidth_Width")]
[DefaultValueAttribute("5")]
public float Width { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeCustomWidth_FromValue")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("")]
public string FromValue { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeCustomWidth_ToValue")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("")]
public string ToValue { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeCustomWidth_LegendText")]
[DefaultValueAttribute("")]
public string LegendText { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeCustomWidth_Text")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("#NAME")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeCustomWidth_ToolTip")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    internal ArrayList AffectedElements { get; internal set; }
    internal string FromValueInt { get; internal set; }
    internal string ToValueInt { get; internal set; }
    public bool VisibleInt { get; public set; }
    internal CustomWidth(CommonElements common);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual object get_Tag();
    public virtual void set_Tag(object value);
    public float get_Width();
    public void set_Width(float value);
    public string get_FromValue();
    public void set_FromValue(string value);
    public string get_ToValue();
    public void set_ToValue(string value);
    public string get_LegendText();
    public void set_LegendText(string value);
    public string get_Text();
    public void set_Text(string value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public virtual string ToString();
    public ArrayList GetAffectedElements();
    internal RuleBase GetRule();
    internal virtual void OnAdded();
    internal virtual void OnRemove();
    internal void InvalidateRules();
    internal MapCore GetMapCore();
    internal ArrayList get_AffectedElements();
    internal void set_AffectedElements(ArrayList value);
    internal string get_FromValueInt();
    internal void set_FromValueInt(string value);
    internal string get_ToValueInt();
    internal void set_ToValueInt(string value);
    public bool get_VisibleInt();
    public void set_VisibleInt(bool value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.CustomWidthCollection : NamedCollection {
    private CustomWidth Item { get; private set; }
    private CustomWidth Item { get; private set; }
    public CustomWidth Item { get; public set; }
    internal CustomWidthCollection(NamedElement parent, CommonElements common);
    public CustomWidth Add(string name);
    public int Add(CustomWidth value);
    public void Remove(CustomWidth value);
    private CustomWidth get_Item(int index);
    private void set_Item(int index, CustomWidth value);
    private CustomWidth get_Item(string name);
    private void set_Item(string name, CustomWidth value);
    public CustomWidth get_Item(object obj);
    public void set_Item(object obj, CustomWidth value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    protected virtual void OnInsertComplete(int index, object value);
}
internal class Microsoft.Reporting.Map.WebForms.CustomWidthConverter : CollectionItemTypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    private Field GetField(CustomWidth customWidth);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal class Microsoft.Reporting.Map.WebForms.CustomWidthPropertyDescriptor : PropertyDescriptor {
    private Field field;
    public Type ComponentType { get; }
    public bool IsBrowsable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public CustomWidthPropertyDescriptor(Field field, string name, Attribute[] attrs);
    public virtual Type get_ComponentType();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
}
internal class Microsoft.Reporting.Map.WebForms.DataAttributeType_TypeConverter : TypeConverter {
    private static Type[] types;
    private StandardValuesCollection values;
    private static DataAttributeType_TypeConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Map.WebForms.DataBindEventArgs : EventArgs {
    public static DataBindEventArgs Empty;
    private DataBindingRuleBase dataBinding;
    public DataBindingRuleBase DataBinding { get; }
    public DataBindEventArgs(DataBindingRuleBase dataBanding);
    private static DataBindEventArgs();
    public DataBindingRuleBase get_DataBinding();
}
internal class Microsoft.Reporting.Map.WebForms.DataBindEventHandler : MulticastDelegate {
    public DataBindEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataBindEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataBindEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.Map.WebForms.DataBindingHelper : object {
    public static bool IsValidDataSource(object dataSource);
    public static StringCollection GetEnumerationItemFiledNames(object item, string fieldToExclude);
    public static IEnumerable GetDataSourceAsIEnumerable(object data, string dataMember, Boolean& closeDataReader, IDbConnection& connection);
    public static object ConvertEnumerationItem(object item, string fieldName);
    public static ArrayList GetDataSourceDataFields(object dataSource, string dataMember, string fieldToExclude);
    public static StringCollection GetDataSourceDataMembers(object dataSource);
    public static StringCollection GetDataSourceCoordinateFields(object dataSource, string dataMember, string fieldToExclude);
    public static bool HasRealData(object dataSource);
    public static bool IsValidAsCoordinateType(Type type);
    public static void InitDesignDataTable(object dataSource, string dataMember, DataTable designDataTable);
    public static void PopulateDesignTimeData(DataTable designDataTable, int numberOfSampleRecords);
    public static string GetDataSourceDefaultDataMember(object dataSource);
}
internal class Microsoft.Reporting.Map.WebForms.DataBindingRuleBase : NamedElement {
    private string dataMember;
    private string bindingField;
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeDataBindingRuleBase_DataMember")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DataMemberConverter")]
public string DataMember { get; public set; }
    [TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.BindingFieldRuleConverter")]
[DefaultValueAttribute("")]
public string BindingField { get; public set; }
    internal object DataSource { get; }
    internal DataBindingRuleBase(CommonElements common);
    public string get_DataMember();
    public void set_DataMember(string value);
    public virtual string get_BindingField();
    public virtual void set_BindingField(string value);
    internal object get_DataSource();
    internal virtual void DataBind();
    internal virtual void Reset();
    internal virtual void UpdateDataMember(StringCollection dataMembers);
    internal virtual void UpdateDataFields(string dataMember, int dataMemberIndex, StringCollection dataFields);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.DataBindingRulesCollection : NamedCollection {
    private DataBindingRuleBase Item { get; private set; }
    private DataBindingRuleBase Item { get; private set; }
    public DataBindingRuleBase Item { get; public set; }
    internal DataBindingRulesCollection(NamedElement parent, CommonElements common);
    public int Add(DataBindingRuleBase value);
    public void Remove(DataBindingRuleBase value);
    private DataBindingRuleBase get_Item(int index);
    private void set_Item(int index, DataBindingRuleBase value);
    private DataBindingRuleBase get_Item(string name);
    private void set_Item(string name, DataBindingRuleBase value);
    public DataBindingRuleBase get_Item(object obj);
    public void set_Item(object obj, DataBindingRuleBase value);
    internal virtual string GetElementNameFormat(NamedElement el);
    internal virtual string GetDefaultElementName(NamedElement el);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    internal virtual void Invalidate();
}
internal class Microsoft.Reporting.Map.WebForms.DataBindingTargetResolver : object {
    private StringCollection fieldNames;
    private Hashtable fieldsCache;
    private FieldCollection fields;
    private NamedCollection items;
    private bool createNewItemForUnresoved;
    private Type newItemsType;
    public BindingType BindingType;
    private DataBindingTargetResolver(FieldCollection fields);
    public DataBindingTargetResolver(FieldCollection fields, ShapeCollection shapes);
    public DataBindingTargetResolver(FieldCollection fields, SymbolCollection symbols);
    public DataBindingTargetResolver(FieldCollection fields, GroupCollection groups);
    public DataBindingTargetResolver(FieldCollection fields, PathCollection paths);
    public NamedElement GetItemById(object itemID);
    public NamedElement GetItemByIndex(int index);
    public bool ContainsField(string name);
    public Field GetFieldByName(string fieldName);
    public void AddItem(NamedElement item);
    public void AddField(Field field);
    public void SetFieldValue(NamedElement item, string fieldName, object value);
    private Hashtable GetItemsByFiledName(string fieldName);
}
internal enum Microsoft.Reporting.Map.WebForms.DataGrouping : Enum {
    public int value__;
    public static DataGrouping EqualInterval;
    public static DataGrouping EqualDistribution;
    public static DataGrouping Optimal;
}
internal class Microsoft.Reporting.Map.WebForms.DataMemberConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal static class Microsoft.Reporting.Map.WebForms.DateTimeHelper : object {
    public static string ToOdataJson(DateTime dateTime);
    public static DateTime FromOdataJson(string jsonDate);
}
internal class Microsoft.Reporting.Map.WebForms.DBF : RecordFileReader {
    private byte _version;
    private UInt32 _numberOfRecords;
    private ushort _headerLength;
    private ushort _recordLength;
    private bool _dataOK;
    private DBFColumnHeader[] _fields;
    public DBF(SqlBytes data);
    protected long ReadHeader();
    public virtual bool ReadRecord();
    public DataTable GetDataTable();
    public SqlXml GetXML();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class Microsoft.Reporting.Map.WebForms.Design.DataWizardState : object {
    public bool FieldsChosen;
    public ShapeType DataType;
    public DataTable Data;
    public bool MustCombine;
    public string NameField;
    public string SpatialField;
    public string ConnectionString;
    public string SafeConnectionString;
    public StringCollection DataFields;
    public Hashtable CombineMode;
    public StringCollection AvailableLayers;
    public string Layer;
    public string Category;
    public BasicMapElements MapElementsToImport;
    public static bool IsNumeric(Type type);
    public static bool HasUniqueValues(DataTable data, string columnName);
}
internal class Microsoft.Reporting.Map.WebForms.DesignBindingSource : BindingSource {
    public DesignBindingSource(object dataSource, string dataMember);
}
internal class Microsoft.Reporting.Map.WebForms.DesignDataSetSource : DataSet {
    public DesignDataSetSource(MapCore mapCore, object originalDataSource);
}
internal class Microsoft.Reporting.Map.WebForms.DesignDataTableSource : DataTable {
    public DesignDataTableSource(MapCore mapCore, object originalDataSource);
}
internal class Microsoft.Reporting.Map.WebForms.DesignTimeFieldConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Map.WebForms.DesignTimeGroupConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Map.WebForms.DesignTimeLayerConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Map.WebForms.DesignTimeLegendConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Map.WebForms.DesignTimeShapeConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal enum Microsoft.Reporting.Map.WebForms.Direction : Enum {
    public int value__;
    public static Direction Forward;
    public static Direction Backward;
}
internal class Microsoft.Reporting.Map.WebForms.DistanceScalePanel : DockablePanel {
    private static int ScaleOutlineWidth;
    private static int PanelPadding;
    private float KilometersToMiles;
    private int HorizLabelMargin;
    private int VertLabelMargin;
    private Font font;
    private Color scaleBorderColor;
    private Color scaleForeColor;
    private Color labelColor;
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeDistanceScalePanel_Font")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8.25pt")]
public Font Font { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeDistanceScalePanel_ScaleBorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color ScaleBorderColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeDistanceScalePanel_ScaleForeColor")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
public Color ScaleForeColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeDistanceScalePanel_LabelColor")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color LabelColor { get; public set; }
    internal DistanceScalePanel(CommonElements common);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_ScaleBorderColor();
    public void set_ScaleBorderColor(Color value);
    public Color get_ScaleForeColor();
    public void set_ScaleForeColor(Color value);
    public Color get_LabelColor();
    public void set_LabelColor(Color value);
    internal virtual void Render(MapGraphics g);
    internal virtual object GetDefaultPropertyValue(string prop, object currentValue);
    private int FloorDistance(double distance);
    private MeasurementUnit AdjustMetricUnit(Single& kilometers);
    private MeasurementUnit AdjustImperialUnit(Single& miles);
    private GraphicsPath CreateScalePath(RectangleF drawingBounds, int metricScaleWidth, int imperialScaleWidth);
    private RectangleF CreateTextClip(RectangleF textBounds, SizeF textClipSize);
}
internal class Microsoft.Reporting.Map.WebForms.DockablePanel : Panel {
    private PanelDockStyle dockStyle;
    private DockAlignment dockAlignment;
    private bool dockedInsideViewport;
    public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeDockablePanel_Dock")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public PanelDockStyle Dock { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeDockablePanel_DockAlignment")]
[NotifyParentPropertyAttribute("True")]
public DockAlignment DockAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeDockablePanel_DockedInsideViewport")]
[NotifyParentPropertyAttribute("True")]
public bool DockedInsideViewport { get; public set; }
    internal DockablePanel(CommonElements common);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public virtual PanelDockStyle get_Dock();
    public virtual void set_Dock(PanelDockStyle value);
    protected void ResetDock();
    protected bool ShouldSerializeDock();
    public virtual DockAlignment get_DockAlignment();
    public virtual void set_DockAlignment(DockAlignment value);
    protected void ResetDockAlignment();
    protected bool ShouldSerializeDockAlignment();
    public bool get_DockedInsideViewport();
    public void set_DockedInsideViewport(bool value);
    protected void ResetDockedInsideViewport();
    protected bool ShouldSerializeDockedInsideViewport();
    internal virtual void SizeLocationChanged(SizeLocationChangeInfo info);
    internal virtual object GetDefaultPropertyValue(string prop, object currentValue);
    internal virtual bool IsVisible();
}
internal class Microsoft.Reporting.Map.WebForms.DockablePanelConverter : NoNameExpandableObjectConverter {
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal enum Microsoft.Reporting.Map.WebForms.DockAlignment : Enum {
    public int value__;
    public static DockAlignment Near;
    public static DockAlignment Center;
    public static DockAlignment Far;
}
internal class Microsoft.Reporting.Map.WebForms.DoubleAutoValueConverter : DoubleConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[AttributeUsageAttribute("128")]
internal class Microsoft.Reporting.Map.WebForms.DoubleConverterHint : Attribute {
    private double bound;
    public double Bound { get; }
    public DoubleConverterHint(double bound);
    public virtual double get_Bound();
}
internal class Microsoft.Reporting.Map.WebForms.DoubleInfinityConverter : DoubleConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Map.WebForms.DoubleNanValueConverter : DoubleConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Map.WebForms.ElementEvent : MulticastDelegate {
    public ElementEvent(object object, IntPtr method);
    public virtual void Invoke(object sender, ElementEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ElementEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.Map.WebForms.ElementEventArgs : object {
    private MapControl control;
    private NamedElement mapElement;
    internal MapControl MapControl { get; }
    public NamedElement MapElement { get; }
    internal ElementEventArgs(MapControl control, NamedElement mapElement);
    internal MapControl get_MapControl();
    public NamedElement get_MapElement();
}
internal class Microsoft.Reporting.Map.WebForms.EmbossBorder : object {
    public static float defaultRadiusSize;
    protected Single[] cornerRadius;
    public string Name { get; }
    public virtual string get_Name();
    public virtual RectangleF GetTitlePositionInBorder();
    public virtual void AdjustAreasPosition(MapGraphics graph, RectangleF& areasRect);
    public virtual void DrawBorder(MapGraphics graph, Frame borderSkin, RectangleF rect, Color backColor, MapHatchStyle backHatchStyle, string backImage, MapImageWrapMode backImageMode, Color backImageTranspColor, MapImageAlign backImageAlign, GradientType backGradientType, Color backSecondaryColor, Color borderColor, int borderWidth, MapDashStyle borderStyle);
    public sealed virtual bool IsVisible(MapGraphics g);
}
internal class Microsoft.Reporting.Map.WebForms.EmptyPointConverter : PointConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.FieldConverter")]
internal class Microsoft.Reporting.Map.WebForms.Field : NamedElement {
    private Type type;
    private bool uniqueIdentifier;
    private bool isTemporary;
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeField_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeField_Type")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DataAttributeType_TypeConverter")]
public Type Type { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeField_UniqueIdentifier")]
[DefaultValueAttribute("False")]
public bool UniqueIdentifier { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public object Tag { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
public bool IsTemporary { get; public set; }
    internal Field(CommonElements common);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public Type get_Type();
    public void set_Type(Type value);
    public bool get_UniqueIdentifier();
    public void set_UniqueIdentifier(bool value);
    public virtual object get_Tag();
    public virtual void set_Tag(object value);
    public bool get_IsTemporary();
    public void set_IsTemporary(bool value);
    public virtual string ToString();
    public bool IsNumeric();
    public string GetKeyword();
    internal MapCore GetMapCore();
    private static bool IsValid(Type type);
    internal string FormatValue(object value);
    internal void ParseValue(string fieldValue, Hashtable fields);
    internal void SetValue(object value, Hashtable fields);
    internal object Parse(string stringValue);
    internal static object ConvertToSupportedValue(object value);
    internal static Type ConvertToSupportedType(Type valueType);
    internal double ConvertToDouble(object fieldValue);
    internal static string ToStringInvariant(object fieldValue);
    internal bool FieldHasData();
}
internal class Microsoft.Reporting.Map.WebForms.FieldChooser : Form {
    private Label label1;
    private Button okButton;
    private Button cancelButton;
    private string selectedField;
    private Panel gridPlaceHolder;
    private IContainer components;
    private MapDataGridViewer previewGrid;
    public string SelectedField { get; }
    public FieldChooser(MapControl mapControl);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    public string get_SelectedField();
    private void okButton_Click(object sender, EventArgs e);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.FieldCollection : NamedCollection {
    private Field Item { get; private set; }
    private Field Item { get; private set; }
    public Field Item { get; public set; }
    internal FieldCollection(NamedElement parent, CommonElements common);
    public Field Add(string name);
    public int Add(Field value);
    public void Remove(Field value);
    public void Insert(int index, Field value);
    private Field get_Item(int index);
    private void set_Item(int index, Field value);
    private Field get_Item(string name);
    private void set_Item(string name, Field value);
    public Field get_Item(object obj);
    public void set_Item(object obj, Field value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    protected virtual void OnInsertComplete(int index, object value);
    internal virtual void Invalidate();
    internal void Purge();
    internal virtual void IsValidNameCheck(string name, NamedElement element);
}
internal class Microsoft.Reporting.Map.WebForms.FieldConverter : CollectionItemTypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal class Microsoft.Reporting.Map.WebForms.FlagsEnumCheckedListBox : CheckedListBox {
    private object editValue;
    private Type editType;
    public FlagsEnumCheckedListBox(object editValue, Type editType);
    private void FillList();
    public object GetNewValue();
}
internal class Microsoft.Reporting.Map.WebForms.FlagsEnumUITypeEditor : UITypeEditor {
    private Type enumType;
    private IWindowsFormsEditorService edSvc;
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Map.WebForms.FloatAutoValueConverter : SingleConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Map.WebForms.FloatNanValueConverter : SingleConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal enum Microsoft.Reporting.Map.WebForms.FontUnit : Enum {
    public int value__;
    public static FontUnit Percent;
    public static FontUnit Default;
}
internal class Microsoft.Reporting.Map.WebForms.FormatNumberHandler : MulticastDelegate {
    public FormatNumberHandler(object object, IntPtr method);
    public virtual string Invoke(object sender, object value, string format);
    public virtual IAsyncResult BeginInvoke(object sender, object value, string format, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.FrameAttributesConverter")]
[DefaultPropertyAttribute("FrameStyle")]
[DescriptionAttribute("Drawing attributes for the 3D frames.")]
internal class Microsoft.Reporting.Map.WebForms.Frame : MapObject {
    private Color pageColor;
    private FrameStyle frameStyle;
    private GradientType backGradientType;
    private Color backSecondaryColor;
    private Color backColor;
    private string backImage;
    private MapImageWrapMode backImageMode;
    private Color backImageTranspColor;
    private MapImageAlign backImageAlign;
    private Color borderColor;
    private int borderWidth;
    private MapDashStyle borderStyle;
    private MapHatchStyle backHatchStyle;
    internal object ownerElement;
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
[SRDescriptionAttribute("DescriptionAttributeFrame_PageColor")]
public Color PageColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeFrame_FrameStyle")]
[ParenthesizePropertyNameAttribute("True")]
public FrameStyle FrameStyle { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Gray")]
[SRDescriptionAttribute("DescriptionAttributeFrame_BackColor")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
[SRDescriptionAttribute("DescriptionAttributeFrame_BorderColor")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeFrame_BackHatchStyle")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
public MapHatchStyle BackHatchStyle { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeFrame_BackImage")]
public string BackImage { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeFrame_BackImageMode")]
public MapImageWrapMode BackImageMode { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeFrame_BackImageTranspColor")]
public Color BackImageTranspColor { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeFrame_BackImageAlign")]
public MapImageAlign BackImageAlign { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeFrame_BackGradientType")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.GradientEditor", "System.Drawing.Design.UITypeEditor")]
public GradientType BackGradientType { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeFrame_BackSecondaryColor")]
public Color BackSecondaryColor { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeFrame_BorderWidth")]
public int BorderWidth { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeFrame_BorderStyle")]
public MapDashStyle BorderStyle { get; public set; }
    public Frame(object parent);
    internal MapCore GetMapCore();
    internal virtual void Invalidate();
    internal void InvalidateAndLayout();
    internal bool ShouldRenderReadOnly();
    public Color get_PageColor();
    public void set_PageColor(Color value);
    public FrameStyle get_FrameStyle();
    public void set_FrameStyle(FrameStyle value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public MapHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(MapHatchStyle value);
    public string get_BackImage();
    public void set_BackImage(string value);
    public MapImageWrapMode get_BackImageMode();
    public void set_BackImageMode(MapImageWrapMode value);
    public Color get_BackImageTranspColor();
    public void set_BackImageTranspColor(Color value);
    public MapImageAlign get_BackImageAlign();
    public void set_BackImageAlign(MapImageAlign value);
    public GradientType get_BackGradientType();
    public void set_BackGradientType(GradientType value);
    public Color get_BackSecondaryColor();
    public void set_BackSecondaryColor(Color value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public MapDashStyle get_BorderStyle();
    public void set_BorderStyle(MapDashStyle value);
}
internal class Microsoft.Reporting.Map.WebForms.FrameAttributesConverter : NoNameExpandableObjectConverter {
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal enum Microsoft.Reporting.Map.WebForms.FrameStyle : Enum {
    public int value__;
    public static FrameStyle None;
    public static FrameStyle Emboss;
    public static FrameStyle Raised;
    public static FrameStyle Sunken;
    public static FrameStyle FrameThin1;
    public static FrameStyle FrameThin2;
    public static FrameStyle FrameThin3;
    public static FrameStyle FrameThin4;
    public static FrameStyle FrameThin5;
    public static FrameStyle FrameThin6;
    public static FrameStyle FrameTitle1;
    public static FrameStyle FrameTitle2;
    public static FrameStyle FrameTitle3;
    public static FrameStyle FrameTitle4;
    public static FrameStyle FrameTitle5;
    public static FrameStyle FrameTitle6;
    public static FrameStyle FrameTitle7;
    public static FrameStyle FrameTitle8;
}
internal class Microsoft.Reporting.Map.WebForms.FrameThin1Border : RaisedBorder {
    protected Single[] innerCorners;
    public string Name { get; }
    public virtual string get_Name();
    public virtual void DrawBorder(MapGraphics graph, Frame borderSkin, RectangleF rect, Color backColor, MapHatchStyle backHatchStyle, string backImage, MapImageWrapMode backImageMode, Color backImageTranspColor, MapImageAlign backImageAlign, GradientType backGradientType, Color backSecondaryColor, Color borderColor, int borderWidth, MapDashStyle borderStyle);
}
internal class Microsoft.Reporting.Map.WebForms.FrameThin2Border : FrameThin1Border {
    public string Name { get; }
    public virtual string get_Name();
}
internal class Microsoft.Reporting.Map.WebForms.FrameThin3Border : FrameThin1Border {
    public string Name { get; }
    public virtual string get_Name();
}
internal class Microsoft.Reporting.Map.WebForms.FrameThin4Border : FrameThin1Border {
    public string Name { get; }
    public virtual string get_Name();
}
internal class Microsoft.Reporting.Map.WebForms.FrameThin5Border : FrameThin1Border {
    public string Name { get; }
    public virtual string get_Name();
}
internal class Microsoft.Reporting.Map.WebForms.FrameThin6Border : FrameThin1Border {
    public string Name { get; }
    public virtual string get_Name();
}
internal class Microsoft.Reporting.Map.WebForms.FrameTitle1Border : FrameThin1Border {
    public string Name { get; }
    public virtual string get_Name();
    public virtual RectangleF GetTitlePositionInBorder();
}
internal class Microsoft.Reporting.Map.WebForms.FrameTitle2Border : FrameThin2Border {
    public string Name { get; }
    public virtual string get_Name();
    public virtual RectangleF GetTitlePositionInBorder();
}
internal class Microsoft.Reporting.Map.WebForms.FrameTitle3Border : FrameThin3Border {
    public string Name { get; }
    public virtual string get_Name();
    public virtual RectangleF GetTitlePositionInBorder();
}
internal class Microsoft.Reporting.Map.WebForms.FrameTitle4Border : FrameThin4Border {
    public string Name { get; }
    public virtual string get_Name();
    public virtual RectangleF GetTitlePositionInBorder();
}
internal class Microsoft.Reporting.Map.WebForms.FrameTitle5Border : FrameThin5Border {
    public string Name { get; }
    public virtual string get_Name();
    public virtual RectangleF GetTitlePositionInBorder();
}
internal class Microsoft.Reporting.Map.WebForms.FrameTitle6Border : FrameThin6Border {
    public string Name { get; }
    public virtual string get_Name();
    public virtual RectangleF GetTitlePositionInBorder();
}
internal class Microsoft.Reporting.Map.WebForms.FrameTitle7Border : FrameTitle1Border {
    public string Name { get; }
    public virtual string get_Name();
}
internal class Microsoft.Reporting.Map.WebForms.FrameTitle8Border : FrameTitle1Border {
    public string Name { get; }
    public virtual string get_Name();
}
internal class Microsoft.Reporting.Map.WebForms.Gap : object {
    public float Inside;
    public float Center;
    public float Outside;
    private float baseInside;
    private float baseOutside;
    public float InsideGap { get; }
    public float OutsideGap { get; }
    public Gap(float center);
    public float get_InsideGap();
    public float get_OutsideGap();
    public void SetBase();
    public void SetOffset(Placement placement, float length);
    public void SetOffsetBase(Placement placement, float length);
}
internal class Microsoft.Reporting.Map.WebForms.GdiGraphics : object {
    private Graphics graphics;
    public Matrix Transform { get; public set; }
    public SmoothingMode SmoothingMode { get; public set; }
    public TextRenderingHint TextRenderingHint { get; public set; }
    public Region Clip { get; public set; }
    public bool IsClipEmpty { get; }
    public Graphics Graphics { get; public set; }
    public sealed virtual void DrawLine(Pen pen, PointF pt1, PointF pt2);
    public sealed virtual void DrawLine(Pen pen, float x1, float y1, float x2, float y2);
    public sealed virtual void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr);
    public sealed virtual void DrawEllipse(Pen pen, float x, float y, float width, float height);
    public sealed virtual void DrawCurve(Pen pen, PointF[] points, int offset, int numberOfSegments, float tension);
    public sealed virtual void DrawRectangle(Pen pen, int x, int y, int width, int height);
    public sealed virtual void DrawPolygon(Pen pen, PointF[] points);
    public sealed virtual void DrawString(string s, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    public sealed virtual void DrawString(string s, Font font, Brush brush, PointF point, StringFormat format);
    public sealed virtual void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs);
    public sealed virtual void DrawRectangle(Pen pen, float x, float y, float width, float height);
    public sealed virtual void DrawPath(Pen pen, GraphicsPath path);
    public sealed virtual void DrawPie(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual void DrawArc(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual void DrawImage(Image image, RectangleF rect);
    public sealed virtual void DrawEllipse(Pen pen, RectangleF rect);
    public sealed virtual void DrawLines(Pen pen, PointF[] points);
    public sealed virtual void FillEllipse(Brush brush, RectangleF rect);
    public sealed virtual void FillPath(Brush brush, GraphicsPath path);
    public sealed virtual void FillPath(Brush brush, GraphicsPath path, float angle, bool useBrushOffset, bool circularFill);
    public sealed virtual void FillRegion(Brush brush, Region region);
    public sealed virtual void FillRectangle(Brush brush, RectangleF rect);
    public sealed virtual void FillRectangle(Brush brush, float x, float y, float width, float height);
    public sealed virtual void FillPolygon(Brush brush, PointF[] points);
    public sealed virtual void FillPie(Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    public sealed virtual SizeF MeasureString(string text, Font font);
    public sealed virtual GraphicsState Save();
    public sealed virtual void Restore(GraphicsState gstate);
    public sealed virtual void ResetClip();
    public sealed virtual void SetClip(RectangleF rect);
    public sealed virtual void SetClip(GraphicsPath path, CombineMode combineMode);
    public sealed virtual void TranslateTransform(float dx, float dy);
    public sealed virtual void BeginSelection(string hRef, string title);
    public sealed virtual void EndSelection();
    public sealed virtual Matrix get_Transform();
    public sealed virtual void set_Transform(Matrix value);
    public sealed virtual SmoothingMode get_SmoothingMode();
    public sealed virtual void set_SmoothingMode(SmoothingMode value);
    public sealed virtual TextRenderingHint get_TextRenderingHint();
    public sealed virtual void set_TextRenderingHint(TextRenderingHint value);
    public sealed virtual Region get_Clip();
    public sealed virtual void set_Clip(Region value);
    public sealed virtual bool get_IsClipEmpty();
    public sealed virtual Graphics get_Graphics();
    public sealed virtual void set_Graphics(Graphics value);
}
internal class Microsoft.Reporting.Map.WebForms.GeoUtils : object {
    private static double DEFAULT_DENSIFICATION_ANGLE;
    private static GeoUtils();
    public static void CutShapes(MapPoint[]& points, ShapeSegment[]& segments);
    public static void CutPaths(MapPoint[]& points, PathSegment[]& segments);
    [IteratorStateMachineAttribute("Microsoft.Reporting.Map.WebForms.GeoUtils/<DensifyLine>d__7")]
public static IEnumerable`1<MapPoint> DensifyLine(MapPoint prevPoint, MapPoint point, double maxAngle);
    public static double ToRadians(double a);
    public static double ToDegrees(double a);
    public static void NormalizePointsLongigute(MapPoint[]& points);
    internal static void CalculateSignedArea(MapPoint[]& points, ShapeSegment[]& segments);
    internal static void FixOrientationForGeometry(MapPoint[]& points, ShapeSegment[]& segments);
    internal static void MoveLargestSegmentToFront(MapPoint[]& points, ShapeSegment[]& segments);
    internal static SqlGeometry FlattenGeometry(SqlGeometry geometry);
    private static void FlattenGeometryRec(SqlGeometry geometry, List`1<SqlGeometry> basicGeometries);
    internal static SqlGeography FlattenGeography(SqlGeography geography);
    private static void FlattenGeographyRec(SqlGeography geography, List`1<SqlGeography> basicGeographies);
}
internal static class Microsoft.Reporting.Map.WebForms.GlobalizationHelper : object {
    public static MessageBoxOptions GetMessageBoxOptions(Control owner);
    public static MessageBoxOptions GetMessageBoxOptions();
}
internal class Microsoft.Reporting.Map.WebForms.GradientEditor : UITypeEditor {
    private MapGraphics mapGraph;
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual void PaintValue(PaintValueEventArgs e);
}
internal enum Microsoft.Reporting.Map.WebForms.GradientType : Enum {
    public int value__;
    public static GradientType None;
    public static GradientType LeftRight;
    public static GradientType RightLeft;
    public static GradientType TopBottom;
    public static GradientType BottomTop;
    public static GradientType Center;
    public static GradientType ReversedCenter;
    public static GradientType DiagonalLeft;
    public static GradientType ReversedDiagonalLeft;
    public static GradientType DiagonalRight;
    public static GradientType ReversedDiagonalRight;
    public static GradientType HorizontalCenter;
    public static GradientType ReversedHorizontalCenter;
    public static GradientType VerticalCenter;
    public static GradientType ReversedVerticalCenter;
}
internal class Microsoft.Reporting.Map.WebForms.GraphicsPathOutliner : object {
    private RectangleF[] boundsArray;
    private Hashtable pointsTable;
    private GraphicsPath[] paths;
    private Graphics graphics;
    private Hashtable visitedPoints;
    public GraphicsPathOutliner(Graphics graphics);
    public GraphicsPath GetOutlinePath(GraphicsPath[] paths);
    private PointInfo GetNextPoint(PointInfo currentPoint, PointF previousPoint, Pen pen);
    private void DrawMarker(PointF point, float size);
    private double CalculateAngle(PointF previousPoint, PointF point, PointF forwardPoint);
    private PointInfo GetClosestPoint(PointF point, PointF[] points, GraphicsPath graphicsPath);
    private PointF[] GetPathPoints(GraphicsPath graphicsPath);
}
internal class Microsoft.Reporting.Map.WebForms.GridAttributes : MapObject {
    private GridLine[] gridLines;
    private bool visible;
    private Color lineColor;
    private int lineWidth;
    private double interval;
    private MapDashStyle lineStyle;
    private Font font;
    private bool showLabels;
    private Color labelColor;
    private LabelPosition labelPosition;
    private string labelFormatString;
    internal GridLine[] GridLines { get; internal set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGridAttributes_Visible")]
[ParenthesizePropertyNameAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGridAttributes_LineColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "128, 128, 128, 255")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGridAttributes_LineWidth")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("1")]
public int LineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Interval")]
[SRDescriptionAttribute("DescriptionAttributeGridAttributes_Interval")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DoubleAutoValueConverter")]
[DefaultValueAttribute("не число")]
public double Interval { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGridAttributes_LineStyle")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapDashStyle LineStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGridAttributes_Font")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8.25pt")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGridAttributes_ShowLabels")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("True")]
public bool ShowLabels { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGridAttributes_LabelColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "192, 128, 128, 255")]
public Color LabelColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGridAttributes_LabelPosition")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public LabelPosition LabelPosition { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGridAttributes_LabelFormatString")]
[DefaultValueAttribute("#°E;#°W;0°")]
public string LabelFormatString { get; public set; }
    public GridAttributes(object parent, bool parallels);
    internal GridLine[] get_GridLines();
    internal void set_GridLines(GridLine[] value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public int get_LineWidth();
    public void set_LineWidth(int value);
    public double get_Interval();
    public void set_Interval(double value);
    public MapDashStyle get_LineStyle();
    public void set_LineStyle(MapDashStyle value);
    public Font get_Font();
    public void set_Font(Font value);
    public bool get_ShowLabels();
    public void set_ShowLabels(bool value);
    public Color get_LabelColor();
    public void set_LabelColor(Color value);
    public LabelPosition get_LabelPosition();
    public void set_LabelPosition(LabelPosition value);
    public string get_LabelFormatString();
    public void set_LabelFormatString(string value);
    internal MapCore GetMapCore();
    internal Pen GetPen();
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.ISelectable.DrawSelection(MapGraphics g, RectangleF clipRect, bool designTimeSelection);
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ISelectable.IsSelected();
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ISelectable.IsVisible();
    private sealed virtual override RectangleF Microsoft.Reporting.Map.WebForms.ISelectable.GetSelectionRectangle(MapGraphics g, RectangleF clipRect);
}
internal class Microsoft.Reporting.Map.WebForms.GridLine : ValueType {
    public GridType GridType;
    public PointF[] Points;
    public GraphicsPath Path;
    public RectangleF LabelRect;
    public double Coordinate;
    public PointF[] SelectionMarkerPositions;
    public void Dispose();
}
internal enum Microsoft.Reporting.Map.WebForms.GridType : Enum {
    public int value__;
    public static GridType Parallel;
    public static GridType Meridian;
}
[DefaultMemberAttribute("Item")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.GroupConverter")]
internal class Microsoft.Reporting.Map.WebForms.Group : NamedElement {
    internal Hashtable fields;
    private string fieldDataBuffer;
    private Offset offset;
    private string toolTip;
    private string href;
    private string mapAreaAttributes;
    private ContentAlignment textAlignment;
    private bool visible;
    private Font font;
    private Color borderColor;
    private MapDashStyle borderStyle;
    private int borderWidth;
    private Color color;
    private Color textColor;
    private GradientType gradientType;
    private Color secondaryColor;
    private MapHatchStyle hatchStyle;
    private string text;
    private int shadowOffset;
    private int textShadowOffset;
    private bool selected;
    private Offset centralPointOffset;
    private string category;
    private ArrayList shapes;
    private bool useInternalProperties;
    private Color borderColorInt;
    private Color colorInt;
    private GradientType gradientTypeInt;
    private Color secondaryColorInt;
    private MapHatchStyle hatchStyleInt;
    private string textInt;
    private string toolTipInt;
    private string layer;
    private bool belongsToLayer;
    private bool belongsToAllLayers;
    private Layer layerObject;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("")]
public string FieldData { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeGroup_Offset")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.ShapeOffsetConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public Offset Offset { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeGroup_ToolTip")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeGroup_Href")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeGroup_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeGroup_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeGroup_TextAlignment")]
[DefaultValueAttribute]
public ContentAlignment TextAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGroup_Visible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGroup_Font")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 10pt")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGroup_BorderColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGroup_BorderStyle")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGroup_BorderWidth")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGroup_Color")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color Color { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGroup_TextColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGroup_GradientType")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.GradientEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType GradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGroup_SecondaryColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color SecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGroup_HatchStyle")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapHatchStyle HatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeGroup_Text")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("#NAME")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGroup_ShadowOffset")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("0")]
public int ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeGroup_TextShadowOffset")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("0")]
public int TextShadowOffset { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeGroup_Selected")]
[DefaultValueAttribute("False")]
public bool Selected { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeGroup_CentralPoint")]
[SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public MapPoint CentralPoint { get; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeGroup_CentralPointOffset")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.ShapeOffsetConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public Offset CentralPointOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeGroup_Category")]
[DefaultValueAttribute("")]
public string Category { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public object Item { get; public set; }
    internal ArrayList Shapes { get; internal set; }
    internal bool UseInternalProperties { get; internal set; }
    internal Color BorderColorInt { get; internal set; }
    internal Color ColorInt { get; internal set; }
    internal GradientType GradientTypeInt { get; internal set; }
    internal Color SecondaryColorInt { get; internal set; }
    internal MapHatchStyle HatchStyleInt { get; internal set; }
    internal string TextInt { get; internal set; }
    internal string ToolTipInt { get; internal set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeGroup_Layer")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DesignTimeLayerConverter")]
[DefaultValueAttribute("(none)")]
public string Layer { get; public set; }
    private bool Microsoft.Reporting.Map.WebForms.ILayerElement.BelongsToLayer { get; }
    private bool Microsoft.Reporting.Map.WebForms.ILayerElement.BelongsToAllLayers { get; }
    private Layer Microsoft.Reporting.Map.WebForms.ILayerElement.LayerObject { get; private set; }
    internal Group(CommonElements common);
    public string get_FieldData();
    public void set_FieldData(string value);
    [EditorBrowsableAttribute("1")]
protected bool ShouldSerializeOffset();
    [EditorBrowsableAttribute("1")]
protected void ResetOffset();
    public Offset get_Offset();
    public void set_Offset(Offset value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public string get_Href();
    public void set_Href(string value);
    public string get_MapAreaAttributes();
    public void set_MapAreaAttributes(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public ContentAlignment get_TextAlignment();
    public void set_TextAlignment(ContentAlignment value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public MapDashStyle get_BorderStyle();
    public void set_BorderStyle(MapDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public Color get_Color();
    public void set_Color(Color value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public GradientType get_GradientType();
    public void set_GradientType(GradientType value);
    public Color get_SecondaryColor();
    public void set_SecondaryColor(Color value);
    public MapHatchStyle get_HatchStyle();
    public void set_HatchStyle(MapHatchStyle value);
    public string get_Text();
    public void set_Text(string value);
    public int get_ShadowOffset();
    public void set_ShadowOffset(int value);
    public int get_TextShadowOffset();
    public void set_TextShadowOffset(int value);
    public bool get_Selected();
    public void set_Selected(bool value);
    public MapPoint get_CentralPoint();
    [EditorBrowsableAttribute("1")]
protected bool ShouldSerializeCentralPointOffset();
    [EditorBrowsableAttribute("1")]
protected void ResetCentralPointOffset();
    public Offset get_CentralPointOffset();
    public void set_CentralPointOffset(Offset value);
    public string get_Category();
    public void set_Category(string value);
    public object get_Item(string name);
    public void set_Item(string name, object value);
    public virtual string ToString();
    public PointF GetCenterPointInContentPixels(MapGraphics g);
    internal ArrayList get_Shapes();
    internal void set_Shapes(ArrayList value);
    internal bool get_UseInternalProperties();
    internal void set_UseInternalProperties(bool value);
    internal Color get_BorderColorInt();
    internal void set_BorderColorInt(Color value);
    internal Color get_ColorInt();
    internal void set_ColorInt(Color value);
    internal GradientType get_GradientTypeInt();
    internal void set_GradientTypeInt(GradientType value);
    internal Color get_SecondaryColorInt();
    internal void set_SecondaryColorInt(Color value);
    internal MapHatchStyle get_HatchStyleInt();
    internal void set_HatchStyleInt(MapHatchStyle value);
    internal string get_TextInt();
    internal void set_TextInt(string value);
    internal string get_ToolTipInt();
    internal void set_ToolTipInt(string value);
    internal MapCore GetMapCore();
    internal PointF GetCentralPoint();
    private string FieldDataToString();
    internal void FieldDataFromBuffer();
    internal virtual void OnAdded();
    internal virtual void OnRemove();
    protected virtual void OnDispose();
    internal void ApplyCustomColorAttributes(CustomColor customColor);
    internal void InvalidateRules();
    private void RenderText(MapGraphics g);
    internal bool IsRectangleVisible(MapGraphics g, RectangleF clipRect, MapPoint minExtent, MapPoint maxExtent);
    internal GraphicsPath GetPath(MapGraphics g, bool outlineOnly);
    internal void InvalidateCachedBounds();
    internal void ResetCachedPaths();
    private float GetDistance(PointF pointA, PointF pointB);
    internal Brush GetBackBrush(MapGraphics g, GraphicsPath path);
    internal Pen GetPen();
    private Color ApplyLayerTransparency(Color color);
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.IContentElement.IsVisible(MapGraphics g, Layer layer, bool allLayers, RectangleF clipRect);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IContentElement.RenderShadow(MapGraphics g);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IContentElement.RenderBack(MapGraphics g, HotRegionList hotRegions);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IContentElement.RenderFront(MapGraphics g, HotRegionList hotRegions);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IContentElement.RenderText(MapGraphics g, HotRegionList hotRegions);
    private sealed virtual override RectangleF Microsoft.Reporting.Map.WebForms.IContentElement.GetBoundRect(MapGraphics g);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.ISelectable.DrawSelection(MapGraphics g, RectangleF clipRect, bool designTimeSelection);
    private sealed virtual override RectangleF Microsoft.Reporting.Map.WebForms.ISelectable.GetSelectionRectangle(MapGraphics g, RectangleF clipRect);
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ISelectable.IsVisible();
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ISelectable.IsSelected();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IToolTipProvider.GetToolTip();
    public sealed virtual string get_Layer();
    public sealed virtual void set_Layer(string value);
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ILayerElement.get_BelongsToLayer();
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ILayerElement.get_BelongsToAllLayers();
    private sealed virtual override Layer Microsoft.Reporting.Map.WebForms.ILayerElement.get_LayerObject();
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.ILayerElement.set_LayerObject(Layer value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.GroupCollection : NamedCollection {
    private Group Item { get; private set; }
    private Group Item { get; private set; }
    public Group Item { get; public set; }
    internal GroupCollection(NamedElement parent, CommonElements common);
    public Group Add(string name);
    public int Add(Group value);
    public void Remove(Group value);
    private Group get_Item(int index);
    private void set_Item(int index, Group value);
    private Group get_Item(string name);
    private void set_Item(string name, Group value);
    public Group get_Item(object obj);
    public void set_Item(object obj, Group value);
    public ArrayList Find(string searchFor, bool ignoreCase, bool exactSearch, bool uniqueOnlyFields);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    internal virtual void Invalidate();
}
internal class Microsoft.Reporting.Map.WebForms.GroupConverter : CollectionItemTypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.GroupDataBindingRuleConverter")]
internal class Microsoft.Reporting.Map.WebForms.GroupDataBindingRule : DataBindingRuleBase {
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeGroupDataBindingRule_BindingField")]
public string BindingField { get; public set; }
    internal GroupDataBindingRule(CommonElements common);
    public virtual string get_BindingField();
    public virtual void set_BindingField(string value);
    internal virtual void DataBind();
}
internal class Microsoft.Reporting.Map.WebForms.GroupDataBindingRuleConverter : CollectionItemTypeConverter {
}
internal class Microsoft.Reporting.Map.WebForms.GroupFieldPropertyDescriptor : PropertyDescriptor {
    private Field field;
    public Type ComponentType { get; }
    public string DisplayName { get; }
    public bool IsBrowsable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public GroupFieldPropertyDescriptor(Field field, Attribute[] attributes);
    public virtual Type get_ComponentType();
    public virtual string get_DisplayName();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
    public virtual void SetValue(object component, object value);
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.GroupRuleConverter")]
internal class Microsoft.Reporting.Map.WebForms.GroupRule : RuleBase {
    private CustomColorCollection customColors;
    private string groupField;
    private string category;
    private string showInLegend;
    private bool showInColorSwatch;
    private string legendText;
    private int colorCount;
    private Color fromColor;
    private Color middleColor;
    private Color toColor;
    private string fromValue;
    private string toValue;
    private bool useCustomColors;
    private ColoringMode coloringMode;
    private DataGrouping dataGrouping;
    private MapColorPalette colorPalette;
    private Color borderColor;
    private Color secondaryColor;
    private GradientType gradientType;
    private MapHatchStyle hatchStyle;
    private string text;
    private string toolTip;
    [SRCategoryAttribute("CategoryAttribute_CustomColors")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_CustomColors")]
[DesignerSerializationVisibilityAttribute("2")]
public CustomColorCollection CustomColors { get; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_GroupField")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DesignTimeFieldConverter")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("(Name)")]
public string GroupField { get; public set; }
    internal string Field { get; internal set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_Category")]
[DefaultValueAttribute("")]
public string Category { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Legend")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_ShowInLegend")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DesignTimeLegendConverter")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("(none)")]
public string ShowInLegend { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_ShowInColorSwatch")]
[DefaultValueAttribute("False")]
public bool ShowInColorSwatch { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Legend")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_LegendText")]
[DefaultValueAttribute("#FROMVALUE{N0} - #TOVALUE{N0}")]
public string LegendText { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_ColorCount")]
[DefaultValueAttribute("5")]
public int ColorCount { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_FromColor")]
[DefaultValueAttribute("System.Drawing.Color", "Green")]
public Color FromColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_MiddleColor")]
[DefaultValueAttribute("System.Drawing.Color", "Yellow")]
public Color MiddleColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_ToColor")]
[DefaultValueAttribute("System.Drawing.Color", "Red")]
public Color ToColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_FromValue")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("")]
public string FromValue { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_ToValue")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("")]
public string ToValue { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_CustomColors")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_UseCustomColors")]
[DefaultValueAttribute("False")]
public bool UseCustomColors { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_ColoringMode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ColoringMode ColoringMode { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_DataGrouping")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
internal DataGrouping DataGrouping { get; internal set; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_ColorPalette")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapColorPalette ColorPalette { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_BorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_SecondaryColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color SecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_GradientType")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.GradientEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType GradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_HatchStyle")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapHatchStyle HatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_Text")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("#NAME")]
public string Text { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeGroupRule_ToolTip")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    internal CommonElements Common { get; internal set; }
    internal GroupRule(CommonElements common);
    public CustomColorCollection get_CustomColors();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public string get_GroupField();
    public void set_GroupField(string value);
    internal virtual string get_Field();
    internal virtual void set_Field(string value);
    public virtual string get_Category();
    public virtual void set_Category(string value);
    public virtual string get_ShowInLegend();
    public virtual void set_ShowInLegend(string value);
    public bool get_ShowInColorSwatch();
    public void set_ShowInColorSwatch(bool value);
    public virtual string get_LegendText();
    public virtual void set_LegendText(string value);
    public int get_ColorCount();
    public void set_ColorCount(int value);
    public Color get_FromColor();
    public void set_FromColor(Color value);
    public Color get_MiddleColor();
    public void set_MiddleColor(Color value);
    public Color get_ToColor();
    public void set_ToColor(Color value);
    public virtual string get_FromValue();
    public virtual void set_FromValue(string value);
    public virtual string get_ToValue();
    public virtual void set_ToValue(string value);
    public bool get_UseCustomColors();
    public void set_UseCustomColors(bool value);
    public ColoringMode get_ColoringMode();
    public void set_ColoringMode(ColoringMode value);
    internal virtual DataGrouping get_DataGrouping();
    internal virtual void set_DataGrouping(DataGrouping value);
    public MapColorPalette get_ColorPalette();
    public void set_ColorPalette(MapColorPalette value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public Color get_SecondaryColor();
    public void set_SecondaryColor(Color value);
    public GradientType get_GradientType();
    public void set_GradientType(GradientType value);
    public MapHatchStyle get_HatchStyle();
    public void set_HatchStyle(MapHatchStyle value);
    public string get_Text();
    public void set_Text(string value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public virtual string ToString();
    internal virtual void OnAdded();
    internal void InvalidateRules();
    internal virtual void OnRemove();
    internal void RegenerateColorRanges();
    internal void UpdateColorSwatchAndLegend();
    internal string GetLegendText(Field field, string fromValue, string toValue);
    internal void Apply(Group group);
    internal virtual Field GetField();
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
    internal void GetRangeFromGroups(Field field, int intervalCount, Object& fromValue, Object& toValue);
    internal virtual ArrayList GetSortedValues(Field field, object fromValue, object toValue);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.GroupRuleCollection : NamedCollection {
    private GroupRule Item { get; private set; }
    private GroupRule Item { get; private set; }
    public GroupRule Item { get; public set; }
    internal GroupRuleCollection(NamedElement parent, CommonElements common);
    public GroupRule Add(string name);
    public int Add(GroupRule value);
    public void Remove(GroupRule value);
    private GroupRule get_Item(int index);
    private void set_Item(int index, GroupRule value);
    private GroupRule get_Item(string name);
    private void set_Item(string name, GroupRule value);
    public GroupRule get_Item(object obj);
    public void set_Item(object obj, GroupRule value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    protected virtual void OnInsertComplete(int index, object value);
}
internal class Microsoft.Reporting.Map.WebForms.GroupRuleConverter : CollectionItemTypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal class Microsoft.Reporting.Map.WebForms.GroupRulePropertyDescriptor : PropertyDescriptor {
    private Field field;
    public Type ComponentType { get; }
    public bool IsBrowsable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public GroupRulePropertyDescriptor(Field field, string name, Attribute[] attrs);
    public virtual Type get_ComponentType();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
}
internal class Microsoft.Reporting.Map.WebForms.HatchStyleEditor : UITypeEditor {
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual void PaintValue(PaintValueEventArgs e);
}
internal class Microsoft.Reporting.Map.WebForms.HitTestResult : object {
    private PointF htPoint;
    private ObjectType objectType;
    private object obj;
    private HotRegion region;
    public ObjectType ObjectType { get; }
    public object Object { get; }
    public bool Success { get; }
    public string Name { get; }
    internal HotRegion Region { get; }
    internal HitTestResult(HotRegion region, PointF hitTestPoint);
    public ObjectType get_ObjectType();
    public object get_Object();
    public bool get_Success();
    public string get_Name();
    internal HotRegion get_Region();
}
internal class Microsoft.Reporting.Map.WebForms.HLSColor : ValueType {
    private static int ShadowAdj;
    private static int HilightAdj;
    private static int WatermarkAdj;
    private static int Range;
    private static int HLSMax;
    private static int RGBMax;
    private static int Undefined;
    private int hue;
    private int saturation;
    private int luminosity;
    public HLSColor(int red, int green, int blue);
    public Color Lighten(float percLighter);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public static bool op_Equality(HLSColor a, HLSColor b);
    public static bool op_Inequality(HLSColor a, HLSColor b);
    private Color ColorFromHLS(int hue, int luminosity, int saturation);
    private int HueToRGB(int n1, int n2, int hue);
    private int NewLuma(int n, bool scale);
    private int NewLuma(int luminosity, int n, bool scale);
}
internal class Microsoft.Reporting.Map.WebForms.HotRegion : object {
    private GraphicsPath[] paths;
    private RectangleF boundingRectangle;
    private object selectedObject;
    private PointF circularPinPoint;
    private Matrix relMatrix;
    private Matrix absMatrix;
    private PointF[] pointsRect;
    private PointF[] pointsPoint;
    private PointF lastOffset;
    private bool doNotDispose;
    protected bool disposed;
    internal GraphicsPath[] Paths { get; internal set; }
    internal RectangleF BoundingRectangle { get; internal set; }
    internal object SelectedObject { get; internal set; }
    internal PointF PinPoint { get; internal set; }
    internal Matrix AbsMatrix { get; }
    internal Matrix RelMatrix { get; }
    internal bool DoNotDispose { get; internal set; }
    internal GraphicsPath[] get_Paths();
    internal void set_Paths(GraphicsPath[] value);
    internal RectangleF get_BoundingRectangle();
    internal void set_BoundingRectangle(RectangleF value);
    internal object get_SelectedObject();
    internal void set_SelectedObject(object value);
    internal PointF get_PinPoint();
    internal void set_PinPoint(PointF value);
    internal Matrix get_AbsMatrix();
    internal Matrix get_RelMatrix();
    internal bool get_DoNotDispose();
    internal void set_DoNotDispose(bool value);
    internal void BuildMatrices(MapGraphics g);
    internal RectangleF GetAbsRectangle(RectangleF relRect);
    internal RectangleF GetRelRectangle(RectangleF absRect);
    internal PointF GetAbsPoint(PointF relPoint);
    internal PointF GetRelPoint(PointF absPoint);
    public SizeF GetAbsSize(SizeF relSize);
    internal SizeF GetRelSize(SizeF absSize);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void OffsetBy(PointF sectionOffset);
}
internal class Microsoft.Reporting.Map.WebForms.HotRegionList : MapObject {
    private ArrayList list;
    private Dictionary`2<object, int> selectedObjectIndex;
    private float scaleFactorX;
    private float scaleFactorY;
    internal ArrayList List { get; }
    internal float ScaleFactorX { get; internal set; }
    internal float ScaleFactorY { get; internal set; }
    public HotRegionList(object parent);
    internal ArrayList get_List();
    internal float get_ScaleFactorX();
    internal void set_ScaleFactorX(float value);
    internal float get_ScaleFactorY();
    internal void set_ScaleFactorY(float value);
    internal int FindHotRegionOfObject(object obj);
    internal void RemoveHotRegionOfObject(object obj);
    internal void SetHotRegion(MapGraphics g, object selectedObject, GraphicsPath[] pathArray);
    internal void SetHotRegion(MapGraphics g, object selectedObject, PointF pinPoint, GraphicsPath[] pathArray);
    internal HotRegion[] CheckHotRegions(int x, int y, Type[] objectTypes, bool needTooltipOnly);
    internal bool IsOfType(Type[] objectTypes, object obj);
    internal void ClearContentElements();
    internal void Clear();
}
internal class Microsoft.Reporting.Map.WebForms.HSV : ValueType {
    internal int Hue;
    internal int Saturation;
    internal int value;
    internal HSV(int H, int S, int V);
}
internal interface Microsoft.Reporting.Map.WebForms.IBorderType {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual void DrawBorder(MapGraphics graph, Frame borderSkin, RectangleF rect, Color backColor, MapHatchStyle backHatchStyle, string backImage, MapImageWrapMode backImageMode, Color backImageTranspColor, MapImageAlign backImageAlign, GradientType backGradientType, Color backSecondaryColor, Color borderColor, int borderWidth, MapDashStyle borderStyle);
    public abstract virtual void AdjustAreasPosition(MapGraphics graph, RectangleF& areasRect);
    public abstract virtual RectangleF GetTitlePositionInBorder();
    public abstract virtual bool IsVisible(MapGraphics g);
}
internal interface Microsoft.Reporting.Map.WebForms.IContentElement {
    public abstract virtual bool IsVisible(MapGraphics g, Layer layer, bool allLayers, RectangleF clipRect);
    public abstract virtual void RenderShadow(MapGraphics g);
    public abstract virtual void RenderBack(MapGraphics g, HotRegionList hotRegions);
    public abstract virtual void RenderFront(MapGraphics g, HotRegionList hotRegions);
    public abstract virtual void RenderText(MapGraphics g, HotRegionList hotRegions);
    public abstract virtual RectangleF GetBoundRect(MapGraphics g);
}
internal interface Microsoft.Reporting.Map.WebForms.IDefaultValueProvider {
    public abstract virtual object GetDefaultValue(string prop, object currentValue);
}
internal interface Microsoft.Reporting.Map.WebForms.IDesignTimeDataSource {
}
internal interface Microsoft.Reporting.Map.WebForms.IImageMapProvider {
    public object Tag { get; public set; }
    public string Href { get; public set; }
    public abstract virtual string GetToolTip();
    public abstract virtual string GetHref();
    public abstract virtual string GetMapAreaAttributes();
    public abstract virtual void set_Tag(object value);
    public abstract virtual object get_Tag();
    public abstract virtual void set_Href(string value);
    public abstract virtual string get_Href();
}
internal interface Microsoft.Reporting.Map.WebForms.ILayerElement {
    public string Layer { get; public set; }
    public bool BelongsToLayer { get; }
    public bool BelongsToAllLayers { get; }
    public Layer LayerObject { get; public set; }
    public abstract virtual string get_Layer();
    public abstract virtual void set_Layer(string value);
    public abstract virtual bool get_BelongsToLayer();
    public abstract virtual bool get_BelongsToAllLayers();
    public abstract virtual Layer get_LayerObject();
    public abstract virtual void set_LayerObject(Layer value);
}
internal class Microsoft.Reporting.Map.WebForms.ImageLoader : object {
    private Hashtable imageData;
    private IServiceContainer serviceContainer;
    public ImageLoader(IServiceContainer container);
    [EditorBrowsableAttribute("1")]
public sealed virtual object GetService(Type serviceType);
    public sealed virtual void Dispose();
    public Image LoadImage(string imageURL);
    public Image LoadImage(string imageURL, bool saveImage);
    private Image LoadFromFile(string fileName);
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.ImageOrigin/Converter")]
internal class Microsoft.Reporting.Map.WebForms.ImageOrigin : object {
    private Point point;
    private bool notSet;
    private bool defaultValues;
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeImageOrigin_X")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public int X { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeImageOrigin_Y")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public int Y { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeImageOrigin_NotSet")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public bool NotSet { get; public set; }
    internal bool DefaultValues { get; internal set; }
    public ImageOrigin(bool notSet, int x, int y);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public bool get_NotSet();
    public void set_NotSet(bool value);
    internal bool get_DefaultValues();
    internal void set_DefaultValues(bool value);
    public virtual string ToString();
    public Point ToPoint();
    public sealed virtual object Clone();
}
internal class Microsoft.Reporting.Map.WebForms.ImageSmoothingState : object {
    public MapGraphics g;
    private SmoothingMode oldSmoothingMode;
    private CompositingQuality compositingQuality;
    private InterpolationMode oldInterpolationMode;
    public ImageSmoothingState(MapGraphics g);
    public void Set();
    public void Restore();
}
internal enum Microsoft.Reporting.Map.WebForms.ImageType : Enum {
    public int value__;
    public static ImageType Bmp;
    public static ImageType Jpeg;
    public static ImageType Png;
    public static ImageType Emf;
}
internal class Microsoft.Reporting.Map.WebForms.ImageUIDialog : Form {
    private ListView listView1;
    private ImageList imageList1;
    private Button btnDelete;
    private Button btnAdd;
    private Button btnOk;
    private Button btnCancel;
    private IContainer components;
    private MapCore map;
    private string selectedValue;
    internal string SelectedImage { get; }
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    private void btnOk_Click(object sender, EventArgs e);
    private void btnAdd_Click(object sender, EventArgs e);
    private void btnDelete_Click(object sender, EventArgs e);
    private void listView1_SelectedIndexChanged(object sender, EventArgs e);
    private void listView1_DoubleClick(object sender, EventArgs e);
    internal DialogResult Execute(MapCore map, string selectedValue);
    internal string get_SelectedImage();
    public bool ThumbnailCallback();
    private Image GetResizedImage(Image image);
    private void InitImages();
}
internal interface Microsoft.Reporting.Map.WebForms.IMapAreaAttributes {
    public string ToolTip { get; public set; }
    public string Href { get; public set; }
    public string MapAreaAttributes { get; public set; }
    public object Tag { get; public set; }
    public abstract virtual void set_ToolTip(string value);
    public abstract virtual string get_ToolTip();
    public abstract virtual void set_Href(string value);
    public abstract virtual string get_Href();
    public abstract virtual void set_MapAreaAttributes(string value);
    public abstract virtual string get_MapAreaAttributes();
    public abstract virtual void set_Tag(object value);
    public abstract virtual object get_Tag();
}
internal interface Microsoft.Reporting.Map.WebForms.IMapRenderingEngine {
    public Matrix Transform { get; public set; }
    public SmoothingMode SmoothingMode { get; public set; }
    public TextRenderingHint TextRenderingHint { get; public set; }
    public Region Clip { get; public set; }
    public Graphics Graphics { get; public set; }
    public bool IsClipEmpty { get; }
    public abstract virtual void DrawLine(Pen pen, PointF pt1, PointF pt2);
    public abstract virtual void DrawLine(Pen pen, float x1, float y1, float x2, float y2);
    public abstract virtual void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr);
    public abstract virtual void DrawEllipse(Pen pen, float x, float y, float width, float height);
    public abstract virtual void DrawCurve(Pen pen, PointF[] points, int offset, int numberOfSegments, float tension);
    public abstract virtual void DrawRectangle(Pen pen, int x, int y, int width, int height);
    public abstract virtual void DrawPolygon(Pen pen, PointF[] points);
    public abstract virtual void DrawString(string s, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    public abstract virtual void DrawString(string s, Font font, Brush brush, PointF point, StringFormat format);
    public abstract virtual void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs);
    public abstract virtual void DrawRectangle(Pen pen, float x, float y, float width, float height);
    public abstract virtual void DrawPath(Pen pen, GraphicsPath path);
    public abstract virtual void DrawPie(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public abstract virtual void DrawArc(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public abstract virtual void DrawImage(Image image, RectangleF rect);
    public abstract virtual void DrawEllipse(Pen pen, RectangleF rect);
    public abstract virtual void DrawLines(Pen pen, PointF[] points);
    public abstract virtual void FillEllipse(Brush brush, RectangleF rect);
    public abstract virtual void FillPath(Brush brush, GraphicsPath path);
    public abstract virtual void FillPath(Brush brush, GraphicsPath path, float angle, bool useBrushOffset, bool circularFill);
    public abstract virtual void FillRegion(Brush brush, Region region);
    public abstract virtual void FillRectangle(Brush brush, RectangleF rect);
    public abstract virtual void FillRectangle(Brush brush, float x, float y, float width, float height);
    public abstract virtual void FillPolygon(Brush brush, PointF[] points);
    public abstract virtual void FillPie(Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public abstract virtual SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    public abstract virtual SizeF MeasureString(string text, Font font);
    public abstract virtual GraphicsState Save();
    public abstract virtual void Restore(GraphicsState gstate);
    public abstract virtual void ResetClip();
    public abstract virtual void SetClip(RectangleF rect);
    public abstract virtual void SetClip(GraphicsPath path, CombineMode combineMode);
    public abstract virtual void TranslateTransform(float dx, float dy);
    public abstract virtual void BeginSelection(string hRef, string title);
    public abstract virtual void EndSelection();
    public abstract virtual Matrix get_Transform();
    public abstract virtual void set_Transform(Matrix value);
    public abstract virtual SmoothingMode get_SmoothingMode();
    public abstract virtual void set_SmoothingMode(SmoothingMode value);
    public abstract virtual TextRenderingHint get_TextRenderingHint();
    public abstract virtual void set_TextRenderingHint(TextRenderingHint value);
    public abstract virtual Region get_Clip();
    public abstract virtual void set_Clip(Region value);
    public abstract virtual Graphics get_Graphics();
    public abstract virtual void set_Graphics(Graphics value);
    public abstract virtual bool get_IsClipEmpty();
}
internal class Microsoft.Reporting.Map.WebForms.IntAutoFitConverter : Int32Converter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal enum Microsoft.Reporting.Map.WebForms.IntervalTypes : Enum {
    public int value__;
    public static IntervalTypes Main;
    public static IntervalTypes Minor;
    public static IntervalTypes Major;
    public static IntervalTypes Labels;
}
internal class Microsoft.Reporting.Map.WebForms.IntNanValueConverter : Int32Converter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal interface Microsoft.Reporting.Map.WebForms.ISelectable {
    public abstract virtual void DrawSelection(MapGraphics g, RectangleF clipRect, bool designTimeSelection);
    public abstract virtual bool IsSelected();
    public abstract virtual bool IsVisible();
    public abstract virtual RectangleF GetSelectionRectangle(MapGraphics g, RectangleF clipRect);
}
[DefaultMemberAttribute("Item")]
internal interface Microsoft.Reporting.Map.WebForms.ISpatialElement {
    public string Name { get; public set; }
    public string Layer { get; public set; }
    public string Category { get; public set; }
    public object Item { get; public set; }
    public MapPoint MinimumExtent { get; }
    public MapPoint MaximumExtent { get; }
    public MapPoint[] Points { get; }
    public bool Visible { get; public set; }
    public Offset Offset { get; public set; }
    public string Text { get; public set; }
    public string ToolTip { get; public set; }
    public Color BorderColor { get; public set; }
    public int BorderWidth { get; public set; }
    public Color Color { get; public set; }
    public Color SecondaryColor { get; public set; }
    public GradientType GradientType { get; public set; }
    public MapHatchStyle HatchStyle { get; public set; }
    public Color TextColor { get; public set; }
    public Font Font { get; public set; }
    public int ShadowOffset { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Layer();
    public abstract virtual void set_Layer(string value);
    public abstract virtual string get_Category();
    public abstract virtual void set_Category(string value);
    public abstract virtual object get_Item(string name);
    public abstract virtual void set_Item(string name, object value);
    public abstract virtual bool AddGeography(SqlGeography geography);
    public abstract virtual bool AddGeometry(SqlGeometry geometry);
    public abstract virtual bool LoadWKT(string wkt);
    public abstract virtual bool AddWKT(string wkt);
    public abstract virtual bool LoadWKB(Byte[] wkb);
    public abstract virtual bool AddWKB(Byte[] wkb);
    public abstract virtual string SaveWKT();
    public abstract virtual Byte[] SaveWKB();
    public abstract virtual MapPoint get_MinimumExtent();
    public abstract virtual MapPoint get_MaximumExtent();
    public abstract virtual MapPoint[] get_Points();
    public abstract virtual bool get_Visible();
    public abstract virtual void set_Visible(bool value);
    public abstract virtual Offset get_Offset();
    public abstract virtual void set_Offset(Offset value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual string get_ToolTip();
    public abstract virtual void set_ToolTip(string value);
    public abstract virtual Color get_BorderColor();
    public abstract virtual void set_BorderColor(Color value);
    public abstract virtual int get_BorderWidth();
    public abstract virtual void set_BorderWidth(int value);
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
    public abstract virtual Color get_SecondaryColor();
    public abstract virtual void set_SecondaryColor(Color value);
    public abstract virtual GradientType get_GradientType();
    public abstract virtual void set_GradientType(GradientType value);
    public abstract virtual MapHatchStyle get_HatchStyle();
    public abstract virtual void set_HatchStyle(MapHatchStyle value);
    public abstract virtual Color get_TextColor();
    public abstract virtual void set_TextColor(Color value);
    public abstract virtual Font get_Font();
    public abstract virtual void set_Font(Font value);
    public abstract virtual int get_ShadowOffset();
    public abstract virtual void set_ShadowOffset(int value);
}
internal class Microsoft.Reporting.Map.WebForms.ItemInfo : object {
    public string name;
    public bool any;
    public bool startsWith;
    public bool endsWith;
}
internal interface Microsoft.Reporting.Map.WebForms.IToolTipProvider {
    public abstract virtual string GetToolTip();
}
internal interface Microsoft.Reporting.Map.WebForms.IZOrderedObject {
    public abstract virtual int GetZOrder();
}
internal class Microsoft.Reporting.Map.WebForms.KeywordConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal enum Microsoft.Reporting.Map.WebForms.LabelAlignment : Enum {
    public int value__;
    public static LabelAlignment Top;
    public static LabelAlignment Bottom;
    public static LabelAlignment Alternate;
}
internal class Microsoft.Reporting.Map.WebForms.LabelFormatEditor : UITypeEditor {
    private IWindowsFormsEditorService edSvc;
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Map.WebForms.LabelFormatEditorForm : Form {
    internal string resultFormat;
    private string formatString;
    private string formatNumeric;
    private TabControl tabControl;
    private ComboBox comboBoxFormatType;
    private TabPage tabPageNumeric;
    private TabPage tabPageCustom;
    private TextBox textBoxFormatString;
    private TextBox textBoxCustomSample;
    private Label labelCustomDescription;
    private Label labelNumericFormatDescription;
    private TextBox textBoxNumericSample;
    private Button buttonOk;
    private Button buttonCancel;
    private Label label1;
    private Label label2;
    private Label label6;
    private Label label4;
    private Label label3;
    private TextBox textBoxPrecision;
    private Container components;
    private void InitializeComponent();
    protected virtual void Dispose(bool disposing);
    private void UpdateNumericSample();
    private void comboBoxFormatType_SelectedIndexChanged(object sender, EventArgs e);
    private void LabelFormatEditorForm_Load(object sender, EventArgs e);
    private void textBoxPrecision_TextChanged(object sender, EventArgs e);
    private void textBoxFormatString_TextChanged(object sender, EventArgs e);
    private void UpdateCustomExample();
    private void tabControl_SelectedIndexChanged(object sender, EventArgs e);
    private void buttonOk_Click(object sender, EventArgs e);
    private void buttonCancel_Click(object sender, EventArgs e);
}
internal enum Microsoft.Reporting.Map.WebForms.LabelPosition : Enum {
    public int value__;
    public static LabelPosition Near;
    public static LabelPosition OneQuarter;
    public static LabelPosition Center;
    public static LabelPosition ThreeQuarters;
    public static LabelPosition Far;
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.LayerConverter")]
internal class Microsoft.Reporting.Map.WebForms.Layer : NamedElement {
    private LayerVisibility visibility;
    private float visibleFromZoom;
    private float visibleToZoom;
    private float labelVisibleFromZoom;
    private float transparency;
    private TileSystem tileSystem;
    private bool useSecureConnectionForTiles;
    private ImageryProvider[] tileImageryProviders;
    private string tileImageUriFormat;
    private String[] tileImageUriSubdomains;
    private string tileError;
    public string Name { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CategoryAttribute_GeneralVisibility")]
[SRDescriptionAttribute("DescriptionAttributeLayer_Visibility")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public LayerVisibility Visibility { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_GeneralVisibility")]
[SRDescriptionAttribute("DescriptionAttributeLayer_VisibleFromZoom")]
[DefaultValueAttribute("50")]
public float VisibleFromZoom { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_GeneralVisibility")]
[SRDescriptionAttribute("DescriptionAttributeLayer_VisibleToZoom")]
[DefaultValueAttribute("200")]
public float VisibleToZoom { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_LabelVisibility")]
[SRDescriptionAttribute("DescriptionAttributeLayer_LabelVisibleFromZoom")]
[DefaultValueAttribute("50")]
public float LabelVisibleFromZoom { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Visible { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool LabelVisible { get; }
    [SRCategoryAttribute("CategoryAttribute_GeneralVisibility")]
[SRDescriptionAttribute("DescriptionAttributeLayer_Transparency")]
[DefaultValueAttribute("0")]
public float Transparency { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeLayer_TileSystem")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TileSystem TileSystem { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("DescriptionAttributeLayer_TileSystem")]
[SRDescriptionAttribute("DescriptionAttributeLayer_UseSecureConnectionForTiles")]
[DefaultValueAttribute("False")]
public bool UseSecureConnectionForTiles { get; public set; }
    internal ImageryProvider[] TileImageryProviders { get; internal set; }
    internal string TileImageUriFormat { get; internal set; }
    internal String[] TileImageUriSubdomains { get; internal set; }
    internal string TileError { get; internal set; }
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public LayerVisibility get_Visibility();
    public void set_Visibility(LayerVisibility value);
    public float get_VisibleFromZoom();
    public void set_VisibleFromZoom(float value);
    public float get_VisibleToZoom();
    public void set_VisibleToZoom(float value);
    public float get_LabelVisibleFromZoom();
    public void set_LabelVisibleFromZoom(float value);
    public bool get_Visible();
    public bool get_LabelVisible();
    public float get_Transparency();
    public void set_Transparency(float value);
    public TileSystem get_TileSystem();
    public void set_TileSystem(TileSystem value);
    public bool get_UseSecureConnectionForTiles();
    public void set_UseSecureConnectionForTiles(bool value);
    internal ImageryProvider[] get_TileImageryProviders();
    internal void set_TileImageryProviders(ImageryProvider[] value);
    internal string get_TileImageUriFormat();
    internal void set_TileImageUriFormat(string value);
    internal String[] get_TileImageUriSubdomains();
    internal void set_TileImageUriSubdomains(String[] value);
    internal string get_TileError();
    internal void set_TileError(string value);
    internal virtual void OnRemove();
    internal string GetAttributionStrings();
    internal List`1<ILayerElement> GetLayerElements();
    private void UpdateLayerElements(string oldLayerName, string newLayerName);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.ISelectable.DrawSelection(MapGraphics g, RectangleF clipRect, bool designTimeSelection);
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ISelectable.IsSelected();
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ISelectable.IsVisible();
    private sealed virtual override RectangleF Microsoft.Reporting.Map.WebForms.ISelectable.GetSelectionRectangle(MapGraphics g, RectangleF clipRect);
    internal bool IsVirtualEarthServiceQueried();
    internal void ResetStoredVirtualEarthParameters();
    internal bool QueryVirtualEarthService(bool asyncQuery);
    private void ProcessImageryMetadataResponse(Response response);
    [CompilerGeneratedAttribute]
private void <QueryVirtualEarthService>b__61_0(Exception ex);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.LayerCollection : NamedCollection {
    private Layer Item { get; private set; }
    private Layer Item { get; private set; }
    public Layer Item { get; public set; }
    internal LayerCollection(NamedElement parent, CommonElements common);
    public Layer Add(string name);
    public int Add(Layer value);
    public void Remove(Layer value);
    private Layer get_Item(int index);
    private void set_Item(int index, Layer value);
    private Layer get_Item(string name);
    private void set_Item(string name, Layer value);
    public Layer get_Item(object obj);
    public void set_Item(object obj, Layer value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    internal virtual void Invalidate();
    internal bool HasVisibleLayer();
}
internal class Microsoft.Reporting.Map.WebForms.LayerConverter : CollectionItemTypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal enum Microsoft.Reporting.Map.WebForms.LayerVisibility : Enum {
    public int value__;
    public static LayerVisibility Shown;
    public static LayerVisibility Hidden;
    public static LayerVisibility ZoomBased;
}
[DescriptionAttribute("Legend style, position, custom elements and other properties.")]
[DefaultPropertyAttribute("Enabled")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.Legend/LegendConverter")]
internal class Microsoft.Reporting.Map.WebForms.Legend : AutoSizePanel {
    private static int DummyItemsCount;
    private LegendTableStyle legendTableStyle;
    private bool autoFitText;
    private TempLegendItemsCollection legendItems;
    private SizeF sizeLargestItemText;
    private SizeF sizeAverageItemText;
    private SizeF sizeItemImage;
    private int itemColumns;
    private SizeF itemCellSize;
    internal Font autofitFont;
    private bool interlacedRows;
    private Color interlacedRowsColor;
    private Size offset;
    private int textWrapThreshold;
    private int autoFitFontSizeAdjustment;
    private LegendCellColumnCollection cellColumns;
    private AutoBool reversed;
    private string title;
    private Color titleColor;
    private Color titleBackColor;
    private StringAlignment titleAlignment;
    private LegendSeparatorType titleSeparator;
    private Color titleSeparatorColor;
    private LegendSeparatorType headerSeparator;
    private Color headerSeparatorColor;
    private LegendSeparatorType itemColumnSeparator;
    private Color itemColumnSeparatorColor;
    private int itemColumnSpacing;
    private int itemColumnSpacingRel;
    private Rectangle titlePosition;
    private Rectangle headerPosition;
    private int autoFitMinFontSize;
    private int horizontalSpaceLeft;
    private int verticalSpaceLeft;
    private Int32[0...,0...] subColumnSizes;
    private Int32[0...,0...] cellHeights;
    private Int32[] numberOfRowsPerColumn;
    private int numberOfLegendItemsToProcess;
    private Rectangle legendItemsAreaPosition;
    private bool legendItemsTruncated;
    private int truncatedDotsSize;
    private int numberOfCells;
    internal Size singleWCharacterSize;
    private bool showSelectedTitle;
    private bool equallySpacedItems;
    private LegendStyle legendStyle;
    private Font font;
    private bool disposeFont;
    private Color textColor;
    private LegendItemsCollection customLegends;
    private Font titleFont;
    [NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
internal bool ShowSelectedTitle { get; internal set; }
    [NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
internal RectangleF TitleSelectionRectangle { get; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
[SerializationVisibilityAttribute("1")]
[SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeLegend_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeLegend_EquallySpacedItems")]
[NotifyParentPropertyAttribute("True")]
public bool EquallySpacedItems { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_AutoFitText")]
[NotifyParentPropertyAttribute("True")]
public bool AutoFitText { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegend_LegendStyle")]
[NotifyParentPropertyAttribute("True")]
public LegendStyle LegendStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TableStyle")]
[NotifyParentPropertyAttribute("True")]
public LegendTableStyle TableStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[DefaultValueAttribute("7")]
[SRDescriptionAttribute("DescriptionAttributeLegend_AutoFitMinFontSize")]
public int AutoFitMinFontSize { get; public set; }
    [DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_CellColumns")]
[SRDescriptionAttribute("DescriptionAttributeLegend_CellColumns")]
public LegendCellColumnCollection CellColumns { get; }
    [SRCategoryAttribute("CategoryAttribute_CellColumns")]
[DefaultValueAttribute("Microsoft.Reporting.Map.WebForms.LegendSeparatorType", "None")]
[SRDescriptionAttribute("DescriptionAttributeLegend_HeaderSeparator")]
public LegendSeparatorType HeaderSeparator { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_CellColumns")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLegend_HeaderSeparatorColor")]
public Color HeaderSeparatorColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_CellColumns")]
[DefaultValueAttribute("Microsoft.Reporting.Map.WebForms.LegendSeparatorType", "None")]
[SRDescriptionAttribute("DescriptionAttributeLegend_ItemColumnSeparator")]
public LegendSeparatorType ItemColumnSeparator { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_CellColumns")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
[SRDescriptionAttribute("DescriptionAttributeLegend_ItemColumnSeparatorColor")]
public Color ItemColumnSeparatorColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_CellColumns")]
[DefaultValueAttribute("50")]
[SRDescriptionAttribute("DescriptionAttributeLegend_ItemColumnSpacing")]
public int ItemColumnSpacing { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt")]
[SRDescriptionAttribute("DescriptionAttributeLegend_Font")]
[NotifyParentPropertyAttribute("True")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TextColor")]
[NotifyParentPropertyAttribute("True")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[BindableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegend_Items")]
public LegendItemsCollection Items { get; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[DefaultValueAttribute("25")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TextWrapThreshold")]
public int TextWrapThreshold { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("Indicates that all legend items are shown in reversed order. This property only affects legend items automatically added and has no effect on custom legend items.")]
private AutoBool Reversed { get; private set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeLegend_InterlacedRows")]
public bool InterlacedRows { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegend_InterlacedRowsColor")]
public Color InterlacedRowsColor { get; public set; }
    internal bool IsEmpty { get; }
    [SRCategoryAttribute("CategoryAttribute_Title")]
[DefaultValueAttribute("Legend Title")]
[SRDescriptionAttribute("DescriptionAttributeLegend_Title")]
public string Title { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Title")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TitleColor")]
public Color TitleColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Title")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TitleBackColor")]
public Color TitleBackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Title")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 9.75pt")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TitleFont")]
public Font TitleFont { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Title")]
[DefaultValueAttribute("System.Drawing.StringAlignment", "Center")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TitleAlignment")]
public StringAlignment TitleAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Title")]
[DefaultValueAttribute("Microsoft.Reporting.Map.WebForms.LegendSeparatorType", "GradientLine")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TitleSeparator")]
public LegendSeparatorType TitleSeparator { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Title")]
[DefaultValueAttribute("System.Drawing.Color", "Gray")]
[SRDescriptionAttribute("DescriptionAttributeLegend_TitleSeparatorColor")]
public Color TitleSeparatorColor { get; public set; }
    internal string DefaultName { get; }
    internal CommonElements Common { get; internal set; }
    internal Legend(CommonElements common);
    public Legend(string name);
    internal bool get_ShowSelectedTitle();
    internal void set_ShowSelectedTitle(bool value);
    internal RectangleF get_TitleSelectionRectangle();
    public virtual RectangleF GetSelectionRectangle(MapGraphics g, RectangleF clipRect);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public bool get_EquallySpacedItems();
    public void set_EquallySpacedItems(bool value);
    public bool get_AutoFitText();
    public void set_AutoFitText(bool value);
    public LegendStyle get_LegendStyle();
    public void set_LegendStyle(LegendStyle value);
    public LegendTableStyle get_TableStyle();
    public void set_TableStyle(LegendTableStyle value);
    public int get_AutoFitMinFontSize();
    public void set_AutoFitMinFontSize(int value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public LegendCellColumnCollection get_CellColumns();
    public LegendSeparatorType get_HeaderSeparator();
    public void set_HeaderSeparator(LegendSeparatorType value);
    public Color get_HeaderSeparatorColor();
    public void set_HeaderSeparatorColor(Color value);
    public LegendSeparatorType get_ItemColumnSeparator();
    public void set_ItemColumnSeparator(LegendSeparatorType value);
    public Color get_ItemColumnSeparatorColor();
    public void set_ItemColumnSeparatorColor(Color value);
    public int get_ItemColumnSpacing();
    public void set_ItemColumnSpacing(int value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public LegendItemsCollection get_Items();
    public int get_TextWrapThreshold();
    public void set_TextWrapThreshold(int value);
    private AutoBool get_Reversed();
    private void set_Reversed(AutoBool value);
    public bool get_InterlacedRows();
    public void set_InterlacedRows(bool value);
    public Color get_InterlacedRowsColor();
    public void set_InterlacedRowsColor(Color value);
    private void RecalcLegendInfo(MapGraphics g);
    private bool TryLayoutLegendItems(MapGraphics g);
    protected virtual SizeF CalculateUndockedAutoSize(SizeF size);
    private Rectangle GetCellPosition(MapGraphics g, int columnIndex, int rowIndex, int cellIndex, Size itemHalfSpacing);
    internal virtual SizeF GetOptimalSize(MapGraphics g, SizeF maxSizeAbs);
    private bool GetNumberOfRowsAndColumns(MapGraphics g, Size legendSize, int numberOfItemsToCheck, Int32[]& numberOfRowsPerColumn, Int32& columnNumber);
    private bool GetNumberOfRowsAndColumns(MapGraphics g, Size legendSize, int numberOfItemsToCheck, Int32[]& numberOfRowsPerColumn, Int32& columnNumber, Int32& horSpaceLeft, Int32& vertSpaceLeft);
    private int GetHighestColumnIndex();
    private int GetColumnHeight(int columnIndex);
    private int GetMaximumNumberOfRows();
    private int GetMaximumNumberOfRows(Int32[] rowsPerColumn);
    private bool CheckLegendItemsFit(MapGraphics graph, Size legendItemsAreaSize, int numberOfItemsToCheck, int fontSizeReducedBy, int numberOfColumns, Int32[] numberOfRowsPerColumn, Int32[0...,0...]& subColumnSizes, Int32[0...,0...]& cellHeights, Int32& horizontalSpaceLeft, Int32& verticalSpaceLeft);
    private int GetNumberOfCells();
    private void FillLegendItemsCollection(SizeF singleWCharacterSize);
    internal virtual void Render(MapGraphics g);
    private void RenderLegend(MapGraphics g);
    internal virtual bool get_IsEmpty();
    public string get_Title();
    public void set_Title(string value);
    public Color get_TitleColor();
    public void set_TitleColor(Color value);
    public Color get_TitleBackColor();
    public void set_TitleBackColor(Color value);
    public Font get_TitleFont();
    public void set_TitleFont(Font value);
    public StringAlignment get_TitleAlignment();
    public void set_TitleAlignment(StringAlignment value);
    public LegendSeparatorType get_TitleSeparator();
    public void set_TitleSeparator(LegendSeparatorType value);
    public Color get_TitleSeparatorColor();
    public void set_TitleSeparatorColor(Color value);
    private Size GetTitleSize(MapGraphics chartGraph, Size titleMaxSize);
    private Size GetHeaderSize(MapGraphics chartGraph, LegendCellColumn legendColumn);
    private void DrawLegendHeader(MapGraphics g);
    private void DrawLegendTitle(MapGraphics g);
    internal Size GetSeparatorSize(MapGraphics chartGraph, LegendSeparatorType separatorType);
    private void DrawSeparator(MapGraphics chartGraph, LegendSeparatorType separatorType, Color color, bool horizontal, Rectangle position);
    private int GetBorderSize();
    private LegendTableStyle GetLegendTableStyle(MapGraphics g);
    internal virtual bool IsRenderVisible(MapGraphics g, RectangleF clipRect);
    internal virtual object GetDefaultPropertyValue(string prop, object currentValue);
    internal virtual string get_DefaultName();
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
    internal virtual void Invalidate();
}
[DescriptionAttribute("Represents a cell of a legend item.")]
internal class Microsoft.Reporting.Map.WebForms.LegendCell : NamedElement {
    private Legend legend;
    private LegendItem legendItem;
    private LegendCellType cellType;
    private string text;
    private Color textColor;
    private Color backColor;
    private Font font;
    private string image;
    private Color imageTranspColor;
    private Size imageSize;
    private Size symbolSize;
    private ContentAlignment alignment;
    private int cellSpan;
    private string toolTip;
    private Margins margins;
    private int rowIndex;
    private int columnIndex;
    internal Rectangle cellPosition;
    internal Rectangle cellPositionWithMargins;
    private Size cachedCellSize;
    private int cachedCellSizeFontReducedBy;
    private string href;
    private string cellAttributes;
    private object mapAreaTag;
    [BrowsableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_Name")]
[SRCategoryAttribute("CategoryAttribute_Data")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_CellType")]
[ParenthesizePropertyNameAttribute("True")]
public LegendCellType CellType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_Text")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_TextColor")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_BackColor")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_Font")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_Image")]
public string Image { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_ImageTranspColor")]
public Color ImageTranspColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[DefaultValueAttribute("System.Drawing.Size", "0, 0")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.SizeEmptyValueConverter")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_ImageSize")]
public Size ImageSize { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[DefaultValueAttribute("System.Drawing.Size", "200, 70")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_SymbolSize")]
public Size SymbolSize { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[DefaultValueAttribute]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_Alignment")]
public ContentAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_CellSpan")]
public int CellSpan { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[DefaultValueAttribute("Microsoft.Reporting.Map.WebForms.Margins", "0,0,15,15")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_Margins")]
[SerializationVisibilityAttribute("1")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
public Margins Margins { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_ToolTip")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public LegendItem LegendItem { get; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_Href")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLegendCell_CellAttributes")]
[DefaultValueAttribute("")]
public string CellAttributes { get; public set; }
    private object Microsoft.Reporting.Map.WebForms.IImageMapProvider.Tag { get; private set; }
    internal string DefaultName { get; }
    internal CommonElements Common { get; internal set; }
    public LegendCell(string text);
    public LegendCell(LegendCellType cellType, string text);
    public LegendCell(LegendCellType cellType, string text, ContentAlignment alignment);
    private void Intitialize(LegendCellType cellType, string text, ContentAlignment alignment);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual LegendCellType get_CellType();
    public virtual void set_CellType(LegendCellType value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual Color get_TextColor();
    public virtual void set_TextColor(Color value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual string get_Image();
    public virtual void set_Image(string value);
    public virtual Color get_ImageTranspColor();
    public virtual void set_ImageTranspColor(Color value);
    public virtual Size get_ImageSize();
    public virtual void set_ImageSize(Size value);
    public virtual Size get_SymbolSize();
    public virtual void set_SymbolSize(Size value);
    public virtual ContentAlignment get_Alignment();
    public virtual void set_Alignment(ContentAlignment value);
    public virtual int get_CellSpan();
    public virtual void set_CellSpan(int value);
    public virtual Margins get_Margins();
    public virtual void set_Margins(Margins value);
    [EditorBrowsableAttribute("1")]
protected bool ShouldSerializeMargins();
    public virtual void set_ToolTip(string value);
    public virtual string get_ToolTip();
    public LegendItem get_LegendItem();
    public sealed virtual void set_Href(string value);
    public sealed virtual string get_Href();
    public virtual void set_CellAttributes(string value);
    public virtual string get_CellAttributes();
    internal void ResetCache();
    internal void SetCellPosition(MapGraphics g, int columnIndex, int rowIndex, Rectangle position, int fontSizeReducedBy, Font legendAutoFont, Size singleWCharacterSize);
    internal Size MeasureCell(MapGraphics g, int fontSizeReducedBy, Font legendAutoFont, Size singleWCharacterSize);
    private Color GetCellBackColor();
    private Font GetCellFont(Font legendAutoFont, int fontSizeReducedBy, Boolean& disposeFont);
    private string GetCellText();
    private Color GetCellTextColor();
    internal virtual void Invalidate();
    internal void SetContainingLegend(Legend legend, LegendItem legendItem);
    public virtual Legend GetLegend();
    public virtual LegendItem GetLegendItem();
    internal void Paint(MapGraphics chartGraph, int fontSizeReducedBy, Font legendAutoFont, Size singleWCharacterSize);
    private void PaintCellText(MapGraphics g, int fontSizeReducedBy, Font legendAutoFont, Size singleWCharacterSize);
    private void PaintCellImage(MapGraphics chartGraph, int fontSizeReducedBy, Font legendAutoFont, Size singleWCharacterSize);
    private void PaintCellSeriesSymbol(MapGraphics g, int fontSizeReducedBy, Font legendAutoFont, SizeF singleWCharacterSize);
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetHref();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetMapAreaAttributes();
    private sealed virtual override object Microsoft.Reporting.Map.WebForms.IImageMapProvider.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IImageMapProvider.set_Tag(object value);
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IToolTipProvider.GetToolTip();
    internal virtual string get_DefaultName();
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
}
[DefaultMemberAttribute("Item")]
[DescriptionAttribute("Legend item cell collection.")]
internal class Microsoft.Reporting.Map.WebForms.LegendCellCollection : NamedCollection {
    private LegendItem legendItem;
    private LegendCell Item { get; private set; }
    private LegendCell Item { get; private set; }
    [SRDescriptionAttribute("DescriptionAttributeLegendCellCollection_Item")]
public LegendCell Item { get; public set; }
    internal LegendCellCollection(LegendItem legendItem, NamedElement parent, CommonElements common);
    private LegendCell get_Item(int index);
    private void set_Item(int index, LegendCell value);
    private LegendCell get_Item(string name);
    private void set_Item(string name, LegendCell value);
    public LegendCell get_Item(object param);
    public void set_Item(object param, LegendCell value);
    public void Remove(string name);
    public void Remove(LegendCell cell);
    public int Add(LegendCell cell);
    public int Add(LegendCellType cellType, string text, ContentAlignment alignment);
    public int Add(string name, LegendCellType cellType, string text, ContentAlignment alignment);
    public void Insert(int index, LegendCell cell);
    public void Insert(int index, LegendCellType cellType, string text, ContentAlignment alignment);
    public int IndexOf(LegendCell cell);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    internal virtual void Invalidate();
    public LegendCell FindByName(string name);
}
[DescriptionAttribute("Represents a column in the map legend.")]
internal class Microsoft.Reporting.Map.WebForms.LegendCellColumn : NamedElement {
    private Legend legend;
    private LegendCellColumnType columnType;
    private string text;
    private Color textColor;
    private Color backColor;
    private Font font;
    private Size seriesSymbolSize;
    private ContentAlignment alignment;
    private Margins margins;
    private string headerText;
    private StringAlignment headerTextAlignment;
    private Color headerColor;
    private Color headerBackColor;
    private int minimumCellWidth;
    private int maximumCellWidth;
    private string toolTip;
    private string href;
    private string cellColumnAttributes;
    private Font headerFont;
    private object mapAreaTag;
    [CategoryAttribute("Series Items")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("Legend column type of the items automatically generated.")]
[ParenthesizePropertyNameAttribute("True")]
internal LegendCellColumnType ColumnType { get; internal set; }
    [CategoryAttribute("Series Items")]
[DefaultValueAttribute("#LEGENDTEXT")]
[DescriptionAttribute("Legend column text of the items automatically generated. Set ColumnType to Text to use this property.")]
internal string Text { get; internal set; }
    [CategoryAttribute("Series Items")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("Legend column text color.")]
internal Color TextColor { get; internal set; }
    [CategoryAttribute("Series Items")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[DescriptionAttribute("Legend column back color.")]
internal Color BackColor { get; internal set; }
    [CategoryAttribute("Series Items")]
[DefaultValueAttribute("")]
[DescriptionAttribute("Legend column text font.")]
internal Font Font { get; internal set; }
    [CategoryAttribute("Series Items")]
[DefaultValueAttribute("System.Drawing.Size", "200, 70")]
[DescriptionAttribute("Legend column symbol size (as a percentage of legend font size). This is only applicable to items that are automatically generated.")]
internal Size SeriesSymbolSize { get; internal set; }
    [CategoryAttribute("Series Items")]
[DefaultValueAttribute]
[DescriptionAttribute("Legend column content alignment of the items automatically generated.")]
internal ContentAlignment Alignment { get; internal set; }
    [CategoryAttribute("Series Items")]
[DefaultValueAttribute("Microsoft.Reporting.Map.WebForms.Margins", "0,0,15,15")]
[DescriptionAttribute("Legend column margins (as a percentage of legend font size).  This is only applicable to items that are automatically generated.")]
[SerializationVisibilityAttribute("1")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
internal Margins Margins { get; internal set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_ToolTip")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_Href")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_CellColumnAttributes")]
[DefaultValueAttribute("")]
public string CellColumnAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Header")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_HeaderText")]
public string HeaderText { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Header")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_HeaderColor")]
public Color HeaderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Header")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_HeaderBackColor")]
public Color HeaderBackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Header")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8pt, style=Bold")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_HeaderFont")]
public Font HeaderFont { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Header")]
[DefaultValueAttribute("System.Drawing.StringAlignment", "Center")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_HeaderTextAlignment")]
public StringAlignment HeaderTextAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Size")]
[DefaultValueAttribute("-1")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.IntNanValueConverter")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_MinimumWidth")]
public int MinimumWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Size")]
[DefaultValueAttribute("-1")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.IntNanValueConverter")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_MaximumWidth")]
public int MaximumWidth { get; public set; }
    [BrowsableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendCellColumn_Name")]
[SRCategoryAttribute("CategoryAttribute_Data")]
public string Name { get; public set; }
    private object Microsoft.Reporting.Map.WebForms.IImageMapProvider.Tag { get; private set; }
    internal string DefaultName { get; }
    internal CommonElements Common { get; internal set; }
    public LegendCellColumn(string headerText);
    public LegendCellColumn(string name, string headerText);
    public LegendCellColumn(string name, string headerText, ContentAlignment alignment);
    private void Intitialize(string headerText, LegendCellColumnType columnType, string text, ContentAlignment alignment);
    internal virtual LegendCellColumnType get_ColumnType();
    internal virtual void set_ColumnType(LegendCellColumnType value);
    internal virtual string get_Text();
    internal virtual void set_Text(string value);
    internal virtual Color get_TextColor();
    internal virtual void set_TextColor(Color value);
    internal virtual Color get_BackColor();
    internal virtual void set_BackColor(Color value);
    internal virtual Font get_Font();
    internal virtual void set_Font(Font value);
    internal virtual Size get_SeriesSymbolSize();
    internal virtual void set_SeriesSymbolSize(Size value);
    internal virtual ContentAlignment get_Alignment();
    internal virtual void set_Alignment(ContentAlignment value);
    internal virtual Margins get_Margins();
    internal virtual void set_Margins(Margins value);
    [EditorBrowsableAttribute("1")]
protected bool ShouldSerializeMargins();
    public virtual void set_ToolTip(string value);
    public virtual string get_ToolTip();
    public sealed virtual void set_Href(string value);
    public sealed virtual string get_Href();
    public virtual void set_CellColumnAttributes(string value);
    public virtual string get_CellColumnAttributes();
    public virtual string get_HeaderText();
    public virtual void set_HeaderText(string value);
    public virtual Color get_HeaderColor();
    public virtual void set_HeaderColor(Color value);
    public virtual Color get_HeaderBackColor();
    public virtual void set_HeaderBackColor(Color value);
    public virtual Font get_HeaderFont();
    public virtual void set_HeaderFont(Font value);
    public StringAlignment get_HeaderTextAlignment();
    public void set_HeaderTextAlignment(StringAlignment value);
    public virtual int get_MinimumWidth();
    public virtual void set_MinimumWidth(int value);
    public virtual int get_MaximumWidth();
    public virtual void set_MaximumWidth(int value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal LegendCell CreateNewCell();
    internal virtual void Invalidate();
    public virtual Legend GetLegend();
    internal void SetContainingLegend(Legend legend);
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IToolTipProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetHref();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetMapAreaAttributes();
    private sealed virtual override object Microsoft.Reporting.Map.WebForms.IImageMapProvider.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IImageMapProvider.set_Tag(object value);
    internal virtual string get_DefaultName();
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
}
[DefaultMemberAttribute("Item")]
[DescriptionAttribute("Legend column collection.")]
internal class Microsoft.Reporting.Map.WebForms.LegendCellColumnCollection : NamedCollection {
    private Legend legend;
    private LegendCellColumn Item { get; private set; }
    private LegendCellColumn Item { get; private set; }
    [SRDescriptionAttribute("DescriptionAttributeLegendCellColumnCollection_Item")]
public LegendCellColumn Item { get; public set; }
    internal LegendCellColumnCollection(Legend legend, NamedElement parent, CommonElements common);
    private LegendCellColumn get_Item(int index);
    private void set_Item(int index, LegendCellColumn value);
    private LegendCellColumn get_Item(string name);
    private void set_Item(string name, LegendCellColumn value);
    public LegendCellColumn get_Item(object param);
    public void set_Item(object param, LegendCellColumn value);
    public void Remove(string name);
    public void Remove(LegendCellColumn column);
    public int Add(LegendCellColumn column);
    public int Add(string headerText);
    public int Add(string name, string headerText);
    public int Add(string name, string headerText, ContentAlignment alignment);
    public void Insert(int index, LegendCellColumn column);
    public void Insert(int index, string headerText);
    public void Insert(int index, string name, string headerText);
    public void Insert(int index, string name, string headerText, ContentAlignment alignment);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    internal virtual void Invalidate();
    public LegendCellColumn FindByName(string name);
}
internal enum Microsoft.Reporting.Map.WebForms.LegendCellColumnType : Enum {
    public int value__;
    public static LegendCellColumnType Text;
    public static LegendCellColumnType Symbol;
}
internal enum Microsoft.Reporting.Map.WebForms.LegendCellType : Enum {
    public int value__;
    public static LegendCellType Text;
    public static LegendCellType Symbol;
    public static LegendCellType Image;
}
[DefaultMemberAttribute("Item")]
[DescriptionAttribute("Legend collection.")]
internal class Microsoft.Reporting.Map.WebForms.LegendCollection : NamedCollection {
    private Legend Item { get; private set; }
    private Legend Item { get; private set; }
    public Legend Item { get; public set; }
    internal LegendCollection(NamedElement parent, CommonElements common);
    protected virtual void OnClearComplete();
    internal virtual void Invalidate();
    public Legend Add(string name);
    public int Add(Legend value);
    public void Remove(Legend value);
    private Legend get_Item(int index);
    private void set_Item(int index, Legend value);
    private Legend get_Item(string name);
    private void set_Item(string name, Legend value);
    public Legend get_Item(object obj);
    public void set_Item(object obj, Legend value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
}
internal class Microsoft.Reporting.Map.WebForms.LegendConverter : NoNameExpandableObjectConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
[DescriptionAttribute("Map legend item.")]
[DefaultPropertyAttribute("Name")]
internal class Microsoft.Reporting.Map.WebForms.LegendItem : NamedElement {
    private Color color;
    private string image;
    private string seriesName;
    private int seriesPointIndex;
    private string toolTip;
    private string href;
    private string attributes;
    internal LegendItemStyle itemStyle;
    internal Color borderColor;
    internal int borderWidth;
    internal int pathWidth;
    internal MapDashStyle pathLineStyle;
    internal MapDashStyle borderStyle;
    internal int shadowOffset;
    internal Color shadowColor;
    internal MarkerStyle markerStyle;
    internal string markerImage;
    internal Color markerImageTranspColor;
    internal Color markerColor;
    internal Color markerBorderColor;
    [BindableAttribute("False")]
[BrowsableAttribute("False")]
public Legend Legend;
    private int markerBorderWidth;
    private LegendCellCollection cells;
    private LegendSeparatorType separator;
    private Color separatorColor;
    internal bool clearTempCells;
    private string text;
    private MapHatchStyle hatchStyle;
    internal Color imageTranspColor;
    private GradientType gradientType;
    private Color secondaryColor;
    private MapImageAlign imageAlign;
    private MapImageWrapMode imageWrapMode;
    private bool visible;
    private float markerWidth;
    private float markerHeight;
    private MapDashStyle markerBorderStyle;
    private GradientType markerGradientType;
    private Color markerSecondaryColor;
    private MapHatchStyle markerHatchStyle;
    internal bool automaticallyAdded;
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Text")]
[NotifyParentPropertyAttribute("True")]
public string Text { get; public set; }
    [BrowsableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Name")]
[SRCategoryAttribute("CategoryAttribute_Data")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Background")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Color")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
public Color Color { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Background")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Image")]
[DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
public string Image { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Microsoft.Reporting.Map.WebForms.LegendItemStyle", "Shape")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_ItemStyle")]
[NotifyParentPropertyAttribute("True")]
public LegendItemStyle ItemStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_BorderColor")]
[NotifyParentPropertyAttribute("True")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Background")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_HatchStyle")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
public MapHatchStyle HatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Background")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_ImageTranspColor")]
public Color ImageTranspColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Background")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_GradientType")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.GradientEditor", "System.Drawing.Design.UITypeEditor")]
public GradientType GradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Background")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_SecondaryColor")]
[NotifyParentPropertyAttribute("True")]
public Color SecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Background")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_ImageAlign")]
[NotifyParentPropertyAttribute("True")]
public MapImageAlign ImageAlign { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Background")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_ImageWrapMode")]
[NotifyParentPropertyAttribute("True")]
public MapImageWrapMode ImageWrapMode { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_BorderWidth")]
[NotifyParentPropertyAttribute("True")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("3")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_PathWidth")]
[NotifyParentPropertyAttribute("True")]
public int PathWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_PathLineStyle")]
[NotifyParentPropertyAttribute("True")]
public MapDashStyle PathLineStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Visible")]
[NotifyParentPropertyAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Marker")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerBorderWidth")]
public int MarkerBorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_BorderStyle")]
[NotifyParentPropertyAttribute("True")]
public MapDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_ShadowOffset")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("0")]
public int ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "128,0,0,0")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_ShadowColor")]
[NotifyParentPropertyAttribute("True")]
public Color ShadowColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Marker")]
[BindableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerStyle")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public MarkerStyle MarkerStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Marker")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerWidth")]
[DefaultValueAttribute("7")]
public float MarkerWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Marker")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerHeight")]
[DefaultValueAttribute("7")]
public float MarkerHeight { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Marker")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerImage")]
[RefreshPropertiesAttribute("1")]
public string MarkerImage { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Marker")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerImageTranspColor")]
[RefreshPropertiesAttribute("1")]
public Color MarkerImageTranspColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Marker")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerColor")]
[RefreshPropertiesAttribute("1")]
public Color MarkerColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Marker")]
[BindableAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerBorderColor")]
[RefreshPropertiesAttribute("1")]
public Color MarkerBorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Marker")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerBorderStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapDashStyle MarkerBorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Marker")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerGradientType")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.GradientEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType MarkerGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Marker")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerSecondaryColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color MarkerSecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Marker")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MarkerHatchStyle")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapHatchStyle MarkerHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[DefaultValueAttribute("Microsoft.Reporting.Map.WebForms.LegendSeparatorType", "None")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Separator")]
public LegendSeparatorType Separator { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_SeparatorColor")]
public Color SeparatorColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Cells")]
public LegendCellCollection Cells { get; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_AutomaticallyAdded")]
[DefaultValueAttribute("False")]
public bool AutomaticallyAdded { get; public set; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_SeriesName")]
[DefaultValueAttribute("")]
public string SeriesName { get; public set; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_SeriesPointIndex")]
[DefaultValueAttribute("-1")]
public int SeriesPointIndex { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_ToolTip")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_MapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_Href")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_MapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeLegendItem_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    internal CommonElements Common { get; internal set; }
    public LegendItem(string name, Color color, string image);
    public string get_Text();
    public void set_Text(string value);
    protected bool ShouldSerializeText();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public Color get_Color();
    public void set_Color(Color value);
    public string get_Image();
    public void set_Image(string value);
    public LegendItemStyle get_ItemStyle();
    public void set_ItemStyle(LegendItemStyle value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public MapHatchStyle get_HatchStyle();
    public void set_HatchStyle(MapHatchStyle value);
    public Color get_ImageTranspColor();
    public void set_ImageTranspColor(Color value);
    public GradientType get_GradientType();
    public void set_GradientType(GradientType value);
    public Color get_SecondaryColor();
    public void set_SecondaryColor(Color value);
    public MapImageAlign get_ImageAlign();
    public void set_ImageAlign(MapImageAlign value);
    public MapImageWrapMode get_ImageWrapMode();
    public void set_ImageWrapMode(MapImageWrapMode value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public int get_PathWidth();
    public void set_PathWidth(int value);
    public MapDashStyle get_PathLineStyle();
    public void set_PathLineStyle(MapDashStyle value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public int get_MarkerBorderWidth();
    public void set_MarkerBorderWidth(int value);
    public MapDashStyle get_BorderStyle();
    public void set_BorderStyle(MapDashStyle value);
    public int get_ShadowOffset();
    public void set_ShadowOffset(int value);
    public Color get_ShadowColor();
    public void set_ShadowColor(Color value);
    public MarkerStyle get_MarkerStyle();
    public void set_MarkerStyle(MarkerStyle value);
    public float get_MarkerWidth();
    public void set_MarkerWidth(float value);
    public float get_MarkerHeight();
    public void set_MarkerHeight(float value);
    public string get_MarkerImage();
    public void set_MarkerImage(string value);
    public Color get_MarkerImageTranspColor();
    public void set_MarkerImageTranspColor(Color value);
    public Color get_MarkerColor();
    public void set_MarkerColor(Color value);
    public Color get_MarkerBorderColor();
    public void set_MarkerBorderColor(Color value);
    public MapDashStyle get_MarkerBorderStyle();
    public void set_MarkerBorderStyle(MapDashStyle value);
    public GradientType get_MarkerGradientType();
    public void set_MarkerGradientType(GradientType value);
    public Color get_MarkerSecondaryColor();
    public void set_MarkerSecondaryColor(Color value);
    public MapHatchStyle get_MarkerHatchStyle();
    public void set_MarkerHatchStyle(MapHatchStyle value);
    public LegendSeparatorType get_Separator();
    public void set_Separator(LegendSeparatorType value);
    public Color get_SeparatorColor();
    public void set_SeparatorColor(Color value);
    public LegendCellCollection get_Cells();
    public bool get_AutomaticallyAdded();
    public void set_AutomaticallyAdded(bool value);
    public string get_SeriesName();
    public void set_SeriesName(string value);
    public int get_SeriesPointIndex();
    public void set_SeriesPointIndex(int value);
    public void set_ToolTip(string value);
    public string get_ToolTip();
    public void set_Href(string value);
    public string get_Href();
    public void set_MapAreaAttributes(string value);
    public string get_MapAreaAttributes();
    internal void AddAutomaticCells(Legend legend, SizeF singleWCharacterSize);
    internal SizeF MeasureLegendItem(MapGraphics graph, int fontSizeReducedBy);
    internal string ReplaceKeywords(string strOriginal);
    internal virtual void Invalidate();
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
}
[DefaultMemberAttribute("Item")]
[DescriptionAttribute("Legend items collection.")]
internal class Microsoft.Reporting.Map.WebForms.LegendItemsCollection : NamedCollection {
    internal Legend Legend;
    private LegendItem Item { get; private set; }
    private LegendItem Item { get; private set; }
    public LegendItem Item { get; public set; }
    internal LegendItemsCollection(NamedElement parent, CommonElements common);
    public void Insert(int index, Color color, string text);
    public void Insert(int index, string image, string text);
    public LegendItem Add(string name);
    public int Add(LegendItem item);
    private LegendItem get_Item(int index);
    private void set_Item(int index, LegendItem value);
    private LegendItem get_Item(string name);
    private void set_Item(string name, LegendItem value);
    public LegendItem get_Item(object obj);
    public void set_Item(object obj, LegendItem value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    internal virtual void Invalidate();
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnClearComplete();
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
}
internal enum Microsoft.Reporting.Map.WebForms.LegendItemStyle : Enum {
    public int value__;
    public static LegendItemStyle Shape;
    public static LegendItemStyle Path;
    public static LegendItemStyle Symbol;
}
internal enum Microsoft.Reporting.Map.WebForms.LegendSeparatorType : Enum {
    public int value__;
    public static LegendSeparatorType None;
    public static LegendSeparatorType Line;
    public static LegendSeparatorType ThickLine;
    public static LegendSeparatorType DoubleLine;
    public static LegendSeparatorType DashLine;
    public static LegendSeparatorType DotLine;
    public static LegendSeparatorType GradientLine;
    public static LegendSeparatorType ThickGradientLine;
}
internal enum Microsoft.Reporting.Map.WebForms.LegendStyle : Enum {
    public int value__;
    public static LegendStyle Column;
    public static LegendStyle Row;
    public static LegendStyle Table;
}
internal enum Microsoft.Reporting.Map.WebForms.LegendTableStyle : Enum {
    public int value__;
    public static LegendTableStyle Auto;
    public static LegendTableStyle Wide;
    public static LegendTableStyle Tall;
}
internal class Microsoft.Reporting.Map.WebForms.LinearLabelStyle : MapObject {
    private string formatStr;
    private bool visible;
    private Placement placement;
    private Font font;
    private FontUnit fontUnit;
    private float fontAngle;
    private Color textColor;
    private double interval;
    private double intervalOffset;
    private bool showEndLabels;
    private float scaleOffset;
    private string formatString;
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearLabelStyle_Visible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearLabelStyle_Placement")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Placement Placement { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearLabelStyle_Font")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 14pt")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearLabelStyle_FontUnit")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FontUnit FontUnit { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearLabelStyle_FontAngle")]
[DefaultValueAttribute("0")]
public float FontAngle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearLabelStyle_TextColor")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLinearLabelStyle_Interval")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DoubleAutoValueConverter")]
[DefaultValueAttribute("не число")]
public double Interval { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLinearLabelStyle_IntervalOffset")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DoubleAutoValueConverter")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("не число")]
public double IntervalOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearLabelStyle_ShowEndLabels")]
[DefaultValueAttribute("True")]
public bool ShowEndLabels { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearLabelStyle_DistanceFromScale")]
[DefaultValueAttribute("2")]
public float DistanceFromScale { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearLabelStyle_FormatString")]
[LocalizableAttribute("True")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.LabelFormatEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
public string FormatString { get; public set; }
    public LinearLabelStyle(object parent);
    public bool get_Visible();
    public void set_Visible(bool value);
    public Placement get_Placement();
    public void set_Placement(Placement value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public FontUnit get_FontUnit();
    public void set_FontUnit(FontUnit value);
    public float get_FontAngle();
    public void set_FontAngle(float value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public double get_Interval();
    public void set_Interval(double value);
    public double get_IntervalOffset();
    public void set_IntervalOffset(double value);
    public bool get_ShowEndLabels();
    public void set_ShowEndLabels(bool value);
    public float get_DistanceFromScale();
    public void set_DistanceFromScale(float value);
    public string get_FormatString();
    public void set_FormatString(string value);
    internal string GetFormatStr();
}
internal class Microsoft.Reporting.Map.WebForms.LinearMajorTickMark : TickMark {
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearMajorTickMark_Shape")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MarkerStyle Shape { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearMajorTickMark_Length")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("15")]
public float Length { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearMajorTickMark_Width")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("4")]
public float Width { get; public set; }
    public LinearMajorTickMark(object parent);
    public virtual MarkerStyle get_Shape();
    public virtual void set_Shape(MarkerStyle value);
    public virtual float get_Length();
    public virtual void set_Length(float value);
    public virtual float get_Width();
    public virtual void set_Width(float value);
}
internal class Microsoft.Reporting.Map.WebForms.LinearMinorTickMark : TickMark {
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearMinorTickMark_Shape")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MarkerStyle Shape { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearMinorTickMark_Length")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("9")]
public float Length { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearMinorTickMark_Width")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("3")]
public float Width { get; public set; }
    public LinearMinorTickMark(object parent);
    public virtual MarkerStyle get_Shape();
    public virtual void set_Shape(MarkerStyle value);
    public virtual float get_Length();
    public virtual void set_Length(float value);
    public virtual float get_Width();
    public virtual void set_Width(float value);
}
internal class Microsoft.Reporting.Map.WebForms.LinearPinLabel : MapObject {
    private string text;
    private Font font;
    private FontUnit fontUnit;
    private Color textColor;
    private Placement placement;
    private float fontAngle;
    private float scaleOffset;
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLinearPinLabel_Text")]
[LocalizableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearPinLabel_Font")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 12pt")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearPinLabel_FontUnit")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FontUnit FontUnit { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearPinLabel_TextColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearPinLabel_Placement")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Placement Placement { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearPinLabel_FontAngle")]
[DefaultValueAttribute("0")]
public float FontAngle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearPinLabel_DistanceFromScale")]
[DefaultValueAttribute("2")]
public float DistanceFromScale { get; public set; }
    public LinearPinLabel(object parent);
    public string get_Text();
    public void set_Text(string value);
    public Font get_Font();
    public void set_Font(Font value);
    public FontUnit get_FontUnit();
    public void set_FontUnit(FontUnit value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public Placement get_Placement();
    public void set_Placement(Placement value);
    public float get_FontAngle();
    public void set_FontAngle(float value);
    public float get_DistanceFromScale();
    public void set_DistanceFromScale(float value);
}
internal class Microsoft.Reporting.Map.WebForms.LinearPointer : MapObject {
    private double position;
    internal bool dragging;
    private LinearPointerType type;
    private Placement placement;
    private float width;
    private MarkerStyle markerStyle;
    private float markerLength;
    private MapCursor cursor;
    private float distanceFromScale;
    private string image;
    private Color imageTransColor;
    private Point imageOrigin;
    private double val;
    private bool snappingEnabled;
    private double snappingInterval;
    private string toolTip;
    private string href;
    private string mapAreaAttributes;
    private bool interactive;
    private bool visible;
    private float shadowOffset;
    private Color borderColor;
    private MapDashStyle borderStyle;
    private int borderWidth;
    private Color fillColor;
    private Color fillSecondaryColor;
    private MapHatchStyle fillHatchStyle;
    private GradientType fillGradientType;
    [SRCategoryAttribute("CategoryAttribute_TypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_Type")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public LinearPointerType Type { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_Placement")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Placement Placement { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_Width")]
[DefaultValueAttribute("20")]
public float Width { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_TypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_MarkerStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MarkerStyle MarkerStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_TypeSpecific")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_MarkerLength")]
[DefaultValueAttribute("20")]
public float MarkerLength { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_Cursor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapCursor Cursor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_DistanceFromScale")]
[DefaultValueAttribute("0")]
public float DistanceFromScale { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_Image")]
[DefaultValueAttribute("")]
public string Image { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_ImageTransColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageTransColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_ImageOrigin")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.EmptyPointConverter")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
public Point ImageOrigin { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_Value")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("не число")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DoubleNanValueConverter")]
public double Value { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_SnappingEnabled")]
[DefaultValueAttribute("False")]
public bool SnappingEnabled { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_SnappingInterval")]
[DefaultValueAttribute("0")]
public double SnappingInterval { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_ToolTip")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_Href")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_Interactive")]
[DefaultValueAttribute("True")]
public bool Interactive { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_Visible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_ShadowOffset")]
[DefaultValueAttribute("2")]
public float ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_BorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_BorderStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_BorderWidth")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_FillColor")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
public Color FillColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_FillSecondaryColor")]
[DefaultValueAttribute("System.Drawing.Color", "Red")]
public Color FillSecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_FillHatchStyle")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapHatchStyle FillHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearPointer_FillGradientType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType FillGradientType { get; public set; }
    internal double Position { get; internal set; }
    internal CommonElements Common { get; internal set; }
    public LinearPointer(object parent);
    public LinearPointerType get_Type();
    public void set_Type(LinearPointerType value);
    public Placement get_Placement();
    public void set_Placement(Placement value);
    public float get_Width();
    public void set_Width(float value);
    public MarkerStyle get_MarkerStyle();
    public void set_MarkerStyle(MarkerStyle value);
    public float get_MarkerLength();
    public void set_MarkerLength(float value);
    public MapCursor get_Cursor();
    public void set_Cursor(MapCursor value);
    public virtual float get_DistanceFromScale();
    public virtual void set_DistanceFromScale(float value);
    public virtual string get_Image();
    public virtual void set_Image(string value);
    public virtual Color get_ImageTransColor();
    public virtual void set_ImageTransColor(Color value);
    public virtual Point get_ImageOrigin();
    public virtual void set_ImageOrigin(Point value);
    public virtual double get_Value();
    public virtual void set_Value(double value);
    public virtual bool get_SnappingEnabled();
    public virtual void set_SnappingEnabled(bool value);
    public double get_SnappingInterval();
    public void set_SnappingInterval(double value);
    public virtual string get_ToolTip();
    public virtual void set_ToolTip(string value);
    public string get_Href();
    public void set_Href(string value);
    public string get_MapAreaAttributes();
    public void set_MapAreaAttributes(string value);
    public virtual bool get_Interactive();
    public virtual void set_Interactive(bool value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public float get_ShadowOffset();
    public void set_ShadowOffset(float value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public MapDashStyle get_BorderStyle();
    public void set_BorderStyle(MapDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public virtual Color get_FillColor();
    public virtual void set_FillColor(Color value);
    public virtual Color get_FillSecondaryColor();
    public virtual void set_FillSecondaryColor(Color value);
    public virtual MapHatchStyle get_FillHatchStyle();
    public virtual void set_FillHatchStyle(MapHatchStyle value);
    public virtual GradientType get_FillGradientType();
    public virtual void set_FillGradientType(GradientType value);
    internal void Render(MapGraphics g);
    internal void DrawImage(MapGraphics g, bool drawShadow);
    internal MarkerStyleAttrib GetMarkerStyleAttrib(MapGraphics g);
    internal float CalculateMarkerDistance();
    internal GraphicsPath GetPointerPath(MapGraphics g);
    internal GraphicsPath GetShadowPath(MapGraphics g);
    public ZoomPanel GetGauge();
    internal LinearScale GetScale();
    internal double get_Position();
    internal void set_Position(double value);
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
    internal virtual void DragTo(int x, int y, PointF refPoint, bool dragging);
    internal virtual void RenderShadow(MapGraphics g);
    internal virtual void BeginInit();
    internal virtual void EndInit();
    protected virtual void OnDispose();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IToolTipProvider.GetToolTip();
}
internal enum Microsoft.Reporting.Map.WebForms.LinearPointerType : Enum {
    public int value__;
    public static LinearPointerType Marker;
    public static LinearPointerType Bar;
    public static LinearPointerType Thermometer;
}
internal class Microsoft.Reporting.Map.WebForms.LinearScale : MapObject {
    private LinearLabelStyle labelStyle;
    private float position;
    private LinearMajorTickMark majorTickMark;
    private LinearMinorTickMark minorTickMark;
    internal LinearSpecialPosition minimumPin;
    internal LinearSpecialPosition maximumPin;
    internal float _startPosition;
    internal float _endPosition;
    internal float _sweepPosition;
    internal float coordSystemRatio;
    internal ArrayList markers;
    internal ArrayList labels;
    internal static double MaxMajorTickMarks;
    internal bool staticRendering;
    private double minimum;
    private double maximum;
    private double multiplier;
    private double interval;
    private double intervalOffset;
    private string toolTip;
    private string href;
    private bool tickMarksOnTop;
    private bool reversed;
    private bool logarithmic;
    private double logarithmicBase;
    private bool visible;
    private float width;
    private Color borderColor;
    private MapDashStyle borderStyle;
    private int borderWidth;
    private Color fillColor;
    private GradientType fillGradientType;
    private Color fillSecondaryColor;
    private MapHatchStyle fillHatchStyle;
    private float shadowOffset;
    [SRCategoryAttribute("CategoryAttribute_LabelsAndTickMarks")]
[DescriptionAttribute("The label attributes of this scale.")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
internal LinearLabelStyle LabelStyle { get; internal set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_Position")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.FloatAutoValueConverter")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("50")]
public float Position { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_StartMargin")]
[DefaultValueAttribute("8")]
public float StartMargin { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_EndMargin")]
[DefaultValueAttribute("8")]
public float EndMargin { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_LabelsAndTickMarks")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_MajorTickMark")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public LinearMajorTickMark MajorTickMark { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_LabelsAndTickMarks")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_MinorTickMark")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public LinearMinorTickMark MinorTickMark { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_MinimumPin")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public LinearSpecialPosition MinimumPin { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_MaximumPin")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public LinearSpecialPosition MaximumPin { get; public set; }
    internal ZoomPanel ParentGauge { get; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_Minimum")]
[DefaultValueAttribute("0")]
public double Minimum { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_Maximum")]
[DefaultValueAttribute("100")]
public double Maximum { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_Multiplier")]
[DefaultValueAttribute("1")]
public double Multiplier { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_Interval")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DoubleAutoValueConverter")]
[DefaultValueAttribute("не число")]
public double Interval { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_IntervalOffset")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DoubleAutoValueConverter")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("не число")]
public double IntervalOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_ToolTip")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_Href")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_LabelsAndTickMarks")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_TickMarksOnTop")]
[DefaultValueAttribute("False")]
public bool TickMarksOnTop { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_Reversed")]
[DefaultValueAttribute("False")]
public bool Reversed { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_Logarithmic")]
[DefaultValueAttribute("False")]
public bool Logarithmic { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_LogarithmicBase")]
[DefaultValueAttribute("10")]
public double LogarithmicBase { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_Visible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_Width")]
[DefaultValueAttribute("5")]
public float Width { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_BorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_BorderStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_BorderWidth")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_FillColor")]
[DefaultValueAttribute("System.Drawing.Color", "CornflowerBlue")]
public Color FillColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_FillGradientType")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.GradientEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType FillGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_FillSecondaryColor")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
public Color FillSecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_FillHatchStyle")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapHatchStyle FillHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearScale_ShadowOffset")]
[DefaultValueAttribute("1")]
public float ShadowOffset { get; public set; }
    internal double MinimumLog { get; }
    internal float StartPosition { get; }
    internal float EndPosition { get; }
    internal float SweepPosition { get; }
    public LinearScale(object parent);
    internal LinearLabelStyle get_LabelStyle();
    internal void set_LabelStyle(LinearLabelStyle value);
    public float get_Position();
    public void set_Position(float value);
    public float get_StartMargin();
    public void set_StartMargin(float value);
    public float get_EndMargin();
    public void set_EndMargin(float value);
    public LinearMajorTickMark get_MajorTickMark();
    public void set_MajorTickMark(LinearMajorTickMark value);
    public LinearMinorTickMark get_MinorTickMark();
    public void set_MinorTickMark(LinearMinorTickMark value);
    public LinearSpecialPosition get_MinimumPin();
    public void set_MinimumPin(LinearSpecialPosition value);
    public LinearSpecialPosition get_MaximumPin();
    public void set_MaximumPin(LinearSpecialPosition value);
    public ZoomPanel GetGauge();
    private GraphicsPath GetBarPath(float barOffsetInside, float barOffsetOutside);
    private void SetScaleHitTestPath(MapGraphics g);
    internal GraphicsPath GetShadowPath();
    private void RenderBar(MapGraphics g);
    internal void DrawTickMark(MapGraphics g, CustomTickMark tickMark, double value, float offset);
    internal LinearLabelStyle GetLabelStyle();
    private void DrawLabel(Placement placement, string labelStr, double value, float labelPos, float rotateLabelAngle, Font font, Color color, FontUnit fontUnit);
    private void RenderLabels(MapGraphics g);
    internal void DrawSpecialPosition(MapGraphics g, SpecialPosition label, float angle);
    internal void RenderStaticElements(MapGraphics g);
    internal void RenderDynamicElements(MapGraphics g);
    protected bool IsReversed();
    protected PointF GetPoint(float position, float offset);
    internal double GetValue(PointF c, PointF p);
    internal ZoomPanel get_ParentGauge();
    public double get_Minimum();
    public void set_Minimum(double value);
    public double get_Maximum();
    public void set_Maximum(double value);
    public double get_Multiplier();
    public void set_Multiplier(double value);
    public double get_Interval();
    public void set_Interval(double value);
    public double get_IntervalOffset();
    public void set_IntervalOffset(double value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public string get_Href();
    public void set_Href(string value);
    public bool get_TickMarksOnTop();
    public void set_TickMarksOnTop(bool value);
    public bool get_Reversed();
    public void set_Reversed(bool value);
    public bool get_Logarithmic();
    public void set_Logarithmic(bool value);
    public double get_LogarithmicBase();
    public void set_LogarithmicBase(double value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public virtual float get_Width();
    public virtual void set_Width(float value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public MapDashStyle get_BorderStyle();
    public void set_BorderStyle(MapDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public GradientType get_FillGradientType();
    public void set_FillGradientType(GradientType value);
    public Color get_FillSecondaryColor();
    public void set_FillSecondaryColor(Color value);
    public MapHatchStyle get_FillHatchStyle();
    public void set_FillHatchStyle(MapHatchStyle value);
    public float get_ShadowOffset();
    public void set_ShadowOffset(float value);
    internal double get_MinimumLog();
    private float GetMaxOffset(ZoomPanel gauge);
    internal float get_StartPosition();
    internal float get_EndPosition();
    internal float get_SweepPosition();
    internal bool GetReversed();
    internal Brush GetLightBrush(MapGraphics g, CustomTickMark tickMark, Color fillColor, GraphicsPath path);
    internal void DrawTickMark(MapGraphics g, CustomTickMark tickMark, double value, float offset, Matrix matrix);
    internal void DrawTickMarkImage(MapGraphics g, CustomTickMark tickMark, Matrix matrix, PointF centerPoint, bool drawShadow);
    internal float GetTickMarkOffset(CustomTickMark tickMark);
    internal void RenderTicks(MapGraphics g, TickMark tickMark, double interval, double max, double min, double intOffset, bool forceLinear);
    internal void RenderGrid(MapGraphics g);
    internal float GetOffsetLabelPos(Placement placement, float scaleOffset, float scalePosition);
    internal Font GetResizedFont(Font font, FontUnit fontUnit);
    internal void RenderPins(MapGraphics g);
    protected void InvalidateEndPosition();
    protected void InvalidateSweepPosition();
    internal virtual double GetValueLimit(double value, bool snapEnable, double snapInterval);
    internal virtual double GetValueLimit(double value);
    internal double GetIntervalOffset(IntervalTypes type);
    internal double GetInterval(IntervalTypes type);
    internal double GetNextPosition(double position, double interval, bool forceLinear);
    protected virtual double GetValueAgainstScaleRatio(double value);
    protected virtual double GetValueByRatio(float ratio);
    protected float GetPositionFromValue(double value, float startPos, float endPos);
    internal virtual float GetPositionFromValue(double value);
    internal virtual double GetValueFromPosition(float position);
    internal virtual PointF GetPointRel(double value, float offset);
    internal virtual PointF GetPointAbs(double value, float offset);
    internal virtual void BeginInit();
    internal virtual void EndInit();
    internal virtual void Invalidate();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IToolTipProvider.GetToolTip();
}
internal class Microsoft.Reporting.Map.WebForms.LinearSpecialPosition : SpecialPosition {
    private LinearPinLabel pinLinearLabel;
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeLinearSpecialPosition_LabelStyle")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public LinearPinLabel LabelStyle { get; public set; }
    public LinearSpecialPosition(object parent);
    public LinearPinLabel get_LabelStyle();
    public void set_LabelStyle(LinearPinLabel value);
}
internal class Microsoft.Reporting.Map.WebForms.LoadTilesHandler : MulticastDelegate {
    public LoadTilesHandler(object object, IntPtr method);
    public virtual Image[0...,0...] Invoke(Layer layer, String[0...,0...] tileUrls);
    public virtual IAsyncResult BeginInvoke(Layer layer, String[0...,0...] tileUrls, AsyncCallback callback, object object);
    public virtual Image[0...,0...] EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.Map.WebForms.LocationConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal class Microsoft.Reporting.Map.WebForms.LongitudeNormalizer : object {
    private static double MaxLongitude;
    private SqlGeographyBuilder Builder;
    public SqlGeography Result { get; }
    private double GetNormalizedLatitude(double longitude);
    public SqlGeography get_Result();
    public sealed virtual void AddLine(double latitude, double longitude, Nullable`1<double> z, Nullable`1<double> m);
    public sealed virtual void BeginFigure(double latitude, double longitude, Nullable`1<double> z, Nullable`1<double> m);
    public sealed virtual void BeginGeography(OpenGisGeographyType type);
    public sealed virtual void EndFigure();
    public sealed virtual void EndGeography();
    public sealed virtual void SetSrid(int srid);
}
[DefaultPropertyAttribute("ToolTip")]
[DescriptionAttribute("Represent a custom map area element, that has a user-defined shape and dimensions.")]
internal class Microsoft.Reporting.Map.WebForms.MapArea : object {
    private string toolTip;
    private string href;
    private string attributes;
    private Int32[] coordinates;
    private string name;
    private bool custom;
    private MapAreaShape shape;
    private object mapAreaTag;
    [BrowsableAttribute("False")]
[DescriptionAttribute("Indicates that the map area is custom.")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
internal bool Custom { get; internal set; }
    [SRCategoryAttribute("CategoryAttribute_Shape")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_Coordinates")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.MapAreaCoordinatesConverter")]
public Int32[] Coordinates { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Shape")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_Shape")]
[DefaultValueAttribute("Microsoft.Reporting.Map.WebForms.MapAreaShape", "Rectangle")]
public MapAreaShape Shape { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_Name")]
[DefaultValueAttribute("Map Area")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_MapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_ToolTip")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_MapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_Href")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[SRCategoryAttribute("CategoryAttribute_MapArea")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapArea_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    private object Microsoft.Reporting.Map.WebForms.IMapAreaAttributes.Tag { get; private set; }
    internal string GetTag();
    internal bool get_Custom();
    internal void set_Custom(bool value);
    public Int32[] get_Coordinates();
    public void set_Coordinates(Int32[] value);
    public MapAreaShape get_Shape();
    public void set_Shape(MapAreaShape value);
    public string get_Name();
    public void set_Name(string value);
    public sealed virtual void set_ToolTip(string value);
    public sealed virtual string get_ToolTip();
    public sealed virtual void set_Href(string value);
    public sealed virtual string get_Href();
    public sealed virtual void set_MapAreaAttributes(string value);
    public sealed virtual string get_MapAreaAttributes();
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IMapAreaAttributes.set_Tag(object value);
    private sealed virtual override object Microsoft.Reporting.Map.WebForms.IMapAreaAttributes.get_Tag();
}
[DefaultMemberAttribute("Item")]
[DescriptionAttribute("Map areas collection.")]
internal class Microsoft.Reporting.Map.WebForms.MapAreaCollection : object {
    internal ArrayList array;
    public MapArea Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public MapArea get_Item(int index);
    public void set_Item(int index, MapArea value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual int Add(object value);
    public void Insert(int index, MapArea value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public int Add(string toolTip, string href, string attr, GraphicsPath path, object tag);
    public int Add(string toolTip, string href, string attr, GraphicsPath path);
    public int Add(string toolTip, string href, string attr, Rectangle rect);
    public int Add(MapAreaShape shape, string toolTip, string href, string attr, Int32[] coord);
    public void Insert(int index, string toolTip, string href, string attr, GraphicsPath path);
    internal void Insert(int index, string toolTip, string href, string attr, GraphicsPath path, bool absCoordinates, MapGraphics graph);
    private void InsertSubpath(int index, string toolTip, string href, string attr, GraphicsPath path, bool absCoordinates, MapGraphics graph);
    public void Insert(int index, string toolTip, string href, string attr, RectangleF rect);
    public void Insert(int index, MapAreaShape shape, string toolTip, string href, string attr, Single[] coord);
    internal void RemoveNonCustom();
}
internal class Microsoft.Reporting.Map.WebForms.MapAreaCoordinatesConverter : ArrayConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal enum Microsoft.Reporting.Map.WebForms.MapAreaShape : Enum {
    public int value__;
    public static MapAreaShape Rectangle;
    public static MapAreaShape Circle;
    public static MapAreaShape Polygon;
}
internal enum Microsoft.Reporting.Map.WebForms.MapAreaType : Enum {
    public int value__;
    public static MapAreaType URL;
    public static MapAreaType Bookmark;
    public static MapAreaType Report;
}
internal class Microsoft.Reporting.Map.WebForms.MapBounds : object {
    public MapPoint MinimumPoint;
    public MapPoint MaximumPoint;
    public MapBounds(MapPoint minimumPoint, MapPoint maximumPoint);
    public static bool Intersect(MapBounds a, MapBounds b);
}
internal enum Microsoft.Reporting.Map.WebForms.MapColorPalette : Enum {
    public int value__;
    public static MapColorPalette Random;
    public static MapColorPalette SemiTransparent;
    public static MapColorPalette Light;
    public static MapColorPalette Dundas;
    public static MapColorPalette Pacific;
}
[DisplayNameAttribute("Map")]
[DescriptionAttribute("Map for ASP.NET is a fully managed .NET control that lets you add fantastic looking maps to your applications with ease.")]
[ToolboxBitmapAttribute("Microsoft.Reporting.Map.WebForms.MapControl", "Map.ico")]
internal class Microsoft.Reporting.Map.WebForms.MapControl : object {
    internal static string ResKeyFormat;
    private static string jsFilename;
    private static string imagemapExt;
    internal MapCore mapCore;
    internal string webFormDocumentURL;
    internal string applicationDocumentURL;
    internal static ITypeDescriptorContext controlCurrentContext;
    internal bool sessionExpired;
    internal bool generatingCachedContent;
    internal static string productID;
    private bool doNotDispose;
    private bool isCallback;
    private Color backColor;
    private bool enabled;
    [CompilerGeneratedAttribute]
private DataBindEventHandler BeforeDataBind;
    [CompilerGeneratedAttribute]
private DataBindEventHandler AfterDataBind;
    [CompilerGeneratedAttribute]
private EventHandler BeforeApplyingRules;
    [CompilerGeneratedAttribute]
private EventHandler AllRulesApplied;
    public FormatNumberHandler FormatNumberHandler;
    private int width;
    private int height;
    [CompilerGeneratedAttribute]
private MapPaintEvent PrePaint;
    [CompilerGeneratedAttribute]
private MapPaintEvent PostPaint;
    [CompilerGeneratedAttribute]
private ElementEvent ElementAdded;
    [CompilerGeneratedAttribute]
private ElementEvent ElementRemoved;
    [CompilerGeneratedAttribute]
private ClickEvent Click;
    [CompilerGeneratedAttribute]
private CallbackEvent Callback;
    private string resourceKey;
    private bool autoRunWizard;
    [SRCategoryAttribute("CategoryAttribute_Groups")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_GroupFields")]
[DesignerSerializationVisibilityAttribute("2")]
public FieldCollection GroupFields { get; }
    [SRCategoryAttribute("CategoryAttribute_Paths")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_PathFields")]
[DesignerSerializationVisibilityAttribute("2")]
public FieldCollection PathFields { get; }
    [SRCategoryAttribute("CategoryAttribute_Shapes")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_ShapeFields")]
[DesignerSerializationVisibilityAttribute("2")]
public FieldCollection ShapeFields { get; }
    [SRCategoryAttribute("CategoryAttribute_Symbols")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_SymbolFields")]
[DesignerSerializationVisibilityAttribute("2")]
public FieldCollection SymbolFields { get; }
    [SRCategoryAttribute("CategoryAttribute_Groups")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_GroupRules")]
[DesignerSerializationVisibilityAttribute("2")]
public GroupRuleCollection GroupRules { get; }
    [SRCategoryAttribute("CategoryAttribute_Shapes")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_ShapeRules")]
[DesignerSerializationVisibilityAttribute("2")]
public ShapeRuleCollection ShapeRules { get; }
    [SRCategoryAttribute("CategoryAttribute_Paths")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_PathRules")]
[DesignerSerializationVisibilityAttribute("2")]
public PathRuleCollection PathRules { get; }
    [SRCategoryAttribute("CategoryAttribute_Symbols")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_SymbolRules")]
[DesignerSerializationVisibilityAttribute("2")]
public SymbolRuleCollection SymbolRules { get; }
    [SRCategoryAttribute("CategoryAttribute_Groups")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_Groups")]
[DesignerSerializationVisibilityAttribute("2")]
public GroupCollection Groups { get; }
    [SRCategoryAttribute("CategoryAttribute_Layers")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_Layers")]
[DesignerSerializationVisibilityAttribute("2")]
public LayerCollection Layers { get; }
    [SRCategoryAttribute("CategoryAttribute_Shapes")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_Shapes")]
[DesignerSerializationVisibilityAttribute("2")]
public ShapeCollection Shapes { get; }
    [SRCategoryAttribute("CategoryAttribute_Paths")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_Paths")]
[DesignerSerializationVisibilityAttribute("2")]
public PathCollection Paths { get; }
    [SRCategoryAttribute("CategoryAttribute_Symbols")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_Shapes")]
[DesignerSerializationVisibilityAttribute("2")]
public SymbolCollection Symbols { get; }
    [SRCategoryAttribute("CategoryAttribute_Panels")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_Images")]
[DesignerSerializationVisibilityAttribute("2")]
public MapImageCollection Images { get; }
    [SRCategoryAttribute("CategoryAttribute_Panels")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_Labels")]
[DesignerSerializationVisibilityAttribute("2")]
public MapLabelCollection Labels { get; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_MapControl")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_NamedImages")]
[DesignerSerializationVisibilityAttribute("0")]
public NamedImageCollection NamedImages { get; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_DataBindingRules")]
[DesignerSerializationVisibilityAttribute("2")]
public DataBindingRulesCollection DataBindingRules { get; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_MapAreas")]
[DesignerSerializationVisibilityAttribute("2")]
public MapAreaCollection MapAreas { get; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_ImageMapEnabled")]
[DefaultValueAttribute("True")]
public bool ImageMapEnabled { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_ShadowIntensity")]
[DefaultValueAttribute("25")]
public float ShadowIntensity { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_AntiAliasing")]
[DefaultValueAttribute("Microsoft.Reporting.Map.WebForms.AntiAliasing", "All")]
public AntiAliasing AntiAliasing { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_TextAntiAliasingQuality")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TextAntiAliasingQuality TextAntiAliasingQuality { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public MapSerializer Serializer { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public CallbackManager CallbackManager { get; }
    [SRCategoryAttribute("CategoryAttribute_ViewState")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_ViewStateContent")]
public SerializationContent ViewStateContent { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_ImageType")]
public ImageType ImageType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_Compression")]
public int Compression { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_ImageUrl")]
[DefaultValueAttribute("TempFiles/MapPic_#SEQ(300,3)")]
public string ImageUrl { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_RenderType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public RenderType RenderType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_ControlPersistence")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ControlPersistence ControlPersistence { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_RenderingImageUrl")]
[DefaultValueAttribute("")]
public string RenderingImageUrl { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public bool IsCallback { get; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_TagAttributes")]
[DefaultValueAttribute("")]
public string TagAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_BorderLineColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color BorderLineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_BorderLineStyle")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapDashStyle BorderLineStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_BorderLineWidth")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("0")]
public int BorderLineWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_Frame")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
public Frame Frame { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Panels")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_Viewport")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DockablePanelConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public Viewport Viewport { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Panels")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_ZoomPanel")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DockablePanelConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public ZoomPanel ZoomPanel { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Panels")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_NavigationPanel")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DockablePanelConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public NavigationPanel NavigationPanel { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Panels")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_DistanceScalePanel")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DockablePanelConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public DistanceScalePanel DistanceScalePanel { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Panels")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_ColorSwatchPanel")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DockablePanelConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public ColorSwatchPanel ColorSwatchPanel { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Panels")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_Legends")]
[DesignerSerializationVisibilityAttribute("2")]
public LegendCollection Legends { get; }
    [SRCategoryAttribute("CategoryAttribute_ParallelsAndMeridians")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_Parallels")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public GridAttributes Parallels { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_ParallelsAndMeridians")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_Meridians")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public GridAttributes Meridians { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_ParallelsAndMeridians")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_GridUnderContent")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("False")]
public bool GridUnderContent { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_Projection")]
[DefaultValueAttribute("Microsoft.Reporting.Map.WebForms.Projection", "Equirectangular")]
public Projection Projection { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_SelectionMarkerColor")]
[DefaultValueAttribute("System.Drawing.Color", "LightBlue")]
public Color SelectionMarkerColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_SelectionBorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color SelectionBorderColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "White")]
public Color BackColor { get; public set; }
    [DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_BackGradientType")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.GradientEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_BackSecondaryColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color BackSecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_BackHatchStyle")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_MapLimits")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public MapLimits MapLimits { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_AutoLimitsIgnoreSymbols")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("False")]
public bool AutoLimitsIgnoreSymbols { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_ProjectionCenter")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.NoNameExpandableObjectConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public ProjectionCenter ProjectionCenter { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_GeographyMode")]
[DefaultValueAttribute("True")]
public bool GeographyMode { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_TileServerTimeout")]
[DefaultValueAttribute("10000")]
public int TileServerTimeout { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_TileServerMaxConnections")]
[DefaultValueAttribute("2")]
public int TileServerMaxConnections { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_VirtualEarth")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_TileCulture")]
[DefaultValueAttribute("System.Globalization.CultureInfo", "Invariant Language (Invariant Country)")]
public CultureInfo TileCulture { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_VirtualEarth")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_TileCacheLevel")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public RequestCacheLevel TileCacheLevel { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_VirtualEarth")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_TileServerAppId")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
unknown string TileServerAppId {public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_ContentCachingEnabled")]
[DefaultValueAttribute("False")]
public bool ContentCachingEnabled { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_ContentCachingTimeout")]
[DefaultValueAttribute("0")]
public double ContentCachingTimeout { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[DefaultValueAttribute("500")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_Width")]
public int Width { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[DefaultValueAttribute("375")]
[SRDescriptionAttribute("DescriptionAttributeMapControl_Height")]
public int Height { get; public set; }
    internal ISelectable SelectedDesignTimeElement { get; internal set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string ResourceKey { get; public set; }
    [DefaultValueAttribute("False")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public bool InternalAutoRunWizard { get; public set; }
    private static MapControl();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public FieldCollection get_GroupFields();
    public FieldCollection get_PathFields();
    public FieldCollection get_ShapeFields();
    public FieldCollection get_SymbolFields();
    public GroupRuleCollection get_GroupRules();
    public ShapeRuleCollection get_ShapeRules();
    public PathRuleCollection get_PathRules();
    public SymbolRuleCollection get_SymbolRules();
    public GroupCollection get_Groups();
    public LayerCollection get_Layers();
    public ShapeCollection get_Shapes();
    public PathCollection get_Paths();
    public SymbolCollection get_Symbols();
    public MapImageCollection get_Images();
    public MapLabelCollection get_Labels();
    public NamedImageCollection get_NamedImages();
    public DataBindingRulesCollection get_DataBindingRules();
    public MapAreaCollection get_MapAreas();
    public bool get_ImageMapEnabled();
    public void set_ImageMapEnabled(bool value);
    public float get_ShadowIntensity();
    public void set_ShadowIntensity(float value);
    public AntiAliasing get_AntiAliasing();
    public void set_AntiAliasing(AntiAliasing value);
    public TextAntiAliasingQuality get_TextAntiAliasingQuality();
    public void set_TextAntiAliasingQuality(TextAntiAliasingQuality value);
    public MapSerializer get_Serializer();
    public CallbackManager get_CallbackManager();
    public SerializationContent get_ViewStateContent();
    public void set_ViewStateContent(SerializationContent value);
    public ImageType get_ImageType();
    public void set_ImageType(ImageType value);
    public int get_Compression();
    public void set_Compression(int value);
    public string get_ImageUrl();
    public void set_ImageUrl(string value);
    public RenderType get_RenderType();
    public void set_RenderType(RenderType value);
    public ControlPersistence get_ControlPersistence();
    public void set_ControlPersistence(ControlPersistence value);
    public string get_RenderingImageUrl();
    public void set_RenderingImageUrl(string value);
    public bool get_IsCallback();
    public string get_TagAttributes();
    public void set_TagAttributes(string value);
    public Color get_BorderLineColor();
    public void set_BorderLineColor(Color value);
    public MapDashStyle get_BorderLineStyle();
    public void set_BorderLineStyle(MapDashStyle value);
    public int get_BorderLineWidth();
    public void set_BorderLineWidth(int value);
    public Frame get_Frame();
    public void set_Frame(Frame value);
    public Viewport get_Viewport();
    public void set_Viewport(Viewport value);
    public ZoomPanel get_ZoomPanel();
    public void set_ZoomPanel(ZoomPanel value);
    public NavigationPanel get_NavigationPanel();
    public void set_NavigationPanel(NavigationPanel value);
    public DistanceScalePanel get_DistanceScalePanel();
    public void set_DistanceScalePanel(DistanceScalePanel value);
    public ColorSwatchPanel get_ColorSwatchPanel();
    public void set_ColorSwatchPanel(ColorSwatchPanel value);
    public LegendCollection get_Legends();
    public GridAttributes get_Parallels();
    public void set_Parallels(GridAttributes value);
    public GridAttributes get_Meridians();
    public void set_Meridians(GridAttributes value);
    public bool get_GridUnderContent();
    public void set_GridUnderContent(bool value);
    public Projection get_Projection();
    public void set_Projection(Projection value);
    public Color get_SelectionMarkerColor();
    public void set_SelectionMarkerColor(Color value);
    public Color get_SelectionBorderColor();
    public void set_SelectionBorderColor(Color value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public GradientType get_BackGradientType();
    public void set_BackGradientType(GradientType value);
    public Color get_BackSecondaryColor();
    public void set_BackSecondaryColor(Color value);
    public MapHatchStyle get_BackHatchStyle();
    public void set_BackHatchStyle(MapHatchStyle value);
    public MapLimits get_MapLimits();
    public void set_MapLimits(MapLimits value);
    public bool get_AutoLimitsIgnoreSymbols();
    public void set_AutoLimitsIgnoreSymbols(bool value);
    public ProjectionCenter get_ProjectionCenter();
    public void set_ProjectionCenter(ProjectionCenter value);
    public bool get_GeographyMode();
    public void set_GeographyMode(bool value);
    public int get_TileServerTimeout();
    public void set_TileServerTimeout(int value);
    public int get_TileServerMaxConnections();
    public void set_TileServerMaxConnections(int value);
    public CultureInfo get_TileCulture();
    public void set_TileCulture(CultureInfo value);
    public RequestCacheLevel get_TileCacheLevel();
    public void set_TileCacheLevel(RequestCacheLevel value);
    public void set_TileServerAppId(string value);
    public bool get_ContentCachingEnabled();
    public void set_ContentCachingEnabled(bool value);
    public double get_ContentCachingTimeout();
    public void set_ContentCachingTimeout(double value);
    public HitTestResult HitTest(int x, int y);
    public HitTestResult HitTest(int x, int y, Type objectType);
    public HitTestResult HitTest(int x, int y, Type[] objectTypes);
    public HitTestResult[] HitTest(int x, int y, Type[] objectTypes, bool returnMultipleElements);
    public void SaveAsImage(string fileName, MapImageFormat format);
    public void SaveAsImage(string fileName, MapImageFormat format, int compression);
    public void SaveAsImage(Stream stream, MapImageFormat format);
    public void SaveAsImage(Stream stream, MapImageFormat format, int compression);
    public void SaveAsImage(Stream stream);
    public void SaveAsImage(string fileName);
    public void DataBindShapes(object dataSource, string dataMember, string bindingField);
    public void DataBindGroups(object dataSource, string dataMember, string bindingField);
    public void DataBindPaths(object dataSource, string dataMember, string bindingField);
    public void DataBindSymbols(object dataSource, string dataMember, string bindingField, string category, string parentShapeField);
    public void DataBindSymbols(object dataSource, string dataMember, string bindingField, string category, string xCoordinateField, string yCoordinateField);
    public void PrintPaint(Graphics g, Rectangle position);
    public void LoadFromShapeFile(string fileName, string nameColumn, bool importData);
    public void LoadFromSQLServerSpatial(string connectionString, string sqlStatement, string nameColumn, string spatialColumn, BasicMapElements mapElementsToLoad, bool importAllData, string layer);
    public void LoadFromSQLServerSpatial(DataTable dataTable, string nameColumn, string spatialColumn, BasicMapElements mapElementsToLoad, bool importAllData, string layer);
    public void LoadFromSQLServerSpatial(DataTable dataTable, string nameColumn, string spatialColumn, BasicMapElements mapElementsToLoad, String[] additionalColumnsToImport, string layer);
    public void Simplify(float factor);
    public PointF PixelsToPercents(PointF pointInPixels);
    public PointF PercentsToPixels(PointF pointInPercents);
    public SizeF PixelsToPercents(SizeF sizeInPixels);
    public SizeF PercentsToPixels(SizeF sizeInPercents);
    public MapPoint PixelsToGeographic(PointF pointInPixels);
    public PointF GeographicToPixels(MapPoint pointOnMap);
    public MapPoint PercentsToGeographic(MapPoint pointInPercents);
    public MapPoint GeographicToPercents(MapPoint pointOnMap);
    public double MeasureDistance(MapPoint point1, MapPoint point2);
    public void CenterView(MapPoint pointOnMap);
    public void CreateGroups(string shapeFieldName);
    public void ApplyRules();
    public ArrayList Find(string searchFor, bool ignoreCase, bool exactSearch);
    [CompilerGeneratedAttribute]
public void add_BeforeDataBind(DataBindEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeDataBind(DataBindEventHandler value);
    protected internal virtual void OnBeforeDataBind(DataBindEventArgs e);
    [CompilerGeneratedAttribute]
public void add_AfterDataBind(DataBindEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AfterDataBind(DataBindEventHandler value);
    protected internal virtual void OnAfterDataBind(DataBindEventArgs e);
    [CompilerGeneratedAttribute]
internal void add_BeforeApplyingRules(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_BeforeApplyingRules(EventHandler value);
    internal void OnBeforeApplyingRules(EventArgs e);
    [CompilerGeneratedAttribute]
public void add_AllRulesApplied(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AllRulesApplied(EventHandler value);
    internal void OnAllRulesApplied(EventArgs e);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    internal ISelectable get_SelectedDesignTimeElement();
    internal void set_SelectedDesignTimeElement(ISelectable value);
    internal string GetHtmlColor(Color color, bool allowTransparent);
    internal string GetHtmlBorderStyle(Panel panel);
    internal string GetPanelHref(Panel panel);
    internal string GetPanelHrefStyle(Panel panel);
    internal string GetPanelImageUrl(string imageUrl, string panelName);
    internal string GetUrl(string imageUrl, string filename);
    internal void SaveFiles(string fullImagePath);
    private string ObfuscateJavaScript(string text);
    private bool SaveGridSectionImageMap(string fullImageMapPath);
    private long GetLastWriteTime(string fullImagePath);
    private long IsImageCached(string fullImagePath);
    private long IsFileCached(string fullImagePath, string fileExtension);
    private Point[] DecodeGridSectionIndexes(string gridXParam, string gridYParam);
    internal void Invalidate();
    internal void Refresh();
    private void CheckImageURLSeqFormat(string imageURL);
    internal bool IsDesignMode();
    [CompilerGeneratedAttribute]
public void add_PrePaint(MapPaintEvent value);
    [CompilerGeneratedAttribute]
public void remove_PrePaint(MapPaintEvent value);
    [CompilerGeneratedAttribute]
public void add_PostPaint(MapPaintEvent value);
    [CompilerGeneratedAttribute]
public void remove_PostPaint(MapPaintEvent value);
    [CompilerGeneratedAttribute]
public void add_ElementAdded(ElementEvent value);
    [CompilerGeneratedAttribute]
public void remove_ElementAdded(ElementEvent value);
    [CompilerGeneratedAttribute]
public void add_ElementRemoved(ElementEvent value);
    [CompilerGeneratedAttribute]
public void remove_ElementRemoved(ElementEvent value);
    internal void OnPrePaint(object sender, MapPaintEventArgs e);
    internal void OnPostPaint(object sender, MapPaintEventArgs e);
    internal void OnElementAdded(object sender, ElementEventArgs e);
    internal void OnElementRemoved(object sender, ElementEventArgs e);
    [CompilerGeneratedAttribute]
public void add_Click(ClickEvent value);
    [CompilerGeneratedAttribute]
public void remove_Click(ClickEvent value);
    internal void OnClick(object sender, ClickEventArgs e);
    [CompilerGeneratedAttribute]
public void add_Callback(CallbackEvent value);
    [CompilerGeneratedAttribute]
public void remove_Callback(CallbackEvent value);
    internal void OnCallback(object sender, CallbackEventArgs e);
    public string get_ResourceKey();
    public void set_ResourceKey(string value);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method is obsolete in VS2005 map control. The method doesn't do anything and is	present for backward compatibility only")]
public void LoadResourceData(Type rootType, string shapeResourceKey, string pathsResourceKey);
    public bool get_InternalAutoRunWizard();
    public void set_InternalAutoRunWizard(bool value);
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.MapCoordinateConverter")]
internal class Microsoft.Reporting.Map.WebForms.MapCoordinate : object {
    private double value;
    public MapCoordinate(double value);
    public MapCoordinate(string value);
    public static double Parse(string stringValue);
    public static double op_Implicit(MapCoordinate mapCoordinate);
    public static MapCoordinate op_Implicit(double value);
    public static string op_Implicit(MapCoordinate mapCoordinate);
    public static MapCoordinate op_Implicit(string value);
    public double ToDouble();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.Reporting.Map.WebForms.MapCoordinateConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class Microsoft.Reporting.Map.WebForms.MapCore : NamedElement {
    private static double ProjectionLatitudeLimit;
    private static double MercatorProjectionLatitudeLimit;
    private static float VisibleContentMargin;
    internal static int MaximumResolvedKeywordLength;
    private static int BufferSize;
    internal static string DefaultRuleLegendTest;
    internal static string NoneToken;
    internal static string AllToken;
    internal static string NameToken;
    private static double ClippingMargin;
    private static String[] _geoPoliticalBlockListLocales;
    private static Hashtable _geoPoliticalBlockHashtableLocales;
    private BorderTypeRegistry borderTypeRegistry;
    internal bool silentPaint;
    internal string loadedBuildNumber;
    internal bool skipPaint;
    private MapAreaCollection mapAreas;
    private Panel[] sortedPanels;
    private BufferBitmap bufferBitmap;
    private ImageLoader imageLoader;
    internal bool dirtyFlag;
    internal bool disableInvalidate;
    internal bool isInitializing;
    internal bool boundToDataSource;
    private bool invalidatingDataBind;
    private bool dataBinding;
    private bool isPrinting;
    private Size printSize;
    internal ServiceContainer serviceContainer;
    private bool rulesDirty;
    private bool applyingRules;
    private bool cachedBoundsDirty;
    private bool updatingCachedBounds;
    private bool cachedPathsDirty;
    private bool resetingCachedPaths;
    private bool childSymbolsDirty;
    private bool resettingChildSymbols;
    private bool gridSectionsDirty;
    private bool recreatingGridSections;
    private int bufferedGridSectionCount;
    private MapBounds cachedBoundsAfterProjection;
    private Dictionary`2<RectangleF, RectangleF> cachedGeographicClipRectangles;
    private long openTileRequestCount;
    private EventWaitHandle requestsCompletedEvent;
    private String[] userLocales;
    private FieldCollection groupFields;
    private FieldCollection shapeFields;
    private FieldCollection pathFields;
    private FieldCollection symbolFields;
    private GroupRuleCollection groupRules;
    private ShapeRuleCollection shapeRules;
    private PathRuleCollection pathRules;
    private SymbolRuleCollection symbolRules;
    private GroupCollection groups;
    private LayerCollection layers;
    private ShapeCollection shapes;
    private PathCollection paths;
    private SymbolCollection symbols;
    private NamedImageCollection namedImages;
    private MapImageCollection images;
    private MapLabelCollection labels;
    private LegendCollection legends;
    private DataBindingRulesCollection dataBindingRules;
    private Viewport viewport;
    private ZoomPanel zoomPanel;
    private NavigationPanel navigationPanel;
    private DistanceScalePanel distanceScalePanel;
    private ColorSwatchPanel colorSwatchPanel;
    private GridAttributes parallels;
    private GridAttributes meridians;
    private bool gridUnderContent;
    private AntiAliasing antiAliasing;
    private TextAntiAliasingQuality textAntiAliasingQuality;
    private float shadowIntensity;
    private GradientType backGradientType;
    private Color backSecondaryColor;
    private MapHatchStyle backHatchStyle;
    private Frame frame;
    private Projection projection;
    private Color borderLineColor;
    private MapDashStyle borderLineStyle;
    private int borderLineWidth;
    private Color selectionMarkerColor;
    private Color selectionBorderColor;
    private MapLimits mapLimits;
    private bool autoLimitsIgnoreSymbols;
    private ProjectionCenter projectionCenter;
    private bool geographyMode;
    private int tileServerTimeout;
    private int tileServerMaxConnections;
    private CultureInfo tileCulture;
    private RequestCacheLevel tileCacheLevel;
    private string tileServerAppId;
    private ImageType imageType;
    private int compression;
    private string mapImageUrl;
    private bool imageMapEnabled;
    private RenderType renderType;
    private ControlPersistence controlPersistence;
    private string renderingImageUrl;
    private SerializationContent viewStateContent;
    private string tagAttributes;
    private bool contentCachingEnabled;
    private double contentCachingTimeout;
    private object dataSource;
    private MapSerializer serializer;
    private CallbackManager callbackManager;
    private MapControl parent;
    private HotRegionList hotRegionList;
    private bool serializing;
    private MapPoint mapCenterPoint;
    private MapPoint minimumPoint;
    private MapPoint maximumPoint;
    private RectangleF mapDockBounds;
    private ISelectable selectedDesignTimeElement;
    private bool useRSAccessibilityNames;
    private bool doPanelLayout;
    private RenderingMode renderingMode;
    private Panel panelToRender;
    private int singleGridSectionX;
    private int singleGridSectionY;
    private Hashtable tileImagesCache;
    private Image tileWaitImage;
    private bool uppercaseFieldKeywords;
    private int maxSpatialPointCount;
    private int maxSpatialElementCount;
    private double CurrentLatitudeLimit;
    private int CurrentSrid;
    private SqlGeography ClippingPolygon;
    internal LoadTilesHandler LoadTilesHandler;
    internal SaveTilesHandler SaveTilesHandler;
    public string licenseData;
    private Double[0...,0...] A;
    private Double[0...,0...] B;
    private Double[0...,0...] Phi;
    private static double RadsInDegree;
    private static double DegreesInRad;
    private static double Cos35;
    private static double Eckert1Constant;
    private static double Eckert3ConstantA;
    private static double Eckert3ConstantB;
    private static double Eckert3ConstantC;
    private GridSection[0...,0...] gridSections;
    private int gridSectionsXCount;
    private int gridSectionsYCount;
    private int gridSectionsInViewportXCount;
    private int gridSectionsInViewportYCount;
    private Point[] gridSectionsArray;
    private Size gridSectionSize;
    private Point gridSectionsOffset;
    private int suspendUpdatesCount;
    private bool autoUpdates;
    public FieldCollection GroupFields { get; }
    public FieldCollection ShapeFields { get; }
    public FieldCollection PathFields { get; }
    public FieldCollection SymbolFields { get; }
    public GroupRuleCollection GroupRules { get; }
    public ShapeRuleCollection ShapeRules { get; }
    public PathRuleCollection PathRules { get; }
    public SymbolRuleCollection SymbolRules { get; }
    public GroupCollection Groups { get; }
    public LayerCollection Layers { get; }
    public ShapeCollection Shapes { get; }
    public PathCollection Paths { get; }
    public SymbolCollection Symbols { get; }
    public NamedImageCollection NamedImages { get; }
    public MapImageCollection Images { get; }
    public MapLabelCollection Labels { get; }
    public LegendCollection Legends { get; }
    public DataBindingRulesCollection DataBindingRules { get; }
    public MapAreaCollection MapAreas { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public Viewport Viewport { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public ZoomPanel ZoomPanel { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public NavigationPanel NavigationPanel { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public DistanceScalePanel DistanceScalePanel { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public ColorSwatchPanel ColorSwatchPanel { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public GridAttributes Parallels { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public GridAttributes Meridians { get; public set; }
    [DefaultValueAttribute("False")]
public bool GridUnderContent { get; public set; }
    [DefaultValueAttribute("Microsoft.Reporting.Map.WebForms.AntiAliasing", "All")]
public AntiAliasing AntiAliasing { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TextAntiAliasingQuality TextAntiAliasingQuality { get; public set; }
    [DefaultValueAttribute("25")]
public float ShadowIntensity { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "White")]
public Color BackColor { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType BackGradientType { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "")]
public Color BackSecondaryColor { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapHatchStyle BackHatchStyle { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public Frame Frame { get; public set; }
    [SerializationVisibilityAttribute("0")]
public int Width { get; public set; }
    [SerializationVisibilityAttribute("0")]
public int Height { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeMapCore_BuildNumber")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("")]
public string BuildNumber { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeMapCore_ControlType")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("")]
public string ControlType { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Projection Projection { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapCore_BorderLineColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color BorderLineColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapCore_BorderLineStyle")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapDashStyle BorderLineStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapCore_BorderLineWidth")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("0")]
public int BorderLineWidth { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "LightBlue")]
public Color SelectionMarkerColor { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color SelectionBorderColor { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public MapLimits MapLimits { get; public set; }
    [DefaultValueAttribute("False")]
public bool AutoLimitsIgnoreSymbols { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public ProjectionCenter ProjectionCenter { get; public set; }
    [DefaultValueAttribute("True")]
public bool GeographyMode { get; public set; }
    [DefaultValueAttribute("10000")]
public int TileServerTimeout { get; public set; }
    [DefaultValueAttribute("2")]
public int TileServerMaxConnections { get; public set; }
    [DefaultValueAttribute("System.Globalization.CultureInfo", "Invariant Language (Invariant Country)")]
public CultureInfo TileCulture { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public RequestCacheLevel TileCacheLevel { get; public set; }
    [DefaultValueAttribute("ArHDYkG4iBBgRo5ZKlvBPAXjj3tA13t5WMpr60l7m23-SSyZJoHsVVe2IecRKN88")]
internal string TileServerAppId { get; internal set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ImageType ImageType { get; public set; }
    [DefaultValueAttribute("0")]
public int Compression { get; public set; }
    [DefaultValueAttribute("TempFiles/MapPic_#SEQ(300,3)")]
public string ImageUrl { get; public set; }
    [DefaultValueAttribute("True")]
public bool ImageMapEnabled { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public RenderType RenderType { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ControlPersistence ControlPersistence { get; public set; }
    [DefaultValueAttribute("")]
public string RenderingImageUrl { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SerializationContent ViewStateContent { get; public set; }
    [DefaultValueAttribute("")]
public string TagAttributes { get; public set; }
    [DefaultValueAttribute("False")]
public bool ContentCachingEnabled { get; public set; }
    [DefaultValueAttribute("0")]
public double ContentCachingTimeout { get; public set; }
    internal object DataSource { get; internal set; }
    [SerializationVisibilityAttribute("0")]
internal MapSerializer Serializer { get; }
    [SerializationVisibilityAttribute("0")]
internal CallbackManager CallbackManager { get; }
    internal MapControl MapControl { get; }
    internal HotRegionList HotRegionList { get; }
    internal bool Serializing { get; internal set; }
    internal MapPoint MapCenterPoint { get; internal set; }
    internal MapPoint MinimumPoint { get; internal set; }
    internal MapPoint MaximumPoint { get; internal set; }
    internal RectangleF MapDockBounds { get; internal set; }
    internal ISelectable SelectedDesignTimeElement { get; internal set; }
    internal bool UseRSAccessibilityNames { get; internal set; }
    internal bool DoPanelLayout { get; internal set; }
    internal RenderingMode RenderingMode { get; internal set; }
    internal Panel PanelToRender { get; internal set; }
    internal int SingleGridSectionX { get; internal set; }
    internal int SingleGridSectionY { get; internal set; }
    internal Hashtable TileImagesCache { get; internal set; }
    private Image TileWaitImage { get; }
    internal bool UppercaseFieldKeywords { get; internal set; }
    internal int MaxSpatialPointCount { get; internal set; }
    internal int MaxSpatialElementCount { get; internal set; }
    internal bool InvokeRequired { get; }
    internal GridSection[0...,0...] GridSections { get; internal set; }
    internal int GridSectionsXCount { get; internal set; }
    internal int GridSectionsYCount { get; internal set; }
    internal int GridSectionsInViewportXCount { get; internal set; }
    internal int GridSectionsInViewportYCount { get; internal set; }
    internal Point[] GridSectionsArray { get; internal set; }
    internal Size GridSectionSize { get; internal set; }
    internal Point GridSectionsOffset { get; internal set; }
    internal bool IsSuspended { get; }
    internal bool AutoUpdates { get; internal set; }
    private static MapCore();
    internal MapCore(MapControl parent);
    protected virtual void Dispose(bool disposing);
    public FieldCollection get_GroupFields();
    public FieldCollection get_ShapeFields();
    public FieldCollection get_PathFields();
    public FieldCollection get_SymbolFields();
    public GroupRuleCollection get_GroupRules();
    public ShapeRuleCollection get_ShapeRules();
    public PathRuleCollection get_PathRules();
    public SymbolRuleCollection get_SymbolRules();
    public GroupCollection get_Groups();
    public LayerCollection get_Layers();
    public ShapeCollection get_Shapes();
    public PathCollection get_Paths();
    public SymbolCollection get_Symbols();
    public NamedImageCollection get_NamedImages();
    public MapImageCollection get_Images();
    public MapLabelCollection get_Labels();
    public LegendCollection get_Legends();
    public DataBindingRulesCollection get_DataBindingRules();
    public MapAreaCollection get_MapAreas();
    public Viewport get_Viewport();
    public void set_Viewport(Viewport value);
    public ZoomPanel get_ZoomPanel();
    public void set_ZoomPanel(ZoomPanel value);
    public NavigationPanel get_NavigationPanel();
    public void set_NavigationPanel(NavigationPanel value);
    public DistanceScalePanel get_DistanceScalePanel();
    public void set_DistanceScalePanel(DistanceScalePanel value);
    public ColorSwatchPanel get_ColorSwatchPanel();
    public void set_ColorSwatchPanel(ColorSwatchPanel value);
    public GridAttributes get_Parallels();
    public void set_Parallels(GridAttributes value);
    public GridAttributes get_Meridians();
    public void set_Meridians(GridAttributes value);
    public bool get_GridUnderContent();
    public void set_GridUnderContent(bool value);
    public AntiAliasing get_AntiAliasing();
    public void set_AntiAliasing(AntiAliasing value);
    public TextAntiAliasingQuality get_TextAntiAliasingQuality();
    public void set_TextAntiAliasingQuality(TextAntiAliasingQuality value);
    public float get_ShadowIntensity();
    public void set_ShadowIntensity(float value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public virtual GradientType get_BackGradientType();
    public virtual void set_BackGradientType(GradientType value);
    public virtual Color get_BackSecondaryColor();
    public virtual void set_BackSecondaryColor(Color value);
    public virtual MapHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(MapHatchStyle value);
    public Frame get_Frame();
    public void set_Frame(Frame value);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public string get_BuildNumber();
    public void set_BuildNumber(string value);
    public string get_ControlType();
    public void set_ControlType(string value);
    public Projection get_Projection();
    public void set_Projection(Projection value);
    public Color get_BorderLineColor();
    public void set_BorderLineColor(Color value);
    public MapDashStyle get_BorderLineStyle();
    public void set_BorderLineStyle(MapDashStyle value);
    public int get_BorderLineWidth();
    public void set_BorderLineWidth(int value);
    public Color get_SelectionMarkerColor();
    public void set_SelectionMarkerColor(Color value);
    public Color get_SelectionBorderColor();
    public void set_SelectionBorderColor(Color value);
    public MapLimits get_MapLimits();
    public void set_MapLimits(MapLimits value);
    public bool get_AutoLimitsIgnoreSymbols();
    public void set_AutoLimitsIgnoreSymbols(bool value);
    public ProjectionCenter get_ProjectionCenter();
    public void set_ProjectionCenter(ProjectionCenter value);
    public bool get_GeographyMode();
    public void set_GeographyMode(bool value);
    public int get_TileServerTimeout();
    public void set_TileServerTimeout(int value);
    public int get_TileServerMaxConnections();
    public void set_TileServerMaxConnections(int value);
    public CultureInfo get_TileCulture();
    public void set_TileCulture(CultureInfo value);
    public RequestCacheLevel get_TileCacheLevel();
    public void set_TileCacheLevel(RequestCacheLevel value);
    internal string get_TileServerAppId();
    internal void set_TileServerAppId(string value);
    public ImageType get_ImageType();
    public void set_ImageType(ImageType value);
    public int get_Compression();
    public void set_Compression(int value);
    public string get_ImageUrl();
    public void set_ImageUrl(string value);
    public bool get_ImageMapEnabled();
    public void set_ImageMapEnabled(bool value);
    public RenderType get_RenderType();
    public void set_RenderType(RenderType value);
    public ControlPersistence get_ControlPersistence();
    public void set_ControlPersistence(ControlPersistence value);
    public string get_RenderingImageUrl();
    public void set_RenderingImageUrl(string value);
    public SerializationContent get_ViewStateContent();
    public void set_ViewStateContent(SerializationContent value);
    public string get_TagAttributes();
    public void set_TagAttributes(string value);
    public bool get_ContentCachingEnabled();
    public void set_ContentCachingEnabled(bool value);
    public double get_ContentCachingTimeout();
    public void set_ContentCachingTimeout(double value);
    internal object get_DataSource();
    internal void set_DataSource(object value);
    internal MapSerializer get_Serializer();
    internal CallbackManager get_CallbackManager();
    internal MapControl get_MapControl();
    internal HotRegionList get_HotRegionList();
    internal bool get_Serializing();
    internal void set_Serializing(bool value);
    internal MapPoint get_MapCenterPoint();
    internal void set_MapCenterPoint(MapPoint value);
    internal MapPoint get_MinimumPoint();
    internal void set_MinimumPoint(MapPoint value);
    internal MapPoint get_MaximumPoint();
    internal void set_MaximumPoint(MapPoint value);
    internal RectangleF get_MapDockBounds();
    internal void set_MapDockBounds(RectangleF value);
    internal ISelectable get_SelectedDesignTimeElement();
    internal void set_SelectedDesignTimeElement(ISelectable value);
    internal bool get_UseRSAccessibilityNames();
    internal void set_UseRSAccessibilityNames(bool value);
    internal bool get_DoPanelLayout();
    internal void set_DoPanelLayout(bool value);
    internal RenderingMode get_RenderingMode();
    internal void set_RenderingMode(RenderingMode value);
    internal Panel get_PanelToRender();
    internal void set_PanelToRender(Panel value);
    internal int get_SingleGridSectionX();
    internal void set_SingleGridSectionX(int value);
    internal int get_SingleGridSectionY();
    internal void set_SingleGridSectionY(int value);
    internal Hashtable get_TileImagesCache();
    internal void set_TileImagesCache(Hashtable value);
    private Image get_TileWaitImage();
    internal bool get_UppercaseFieldKeywords();
    internal void set_UppercaseFieldKeywords(bool value);
    internal int get_MaxSpatialPointCount();
    internal void set_MaxSpatialPointCount(int value);
    internal int get_MaxSpatialElementCount();
    internal void set_MaxSpatialElementCount(int value);
    private static bool IsTypeInGeometry(Type type, SqlGeometry geometry);
    private static bool IsTypeInGeography(Type type, SqlGeography geography);
    private static Type DetermineElementTypeFromGeometryType(string geometryType);
    internal static Nullable`1<BasicMapElements> DetermineMapElementsFromSpatial(DataTable spatialTable, string spatialColumn);
    internal void LoadFromSpatial(string connectionString, string sqlStatement, string nameColumn, string spatialColumn, BasicMapElements mapElementsToLoad, bool importAllData, string layer);
    internal void LoadFromSpatial(DataTable dataTable, string nameColumn, string spatialColumn, BasicMapElements mapElementsToLoad, bool importAllData, string layer);
    internal void LoadFromSpatial(DataTable dataTable, string nameColumn, string spatialColumn, BasicMapElements mapElementsToLoad, String[] additionalColumnsToImport, string layer);
    internal void LoadFromSpatial(DataTable spatialTable, string nameColumn, string spatialColumn, BasicMapElements mapElementsToLoad, String[] columnsToImport, ColumnImportMode[] importModes, string layer, string category);
    private void CreateShapesFromSpatial(DataTable spatialTable, string nameColumn, string spatialColumn, String[] columnsToImport, ColumnImportMode[] importModes, string layer, string category);
    private void CreatePathsFromSpatial(DataTable spatialTable, string nameColumn, string spatialColumn, String[] columnsToImport, ColumnImportMode[] importModes, string layer, string category);
    private void CreateSymbolsFromSpatial(DataTable spatialTable, string nameColumn, string spatialColumn, String[] columnsToImport, string layer, string category);
    internal SqlGeography GetClippingPolygon(int srid);
    private void ConstructlippingPolygon();
    internal SqlGeography NormalizeLongitude(SqlGeography geography);
    internal SpatialLoadResult LoadFromShapeFileStreams(Stream shpStream, Stream dbfStream, String[] columnsToImport, String[] destinationFields, string layer, string category);
    internal SpatialLoadResult LoadFromShapeFileStreams(Stream shpStream, Stream dbfStream, string layer, string category);
    internal void LoadFromShapeFile(string fileName, string nameColumn, bool importData);
    internal void LoadFromShapeFile(string fileName, string nameColumn, String[] columnsToImport, ColumnImportMode[] importModes);
    internal void LoadFromShapeReader(ShapeFileReader shapeReader, string nameColumn, String[] columnsToImport, ColumnImportMode[] importModes);
    internal SpatialLoadResult LoadFromShapeReader(ShapeFileReader shapeReader, string nameColumn, String[] columnsToImport, String[] destinationFields, ColumnImportMode[] importModes, string layer, string category);
    private SpatialLoadResult CreateShapes(ShapeFileReader shapeReader, string nameColumn, String[] columnsToImport, String[] destinationFields, ColumnImportMode[] importModes, string layer, string category);
    private SpatialLoadResult CreatePaths(ShapeFileReader shapeReader, string nameColumn, String[] columnsToImport, String[] destinationFields, ColumnImportMode[] importModes, string layer, string category);
    private SpatialLoadResult CreateSymbols(ShapeFileReader shapeReader, string nameColumn, String[] columnsToImport, String[] destinationFields, string layer, string category);
    public void Simplify(float factor);
    internal void InvalidateCachedBounds();
    internal void UpdateCachedBounds();
    internal MapBounds DetermineSpatialElementsBounds();
    private List`1<Shape> GetBoundDeterminingShapes();
    private List`1<Path> GetBoundDeterminingPaths();
    private List`1<Symbol> GetBoundDeterminingSymbols();
    private double GetLatitudeLimit();
    private MapBounds GetDefaultEmptyBounds();
    private String[0...,0...] DetermineTileUrls(Layer layer, int levelOfDetail, int xStartIndex, int yStartIndex, int horizontalCount, int verticalCount);
    private Rectangle[0...,0...] DetermineTileRectangles(int horizontalCount, int verticalCount, int xOffset, int yOffset, int stretchedTileLength);
    private Image[0...,0...] LoadTileImages(String[0...,0...] tileImageUrls, Rectangle[0...,0...] tileRectangles, Layer layer);
    private void TimeoutCallback(object state, bool timedOut);
    private void WebResponseCallback(IAsyncResult asyncResult);
    public void SetUserLocales(String[] userLocales);
    private bool IsLocaleAllowedToAccessBing();
    private void RenderTiles(MapGraphics g, Layer layer, RectangleF clipRect);
    internal void Paint(Graphics g);
    internal void Paint(Graphics gdiGraph, RenderingType renderingType, Stream stream, bool buffered);
    internal void PrintPaint(Graphics g, Rectangle position);
    internal BufferBitmap InitBitmap(BufferBitmap bmp);
    private SmoothingMode GetSmootingMode();
    private TextRenderingHint GetTextRenderingHint();
    internal MapGraphics GetGraphics(RenderingType renderingType, Graphics g, Stream outputStream);
    internal Panel[] GetSortedPanels();
    private string GetTileLayerAttributions();
    private void RenderTileLayerAttributions(MapGraphics g);
    private string GetTileLayerError();
    internal static void RenderTileImageError(Graphics graphics, string error, Rectangle rect);
    internal void RenderErrorMessage(MapGraphics g);
    private bool IsGridSectionsArraySquare();
    internal void RenderElements(MapGraphics g);
    internal void RenderLayer(MapGraphics g, Layer layer, bool allLayers, RectangleF clipRect, HotRegionList hotRegions, Hashtable visibleLabels);
    internal void RenderContentElements(MapGraphics g, PointF gridSectionOffset, HotRegionList hotRegions);
    private void RenderOnePanel(MapGraphics g);
    internal void RenderPanels(MapGraphics g);
    private void RenderFrame(MapGraphics g);
    internal void RenderElementsBufered(MapGraphics g);
    internal void RenderSelectedContentElements(MapGraphics g, RectangleF clipRect);
    internal void RenderSelectedPanels(MapGraphics g, RectangleF clipRect);
    internal ISelectable[] GetSelectedContentElements();
    internal ISelectable[] GetSelectedPanels();
    internal double PixelsToKilometers(float pixels);
    internal double MeasureDistance(MapPoint point1, MapPoint point2);
    internal double GetMinimumAbsoluteLatitude();
    internal double GetMinimumAbsoluteLatitude(double minY, double maxY);
    internal double LimitValue(double value, double lowerLimit, double upperLimit);
    internal Point3D ApplyProjection(MapPoint mapPoint);
    internal Point3D ApplyProjection(double longitude, double latitude);
    private Point3D RotateAndTilt(Point3D point, double longitude, double latitude);
    private Point3D GetGlobePoint(double xValueRad, double yValueRad);
    internal MapPoint InverseProjection(double projectedX, double projectedY);
    internal double CalculateAspectRatio();
    internal void ResetCachedBoundsAfterProjection();
    internal MapBounds GetBoundsAfterProjection();
    internal MapBounds GetBoundsAfterProjection(double minX, double minY, double maxX, double maxY);
    internal RectangleF GetGeographicClipRectangle(RectangleF clipRectangle);
    internal void ResetGeographicClipRectangles();
    internal RectangleF GetGeographicRectangle(IEnumerable`1<PointF> points);
    internal void PanBy(Point delta);
    internal void EnsureContentIsVisible();
    internal void CenterView(MapPoint pointOnMap);
    internal void Scroll(ScrollDirection direction, double scrollStep);
    private void RenderGrid(MapGraphics g, PointF gridSectionOffset);
    internal bool DrawParallelLabels();
    internal bool DrawMeridianLabels();
    internal void RenderParallels(MapGraphics g, GridLine[] parallels);
    internal void RenderMeridians(MapGraphics g, GridLine[] meridians);
    internal GridLine[] GetParallels(MapGraphics g);
    private string FormatParallelLabel(double value);
    private string FormatMeridianLabel(double value);
    private void CalculateSelectionMarkerPositions(MapGraphics g, GridLine[] gridLines);
    private float CalculateYIntersect(PointF point1, PointF point2, float xIntersect);
    private float CalculateXIntersect(PointF point1, PointF point2, float yIntersect);
    private PointF[] FindAllIntersectingPoints(GridLine gridLine, RectangleF rect);
    private void FindIntersectingPoints(Hashtable resultSet, PointF[] points, float x1, float y1, float x2, float y2);
    private MapPoint CalculateIdealLabelPointForParallels(MapGraphics g, float labelWidth);
    private MapPoint CalculateIdealLabelPointForMeridians(MapGraphics g, float labelHeight);
    internal GridLine[] GetMeridians(MapGraphics g, GridLine[] parallels);
    private double GetParallelInterval();
    private double GetMeridianInterval();
    private Double[] GetParallelPositions();
    private Double[] GetMeridianPositions();
    internal bool AreParallelsCurved();
    internal bool AreMeridiansCurved();
    internal void InvalidateRules();
    internal void ApplyAllRules();
    internal int GetWidth();
    internal int GetHeight();
    internal void ResetAutoValues();
    internal virtual void Invalidate();
    internal virtual void Invalidate(RectangleF rect);
    internal virtual void InvalidateViewport(bool invalidateGridSections);
    internal virtual void InvalidateDistanceScalePanel();
    internal virtual void InvalidateAndLayout();
    internal void InvalidateCachedPaths();
    internal void ResetCachedPaths();
    internal void OnFontChanged();
    internal NamedCollection[] GetRenderCollections();
    internal virtual void BeginInit();
    internal virtual void EndInit();
    private void LoadFieldsFromBuffers();
    internal bool get_InvokeRequired();
    internal virtual void ReconnectData(bool exact);
    internal virtual void Notify(MessageType msg, NamedElement element, object param);
    internal void SaveTo(string fileName, MapImageFormat imageFormat, int compression, Panel panel, bool zoomThumbOnly);
    internal void SaveTo(Stream stream, MapImageFormat imageFormat, int compression, Panel panel, bool zoomThumbOnly);
    private static ImageCodecInfo GetEncoderInfo(string mimeType);
    public void SaveIntoMetafile(Stream imageStream);
    internal void SavePanelAsImage(Panel panel, string fileName, MapImageFormat format, int compression, bool zoomThumbOnly);
    internal void SavePanelAsImage(Panel panel, Stream stream, MapImageFormat format, int compression, bool zoomThumbOnly);
    internal void SavePanelAsImage(Panel panel, Stream stream, bool zoomThumbOnly);
    internal void SavePanelAsImage(Panel panel, string fileName, bool zoomThumbOnly);
    internal int GetSpatialElementCount();
    internal int GetSpatialPointCount();
    private Region GetClipRegion();
    internal bool IsDesignMode();
    internal void DrawException(Graphics graphics, Exception e);
    internal void PrepareHitTest();
    internal HitTestResult[] HitTest(int x, int y, Type[] objectTypes, bool returnMultipleElements);
    internal HotRegion GetHotRegion(NamedElement element);
    internal double GetMaximumSimplificationResolution();
    internal PointF PercentsToPixels(PointF pointInPercents);
    internal PointF PixelsToPercents(PointF pointInPixels);
    internal SizeF PercentsToPixels(SizeF sizeInPercents);
    internal SizeF PixelsToPercents(SizeF sizeInPixels);
    internal Point3D GeographicToPercents(MapPoint mapPoint);
    internal Point3D GeographicToPercents(double longtitude, double latitude);
    internal MapPoint PercentsToGeographic(MapPoint point);
    internal MapPoint PercentsToGeographic(double pointX, double pointY);
    internal MapPoint PixelsToGeographic(PointF pointInPixels);
    internal PointF GeographicToPixels(MapPoint pointOnMap);
    internal MapPoint ContentToGeographic(PointF contentPoint);
    internal PointF GeographicToContent(MapPoint pointOnMap);
    internal PointF PixelsToContent(PointF pointInPixels);
    internal RectangleF PixelsToContent(RectangleF pixelsRect);
    internal PointF ContentToPixels(PointF contentPoint);
    internal RectangleF ContentToPixels(RectangleF contentRectangle);
    internal bool IsContentImageMapRequired();
    internal MapAreaCollection GetMapAreasFromHotRegionList();
    internal void PopulateImageMaps();
    internal void WriteMapTag(TextWriter output, string mapName);
    internal void InvalidateDataBinding();
    internal void AutoDataBind(bool forceBinding);
    internal void DataBindShapes(object dataSource, string dataMember, string bindingField);
    internal void DataBindGroups(object dataSource, string dataMember, string bindingField);
    internal void DataBindPaths(object dataSource, string dataMember, string bindingField);
    internal void DataBindSymbols(object dataSource, string dataMember, string bindingField, string category, string parentShapeField, string xCoordinateField, string yCoordinateField);
    internal void ExecuteDataBind(BindingType bindingType, DataBindingRuleBase dataBinding, object dataSource, string dataMember, string bindingField, String[] auxFields);
    private void ExecuteFieldDataBind(IEnumerable dataEnumerator, string bindingField, ArrayList columnDescrs, DataBindingTargetResolver targetResolver, bool dummyData);
    private void ExecuteSymbolDataBind(IEnumerable dataEnumerator, string bindingField, ArrayList columnDescrs, DataBindingTargetResolver targetResolver, string category, string parentShapeField, string xCoordinateField, string yCoordinateField, bool dummyData);
    private void OnBeforeDataBind(DataBindEventArgs e);
    private void OnAfterDataBind(DataBindEventArgs e);
    internal string ResolveAllKeywords(string original, NamedElement element);
    internal string ResolveKeyword(string original, string keyword, object val);
    internal static bool CheckLicense();
    private RectangleF PerformPanelLayout(MapGraphics g, RectangleF bounds, List`1<DockablePanel> sortedPanels);
    private RectangleF LayoutAlignPanel(DockablePanel panel, RectangleF layoutBounds, RectangleF& unoccupiedArea, float position);
    private void LayoutCenteredPanels(ArrayList panels, bool horizAlignment, RectangleF layoutBounds, RectangleF& unoccupiedArea);
    internal void LayoutPanels(MapGraphics g);
    internal RectangleF CalculateMapDockBounds(MapGraphics g);
    private void SeparateOverlappingPanels(List`1<DockablePanel> panels, RectangleF availableSpace, RectangleF& viewportRect);
    private bool FindFirstOverlappingPanelPair(List`1<DockablePanel> panels, Hashtable unavoidableOverlaps, DockablePanel& intersectingPanel, DockablePanel& panelToMove);
    private bool MovePanelToAvoidOverlap(List`1<DockablePanel> panels, Hashtable unavoidableOverlaps, DockablePanel panelToMove, DockablePanel intersectingPanel, RectangleF availableSpace, RectangleF& viewportRect);
    private bool ValidateNewPosition(List`1<DockablePanel> panels, Hashtable unavoidableOverlaps, DockablePanel panelToMove, DockablePanel intersectingPanel, RectangleF newRect, RectangleF availableSpace, bool checkPreviousPanels);
    private void SetNewPanelPosition(DockablePanel panelToMove, RectangleF newRect, RectangleF& viewportRect);
    internal void LoadShapesFromStream(Stream stream);
    internal void SaveShapesToStream(Stream stream);
    internal void LoadPathsFromStream(Stream stream);
    internal void SavePathsToStream(Stream stream);
    internal void LoadSymbolsFromStream(Stream stream);
    internal void SaveSymbolsToStream(Stream stream);
    internal void CreateGroups(string shapeFieldName);
    internal void CreateGroups(string shapeFieldName, string layer, string category);
    internal void InvalidateChildSymbols();
    internal void ResetChildSymbols();
    internal GridSection[0...,0...] get_GridSections();
    internal void set_GridSections(GridSection[0...,0...] value);
    internal int get_GridSectionsXCount();
    internal void set_GridSectionsXCount(int value);
    internal int get_GridSectionsYCount();
    internal void set_GridSectionsYCount(int value);
    internal int get_GridSectionsInViewportXCount();
    internal void set_GridSectionsInViewportXCount(int value);
    internal int get_GridSectionsInViewportYCount();
    internal void set_GridSectionsInViewportYCount(int value);
    internal Point[] get_GridSectionsArray();
    internal void set_GridSectionsArray(Point[] value);
    internal Size get_GridSectionSize();
    internal void set_GridSectionSize(Size value);
    internal Point get_GridSectionsOffset();
    internal void set_GridSectionsOffset(Point value);
    internal void InvalidateGridSections();
    internal void DisposeGridSections();
    internal void RecreateGridSections();
    internal void DetermineGridSectionSizeAndCount();
    internal GridSection[] GetVisibleSections();
    private void InvalidateGridSections(Rectangle rectangle);
    internal void RenderOneGridSection(MapGraphics g, int xIndex, int yIndex);
    internal static int SimpleRound(float number);
    internal void RenderGridSections(MapGraphics g);
    internal Color GetGridSectionBackColor();
    internal bool UseGridSectionRendering();
    internal bool IsTileLayerVisible();
    internal ArrayList Find(string searchFor, bool ignoreCase, bool exactSearch);
    internal void SuspendUpdates();
    internal void ResumeUpdates();
    internal bool get_IsSuspended();
    internal bool get_AutoUpdates();
    internal void set_AutoUpdates(bool value);
}
internal enum Microsoft.Reporting.Map.WebForms.MapCursor : Enum {
    public int value__;
    public static MapCursor AppStarting;
    public static MapCursor Arrow;
    public static MapCursor Cross;
    public static MapCursor Default;
    public static MapCursor Hand;
    public static MapCursor Help;
    public static MapCursor HSplit;
    public static MapCursor IBeam;
    public static MapCursor No;
    public static MapCursor NoMove2D;
    public static MapCursor NoMoveHoriz;
    public static MapCursor NoMoveVert;
    public static MapCursor PanEast;
    public static MapCursor PanNE;
    public static MapCursor PanNorth;
    public static MapCursor PanNW;
    public static MapCursor PanSE;
    public static MapCursor PanSouth;
    public static MapCursor PanSW;
    public static MapCursor PanWest;
    public static MapCursor SizeAll;
    public static MapCursor SizeNESW;
    public static MapCursor SizeNS;
    public static MapCursor SizeNWSE;
    public static MapCursor SizeWE;
    public static MapCursor UpArrow;
    public static MapCursor VSplit;
    public static MapCursor WaitCursor;
}
internal enum Microsoft.Reporting.Map.WebForms.MapDashStyle : Enum {
    public int value__;
    public static MapDashStyle None;
    public static MapDashStyle Dash;
    public static MapDashStyle DashDot;
    public static MapDashStyle DashDotDot;
    public static MapDashStyle Dot;
    public static MapDashStyle Solid;
}
internal class Microsoft.Reporting.Map.WebForms.MapDataGridViewer : Control {
    private DoubleBufferedDataGrid dataGrid;
    private bool interactiveSelection;
    private bool allowMultipleSelection;
    public bool InteractiveSelection { get; public set; }
    public bool AllowMultipleSelection { get; public set; }
    public int SelectedColumnIndex { get; }
    public string SelectedColumnText { get; }
    public Int32[] SelectedColumnIndices { get; }
    public String[] SelectedColumnsText { get; }
    public DataGrid InternalGrid { get; }
    public bool get_InteractiveSelection();
    public void set_InteractiveSelection(bool value);
    public bool get_AllowMultipleSelection();
    public void set_AllowMultipleSelection(bool value);
    public int get_SelectedColumnIndex();
    public string get_SelectedColumnText();
    public Int32[] get_SelectedColumnIndices();
    public String[] get_SelectedColumnsText();
    public DataGrid get_InternalGrid();
    public void Initialize(DataTable data);
    public void SelectColumnByIndex(int index);
    public void SelectColumnByIndex(Int32[] indices);
    public void SelectColumnByName(string name);
    public void SelectColumnByName(String[] names);
    public void ScrollToColumn(string name);
}
internal class Microsoft.Reporting.Map.WebForms.MapGraphics : RenderingEngine {
    internal CommonElements common;
    private Pen pen;
    private SolidBrush solidBrush;
    private Matrix myMatrix;
    private int width;
    private int height;
    internal bool softShadows;
    private AntiAliasing antiAliasing;
    internal bool IsMetafile;
    internal PointF InitialOffset;
    private Stack graphicStates;
    public Graphics Graphics { get; public set; }
    internal AntiAliasing AntiAliasing { get; internal set; }
    internal float ScaleFactorX { get; }
    internal float ScaleFactorY { get; }
    internal MapGraphics(CommonElements common);
    internal void DrawLineRel(Color color, int width, MapDashStyle style, PointF firstPointF, PointF secondPointF);
    internal void DrawLineAbs(Color color, int width, MapDashStyle style, PointF firstPoint, PointF secondPoint);
    internal void DrawLineRel(Color color, int width, MapDashStyle style, PointF firstPoint, PointF secondPoint, Color shadowColor, int shadowOffset);
    internal void DrawLineAbs(Color color, int width, MapDashStyle style, PointF firstPoint, PointF secondPoint, Color shadowColor, int shadowOffset);
    internal static Brush GetHatchBrush(MapHatchStyle hatchStyle, Color backColor, Color foreColor);
    internal Brush GetTextureBrush(string name, Color backImageTranspColor, MapImageWrapMode mode);
    internal Brush GetShadowBrush();
    internal Color GetShadowColor();
    internal Brush GetGradientBrush(RectangleF rectangle, Color firstColor, Color secondColor, GradientType type);
    internal Brush GetPieGradientBrush(RectangleF rectangle, Color firstColor, Color secondColor);
    internal Brush CreateBrush(RectangleF rect, Color backColor, MapHatchStyle backHatchStyle, string backImage, MapImageWrapMode backImageMode, Color backImageTranspColor, MapImageAlign backImageAlign, GradientType backGradientType, Color backSecondaryColor);
    internal static DashStyle GetPenStyle(MapDashStyle style);
    internal GraphicsPath WidenPath(GraphicsPath path, float amount);
    internal GraphicsPath Union(GraphicsPath pathA, GraphicsPath pathB);
    private GraphicsPath[] SplitIntoSegments(GraphicsPath pathToBeSplit, int startingPoint, GraphicsPath splitterPath);
    private int GetFirstPointOf1Inside2(GraphicsPath path1, GraphicsPath path2);
    internal Brush GetMarkerBrush(GraphicsPath path, MarkerStyle markerStyle, PointF pointOrigin, float angle, Color fillColor, GradientType fillGradientType, Color fillSecondaryColor, MapHatchStyle fillHatchStyle);
    internal GraphicsPath CreateMarker(PointF point, float markerWidth, float markerHeight, MarkerStyle markerStyle);
    internal PointF[] CreateStarPolygon(RectangleF rectReal, int numberOfCorners);
    internal void DrawMarkerRel(PointF point, MarkerStyle markerStyle, int markerSize, Color markerColor, GradientType markerGradientType, MapHatchStyle markerHatchStyle, Color markerSecondaryColor, MapDashStyle markerBorderStyle, Color markerBorderColor, int markerBorderSize, string markerImage, Color markerImageTranspColor, int shadowSize, Color shadowColor, RectangleF imageScaleRect);
    internal void DrawMarkerAbs(PointF point, MarkerStyle markerStyle, int markerSize, Color markerColor, GradientType markerGradientType, MapHatchStyle markerHatchStyle, Color markerSecondaryColor, MapDashStyle markerBorderStyle, Color markerBorderColor, int markerBorderSize, string markerImage, Color markerImageTranspColor, int shadowSize, Color shadowColor, RectangleF imageScaleRect, bool forceAntiAlias, float angle);
    internal Size MeasureStringAbs(string text, Font font);
    internal Size MeasureStringAbs(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    internal void DrawStringAbs(string text, Font font, Brush brush, PointF absPosition, StringFormat format, int angle);
    internal void DrawStringAbs(string text, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    internal SizeF MeasureStringRel(string text, Font font);
    internal SizeF MeasureStringRel(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    internal void DrawStringRel(string text, Font font, Brush brush, PointF position, StringFormat format, int angle);
    internal void DrawStringRel(string text, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    internal void DrawStringRel(string text, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format, int angle);
    internal void FillRectangleRel(RectangleF rectF, Color backColor, MapHatchStyle backHatchStyle, string backImage, MapImageWrapMode backImageMode, Color backImageTranspColor, MapImageAlign backImageAlign, GradientType backGradientType, Color backSecondaryColor, Color borderColor, int borderWidth, MapDashStyle borderStyle, Color shadowColor, int shadowOffset, PenAlignment penAlignment);
    internal void FillRectangleRel(RectangleF rectF, Color backColor, MapHatchStyle backHatchStyle, string backImage, MapImageWrapMode backImageMode, Color backImageTranspColor, MapImageAlign backImageAlign, GradientType backGradientType, Color backSecondaryColor, Color borderColor, int borderWidth, MapDashStyle borderStyle, Color shadowColor, int shadowOffset, PenAlignment penAlignment, bool circular, int circularSectorsCount, bool circle3D);
    internal void FillRectangleShadowAbs(RectangleF rect, Color shadowColor, float shadowOffset, Color backColor);
    internal void FillRectangleShadowAbs(RectangleF rect, Color shadowColor, float shadowOffset, Color backColor, bool circular, int circularSectorsCount);
    internal void DrawCircleAbs(Pen pen, Brush brush, RectangleF position, int polygonSectorsNumber, bool circle3D);
    internal void DrawRectangleRel(Pen pen, RectangleF rect);
    internal Brush GetSector3DBrush(Brush brush, float curentSector, float sectorSize);
    internal Color GetBrightGradientColor(Color beginColor, double position);
    internal void FillRectangleAbs(RectangleF rect, Color backColor, MapHatchStyle backHatchStyle, string backImage, MapImageWrapMode backImageMode, Color backImageTranspColor, MapImageAlign backImageAlign, GradientType backGradientType, Color backSecondaryColor, Color borderColor, int borderWidth, MapDashStyle borderStyle, PenAlignment penAlignment);
    internal void DrawPathShadowAbs(GraphicsPath path, Color shadowColor, float shadowWidth);
    internal void DrawPathAbs(GraphicsPath path, Color backColor, MapHatchStyle backHatchStyle, string backImage, MapImageWrapMode backImageMode, Color backImageTranspColor, MapImageAlign backImageAlign, GradientType backGradientType, Color backSecondaryColor, Color borderColor, int borderWidth, MapDashStyle borderStyle, PenAlignment penAlignment);
    public PointF PixelsToPercents(PointF pointInPixels);
    public PointF PercentsToPixels(PointF pointInPercents);
    public SizeF PixelsToPercents(SizeF sizeInPixels);
    public SizeF PercentsToPixels(SizeF sizeInPercents);
    public MapPoint PixelsToGeographic(PointF pointInPixels);
    public PointF GeographicToPixels(MapPoint pointOnMap);
    internal float GetRelativeX(float absoluteX);
    internal float GetRelativeY(float absoluteY);
    internal float GetRelativeWidth(float absoluteWidth);
    internal float GetRelativeHeight(float absoluteHeight);
    internal float GetAbsoluteX(float relativeX);
    internal float GetAbsoluteY(float relativeY);
    internal float GetAbsoluteWidth(float relativeWidth);
    internal float GetAbsoluteHeight(float relativeHeight);
    public RectangleF GetRelativeRectangle(RectangleF absolute);
    public PointF GetRelativePoint(PointF absolute);
    public SizeF GetRelativeSize(SizeF size);
    internal float GetAbsoluteDimension(float relative);
    public PointF GetAbsolutePoint(PointF relative);
    public RectangleF GetAbsoluteRectangle(RectangleF relative);
    public SizeF GetAbsoluteSize(SizeF relative);
    internal RectangleF GetBorder3DAdjustedRect(Frame frameAttr);
    internal GraphicsPath CreateRoundedRectPath(RectangleF rect, Single[] cornerRadius);
    internal void DrawRoundedRectShadowAbs(RectangleF rect, Single[] cornerRadius, float radius, Color centerColor, Color surroundColor, float shadowScale);
    internal void Draw3DBorderRel(Frame borderSkin, RectangleF rect, Color borderColor, Color backColor);
    internal void Draw3DBorderAbs(Frame borderSkin, RectangleF absRect, Color borderColor, Color backColor);
    internal void Draw3DBorderRel(Frame borderSkin, RectangleF rect, Color backColor, MapHatchStyle backHatchStyle, string backImage, MapImageWrapMode backImageMode, Color backImageTranspColor, MapImageAlign backImageAlign, GradientType backGradientType, Color backSecondaryColor, Color borderColor, int borderWidth, MapDashStyle borderStyle);
    internal void Draw3DBorderAbs(Frame borderSkin, RectangleF absRect, Color backColor, MapHatchStyle backHatchStyle, string backImage, MapImageWrapMode backImageMode, Color backImageTranspColor, MapImageAlign backImageAlign, GradientType backGradientType, Color backSecondaryColor, Color borderColor, int borderWidth, MapDashStyle borderStyle);
    internal void DrawPieRel(RectangleF rect, float startAngle, float sweepAngle, Color backColor, MapHatchStyle backHatchStyle, string backImage, MapImageWrapMode backImageMode, Color backImageTranspColor, MapImageAlign backImageAlign, GradientType backGradientType, Color backSecondaryColor, Color borderColor, int borderWidth, MapDashStyle borderStyle, PenAlignment penAlignment, bool shadow, double shadowOffset, bool doughnut, float doughnutRadius, bool explodedShadow);
    private void DrawPieSoftShadow(double shadowOffset, float startAngle, float sweepAngle, bool explodedShadow, RectangleF absRect, Color backColor);
    internal void DrawImageRel(string name, RectangleF position);
    internal static RectangleF Round(RectangleF rect);
    internal void SetPictureSize(int width, int height);
    internal void CreateDrawRegion(RectangleF rect);
    internal void CreateContentDrawRegion(Viewport viewport, PointF gridSectionOffset);
    internal void RestoreDrawRegion();
    public virtual void Close();
    internal void Dispose();
    public Graphics get_Graphics();
    public void set_Graphics(Graphics value);
    internal AntiAliasing get_AntiAliasing();
    internal void set_AntiAliasing(AntiAliasing value);
    internal void SetClip(RectangleF region);
    internal float get_ScaleFactorX();
    internal float get_ScaleFactorY();
    internal static Color GetGradientColor(Color beginColor, Color endColor, double dPosition);
    internal Pen GetSelectionPen(bool designTimeSelection, Color borderColor);
    internal Brush GetDesignTimeSelectionFillBrush();
    internal Pen GetDesignTimeSelectionBorderPen();
    internal void DrawSelection(RectangleF rect, bool designTimeSelection, Color borderColor, Color markerColor);
    internal void DrawSelection(RectangleF rect, float inflateBy, bool designTimeSelection, Color borderColor, Color markerColor);
    internal void DrawSelectionMarkers(PointF[] markerPositions, bool designTimeSelection, Color borderColor, Color markerColor);
}
internal class Microsoft.Reporting.Map.WebForms.MapGraphState : object {
    internal GraphicsState state;
    internal int width;
    internal int height;
    internal MapGraphState(GraphicsState state, int width, int height);
}
internal enum Microsoft.Reporting.Map.WebForms.MapHatchStyle : Enum {
    public int value__;
    public static MapHatchStyle None;
    public static MapHatchStyle BackwardDiagonal;
    public static MapHatchStyle Cross;
    public static MapHatchStyle DarkDownwardDiagonal;
    public static MapHatchStyle DarkHorizontal;
    public static MapHatchStyle DarkUpwardDiagonal;
    public static MapHatchStyle DarkVertical;
    public static MapHatchStyle DashedDownwardDiagonal;
    public static MapHatchStyle DashedHorizontal;
    public static MapHatchStyle DashedUpwardDiagonal;
    public static MapHatchStyle DashedVertical;
    public static MapHatchStyle DiagonalBrick;
    public static MapHatchStyle DiagonalCross;
    public static MapHatchStyle Divot;
    public static MapHatchStyle DottedDiamond;
    public static MapHatchStyle DottedGrid;
    public static MapHatchStyle ForwardDiagonal;
    public static MapHatchStyle Horizontal;
    public static MapHatchStyle HorizontalBrick;
    public static MapHatchStyle LargeCheckerBoard;
    public static MapHatchStyle LargeConfetti;
    public static MapHatchStyle LargeGrid;
    public static MapHatchStyle LightDownwardDiagonal;
    public static MapHatchStyle LightHorizontal;
    public static MapHatchStyle LightUpwardDiagonal;
    public static MapHatchStyle LightVertical;
    public static MapHatchStyle NarrowHorizontal;
    public static MapHatchStyle NarrowVertical;
    public static MapHatchStyle OutlinedDiamond;
    public static MapHatchStyle Percent05;
    public static MapHatchStyle Percent10;
    public static MapHatchStyle Percent20;
    public static MapHatchStyle Percent25;
    public static MapHatchStyle Percent30;
    public static MapHatchStyle Percent40;
    public static MapHatchStyle Percent50;
    public static MapHatchStyle Percent60;
    public static MapHatchStyle Percent70;
    public static MapHatchStyle Percent75;
    public static MapHatchStyle Percent80;
    public static MapHatchStyle Percent90;
    public static MapHatchStyle Plaid;
    public static MapHatchStyle Shingle;
    public static MapHatchStyle SmallCheckerBoard;
    public static MapHatchStyle SmallConfetti;
    public static MapHatchStyle SmallGrid;
    public static MapHatchStyle SolidDiamond;
    public static MapHatchStyle Sphere;
    public static MapHatchStyle Trellis;
    public static MapHatchStyle Vertical;
    public static MapHatchStyle Wave;
    public static MapHatchStyle Weave;
    public static MapHatchStyle WideDownwardDiagonal;
    public static MapHatchStyle WideUpwardDiagonal;
    public static MapHatchStyle ZigZag;
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.MapImageConverter")]
internal class Microsoft.Reporting.Map.WebForms.MapImage : DockablePanel {
    private ResizeMode resizeMode;
    private string image;
    private Color imageTransColor;
    private float shadowOffset;
    private float angle;
    private float transparency;
    private object mapAreaTag;
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeMapImage_ToolTip")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeMapImage_Href")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeMapImage_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeMapImage_Name")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
[SerializationVisibilityAttribute("1")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapImage_Visible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeMapImage_ResizeMode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ResizeMode ResizeMode { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeMapImage_Image")]
[DefaultValueAttribute("")]
public string Image { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeMapImage_ImageTransColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageTransColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapImage_ShadowOffset")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("1")]
public float ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Position")]
[SRDescriptionAttribute("DescriptionAttributeMapImage_Angle")]
[DefaultValueAttribute("0")]
public float Angle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeMapImage_Transparency")]
[DefaultValueAttribute("0")]
public float Transparency { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapImage_BorderStyle")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapDashStyle BorderStyle { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public GradientType BackGradientType { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public Color BackSecondaryColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public MapHatchStyle BackHatchStyle { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public int BackShadowOffset { get; public set; }
    internal Position Position { get; }
    private object Microsoft.Reporting.Map.WebForms.IImageMapProvider.Tag { get; private set; }
    internal MapImage(CommonElements common);
    public virtual string get_ToolTip();
    public virtual void set_ToolTip(string value);
    public sealed virtual string get_Href();
    public sealed virtual void set_Href(string value);
    public virtual string get_MapAreaAttributes();
    public virtual void set_MapAreaAttributes(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public ResizeMode get_ResizeMode();
    public void set_ResizeMode(ResizeMode value);
    public string get_Image();
    public void set_Image(string value);
    public Color get_ImageTransColor();
    public void set_ImageTransColor(Color value);
    public float get_ShadowOffset();
    public void set_ShadowOffset(float value);
    public float get_Angle();
    public void set_Angle(float value);
    public float get_Transparency();
    public void set_Transparency(float value);
    public virtual MapDashStyle get_BorderStyle();
    public virtual void set_BorderStyle(MapDashStyle value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual GradientType get_BackGradientType();
    public virtual void set_BackGradientType(GradientType value);
    public virtual Color get_BackSecondaryColor();
    public virtual void set_BackSecondaryColor(Color value);
    public virtual MapHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(MapHatchStyle value);
    public virtual int get_BackShadowOffset();
    public virtual void set_BackShadowOffset(int value);
    internal Position get_Position();
    public virtual string ToString();
    internal virtual bool ShouldRenderBackground();
    internal virtual void Render(MapGraphics g);
    internal void DrawImage(MapGraphics g, string imageName, bool drawShadow);
    internal GraphicsPath GetPath(MapGraphics g);
    internal Pen GetPen();
    internal virtual object GetDefaultPropertyValue(string prop, object currentValue);
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IToolTipProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetHref();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetMapAreaAttributes();
    private sealed virtual override object Microsoft.Reporting.Map.WebForms.IImageMapProvider.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IImageMapProvider.set_Tag(object value);
}
internal enum Microsoft.Reporting.Map.WebForms.MapImageAlign : Enum {
    public int value__;
    public static MapImageAlign TopLeft;
    public static MapImageAlign Top;
    public static MapImageAlign TopRight;
    public static MapImageAlign Right;
    public static MapImageAlign BottomRight;
    public static MapImageAlign Bottom;
    public static MapImageAlign BottomLeft;
    public static MapImageAlign Left;
    public static MapImageAlign Center;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.MapImageCollection : NamedCollection {
    private MapImage Item { get; private set; }
    private MapImage Item { get; private set; }
    public MapImage Item { get; public set; }
    internal MapImageCollection(NamedElement parent, CommonElements common);
    public MapImage Add(string name);
    public int Add(MapImage value);
    public void Remove(MapImage value);
    private MapImage get_Item(int index);
    private void set_Item(int index, MapImage value);
    private MapImage get_Item(string name);
    private void set_Item(string name, MapImage value);
    public MapImage get_Item(object obj);
    public void set_Item(object obj, MapImage value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    protected virtual void OnInsertComplete(int index, object value);
}
internal class Microsoft.Reporting.Map.WebForms.MapImageConverter : CollectionItemTypeConverter {
}
internal enum Microsoft.Reporting.Map.WebForms.MapImageFormat : Enum {
    public int value__;
    public static MapImageFormat Jpeg;
    public static MapImageFormat Png;
    public static MapImageFormat Bmp;
    public static MapImageFormat Tiff;
    public static MapImageFormat Gif;
    public static MapImageFormat Svg;
    public static MapImageFormat Emf;
    public static MapImageFormat Flash;
}
internal enum Microsoft.Reporting.Map.WebForms.MapImageWrapMode : Enum {
    public int value__;
    public static MapImageWrapMode Scaled;
    public static MapImageWrapMode Tile;
    public static MapImageWrapMode TileFlipX;
    public static MapImageWrapMode TileFlipXY;
    public static MapImageWrapMode TileFlipY;
    public static MapImageWrapMode Unscaled;
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.MapLabelConverter")]
internal class Microsoft.Reporting.Map.WebForms.MapLabel : AutoSizePanel {
    private ContentAlignment textAlignment;
    private Font font;
    private Color textColor;
    private string text;
    private int textShadowOffset;
    private float angle;
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeMapLabel_ToolTip")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeMapLabel_Href")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeMapLabel_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeMapLabel_Name")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
[SerializationVisibilityAttribute("1")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeMapLabel_TextAlignment")]
[DefaultValueAttribute]
public ContentAlignment TextAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapLabel_Visible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapLabel_Font")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 12pt")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapLabel_BorderStyle")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapLabel_BackColor")]
[NotifyParentPropertyAttribute("True")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapLabel_TextColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color TextColor { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeMapLabel_BackGradientType")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapLabel_BackSecondaryColor")]
[NotifyParentPropertyAttribute("True")]
public Color BackSecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapLabel_BackHatchStyle")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
public MapHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeMapLabel_Text")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Text")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapLabel_BackShadowOffset")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("0")]
public int BackShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeMapLabel_TextShadowOffset")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("0")]
public int TextShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Position")]
[SRDescriptionAttribute("DescriptionAttributeMapLabel_Angle")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.FloatAutoValueConverter")]
[DefaultValueAttribute("не число")]
public float Angle { get; public set; }
    internal Position Position { get; }
    internal bool IsEmpty { get; }
    internal MapLabel(CommonElements common);
    public virtual string get_ToolTip();
    public virtual void set_ToolTip(string value);
    public virtual string get_Href();
    public virtual void set_Href(string value);
    public virtual string get_MapAreaAttributes();
    public virtual void set_MapAreaAttributes(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public ContentAlignment get_TextAlignment();
    public void set_TextAlignment(ContentAlignment value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public Font get_Font();
    public void set_Font(Font value);
    public virtual MapDashStyle get_BorderStyle();
    public virtual void set_BorderStyle(MapDashStyle value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public virtual GradientType get_BackGradientType();
    public virtual void set_BackGradientType(GradientType value);
    public virtual Color get_BackSecondaryColor();
    public virtual void set_BackSecondaryColor(Color value);
    public virtual MapHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(MapHatchStyle value);
    public string get_Text();
    public void set_Text(string value);
    public virtual int get_BackShadowOffset();
    public virtual void set_BackShadowOffset(int value);
    public int get_TextShadowOffset();
    public void set_TextShadowOffset(int value);
    public float get_Angle();
    public void set_Angle(float value);
    internal Position get_Position();
    public virtual string ToString();
    internal virtual bool ShouldRenderBackground();
    internal virtual void Render(MapGraphics g);
    private void DrawText(MapGraphics g, bool drawShadow);
    private RectangleF DetermineTextRectangle(MapGraphics g, StringFormat stringFormat);
    private StringFormat GetStringFormat();
    internal GraphicsPath GetPath(MapGraphics g);
    internal Brush GetBackBrush(MapGraphics g);
    internal Pen GetPen();
    internal virtual object GetDefaultPropertyValue(string prop, object currentValue);
    internal virtual bool get_IsEmpty();
    internal virtual SizeF GetOptimalSize(MapGraphics g, SizeF maxSizeAbs);
    private SizeF DetermineTextSizeAfterRotation(MapGraphics g);
    internal SizeF CalculateRotatedSize(SizeF unrotatedSize, float andgleOfRotation);
    internal float DetermineAngle();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.MapLabelCollection : NamedCollection {
    private MapLabel Item { get; private set; }
    private MapLabel Item { get; private set; }
    public MapLabel Item { get; public set; }
    internal MapLabelCollection(NamedElement parent, CommonElements common);
    public MapLabel Add(string name);
    public int Add(MapLabel value);
    public void Remove(MapLabel value);
    private MapLabel get_Item(int index);
    private void set_Item(int index, MapLabel value);
    private MapLabel get_Item(string name);
    private void set_Item(string name, MapLabel value);
    public MapLabel get_Item(object obj);
    public void set_Item(object obj, MapLabel value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    protected virtual void OnInsertComplete(int index, object value);
    internal virtual void Invalidate();
}
internal class Microsoft.Reporting.Map.WebForms.MapLabelConverter : CollectionItemTypeConverter {
}
internal class Microsoft.Reporting.Map.WebForms.MapLimits : MapObject {
    private bool minimumXIsNaN;
    private double minimumX;
    private bool minimumYIsNaN;
    private double minimumY;
    private bool maximumXIsNaN;
    private double maximumX;
    private bool maximumYIsNaN;
    private double maximumY;
    [SRCategoryAttribute("CategoryAttribute_Coordinates")]
[SRDescriptionAttribute("DescriptionAttributeMapLimits_MinimumX")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DoubleAutoValueConverter")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("не число")]
public double MinimumX { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Coordinates")]
[SRDescriptionAttribute("DescriptionAttributeMapLimits_MinimumY")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DoubleAutoValueConverter")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("не число")]
public double MinimumY { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Coordinates")]
[SRDescriptionAttribute("DescriptionAttributeMapLimits_MaximumX")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DoubleAutoValueConverter")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("не число")]
public double MaximumX { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Coordinates")]
[SRDescriptionAttribute("DescriptionAttributeMapLimits_MaximumY")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DoubleAutoValueConverter")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("не число")]
public double MaximumY { get; public set; }
    internal MapLimits(object parent);
    public double get_MinimumX();
    public void set_MinimumX(double value);
    public double get_MinimumY();
    public void set_MinimumY(double value);
    public double get_MaximumX();
    public void set_MaximumX(double value);
    public double get_MaximumY();
    public void set_MaximumY(double value);
    internal virtual void Invalidate();
    internal bool IsMinimumXNaN();
    internal bool IsMinimumYNaN();
    internal bool IsMaximumXNaN();
    internal bool IsMaximumYNaN();
}
internal class Microsoft.Reporting.Map.WebForms.MapLocation : MapObject {
    private PointF point;
    private bool docked;
    private bool defaultValues;
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeMapLocation_X")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public float X { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeMapLocation_Y")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public float Y { get; public set; }
    internal bool Docked { get; internal set; }
    internal bool DefaultValues { get; internal set; }
    private MapLocation DefaultLocation { get; }
    internal MapLocation(object parent);
    internal MapLocation(object parent, float x, float y);
    internal MapLocation(MapLocation location);
    public float get_X();
    public void set_X(float value);
    protected void ResetX();
    protected bool ShouldSerializeX();
    public float get_Y();
    public void set_Y(float value);
    protected void ResetY();
    protected bool ShouldSerializeY();
    internal bool get_Docked();
    internal void set_Docked(bool value);
    internal bool get_DefaultValues();
    internal void set_DefaultValues(bool value);
    private MapLocation get_DefaultLocation();
    public virtual string ToString();
    public PointF ToPoint();
    public static PointF op_Implicit(MapLocation location);
    public sealed virtual object Clone();
    internal PointF GetPointF();
}
internal class Microsoft.Reporting.Map.WebForms.MapObject : object {
    internal bool initialized;
    private object parent;
    private CommonElements common;
    protected bool disposed;
    internal object Parent { get; internal set; }
    internal CommonElements Common { get; internal set; }
    internal MapObject(object parent);
    internal virtual object get_Parent();
    internal virtual void set_Parent(object value);
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
    internal virtual void Invalidate();
    internal virtual void Invalidate(RectangleF rect);
    internal virtual void InvalidateViewport(bool invalidateGridSections);
    internal virtual void InvalidateDistanceScalePanel();
    internal virtual void InvalidateViewport();
    internal virtual void BeginInit();
    internal virtual void EndInit();
    internal virtual void ReconnectData(bool exact);
    internal virtual void Notify(MessageType msg, NamedElement element, object param);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnDispose();
}
internal class Microsoft.Reporting.Map.WebForms.MapPaintEvent : MulticastDelegate {
    public MapPaintEvent(object object, IntPtr method);
    public virtual void Invoke(object sender, MapPaintEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MapPaintEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.Map.WebForms.MapPaintEventArgs : object {
    private MapControl control;
    private NamedElement mapElement;
    private MapGraphics graphics;
    internal MapControl MapControl { get; }
    public NamedElement MapElement { get; }
    public MapGraphics Graphics { get; }
    internal MapPaintEventArgs(MapControl control, NamedElement mapElement, MapGraphics graphics);
    internal MapControl get_MapControl();
    public NamedElement get_MapElement();
    public MapGraphics get_Graphics();
}
internal class Microsoft.Reporting.Map.WebForms.MapParameters : SvgParameters {
    internal Color mapBrushColor;
    internal Color mapBrushSecondColor;
    internal Matrix mapMatrix;
    internal Font mapFont;
    internal StringFormat mapStringFormat;
    internal SvgGradientType mapSvgGradientType;
    internal Size mapPictureSize;
    internal WrapMode imageWrapMode;
    private SvgFillType svgFillType;
    private Color mapPenColor;
    private float mapPenWidth;
    private SvgDashStyle mapDashStyle;
    private FillMode tempFillMode;
    private Brush brush;
    private Pen pen;
    protected Color BrushColor { get; }
    unknown Brush Brush {public set; }
    unknown Pen Pen {public set; }
    protected Color BrushSecondColor { get; }
    protected SvgGradientType GradientType { get; }
    protected SvgFillType FillType { get; }
    protected Color PenColor { get; }
    protected double PenWidth { get; }
    protected SvgDashStyle DashStyle { get; }
    protected Matrix Transform { get; }
    protected Font Font { get; }
    protected StringFormat StringFormat { get; }
    public Size PictureSize { get; public set; }
    protected FillMode FillMode { get; protected set; }
    protected SvgLineCapStyle SvgLineCap { get; }
    protected SvgImageWrapMode ImageWrapMode { get; }
    protected Color TextColor { get; }
    protected virtual Color get_BrushColor();
    public void set_Brush(Brush value);
    public void set_Pen(Pen value);
    protected virtual Color get_BrushSecondColor();
    protected virtual SvgGradientType get_GradientType();
    protected virtual SvgFillType get_FillType();
    protected virtual Color get_PenColor();
    protected virtual double get_PenWidth();
    protected virtual SvgDashStyle get_DashStyle();
    protected virtual Matrix get_Transform();
    protected virtual Font get_Font();
    protected virtual StringFormat get_StringFormat();
    public virtual Size get_PictureSize();
    public virtual void set_PictureSize(Size value);
    protected virtual FillMode get_FillMode();
    protected virtual void set_FillMode(FillMode value);
    protected virtual SvgLineCapStyle get_SvgLineCap();
    protected virtual SvgImageWrapMode get_ImageWrapMode();
    protected virtual Color get_TextColor();
    protected string ToUSString(float number);
    protected string ToUSString(double number);
    protected virtual string GetX(double x);
    protected virtual string GetY(double y);
    protected virtual string GetX(PointF point);
    protected virtual string GetX(RectangleF rectangle);
    protected virtual string GetWidth(RectangleF rectangle);
    protected virtual string GetHeight(RectangleF rectangle);
    protected virtual string GetY(PointF point);
    protected virtual string GetY(RectangleF rectangle);
    private void SetBrush();
    private void SetPen();
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.MapPointConverter")]
internal class Microsoft.Reporting.Map.WebForms.MapPoint : ValueType {
    private double x;
    private double y;
    [SRDescriptionAttribute("DescriptionAttributeMapPoint_X")]
public double X { get; public set; }
    [SRDescriptionAttribute("DescriptionAttributeMapPoint_Y")]
public double Y { get; public set; }
    public MapPoint(double x, double y);
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public PointF ToPointF();
}
internal class Microsoft.Reporting.Map.WebForms.MapPointConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
}
[DescriptionAttribute("Map serializer class.")]
[DefaultPropertyAttribute("Format")]
internal class Microsoft.Reporting.Map.WebForms.MapSerializer : object {
    private IServiceContainer serviceContainer;
    private MapCore mapObject;
    private SerializerBase serializer;
    private SerializationFormat format;
    private SerializationContent content;
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[DefaultValueAttribute("Microsoft.Reporting.Map.WebForms.SerializationContent", "All")]
[SRDescriptionAttribute("DescriptionAttributeMapSerializer_Content")]
public SerializationContent Content { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[DefaultValueAttribute("Microsoft.Reporting.Map.WebForms.SerializationFormat", "Xml")]
[SRDescriptionAttribute("DescriptionAttributeMapSerializer_Format")]
public SerializationFormat Format { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributeMapSerializer_ResetWhenLoading")]
public bool ResetWhenLoading { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeMapSerializer_IgnoreUnknownXmlAttributes")]
public bool IgnoreUnknownXmlAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeMapSerializer_TemplateMode")]
public bool TemplateMode { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeMapSerializer_SerializableContent")]
public string SerializableContent { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("DescriptionAttributeMapSerializer_NonSerializableContent")]
public string NonSerializableContent { get; public set; }
    public MapSerializer(IServiceContainer container);
    [EditorBrowsableAttribute("1")]
public sealed virtual object GetService(Type serviceType);
    public SerializationContent get_Content();
    public void set_Content(SerializationContent value);
    public SerializationFormat get_Format();
    public void set_Format(SerializationFormat value);
    public bool get_ResetWhenLoading();
    public void set_ResetWhenLoading(bool value);
    public bool get_IgnoreUnknownXmlAttributes();
    public void set_IgnoreUnknownXmlAttributes(bool value);
    public bool get_TemplateMode();
    public void set_TemplateMode(bool value);
    public string get_SerializableContent();
    public void set_SerializableContent(string value);
    public string get_NonSerializableContent();
    public void set_NonSerializableContent(string value);
    public void Reset();
    public void Save(string fileName);
    public void Save(Stream stream);
    public void Save(XmlDocument document);
    public void Save(XmlWriter writer);
    public void Save(TextWriter writer);
    public void Load(string fileName);
    public void Load(Stream stream);
    public void Load(XmlReader reader);
    public void Load(TextReader reader);
    protected void SetSerializableConentFromFlags();
    internal string GetFlagContentString(SerializationContent flag, bool serializable);
    internal MapCore GetMapObject();
}
internal class Microsoft.Reporting.Map.WebForms.MapSimplifier : object {
    private Dictionary`2<MapPoint, MapPoint> simplifiedPoints;
    public void Reset();
    public void Simplify(MapCore map, double resolution);
    public void Simplify(IEnumerable`1<ISpatialElement> elements, double resolution);
    public void Simplify(Shape shape, double resolution);
    public void Simplify(Path path, double resolution);
    private ReducedPointList ReducePoints(MapPoint[] points, double resolution);
}
internal class Microsoft.Reporting.Map.WebForms.MapSize : MapObject {
    private SizeF size;
    private bool autoSize;
    private bool defaultValues;
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeMapSize_Width")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public float Width { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeMapSize_Height")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public float Height { get; public set; }
    internal bool AutoSize { get; internal set; }
    internal bool DefaultValues { get; internal set; }
    private MapSize DefaultSize { get; }
    internal MapSize(object parent);
    internal MapSize(object parent, float width, float height);
    internal MapSize(object parent, SizeF size);
    internal MapSize(MapSize size);
    public float get_Width();
    public void set_Width(float value);
    protected void ResetWidth();
    protected bool ShouldSerializeWidth();
    public float get_Height();
    public void set_Height(float value);
    protected void ResetHeight();
    protected bool ShouldSerializeHeight();
    internal bool get_AutoSize();
    internal void set_AutoSize(bool value);
    internal bool get_DefaultValues();
    internal void set_DefaultValues(bool value);
    private MapSize get_DefaultSize();
    public virtual string ToString();
    public SizeF ToSize();
    public static SizeF op_Implicit(MapSize size);
    internal SizeF GetSizeF();
    public sealed virtual object Clone();
}
internal class Microsoft.Reporting.Map.WebForms.MarginExpandableObjectConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[DescriptionAttribute("Chart element margins.")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.MarginExpandableObjectConverter")]
internal class Microsoft.Reporting.Map.WebForms.Margins : object {
    private int top;
    private int bottom;
    private int left;
    private int right;
    internal CommonElements Common;
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeMargins_Top")]
[RefreshPropertiesAttribute("1")]
[NotifyParentPropertyAttribute("True")]
public int Top { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeMargins_Bottom")]
[RefreshPropertiesAttribute("1")]
[NotifyParentPropertyAttribute("True")]
public int Bottom { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[DefaultValueAttribute("0")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("DescriptionAttributeMargins_Left")]
[NotifyParentPropertyAttribute("True")]
public int Left { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("DescriptionAttributeMargins_Right")]
[RefreshPropertiesAttribute("1")]
[NotifyParentPropertyAttribute("True")]
public int Right { get; public set; }
    public Margins(int top, int bottom, int left, int right);
    public int get_Top();
    public void set_Top(int value);
    public int get_Bottom();
    public void set_Bottom(int value);
    public int get_Left();
    public void set_Left(int value);
    public int get_Right();
    public void set_Right(int value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool IsEmpty();
    public RectangleF ToRectangleF();
    public static Margins Parse(string text);
    private void Invalidate();
}
internal class Microsoft.Reporting.Map.WebForms.MarkerPosition : object {
    internal float position;
    internal double value;
    internal Placement placement;
    internal MarkerPosition(float position, double value, Placement placement);
    internal static bool IsExistsInArray(ArrayList array, MarkerPosition markerPos);
    internal static double Snap(ArrayList array, double value);
    public sealed virtual int CompareTo(object obj);
}
internal enum Microsoft.Reporting.Map.WebForms.MarkerStyle : Enum {
    public int value__;
    public static MarkerStyle None;
    public static MarkerStyle Rectangle;
    public static MarkerStyle Triangle;
    public static MarkerStyle Circle;
    public static MarkerStyle Diamond;
    public static MarkerStyle Trapezoid;
    public static MarkerStyle Star;
    public static MarkerStyle Wedge;
    public static MarkerStyle Pentagon;
    public static MarkerStyle PushPin;
}
internal class Microsoft.Reporting.Map.WebForms.MarkerStyleAttrib : object {
    public GraphicsPath path;
    public Brush brush;
    public void Dispose();
}
internal class Microsoft.Reporting.Map.WebForms.Matrix3x3 : object {
    public Double[0...,0...] Elements;
    public static Matrix3x3 op_Multiply(Matrix3x3 matrixA, Matrix3x3 matrixB);
    public Point3D TransformPoint(Point3D point);
}
internal enum Microsoft.Reporting.Map.WebForms.MessageType : Enum {
    public int value__;
    public static MessageType NamedElementAdded;
    public static MessageType NamedElementRemove;
    public static MessageType NamedElementRename;
    public static MessageType DataInvalidated;
    public static MessageType PrepareSnapShot;
}
internal class Microsoft.Reporting.Map.WebForms.MultiPoint : object {
    public Double[] Box;
    public int NumPoints;
    public ShapePoint[] Points;
    public void Read(BinaryReader reader);
}
[ListBindableAttribute("False")]
internal class Microsoft.Reporting.Map.WebForms.NamedCollection : CollectionBase {
    internal CommonElements common;
    internal Type elementType;
    internal NamedElement parent;
    internal bool editModeActive;
    private Hashtable nameToObject;
    private Hashtable nameToIndex;
    private int suspendUpdatesCount;
    private bool suppressAddedAndRemovedEvents;
    protected bool disposed;
    public NamedElement ParentElement { get; }
    internal CommonElements Common { get; internal set; }
    internal bool SuppressAddedAndRemovedEvents { get; internal set; }
    internal bool IsSuspended { get; }
    internal NamedCollection(NamedElement parent, CommonElements common);
    public NamedElement get_ParentElement();
    internal CommonElements get_Common();
    internal void set_Common(CommonElements value);
    internal bool get_SuppressAddedAndRemovedEvents();
    internal void set_SuppressAddedAndRemovedEvents(bool value);
    public int GetIndex(string name);
    public NamedElement GetByName(string name);
    public NamedElement GetByIndex(int index);
    public virtual int IndexOf(object o);
    internal void SuspendUpdates();
    internal void ResumeUpdates();
    internal bool get_IsSuspended();
    protected virtual void OnClear();
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    private void CheckForTypeDublicatesAndName(object value);
    internal virtual void IsValidNameCheck(string name, NamedElement element);
    internal virtual bool IsUniqueName(string name);
    internal string GenerateUniqueName(NamedElement element);
    internal NamedElement GetByNameCheck(string name);
    internal bool SetByName(string name, NamedElement element);
    internal void SetByNameCheck(string name, NamedElement element);
    internal virtual bool IsCorrectType(object value);
    internal virtual void BeginInit();
    internal virtual void EndInit();
    internal virtual void ReconnectData(bool exact);
    internal virtual string GetElementNameFormat(NamedElement el);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual void Invalidate();
    internal virtual string GetCollectionName();
    internal virtual void Notify(MessageType msg, NamedElement element, object param);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnDispose();
    public virtual object Clone();
}
internal abstract class Microsoft.Reporting.Map.WebForms.NamedElement : object {
    private string name;
    internal CommonElements common;
    internal NamedCollection collection;
    internal bool initialized;
    private object tag;
    internal bool disposed;
    [BrowsableAttribute("False")]
[DescriptionAttribute("Indicates that map area is custom.")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
internal CommonElements Common { get; internal set; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeNamedElement_Collection")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
internal NamedCollection Collection { get; internal set; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("DescriptionAttributeNamedElement_ParentElement")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public NamedElement ParentElement { get; }
    internal string DefaultName { get; }
    [SRDescriptionAttribute("DescriptionAttributeNamedElement_Name")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public object Tag { get; public set; }
    internal NamedElement(CommonElements common);
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
    internal virtual NamedCollection get_Collection();
    internal virtual void set_Collection(NamedCollection value);
    public virtual NamedElement get_ParentElement();
    internal virtual string get_DefaultName();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual object get_Tag();
    public virtual void set_Tag(object value);
    internal virtual void OnRemove();
    internal virtual void OnAdded();
    internal virtual void OnNameChanged();
    internal virtual void BeginInit();
    internal virtual void EndInit();
    internal virtual void Invalidate();
    internal virtual void Invalidate(RectangleF rect);
    internal virtual void InvalidateViewport(bool invalidateGridSections);
    internal virtual void InvalidateViewport();
    internal virtual void InvalidateDistanceScalePanel();
    internal virtual void InvalidateAndLayout();
    internal virtual void ReconnectData(bool exact);
    internal virtual void Notify(MessageType msg, NamedElement element, object param);
    internal string GetNameAsParent();
    internal string GetNameAsParent(string newName);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnDispose();
    public virtual object Clone();
    internal virtual object InitiateCopy();
    internal virtual object CloneInternals(object copy);
}
[DescriptionAttribute("Image with a unique name, saved as a resource.")]
[DefaultPropertyAttribute("Name")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.NamedImageConverter")]
internal class Microsoft.Reporting.Map.WebForms.NamedImage : NamedElement {
    private Image image;
    [SRDescriptionAttribute("DescriptionAttributeNamedImage_Image")]
public Image Image { get; public set; }
    public NamedImage(string name, Image image);
    public Image get_Image();
    public void set_Image(Image value);
    public virtual string ToString();
    internal virtual void Invalidate();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.NamedImageCollection : NamedCollection {
    private NamedImage Item { get; private set; }
    private NamedImage Item { get; private set; }
    public NamedImage Item { get; public set; }
    internal NamedImageCollection(NamedElement parent, CommonElements common);
    public int Add(NamedImage value);
    public void Remove(NamedImage value);
    private NamedImage get_Item(int index);
    private void set_Item(int index, NamedImage value);
    private NamedImage get_Item(string name);
    private void set_Item(string name, NamedImage value);
    public NamedImage get_Item(object obj);
    public void set_Item(object obj, NamedImage value);
    internal virtual string GetElementNameFormat(NamedElement el);
    internal virtual string GetDefaultElementName(NamedElement el);
}
internal class Microsoft.Reporting.Map.WebForms.NamedImageConverter : CollectionItemTypeConverter {
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DockablePanelConverter")]
internal class Microsoft.Reporting.Map.WebForms.NavigationPanel : DockablePanel {
    private static int GirdPadding;
    private static int CenterButtonCorrection;
    internal PanelButton buttonNorth;
    internal PanelButton buttonSouth;
    internal PanelButton buttonEast;
    internal PanelButton buttonWest;
    private PanelButton buttonCenter;
    private Color symbolColor;
    private Color symbolBorderColor;
    private Color buttonColor;
    private Color buttonBorderColor;
    private NavigationPanelStyle style;
    private double scrollStep;
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeNavigationPanel_SymbolColor")]
[DefaultValueAttribute("System.Drawing.Color", "LightGray")]
public Color SymbolColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeNavigationPanel_SymbolBorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "DimGray")]
public Color SymbolBorderColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeNavigationPanel_ButtonColor")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
public Color ButtonColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeNavigationPanel_ButtonBorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color ButtonBorderColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeNavigationPanel_PanelStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public NavigationPanelStyle PanelStyle { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeNavigationPanel_ScrollStep")]
[DefaultValueAttribute("10")]
public double ScrollStep { get; public set; }
    internal bool CenterButtonVisible { get; }
    internal NavigationPanel(CommonElements common);
    public Color get_SymbolColor();
    public void set_SymbolColor(Color value);
    public Color get_SymbolBorderColor();
    public void set_SymbolBorderColor(Color value);
    public Color get_ButtonColor();
    public void set_ButtonColor(Color value);
    public Color get_ButtonBorderColor();
    public void set_ButtonBorderColor(Color value);
    public NavigationPanelStyle get_PanelStyle();
    public void set_PanelStyle(NavigationPanelStyle value);
    public double get_ScrollStep();
    public void set_ScrollStep(double value);
    internal bool get_CenterButtonVisible();
    internal virtual void Render(MapGraphics g);
    internal virtual object GetDefaultPropertyValue(string prop, object currentValue);
    private void RenderButton(MapGraphics g, PanelButton button);
    private void NavigationButtonClickHandler(object sender, EventArgs e);
    private void ApplyStyle();
    private void ApplyColors();
}
internal enum Microsoft.Reporting.Map.WebForms.NavigationPanelStyle : Enum {
    public int value__;
    public static NavigationPanelStyle RectangularButtons;
    public static NavigationPanelStyle TriangularButtons;
}
internal class Microsoft.Reporting.Map.WebForms.NoNameExpandableObjectConverter : ExpandableObjectConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal enum Microsoft.Reporting.Map.WebForms.ObjectType : Enum {
    public int value__;
    public static ObjectType Shape;
    public static ObjectType Symbol;
    public static ObjectType Path;
    public static ObjectType Group;
    public static ObjectType Viewport;
    public static ObjectType Legend;
    public static ObjectType LegendCell;
    public static ObjectType NavigationPanel;
    public static ObjectType ZoomPanel;
    public static ObjectType ColorSwatchPanel;
    public static ObjectType DistanceScalePanel;
    public static ObjectType MapImage;
    public static ObjectType MapLabel;
    public static ObjectType GridAttributes;
    public static ObjectType Unknown;
}
internal class Microsoft.Reporting.Map.WebForms.Offset : MapObject {
    private MapPoint point;
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeOffset_X")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("0")]
public double X { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeOffset_Y")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("0")]
public double Y { get; public set; }
    internal Offset(object parent);
    internal Offset(object parent, double x, double y);
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual object Clone();
    internal void InvalidateCachedBounds();
    internal void ResetCachedPaths();
}
internal enum Microsoft.Reporting.Map.WebForms.Orientation : Enum {
    public int value__;
    public static Orientation Horizontal;
    public static Orientation Vertical;
    public static Orientation Auto;
}
internal class Microsoft.Reporting.Map.WebForms.Panel : NamedElement {
    private static int DefaultMarginsAllValues;
    private int zOrder;
    private PanelMargins margins;
    private MapLocation location;
    private CoordinateUnit locationUnit;
    private MapSize size;
    private CoordinateUnit sizeUnit;
    private bool visible;
    private Color borderColor;
    private MapDashStyle borderStyle;
    private int borderWidth;
    private Color backColor;
    private GradientType backGradientType;
    private Color backSecondaryColor;
    private MapHatchStyle backHatchStyle;
    private int backShadowOffset;
    private bool selected;
    private string toolTip;
    private string href;
    private string mapAreaAttributes;
    private object mapAreaTag;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("")]
public object Tag { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributePanel_ZOrder")]
[DefaultValueAttribute("0")]
public int ZOrder { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributePanel_Margins")]
[DesignerSerializationVisibilityAttribute("2")]
public PanelMargins Margins { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributePanel_Location")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.LocationConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public MapLocation Location { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributePanel_LocationUnit")]
public CoordinateUnit LocationUnit { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributePanel_Size")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.SizeConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public MapSize Size { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributePanel_SizeUnit")]
public CoordinateUnit SizeUnit { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePanel_Visible")]
[ParenthesizePropertyNameAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("False")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePanel_BorderColor")]
[NotifyParentPropertyAttribute("True")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePanel_BorderStyle")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePanel_BorderWidth")]
[NotifyParentPropertyAttribute("True")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePanel_BackColor")]
[NotifyParentPropertyAttribute("True")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePanel_BackGradientType")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.GradientEditor", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
public GradientType BackGradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePanel_BackSecondaryColor")]
[NotifyParentPropertyAttribute("True")]
public Color BackSecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePanel_BackHatchStyle")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
public MapHatchStyle BackHatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePanel_BackShadowOffset")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("2")]
public int BackShadowOffset { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributePanel_Selected")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("False")]
public bool Selected { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributePanel_ToolTip")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributePanel_Href")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributePanel_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    private object Microsoft.Reporting.Map.WebForms.IImageMapProvider.Tag { get; private set; }
    internal Panel(CommonElements common);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual object get_Tag();
    public virtual void set_Tag(object value);
    public virtual int get_ZOrder();
    public virtual void set_ZOrder(int value);
    public PanelMargins get_Margins();
    public void set_Margins(PanelMargins value);
    protected bool ShouldSerializeMargins();
    protected void ResetMargins();
    public virtual MapLocation get_Location();
    public virtual void set_Location(MapLocation value);
    protected void ResetLocation();
    protected bool ShouldSerializeLocation();
    public virtual CoordinateUnit get_LocationUnit();
    public virtual void set_LocationUnit(CoordinateUnit value);
    protected void ResetLocationUnit();
    protected bool ShouldSerializeLocationUnit();
    public virtual MapSize get_Size();
    public virtual void set_Size(MapSize value);
    protected void ResetSize();
    protected bool ShouldSerializeSize();
    public virtual CoordinateUnit get_SizeUnit();
    public virtual void set_SizeUnit(CoordinateUnit value);
    protected void ResetSizeUnit();
    protected bool ShouldSerializeSizeUnit();
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    protected void ResetBorderColor();
    protected bool ShouldSerializeBorderColor();
    public virtual MapDashStyle get_BorderStyle();
    public virtual void set_BorderStyle(MapDashStyle value);
    public virtual int get_BorderWidth();
    public virtual void set_BorderWidth(int value);
    protected void ResetBorderWidth();
    protected bool ShouldSerializeBorderWidth();
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    protected void ResetBackColor();
    protected bool ShouldSerializeBackColor();
    public virtual GradientType get_BackGradientType();
    public virtual void set_BackGradientType(GradientType value);
    protected void ResetBackGradientType();
    protected bool ShouldSerializeBackGradientType();
    public virtual Color get_BackSecondaryColor();
    public virtual void set_BackSecondaryColor(Color value);
    protected void ResetBackSecondaryColor();
    protected bool ShouldSerializeBackSecondaryColor();
    public virtual MapHatchStyle get_BackHatchStyle();
    public virtual void set_BackHatchStyle(MapHatchStyle value);
    protected void ResetBackHatchStyle();
    protected bool ShouldSerializeBackHatchStyle();
    public virtual int get_BackShadowOffset();
    public virtual void set_BackShadowOffset(int value);
    public bool get_Selected();
    public void set_Selected(bool value);
    public virtual string get_ToolTip();
    public virtual void set_ToolTip(string value);
    public virtual string get_Href();
    public virtual void set_Href(string value);
    public virtual string get_MapAreaAttributes();
    public virtual void set_MapAreaAttributes(string value);
    public SizeF GetSizeInPixels();
    public RectangleF GetBoundsInPixels();
    public void SetLocationInPixels(PointF location);
    public void SetSizeInPixels(SizeF size);
    public void SetBoundsInPixels(RectangleF bounds);
    public PointF GetLocationInPixels();
    public virtual RectangleF GetBoundRect(MapGraphics g);
    internal virtual GraphicsPath GetHotRegionPath(MapGraphics g);
    internal void SizeChanged(MapSize size);
    internal virtual void LocationChanged(MapLocation size);
    internal virtual void Render(MapGraphics g);
    internal virtual bool ShouldRenderBackground();
    internal virtual void RenderBackground(MapGraphics g);
    internal virtual void RenderBorder(MapGraphics g);
    internal virtual void SizeLocationChanged(SizeLocationChangeInfo info);
    internal void RenderPanel(MapGraphics g);
    internal virtual bool IsRenderVisible(MapGraphics g, RectangleF clipRect);
    internal PointF GetAbsoluteLocation();
    internal SizeF GetAbsoluteSize();
    internal virtual object GetDefaultPropertyValue(string prop, object currentValue);
    internal virtual bool IsVisible();
    internal bool IsMakeTransparentRequired();
    internal Color GetColorForMakeTransparent();
    protected MapCore GetMapCore();
    private sealed virtual override int Microsoft.Reporting.Map.WebForms.IZOrderedObject.GetZOrder();
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.ISelectable.DrawSelection(MapGraphics g, RectangleF clipRect, bool designTimeSelection);
    public virtual RectangleF GetSelectionRectangle(MapGraphics g, RectangleF clipRect);
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ISelectable.IsSelected();
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ISelectable.IsVisible();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IToolTipProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetHref();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetMapAreaAttributes();
    private sealed virtual override object Microsoft.Reporting.Map.WebForms.IImageMapProvider.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IImageMapProvider.set_Tag(object value);
    private sealed virtual override object Microsoft.Reporting.Map.WebForms.IDefaultValueProvider.GetDefaultValue(string prop, object currentValue);
}
internal class Microsoft.Reporting.Map.WebForms.PanelButton : MapObject {
    private static int ButtonPadding;
    private EventHandler clickEventHandler;
    private PanelButtonStyle style;
    private PanelButtonType type;
    private RectangleF bounds;
    private Color borderColor;
    private Color backColor;
    private Color symbolBorderColor;
    private Color symbolColor;
    private double intitalAutoRepeatDelay;
    private double autoRepeatDelay;
    public PanelButtonStyle Style { get; public set; }
    public PanelButtonType Type { get; public set; }
    public RectangleF Bounds { get; public set; }
    public PointF Location { get; public set; }
    public SizeF Size { get; public set; }
    public Color BorderColor { get; public set; }
    public Color BackColor { get; public set; }
    public Color SymbolBorderColor { get; public set; }
    public Color SymbolColor { get; public set; }
    public double InititalAutoRepeatDelay { get; public set; }
    public double AutoRepeatDelay { get; public set; }
    public PanelButton(object parent);
    public PanelButton(object parent, PanelButtonType type, EventHandler clickHandler);
    public PanelButton(object parent, PanelButtonType buttonType, PanelButtonStyle buttonStyle, EventHandler clickHandler);
    public PanelButtonStyle get_Style();
    public void set_Style(PanelButtonStyle value);
    public PanelButtonType get_Type();
    public void set_Type(PanelButtonType value);
    public RectangleF get_Bounds();
    public void set_Bounds(RectangleF value);
    public PointF get_Location();
    public void set_Location(PointF value);
    public SizeF get_Size();
    public void set_Size(SizeF value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_SymbolBorderColor();
    public void set_SymbolBorderColor(Color value);
    public Color get_SymbolColor();
    public void set_SymbolColor(Color value);
    public double get_InititalAutoRepeatDelay();
    public void set_InititalAutoRepeatDelay(double value);
    public double get_AutoRepeatDelay();
    public void set_AutoRepeatDelay(double value);
    public void Render(MapGraphics g);
    private GraphicsPath GetButtonPath(MapGraphics g);
    private GraphicsPath GetButtonFacePath(MapGraphics g);
    private void CreateArrowPath(MapGraphics g, GraphicsPath path);
    internal void DoClick();
    public sealed virtual string GetToolTip();
}
internal enum Microsoft.Reporting.Map.WebForms.PanelButtonStyle : Enum {
    public int value__;
    public static PanelButtonStyle Rectangle;
    public static PanelButtonStyle RoundedRectangle;
    public static PanelButtonStyle Circle;
    public static PanelButtonStyle Triangle;
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Map.WebForms.PanelButtonType : Enum {
    public int value__;
    public static PanelButtonType Unknown;
    public static PanelButtonType ZoomButton;
    public static PanelButtonType ZoomIn;
    public static PanelButtonType ZoomOut;
    public static PanelButtonType NavigationButton;
    public static PanelButtonType NaviagateNorth;
    public static PanelButtonType NaviagateSouth;
    public static PanelButtonType NaviagateEast;
    public static PanelButtonType NaviagateWest;
    public static PanelButtonType NaviagateCenter;
}
internal enum Microsoft.Reporting.Map.WebForms.PanelDockStyle : Enum {
    public int value__;
    public static PanelDockStyle None;
    public static PanelDockStyle Top;
    public static PanelDockStyle Left;
    public static PanelDockStyle Right;
    public static PanelDockStyle Bottom;
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.PanelMarginsConverter")]
internal class Microsoft.Reporting.Map.WebForms.PanelMargins : object {
    private Panel owner;
    private int top;
    private int bottom;
    private int right;
    private int left;
    private bool all;
    [BrowsableAttribute("False")]
internal Panel Owner { get; internal set; }
    [NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributePanelMargins_Top")]
[RefreshPropertiesAttribute("1")]
public int Top { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributePanelMargins_Bottom")]
[RefreshPropertiesAttribute("1")]
public int Bottom { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributePanelMargins_Right")]
[RefreshPropertiesAttribute("1")]
public int Right { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributePanelMargins_Left")]
[RefreshPropertiesAttribute("1")]
public int Left { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRDescriptionAttribute("DescriptionAttributePanelMargins_All")]
[RefreshPropertiesAttribute("1")]
public int All { get; public set; }
    private PanelMargins DefaultMargins { get; }
    internal PanelMargins(Panel owner);
    internal PanelMargins(int left, int top, int right, int bottom);
    internal PanelMargins(Panel owner, int left, int top, int right, int bottom);
    internal PanelMargins(PanelMargins margins);
    internal Panel get_Owner();
    internal void set_Owner(Panel value);
    public int get_Top();
    public void set_Top(int value);
    protected void ResetTop();
    protected bool ShouldSerializeTop();
    public int get_Bottom();
    public void set_Bottom(int value);
    protected void ResetBottom();
    protected bool ShouldSerializeBottom();
    public int get_Right();
    public void set_Right(int value);
    protected void ResetRight();
    protected bool ShouldSerializeRight();
    public int get_Left();
    public void set_Left(int value);
    protected void ResetLeft();
    protected bool ShouldSerializeLeft();
    public int get_All();
    public void set_All(int value);
    protected void ResetAll();
    protected bool ShouldSerializeAll();
    private PanelMargins get_DefaultMargins();
    private void SyncPropeties();
    private void NotifyOwner();
    public RectangleF AdjustRectangle(RectangleF rect);
    public Rectangle AdjustRectangle(Rectangle rect);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal bool IsEmpty();
}
internal class Microsoft.Reporting.Map.WebForms.PanelMarginsConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.Map.WebForms.ParentSourceConverter : StringConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
[DefaultMemberAttribute("Item")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.PathConverter")]
internal class Microsoft.Reporting.Map.WebForms.Path : NamedElement {
    private GraphicsPath[] cachedPaths;
    private RectangleF[] cachedPathBounds;
    private RectangleF cachedUnionRectangle;
    private GraphicsPath[] cachedLabelPaths;
    private Double[] cachedSegmentLengths;
    internal int largestPathIndex;
    internal Hashtable fields;
    private string fieldDataBuffer;
    private PathData pathData;
    private Offset offset;
    private string toolTip;
    private string href;
    private string mapAreaAttributes;
    private bool visible;
    private Font font;
    private Color borderColor;
    private MapDashStyle lineStyle;
    private int borderWidth;
    private float width;
    private Color color;
    private Color textColor;
    private GradientType gradientType;
    private Color secondaryColor;
    private MapHatchStyle hatchStyle;
    private string text;
    private int shadowOffset;
    private int textShadowOffset;
    private bool selected;
    private string category;
    private string parentGroup;
    private PathLabelPosition labelPosition;
    private Group parentGroupObject;
    private bool useInternalProperties;
    private Color borderColorInt;
    private Color colorInt;
    private GradientType gradientTypeInt;
    private Color secondaryColorInt;
    private MapHatchStyle hatchStyleInt;
    private float widthInt;
    private string textInt;
    private string toolTipInt;
    private object mapAreaTag;
    private string layer;
    private bool belongsToLayer;
    private bool belongsToAllLayers;
    private Layer layerObject;
    private MapPoint Microsoft.Reporting.Map.WebForms.ISpatialElement.MinimumExtent { get; }
    private MapPoint Microsoft.Reporting.Map.WebForms.ISpatialElement.MaximumExtent { get; }
    [SRDescriptionAttribute("DescriptionAttributePath_PathData")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public PathData PathData { get; public set; }
    private MapPoint[] Microsoft.Reporting.Map.WebForms.ISpatialElement.Points { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string EncodedPathData { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("")]
public string FieldData { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributePath_Offset")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.ShapeOffsetConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public Offset Offset { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributePath_ToolTip")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributePath_Href")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributePath_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributePath_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePath_Visible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePath_Font")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8.25pt")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePath_BorderColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePath_LineStyle")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapDashStyle LineStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePath_BorderWidth")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePath_Width")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("5")]
public float Width { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePath_Color")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "LightSalmon")]
public Color Color { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePath_TextColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePath_GradientType")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.GradientEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType GradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePath_SecondaryColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color SecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePath_HatchStyle")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapHatchStyle HatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributePath_Text")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("#NAME")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePath_ShadowOffset")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("0")]
public int ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePath_TextShadowOffset")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("0")]
public int TextShadowOffset { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributePath_Selected")]
[DefaultValueAttribute("False")]
public bool Selected { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributePath_Category")]
[DefaultValueAttribute("")]
public string Category { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributePath_ParentGroup")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DesignTimeGroupConverter")]
[DefaultValueAttribute("(none)")]
public string ParentGroup { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePath_LabelPosition")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public PathLabelPosition LabelPosition { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public object Item { get; public set; }
    internal Group ParentGroupObject { get; internal set; }
    internal bool UseInternalProperties { get; internal set; }
    internal Color BorderColorInt { get; internal set; }
    internal Color ColorInt { get; internal set; }
    internal GradientType GradientTypeInt { get; internal set; }
    internal Color SecondaryColorInt { get; internal set; }
    internal MapHatchStyle HatchStyleInt { get; internal set; }
    internal float WidthInt { get; internal set; }
    internal string TextInt { get; internal set; }
    internal string ToolTipInt { get; internal set; }
    internal Offset OffsetInt { get; }
    internal int BorderWidthInt { get; }
    internal int ShadowOffsetInt { get; }
    private object Microsoft.Reporting.Map.WebForms.IImageMapProvider.Tag { get; private set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributePath_Layer")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DesignTimeLayerConverter")]
[DefaultValueAttribute("(none)")]
public string Layer { get; public set; }
    private bool Microsoft.Reporting.Map.WebForms.ILayerElement.BelongsToLayer { get; }
    private bool Microsoft.Reporting.Map.WebForms.ILayerElement.BelongsToAllLayers { get; }
    private Layer Microsoft.Reporting.Map.WebForms.ILayerElement.LayerObject { get; private set; }
    internal Path(CommonElements common);
    private sealed virtual override MapPoint Microsoft.Reporting.Map.WebForms.ISpatialElement.get_MinimumExtent();
    private sealed virtual override MapPoint Microsoft.Reporting.Map.WebForms.ISpatialElement.get_MaximumExtent();
    public PathData get_PathData();
    public void set_PathData(PathData value);
    private sealed virtual override MapPoint[] Microsoft.Reporting.Map.WebForms.ISpatialElement.get_Points();
    public string get_EncodedPathData();
    public void set_EncodedPathData(string value);
    public string get_FieldData();
    public void set_FieldData(string value);
    [EditorBrowsableAttribute("1")]
protected bool ShouldSerializeOffset();
    [EditorBrowsableAttribute("1")]
protected void ResetOffset();
    public sealed virtual Offset get_Offset();
    public sealed virtual void set_Offset(Offset value);
    public sealed virtual string get_ToolTip();
    public sealed virtual void set_ToolTip(string value);
    public sealed virtual string get_Href();
    public sealed virtual void set_Href(string value);
    public string get_MapAreaAttributes();
    public void set_MapAreaAttributes(string value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public sealed virtual Font get_Font();
    public sealed virtual void set_Font(Font value);
    public sealed virtual Color get_BorderColor();
    public sealed virtual void set_BorderColor(Color value);
    public MapDashStyle get_LineStyle();
    public void set_LineStyle(MapDashStyle value);
    public sealed virtual int get_BorderWidth();
    public sealed virtual void set_BorderWidth(int value);
    public float get_Width();
    public void set_Width(float value);
    public sealed virtual Color get_Color();
    public sealed virtual void set_Color(Color value);
    public sealed virtual Color get_TextColor();
    public sealed virtual void set_TextColor(Color value);
    public sealed virtual GradientType get_GradientType();
    public sealed virtual void set_GradientType(GradientType value);
    public sealed virtual Color get_SecondaryColor();
    public sealed virtual void set_SecondaryColor(Color value);
    public sealed virtual MapHatchStyle get_HatchStyle();
    public sealed virtual void set_HatchStyle(MapHatchStyle value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual int get_ShadowOffset();
    public sealed virtual void set_ShadowOffset(int value);
    public int get_TextShadowOffset();
    public void set_TextShadowOffset(int value);
    public bool get_Selected();
    public void set_Selected(bool value);
    public sealed virtual string get_Category();
    public sealed virtual void set_Category(string value);
    public string get_ParentGroup();
    public void set_ParentGroup(string value);
    public PathLabelPosition get_LabelPosition();
    public void set_LabelPosition(PathLabelPosition value);
    public sealed virtual object get_Item(string name);
    public sealed virtual void set_Item(string name, object value);
    public virtual string ToString();
    public void AddSegments(MapPoint[] points, PathSegment[] segments);
    public void ClearPathData();
    internal Group get_ParentGroupObject();
    internal void set_ParentGroupObject(Group value);
    internal bool get_UseInternalProperties();
    internal void set_UseInternalProperties(bool value);
    internal Color get_BorderColorInt();
    internal void set_BorderColorInt(Color value);
    internal Color get_ColorInt();
    internal void set_ColorInt(Color value);
    internal GradientType get_GradientTypeInt();
    internal void set_GradientTypeInt(GradientType value);
    internal Color get_SecondaryColorInt();
    internal void set_SecondaryColorInt(Color value);
    internal MapHatchStyle get_HatchStyleInt();
    internal void set_HatchStyleInt(MapHatchStyle value);
    internal float get_WidthInt();
    internal void set_WidthInt(float value);
    internal string get_TextInt();
    internal void set_TextInt(string value);
    internal string get_ToolTipInt();
    internal void set_ToolTipInt(string value);
    internal Offset get_OffsetInt();
    internal int get_BorderWidthInt();
    internal int get_ShadowOffsetInt();
    internal MapCore GetMapCore();
    private string FieldDataToString();
    internal void FieldDataFromBuffer();
    internal virtual void OnAdded();
    internal virtual void OnRemove();
    protected virtual void OnDispose();
    internal void ApplyCustomColorAttributes(CustomColor customColor);
    internal void ApplyCustomWidthAttributes(CustomWidth customWidth);
    internal int GetLongestVisibleSegmentIndex(MapGraphics g);
    internal void InvalidateRules();
    public sealed virtual bool AddGeometry(SqlGeometry geometry);
    private void AddGeometryRec(SqlGeometry geometry, ArrayList pointsList, ArrayList segmentsList);
    private void AddSimpleGeometry(SqlGeometry geometry, ArrayList pointsList, ArrayList segmentsList);
    public sealed virtual bool AddGeography(SqlGeography geography);
    private void AddGeographyRec(SqlGeography geography, ArrayList pointsList, ArrayList segmentsList);
    internal void AddSimpleGeography(SqlGeography geography, ArrayList pointsList, ArrayList segmentsList);
    public sealed virtual bool LoadWKT(string wkt);
    public sealed virtual bool AddWKT(string wkt);
    public sealed virtual bool LoadWKB(Byte[] wkb);
    public sealed virtual bool AddWKB(Byte[] wkb);
    public sealed virtual string SaveWKT();
    public sealed virtual Byte[] SaveWKB();
    private void SaveWKBToStream(Stream stream);
    private void RenderText(MapGraphics g);
    internal bool IsRectangleVisible(MapGraphics g, RectangleF clipRect, MapPoint minExtent, MapPoint maxExtent);
    internal GraphicsPath[] GetPaths(MapGraphics g);
    internal void InvalidateCachedBounds();
    internal void ResetCachedPaths();
    private PointF[] ReducePoints(Point3D[] points);
    private float GetDistance(PointF pointA, PointF pointB);
    internal static Brush GetBackBrush(MapGraphics g, GraphicsPath path, RectangleF pathBounds, Color fillColor, Color secondaryColor, GradientType gradientType, MapHatchStyle hatchStyle);
    internal Pen GetBorderPen();
    internal static Pen GetColorPen(Color color, float width, float borderWidth);
    internal static Pen GetFillPen(MapGraphics g, GraphicsPath path, RectangleF pathBounds, float width, MapDashStyle lineStyle, Color fillColor, Color secondaryColor, GradientType gradientType, MapHatchStyle hatchStyle);
    private Color ApplyLayerTransparency(Color color);
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.IContentElement.IsVisible(MapGraphics g, Layer layer, bool allLayers, RectangleF clipRect);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IContentElement.RenderShadow(MapGraphics g);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IContentElement.RenderBack(MapGraphics g, HotRegionList hotRegions);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IContentElement.RenderFront(MapGraphics g, HotRegionList hotRegions);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IContentElement.RenderText(MapGraphics g, HotRegionList hotRegions);
    private sealed virtual override RectangleF Microsoft.Reporting.Map.WebForms.IContentElement.GetBoundRect(MapGraphics g);
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IToolTipProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetHref();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetMapAreaAttributes();
    private sealed virtual override object Microsoft.Reporting.Map.WebForms.IImageMapProvider.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IImageMapProvider.set_Tag(object value);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.ISelectable.DrawSelection(MapGraphics g, RectangleF clipRect, bool designTimeSelection);
    private sealed virtual override RectangleF Microsoft.Reporting.Map.WebForms.ISelectable.GetSelectionRectangle(MapGraphics g, RectangleF clipRect);
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ISelectable.IsSelected();
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ISelectable.IsVisible();
    public sealed virtual string get_Layer();
    public sealed virtual void set_Layer(string value);
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ILayerElement.get_BelongsToLayer();
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ILayerElement.get_BelongsToAllLayers();
    private sealed virtual override Layer Microsoft.Reporting.Map.WebForms.ILayerElement.get_LayerObject();
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.ILayerElement.set_LayerObject(Layer value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.PathCollection : NamedCollection {
    private Path Item { get; private set; }
    private Path Item { get; private set; }
    public Path Item { get; public set; }
    internal PathCollection(NamedElement parent, CommonElements common);
    public Path Add(string name);
    public int Add(Path value);
    public void Remove(Path value);
    private Path get_Item(int index);
    private void set_Item(int index, Path value);
    private Path get_Item(string name);
    private void set_Item(string name, Path value);
    public Path get_Item(object obj);
    public void set_Item(object obj, Path value);
    public ArrayList Find(string searchFor, bool ignoreCase, bool exactSearch, bool uniqueOnlyFields);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    protected virtual void OnInsertComplete(int index, object value);
    internal virtual void Invalidate();
}
internal class Microsoft.Reporting.Map.WebForms.PathConverter : CollectionItemTypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal class Microsoft.Reporting.Map.WebForms.PathData : object {
    private MapPoint[] points;
    private PathSegment[] segments;
    private MapPoint minimumExtent;
    private MapPoint maximumExtent;
    private int largestSegmentIndex;
    public MapPoint[] Points { get; public set; }
    public PathSegment[] Segments { get; public set; }
    public MapPoint MinimumExtent { get; public set; }
    public MapPoint MaximumExtent { get; public set; }
    internal int LargestSegmentIndex { get; }
    internal bool IsEmpty { get; }
    public MapPoint[] get_Points();
    public void set_Points(MapPoint[] value);
    public PathSegment[] get_Segments();
    public void set_Segments(PathSegment[] value);
    public MapPoint get_MinimumExtent();
    public void set_MinimumExtent(MapPoint value);
    public MapPoint get_MaximumExtent();
    public void set_MaximumExtent(MapPoint value);
    internal int get_LargestSegmentIndex();
    internal bool get_IsEmpty();
    internal void UpdateStoredParameters();
    private void UpdateLargestSegmentIndex();
    internal void LoadFromStream(Stream stream);
    internal void SaveToStream(Stream stream);
    internal static string PathDataToString(PathData pathData);
    internal static PathData PathDataFromString(string data);
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.PathDataBindingRuleConverter")]
internal class Microsoft.Reporting.Map.WebForms.PathDataBindingRule : DataBindingRuleBase {
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributePathDataBindingRule_BindingField")]
public string BindingField { get; public set; }
    internal PathDataBindingRule(CommonElements common);
    public virtual string get_BindingField();
    public virtual void set_BindingField(string value);
    internal virtual void DataBind();
}
internal class Microsoft.Reporting.Map.WebForms.PathDataBindingRuleConverter : CollectionItemTypeConverter {
}
internal class Microsoft.Reporting.Map.WebForms.PathFieldPropertyDescriptor : PropertyDescriptor {
    private Field field;
    public Type ComponentType { get; }
    public string DisplayName { get; }
    public bool IsBrowsable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public PathFieldPropertyDescriptor(Field field, Attribute[] attributes);
    public virtual Type get_ComponentType();
    public virtual string get_DisplayName();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
    public virtual void SetValue(object component, object value);
}
internal enum Microsoft.Reporting.Map.WebForms.PathLabelPosition : Enum {
    public int value__;
    public static PathLabelPosition Above;
    public static PathLabelPosition Below;
    public static PathLabelPosition Center;
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.PathRuleConverter")]
internal class Microsoft.Reporting.Map.WebForms.PathRule : PathRuleBase {
    private CustomColorCollection customColors;
    private bool showInColorSwatch;
    private Color fromColor;
    private Color middleColor;
    private Color toColor;
    private string fromValue;
    private string toValue;
    private bool useCustomColors;
    private MapColorPalette colorPalette;
    private Color borderColor;
    private Color secondaryColor;
    private GradientType gradientType;
    private MapHatchStyle hatchStyle;
    private int widthInLegend;
    [SRCategoryAttribute("CategoryAttribute_CustomColors")]
[SRDescriptionAttribute("DescriptionAttributePathRule_CustomColors")]
[DesignerSerializationVisibilityAttribute("2")]
public CustomColorCollection CustomColors { get; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributePathRule_ShowInColorSwatch")]
[DefaultValueAttribute("False")]
public bool ShowInColorSwatch { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributePathRule_ColorCount")]
[DefaultValueAttribute("5")]
public int ColorCount { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributePathRule_FromColor")]
[DefaultValueAttribute("System.Drawing.Color", "Green")]
public Color FromColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributePathRule_MiddleColor")]
[DefaultValueAttribute("System.Drawing.Color", "Yellow")]
public Color MiddleColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributePathRule_ToColor")]
[DefaultValueAttribute("System.Drawing.Color", "Red")]
public Color ToColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributePathRule_FromValue")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("")]
public string FromValue { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributePathRule_ToValue")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("")]
public string ToValue { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_CustomColors")]
[SRDescriptionAttribute("DescriptionAttributePathRule_UseCustomColors")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]
public bool UseCustomColors { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributePathRule_ColoringMode")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
internal ColoringMode ColoringMode { get; internal set; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributePathRule_ColorPalette")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapColorPalette ColorPalette { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributePathRule_BorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributePathRule_SecondaryColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color SecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributePathRule_GradientType")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.GradientEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType GradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributePathRule_HatchStyle")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapHatchStyle HatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Legend")]
[SRDescriptionAttribute("DescriptionAttributePathRule_WidthInLegend")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("5")]
public int WidthInLegend { get; public set; }
    internal CommonElements Common { get; internal set; }
    internal PathRule(CommonElements common);
    public CustomColorCollection get_CustomColors();
    public bool get_ShowInColorSwatch();
    public void set_ShowInColorSwatch(bool value);
    public virtual int get_ColorCount();
    public virtual void set_ColorCount(int value);
    public Color get_FromColor();
    public void set_FromColor(Color value);
    public Color get_MiddleColor();
    public void set_MiddleColor(Color value);
    public Color get_ToColor();
    public void set_ToColor(Color value);
    public virtual string get_FromValue();
    public virtual void set_FromValue(string value);
    public virtual string get_ToValue();
    public virtual void set_ToValue(string value);
    public bool get_UseCustomColors();
    public void set_UseCustomColors(bool value);
    internal virtual ColoringMode get_ColoringMode();
    internal virtual void set_ColoringMode(ColoringMode value);
    public MapColorPalette get_ColorPalette();
    public void set_ColorPalette(MapColorPalette value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public Color get_SecondaryColor();
    public void set_SecondaryColor(Color value);
    public GradientType get_GradientType();
    public void set_GradientType(GradientType value);
    public MapHatchStyle get_HatchStyle();
    public void set_HatchStyle(MapHatchStyle value);
    public int get_WidthInLegend();
    public void set_WidthInLegend(int value);
    internal virtual void RegenerateRanges();
    internal void UpdateColorSwatchAndLegend();
    internal virtual void Apply(Path path);
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
}
internal abstract class Microsoft.Reporting.Map.WebForms.PathRuleBase : RuleBase {
    private string pathField;
    private string showInLegend;
    private string legendText;
    private string category;
    private DataGrouping dataGrouping;
    private string text;
    private string toolTip;
    private ColoringMode coloringMode;
    private int colorCount;
    private MapDashStyle lineStyleInLegend;
    private int borderWidthInLegend;
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributePathRule_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributePathRule_PathField")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DesignTimeFieldConverter")]
[RefreshPropertiesAttribute("1")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("(Name)")]
public string PathField { get; public set; }
    internal string Field { get; internal set; }
    [SRCategoryAttribute("CategoryAttribute_Legend")]
[SRDescriptionAttribute("DescriptionAttributePathRule_ShowInLegend")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DesignTimeLegendConverter")]
[RefreshPropertiesAttribute("1")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("(none)")]
public string ShowInLegend { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Legend")]
[SRDescriptionAttribute("DescriptionAttributePathRule_LegendText")]
[DefaultValueAttribute("#FROMVALUE{N0} - #TOVALUE{N0}")]
public string LegendText { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributePathRule_Category")]
[DefaultValueAttribute("")]
public string Category { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributePathRule_DataGrouping")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
internal DataGrouping DataGrouping { get; internal set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributePathRule_Text")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("#NAME")]
public string Text { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributePathRule_ToolTip")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
internal ColoringMode ColoringMode { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
[SerializationVisibilityAttribute("0")]
public int ColorCount { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Legend")]
[SRDescriptionAttribute("DescriptionAttributePathRule_LineStyleInLegend")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapDashStyle LineStyleInLegend { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Legend")]
[SRDescriptionAttribute("DescriptionAttributePathRule_BorderWidthInLegend")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("1")]
public int BorderWidthInLegend { get; public set; }
    internal PathRuleBase(CommonElements common);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public string get_PathField();
    public void set_PathField(string value);
    internal virtual string get_Field();
    internal virtual void set_Field(string value);
    public virtual string get_ShowInLegend();
    public virtual void set_ShowInLegend(string value);
    public virtual string get_LegendText();
    public virtual void set_LegendText(string value);
    public virtual string get_Category();
    public virtual void set_Category(string value);
    internal virtual DataGrouping get_DataGrouping();
    internal virtual void set_DataGrouping(DataGrouping value);
    public string get_Text();
    public void set_Text(string value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    internal virtual ColoringMode get_ColoringMode();
    internal virtual void set_ColoringMode(ColoringMode value);
    public virtual int get_ColorCount();
    public virtual void set_ColorCount(int value);
    public MapDashStyle get_LineStyleInLegend();
    public void set_LineStyleInLegend(MapDashStyle value);
    public int get_BorderWidthInLegend();
    public void set_BorderWidthInLegend(int value);
    public virtual string ToString();
    internal abstract virtual void Apply(Path path);
    internal abstract virtual void RegenerateRanges();
    internal virtual void OnAdded();
    internal void InvalidateRules();
    internal virtual void OnRemove();
    internal void GetRangeFromPaths(Field field, int intervalCount, Object& fromValue, Object& toValue);
    internal virtual ArrayList GetSortedValues(Field field, object fromValue, object toValue);
    internal virtual Field GetField();
    internal string GetLegendText(Field field, string fromValue, string toValue);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.PathRuleCollection : NamedCollection {
    private PathRuleBase Item { get; private set; }
    private PathRuleBase Item { get; private set; }
    public PathRuleBase Item { get; public set; }
    internal PathRuleCollection(NamedElement parent, CommonElements common);
    public PathRule Add(string name);
    public int Add(PathRuleBase value);
    public void Remove(PathRuleBase value);
    private PathRuleBase get_Item(int index);
    private void set_Item(int index, PathRuleBase value);
    private PathRuleBase get_Item(string name);
    private void set_Item(string name, PathRuleBase value);
    public PathRuleBase get_Item(object obj);
    public void set_Item(object obj, PathRuleBase value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
}
internal class Microsoft.Reporting.Map.WebForms.PathRuleConverter : CollectionItemTypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal class Microsoft.Reporting.Map.WebForms.PathRulePropertyDescriptor : PropertyDescriptor {
    private Field field;
    public Type ComponentType { get; }
    public bool IsBrowsable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public PathRulePropertyDescriptor(Field field, string name, Attribute[] attrs);
    public virtual Type get_ComponentType();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
}
internal class Microsoft.Reporting.Map.WebForms.PathSegment : ValueType {
    public SegmentType Type;
    public int Length;
    public MapPoint MinimumExtent;
    public MapPoint MaximumExtent;
    public double SegmentLength;
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.PathWidthRuleConverter")]
internal class Microsoft.Reporting.Map.WebForms.PathWidthRule : PathRuleBase {
    private CustomWidthCollection customWidths;
    private int widthCount;
    private float fromWidth;
    private float toWidth;
    private string fromValue;
    private string toValue;
    private bool useCustomWidths;
    private Color borderColorInLegend;
    private Color colorInLegend;
    private Color secondaryColorInLegend;
    private GradientType gradientTypeInLegend;
    private MapHatchStyle hatchStyleInLegend;
    [SRCategoryAttribute("CategoryAttribute_CustomWidths")]
[SRDescriptionAttribute("DescriptionAttributePathWidthRule_CustomWidths")]
[DesignerSerializationVisibilityAttribute("2")]
public CustomWidthCollection CustomWidths { get; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributePathWidthRule_WidthCount")]
[DefaultValueAttribute("5")]
public int WidthCount { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Widths")]
[SRDescriptionAttribute("DescriptionAttributePathWidthRule_FromWidth")]
[DefaultValueAttribute("1")]
public float FromWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Widths")]
[SRDescriptionAttribute("DescriptionAttributePathWidthRule_ToWidth")]
[DefaultValueAttribute("30")]
public float ToWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributePathWidthRule_FromValue")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("")]
public string FromValue { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributePathWidthRule_ToValue")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("")]
public string ToValue { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_CustomWidths")]
[SRDescriptionAttribute("DescriptionAttributePathWidthRule_UseCustomWidths")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]
public bool UseCustomWidths { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Legend")]
[SRDescriptionAttribute("DescriptionAttributePathWidthRule_BorderColorInLegend")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color BorderColorInLegend { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Legend")]
[SRDescriptionAttribute("DescriptionAttributePathWidthRule_ColorInLegend")]
[DefaultValueAttribute("System.Drawing.Color", "LightSalmon")]
public Color ColorInLegend { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Legend")]
[SRDescriptionAttribute("DescriptionAttributePathWidthRule_SecondaryColorInLegend")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color SecondaryColorInLegend { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Legend")]
[SRDescriptionAttribute("DescriptionAttributePathWidthRule_GradientTypeInLegend")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.GradientEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType GradientTypeInLegend { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Legend")]
[SRDescriptionAttribute("DescriptionAttributePathWidthRule_HatchStyleInLegend")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapHatchStyle HatchStyleInLegend { get; public set; }
    internal CommonElements Common { get; internal set; }
    internal PathWidthRule(CommonElements common);
    public CustomWidthCollection get_CustomWidths();
    public int get_WidthCount();
    public void set_WidthCount(int value);
    public float get_FromWidth();
    public void set_FromWidth(float value);
    public float get_ToWidth();
    public void set_ToWidth(float value);
    public virtual string get_FromValue();
    public virtual void set_FromValue(string value);
    public virtual string get_ToValue();
    public virtual void set_ToValue(string value);
    public bool get_UseCustomWidths();
    public void set_UseCustomWidths(bool value);
    public Color get_BorderColorInLegend();
    public void set_BorderColorInLegend(Color value);
    public Color get_ColorInLegend();
    public void set_ColorInLegend(Color value);
    public Color get_SecondaryColorInLegend();
    public void set_SecondaryColorInLegend(Color value);
    public GradientType get_GradientTypeInLegend();
    public void set_GradientTypeInLegend(GradientType value);
    public MapHatchStyle get_HatchStyleInLegend();
    public void set_HatchStyleInLegend(MapHatchStyle value);
    internal virtual void RegenerateRanges();
    internal void UpdateLegend();
    internal virtual void Apply(Path path);
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
}
internal class Microsoft.Reporting.Map.WebForms.PathWidthRuleConverter : CollectionItemTypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal class Microsoft.Reporting.Map.WebForms.PathWidthRulePropertyDescriptor : PropertyDescriptor {
    private Field field;
    public Type ComponentType { get; }
    public bool IsBrowsable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public PathWidthRulePropertyDescriptor(Field field, string name, Attribute[] attrs);
    public virtual Type get_ComponentType();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
}
internal class Microsoft.Reporting.Map.WebForms.PinMajorTickMark : CustomTickMark {
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePinMajorTickMark_Shape")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MarkerStyle Shape { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePinMajorTickMark_Length")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("6")]
public float Length { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePinMajorTickMark_Width")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("6")]
public float Width { get; public set; }
    public PinMajorTickMark(object parent);
    public PinMajorTickMark(object parent, MarkerStyle shape, float length, float width);
    public virtual MarkerStyle get_Shape();
    public virtual void set_Shape(MarkerStyle value);
    public virtual float get_Length();
    public virtual void set_Length(float value);
    public virtual float get_Width();
    public virtual void set_Width(float value);
}
internal enum Microsoft.Reporting.Map.WebForms.Placement : Enum {
    public int value__;
    public static Placement Inside;
    public static Placement Outside;
    public static Placement Cross;
}
internal class Microsoft.Reporting.Map.WebForms.Point3D : ValueType {
    public double X;
    public double Y;
    public double Z;
    public Point3D(double x, double y, double z);
    public PointF ToPointF();
}
internal class Microsoft.Reporting.Map.WebForms.PointInfo : ValueType {
    public PointF Point;
    public int Index;
    public PointF[] Points;
    public GraphicsPath Path;
    public Direction Direction;
    public int GetNextIndex(Direction direction);
    public PointInfo GetNextPoint(Direction direction);
}
internal class Microsoft.Reporting.Map.WebForms.PolyLine : object {
    public Double[] Box;
    public int NumParts;
    public int NumPoints;
    public Int32[] Parts;
    public ShapePoint[] Points;
    public void Read(BinaryReader reader);
}
internal class Microsoft.Reporting.Map.WebForms.Position : object {
    private MapLocation location;
    private MapSize size;
    private ContentAlignment locationAlignment;
    public float X { get; }
    public float Y { get; }
    public float Width { get; }
    public float Height { get; }
    public bool DefaultValues { get; }
    internal RectangleF Rectangle { get; }
    public Position(MapLocation location, MapSize size, ContentAlignment locationAlignment);
    public float get_X();
    public float get_Y();
    public float get_Width();
    public float get_Height();
    public bool get_DefaultValues();
    internal RectangleF get_Rectangle();
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.PredefinedSymbolConverter")]
internal class Microsoft.Reporting.Map.WebForms.PredefinedSymbol : NamedElement {
    private TextAlignment textAlignment;
    private Font font;
    private Color borderColor;
    private MapDashStyle borderStyle;
    private int borderWidth;
    private Color color;
    private Color textColor;
    private Color secondaryColor;
    private GradientType gradientType;
    private MapHatchStyle hatchStyle;
    private string fromValue;
    private string toValue;
    private string legendText;
    private string text;
    private int shadowOffset;
    private int textShadowOffset;
    private MarkerStyle markerStyle;
    private float width;
    private float height;
    private ResizeMode imageResizeMode;
    private string image;
    private Color imageTransColor;
    private string category;
    private string toolTip;
    private bool visible;
    private ArrayList affectedSymbols;
    private string fromValueInt;
    private string toValueInt;
    private bool visibleInt;
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_Name")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public object Tag { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_SymbolText")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_TextAlignment")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TextAlignment TextAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_SymbolText")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_Font")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8.25pt")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_BorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_BorderStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_BorderWidth")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_Color")]
[DefaultValueAttribute("System.Drawing.Color", "Red")]
public Color Color { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_SymbolText")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_TextColor")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_SecondaryColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color SecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_GradientType")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.GradientEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType GradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_HatchStyle")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapHatchStyle HatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_FromValue")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("")]
public string FromValue { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_ToValue")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("")]
public string ToValue { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_LegendText")]
[DefaultValueAttribute("")]
public string LegendText { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_Text")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_ShadowOffset")]
[DefaultValueAttribute("0")]
public int ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_SymbolText")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_TextShadowOffset")]
[DefaultValueAttribute("0")]
public int TextShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_MarkerStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MarkerStyle MarkerStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Size")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_Width")]
[DefaultValueAttribute("7")]
public float Width { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Size")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_Height")]
[DefaultValueAttribute("7")]
public float Height { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_ImageResizeMode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ResizeMode ImageResizeMode { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_Image")]
[DefaultValueAttribute("")]
public string Image { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_ImageTransColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageTransColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_Category")]
[DefaultValueAttribute("")]
public string Category { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_ToolTip")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributePredefinedSymbol_Visible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    internal ArrayList AffectedSymbols { get; internal set; }
    internal string FromValueInt { get; internal set; }
    internal string ToValueInt { get; internal set; }
    internal bool VisibleInt { get; internal set; }
    internal PredefinedSymbol(CommonElements common);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual object get_Tag();
    public virtual void set_Tag(object value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public MapDashStyle get_BorderStyle();
    public void set_BorderStyle(MapDashStyle value);
    public int get_BorderWidth();
    public void set_BorderWidth(int value);
    public Color get_Color();
    public void set_Color(Color value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public Color get_SecondaryColor();
    public void set_SecondaryColor(Color value);
    public GradientType get_GradientType();
    public void set_GradientType(GradientType value);
    public MapHatchStyle get_HatchStyle();
    public void set_HatchStyle(MapHatchStyle value);
    public string get_FromValue();
    public void set_FromValue(string value);
    public string get_ToValue();
    public void set_ToValue(string value);
    public string get_LegendText();
    public void set_LegendText(string value);
    public string get_Text();
    public void set_Text(string value);
    public int get_ShadowOffset();
    public void set_ShadowOffset(int value);
    public int get_TextShadowOffset();
    public void set_TextShadowOffset(int value);
    public MarkerStyle get_MarkerStyle();
    public void set_MarkerStyle(MarkerStyle value);
    public float get_Width();
    public void set_Width(float value);
    public float get_Height();
    public void set_Height(float value);
    public ResizeMode get_ImageResizeMode();
    public void set_ImageResizeMode(ResizeMode value);
    public string get_Image();
    public void set_Image(string value);
    public Color get_ImageTransColor();
    public void set_ImageTransColor(Color value);
    public string get_Category();
    public void set_Category(string value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public virtual string ToString();
    public ArrayList GetAffectedSymbols();
    internal RuleBase GetRule();
    internal virtual void OnAdded();
    internal virtual void OnRemove();
    internal void InvalidateRules();
    internal MapCore GetMapCore();
    internal ArrayList get_AffectedSymbols();
    internal void set_AffectedSymbols(ArrayList value);
    internal string get_FromValueInt();
    internal void set_FromValueInt(string value);
    internal string get_ToValueInt();
    internal void set_ToValueInt(string value);
    internal bool get_VisibleInt();
    internal void set_VisibleInt(bool value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.PredefinedSymbolCollection : NamedCollection {
    private PredefinedSymbol Item { get; private set; }
    private PredefinedSymbol Item { get; private set; }
    public PredefinedSymbol Item { get; public set; }
    internal PredefinedSymbolCollection(NamedElement parent, CommonElements common);
    public PredefinedSymbol Add(string name);
    public int Add(PredefinedSymbol value);
    public void Remove(PredefinedSymbol value);
    private PredefinedSymbol get_Item(int index);
    private void set_Item(int index, PredefinedSymbol value);
    private PredefinedSymbol get_Item(string name);
    private void set_Item(string name, PredefinedSymbol value);
    public PredefinedSymbol get_Item(object obj);
    public void set_Item(object obj, PredefinedSymbol value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    protected virtual void OnInsertComplete(int index, object value);
}
internal class Microsoft.Reporting.Map.WebForms.PredefinedSymbolConverter : CollectionItemTypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    private Field GetField(PredefinedSymbol predefinedSymbol);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal class Microsoft.Reporting.Map.WebForms.PredefinedSymbolPropertyDescriptor : PropertyDescriptor {
    private Field field;
    public Type ComponentType { get; }
    public bool IsBrowsable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public PredefinedSymbolPropertyDescriptor(Field field, string name, Attribute[] attrs);
    public virtual Type get_ComponentType();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
}
internal enum Microsoft.Reporting.Map.WebForms.Projection : Enum {
    public int value__;
    public static Projection Equirectangular;
    public static Projection Mercator;
    public static Projection Robinson;
    public static Projection Fahey;
    public static Projection Eckert1;
    public static Projection Eckert3;
    public static Projection HammerAitoff;
    public static Projection Wagner3;
    public static Projection Orthographic;
    public static Projection Bonne;
}
internal class Microsoft.Reporting.Map.WebForms.ProjectionCenter : MapObject {
    private bool xIsNaN;
    private double x;
    private bool yIsNaN;
    private double y;
    [SRCategoryAttribute("CategoryAttribute_Coordinates")]
[SRDescriptionAttribute("DescriptionAttributeProjectionCenter_X")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DoubleAutoValueConverter")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("не число")]
public double X { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Coordinates")]
[SRDescriptionAttribute("DescriptionAttributeProjectionCenter_Y")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DoubleAutoValueConverter")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("не число")]
public double Y { get; public set; }
    internal ProjectionCenter(object parent);
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    internal virtual void Invalidate();
    internal bool IsXNaN();
    internal bool IsYNaN();
}
internal class Microsoft.Reporting.Map.WebForms.RaisedBorder : SunkenBorder {
    public string Name { get; }
    public virtual string get_Name();
}
internal class Microsoft.Reporting.Map.WebForms.ReadOnlyCollectionDescriptor : PropertyDescriptor {
    public Type ComponentType { get; }
    public bool IsBrowsable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public ReadOnlyCollectionDescriptor(string name, Attribute[] attrs);
    public virtual Type get_ComponentType();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
}
internal class Microsoft.Reporting.Map.WebForms.RealTimeValue : object {
    private string inputValueName;
    private double value;
    private DateTime timeStamp;
    public string InputValueName { get; public set; }
    public double Value { get; public set; }
    public DateTime TimeStamp { get; public set; }
    public RealTimeValue(string inputValueName, double value, DateTime timeStamp);
    public string get_InputValueName();
    public void set_InputValueName(string value);
    public double get_Value();
    public void set_Value(double value);
    public DateTime get_TimeStamp();
    public void set_TimeStamp(DateTime value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.RealTimeValueCollection : CollectionBase {
    public RealTimeValue Item { get; public set; }
    public int Add(string inputValueName, double value);
    public int Add(RealTimeValue value);
    public int Add(string inputValueName, double value, DateTime timeStamp);
    public void Remove(RealTimeValue value);
    public RealTimeValue get_Item(int index);
    public void set_Item(int index, RealTimeValue value);
}
internal abstract class Microsoft.Reporting.Map.WebForms.RecordFileReader : object {
    private SqlBytesReader _reader;
    public long Length { get; }
    public long Position { get; }
    public SqlBytesReader Reader { get; }
    public RecordFileReader(SqlBytes data);
    public abstract virtual bool ReadRecord();
    public long get_Length();
    public long get_Position();
    public SqlBytesReader get_Reader();
    public sealed virtual void Dispose();
}
internal class Microsoft.Reporting.Map.WebForms.RenderingEngine : object {
    internal bool shadowDrawingMode;
    private RenderingType activeRenderingType;
    private GdiGraphics gdiGraphics;
    private string documentTitle;
    internal IMapRenderingEngine RenderingObject { get; }
    internal RenderingType ActiveRenderingType { get; internal set; }
    public TextRenderingHint TextRenderingHint { get; public set; }
    public Matrix Transform { get; public set; }
    public SmoothingMode SmoothingMode { get; public set; }
    public Region Clip { get; public set; }
    public bool IsClipEmpty { get; }
    public Graphics Graphics { get; public set; }
    public sealed virtual void DrawLine(Pen pen, PointF pt1, PointF pt2);
    public sealed virtual void DrawLine(Pen pen, float x1, float y1, float x2, float y2);
    public sealed virtual void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr);
    public sealed virtual void DrawEllipse(Pen pen, float x, float y, float width, float height);
    public sealed virtual void DrawCurve(Pen pen, PointF[] points, int offset, int numberOfSegments, float tension);
    public sealed virtual void DrawRectangle(Pen pen, int x, int y, int width, int height);
    public sealed virtual void DrawPolygon(Pen pen, PointF[] points);
    public sealed virtual void DrawString(string s, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    public sealed virtual void DrawString(string s, Font font, Brush brush, PointF point, StringFormat format);
    public sealed virtual void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs);
    public sealed virtual void DrawRectangle(Pen pen, float x, float y, float width, float height);
    public sealed virtual void DrawPath(Pen pen, GraphicsPath path);
    public sealed virtual void DrawPie(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual void DrawArc(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual void DrawImage(Image image, RectangleF rect);
    public sealed virtual void DrawEllipse(Pen pen, RectangleF rect);
    public sealed virtual void DrawLines(Pen pen, PointF[] points);
    public sealed virtual void FillEllipse(Brush brush, RectangleF rect);
    public sealed virtual void FillPath(Brush brush, GraphicsPath path);
    public sealed virtual void FillPath(Brush brush, GraphicsPath path, float angle, bool useBrushOffset, bool circularFill);
    public sealed virtual void FillRegion(Brush brush, Region region);
    public sealed virtual void FillRectangle(Brush brush, RectangleF rect);
    public sealed virtual void FillRectangle(Brush brush, float x, float y, float width, float height);
    public sealed virtual void FillPolygon(Brush brush, PointF[] points);
    public sealed virtual void FillPie(Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public virtual void Close();
    public void StartHotRegion(object obj);
    public void EndHotRegion();
    public sealed virtual SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    public sealed virtual SizeF MeasureString(string text, Font font);
    public sealed virtual GraphicsState Save();
    public sealed virtual void Restore(GraphicsState gstate);
    public sealed virtual void ResetClip();
    public sealed virtual void SetClip(RectangleF rect);
    public void SetTitle(string title);
    public sealed virtual void SetClip(GraphicsPath path, CombineMode combineMode);
    public sealed virtual void TranslateTransform(float dx, float dy);
    public sealed virtual void BeginSelection(string hRef, string title);
    public sealed virtual void EndSelection();
    internal IMapRenderingEngine get_RenderingObject();
    internal RenderingType get_ActiveRenderingType();
    internal void set_ActiveRenderingType(RenderingType value);
    public sealed virtual TextRenderingHint get_TextRenderingHint();
    public sealed virtual void set_TextRenderingHint(TextRenderingHint value);
    public sealed virtual Matrix get_Transform();
    public sealed virtual void set_Transform(Matrix value);
    public sealed virtual SmoothingMode get_SmoothingMode();
    public sealed virtual void set_SmoothingMode(SmoothingMode value);
    public sealed virtual Region get_Clip();
    public sealed virtual void set_Clip(Region value);
    public sealed virtual bool get_IsClipEmpty();
    public sealed virtual Graphics get_Graphics();
    public sealed virtual void set_Graphics(Graphics value);
}
internal enum Microsoft.Reporting.Map.WebForms.RenderingMode : Enum {
    public int value__;
    public static RenderingMode All;
    public static RenderingMode SinglePanel;
    public static RenderingMode GridSections;
    public static RenderingMode Background;
    public static RenderingMode ZoomThumb;
}
internal enum Microsoft.Reporting.Map.WebForms.RenderingType : Enum {
    public int value__;
    public static RenderingType Gdi;
    public static RenderingType Svg;
}
internal enum Microsoft.Reporting.Map.WebForms.RenderType : Enum {
    public int value__;
    public static RenderType ImageTag;
    public static RenderType InputTag;
    public static RenderType BinaryStreaming;
    public static RenderType ImageMap;
    public static RenderType InteractiveImage;
}
internal enum Microsoft.Reporting.Map.WebForms.ResizeMode : Enum {
    public int value__;
    public static ResizeMode None;
    public static ResizeMode AutoFit;
}
internal class Microsoft.Reporting.Map.WebForms.RGB : ValueType {
    internal int Red;
    internal int Green;
    internal int Blue;
    internal RGB(int R, int G, int B);
}
internal abstract class Microsoft.Reporting.Map.WebForms.RuleBase : NamedElement {
    internal string Field { get; internal set; }
    public string Category { get; public set; }
    internal DataGrouping DataGrouping { get; internal set; }
    public string FromValue { get; public set; }
    public string ToValue { get; public set; }
    public string LegendText { get; public set; }
    public string ShowInLegend { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public object Tag { get; public set; }
    internal RuleBase(CommonElements common);
    internal abstract virtual string get_Field();
    internal abstract virtual void set_Field(string value);
    public abstract virtual string get_Category();
    public abstract virtual void set_Category(string value);
    internal abstract virtual DataGrouping get_DataGrouping();
    internal abstract virtual void set_DataGrouping(DataGrouping value);
    public abstract virtual string get_FromValue();
    public abstract virtual void set_FromValue(string value);
    public abstract virtual string get_ToValue();
    public abstract virtual void set_ToValue(string value);
    public abstract virtual string get_LegendText();
    public abstract virtual void set_LegendText(string value);
    public abstract virtual string get_ShowInLegend();
    public abstract virtual void set_ShowInLegend(string value);
    public virtual object get_Tag();
    public virtual void set_Tag(object value);
    internal abstract virtual ArrayList GetSortedValues(Field field, object fromValue, object toValue);
    internal MapCore GetMapCore();
    internal bool IsValueInRange(Field field, object testValue, object fromValue, object toValue);
    internal void GetEqualIntervals(Field field, object fromValue, object toValue, int intervalCount, Object[]& fromValues, Object[]& toValues);
    internal void GetEqualDistributionIntervals(Field field, ArrayList sortedList, object fromValue, object toValue, int intervalCount, Object[]& fromValues, Object[]& toValues);
    internal void GetOptimalIntervals(Field field, ArrayList sortedList, object fromValue, object toValue, int intervalCount, Object[]& fromValues, Object[]& toValues);
    private object GetRoundedAverage(Field field, object value1, object value2, bool floor);
    internal Int32[] GetJenksBreaks(ArrayList list, int itervalCount);
    internal Color[] GetColors(ColoringMode coloringMode, MapColorPalette colorPalette, Color startColor, Color middleColor, Color endColor, int colorCount);
    internal Single[] GetWidths(float startWidth, float endWidth, int count);
    internal abstract virtual Field GetField();
}
internal class Microsoft.Reporting.Map.WebForms.SaveTilesHandler : MulticastDelegate {
    public SaveTilesHandler(object object, IntPtr method);
    public virtual void Invoke(Layer layer, String[0...,0...] tileUrls, Image[0...,0...] tileImages);
    public virtual IAsyncResult BeginInvoke(Layer layer, String[0...,0...] tileUrls, Image[0...,0...] tileImages, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum Microsoft.Reporting.Map.WebForms.ScaleType : Enum {
    public int value__;
    public static ScaleType Linear;
    public static ScaleType Logarithmic;
}
[FlagsAttribute]
internal enum Microsoft.Reporting.Map.WebForms.ScrollDirection : Enum {
    public int value__;
    public static ScrollDirection None;
    public static ScrollDirection North;
    public static ScrollDirection South;
    public static ScrollDirection West;
    public static ScrollDirection East;
}
internal enum Microsoft.Reporting.Map.WebForms.SegmentType : Enum {
    public byte value__;
    public static SegmentType Polygon;
    public static SegmentType PolyLine;
    public static SegmentType Bezier;
    public static SegmentType StartFigure;
    public static SegmentType CloseFigure;
}
internal enum Microsoft.Reporting.Map.WebForms.SerializationContent : Enum {
    public int value__;
    public static SerializationContent Appearance;
    public static SerializationContent All;
}
internal enum Microsoft.Reporting.Map.WebForms.SerializationFormat : Enum {
    public int value__;
    public static SerializationFormat Xml;
    public static SerializationFormat Binary;
}
internal enum Microsoft.Reporting.Map.WebForms.SerializationVisibility : Enum {
    public int value__;
    public static SerializationVisibility Hidden;
    public static SerializationVisibility Attribute;
    public static SerializationVisibility Element;
}
[AttributeUsageAttribute("32767")]
internal class Microsoft.Reporting.Map.WebForms.SerializationVisibilityAttribute : Attribute {
    private SerializationVisibility visibility;
    public SerializationVisibility Visibility { get; public set; }
    public SerializationVisibilityAttribute(SerializationVisibility visibility);
    public SerializationVisibility get_Visibility();
    public void set_Visibility(SerializationVisibility value);
}
internal abstract class Microsoft.Reporting.Map.WebForms.SerializerBase : object {
    private bool ignoreUnknown;
    private bool templateMode;
    private bool resetWhenLoading;
    private string serializableContent;
    private string nonSerializableContent;
    internal static FontConverter fontConverter;
    internal static CursorConverter cursorConverter;
    internal static ColorConverter colorConverter;
    internal static SizeConverter sizeConverter;
    private ArrayList serializableContentList;
    private ArrayList nonSerializableContentList;
    public bool IgnoreUnknownAttributes { get; public set; }
    public bool TemplateMode { get; public set; }
    public bool ResetWhenLoading { get; public set; }
    public string SerializableContent { get; public set; }
    public string NonSerializableContent { get; public set; }
    private static SerializerBase();
    public bool get_IgnoreUnknownAttributes();
    public void set_IgnoreUnknownAttributes(bool value);
    public bool get_TemplateMode();
    public void set_TemplateMode(bool value);
    public bool get_ResetWhenLoading();
    public void set_ResetWhenLoading(bool value);
    public string get_SerializableContent();
    public void set_SerializableContent(string value);
    public string get_NonSerializableContent();
    public void set_NonSerializableContent(string value);
    public virtual void ResetObjectProperties(object objectToReset);
    protected void ResetObjectProperties(object objectToReset, object parent, string elementName);
    public abstract virtual void Serialize(object objectToSerialize, object destination);
    public abstract virtual void Deserialize(object objectToDeserialize, object source);
    protected bool IsMapBaseProperty(object objectToSerialize, object parent, PropertyInfo pi);
    protected string ImageToString(Image image);
    protected static Image ImageFromString(string data);
    internal static string StreamToString(Stream stream);
    internal static Stream StreamFromString(string data);
    protected string GetObjectName(object obj);
    protected object GetListNewItem(IList list, string itemTypeName, String& itemName, Boolean& reusedObject);
    protected bool ShouldSerializeAsAttribute(PropertyInfo pi, object parent);
    protected bool IsSerializableContent(string propertyName, object parent);
    private bool IsPropertyInList(ArrayList contentList, string className, string propertyName, Int32& classFitType, Int32& propertyFitType);
    private bool NameMatchMask(ItemInfo itemInfo, string objectName, Int32& type);
    private ArrayList GetSerializableContentList();
    private ArrayList GetNonSerializableContentList();
    private void FillContentList(ArrayList list, string content);
    private void CheckWildCars(ItemInfo info);
    internal static object ReadConvertValue(object obj, string propertyValue, BinaryReader binaryReader);
}
[DefaultMemberAttribute("Item")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.ShapeConverter")]
internal class Microsoft.Reporting.Map.WebForms.Shape : NamedElement {
    private GraphicsPath[] cachedPaths;
    private RectangleF[] cachedPathBounds;
    private RectangleF cachedTextBounds;
    internal int largestPathIndex;
    internal Hashtable fields;
    private string fieldDataBuffer;
    private ShapeData shapeData;
    private Offset offset;
    private string toolTip;
    private string href;
    private string mapAreaAttributes;
    private ContentAlignment textAlignment;
    private bool visible;
    private TextVisibility textVisibility;
    private Font font;
    private Color borderColor;
    private MapDashStyle borderStyle;
    private int borderWidth;
    private Color color;
    private Color textColor;
    private GradientType gradientType;
    private Color secondaryColor;
    private MapHatchStyle hatchStyle;
    private string text;
    private int shadowOffset;
    private int textShadowOffset;
    private bool selected;
    private Offset centralPointOffset;
    private string category;
    private string parentGroup;
    private int childSymbolMargin;
    private double scaleFactor;
    private ArrayList symbols;
    private Group parentGroupObject;
    private bool useInternalProperties;
    private Color borderColorInt;
    private Color colorInt;
    private GradientType gradientTypeInt;
    private Color secondaryColorInt;
    private MapHatchStyle hatchStyleInt;
    private string textInt;
    private string toolTipInt;
    private object mapAreaTag;
    private string layer;
    private bool belongsToLayer;
    private bool belongsToAllLayers;
    private Layer layerObject;
    private MapPoint Microsoft.Reporting.Map.WebForms.ISpatialElement.MinimumExtent { get; }
    private MapPoint Microsoft.Reporting.Map.WebForms.ISpatialElement.MaximumExtent { get; }
    [SRDescriptionAttribute("DescriptionAttributeShape_ShapeData")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public ShapeData ShapeData { get; public set; }
    private MapPoint[] Microsoft.Reporting.Map.WebForms.ISpatialElement.Points { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string EncodedShapeData { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("")]
public string FieldData { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeShape_Offset")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.ShapeOffsetConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public Offset Offset { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeShape_ToolTip")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeShape_Href")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeShape_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeShape_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeShape_TextAlignment")]
[DefaultValueAttribute]
public ContentAlignment TextAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeShape_Visible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeShape_TextVisibility")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TextVisibility TextVisibility { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeShape_Font")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8.25pt")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeShape_BorderColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeShape_BorderStyle")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeShape_BorderWidth")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeShape_Color")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color Color { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeShape_TextColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeShape_GradientType")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.GradientEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType GradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeShape_SecondaryColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color SecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeShape_HatchStyle")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapHatchStyle HatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeShape_Text")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("#NAME")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeShape_ShadowOffset")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("0")]
public int ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeShape_TextShadowOffset")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("0")]
public int TextShadowOffset { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeShape_Selected")]
[DefaultValueAttribute("False")]
public bool Selected { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeShape_CentralPoint")]
[SerializationVisibilityAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public MapPoint CentralPoint { get; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeShape_CentralPointOffset")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.ShapeOffsetConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public Offset CentralPointOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeShape_Category")]
[DefaultValueAttribute("")]
public string Category { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeShape_ParentGroup")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DesignTimeGroupConverter")]
[DefaultValueAttribute("(none)")]
public string ParentGroup { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeShape_ChildSymbolMargin")]
[DefaultValueAttribute("0")]
public int ChildSymbolMargin { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeShape_ScaleFactor")]
[DefaultValueAttribute("1")]
public double ScaleFactor { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public object Item { get; public set; }
    internal ArrayList Symbols { get; internal set; }
    internal Group ParentGroupObject { get; internal set; }
    internal bool UseInternalProperties { get; internal set; }
    internal Color BorderColorInt { get; internal set; }
    internal Color ColorInt { get; internal set; }
    internal GradientType GradientTypeInt { get; internal set; }
    internal Color SecondaryColorInt { get; internal set; }
    internal MapHatchStyle HatchStyleInt { get; internal set; }
    internal string TextInt { get; internal set; }
    internal string ToolTipInt { get; internal set; }
    internal Offset OffsetInt { get; }
    internal MapDashStyle BorderStyleInt { get; }
    internal int BorderWidthInt { get; }
    internal int ShadowOffsetInt { get; }
    internal bool VisibleInt { get; }
    internal string HrefInt { get; }
    internal string MapAreaAttributesInt { get; }
    private object Microsoft.Reporting.Map.WebForms.IImageMapProvider.Tag { get; private set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeShape_Layer")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DesignTimeLayerConverter")]
[DefaultValueAttribute("(none)")]
public string Layer { get; public set; }
    private bool Microsoft.Reporting.Map.WebForms.ILayerElement.BelongsToLayer { get; }
    private bool Microsoft.Reporting.Map.WebForms.ILayerElement.BelongsToAllLayers { get; }
    private Layer Microsoft.Reporting.Map.WebForms.ILayerElement.LayerObject { get; private set; }
    internal Shape(CommonElements common);
    private sealed virtual override MapPoint Microsoft.Reporting.Map.WebForms.ISpatialElement.get_MinimumExtent();
    private sealed virtual override MapPoint Microsoft.Reporting.Map.WebForms.ISpatialElement.get_MaximumExtent();
    public ShapeData get_ShapeData();
    public void set_ShapeData(ShapeData value);
    private sealed virtual override MapPoint[] Microsoft.Reporting.Map.WebForms.ISpatialElement.get_Points();
    public string get_EncodedShapeData();
    public void set_EncodedShapeData(string value);
    public string get_FieldData();
    public void set_FieldData(string value);
    [EditorBrowsableAttribute("1")]
protected bool ShouldSerializeOffset();
    [EditorBrowsableAttribute("1")]
protected void ResetOffset();
    public sealed virtual Offset get_Offset();
    public sealed virtual void set_Offset(Offset value);
    public sealed virtual string get_ToolTip();
    public sealed virtual void set_ToolTip(string value);
    public sealed virtual string get_Href();
    public sealed virtual void set_Href(string value);
    public string get_MapAreaAttributes();
    public void set_MapAreaAttributes(string value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public ContentAlignment get_TextAlignment();
    public void set_TextAlignment(ContentAlignment value);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public TextVisibility get_TextVisibility();
    public void set_TextVisibility(TextVisibility value);
    public sealed virtual Font get_Font();
    public sealed virtual void set_Font(Font value);
    public sealed virtual Color get_BorderColor();
    public sealed virtual void set_BorderColor(Color value);
    public MapDashStyle get_BorderStyle();
    public void set_BorderStyle(MapDashStyle value);
    public sealed virtual int get_BorderWidth();
    public sealed virtual void set_BorderWidth(int value);
    public sealed virtual Color get_Color();
    public sealed virtual void set_Color(Color value);
    public sealed virtual Color get_TextColor();
    public sealed virtual void set_TextColor(Color value);
    public sealed virtual GradientType get_GradientType();
    public sealed virtual void set_GradientType(GradientType value);
    public sealed virtual Color get_SecondaryColor();
    public sealed virtual void set_SecondaryColor(Color value);
    public sealed virtual MapHatchStyle get_HatchStyle();
    public sealed virtual void set_HatchStyle(MapHatchStyle value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual int get_ShadowOffset();
    public sealed virtual void set_ShadowOffset(int value);
    public int get_TextShadowOffset();
    public void set_TextShadowOffset(int value);
    public bool get_Selected();
    public void set_Selected(bool value);
    public MapPoint get_CentralPoint();
    [EditorBrowsableAttribute("1")]
protected bool ShouldSerializeCentralPointOffset();
    [EditorBrowsableAttribute("1")]
protected void ResetCentralPointOffset();
    public Offset get_CentralPointOffset();
    public void set_CentralPointOffset(Offset value);
    public sealed virtual string get_Category();
    public sealed virtual void set_Category(string value);
    public string get_ParentGroup();
    public void set_ParentGroup(string value);
    public int get_ChildSymbolMargin();
    public void set_ChildSymbolMargin(int value);
    public double get_ScaleFactor();
    public void set_ScaleFactor(double value);
    public sealed virtual object get_Item(string name);
    public sealed virtual void set_Item(string name, object value);
    public virtual string ToString();
    public void StartNewFigure();
    public void AddSegments(MapPoint[] points, ShapeSegment[] segments);
    public void ClearShapeData();
    public PointF GetCenterPointInContentPixels(MapGraphics g);
    public bool IsPointInShape(MapPoint mapPoint);
    internal ArrayList get_Symbols();
    internal void set_Symbols(ArrayList value);
    internal Group get_ParentGroupObject();
    internal void set_ParentGroupObject(Group value);
    internal bool get_UseInternalProperties();
    internal void set_UseInternalProperties(bool value);
    internal Color get_BorderColorInt();
    internal void set_BorderColorInt(Color value);
    internal Color get_ColorInt();
    internal void set_ColorInt(Color value);
    internal GradientType get_GradientTypeInt();
    internal void set_GradientTypeInt(GradientType value);
    internal Color get_SecondaryColorInt();
    internal void set_SecondaryColorInt(Color value);
    internal MapHatchStyle get_HatchStyleInt();
    internal void set_HatchStyleInt(MapHatchStyle value);
    internal string get_TextInt();
    internal void set_TextInt(string value);
    internal string get_ToolTipInt();
    internal void set_ToolTipInt(string value);
    internal Offset get_OffsetInt();
    internal MapDashStyle get_BorderStyleInt();
    internal int get_BorderWidthInt();
    internal int get_ShadowOffsetInt();
    internal bool get_VisibleInt();
    internal string get_HrefInt();
    internal string get_MapAreaAttributesInt();
    internal MapCore GetMapCore();
    private void InvalidateCachedShapesInGroups();
    internal void InvalidateChildSymbols();
    private string FieldDataToString();
    internal void FieldDataFromBuffer();
    internal virtual void OnAdded();
    internal virtual void OnRemove();
    protected virtual void OnDispose();
    internal void ApplyCustomColorAttributes(CustomColor customColor);
    internal void InvalidateRules();
    [IteratorStateMachineAttribute("Microsoft.Reporting.Map.WebForms.Shape/<GetGeographicRectangles>d__206")]
internal IEnumerable`1<RectangleF> GetGeographicRectangles();
    public sealed virtual bool AddGeometry(SqlGeometry geometry);
    private void AddGeometryRec(SqlGeometry geometry, ArrayList pointsList, ArrayList segmentsList);
    private void AddSimpleGeometry(SqlGeometry geometry, ArrayList pointsList, ArrayList segmentsList);
    public sealed virtual bool AddGeography(SqlGeography geography);
    private void AddGeographyRec(SqlGeography geography, ArrayList pointsList, ArrayList segmentsList);
    private void AddSimpleGeography(SqlGeography geography, ArrayList pointsList, ArrayList segmentsList);
    public sealed virtual bool LoadWKT(string wkt);
    public sealed virtual bool AddWKT(string wkt);
    public sealed virtual bool LoadWKB(Byte[] wkb);
    public sealed virtual bool AddWKB(Byte[] wkb);
    public sealed virtual string SaveWKT();
    public sealed virtual Byte[] SaveWKB();
    private void SaveWKBToStream(Stream stream);
    private void RenderText(MapGraphics g);
    internal bool IsRectangleVisible(MapGraphics g, RectangleF clipRect, MapPoint minExtent, MapPoint maxExtent);
    internal RectangleF GetTextBounds(MapGraphics g);
    internal GraphicsPath[] GetPaths(MapGraphics g);
    private MapPoint OffsetAndScaleGeoPoint(MapPoint mapPoint, double verticalOffsetFactor);
    internal GraphicsPath[] GetGeographicGraphicsPaths();
    internal double GetVerticalOffsetFactor();
    internal void ArrangeChildSymbols(MapGraphics g);
    internal void InvalidateCachedBounds();
    internal void ResetCachedPaths();
    private PointF[] ReducePoints(Point3D[] points);
    internal Brush GetBackBrush(MapGraphics g, GraphicsPath path, RectangleF pathBounds);
    internal Pen GetPen(Brush backBrush);
    private Color ApplyLayerTransparency(Color color);
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.IContentElement.IsVisible(MapGraphics g, Layer layer, bool allLayers, RectangleF clipRect);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IContentElement.RenderShadow(MapGraphics g);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IContentElement.RenderBack(MapGraphics g, HotRegionList hotRegions);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IContentElement.RenderFront(MapGraphics g, HotRegionList hotRegions);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IContentElement.RenderText(MapGraphics g, HotRegionList hotRegions);
    private sealed virtual override RectangleF Microsoft.Reporting.Map.WebForms.IContentElement.GetBoundRect(MapGraphics g);
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IToolTipProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetHref();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetMapAreaAttributes();
    private sealed virtual override object Microsoft.Reporting.Map.WebForms.IImageMapProvider.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IImageMapProvider.set_Tag(object value);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.ISelectable.DrawSelection(MapGraphics g, RectangleF clipRect, bool designTimeSelection);
    private sealed virtual override RectangleF Microsoft.Reporting.Map.WebForms.ISelectable.GetSelectionRectangle(MapGraphics g, RectangleF clipRect);
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ISelectable.IsSelected();
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ISelectable.IsVisible();
    public sealed virtual string get_Layer();
    public sealed virtual void set_Layer(string value);
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ILayerElement.get_BelongsToLayer();
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ILayerElement.get_BelongsToAllLayers();
    private sealed virtual override Layer Microsoft.Reporting.Map.WebForms.ILayerElement.get_LayerObject();
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.ILayerElement.set_LayerObject(Layer value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.ShapeCollection : NamedCollection {
    private Shape Item { get; private set; }
    private Shape Item { get; private set; }
    public Shape Item { get; public set; }
    internal ShapeCollection(NamedElement parent, CommonElements common);
    public Shape Add(string name);
    public int Add(Shape value);
    public void Remove(Shape value);
    private Shape get_Item(int index);
    private void set_Item(int index, Shape value);
    private Shape get_Item(string name);
    private void set_Item(string name, Shape value);
    public Shape get_Item(object obj);
    public void set_Item(object obj, Shape value);
    public ArrayList Find(string searchFor, bool ignoreCase, bool exactSearch, bool uniqueOnlyFields);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    protected virtual void OnInsertComplete(int index, object value);
    internal virtual void Invalidate();
}
internal class Microsoft.Reporting.Map.WebForms.ShapeConverter : CollectionItemTypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal class Microsoft.Reporting.Map.WebForms.ShapeData : object {
    private MapPoint[] points;
    private ShapeSegment[] segments;
    private MapPoint minimumExtent;
    private MapPoint maximumExtent;
    private int largestSegmentIndex;
    private bool multiPolygonWithHoles;
    public MapPoint[] Points { get; public set; }
    public ShapeSegment[] Segments { get; public set; }
    public MapPoint MinimumExtent { get; public set; }
    public MapPoint MaximumExtent { get; public set; }
    internal int LargestSegmentIndex { get; internal set; }
    internal bool MultiPolygonWithHoles { get; internal set; }
    internal bool IsEmpty { get; }
    public MapPoint[] get_Points();
    public void set_Points(MapPoint[] value);
    public ShapeSegment[] get_Segments();
    public void set_Segments(ShapeSegment[] value);
    public MapPoint get_MinimumExtent();
    public void set_MinimumExtent(MapPoint value);
    public MapPoint get_MaximumExtent();
    public void set_MaximumExtent(MapPoint value);
    internal int get_LargestSegmentIndex();
    internal void set_LargestSegmentIndex(int value);
    internal bool get_MultiPolygonWithHoles();
    internal void set_MultiPolygonWithHoles(bool value);
    internal bool get_IsEmpty();
    internal void UpdateStoredParameters();
    private void UpdateLargestSegmentIndex();
    private void UpdateMultiPolygonWithHoles();
    internal void LoadFromStream(Stream stream);
    internal void SaveToStream(Stream stream);
    internal static string ShapeDataToString(ShapeData shapeData);
    internal static ShapeData ShapeDataFromString(string data);
    internal double CalculateSignedPolygonArea(MapPoint[] polygon);
    internal MapPoint FindPolygonCentroid(MapPoint[] polygon);
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.ShapeDataBindingRuleConverter")]
internal class Microsoft.Reporting.Map.WebForms.ShapeDataBindingRule : DataBindingRuleBase {
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeShapeDataBindingRule_BindingField")]
public string BindingField { get; public set; }
    internal ShapeDataBindingRule(CommonElements common);
    public virtual string get_BindingField();
    public virtual void set_BindingField(string value);
    internal virtual void DataBind();
}
internal class Microsoft.Reporting.Map.WebForms.ShapeDataBindingRuleConverter : CollectionItemTypeConverter {
}
internal class Microsoft.Reporting.Map.WebForms.ShapeFieldPropertyDescriptor : PropertyDescriptor {
    private Field field;
    public Type ComponentType { get; }
    public string DisplayName { get; }
    public bool IsBrowsable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public ShapeFieldPropertyDescriptor(Field field, Attribute[] attributes);
    public virtual Type get_ComponentType();
    public virtual string get_DisplayName();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
    public virtual void SetValue(object component, object value);
}
internal class Microsoft.Reporting.Map.WebForms.ShapeFileReader : object {
    private string fileName;
    private Stream shpStream;
    private Stream dbfStream;
    private int fileCode;
    private int fileLength;
    private int version;
    private ShapeType shapeType;
    private double xMin;
    private double xMax;
    private double yMin;
    private double yMax;
    private double zMin;
    private double zMax;
    private double mMin;
    private double mMax;
    private ArrayList points;
    private ArrayList multiPoints;
    private ArrayList polyLines;
    private ArrayList polygons;
    private DataTable table;
    public string FileName { get; public set; }
    public Stream ShpStream { get; public set; }
    public Stream DbfStream { get; public set; }
    public int FileCode { get; public set; }
    public int FileLength { get; public set; }
    public int Version { get; public set; }
    public ShapeType ShapeType { get; public set; }
    public double XMin { get; public set; }
    public double XMax { get; public set; }
    public double YMin { get; public set; }
    public double YMax { get; public set; }
    public double ZMin { get; public set; }
    public double ZMax { get; public set; }
    public double MMin { get; public set; }
    public double MMax { get; public set; }
    public ArrayList Points { get; }
    public ArrayList MultiPoints { get; }
    public ArrayList PolyLines { get; }
    public ArrayList Polygons { get; }
    public DataTable Table { get; public set; }
    public string get_FileName();
    public void set_FileName(string value);
    public Stream get_ShpStream();
    public void set_ShpStream(Stream value);
    public Stream get_DbfStream();
    public void set_DbfStream(Stream value);
    public int get_FileCode();
    public void set_FileCode(int value);
    public int get_FileLength();
    public void set_FileLength(int value);
    public int get_Version();
    public void set_Version(int value);
    public ShapeType get_ShapeType();
    public void set_ShapeType(ShapeType value);
    public double get_XMin();
    public void set_XMin(double value);
    public double get_XMax();
    public void set_XMax(double value);
    public double get_YMin();
    public void set_YMin(double value);
    public double get_YMax();
    public void set_YMax(double value);
    public double get_ZMin();
    public void set_ZMin(double value);
    public double get_ZMax();
    public void set_ZMax(double value);
    public double get_MMin();
    public void set_MMin(double value);
    public double get_MMax();
    public void set_MMax(double value);
    public ArrayList get_Points();
    public ArrayList get_MultiPoints();
    public ArrayList get_PolyLines();
    public ArrayList get_Polygons();
    public DataTable get_Table();
    public void set_Table(DataTable value);
    public static SqlBytes File2SqlBytes(string fileName);
    public void LoadHeader();
    public void Load();
    internal void ReadHeader(BinaryReader reader);
    internal void ReadShapes(BinaryReader reader);
    public static Nullable`1<BasicMapElements> DetermineMapElementsFromShapeFile(string fileName, Nullable`1& unsupportedShapeType);
    public static Nullable`1<BasicMapElements> DetermineMapElementsFromShapeFile(Stream shpStream, Nullable`1& unsupportedShapeType);
    private Nullable`1<BasicMapElements> DetermineMapElements(Nullable`1& unsupportedShapeType);
    public static string GetShortFileName(string fullPath, string fileName);
    public static DataTable ReadDBFThroughOLEDB(string fullPath);
    public static DataSet GetDataSet(string connectionString, string sql);
    public static bool IsDataSchemaIdentical(DataTable table1, DataTable table2);
    internal int SwapBytes(int inputValue);
}
internal class Microsoft.Reporting.Map.WebForms.ShapeOffsetConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Map.WebForms.ShapePoint : object {
    public double X;
    public double Y;
    public void Read(BinaryReader reader);
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.ShapeRuleConverter")]
internal class Microsoft.Reporting.Map.WebForms.ShapeRule : RuleBase {
    private CustomColorCollection customColors;
    private string shapeField;
    private string category;
    private string showInLegend;
    private bool showInColorSwatch;
    private string legendText;
    private int colorCount;
    private Color fromColor;
    private Color middleColor;
    private Color toColor;
    private string fromValue;
    private string toValue;
    private bool useCustomColors;
    private ColoringMode coloringMode;
    private DataGrouping dataGrouping;
    private MapColorPalette colorPalette;
    private Color borderColor;
    private Color secondaryColor;
    private GradientType gradientType;
    private MapHatchStyle hatchStyle;
    private string text;
    private string toolTip;
    [SRCategoryAttribute("CategoryAttribute_CustomColors")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_CustomColors")]
[DesignerSerializationVisibilityAttribute("2")]
public CustomColorCollection CustomColors { get; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_ShapeField")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DesignTimeFieldConverter")]
[ParenthesizePropertyNameAttribute("True")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("(Name)")]
public string ShapeField { get; public set; }
    internal string Field { get; internal set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_Category")]
[DefaultValueAttribute("")]
public string Category { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Legend")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_ShowInLegend")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DesignTimeLegendConverter")]
[RefreshPropertiesAttribute("1")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("(none)")]
public string ShowInLegend { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_ShowInColorSwatch")]
[DefaultValueAttribute("False")]
public bool ShowInColorSwatch { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Legend")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_LegendText")]
[DefaultValueAttribute("#FROMVALUE{N0} - #TOVALUE{N0}")]
public string LegendText { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_ColorCount")]
[DefaultValueAttribute("5")]
public int ColorCount { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_FromColor")]
[DefaultValueAttribute("System.Drawing.Color", "Green")]
public Color FromColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_MiddleColor")]
[DefaultValueAttribute("System.Drawing.Color", "Yellow")]
public Color MiddleColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_ToColor")]
[DefaultValueAttribute("System.Drawing.Color", "Red")]
public Color ToColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_FromValue")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("")]
public string FromValue { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_ToValue")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("")]
public string ToValue { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_CustomColors")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_UseCustomColors")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]
public bool UseCustomColors { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_ColoringMode")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ColoringMode ColoringMode { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_DataGrouping")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
internal DataGrouping DataGrouping { get; internal set; }
    [SRCategoryAttribute("CategoryAttribute_Colors")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_ColorPalette")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapColorPalette ColorPalette { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_BorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_SecondaryColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color SecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_GradientType")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.GradientEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType GradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_HatchStyle")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapHatchStyle HatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_Text")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("#NAME")]
public string Text { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeShapeRule_ToolTip")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    internal CommonElements Common { get; internal set; }
    internal ShapeRule(CommonElements common);
    public CustomColorCollection get_CustomColors();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public string get_ShapeField();
    public void set_ShapeField(string value);
    internal virtual string get_Field();
    internal virtual void set_Field(string value);
    public virtual string get_Category();
    public virtual void set_Category(string value);
    public virtual string get_ShowInLegend();
    public virtual void set_ShowInLegend(string value);
    public bool get_ShowInColorSwatch();
    public void set_ShowInColorSwatch(bool value);
    public virtual string get_LegendText();
    public virtual void set_LegendText(string value);
    public int get_ColorCount();
    public void set_ColorCount(int value);
    public Color get_FromColor();
    public void set_FromColor(Color value);
    public Color get_MiddleColor();
    public void set_MiddleColor(Color value);
    public Color get_ToColor();
    public void set_ToColor(Color value);
    public virtual string get_FromValue();
    public virtual void set_FromValue(string value);
    public virtual string get_ToValue();
    public virtual void set_ToValue(string value);
    public bool get_UseCustomColors();
    public void set_UseCustomColors(bool value);
    public ColoringMode get_ColoringMode();
    public void set_ColoringMode(ColoringMode value);
    internal virtual DataGrouping get_DataGrouping();
    internal virtual void set_DataGrouping(DataGrouping value);
    public MapColorPalette get_ColorPalette();
    public void set_ColorPalette(MapColorPalette value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public Color get_SecondaryColor();
    public void set_SecondaryColor(Color value);
    public GradientType get_GradientType();
    public void set_GradientType(GradientType value);
    public MapHatchStyle get_HatchStyle();
    public void set_HatchStyle(MapHatchStyle value);
    public string get_Text();
    public void set_Text(string value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public virtual string ToString();
    internal virtual void OnAdded();
    internal void InvalidateRules();
    internal virtual void OnRemove();
    internal void RegenerateColorRanges();
    internal void UpdateColorSwatchAndLegend();
    internal string GetLegendText(Field field, string fromValue, string toValue);
    internal void Apply(Shape shape);
    internal virtual Field GetField();
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
    internal void GetRangeFromShapes(Field field, int intervalCount, Object& fromValue, Object& toValue);
    internal virtual ArrayList GetSortedValues(Field field, object fromValue, object toValue);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.ShapeRuleCollection : NamedCollection {
    private ShapeRule Item { get; private set; }
    private ShapeRule Item { get; private set; }
    public ShapeRule Item { get; public set; }
    internal ShapeRuleCollection(NamedElement parent, CommonElements common);
    public ShapeRule Add(string name);
    public int Add(ShapeRule value);
    public void Remove(ShapeRule value);
    private ShapeRule get_Item(int index);
    private void set_Item(int index, ShapeRule value);
    private ShapeRule get_Item(string name);
    private void set_Item(string name, ShapeRule value);
    public ShapeRule get_Item(object obj);
    public void set_Item(object obj, ShapeRule value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    protected virtual void OnInsertComplete(int index, object value);
}
internal class Microsoft.Reporting.Map.WebForms.ShapeRuleConverter : CollectionItemTypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal class Microsoft.Reporting.Map.WebForms.ShapeRulePropertyDescriptor : PropertyDescriptor {
    private Field field;
    public Type ComponentType { get; }
    public bool IsBrowsable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public ShapeRulePropertyDescriptor(Field field, string name, Attribute[] attrs);
    public virtual Type get_ComponentType();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
}
internal class Microsoft.Reporting.Map.WebForms.ShapeSegment : ValueType {
    public SegmentType Type;
    public int Length;
    public MapPoint MinimumExtent;
    public MapPoint MaximumExtent;
    public double PolygonSignedArea;
    public MapPoint PolygonCentroid;
}
internal enum Microsoft.Reporting.Map.WebForms.ShapeType : Enum {
    public int value__;
    public static ShapeType NullShape;
    public static ShapeType Point;
    public static ShapeType PolyLine;
    public static ShapeType Polygon;
    public static ShapeType MultiPoint;
    public static ShapeType PointZ;
    public static ShapeType PolyLineZ;
    public static ShapeType PolygonZ;
    public static ShapeType MultiPointZ;
    public static ShapeType PointM;
    public static ShapeType PolyLineM;
    public static ShapeType PolygonM;
    public static ShapeType MultiPointM;
    public static ShapeType MultiPatch;
}
internal class Microsoft.Reporting.Map.WebForms.SizeConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal class Microsoft.Reporting.Map.WebForms.SizeEmptyValueConverter : SizeConverter {
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal enum Microsoft.Reporting.Map.WebForms.SizeLocationChangeInfo : Enum {
    public int value__;
    public static SizeLocationChangeInfo Location;
    public static SizeLocationChangeInfo LocationUnit;
    public static SizeLocationChangeInfo Size;
    public static SizeLocationChangeInfo SizeUnit;
    public static SizeLocationChangeInfo ZOrder;
    public static SizeLocationChangeInfo Margins;
}
internal enum Microsoft.Reporting.Map.WebForms.SpatialLoadResult : Enum {
    public int value__;
    public static SpatialLoadResult AllSpatialElementsLoaded;
    public static SpatialLoadResult MaxSpatialElementCountReached;
    public static SpatialLoadResult MaxSpatialPointCountReached;
}
internal class Microsoft.Reporting.Map.WebForms.SpecialPosition : PinMajorTickMark {
    private bool enable;
    private float location;
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeSpecialPosition_Enable")]
[NotifyParentPropertyAttribute("True")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("False")]
public bool Enable { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeSpecialPosition_Location")]
[DefaultValueAttribute("5")]
public float Location { get; public set; }
    public SpecialPosition(object parent);
    public bool get_Enable();
    public void set_Enable(bool value);
    public virtual float get_Location();
    public virtual void set_Location(float value);
}
internal class Microsoft.Reporting.Map.WebForms.SqlBytesReader : object {
    private SqlBytes _data;
    private int _position;
    private int _length;
    private Byte[] _shortBinData;
    internal int Position { get; }
    internal int Length { get; }
    internal bool EOF { get; }
    internal SqlBytesReader(SqlBytes data);
    internal int get_Position();
    internal int get_Length();
    internal bool get_EOF();
    internal byte ReadByte();
    internal int ReadInt32();
    internal double ReadDouble();
    internal ushort ReadUInt16();
    internal UInt32 ReadUInt32();
    internal char ReadChar();
    internal Char[] ReadChars(int count);
}
[CompilerGeneratedAttribute]
internal class Microsoft.Reporting.Map.WebForms.SR : object {
    public static CultureInfo Culture { get; public set; }
    public static string AccessibilityNavigationPanelName { get; }
    public static string AccessibilityZoomPanelName { get; }
    public static string AccessibilityColorSwatchPanelName { get; }
    public static string AccessibilityColorSwatchTitleName { get; }
    public static string AccessibilityDistanceScalePanelName { get; }
    public static string AccessibilityParallelsName { get; }
    public static string AccessibilityMeridiansName { get; }
    public static string AccessibilityViewportName { get; }
    public static string AccessibilityMapControlNameRS { get; }
    public static string AccessibilityColorSwatchPanelNameRS { get; }
    public static string AccessibilityColorSwatchTitleNameRS { get; }
    public static string AccessibilityDistanceScalePanelNameRS { get; }
    public static string bad_data_src { get; }
    public static string bad_data_src_fields { get; }
    public static string bad_layer_name { get; }
    public static string circular_reference { get; }
    public static string databind_state_error { get; }
    public static string decimals_digits_error { get; }
    public static string decimals_negative { get; }
    public static string designer_find { get; }
    public static string digits_decimals_error { get; }
    public static string digits_negative { get; }
    public static string duplicate_name_failed { get; }
    public static string duration_negative { get; }
    public static string gdi_noninitialized { get; }
    public static string generate_name_failed { get; }
    public static string interval_negative { get; }
    public static string interval_offset_negative { get; }
    public static string invalid_indexer { get; }
    public static string invalid_marker_type { get; }
    public static string invalid_button_type { get; }
    public static string invalid_placement_type { get; }
    public static string margin_error { get; }
    public static string max_min_error { get; }
    public static string min_log_error { get; }
    public static string min_max_error { get; }
    public static string no_destination_type { get; }
    public static string period_negative { get; }
    public static string symbol_databinding_not_enough_params { get; }
    public static string symboldatabind_bad_loc_arg { get; }
    public static string ticknumber_out_of_range { get; }
    public static string wrong_padding_format { get; }
    public static string UnsupportedDbfDeleted { get; }
    public static string UnsupportedDbfEncryption { get; }
    public static string UnsupportedDbfField { get; }
    public static string UnsupportedDbfFieldLength { get; }
    public static string UnsupportedDbfFormat { get; }
    public static string UnsupportedDbfHeader { get; }
    public static string UnsupportedDbfLongRecords { get; }
    public static string UnsupportedDbfNumberOfFields0 { get; }
    public static string UnsupportedDbfNumberOfFileds128 { get; }
    public static string UnsupportedDbfNumberOfRecords { get; }
    public static string UnsupportedDbfRecordFlag { get; }
    public static string UnsupportedDbfTransactions { get; }
    public static string EmptyFile { get; }
    public static string FileToLarge { get; }
    public static string UnableToAllocateMemoryForSqlBinary { get; }
    public static string UnableToReadWholeFileToSqlBinary { get; }
    public static string Map_BackgroundNotAvailable { get; }
    public static string ExceptionXamlInvalidCanvasSize { get; }
    public static string ExceptionInvalidIndexerArgument { get; }
    public static string ExceptionCannotRenameField { get; }
    public static string ExceptionIndexOutOfRange { get; }
    public static string ExceptionCannotContainSpaces { get; }
    public static string ExceptionBorderWidthMustBeGreaterThanZero { get; }
    public static string ExceptionPathWidthMustBeGreaterThanZero { get; }
    public static string ExceptionMarkerBorderMustBeGreaterThanZero { get; }
    public static string ExceptionMaximumLegendAutoSize { get; }
    public static string ExceptionIntervalGraterThanZero { get; }
    public static string ExceptionValueCannotBeLessThanOne { get; }
    public static string ExceptionPropertyValueCannotbeLessThanOne { get; }
    public static string ExceptionAutoFitMinFontSizeMinValue { get; }
    public static string ExceptionLegendTableColumnSpacingTooSmall { get; }
    public static string ExceptionTextThresholdValueTooSmall { get; }
    public static string ExceptionCollorCannotBeTransparent { get; }
    public static string ExceptionTopMarginCannotBeNegative { get; }
    public static string ExceptionBottomMarginCannotBeNegative { get; }
    public static string ExceptionLeftMarginCannotBeNegative { get; }
    public static string ExceptionRightMarginCannotBeNegative { get; }
    public static string ExceptionValueCannotBeNegative { get; }
    public static string ExceptionArrayOfPointsCannotBeNull { get; }
    public static string ExceptionArrayOfPointsMustContainOnePoint { get; }
    public static string DescriptionAttributeAutoSizePanel_AutoSize { get; }
    public static string DescriptionAttributeAutoSizePanel_MaxAutoSize { get; }
    public static string DescriptionAttributeColorSwatchPanel_Colors { get; }
    public static string DescriptionAttributeColorSwatchPanel_Font { get; }
    public static string DescriptionAttributeColorSwatchPanel_LabelAlignment { get; }
    public static string DescriptionAttributeColorSwatchPanel_LabelColor { get; }
    public static string DescriptionAttributeColorSwatchPanel_LabelInterval { get; }
    public static string DescriptionAttributeColorSwatchPanel_LabelType { get; }
    public static string DescriptionAttributeColorSwatchPanel_NoDataText { get; }
    public static string DescriptionAttributeColorSwatchPanel_NumericLabelFormat { get; }
    public static string DescriptionAttributeColorSwatchPanel_OutlineColor { get; }
    public static string DescriptionAttributeColorSwatchPanel_RangeGapColor { get; }
    public static string DescriptionAttributeColorSwatchPanel_ShowEndLabels { get; }
    public static string DescriptionAttributeColorSwatchPanel_TickMarkLength { get; }
    public static string DescriptionAttributeColorSwatchPanel_Title { get; }
    public static string DescriptionAttributeColorSwatchPanel_TitleAlignment { get; }
    public static string DescriptionAttributeColorSwatchPanel_TitleColor { get; }
    public static string DescriptionAttributeColorSwatchPanel_TitleFont { get; }
    public static string DescriptionAttributeCustomColor_BorderColor { get; }
    public static string DescriptionAttributeCustomColor_Color { get; }
    public static string DescriptionAttributeCustomColor_FromValue { get; }
    public static string DescriptionAttributeCustomColor_GradientType { get; }
    public static string DescriptionAttributeCustomColor_HatchStyle { get; }
    public static string DescriptionAttributeCustomColor_LegendText { get; }
    public static string DescriptionAttributeCustomColor_SecondaryColor { get; }
    public static string DescriptionAttributeCustomColor_Text { get; }
    public static string DescriptionAttributeCustomColor_ToolTip { get; }
    public static string DescriptionAttributeCustomColor_ToValue { get; }
    public static string DescriptionAttributeCustomTickMark_BorderColor { get; }
    public static string DescriptionAttributeCustomTickMark_BorderWidth { get; }
    public static string DescriptionAttributeCustomTickMark_DistanceFromScale { get; }
    public static string DescriptionAttributeCustomTickMark_EnableGradient { get; }
    public static string DescriptionAttributeCustomTickMark_FillColor { get; }
    public static string DescriptionAttributeCustomTickMark_GradientDensity { get; }
    public static string DescriptionAttributeCustomTickMark_Image { get; }
    public static string DescriptionAttributeCustomTickMark_ImageTransColor { get; }
    public static string DescriptionAttributeCustomTickMark_Length { get; }
    public static string DescriptionAttributeCustomTickMark_Placement { get; }
    public static string DescriptionAttributeCustomTickMark_Shape { get; }
    public static string DescriptionAttributeCustomTickMark_Visible { get; }
    public static string DescriptionAttributeCustomTickMark_Width { get; }
    public static string DescriptionAttributeCustomWidth_Width { get; }
    public static string DescriptionAttributeCustomWidth_FromValue { get; }
    public static string DescriptionAttributeCustomWidth_LegendText { get; }
    public static string DescriptionAttributeCustomWidth_Text { get; }
    public static string DescriptionAttributeCustomWidth_ToolTip { get; }
    public static string DescriptionAttributeCustomWidth_ToValue { get; }
    public static string DescriptionAttributeDataBindingRuleBase_DataMember { get; }
    public static string DescriptionAttributeDistanceScalePanel_Font { get; }
    public static string DescriptionAttributeDistanceScalePanel_LabelColor { get; }
    public static string DescriptionAttributeDistanceScalePanel_ScaleBorderColor { get; }
    public static string DescriptionAttributeDistanceScalePanel_ScaleForeColor { get; }
    public static string DescriptionAttributeDockablePanel_Dock { get; }
    public static string DescriptionAttributeDockablePanel_DockAlignment { get; }
    public static string DescriptionAttributeDockablePanel_DockedInsideViewport { get; }
    public static string DescriptionAttributeField_Name { get; }
    public static string DescriptionAttributeField_Type { get; }
    public static string DescriptionAttributeField_UniqueIdentifier { get; }
    public static string DescriptionAttributeFrame_BackColor { get; }
    public static string DescriptionAttributeFrame_BackGradientType { get; }
    public static string DescriptionAttributeFrame_BackHatchStyle { get; }
    public static string DescriptionAttributeFrame_BackImage { get; }
    public static string DescriptionAttributeFrame_BackImageAlign { get; }
    public static string DescriptionAttributeFrame_BackImageMode { get; }
    public static string DescriptionAttributeFrame_BackImageTranspColor { get; }
    public static string DescriptionAttributeFrame_BackSecondaryColor { get; }
    public static string DescriptionAttributeFrame_BorderColor { get; }
    public static string DescriptionAttributeFrame_BorderStyle { get; }
    public static string DescriptionAttributeFrame_BorderWidth { get; }
    public static string DescriptionAttributeFrame_FrameStyle { get; }
    public static string DescriptionAttributeFrame_PageColor { get; }
    public static string DescriptionAttributeGridAttributes_Font { get; }
    public static string DescriptionAttributeGridAttributes_Interval { get; }
    public static string DescriptionAttributeGridAttributes_LabelColor { get; }
    public static string DescriptionAttributeGridAttributes_LabelFormatString { get; }
    public static string DescriptionAttributeGridAttributes_LabelPosition { get; }
    public static string DescriptionAttributeGridAttributes_LineColor { get; }
    public static string DescriptionAttributeGridAttributes_LineStyle { get; }
    public static string DescriptionAttributeGridAttributes_LineWidth { get; }
    public static string DescriptionAttributeGridAttributes_ShowLabels { get; }
    public static string DescriptionAttributeGridAttributes_Visible { get; }
    public static string DescriptionAttributeGroup_BorderColor { get; }
    public static string DescriptionAttributeGroup_BorderStyle { get; }
    public static string DescriptionAttributeGroup_BorderWidth { get; }
    public static string DescriptionAttributeGroup_Category { get; }
    public static string DescriptionAttributeGroup_CentralPoint { get; }
    public static string DescriptionAttributeGroup_CentralPointOffset { get; }
    public static string DescriptionAttributeGroup_Color { get; }
    public static string DescriptionAttributeGroup_Font { get; }
    public static string DescriptionAttributeGroup_GradientType { get; }
    public static string DescriptionAttributeGroup_HatchStyle { get; }
    public static string DescriptionAttributeGroup_Layer { get; }
    public static string DescriptionAttributeGroup_Name { get; }
    public static string DescriptionAttributeGroup_Offset { get; }
    public static string DescriptionAttributeGroup_SecondaryColor { get; }
    public static string DescriptionAttributeGroup_Selected { get; }
    public static string DescriptionAttributeGroup_ShadowOffset { get; }
    public static string DescriptionAttributeGroup_Text { get; }
    public static string DescriptionAttributeGroup_TextAlignment { get; }
    public static string DescriptionAttributeGroup_TextColor { get; }
    public static string DescriptionAttributeGroup_TextShadowOffset { get; }
    public static string DescriptionAttributeGroup_ToolTip { get; }
    public static string DescriptionAttributeGroup_Visible { get; }
    public static string DescriptionAttributeGroupDataBindingRule_BindingField { get; }
    public static string DescriptionAttributeGroupRule_BorderColor { get; }
    public static string DescriptionAttributeGroupRule_Category { get; }
    public static string DescriptionAttributeGroupRule_ColorCount { get; }
    public static string DescriptionAttributeGroupRule_ColoringMode { get; }
    public static string DescriptionAttributeGroupRule_ColorPalette { get; }
    public static string DescriptionAttributeGroupRule_CustomColors { get; }
    public static string DescriptionAttributeGroupRule_DataGrouping { get; }
    public static string DescriptionAttributeGroupRule_FromColor { get; }
    public static string DescriptionAttributeGroupRule_FromValue { get; }
    public static string DescriptionAttributeGroupRule_GradientType { get; }
    public static string DescriptionAttributeGroupRule_GroupField { get; }
    public static string DescriptionAttributeGroupRule_HatchStyle { get; }
    public static string DescriptionAttributeGroupRule_LegendText { get; }
    public static string DescriptionAttributeGroupRule_MiddleColor { get; }
    public static string DescriptionAttributeGroupRule_Name { get; }
    public static string DescriptionAttributeGroupRule_SecondaryColor { get; }
    public static string DescriptionAttributeGroupRule_ShowInColorSwatch { get; }
    public static string DescriptionAttributeGroupRule_ShowInLegend { get; }
    public static string DescriptionAttributeGroupRule_Text { get; }
    public static string DescriptionAttributeGroupRule_ToColor { get; }
    public static string DescriptionAttributeGroupRule_ToolTip { get; }
    public static string DescriptionAttributeGroupRule_ToValue { get; }
    public static string DescriptionAttributeGroupRule_UseCustomColors { get; }
    public static string DescriptionAttributeImageOrigin_NotSet { get; }
    public static string DescriptionAttributeImageOrigin_X { get; }
    public static string DescriptionAttributeImageOrigin_Y { get; }
    public static string DescriptionAttributeLayer_LabelVisibleFromZoom { get; }
    public static string DescriptionAttributeLayer_TileSystem { get; }
    public static string DescriptionAttributeLayer_UseSecureConnectionForTiles { get; }
    public static string DescriptionAttributeLayer_Transparency { get; }
    public static string DescriptionAttributeLayer_Visibility { get; }
    public static string DescriptionAttributeLayer_VisibleFromZoom { get; }
    public static string DescriptionAttributeLayer_VisibleToZoom { get; }
    public static string DescriptionAttributeLegend_AutoFitMinFontSize { get; }
    public static string DescriptionAttributeLegend_AutoFitText { get; }
    public static string DescriptionAttributeLegend_CellColumns { get; }
    public static string DescriptionAttributeLegend_EquallySpacedItems { get; }
    public static string DescriptionAttributeLegend_Font { get; }
    public static string DescriptionAttributeLegend_HeaderSeparator { get; }
    public static string DescriptionAttributeLegend_HeaderSeparatorColor { get; }
    public static string DescriptionAttributeLegend_InterlacedRows { get; }
    public static string DescriptionAttributeLegend_InterlacedRowsColor { get; }
    public static string DescriptionAttributeLegend_ItemColumnSeparator { get; }
    public static string DescriptionAttributeLegend_ItemColumnSeparatorColor { get; }
    public static string DescriptionAttributeLegend_ItemColumnSpacing { get; }
    public static string DescriptionAttributeLegend_Items { get; }
    public static string DescriptionAttributeLegend_LegendStyle { get; }
    public static string DescriptionAttributeLegend_Name { get; }
    public static string DescriptionAttributeLegend_TableStyle { get; }
    public static string DescriptionAttributeLegend_TextColor { get; }
    public static string DescriptionAttributeLegend_TextWrapThreshold { get; }
    public static string DescriptionAttributeLegend_Title { get; }
    public static string DescriptionAttributeLegend_TitleAlignment { get; }
    public static string DescriptionAttributeLegend_TitleBackColor { get; }
    public static string DescriptionAttributeLegend_TitleColor { get; }
    public static string DescriptionAttributeLegend_TitleFont { get; }
    public static string DescriptionAttributeLegend_TitleSeparator { get; }
    public static string DescriptionAttributeLegend_TitleSeparatorColor { get; }
    public static string DescriptionAttributeLegendCell_Alignment { get; }
    public static string DescriptionAttributeLegendCell_BackColor { get; }
    public static string DescriptionAttributeLegendCell_CellSpan { get; }
    public static string DescriptionAttributeLegendCell_CellType { get; }
    public static string DescriptionAttributeLegendCell_Font { get; }
    public static string DescriptionAttributeLegendCell_Image { get; }
    public static string DescriptionAttributeLegendCell_ImageSize { get; }
    public static string DescriptionAttributeLegendCell_ImageTranspColor { get; }
    public static string DescriptionAttributeLegendCell_Margins { get; }
    public static string DescriptionAttributeLegendCell_Name { get; }
    public static string DescriptionAttributeLegendCell_SymbolSize { get; }
    public static string DescriptionAttributeLegendCell_Text { get; }
    public static string DescriptionAttributeLegendCell_TextColor { get; }
    public static string DescriptionAttributeLegendCell_ToolTip { get; }
    public static string DescriptionAttributeLegendCellCollection_Item { get; }
    public static string DescriptionAttributeLegendCellColumn_HeaderBackColor { get; }
    public static string DescriptionAttributeLegendCellColumn_HeaderColor { get; }
    public static string DescriptionAttributeLegendCellColumn_HeaderFont { get; }
    public static string DescriptionAttributeLegendCellColumn_HeaderText { get; }
    public static string DescriptionAttributeLegendCellColumn_HeaderTextAlignment { get; }
    public static string DescriptionAttributeLegendCellColumn_MaximumWidth { get; }
    public static string DescriptionAttributeLegendCellColumn_MinimumWidth { get; }
    public static string DescriptionAttributeLegendCellColumn_Name { get; }
    public static string DescriptionAttributeLegendCellColumn_ToolTip { get; }
    public static string DescriptionAttributeLegendCellColumnCollection_Item { get; }
    public static string DescriptionAttributeLegendItem_AutomaticallyAdded { get; }
    public static string DescriptionAttributeLegendItem_BorderColor { get; }
    public static string DescriptionAttributeLegendItem_BorderStyle { get; }
    public static string DescriptionAttributeLegendItem_BorderWidth { get; }
    public static string DescriptionAttributeLegendItem_PathWidth { get; }
    public static string DescriptionAttributeLegendItem_PathLineStyle { get; }
    public static string DescriptionAttributeLegendItem_Cells { get; }
    public static string DescriptionAttributeLegendItem_Color { get; }
    public static string DescriptionAttributeLegendItem_GradientType { get; }
    public static string DescriptionAttributeLegendItem_HatchStyle { get; }
    public static string DescriptionAttributeLegendItem_Image { get; }
    public static string DescriptionAttributeLegendItem_ImageAlign { get; }
    public static string DescriptionAttributeLegendItem_ImageTranspColor { get; }
    public static string DescriptionAttributeLegendItem_ImageWrapMode { get; }
    public static string DescriptionAttributeLegendItem_ItemStyle { get; }
    public static string DescriptionAttributeLegendItem_MarkerBorderColor { get; }
    public static string DescriptionAttributeLegendItem_MarkerBorderStyle { get; }
    public static string DescriptionAttributeLegendItem_MarkerBorderWidth { get; }
    public static string DescriptionAttributeLegendItem_MarkerColor { get; }
    public static string DescriptionAttributeLegendItem_MarkerGradientType { get; }
    public static string DescriptionAttributeLegendItem_MarkerHatchStyle { get; }
    public static string DescriptionAttributeLegendItem_MarkerHeight { get; }
    public static string DescriptionAttributeLegendItem_MarkerImage { get; }
    public static string DescriptionAttributeLegendItem_MarkerImageTranspColor { get; }
    public static string DescriptionAttributeLegendItem_MarkerSecondaryColor { get; }
    public static string DescriptionAttributeLegendItem_MarkerStyle { get; }
    public static string DescriptionAttributeLegendItem_MarkerWidth { get; }
    public static string DescriptionAttributeLegendItem_Name { get; }
    public static string DescriptionAttributeLegendItem_SecondaryColor { get; }
    public static string DescriptionAttributeLegendItem_Separator { get; }
    public static string DescriptionAttributeLegendItem_SeparatorColor { get; }
    public static string DescriptionAttributeLegendItem_ShadowColor { get; }
    public static string DescriptionAttributeLegendItem_ShadowOffset { get; }
    public static string DescriptionAttributeLegendItem_Text { get; }
    public static string DescriptionAttributeLegendItem_ToolTip { get; }
    public static string DescriptionAttributeLegendItem_Visible { get; }
    public static string DescriptionAttributeLinearLabelStyle_DistanceFromScale { get; }
    public static string DescriptionAttributeLinearLabelStyle_Font { get; }
    public static string DescriptionAttributeLinearLabelStyle_FontAngle { get; }
    public static string DescriptionAttributeLinearLabelStyle_FontUnit { get; }
    public static string DescriptionAttributeLinearLabelStyle_FormatString { get; }
    public static string DescriptionAttributeLinearLabelStyle_Interval { get; }
    public static string DescriptionAttributeLinearLabelStyle_IntervalOffset { get; }
    public static string DescriptionAttributeLinearLabelStyle_Placement { get; }
    public static string DescriptionAttributeLinearLabelStyle_ShowEndLabels { get; }
    public static string DescriptionAttributeLinearLabelStyle_TextColor { get; }
    public static string DescriptionAttributeLinearLabelStyle_Visible { get; }
    public static string DescriptionAttributeLinearMajorTickMark_Length { get; }
    public static string DescriptionAttributeLinearMajorTickMark_Shape { get; }
    public static string DescriptionAttributeLinearMajorTickMark_Width { get; }
    public static string DescriptionAttributeLinearMinorTickMark_Length { get; }
    public static string DescriptionAttributeLinearMinorTickMark_Shape { get; }
    public static string DescriptionAttributeLinearMinorTickMark_Width { get; }
    public static string DescriptionAttributeLinearPinLabel_DistanceFromScale { get; }
    public static string DescriptionAttributeLinearPinLabel_Font { get; }
    public static string DescriptionAttributeLinearPinLabel_FontAngle { get; }
    public static string DescriptionAttributeLinearPinLabel_FontUnit { get; }
    public static string DescriptionAttributeLinearPinLabel_Placement { get; }
    public static string DescriptionAttributeLinearPinLabel_Text { get; }
    public static string DescriptionAttributeLinearPinLabel_TextColor { get; }
    public static string DescriptionAttributeLinearPointer_BorderColor { get; }
    public static string DescriptionAttributeLinearPointer_BorderStyle { get; }
    public static string DescriptionAttributeLinearPointer_BorderWidth { get; }
    public static string DescriptionAttributeLinearPointer_Cursor { get; }
    public static string DescriptionAttributeLinearPointer_DistanceFromScale { get; }
    public static string DescriptionAttributeLinearPointer_FillColor { get; }
    public static string DescriptionAttributeLinearPointer_FillGradientType { get; }
    public static string DescriptionAttributeLinearPointer_FillHatchStyle { get; }
    public static string DescriptionAttributeLinearPointer_FillSecondaryColor { get; }
    public static string DescriptionAttributeLinearPointer_Image { get; }
    public static string DescriptionAttributeLinearPointer_ImageOrigin { get; }
    public static string DescriptionAttributeLinearPointer_ImageTransColor { get; }
    public static string DescriptionAttributeLinearPointer_Interactive { get; }
    public static string DescriptionAttributeLinearPointer_MarkerLength { get; }
    public static string DescriptionAttributeLinearPointer_MarkerStyle { get; }
    public static string DescriptionAttributeLinearPointer_Placement { get; }
    public static string DescriptionAttributeLinearPointer_ShadowOffset { get; }
    public static string DescriptionAttributeLinearPointer_SnappingEnabled { get; }
    public static string DescriptionAttributeLinearPointer_SnappingInterval { get; }
    public static string DescriptionAttributeLinearPointer_ToolTip { get; }
    public static string DescriptionAttributeLinearPointer_Type { get; }
    public static string DescriptionAttributeLinearPointer_Value { get; }
    public static string DescriptionAttributeLinearPointer_Visible { get; }
    public static string DescriptionAttributeLinearPointer_Width { get; }
    public static string DescriptionAttributeLinearScale_BorderColor { get; }
    public static string DescriptionAttributeLinearScale_BorderStyle { get; }
    public static string DescriptionAttributeLinearScale_BorderWidth { get; }
    public static string DescriptionAttributeLinearScale_EndMargin { get; }
    public static string DescriptionAttributeLinearScale_FillColor { get; }
    public static string DescriptionAttributeLinearScale_FillGradientType { get; }
    public static string DescriptionAttributeLinearScale_FillHatchStyle { get; }
    public static string DescriptionAttributeLinearScale_FillSecondaryColor { get; }
    public static string DescriptionAttributeLinearScale_Interval { get; }
    public static string DescriptionAttributeLinearScale_IntervalOffset { get; }
    public static string DescriptionAttributeLinearScale_Logarithmic { get; }
    public static string DescriptionAttributeLinearScale_LogarithmicBase { get; }
    public static string DescriptionAttributeLinearScale_MajorTickMark { get; }
    public static string DescriptionAttributeLinearScale_Maximum { get; }
    public static string DescriptionAttributeLinearScale_MaximumPin { get; }
    public static string DescriptionAttributeLinearScale_Minimum { get; }
    public static string DescriptionAttributeLinearScale_MinimumPin { get; }
    public static string DescriptionAttributeLinearScale_MinorTickMark { get; }
    public static string DescriptionAttributeLinearScale_Multiplier { get; }
    public static string DescriptionAttributeLinearScale_Position { get; }
    public static string DescriptionAttributeLinearScale_Reversed { get; }
    public static string DescriptionAttributeLinearScale_ShadowOffset { get; }
    public static string DescriptionAttributeLinearScale_StartMargin { get; }
    public static string DescriptionAttributeLinearScale_TickMarksOnTop { get; }
    public static string DescriptionAttributeLinearScale_ToolTip { get; }
    public static string DescriptionAttributeLinearScale_Visible { get; }
    public static string DescriptionAttributeLinearScale_Width { get; }
    public static string DescriptionAttributeLinearSpecialPosition_LabelStyle { get; }
    public static string DescriptionAttributeMapControl_AntiAliasing { get; }
    public static string DescriptionAttributeMapControl_BackGradientType { get; }
    public static string DescriptionAttributeMapControl_BackHatchStyle { get; }
    public static string DescriptionAttributeMapControl_BackSecondaryColor { get; }
    public static string DescriptionAttributeMapControl_BorderLineColor { get; }
    public static string DescriptionAttributeMapControl_BorderLineStyle { get; }
    public static string DescriptionAttributeMapControl_BorderLineWidth { get; }
    public static string DescriptionAttributeMapControl_ColorSwatchPanel { get; }
    public static string DescriptionAttributeMapControl_DataBindingRules { get; }
    public static string DescriptionAttributeMapControl_DataSource { get; }
    public static string DescriptionAttributeMapControl_DimIntensity { get; }
    public static string DescriptionAttributeMapControl_DimWhenNotFocused { get; }
    public static string DescriptionAttributeMapControl_DistanceScalePanel { get; }
    public static string DescriptionAttributeMapControl_Frame { get; }
    public static string DescriptionAttributeMapControl_GeographyMode { get; }
    public static string DescriptionAttributeMapControl_GridUnderContent { get; }
    public static string DescriptionAttributeMapControl_GroupFields { get; }
    public static string DescriptionAttributeMapControl_GroupRules { get; }
    public static string DescriptionAttributeMapControl_Groups { get; }
    public static string DescriptionAttributeMapControl_Images { get; }
    public static string DescriptionAttributeMapControl_KeyboardNavigation { get; }
    public static string DescriptionAttributeMapControl_Labels { get; }
    public static string DescriptionAttributeMapControl_Layers { get; }
    public static string DescriptionAttributeMapControl_Legends { get; }
    public static string DescriptionAttributeMapControl_MapLimits { get; }
    public static string DescriptionAttributeMapControl_AutoLimitsIgnoreSymbols { get; }
    public static string DescriptionAttributeMapControl_Meridians { get; }
    public static string DescriptionAttributeMapControl_MouseWheelZooming { get; }
    public static string DescriptionAttributeMapControl_NamedImages { get; }
    public static string DescriptionAttributeMapControl_NavigationPanel { get; }
    public static string DescriptionAttributeMapControl_Parallels { get; }
    public static string DescriptionAttributeMapControl_PathFields { get; }
    public static string DescriptionAttributeMapControl_PathRules { get; }
    public static string DescriptionAttributeMapControl_Paths { get; }
    public static string DescriptionAttributeMapControl_Printing { get; }
    public static string DescriptionAttributeMapControl_Projection { get; }
    public static string DescriptionAttributeMapControl_ProjectionCenter { get; }
    public static string DescriptionAttributeMapControl_SelectionBorderColor { get; }
    public static string DescriptionAttributeMapControl_SelectionMarkerColor { get; }
    public static string DescriptionAttributeMapControl_ShadowIntensity { get; }
    public static string DescriptionAttributeMapControl_ShapeFields { get; }
    public static string DescriptionAttributeMapControl_ShapeRules { get; }
    public static string DescriptionAttributeMapControl_Shapes { get; }
    public static string DescriptionAttributeMapControl_SymbolFields { get; }
    public static string DescriptionAttributeMapControl_SymbolRules { get; }
    public static string DescriptionAttributeMapControl_Symbols { get; }
    public static string DescriptionAttributeMapControl_TextAntiAliasingQuality { get; }
    public static string DescriptionAttributeMapControl_TileServerMaxConnections { get; }
    public static string DescriptionAttributeMapControl_TileServerTimeout { get; }
    public static string DescriptionAttributeMapControl_TileCulture { get; }
    public static string DescriptionAttributeMapControl_TileCacheLevel { get; }
    public static string DescriptionAttributeMapControl_TileServerAppId { get; }
    public static string DescriptionAttributeMapControl_Viewport { get; }
    public static string DescriptionAttributeMapControl_ZoomPanel { get; }
    public static string DescriptionAttributeMapCore_BorderLineColor { get; }
    public static string DescriptionAttributeMapCore_BorderLineStyle { get; }
    public static string DescriptionAttributeMapCore_BorderLineWidth { get; }
    public static string DescriptionAttributeMapCore_BuildNumber { get; }
    public static string DescriptionAttributeMapCore_ControlType { get; }
    public static string DescriptionAttributeMapCore_DimIntensity { get; }
    public static string DescriptionAttributeMapCore_DimWhenNotFocused { get; }
    public static string DescriptionAttributeMapImage_Angle { get; }
    public static string DescriptionAttributeMapImage_BorderStyle { get; }
    public static string DescriptionAttributeMapImage_Image { get; }
    public static string DescriptionAttributeMapImage_ImageTransColor { get; }
    public static string DescriptionAttributeMapImage_Name { get; }
    public static string DescriptionAttributeMapImage_ResizeMode { get; }
    public static string DescriptionAttributeMapImage_ShadowOffset { get; }
    public static string DescriptionAttributeMapImage_ToolTip { get; }
    public static string DescriptionAttributeMapImage_Transparency { get; }
    public static string DescriptionAttributeMapImage_Visible { get; }
    public static string DescriptionAttributeMapLabel_Angle { get; }
    public static string DescriptionAttributeMapLabel_BackColor { get; }
    public static string DescriptionAttributeMapLabel_BackGradientType { get; }
    public static string DescriptionAttributeMapLabel_BackHatchStyle { get; }
    public static string DescriptionAttributeMapLabel_BackSecondaryColor { get; }
    public static string DescriptionAttributeMapLabel_BackShadowOffset { get; }
    public static string DescriptionAttributeMapLabel_BorderStyle { get; }
    public static string DescriptionAttributeMapLabel_Font { get; }
    public static string DescriptionAttributeMapLabel_Name { get; }
    public static string DescriptionAttributeMapLabel_Text { get; }
    public static string DescriptionAttributeMapLabel_TextAlignment { get; }
    public static string DescriptionAttributeMapLabel_TextColor { get; }
    public static string DescriptionAttributeMapLabel_TextShadowOffset { get; }
    public static string DescriptionAttributeMapLabel_ToolTip { get; }
    public static string DescriptionAttributeMapLabel_Visible { get; }
    public static string DescriptionAttributeMapLimits_MaximumX { get; }
    public static string DescriptionAttributeMapLimits_MaximumY { get; }
    public static string DescriptionAttributeMapLimits_MinimumX { get; }
    public static string DescriptionAttributeMapLimits_MinimumY { get; }
    public static string DescriptionAttributeMapLocation_X { get; }
    public static string DescriptionAttributeMapLocation_Y { get; }
    public static string DescriptionAttributeMapPoint_X { get; }
    public static string DescriptionAttributeMapPoint_Y { get; }
    public static string DescriptionAttributeMapSerializer_Content { get; }
    public static string DescriptionAttributeMapSerializer_Format { get; }
    public static string DescriptionAttributeMapSerializer_IgnoreUnknownXmlAttributes { get; }
    public static string DescriptionAttributeMapSerializer_NonSerializableContent { get; }
    public static string DescriptionAttributeMapSerializer_ResetWhenLoading { get; }
    public static string DescriptionAttributeMapSerializer_SerializableContent { get; }
    public static string DescriptionAttributeMapSerializer_TemplateMode { get; }
    public static string DescriptionAttributeMapSize_Height { get; }
    public static string DescriptionAttributeMapSize_Width { get; }
    public static string DescriptionAttributeMargins_Bottom { get; }
    public static string DescriptionAttributeMargins_Left { get; }
    public static string DescriptionAttributeMargins_Right { get; }
    public static string DescriptionAttributeMargins_Top { get; }
    public static string DescriptionAttributeNamedElement_Collection { get; }
    public static string DescriptionAttributeNamedElement_Name { get; }
    public static string DescriptionAttributeNamedElement_ParentElement { get; }
    public static string DescriptionAttributeNamedElement_Tag { get; }
    public static string DescriptionAttributeNamedImage_Image { get; }
    public static string DescriptionAttributeNavigationPanel_ButtonBorderColor { get; }
    public static string DescriptionAttributeNavigationPanel_ButtonColor { get; }
    public static string DescriptionAttributeNavigationPanel_PanelStyle { get; }
    public static string DescriptionAttributeNavigationPanel_ScrollStep { get; }
    public static string DescriptionAttributeNavigationPanel_SymbolBorderColor { get; }
    public static string DescriptionAttributeNavigationPanel_SymbolColor { get; }
    public static string DescriptionAttributeOffset_X { get; }
    public static string DescriptionAttributeOffset_Y { get; }
    public static string DescriptionAttributePanel_BackColor { get; }
    public static string DescriptionAttributePanel_BackGradientType { get; }
    public static string DescriptionAttributePanel_BackHatchStyle { get; }
    public static string DescriptionAttributePanel_BackSecondaryColor { get; }
    public static string DescriptionAttributePanel_BackShadowOffset { get; }
    public static string DescriptionAttributePanel_BorderColor { get; }
    public static string DescriptionAttributePanel_BorderStyle { get; }
    public static string DescriptionAttributePanel_BorderWidth { get; }
    public static string DescriptionAttributePanel_Location { get; }
    public static string DescriptionAttributePanel_LocationUnit { get; }
    public static string DescriptionAttributePanel_Margins { get; }
    public static string DescriptionAttributePanel_Selected { get; }
    public static string DescriptionAttributePanel_Size { get; }
    public static string DescriptionAttributePanel_SizeUnit { get; }
    public static string DescriptionAttributePanel_ToolTip { get; }
    public static string DescriptionAttributePanel_Visible { get; }
    public static string DescriptionAttributePanel_ZOrder { get; }
    public static string DescriptionAttributePanelMargins_All { get; }
    public static string DescriptionAttributePanelMargins_Bottom { get; }
    public static string DescriptionAttributePanelMargins_Left { get; }
    public static string DescriptionAttributePanelMargins_Right { get; }
    public static string DescriptionAttributePanelMargins_Top { get; }
    public static string DescriptionAttributePath_BorderColor { get; }
    public static string DescriptionAttributePath_BorderWidth { get; }
    public static string DescriptionAttributePath_Category { get; }
    public static string DescriptionAttributePath_Color { get; }
    public static string DescriptionAttributePath_Font { get; }
    public static string DescriptionAttributePath_GradientType { get; }
    public static string DescriptionAttributePath_HatchStyle { get; }
    public static string DescriptionAttributePath_LabelPosition { get; }
    public static string DescriptionAttributePath_Layer { get; }
    public static string DescriptionAttributePath_LineStyle { get; }
    public static string DescriptionAttributePath_Name { get; }
    public static string DescriptionAttributePath_Offset { get; }
    public static string DescriptionAttributePath_ParentGroup { get; }
    public static string DescriptionAttributePath_PathData { get; }
    public static string DescriptionAttributePath_SecondaryColor { get; }
    public static string DescriptionAttributePath_Selected { get; }
    public static string DescriptionAttributePath_ShadowOffset { get; }
    public static string DescriptionAttributePath_Text { get; }
    public static string DescriptionAttributePath_TextColor { get; }
    public static string DescriptionAttributePath_TextShadowOffset { get; }
    public static string DescriptionAttributePath_ToolTip { get; }
    public static string DescriptionAttributePath_Visible { get; }
    public static string DescriptionAttributePath_Width { get; }
    public static string DescriptionAttributePathDataBindingRule_BindingField { get; }
    public static string DescriptionAttributePathRule_BorderColor { get; }
    public static string DescriptionAttributePathRule_Category { get; }
    public static string DescriptionAttributePathRule_LineStyleInLegend { get; }
    public static string DescriptionAttributePathRule_BorderWidthInLegend { get; }
    public static string DescriptionAttributePathRule_WidthInLegend { get; }
    public static string DescriptionAttributePathRule_ColorCount { get; }
    public static string DescriptionAttributePathRule_ColoringMode { get; }
    public static string DescriptionAttributePathRule_ColorPalette { get; }
    public static string DescriptionAttributePathRule_CustomColors { get; }
    public static string DescriptionAttributePathRule_DataGrouping { get; }
    public static string DescriptionAttributePathRule_FromColor { get; }
    public static string DescriptionAttributePathRule_FromValue { get; }
    public static string DescriptionAttributePathRule_GradientType { get; }
    public static string DescriptionAttributePathRule_HatchStyle { get; }
    public static string DescriptionAttributePathRule_LegendText { get; }
    public static string DescriptionAttributePathRule_MiddleColor { get; }
    public static string DescriptionAttributePathRule_Name { get; }
    public static string DescriptionAttributePathRule_PathField { get; }
    public static string DescriptionAttributePathRule_SecondaryColor { get; }
    public static string DescriptionAttributePathRule_ShowInColorSwatch { get; }
    public static string DescriptionAttributePathRule_ShowInLegend { get; }
    public static string DescriptionAttributePathRule_Text { get; }
    public static string DescriptionAttributePathRule_ToColor { get; }
    public static string DescriptionAttributePathRule_ToolTip { get; }
    public static string DescriptionAttributePathRule_ToValue { get; }
    public static string DescriptionAttributePathRule_UseCustomColors { get; }
    public static string DescriptionAttributePathWidthRule_WidthCount { get; }
    public static string DescriptionAttributePathWidthRule_CustomWidths { get; }
    public static string DescriptionAttributePathWidthRule_FromWidth { get; }
    public static string DescriptionAttributePathWidthRule_FromValue { get; }
    public static string DescriptionAttributePathWidthRule_ToWidth { get; }
    public static string DescriptionAttributePathWidthRule_ToValue { get; }
    public static string DescriptionAttributePathWidthRule_UseCustomWidths { get; }
    public static string DescriptionAttributePathWidthRule_BorderColorInLegend { get; }
    public static string DescriptionAttributePathWidthRule_ColorInLegend { get; }
    public static string DescriptionAttributePathWidthRule_SecondaryColorInLegend { get; }
    public static string DescriptionAttributePathWidthRule_GradientTypeInLegend { get; }
    public static string DescriptionAttributePathWidthRule_HatchStyleInLegend { get; }
    public static string DescriptionAttributePinMajorTickMark_Length { get; }
    public static string DescriptionAttributePinMajorTickMark_Shape { get; }
    public static string DescriptionAttributePinMajorTickMark_Width { get; }
    public static string DescriptionAttributePredefinedSymbol_BorderColor { get; }
    public static string DescriptionAttributePredefinedSymbol_BorderStyle { get; }
    public static string DescriptionAttributePredefinedSymbol_BorderWidth { get; }
    public static string DescriptionAttributePredefinedSymbol_Category { get; }
    public static string DescriptionAttributePredefinedSymbol_Color { get; }
    public static string DescriptionAttributePredefinedSymbol_Font { get; }
    public static string DescriptionAttributePredefinedSymbol_FromValue { get; }
    public static string DescriptionAttributePredefinedSymbol_GradientType { get; }
    public static string DescriptionAttributePredefinedSymbol_HatchStyle { get; }
    public static string DescriptionAttributePredefinedSymbol_Height { get; }
    public static string DescriptionAttributePredefinedSymbol_Image { get; }
    public static string DescriptionAttributePredefinedSymbol_ImageResizeMode { get; }
    public static string DescriptionAttributePredefinedSymbol_ImageTransColor { get; }
    public static string DescriptionAttributePredefinedSymbol_LegendText { get; }
    public static string DescriptionAttributePredefinedSymbol_MarkerStyle { get; }
    public static string DescriptionAttributePredefinedSymbol_Name { get; }
    public static string DescriptionAttributePredefinedSymbol_SecondaryColor { get; }
    public static string DescriptionAttributePredefinedSymbol_ShadowOffset { get; }
    public static string DescriptionAttributePredefinedSymbol_Text { get; }
    public static string DescriptionAttributePredefinedSymbol_TextAlignment { get; }
    public static string DescriptionAttributePredefinedSymbol_TextColor { get; }
    public static string DescriptionAttributePredefinedSymbol_TextShadowOffset { get; }
    public static string DescriptionAttributePredefinedSymbol_ToolTip { get; }
    public static string DescriptionAttributePredefinedSymbol_ToValue { get; }
    public static string DescriptionAttributePredefinedSymbol_Visible { get; }
    public static string DescriptionAttributePredefinedSymbol_Width { get; }
    public static string DescriptionAttributePrintingManager_PrintDocument { get; }
    public static string DescriptionAttributeProjectionCenter_X { get; }
    public static string DescriptionAttributeProjectionCenter_Y { get; }
    public static string DescriptionAttributeShape_BorderColor { get; }
    public static string DescriptionAttributeShape_BorderStyle { get; }
    public static string DescriptionAttributeShape_BorderWidth { get; }
    public static string DescriptionAttributeShape_Category { get; }
    public static string DescriptionAttributeShape_CentralPoint { get; }
    public static string DescriptionAttributeShape_CentralPointOffset { get; }
    public static string DescriptionAttributeShape_ChildSymbolMargin { get; }
    public static string DescriptionAttributeShape_Color { get; }
    public static string DescriptionAttributeShape_Font { get; }
    public static string DescriptionAttributeShape_GradientType { get; }
    public static string DescriptionAttributeShape_HatchStyle { get; }
    public static string DescriptionAttributeShape_Layer { get; }
    public static string DescriptionAttributeShape_Name { get; }
    public static string DescriptionAttributeShape_Offset { get; }
    public static string DescriptionAttributeShape_ParentGroup { get; }
    public static string DescriptionAttributeShape_ScaleFactor { get; }
    public static string DescriptionAttributeShape_SecondaryColor { get; }
    public static string DescriptionAttributeShape_Selected { get; }
    public static string DescriptionAttributeShape_ShadowOffset { get; }
    public static string DescriptionAttributeShape_ShapeData { get; }
    public static string DescriptionAttributeShape_Text { get; }
    public static string DescriptionAttributeShape_TextAlignment { get; }
    public static string DescriptionAttributeShape_TextColor { get; }
    public static string DescriptionAttributeShape_TextShadowOffset { get; }
    public static string DescriptionAttributeShape_TextVisibility { get; }
    public static string DescriptionAttributeShape_ToolTip { get; }
    public static string DescriptionAttributeShape_Visible { get; }
    public static string DescriptionAttributeShapeDataBindingRule_BindingField { get; }
    public static string DescriptionAttributeShapeRule_BorderColor { get; }
    public static string DescriptionAttributeShapeRule_Category { get; }
    public static string DescriptionAttributeShapeRule_ColorCount { get; }
    public static string DescriptionAttributeShapeRule_ColoringMode { get; }
    public static string DescriptionAttributeShapeRule_ColorPalette { get; }
    public static string DescriptionAttributeShapeRule_CustomColors { get; }
    public static string DescriptionAttributeShapeRule_DataGrouping { get; }
    public static string DescriptionAttributeShapeRule_FromColor { get; }
    public static string DescriptionAttributeShapeRule_FromValue { get; }
    public static string DescriptionAttributeShapeRule_GradientType { get; }
    public static string DescriptionAttributeShapeRule_HatchStyle { get; }
    public static string DescriptionAttributeShapeRule_LegendText { get; }
    public static string DescriptionAttributeShapeRule_MiddleColor { get; }
    public static string DescriptionAttributeShapeRule_Name { get; }
    public static string DescriptionAttributeShapeRule_SecondaryColor { get; }
    public static string DescriptionAttributeShapeRule_ShapeField { get; }
    public static string DescriptionAttributeShapeRule_ShowInColorSwatch { get; }
    public static string DescriptionAttributeShapeRule_ShowInLegend { get; }
    public static string DescriptionAttributeShapeRule_Text { get; }
    public static string DescriptionAttributeShapeRule_ToColor { get; }
    public static string DescriptionAttributeShapeRule_ToolTip { get; }
    public static string DescriptionAttributeShapeRule_ToValue { get; }
    public static string DescriptionAttributeShapeRule_UseCustomColors { get; }
    public static string DescriptionAttributeSpecialPosition_Enable { get; }
    public static string DescriptionAttributeSpecialPosition_Location { get; }
    public static string DescriptionAttributeSwatchColor_AutomaticallyAdded { get; }
    public static string DescriptionAttributeSwatchColor_Color { get; }
    public static string DescriptionAttributeSwatchColor_FromValue { get; }
    public static string DescriptionAttributeSwatchColor_GradientType { get; }
    public static string DescriptionAttributeSwatchColor_HatchStyle { get; }
    public static string DescriptionAttributeSwatchColor_NoData { get; }
    public static string DescriptionAttributeSwatchColor_SecondaryColor { get; }
    public static string DescriptionAttributeSwatchColor_TextValue { get; }
    public static string DescriptionAttributeSwatchColor_ToValue { get; }
    public static string DescriptionAttributeSymbol_BorderColor { get; }
    public static string DescriptionAttributeSymbol_BorderStyle { get; }
    public static string DescriptionAttributeSymbol_BorderWidth { get; }
    public static string DescriptionAttributeSymbol_Category { get; }
    public static string DescriptionAttributeSymbol_Color { get; }
    public static string DescriptionAttributeSymbol_Font { get; }
    public static string DescriptionAttributeSymbol_GradientType { get; }
    public static string DescriptionAttributeSymbol_HatchStyle { get; }
    public static string DescriptionAttributeSymbol_Height { get; }
    public static string DescriptionAttributeSymbol_Image { get; }
    public static string DescriptionAttributeSymbol_ImageResizeMode { get; }
    public static string DescriptionAttributeSymbol_ImageTransColor { get; }
    public static string DescriptionAttributeSymbol_Layer { get; }
    public static string DescriptionAttributeSymbol_MarkerStyle { get; }
    public static string DescriptionAttributeSymbol_Name { get; }
    public static string DescriptionAttributeSymbol_Offset { get; }
    public static string DescriptionAttributeSymbol_ParentShape { get; }
    public static string DescriptionAttributeSymbol_SecondaryColor { get; }
    public static string DescriptionAttributeSymbol_Selected { get; }
    public static string DescriptionAttributeSymbol_ShadowOffset { get; }
    public static string DescriptionAttributeSymbol_SymbolData { get; }
    public static string DescriptionAttributeSymbol_Text { get; }
    public static string DescriptionAttributeSymbol_TextAlignment { get; }
    public static string DescriptionAttributeSymbol_TextColor { get; }
    public static string DescriptionAttributeSymbol_TextShadowOffset { get; }
    public static string DescriptionAttributeSymbol_ToolTip { get; }
    public static string DescriptionAttributeSymbol_Visible { get; }
    public static string DescriptionAttributeSymbol_Width { get; }
    public static string DescriptionAttributeSymbol_X { get; }
    public static string DescriptionAttributeSymbol_Y { get; }
    public static string DescriptionAttributeSymbolDataBindingRule_BindingField { get; }
    public static string DescriptionAttributeSymbolDataBindingRule_Category { get; }
    public static string DescriptionAttributeSymbolDataBindingRule_ParentShapeField { get; }
    public static string DescriptionAttributeSymbolDataBindingRule_XCoordinateField { get; }
    public static string DescriptionAttributeSymbolDataBindingRule_YCoordinateField { get; }
    public static string DescriptionAttributeSymbolRule_Category { get; }
    public static string DescriptionAttributeSymbolRule_ShowInColorSwatch { get; }
    public static string DescriptionAttributeSymbolRule_DataGrouping { get; }
    public static string DescriptionAttributeSymbolRule_FromValue { get; }
    public static string DescriptionAttributeSymbolRule_LegendText { get; }
    public static string DescriptionAttributeSymbolRule_Name { get; }
    public static string DescriptionAttributeSymbolRule_PredefinedSymbols { get; }
    public static string DescriptionAttributeSymbolRule_ShowInLegend { get; }
    public static string DescriptionAttributeSymbolRule_SymbolField { get; }
    public static string DescriptionAttributeSymbolRule_ToValue { get; }
    public static string DescriptionAttributeTickMark_Interval { get; }
    public static string DescriptionAttributeTickMark_IntervalOffset { get; }
    public static string DescriptionAttributeViewCenter_X { get; }
    public static string DescriptionAttributeViewCenter_Y { get; }
    public static string DescriptionAttributeViewport_AutoSize { get; }
    public static string DescriptionAttributeViewport_ContentAutoFitMargin { get; }
    public static string DescriptionAttributeViewport_ContentSize { get; }
    public static string DescriptionAttributeViewport_EnablePanning { get; }
    public static string DescriptionAttributeViewport_ErrorMessage { get; }
    public static string DescriptionAttributeViewport_MaximumZoom { get; }
    public static string DescriptionAttributeViewport_MinimumZoom { get; }
    public static string DescriptionAttributeViewport_OptimizeForPanning { get; }
    public static string DescriptionAttributeViewport_LoadTilesAsynchronously { get; }
    public static string DescriptionAttributeViewport_QueryVirtualEarthAsynchronously { get; }
    public static string DescriptionAttributeViewport_ViewCenter { get; }
    public static string DescriptionAttributeViewport_Zoom { get; }
    public static string DescriptionAttributeZoomPanel_ButtonBorderColor { get; }
    public static string DescriptionAttributeZoomPanel_ButtonColor { get; }
    public static string DescriptionAttributeZoomPanel_Dock { get; }
    public static string DescriptionAttributeZoomPanel_Orientation { get; }
    public static string DescriptionAttributeZoomPanel_PanelStyle { get; }
    public static string DescriptionAttributeZoomPanel_Reversed { get; }
    public static string DescriptionAttributeZoomPanel_SliderBarBorderColor { get; }
    public static string DescriptionAttributeZoomPanel_SliderBarColor { get; }
    public static string DescriptionAttributeZoomPanel_SnapToTickMarks { get; }
    public static string DescriptionAttributeZoomPanel_SymbolBorderColor { get; }
    public static string DescriptionAttributeZoomPanel_SymbolColor { get; }
    public static string DescriptionAttributeZoomPanel_ThumbBorderColor { get; }
    public static string DescriptionAttributeZoomPanel_ThumbColor { get; }
    public static string DescriptionAttributeZoomPanel_TickBorderColor { get; }
    public static string DescriptionAttributeZoomPanel_TickColor { get; }
    public static string DescriptionAttributeZoomPanel_TickCount { get; }
    public static string DescriptionAttributeZoomPanel_ZoomButtonsVisible { get; }
    public static string DescriptionAttributeZoomPanel_ZoomType { get; }
    public static string DescriptionAttributeTileServerUrl_Culture { get; }
    public static string DescriptionAttributeTileServerUrl_SupportedTileSystem { get; }
    public static string DescriptionAttributeTileServerUrl_Url { get; }
    public static string DescriptionAttributeGroup_Href { get; }
    public static string DescriptionAttributeGroup_MapAreaAttributes { get; }
    public static string DescriptionAttributeLegendCell_CellAttributes { get; }
    public static string DescriptionAttributeLegendCell_Href { get; }
    public static string DescriptionAttributeLegendCellColumn_CellColumnAttributes { get; }
    public static string DescriptionAttributeLegendCellColumn_Href { get; }
    public static string DescriptionAttributeLegendItem_Href { get; }
    public static string DescriptionAttributeLegendItem_MapAreaAttributes { get; }
    public static string DescriptionAttributeLegendItem_SeriesName { get; }
    public static string DescriptionAttributeLegendItem_SeriesPointIndex { get; }
    public static string DescriptionAttributeLinearPointer_Href { get; }
    public static string DescriptionAttributeLinearPointer_MapAreaAttributes { get; }
    public static string DescriptionAttributeLinearScale_Href { get; }
    public static string DescriptionAttributeMapArea_Coordinates { get; }
    public static string DescriptionAttributeMapArea_Href { get; }
    public static string DescriptionAttributeMapArea_MapAreaAttributes { get; }
    public static string DescriptionAttributeMapArea_Name { get; }
    public static string DescriptionAttributeMapArea_Shape { get; }
    public static string DescriptionAttributeMapArea_ToolTip { get; }
    public static string DescriptionAttributeMapControl_Compression { get; }
    public static string DescriptionAttributeMapControl_ContentCachingEnabled { get; }
    public static string DescriptionAttributeMapControl_ContentCachingTimeout { get; }
    public static string DescriptionAttributeMapControl_ControlPersistence { get; }
    public static string DescriptionAttributeMapControl_EnableViewState { get; }
    public static string DescriptionAttributeMapControl_Height { get; }
    public static string DescriptionAttributeMapControl_ImageMapEnabled { get; }
    public static string DescriptionAttributeMapControl_ImageType { get; }
    public static string DescriptionAttributeMapControl_ImageUrl { get; }
    public static string DescriptionAttributeMapControl_MapAreas { get; }
    public static string DescriptionAttributeMapControl_RenderingImageUrl { get; }
    public static string DescriptionAttributeMapControl_RenderType { get; }
    public static string DescriptionAttributeMapControl_TagAttributes { get; }
    public static string DescriptionAttributeMapControl_ViewStateContent { get; }
    public static string DescriptionAttributeMapControl_Width { get; }
    public static string DescriptionAttributeMapImage_Href { get; }
    public static string DescriptionAttributeMapImage_MapAreaAttributes { get; }
    public static string DescriptionAttributeMapLabel_Href { get; }
    public static string DescriptionAttributeMapLabel_MapAreaAttributes { get; }
    public static string DescriptionAttributePanel_Href { get; }
    public static string DescriptionAttributePanel_MapAreaAttributes { get; }
    public static string DescriptionAttributePath_Href { get; }
    public static string DescriptionAttributePath_MapAreaAttributes { get; }
    public static string DescriptionAttributeShape_Href { get; }
    public static string DescriptionAttributeShape_MapAreaAttributes { get; }
    public static string DescriptionAttributeSymbol_Href { get; }
    public static string DescriptionAttributeSymbol_MapAreaAttributes { get; }
    public static string CategoryAttribute_Appearance { get; }
    public static string CategoryAttribute_Background { get; }
    public static string CategoryAttribute_Behavior { get; }
    public static string CategoryAttribute_CellColumns { get; }
    public static string CategoryAttribute_Colors { get; }
    public static string CategoryAttribute_Widths { get; }
    public static string CategoryAttribute_Coordinates { get; }
    public static string CategoryAttribute_CustomColors { get; }
    public static string CategoryAttribute_CustomWidths { get; }
    public static string CategoryAttribute_Data { get; }
    public static string CategoryAttribute_GeneralVisibility { get; }
    public static string CategoryAttribute_Groups { get; }
    public static string CategoryAttribute_GroupFields { get; }
    public static string CategoryAttribute_Header { get; }
    public static string CategoryAttribute_Image { get; }
    public static string CategoryAttribute_ImageResources { get; }
    public static string CategoryAttribute_Interactivity { get; }
    public static string CategoryAttribute_Interval { get; }
    public static string CategoryAttribute_LabelsAndTickMarks { get; }
    public static string CategoryAttribute_LabelVisibility { get; }
    public static string CategoryAttribute_Legend { get; }
    public static string CategoryAttribute_Layers { get; }
    public static string CategoryAttribute_Layout { get; }
    public static string CategoryAttribute_MapContent { get; }
    public static string CategoryAttribute_Marker { get; }
    public static string CategoryAttribute_Misc { get; }
    public static string CategoryAttribute_MouseAndKeyboard { get; }
    public static string CategoryAttribute_Panels { get; }
    public static string CategoryAttribute_ParallelsAndMeridians { get; }
    public static string CategoryAttribute_Paths { get; }
    public static string CategoryAttribute_PathFields { get; }
    public static string CategoryAttribute_Position { get; }
    public static string CategoryAttribute_Shapes { get; }
    public static string CategoryAttribute_ShapeFields { get; }
    public static string CategoryAttribute_Size { get; }
    public static string CategoryAttribute_Symbols { get; }
    public static string CategoryAttribute_SymbolFields { get; }
    public static string CategoryAttribute_SymbolText { get; }
    public static string CategoryAttribute_Title { get; }
    public static string CategoryAttribute_TypeSpecific { get; }
    public static string CategoryAttribute_Values { get; }
    public static string CategoryAttribute_View { get; }
    public static string CategoryAttribute_Zooming { get; }
    public static string CategoryAttribute_VirtualEarth { get; }
    public static string CategoryAttribute_MapArea { get; }
    public static string CategoryAttribute_MapControl { get; }
    public static string CategoryAttribute_Shape { get; }
    public static string CategoryAttribute_ViewState { get; }
    public static string LabelFormatPrecisionMsg { get; }
    public static string LabelFormatPrecisionMsgCaption { get; }
    public static string DownloadingTile { get; }
    public static string ProvideBingMapsAppID { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_AccessibilityNavigationPanelName();
    public static string get_AccessibilityZoomPanelName();
    public static string get_AccessibilityColorSwatchPanelName();
    public static string get_AccessibilityColorSwatchTitleName();
    public static string get_AccessibilityDistanceScalePanelName();
    public static string get_AccessibilityParallelsName();
    public static string get_AccessibilityMeridiansName();
    public static string get_AccessibilityViewportName();
    public static string get_AccessibilityMapControlNameRS();
    public static string get_AccessibilityColorSwatchPanelNameRS();
    public static string get_AccessibilityColorSwatchTitleNameRS();
    public static string get_AccessibilityDistanceScalePanelNameRS();
    public static string get_bad_data_src();
    public static string get_bad_data_src_fields();
    public static string get_bad_layer_name();
    public static string get_circular_reference();
    public static string get_databind_state_error();
    public static string get_decimals_digits_error();
    public static string get_decimals_negative();
    public static string get_designer_find();
    public static string get_digits_decimals_error();
    public static string get_digits_negative();
    public static string get_duplicate_name_failed();
    public static string get_duration_negative();
    public static string get_gdi_noninitialized();
    public static string get_generate_name_failed();
    public static string get_interval_negative();
    public static string get_interval_offset_negative();
    public static string get_invalid_indexer();
    public static string get_invalid_marker_type();
    public static string get_invalid_button_type();
    public static string get_invalid_placement_type();
    public static string get_margin_error();
    public static string get_max_min_error();
    public static string get_min_log_error();
    public static string get_min_max_error();
    public static string get_no_destination_type();
    public static string get_period_negative();
    public static string get_symbol_databinding_not_enough_params();
    public static string get_symboldatabind_bad_loc_arg();
    public static string get_ticknumber_out_of_range();
    public static string get_wrong_padding_format();
    public static string get_UnsupportedDbfDeleted();
    public static string get_UnsupportedDbfEncryption();
    public static string get_UnsupportedDbfField();
    public static string get_UnsupportedDbfFieldLength();
    public static string get_UnsupportedDbfFormat();
    public static string get_UnsupportedDbfHeader();
    public static string get_UnsupportedDbfLongRecords();
    public static string get_UnsupportedDbfNumberOfFields0();
    public static string get_UnsupportedDbfNumberOfFileds128();
    public static string get_UnsupportedDbfNumberOfRecords();
    public static string get_UnsupportedDbfRecordFlag();
    public static string get_UnsupportedDbfTransactions();
    public static string get_EmptyFile();
    public static string get_FileToLarge();
    public static string get_UnableToAllocateMemoryForSqlBinary();
    public static string get_UnableToReadWholeFileToSqlBinary();
    public static string get_Map_BackgroundNotAvailable();
    public static string get_ExceptionXamlInvalidCanvasSize();
    public static string get_ExceptionInvalidIndexerArgument();
    public static string get_ExceptionCannotRenameField();
    public static string get_ExceptionIndexOutOfRange();
    public static string get_ExceptionCannotContainSpaces();
    public static string get_ExceptionBorderWidthMustBeGreaterThanZero();
    public static string get_ExceptionPathWidthMustBeGreaterThanZero();
    public static string get_ExceptionMarkerBorderMustBeGreaterThanZero();
    public static string get_ExceptionMaximumLegendAutoSize();
    public static string get_ExceptionIntervalGraterThanZero();
    public static string get_ExceptionValueCannotBeLessThanOne();
    public static string get_ExceptionPropertyValueCannotbeLessThanOne();
    public static string get_ExceptionAutoFitMinFontSizeMinValue();
    public static string get_ExceptionLegendTableColumnSpacingTooSmall();
    public static string get_ExceptionTextThresholdValueTooSmall();
    public static string get_ExceptionCollorCannotBeTransparent();
    public static string get_ExceptionTopMarginCannotBeNegative();
    public static string get_ExceptionBottomMarginCannotBeNegative();
    public static string get_ExceptionLeftMarginCannotBeNegative();
    public static string get_ExceptionRightMarginCannotBeNegative();
    public static string get_ExceptionValueCannotBeNegative();
    public static string get_ExceptionArrayOfPointsCannotBeNull();
    public static string get_ExceptionArrayOfPointsMustContainOnePoint();
    public static string get_DescriptionAttributeAutoSizePanel_AutoSize();
    public static string get_DescriptionAttributeAutoSizePanel_MaxAutoSize();
    public static string get_DescriptionAttributeColorSwatchPanel_Colors();
    public static string get_DescriptionAttributeColorSwatchPanel_Font();
    public static string get_DescriptionAttributeColorSwatchPanel_LabelAlignment();
    public static string get_DescriptionAttributeColorSwatchPanel_LabelColor();
    public static string get_DescriptionAttributeColorSwatchPanel_LabelInterval();
    public static string get_DescriptionAttributeColorSwatchPanel_LabelType();
    public static string get_DescriptionAttributeColorSwatchPanel_NoDataText();
    public static string get_DescriptionAttributeColorSwatchPanel_NumericLabelFormat();
    public static string get_DescriptionAttributeColorSwatchPanel_OutlineColor();
    public static string get_DescriptionAttributeColorSwatchPanel_RangeGapColor();
    public static string get_DescriptionAttributeColorSwatchPanel_ShowEndLabels();
    public static string get_DescriptionAttributeColorSwatchPanel_TickMarkLength();
    public static string get_DescriptionAttributeColorSwatchPanel_Title();
    public static string get_DescriptionAttributeColorSwatchPanel_TitleAlignment();
    public static string get_DescriptionAttributeColorSwatchPanel_TitleColor();
    public static string get_DescriptionAttributeColorSwatchPanel_TitleFont();
    public static string get_DescriptionAttributeCustomColor_BorderColor();
    public static string get_DescriptionAttributeCustomColor_Color();
    public static string get_DescriptionAttributeCustomColor_FromValue();
    public static string get_DescriptionAttributeCustomColor_GradientType();
    public static string get_DescriptionAttributeCustomColor_HatchStyle();
    public static string get_DescriptionAttributeCustomColor_LegendText();
    public static string get_DescriptionAttributeCustomColor_SecondaryColor();
    public static string get_DescriptionAttributeCustomColor_Text();
    public static string get_DescriptionAttributeCustomColor_ToolTip();
    public static string get_DescriptionAttributeCustomColor_ToValue();
    public static string get_DescriptionAttributeCustomTickMark_BorderColor();
    public static string get_DescriptionAttributeCustomTickMark_BorderWidth();
    public static string get_DescriptionAttributeCustomTickMark_DistanceFromScale();
    public static string get_DescriptionAttributeCustomTickMark_EnableGradient();
    public static string get_DescriptionAttributeCustomTickMark_FillColor();
    public static string get_DescriptionAttributeCustomTickMark_GradientDensity();
    public static string get_DescriptionAttributeCustomTickMark_Image();
    public static string get_DescriptionAttributeCustomTickMark_ImageTransColor();
    public static string get_DescriptionAttributeCustomTickMark_Length();
    public static string get_DescriptionAttributeCustomTickMark_Placement();
    public static string get_DescriptionAttributeCustomTickMark_Shape();
    public static string get_DescriptionAttributeCustomTickMark_Visible();
    public static string get_DescriptionAttributeCustomTickMark_Width();
    public static string get_DescriptionAttributeCustomWidth_Width();
    public static string get_DescriptionAttributeCustomWidth_FromValue();
    public static string get_DescriptionAttributeCustomWidth_LegendText();
    public static string get_DescriptionAttributeCustomWidth_Text();
    public static string get_DescriptionAttributeCustomWidth_ToolTip();
    public static string get_DescriptionAttributeCustomWidth_ToValue();
    public static string get_DescriptionAttributeDataBindingRuleBase_DataMember();
    public static string get_DescriptionAttributeDistanceScalePanel_Font();
    public static string get_DescriptionAttributeDistanceScalePanel_LabelColor();
    public static string get_DescriptionAttributeDistanceScalePanel_ScaleBorderColor();
    public static string get_DescriptionAttributeDistanceScalePanel_ScaleForeColor();
    public static string get_DescriptionAttributeDockablePanel_Dock();
    public static string get_DescriptionAttributeDockablePanel_DockAlignment();
    public static string get_DescriptionAttributeDockablePanel_DockedInsideViewport();
    public static string get_DescriptionAttributeField_Name();
    public static string get_DescriptionAttributeField_Type();
    public static string get_DescriptionAttributeField_UniqueIdentifier();
    public static string get_DescriptionAttributeFrame_BackColor();
    public static string get_DescriptionAttributeFrame_BackGradientType();
    public static string get_DescriptionAttributeFrame_BackHatchStyle();
    public static string get_DescriptionAttributeFrame_BackImage();
    public static string get_DescriptionAttributeFrame_BackImageAlign();
    public static string get_DescriptionAttributeFrame_BackImageMode();
    public static string get_DescriptionAttributeFrame_BackImageTranspColor();
    public static string get_DescriptionAttributeFrame_BackSecondaryColor();
    public static string get_DescriptionAttributeFrame_BorderColor();
    public static string get_DescriptionAttributeFrame_BorderStyle();
    public static string get_DescriptionAttributeFrame_BorderWidth();
    public static string get_DescriptionAttributeFrame_FrameStyle();
    public static string get_DescriptionAttributeFrame_PageColor();
    public static string get_DescriptionAttributeGridAttributes_Font();
    public static string get_DescriptionAttributeGridAttributes_Interval();
    public static string get_DescriptionAttributeGridAttributes_LabelColor();
    public static string get_DescriptionAttributeGridAttributes_LabelFormatString();
    public static string get_DescriptionAttributeGridAttributes_LabelPosition();
    public static string get_DescriptionAttributeGridAttributes_LineColor();
    public static string get_DescriptionAttributeGridAttributes_LineStyle();
    public static string get_DescriptionAttributeGridAttributes_LineWidth();
    public static string get_DescriptionAttributeGridAttributes_ShowLabels();
    public static string get_DescriptionAttributeGridAttributes_Visible();
    public static string get_DescriptionAttributeGroup_BorderColor();
    public static string get_DescriptionAttributeGroup_BorderStyle();
    public static string get_DescriptionAttributeGroup_BorderWidth();
    public static string get_DescriptionAttributeGroup_Category();
    public static string get_DescriptionAttributeGroup_CentralPoint();
    public static string get_DescriptionAttributeGroup_CentralPointOffset();
    public static string get_DescriptionAttributeGroup_Color();
    public static string get_DescriptionAttributeGroup_Font();
    public static string get_DescriptionAttributeGroup_GradientType();
    public static string get_DescriptionAttributeGroup_HatchStyle();
    public static string get_DescriptionAttributeGroup_Layer();
    public static string get_DescriptionAttributeGroup_Name();
    public static string get_DescriptionAttributeGroup_Offset();
    public static string get_DescriptionAttributeGroup_SecondaryColor();
    public static string get_DescriptionAttributeGroup_Selected();
    public static string get_DescriptionAttributeGroup_ShadowOffset();
    public static string get_DescriptionAttributeGroup_Text();
    public static string get_DescriptionAttributeGroup_TextAlignment();
    public static string get_DescriptionAttributeGroup_TextColor();
    public static string get_DescriptionAttributeGroup_TextShadowOffset();
    public static string get_DescriptionAttributeGroup_ToolTip();
    public static string get_DescriptionAttributeGroup_Visible();
    public static string get_DescriptionAttributeGroupDataBindingRule_BindingField();
    public static string get_DescriptionAttributeGroupRule_BorderColor();
    public static string get_DescriptionAttributeGroupRule_Category();
    public static string get_DescriptionAttributeGroupRule_ColorCount();
    public static string get_DescriptionAttributeGroupRule_ColoringMode();
    public static string get_DescriptionAttributeGroupRule_ColorPalette();
    public static string get_DescriptionAttributeGroupRule_CustomColors();
    public static string get_DescriptionAttributeGroupRule_DataGrouping();
    public static string get_DescriptionAttributeGroupRule_FromColor();
    public static string get_DescriptionAttributeGroupRule_FromValue();
    public static string get_DescriptionAttributeGroupRule_GradientType();
    public static string get_DescriptionAttributeGroupRule_GroupField();
    public static string get_DescriptionAttributeGroupRule_HatchStyle();
    public static string get_DescriptionAttributeGroupRule_LegendText();
    public static string get_DescriptionAttributeGroupRule_MiddleColor();
    public static string get_DescriptionAttributeGroupRule_Name();
    public static string get_DescriptionAttributeGroupRule_SecondaryColor();
    public static string get_DescriptionAttributeGroupRule_ShowInColorSwatch();
    public static string get_DescriptionAttributeGroupRule_ShowInLegend();
    public static string get_DescriptionAttributeGroupRule_Text();
    public static string get_DescriptionAttributeGroupRule_ToColor();
    public static string get_DescriptionAttributeGroupRule_ToolTip();
    public static string get_DescriptionAttributeGroupRule_ToValue();
    public static string get_DescriptionAttributeGroupRule_UseCustomColors();
    public static string get_DescriptionAttributeImageOrigin_NotSet();
    public static string get_DescriptionAttributeImageOrigin_X();
    public static string get_DescriptionAttributeImageOrigin_Y();
    public static string get_DescriptionAttributeLayer_LabelVisibleFromZoom();
    public static string get_DescriptionAttributeLayer_TileSystem();
    public static string get_DescriptionAttributeLayer_UseSecureConnectionForTiles();
    public static string get_DescriptionAttributeLayer_Transparency();
    public static string get_DescriptionAttributeLayer_Visibility();
    public static string get_DescriptionAttributeLayer_VisibleFromZoom();
    public static string get_DescriptionAttributeLayer_VisibleToZoom();
    public static string get_DescriptionAttributeLegend_AutoFitMinFontSize();
    public static string get_DescriptionAttributeLegend_AutoFitText();
    public static string get_DescriptionAttributeLegend_CellColumns();
    public static string get_DescriptionAttributeLegend_EquallySpacedItems();
    public static string get_DescriptionAttributeLegend_Font();
    public static string get_DescriptionAttributeLegend_HeaderSeparator();
    public static string get_DescriptionAttributeLegend_HeaderSeparatorColor();
    public static string get_DescriptionAttributeLegend_InterlacedRows();
    public static string get_DescriptionAttributeLegend_InterlacedRowsColor();
    public static string get_DescriptionAttributeLegend_ItemColumnSeparator();
    public static string get_DescriptionAttributeLegend_ItemColumnSeparatorColor();
    public static string get_DescriptionAttributeLegend_ItemColumnSpacing();
    public static string get_DescriptionAttributeLegend_Items();
    public static string get_DescriptionAttributeLegend_LegendStyle();
    public static string get_DescriptionAttributeLegend_Name();
    public static string get_DescriptionAttributeLegend_TableStyle();
    public static string get_DescriptionAttributeLegend_TextColor();
    public static string get_DescriptionAttributeLegend_TextWrapThreshold();
    public static string get_DescriptionAttributeLegend_Title();
    public static string get_DescriptionAttributeLegend_TitleAlignment();
    public static string get_DescriptionAttributeLegend_TitleBackColor();
    public static string get_DescriptionAttributeLegend_TitleColor();
    public static string get_DescriptionAttributeLegend_TitleFont();
    public static string get_DescriptionAttributeLegend_TitleSeparator();
    public static string get_DescriptionAttributeLegend_TitleSeparatorColor();
    public static string get_DescriptionAttributeLegendCell_Alignment();
    public static string get_DescriptionAttributeLegendCell_BackColor();
    public static string get_DescriptionAttributeLegendCell_CellSpan();
    public static string get_DescriptionAttributeLegendCell_CellType();
    public static string get_DescriptionAttributeLegendCell_Font();
    public static string get_DescriptionAttributeLegendCell_Image();
    public static string get_DescriptionAttributeLegendCell_ImageSize();
    public static string get_DescriptionAttributeLegendCell_ImageTranspColor();
    public static string get_DescriptionAttributeLegendCell_Margins();
    public static string get_DescriptionAttributeLegendCell_Name();
    public static string get_DescriptionAttributeLegendCell_SymbolSize();
    public static string get_DescriptionAttributeLegendCell_Text();
    public static string get_DescriptionAttributeLegendCell_TextColor();
    public static string get_DescriptionAttributeLegendCell_ToolTip();
    public static string get_DescriptionAttributeLegendCellCollection_Item();
    public static string get_DescriptionAttributeLegendCellColumn_HeaderBackColor();
    public static string get_DescriptionAttributeLegendCellColumn_HeaderColor();
    public static string get_DescriptionAttributeLegendCellColumn_HeaderFont();
    public static string get_DescriptionAttributeLegendCellColumn_HeaderText();
    public static string get_DescriptionAttributeLegendCellColumn_HeaderTextAlignment();
    public static string get_DescriptionAttributeLegendCellColumn_MaximumWidth();
    public static string get_DescriptionAttributeLegendCellColumn_MinimumWidth();
    public static string get_DescriptionAttributeLegendCellColumn_Name();
    public static string get_DescriptionAttributeLegendCellColumn_ToolTip();
    public static string get_DescriptionAttributeLegendCellColumnCollection_Item();
    public static string get_DescriptionAttributeLegendItem_AutomaticallyAdded();
    public static string get_DescriptionAttributeLegendItem_BorderColor();
    public static string get_DescriptionAttributeLegendItem_BorderStyle();
    public static string get_DescriptionAttributeLegendItem_BorderWidth();
    public static string get_DescriptionAttributeLegendItem_PathWidth();
    public static string get_DescriptionAttributeLegendItem_PathLineStyle();
    public static string get_DescriptionAttributeLegendItem_Cells();
    public static string get_DescriptionAttributeLegendItem_Color();
    public static string get_DescriptionAttributeLegendItem_GradientType();
    public static string get_DescriptionAttributeLegendItem_HatchStyle();
    public static string get_DescriptionAttributeLegendItem_Image();
    public static string get_DescriptionAttributeLegendItem_ImageAlign();
    public static string get_DescriptionAttributeLegendItem_ImageTranspColor();
    public static string get_DescriptionAttributeLegendItem_ImageWrapMode();
    public static string get_DescriptionAttributeLegendItem_ItemStyle();
    public static string get_DescriptionAttributeLegendItem_MarkerBorderColor();
    public static string get_DescriptionAttributeLegendItem_MarkerBorderStyle();
    public static string get_DescriptionAttributeLegendItem_MarkerBorderWidth();
    public static string get_DescriptionAttributeLegendItem_MarkerColor();
    public static string get_DescriptionAttributeLegendItem_MarkerGradientType();
    public static string get_DescriptionAttributeLegendItem_MarkerHatchStyle();
    public static string get_DescriptionAttributeLegendItem_MarkerHeight();
    public static string get_DescriptionAttributeLegendItem_MarkerImage();
    public static string get_DescriptionAttributeLegendItem_MarkerImageTranspColor();
    public static string get_DescriptionAttributeLegendItem_MarkerSecondaryColor();
    public static string get_DescriptionAttributeLegendItem_MarkerStyle();
    public static string get_DescriptionAttributeLegendItem_MarkerWidth();
    public static string get_DescriptionAttributeLegendItem_Name();
    public static string get_DescriptionAttributeLegendItem_SecondaryColor();
    public static string get_DescriptionAttributeLegendItem_Separator();
    public static string get_DescriptionAttributeLegendItem_SeparatorColor();
    public static string get_DescriptionAttributeLegendItem_ShadowColor();
    public static string get_DescriptionAttributeLegendItem_ShadowOffset();
    public static string get_DescriptionAttributeLegendItem_Text();
    public static string get_DescriptionAttributeLegendItem_ToolTip();
    public static string get_DescriptionAttributeLegendItem_Visible();
    public static string get_DescriptionAttributeLinearLabelStyle_DistanceFromScale();
    public static string get_DescriptionAttributeLinearLabelStyle_Font();
    public static string get_DescriptionAttributeLinearLabelStyle_FontAngle();
    public static string get_DescriptionAttributeLinearLabelStyle_FontUnit();
    public static string get_DescriptionAttributeLinearLabelStyle_FormatString();
    public static string get_DescriptionAttributeLinearLabelStyle_Interval();
    public static string get_DescriptionAttributeLinearLabelStyle_IntervalOffset();
    public static string get_DescriptionAttributeLinearLabelStyle_Placement();
    public static string get_DescriptionAttributeLinearLabelStyle_ShowEndLabels();
    public static string get_DescriptionAttributeLinearLabelStyle_TextColor();
    public static string get_DescriptionAttributeLinearLabelStyle_Visible();
    public static string get_DescriptionAttributeLinearMajorTickMark_Length();
    public static string get_DescriptionAttributeLinearMajorTickMark_Shape();
    public static string get_DescriptionAttributeLinearMajorTickMark_Width();
    public static string get_DescriptionAttributeLinearMinorTickMark_Length();
    public static string get_DescriptionAttributeLinearMinorTickMark_Shape();
    public static string get_DescriptionAttributeLinearMinorTickMark_Width();
    public static string get_DescriptionAttributeLinearPinLabel_DistanceFromScale();
    public static string get_DescriptionAttributeLinearPinLabel_Font();
    public static string get_DescriptionAttributeLinearPinLabel_FontAngle();
    public static string get_DescriptionAttributeLinearPinLabel_FontUnit();
    public static string get_DescriptionAttributeLinearPinLabel_Placement();
    public static string get_DescriptionAttributeLinearPinLabel_Text();
    public static string get_DescriptionAttributeLinearPinLabel_TextColor();
    public static string get_DescriptionAttributeLinearPointer_BorderColor();
    public static string get_DescriptionAttributeLinearPointer_BorderStyle();
    public static string get_DescriptionAttributeLinearPointer_BorderWidth();
    public static string get_DescriptionAttributeLinearPointer_Cursor();
    public static string get_DescriptionAttributeLinearPointer_DistanceFromScale();
    public static string get_DescriptionAttributeLinearPointer_FillColor();
    public static string get_DescriptionAttributeLinearPointer_FillGradientType();
    public static string get_DescriptionAttributeLinearPointer_FillHatchStyle();
    public static string get_DescriptionAttributeLinearPointer_FillSecondaryColor();
    public static string get_DescriptionAttributeLinearPointer_Image();
    public static string get_DescriptionAttributeLinearPointer_ImageOrigin();
    public static string get_DescriptionAttributeLinearPointer_ImageTransColor();
    public static string get_DescriptionAttributeLinearPointer_Interactive();
    public static string get_DescriptionAttributeLinearPointer_MarkerLength();
    public static string get_DescriptionAttributeLinearPointer_MarkerStyle();
    public static string get_DescriptionAttributeLinearPointer_Placement();
    public static string get_DescriptionAttributeLinearPointer_ShadowOffset();
    public static string get_DescriptionAttributeLinearPointer_SnappingEnabled();
    public static string get_DescriptionAttributeLinearPointer_SnappingInterval();
    public static string get_DescriptionAttributeLinearPointer_ToolTip();
    public static string get_DescriptionAttributeLinearPointer_Type();
    public static string get_DescriptionAttributeLinearPointer_Value();
    public static string get_DescriptionAttributeLinearPointer_Visible();
    public static string get_DescriptionAttributeLinearPointer_Width();
    public static string get_DescriptionAttributeLinearScale_BorderColor();
    public static string get_DescriptionAttributeLinearScale_BorderStyle();
    public static string get_DescriptionAttributeLinearScale_BorderWidth();
    public static string get_DescriptionAttributeLinearScale_EndMargin();
    public static string get_DescriptionAttributeLinearScale_FillColor();
    public static string get_DescriptionAttributeLinearScale_FillGradientType();
    public static string get_DescriptionAttributeLinearScale_FillHatchStyle();
    public static string get_DescriptionAttributeLinearScale_FillSecondaryColor();
    public static string get_DescriptionAttributeLinearScale_Interval();
    public static string get_DescriptionAttributeLinearScale_IntervalOffset();
    public static string get_DescriptionAttributeLinearScale_Logarithmic();
    public static string get_DescriptionAttributeLinearScale_LogarithmicBase();
    public static string get_DescriptionAttributeLinearScale_MajorTickMark();
    public static string get_DescriptionAttributeLinearScale_Maximum();
    public static string get_DescriptionAttributeLinearScale_MaximumPin();
    public static string get_DescriptionAttributeLinearScale_Minimum();
    public static string get_DescriptionAttributeLinearScale_MinimumPin();
    public static string get_DescriptionAttributeLinearScale_MinorTickMark();
    public static string get_DescriptionAttributeLinearScale_Multiplier();
    public static string get_DescriptionAttributeLinearScale_Position();
    public static string get_DescriptionAttributeLinearScale_Reversed();
    public static string get_DescriptionAttributeLinearScale_ShadowOffset();
    public static string get_DescriptionAttributeLinearScale_StartMargin();
    public static string get_DescriptionAttributeLinearScale_TickMarksOnTop();
    public static string get_DescriptionAttributeLinearScale_ToolTip();
    public static string get_DescriptionAttributeLinearScale_Visible();
    public static string get_DescriptionAttributeLinearScale_Width();
    public static string get_DescriptionAttributeLinearSpecialPosition_LabelStyle();
    public static string get_DescriptionAttributeMapControl_AntiAliasing();
    public static string get_DescriptionAttributeMapControl_BackGradientType();
    public static string get_DescriptionAttributeMapControl_BackHatchStyle();
    public static string get_DescriptionAttributeMapControl_BackSecondaryColor();
    public static string get_DescriptionAttributeMapControl_BorderLineColor();
    public static string get_DescriptionAttributeMapControl_BorderLineStyle();
    public static string get_DescriptionAttributeMapControl_BorderLineWidth();
    public static string get_DescriptionAttributeMapControl_ColorSwatchPanel();
    public static string get_DescriptionAttributeMapControl_DataBindingRules();
    public static string get_DescriptionAttributeMapControl_DataSource();
    public static string get_DescriptionAttributeMapControl_DimIntensity();
    public static string get_DescriptionAttributeMapControl_DimWhenNotFocused();
    public static string get_DescriptionAttributeMapControl_DistanceScalePanel();
    public static string get_DescriptionAttributeMapControl_Frame();
    public static string get_DescriptionAttributeMapControl_GeographyMode();
    public static string get_DescriptionAttributeMapControl_GridUnderContent();
    public static string get_DescriptionAttributeMapControl_GroupFields();
    public static string get_DescriptionAttributeMapControl_GroupRules();
    public static string get_DescriptionAttributeMapControl_Groups();
    public static string get_DescriptionAttributeMapControl_Images();
    public static string get_DescriptionAttributeMapControl_KeyboardNavigation();
    public static string get_DescriptionAttributeMapControl_Labels();
    public static string get_DescriptionAttributeMapControl_Layers();
    public static string get_DescriptionAttributeMapControl_Legends();
    public static string get_DescriptionAttributeMapControl_MapLimits();
    public static string get_DescriptionAttributeMapControl_AutoLimitsIgnoreSymbols();
    public static string get_DescriptionAttributeMapControl_Meridians();
    public static string get_DescriptionAttributeMapControl_MouseWheelZooming();
    public static string get_DescriptionAttributeMapControl_NamedImages();
    public static string get_DescriptionAttributeMapControl_NavigationPanel();
    public static string get_DescriptionAttributeMapControl_Parallels();
    public static string get_DescriptionAttributeMapControl_PathFields();
    public static string get_DescriptionAttributeMapControl_PathRules();
    public static string get_DescriptionAttributeMapControl_Paths();
    public static string get_DescriptionAttributeMapControl_Printing();
    public static string get_DescriptionAttributeMapControl_Projection();
    public static string get_DescriptionAttributeMapControl_ProjectionCenter();
    public static string get_DescriptionAttributeMapControl_SelectionBorderColor();
    public static string get_DescriptionAttributeMapControl_SelectionMarkerColor();
    public static string get_DescriptionAttributeMapControl_ShadowIntensity();
    public static string get_DescriptionAttributeMapControl_ShapeFields();
    public static string get_DescriptionAttributeMapControl_ShapeRules();
    public static string get_DescriptionAttributeMapControl_Shapes();
    public static string get_DescriptionAttributeMapControl_SymbolFields();
    public static string get_DescriptionAttributeMapControl_SymbolRules();
    public static string get_DescriptionAttributeMapControl_Symbols();
    public static string get_DescriptionAttributeMapControl_TextAntiAliasingQuality();
    public static string get_DescriptionAttributeMapControl_TileServerMaxConnections();
    public static string get_DescriptionAttributeMapControl_TileServerTimeout();
    public static string get_DescriptionAttributeMapControl_TileCulture();
    public static string get_DescriptionAttributeMapControl_TileCacheLevel();
    public static string get_DescriptionAttributeMapControl_TileServerAppId();
    public static string get_DescriptionAttributeMapControl_Viewport();
    public static string get_DescriptionAttributeMapControl_ZoomPanel();
    public static string get_DescriptionAttributeMapCore_BorderLineColor();
    public static string get_DescriptionAttributeMapCore_BorderLineStyle();
    public static string get_DescriptionAttributeMapCore_BorderLineWidth();
    public static string get_DescriptionAttributeMapCore_BuildNumber();
    public static string get_DescriptionAttributeMapCore_ControlType();
    public static string get_DescriptionAttributeMapCore_DimIntensity();
    public static string get_DescriptionAttributeMapCore_DimWhenNotFocused();
    public static string get_DescriptionAttributeMapImage_Angle();
    public static string get_DescriptionAttributeMapImage_BorderStyle();
    public static string get_DescriptionAttributeMapImage_Image();
    public static string get_DescriptionAttributeMapImage_ImageTransColor();
    public static string get_DescriptionAttributeMapImage_Name();
    public static string get_DescriptionAttributeMapImage_ResizeMode();
    public static string get_DescriptionAttributeMapImage_ShadowOffset();
    public static string get_DescriptionAttributeMapImage_ToolTip();
    public static string get_DescriptionAttributeMapImage_Transparency();
    public static string get_DescriptionAttributeMapImage_Visible();
    public static string get_DescriptionAttributeMapLabel_Angle();
    public static string get_DescriptionAttributeMapLabel_BackColor();
    public static string get_DescriptionAttributeMapLabel_BackGradientType();
    public static string get_DescriptionAttributeMapLabel_BackHatchStyle();
    public static string get_DescriptionAttributeMapLabel_BackSecondaryColor();
    public static string get_DescriptionAttributeMapLabel_BackShadowOffset();
    public static string get_DescriptionAttributeMapLabel_BorderStyle();
    public static string get_DescriptionAttributeMapLabel_Font();
    public static string get_DescriptionAttributeMapLabel_Name();
    public static string get_DescriptionAttributeMapLabel_Text();
    public static string get_DescriptionAttributeMapLabel_TextAlignment();
    public static string get_DescriptionAttributeMapLabel_TextColor();
    public static string get_DescriptionAttributeMapLabel_TextShadowOffset();
    public static string get_DescriptionAttributeMapLabel_ToolTip();
    public static string get_DescriptionAttributeMapLabel_Visible();
    public static string get_DescriptionAttributeMapLimits_MaximumX();
    public static string get_DescriptionAttributeMapLimits_MaximumY();
    public static string get_DescriptionAttributeMapLimits_MinimumX();
    public static string get_DescriptionAttributeMapLimits_MinimumY();
    public static string get_DescriptionAttributeMapLocation_X();
    public static string get_DescriptionAttributeMapLocation_Y();
    public static string get_DescriptionAttributeMapPoint_X();
    public static string get_DescriptionAttributeMapPoint_Y();
    public static string get_DescriptionAttributeMapSerializer_Content();
    public static string get_DescriptionAttributeMapSerializer_Format();
    public static string get_DescriptionAttributeMapSerializer_IgnoreUnknownXmlAttributes();
    public static string get_DescriptionAttributeMapSerializer_NonSerializableContent();
    public static string get_DescriptionAttributeMapSerializer_ResetWhenLoading();
    public static string get_DescriptionAttributeMapSerializer_SerializableContent();
    public static string get_DescriptionAttributeMapSerializer_TemplateMode();
    public static string get_DescriptionAttributeMapSize_Height();
    public static string get_DescriptionAttributeMapSize_Width();
    public static string get_DescriptionAttributeMargins_Bottom();
    public static string get_DescriptionAttributeMargins_Left();
    public static string get_DescriptionAttributeMargins_Right();
    public static string get_DescriptionAttributeMargins_Top();
    public static string get_DescriptionAttributeNamedElement_Collection();
    public static string get_DescriptionAttributeNamedElement_Name();
    public static string get_DescriptionAttributeNamedElement_ParentElement();
    public static string get_DescriptionAttributeNamedElement_Tag();
    public static string get_DescriptionAttributeNamedImage_Image();
    public static string get_DescriptionAttributeNavigationPanel_ButtonBorderColor();
    public static string get_DescriptionAttributeNavigationPanel_ButtonColor();
    public static string get_DescriptionAttributeNavigationPanel_PanelStyle();
    public static string get_DescriptionAttributeNavigationPanel_ScrollStep();
    public static string get_DescriptionAttributeNavigationPanel_SymbolBorderColor();
    public static string get_DescriptionAttributeNavigationPanel_SymbolColor();
    public static string get_DescriptionAttributeOffset_X();
    public static string get_DescriptionAttributeOffset_Y();
    public static string get_DescriptionAttributePanel_BackColor();
    public static string get_DescriptionAttributePanel_BackGradientType();
    public static string get_DescriptionAttributePanel_BackHatchStyle();
    public static string get_DescriptionAttributePanel_BackSecondaryColor();
    public static string get_DescriptionAttributePanel_BackShadowOffset();
    public static string get_DescriptionAttributePanel_BorderColor();
    public static string get_DescriptionAttributePanel_BorderStyle();
    public static string get_DescriptionAttributePanel_BorderWidth();
    public static string get_DescriptionAttributePanel_Location();
    public static string get_DescriptionAttributePanel_LocationUnit();
    public static string get_DescriptionAttributePanel_Margins();
    public static string get_DescriptionAttributePanel_Selected();
    public static string get_DescriptionAttributePanel_Size();
    public static string get_DescriptionAttributePanel_SizeUnit();
    public static string get_DescriptionAttributePanel_ToolTip();
    public static string get_DescriptionAttributePanel_Visible();
    public static string get_DescriptionAttributePanel_ZOrder();
    public static string get_DescriptionAttributePanelMargins_All();
    public static string get_DescriptionAttributePanelMargins_Bottom();
    public static string get_DescriptionAttributePanelMargins_Left();
    public static string get_DescriptionAttributePanelMargins_Right();
    public static string get_DescriptionAttributePanelMargins_Top();
    public static string get_DescriptionAttributePath_BorderColor();
    public static string get_DescriptionAttributePath_BorderWidth();
    public static string get_DescriptionAttributePath_Category();
    public static string get_DescriptionAttributePath_Color();
    public static string get_DescriptionAttributePath_Font();
    public static string get_DescriptionAttributePath_GradientType();
    public static string get_DescriptionAttributePath_HatchStyle();
    public static string get_DescriptionAttributePath_LabelPosition();
    public static string get_DescriptionAttributePath_Layer();
    public static string get_DescriptionAttributePath_LineStyle();
    public static string get_DescriptionAttributePath_Name();
    public static string get_DescriptionAttributePath_Offset();
    public static string get_DescriptionAttributePath_ParentGroup();
    public static string get_DescriptionAttributePath_PathData();
    public static string get_DescriptionAttributePath_SecondaryColor();
    public static string get_DescriptionAttributePath_Selected();
    public static string get_DescriptionAttributePath_ShadowOffset();
    public static string get_DescriptionAttributePath_Text();
    public static string get_DescriptionAttributePath_TextColor();
    public static string get_DescriptionAttributePath_TextShadowOffset();
    public static string get_DescriptionAttributePath_ToolTip();
    public static string get_DescriptionAttributePath_Visible();
    public static string get_DescriptionAttributePath_Width();
    public static string get_DescriptionAttributePathDataBindingRule_BindingField();
    public static string get_DescriptionAttributePathRule_BorderColor();
    public static string get_DescriptionAttributePathRule_Category();
    public static string get_DescriptionAttributePathRule_LineStyleInLegend();
    public static string get_DescriptionAttributePathRule_BorderWidthInLegend();
    public static string get_DescriptionAttributePathRule_WidthInLegend();
    public static string get_DescriptionAttributePathRule_ColorCount();
    public static string get_DescriptionAttributePathRule_ColoringMode();
    public static string get_DescriptionAttributePathRule_ColorPalette();
    public static string get_DescriptionAttributePathRule_CustomColors();
    public static string get_DescriptionAttributePathRule_DataGrouping();
    public static string get_DescriptionAttributePathRule_FromColor();
    public static string get_DescriptionAttributePathRule_FromValue();
    public static string get_DescriptionAttributePathRule_GradientType();
    public static string get_DescriptionAttributePathRule_HatchStyle();
    public static string get_DescriptionAttributePathRule_LegendText();
    public static string get_DescriptionAttributePathRule_MiddleColor();
    public static string get_DescriptionAttributePathRule_Name();
    public static string get_DescriptionAttributePathRule_PathField();
    public static string get_DescriptionAttributePathRule_SecondaryColor();
    public static string get_DescriptionAttributePathRule_ShowInColorSwatch();
    public static string get_DescriptionAttributePathRule_ShowInLegend();
    public static string get_DescriptionAttributePathRule_Text();
    public static string get_DescriptionAttributePathRule_ToColor();
    public static string get_DescriptionAttributePathRule_ToolTip();
    public static string get_DescriptionAttributePathRule_ToValue();
    public static string get_DescriptionAttributePathRule_UseCustomColors();
    public static string get_DescriptionAttributePathWidthRule_WidthCount();
    public static string get_DescriptionAttributePathWidthRule_CustomWidths();
    public static string get_DescriptionAttributePathWidthRule_FromWidth();
    public static string get_DescriptionAttributePathWidthRule_FromValue();
    public static string get_DescriptionAttributePathWidthRule_ToWidth();
    public static string get_DescriptionAttributePathWidthRule_ToValue();
    public static string get_DescriptionAttributePathWidthRule_UseCustomWidths();
    public static string get_DescriptionAttributePathWidthRule_BorderColorInLegend();
    public static string get_DescriptionAttributePathWidthRule_ColorInLegend();
    public static string get_DescriptionAttributePathWidthRule_SecondaryColorInLegend();
    public static string get_DescriptionAttributePathWidthRule_GradientTypeInLegend();
    public static string get_DescriptionAttributePathWidthRule_HatchStyleInLegend();
    public static string get_DescriptionAttributePinMajorTickMark_Length();
    public static string get_DescriptionAttributePinMajorTickMark_Shape();
    public static string get_DescriptionAttributePinMajorTickMark_Width();
    public static string get_DescriptionAttributePredefinedSymbol_BorderColor();
    public static string get_DescriptionAttributePredefinedSymbol_BorderStyle();
    public static string get_DescriptionAttributePredefinedSymbol_BorderWidth();
    public static string get_DescriptionAttributePredefinedSymbol_Category();
    public static string get_DescriptionAttributePredefinedSymbol_Color();
    public static string get_DescriptionAttributePredefinedSymbol_Font();
    public static string get_DescriptionAttributePredefinedSymbol_FromValue();
    public static string get_DescriptionAttributePredefinedSymbol_GradientType();
    public static string get_DescriptionAttributePredefinedSymbol_HatchStyle();
    public static string get_DescriptionAttributePredefinedSymbol_Height();
    public static string get_DescriptionAttributePredefinedSymbol_Image();
    public static string get_DescriptionAttributePredefinedSymbol_ImageResizeMode();
    public static string get_DescriptionAttributePredefinedSymbol_ImageTransColor();
    public static string get_DescriptionAttributePredefinedSymbol_LegendText();
    public static string get_DescriptionAttributePredefinedSymbol_MarkerStyle();
    public static string get_DescriptionAttributePredefinedSymbol_Name();
    public static string get_DescriptionAttributePredefinedSymbol_SecondaryColor();
    public static string get_DescriptionAttributePredefinedSymbol_ShadowOffset();
    public static string get_DescriptionAttributePredefinedSymbol_Text();
    public static string get_DescriptionAttributePredefinedSymbol_TextAlignment();
    public static string get_DescriptionAttributePredefinedSymbol_TextColor();
    public static string get_DescriptionAttributePredefinedSymbol_TextShadowOffset();
    public static string get_DescriptionAttributePredefinedSymbol_ToolTip();
    public static string get_DescriptionAttributePredefinedSymbol_ToValue();
    public static string get_DescriptionAttributePredefinedSymbol_Visible();
    public static string get_DescriptionAttributePredefinedSymbol_Width();
    public static string get_DescriptionAttributePrintingManager_PrintDocument();
    public static string get_DescriptionAttributeProjectionCenter_X();
    public static string get_DescriptionAttributeProjectionCenter_Y();
    public static string get_DescriptionAttributeShape_BorderColor();
    public static string get_DescriptionAttributeShape_BorderStyle();
    public static string get_DescriptionAttributeShape_BorderWidth();
    public static string get_DescriptionAttributeShape_Category();
    public static string get_DescriptionAttributeShape_CentralPoint();
    public static string get_DescriptionAttributeShape_CentralPointOffset();
    public static string get_DescriptionAttributeShape_ChildSymbolMargin();
    public static string get_DescriptionAttributeShape_Color();
    public static string get_DescriptionAttributeShape_Font();
    public static string get_DescriptionAttributeShape_GradientType();
    public static string get_DescriptionAttributeShape_HatchStyle();
    public static string get_DescriptionAttributeShape_Layer();
    public static string get_DescriptionAttributeShape_Name();
    public static string get_DescriptionAttributeShape_Offset();
    public static string get_DescriptionAttributeShape_ParentGroup();
    public static string get_DescriptionAttributeShape_ScaleFactor();
    public static string get_DescriptionAttributeShape_SecondaryColor();
    public static string get_DescriptionAttributeShape_Selected();
    public static string get_DescriptionAttributeShape_ShadowOffset();
    public static string get_DescriptionAttributeShape_ShapeData();
    public static string get_DescriptionAttributeShape_Text();
    public static string get_DescriptionAttributeShape_TextAlignment();
    public static string get_DescriptionAttributeShape_TextColor();
    public static string get_DescriptionAttributeShape_TextShadowOffset();
    public static string get_DescriptionAttributeShape_TextVisibility();
    public static string get_DescriptionAttributeShape_ToolTip();
    public static string get_DescriptionAttributeShape_Visible();
    public static string get_DescriptionAttributeShapeDataBindingRule_BindingField();
    public static string get_DescriptionAttributeShapeRule_BorderColor();
    public static string get_DescriptionAttributeShapeRule_Category();
    public static string get_DescriptionAttributeShapeRule_ColorCount();
    public static string get_DescriptionAttributeShapeRule_ColoringMode();
    public static string get_DescriptionAttributeShapeRule_ColorPalette();
    public static string get_DescriptionAttributeShapeRule_CustomColors();
    public static string get_DescriptionAttributeShapeRule_DataGrouping();
    public static string get_DescriptionAttributeShapeRule_FromColor();
    public static string get_DescriptionAttributeShapeRule_FromValue();
    public static string get_DescriptionAttributeShapeRule_GradientType();
    public static string get_DescriptionAttributeShapeRule_HatchStyle();
    public static string get_DescriptionAttributeShapeRule_LegendText();
    public static string get_DescriptionAttributeShapeRule_MiddleColor();
    public static string get_DescriptionAttributeShapeRule_Name();
    public static string get_DescriptionAttributeShapeRule_SecondaryColor();
    public static string get_DescriptionAttributeShapeRule_ShapeField();
    public static string get_DescriptionAttributeShapeRule_ShowInColorSwatch();
    public static string get_DescriptionAttributeShapeRule_ShowInLegend();
    public static string get_DescriptionAttributeShapeRule_Text();
    public static string get_DescriptionAttributeShapeRule_ToColor();
    public static string get_DescriptionAttributeShapeRule_ToolTip();
    public static string get_DescriptionAttributeShapeRule_ToValue();
    public static string get_DescriptionAttributeShapeRule_UseCustomColors();
    public static string get_DescriptionAttributeSpecialPosition_Enable();
    public static string get_DescriptionAttributeSpecialPosition_Location();
    public static string get_DescriptionAttributeSwatchColor_AutomaticallyAdded();
    public static string get_DescriptionAttributeSwatchColor_Color();
    public static string get_DescriptionAttributeSwatchColor_FromValue();
    public static string get_DescriptionAttributeSwatchColor_GradientType();
    public static string get_DescriptionAttributeSwatchColor_HatchStyle();
    public static string get_DescriptionAttributeSwatchColor_NoData();
    public static string get_DescriptionAttributeSwatchColor_SecondaryColor();
    public static string get_DescriptionAttributeSwatchColor_TextValue();
    public static string get_DescriptionAttributeSwatchColor_ToValue();
    public static string get_DescriptionAttributeSymbol_BorderColor();
    public static string get_DescriptionAttributeSymbol_BorderStyle();
    public static string get_DescriptionAttributeSymbol_BorderWidth();
    public static string get_DescriptionAttributeSymbol_Category();
    public static string get_DescriptionAttributeSymbol_Color();
    public static string get_DescriptionAttributeSymbol_Font();
    public static string get_DescriptionAttributeSymbol_GradientType();
    public static string get_DescriptionAttributeSymbol_HatchStyle();
    public static string get_DescriptionAttributeSymbol_Height();
    public static string get_DescriptionAttributeSymbol_Image();
    public static string get_DescriptionAttributeSymbol_ImageResizeMode();
    public static string get_DescriptionAttributeSymbol_ImageTransColor();
    public static string get_DescriptionAttributeSymbol_Layer();
    public static string get_DescriptionAttributeSymbol_MarkerStyle();
    public static string get_DescriptionAttributeSymbol_Name();
    public static string get_DescriptionAttributeSymbol_Offset();
    public static string get_DescriptionAttributeSymbol_ParentShape();
    public static string get_DescriptionAttributeSymbol_SecondaryColor();
    public static string get_DescriptionAttributeSymbol_Selected();
    public static string get_DescriptionAttributeSymbol_ShadowOffset();
    public static string get_DescriptionAttributeSymbol_SymbolData();
    public static string get_DescriptionAttributeSymbol_Text();
    public static string get_DescriptionAttributeSymbol_TextAlignment();
    public static string get_DescriptionAttributeSymbol_TextColor();
    public static string get_DescriptionAttributeSymbol_TextShadowOffset();
    public static string get_DescriptionAttributeSymbol_ToolTip();
    public static string get_DescriptionAttributeSymbol_Visible();
    public static string get_DescriptionAttributeSymbol_Width();
    public static string get_DescriptionAttributeSymbol_X();
    public static string get_DescriptionAttributeSymbol_Y();
    public static string get_DescriptionAttributeSymbolDataBindingRule_BindingField();
    public static string get_DescriptionAttributeSymbolDataBindingRule_Category();
    public static string get_DescriptionAttributeSymbolDataBindingRule_ParentShapeField();
    public static string get_DescriptionAttributeSymbolDataBindingRule_XCoordinateField();
    public static string get_DescriptionAttributeSymbolDataBindingRule_YCoordinateField();
    public static string get_DescriptionAttributeSymbolRule_Category();
    public static string get_DescriptionAttributeSymbolRule_ShowInColorSwatch();
    public static string get_DescriptionAttributeSymbolRule_DataGrouping();
    public static string get_DescriptionAttributeSymbolRule_FromValue();
    public static string get_DescriptionAttributeSymbolRule_LegendText();
    public static string get_DescriptionAttributeSymbolRule_Name();
    public static string get_DescriptionAttributeSymbolRule_PredefinedSymbols();
    public static string get_DescriptionAttributeSymbolRule_ShowInLegend();
    public static string get_DescriptionAttributeSymbolRule_SymbolField();
    public static string get_DescriptionAttributeSymbolRule_ToValue();
    public static string get_DescriptionAttributeTickMark_Interval();
    public static string get_DescriptionAttributeTickMark_IntervalOffset();
    public static string get_DescriptionAttributeViewCenter_X();
    public static string get_DescriptionAttributeViewCenter_Y();
    public static string get_DescriptionAttributeViewport_AutoSize();
    public static string get_DescriptionAttributeViewport_ContentAutoFitMargin();
    public static string get_DescriptionAttributeViewport_ContentSize();
    public static string get_DescriptionAttributeViewport_EnablePanning();
    public static string get_DescriptionAttributeViewport_ErrorMessage();
    public static string get_DescriptionAttributeViewport_MaximumZoom();
    public static string get_DescriptionAttributeViewport_MinimumZoom();
    public static string get_DescriptionAttributeViewport_OptimizeForPanning();
    public static string get_DescriptionAttributeViewport_LoadTilesAsynchronously();
    public static string get_DescriptionAttributeViewport_QueryVirtualEarthAsynchronously();
    public static string get_DescriptionAttributeViewport_ViewCenter();
    public static string get_DescriptionAttributeViewport_Zoom();
    public static string get_DescriptionAttributeZoomPanel_ButtonBorderColor();
    public static string get_DescriptionAttributeZoomPanel_ButtonColor();
    public static string get_DescriptionAttributeZoomPanel_Dock();
    public static string get_DescriptionAttributeZoomPanel_Orientation();
    public static string get_DescriptionAttributeZoomPanel_PanelStyle();
    public static string get_DescriptionAttributeZoomPanel_Reversed();
    public static string get_DescriptionAttributeZoomPanel_SliderBarBorderColor();
    public static string get_DescriptionAttributeZoomPanel_SliderBarColor();
    public static string get_DescriptionAttributeZoomPanel_SnapToTickMarks();
    public static string get_DescriptionAttributeZoomPanel_SymbolBorderColor();
    public static string get_DescriptionAttributeZoomPanel_SymbolColor();
    public static string get_DescriptionAttributeZoomPanel_ThumbBorderColor();
    public static string get_DescriptionAttributeZoomPanel_ThumbColor();
    public static string get_DescriptionAttributeZoomPanel_TickBorderColor();
    public static string get_DescriptionAttributeZoomPanel_TickColor();
    public static string get_DescriptionAttributeZoomPanel_TickCount();
    public static string get_DescriptionAttributeZoomPanel_ZoomButtonsVisible();
    public static string get_DescriptionAttributeZoomPanel_ZoomType();
    public static string get_DescriptionAttributeTileServerUrl_Culture();
    public static string get_DescriptionAttributeTileServerUrl_SupportedTileSystem();
    public static string get_DescriptionAttributeTileServerUrl_Url();
    public static string get_DescriptionAttributeGroup_Href();
    public static string get_DescriptionAttributeGroup_MapAreaAttributes();
    public static string get_DescriptionAttributeLegendCell_CellAttributes();
    public static string get_DescriptionAttributeLegendCell_Href();
    public static string get_DescriptionAttributeLegendCellColumn_CellColumnAttributes();
    public static string get_DescriptionAttributeLegendCellColumn_Href();
    public static string get_DescriptionAttributeLegendItem_Href();
    public static string get_DescriptionAttributeLegendItem_MapAreaAttributes();
    public static string get_DescriptionAttributeLegendItem_SeriesName();
    public static string get_DescriptionAttributeLegendItem_SeriesPointIndex();
    public static string get_DescriptionAttributeLinearPointer_Href();
    public static string get_DescriptionAttributeLinearPointer_MapAreaAttributes();
    public static string get_DescriptionAttributeLinearScale_Href();
    public static string get_DescriptionAttributeMapArea_Coordinates();
    public static string get_DescriptionAttributeMapArea_Href();
    public static string get_DescriptionAttributeMapArea_MapAreaAttributes();
    public static string get_DescriptionAttributeMapArea_Name();
    public static string get_DescriptionAttributeMapArea_Shape();
    public static string get_DescriptionAttributeMapArea_ToolTip();
    public static string get_DescriptionAttributeMapControl_Compression();
    public static string get_DescriptionAttributeMapControl_ContentCachingEnabled();
    public static string get_DescriptionAttributeMapControl_ContentCachingTimeout();
    public static string get_DescriptionAttributeMapControl_ControlPersistence();
    public static string get_DescriptionAttributeMapControl_EnableViewState();
    public static string get_DescriptionAttributeMapControl_Height();
    public static string get_DescriptionAttributeMapControl_ImageMapEnabled();
    public static string get_DescriptionAttributeMapControl_ImageType();
    public static string get_DescriptionAttributeMapControl_ImageUrl();
    public static string get_DescriptionAttributeMapControl_MapAreas();
    public static string get_DescriptionAttributeMapControl_RenderingImageUrl();
    public static string get_DescriptionAttributeMapControl_RenderType();
    public static string get_DescriptionAttributeMapControl_TagAttributes();
    public static string get_DescriptionAttributeMapControl_ViewStateContent();
    public static string get_DescriptionAttributeMapControl_Width();
    public static string get_DescriptionAttributeMapImage_Href();
    public static string get_DescriptionAttributeMapImage_MapAreaAttributes();
    public static string get_DescriptionAttributeMapLabel_Href();
    public static string get_DescriptionAttributeMapLabel_MapAreaAttributes();
    public static string get_DescriptionAttributePanel_Href();
    public static string get_DescriptionAttributePanel_MapAreaAttributes();
    public static string get_DescriptionAttributePath_Href();
    public static string get_DescriptionAttributePath_MapAreaAttributes();
    public static string get_DescriptionAttributeShape_Href();
    public static string get_DescriptionAttributeShape_MapAreaAttributes();
    public static string get_DescriptionAttributeSymbol_Href();
    public static string get_DescriptionAttributeSymbol_MapAreaAttributes();
    public static string get_CategoryAttribute_Appearance();
    public static string get_CategoryAttribute_Background();
    public static string get_CategoryAttribute_Behavior();
    public static string get_CategoryAttribute_CellColumns();
    public static string get_CategoryAttribute_Colors();
    public static string get_CategoryAttribute_Widths();
    public static string get_CategoryAttribute_Coordinates();
    public static string get_CategoryAttribute_CustomColors();
    public static string get_CategoryAttribute_CustomWidths();
    public static string get_CategoryAttribute_Data();
    public static string get_CategoryAttribute_GeneralVisibility();
    public static string get_CategoryAttribute_Groups();
    public static string get_CategoryAttribute_GroupFields();
    public static string get_CategoryAttribute_Header();
    public static string get_CategoryAttribute_Image();
    public static string get_CategoryAttribute_ImageResources();
    public static string get_CategoryAttribute_Interactivity();
    public static string get_CategoryAttribute_Interval();
    public static string get_CategoryAttribute_LabelsAndTickMarks();
    public static string get_CategoryAttribute_LabelVisibility();
    public static string get_CategoryAttribute_Legend();
    public static string get_CategoryAttribute_Layers();
    public static string get_CategoryAttribute_Layout();
    public static string get_CategoryAttribute_MapContent();
    public static string get_CategoryAttribute_Marker();
    public static string get_CategoryAttribute_Misc();
    public static string get_CategoryAttribute_MouseAndKeyboard();
    public static string get_CategoryAttribute_Panels();
    public static string get_CategoryAttribute_ParallelsAndMeridians();
    public static string get_CategoryAttribute_Paths();
    public static string get_CategoryAttribute_PathFields();
    public static string get_CategoryAttribute_Position();
    public static string get_CategoryAttribute_Shapes();
    public static string get_CategoryAttribute_ShapeFields();
    public static string get_CategoryAttribute_Size();
    public static string get_CategoryAttribute_Symbols();
    public static string get_CategoryAttribute_SymbolFields();
    public static string get_CategoryAttribute_SymbolText();
    public static string get_CategoryAttribute_Title();
    public static string get_CategoryAttribute_TypeSpecific();
    public static string get_CategoryAttribute_Values();
    public static string get_CategoryAttribute_View();
    public static string get_CategoryAttribute_Zooming();
    public static string get_CategoryAttribute_VirtualEarth();
    public static string get_CategoryAttribute_MapArea();
    public static string get_CategoryAttribute_MapControl();
    public static string get_CategoryAttribute_Shape();
    public static string get_CategoryAttribute_ViewState();
    public static string get_LabelFormatPrecisionMsg();
    public static string get_LabelFormatPrecisionMsgCaption();
    public static string get_DownloadingTile();
    public static string get_ProvideBingMapsAppID();
    public static string AccessibilityGroupName(string name);
    public static string AccessibilityShapeName(string name);
    public static string AccessibilityPathName(string name);
    public static string AccessibilitySymbolName(string name);
    public static string AccessibilityLegendName(string name);
    public static string AccessibilityLegendTitleName(string name);
    public static string AccessibilityMapImageName(string name);
    public static string AccessibilityMapLabelName(string name);
    public static string AccessibilityShapeNameRS(string name);
    public static string AccessibilityPathNameRS(string name);
    public static string AccessibilitySymbolNameRS(string name);
    public static string AccessibilityMapLabelNameRS(string name);
    public static string column_not_found(string name);
    public static string duplicate_object_failed(string name);
    public static string element_not_found(string name1, string name2, string name3);
    public static string empty_name_failed(string name);
    public static string field_duplication(string name1, string name2, string name3, string name4);
    public static string field_NAME_add(string name);
    public static string hot_region_error_initialize(string name);
    public static string hot_region_error_support(string name);
    public static string invalid_cast(string name1, string name2);
    public static string invalid_object_type(string name1, string name2);
    public static string invalid_param(double val);
    public static string invalid_parent(string name);
    public static string locate_cprovider_failed(string name);
    public static string locate_iprovider_failed(string name);
    public static string must_in_range(double val1, double val2);
    public static string not_supported_DataSource(string name);
    public static string out_of_range(double val1, double val2);
    public static string out_of_range_min_close(double val);
    public static string out_of_range_min_open(double val);
    public static string parent_not_renderable(string name);
    public static string playback_count_error(string name);
    public static string property_negative(string name);
    public static string symbol_coord_type(string name);
    public static string TileServerRequestTimeout(int timeoutInMilliseconds);
    public static string ExceptionXamlBrushNotSupported(string name);
    public static string ExceptionXamlGeometryNotSupported(string name);
    public static string ExceptionXamlShapeNotSupported(string shape);
    public static string ExceptionTraceManagerUnsupportedType(string name);
    public static string ExceptionFieldNameDoesNotExist(string name);
    public static string ExceptionFieldMustBeOfType(string name, string type);
    public static string ExceptionValueFormatIncorrect(string value);
    public static string ExceptionInvalidCoordinate(string value);
    public static string ExceptionInvalidKeywordFormat(string format);
    public static string ExceptionShapeFieldNotFound(string field);
    public static string ExceptionInvalidCoordonateString(string value);
    public static string ExceptionMaximumZoomtooLarge(int limit);
    public static string ExceptionCannotLoadImageFromLocation(string location);
    public static string ExceptionUnknownBorderType(string name);
    public static string DescriptionAttributeGroup_Fields(string fieldName);
    public static string DescriptionAttributeShape_Fields(string fieldName);
    public static string DescriptionAttributePath_Fields(string fieldName);
    public static string DescriptionAttributeSymbol_Fields(string fieldName);
}
[AttributeUsageAttribute("32767")]
internal class Microsoft.Reporting.Map.WebForms.SRCategoryAttribute : CategoryAttribute {
    public SRCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class Microsoft.Reporting.Map.WebForms.SRDescriptionAttribute : DescriptionAttribute {
    private bool replaced;
    public string Description { get; }
    public SRDescriptionAttribute(string description);
    public virtual string get_Description();
}
internal class Microsoft.Reporting.Map.WebForms.StringLengthReversedComparer : object {
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
}
internal class Microsoft.Reporting.Map.WebForms.SunkenBorder : object {
    protected float defaultRadiusSize;
    protected float outsideShadowRate;
    protected bool sunken;
    protected bool drawBottomShadow;
    protected bool drawOutsideTopLeftShadow;
    protected Single[] cornerRadius;
    protected SizeF sizeLeftTop;
    protected SizeF sizeRightBottom;
    protected bool drawScrews;
    public string Name { get; }
    public virtual string get_Name();
    public virtual RectangleF GetTitlePositionInBorder();
    public virtual void AdjustAreasPosition(MapGraphics graph, RectangleF& areasRect);
    public virtual void DrawBorder(MapGraphics graph, Frame borderSkin, RectangleF rect, Color backColor, MapHatchStyle backHatchStyle, string backImage, MapImageWrapMode backImageMode, Color backImageTranspColor, MapImageAlign backImageAlign, GradientType backGradientType, Color backSecondaryColor, Color borderColor, int borderWidth, MapDashStyle borderStyle);
    public sealed virtual bool IsVisible(MapGraphics g);
    private void DrawScrew(MapGraphics graph, RectangleF rect);
}
internal enum Microsoft.Reporting.Map.WebForms.SupportedTileSystem : Enum {
    public int value__;
    public static SupportedTileSystem All;
    public static SupportedTileSystem VirtualEarthAerial;
    public static SupportedTileSystem VirtualEarthHybrid;
    public static SupportedTileSystem VirtualEarthRoad;
    public static SupportedTileSystem VirtualEarthRoadRelief;
}
internal class Microsoft.Reporting.Map.WebForms.SvgMapGraphics : SvgRendering {
    private Graphics graphics;
    public Matrix Transform { get; public set; }
    public SmoothingMode SmoothingMode { get; public set; }
    public bool IsClipEmpty { get; }
    public Region Clip { get; public set; }
    public Graphics Graphics { get; public set; }
    public TextRenderingHint TextRenderingHint { get; public set; }
    public SvgMapGraphics(CommonElements common);
    public sealed virtual void DrawLine(Pen pen, PointF pt1, PointF pt2);
    public sealed virtual void DrawLine(Pen pen, float x1, float y1, float x2, float y2);
    public sealed virtual void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr);
    public sealed virtual void DrawEllipse(Pen pen, float x, float y, float width, float height);
    public sealed virtual void DrawCurve(Pen pen, PointF[] points, int offset, int numberOfSegments, float tension);
    public sealed virtual void DrawRectangle(Pen pen, int x, int y, int width, int height);
    public sealed virtual void DrawString(string s, Font font, Brush brush, RectangleF layoutRectangle, StringFormat format);
    public sealed virtual void DrawString(string s, Font font, Brush brush, PointF point, StringFormat format);
    public sealed virtual void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs);
    public sealed virtual void DrawRectangle(Pen pen, float x, float y, float width, float height);
    public sealed virtual void DrawPath(Pen pen, GraphicsPath path);
    public sealed virtual void DrawPie(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual void DrawArc(Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual void DrawImage(Image image, RectangleF rect);
    public sealed virtual void DrawEllipse(Pen pen, RectangleF rect);
    public sealed virtual void DrawLines(Pen pen, PointF[] points);
    public sealed virtual void FillEllipse(Brush brush, RectangleF rect);
    public sealed virtual void FillPath(Brush brush, GraphicsPath path);
    public sealed virtual void FillPath(Brush brush, GraphicsPath path, float angle, bool useBrushOffset, bool circularFill);
    public sealed virtual void FillRegion(Brush brush, Region region);
    public sealed virtual void FillRectangle(Brush brush, RectangleF rect);
    public sealed virtual void FillRectangle(Brush brush, float x, float y, float width, float height);
    public sealed virtual void FillPolygon(Brush brush, PointF[] points);
    public sealed virtual void FillPie(Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);
    public sealed virtual Matrix get_Transform();
    public sealed virtual void set_Transform(Matrix value);
    public sealed virtual SmoothingMode get_SmoothingMode();
    public sealed virtual void set_SmoothingMode(SmoothingMode value);
    public sealed virtual void SetClip(RectangleF rect);
    public sealed virtual void ResetClip();
    public sealed virtual void SetClip(GraphicsPath path, CombineMode combineMode);
    public sealed virtual void TranslateTransform(float dx, float dy);
    public sealed virtual bool get_IsClipEmpty();
    public sealed virtual Region get_Clip();
    public sealed virtual void set_Clip(Region value);
    public sealed virtual Graphics get_Graphics();
    public sealed virtual void set_Graphics(Graphics value);
    public void SetGradient(Color firstColor, Color secondColor, GradientType gradientType);
    public sealed virtual void DrawPolygon(Pen pen, PointF[] points);
    public sealed virtual GraphicsState Save();
    public sealed virtual TextRenderingHint get_TextRenderingHint();
    public sealed virtual void set_TextRenderingHint(TextRenderingHint value);
    public sealed virtual void Restore(GraphicsState gstate);
    public sealed virtual SizeF MeasureString(string text, Font font, SizeF layoutArea, StringFormat stringFormat);
    public sealed virtual SizeF MeasureString(string text, Font font);
    public sealed virtual void BeginSelection(string hRef, string title);
    public sealed virtual void EndSelection();
}
internal class Microsoft.Reporting.Map.WebForms.SvgOpenParameters : ValueType {
    public bool toolTipsEnabled;
    public bool resizable;
    public bool preserveAspectRatio;
    public SvgOpenParameters(bool toolTipsEnabled, bool resizable, bool preserveAspectRatio);
}
internal abstract class Microsoft.Reporting.Map.WebForms.SvgParameters : object {
    protected Color BrushColor { get; }
    protected Color TextColor { get; }
    protected Color BrushSecondColor { get; }
    protected SvgGradientType GradientType { get; }
    protected SvgFillType FillType { get; }
    protected FillMode FillMode { get; protected set; }
    protected SvgImageWrapMode ImageWrapMode { get; }
    protected Color PenColor { get; }
    protected double PenWidth { get; }
    protected SvgLineCapStyle SvgLineCap { get; }
    protected SvgDashStyle DashStyle { get; }
    protected Matrix Transform { get; }
    protected Font Font { get; }
    protected StringFormat StringFormat { get; }
    public Size PictureSize { get; public set; }
    protected abstract virtual string GetX(double x);
    protected abstract virtual string GetY(double y);
    protected abstract virtual string GetX(PointF point);
    protected abstract virtual string GetX(RectangleF rectangle);
    protected abstract virtual string GetWidth(RectangleF rectangle);
    protected abstract virtual string GetHeight(RectangleF rectangle);
    protected abstract virtual string GetY(PointF point);
    protected abstract virtual string GetY(RectangleF rectangle);
    protected abstract virtual Color get_BrushColor();
    protected abstract virtual Color get_TextColor();
    protected abstract virtual Color get_BrushSecondColor();
    protected abstract virtual SvgGradientType get_GradientType();
    protected abstract virtual SvgFillType get_FillType();
    protected abstract virtual FillMode get_FillMode();
    protected abstract virtual void set_FillMode(FillMode value);
    protected abstract virtual SvgImageWrapMode get_ImageWrapMode();
    protected abstract virtual Color get_PenColor();
    protected abstract virtual double get_PenWidth();
    protected abstract virtual SvgLineCapStyle get_SvgLineCap();
    protected abstract virtual SvgDashStyle get_DashStyle();
    protected abstract virtual Matrix get_Transform();
    protected abstract virtual Font get_Font();
    protected abstract virtual StringFormat get_StringFormat();
    public abstract virtual Size get_PictureSize();
    public abstract virtual void set_PictureSize(Size value);
}
internal class Microsoft.Reporting.Map.WebForms.SvgRendering : MapParameters {
    internal XmlTextWriter output;
    private int gradientIDNum;
    private int clipRegionIdNum;
    private bool selectionMode;
    private string gradientIDString;
    private Single[] oldMatrix;
    private bool antiAlias;
    internal bool antiAliasText;
    private bool transformOpen;
    private string toolTipsText;
    private string title;
    private bool toolTipsActive;
    private bool clipSet;
    private bool resizable;
    private string toolTipsScript;
    private string emptyLoadHandler;
    public void Open(XmlTextWriter svgWriter, Size pictureSize);
    public void SetTitle(string title);
    public void Open(XmlTextWriter svgWriter, Size pictureSize, SvgOpenParameters extraParameters);
    internal void Validate();
    public void Close();
    public void DrawLine(PointF point1, PointF point2);
    public void DrawLines(PointF[] points);
    public void DrawRectangle(RectangleF rect);
    private void SetRectangle(RectangleF rect);
    public void DrawPolygon(PointF[] points);
    private void SetPolygon(PointF[] points);
    public void DrawArc(RectangleF rect, float startAngle, float sweepAngle);
    public void DrawPie(RectangleF rect, float startAngle, float sweepAngle);
    private void SetPie(RectangleF rect, float startAngle, float sweepAngle);
    public void DrawEllipse(RectangleF rect);
    private void SetEllipse(RectangleF rect);
    public void DrawBezier(PointF pt1, PointF pt2, PointF pt3, PointF pt4);
    public void DrawBeziers(PointF[] points);
    public void DrawCurve(PointF[] points, float tension);
    public void DrawCurve(PointF[] points, int offset, int numberOfSegments, float tension);
    public void DrawPath(GraphicsPath path);
    public void DrawClosedCurve(PointF[] points, float tension);
    public void DrawImage(Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr);
    public void DrawImage(Image image, RectangleF destRect);
    public void DrawImage(Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs);
    public void FillTexturedRectangle(TextureBrush textureBrush, RectangleF destRect);
    public void DrawString(string text, RectangleF layoutRect);
    public void DrawString(string text, PointF point);
    public void FillRectangle(RectangleF rect);
    public void FillPolygon(PointF[] points);
    public void FillPie(RectangleF rect, float startAngle, float sweepAngle);
    public void FillEllipse(RectangleF rect);
    public void FillClosedCurve(PointF[] points, float tension);
    public void FillPath(GraphicsPath path);
    public void FillBezier(PointF pt1, PointF pt2, PointF pt3, PointF pt4);
    public void FillCurve(PointF[] points, float tension);
    public void FillArc(RectangleF rect, float startAngle, float sweepAngle);
    private bool MatrixChanged();
    internal bool NoTransformMatrix();
    private void ResetTransformMatrix();
    public float WrapString(string text, RectangleF destRectangle, String[]& stringArray);
    private String[] SplitText(string text);
    protected string ImageToString(Image image);
    private string GetDashStyle(SvgDashStyle dashStyle);
    internal string GetAlpha(Color color);
    internal string ColorToString(Color color);
    internal void SetStringAlignment(StringFormat stringFormat);
    internal void Transformations();
    public void SetSmoothingMode(bool antiAlias, bool shape);
    private string GetMatrix(Matrix matrix, bool setOldMatrix);
    private void SVGDefine(bool fill, bool outline);
    public void BeginSvgSelection(string hRef, string title);
    public void EndSvgSelection();
    internal void SetToolTip();
    internal void StartGraphicsParameters(bool fill, bool outline);
    internal void EndGraphicsParameters();
    private string SetGradient(Color firstColor, Color secondColor, SvgGradientType type);
    private void SetRadialGradient(string gradientID, Color firstColor, Color secondColor);
    private void SetLinearGradient(string gradientID, Color firstColor, Color secondColor, SvgGradientType type);
    private void SetLinearGradient(string gradientID, LinearGradientBrush brush);
    public void SetClip(RectangleF rect);
    public void ResetClip();
}
internal class Microsoft.Reporting.Map.WebForms.SwatchColor : NamedElement {
    private Color color;
    private GradientType gradientType;
    private Color secondaryColor;
    private MapHatchStyle hatchStyle;
    private bool noData;
    private double fromValue;
    private double toValue;
    private string textValue;
    internal bool automaticallyAdded;
    private ColorSwatchPanel owner;
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeSwatchColor_Color")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
public Color Color { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeSwatchColor_GradientType")]
[NotifyParentPropertyAttribute("True")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.GradientEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType GradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeSwatchColor_SecondaryColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color SecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeSwatchColor_HatchStyle")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapHatchStyle HatchStyle { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeSwatchColor_NoData")]
[DefaultValueAttribute("False")]
public bool NoData { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeSwatchColor_FromValue")]
[DefaultValueAttribute("0")]
public double FromValue { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeSwatchColor_ToValue")]
[DefaultValueAttribute("0")]
public double ToValue { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeSwatchColor_TextValue")]
[DefaultValueAttribute("")]
public string TextValue { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool HasTextValue { get; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeSwatchColor_AutomaticallyAdded")]
[DefaultValueAttribute("False")]
public bool AutomaticallyAdded { get; public set; }
    internal ColorSwatchPanel Owner { get; internal set; }
    public SwatchColor(string name);
    public SwatchColor(string name, double fromValue, double toValue);
    public SwatchColor(string name, string textValue);
    public SwatchColor(string name, double fromValue, double toValue, string textValue);
    internal SwatchColor(CommonElements common, string name, double fromValue, double toValue, string textValue);
    public Color get_Color();
    public void set_Color(Color value);
    public GradientType get_GradientType();
    public void set_GradientType(GradientType value);
    public Color get_SecondaryColor();
    public void set_SecondaryColor(Color value);
    public MapHatchStyle get_HatchStyle();
    public void set_HatchStyle(MapHatchStyle value);
    public bool get_NoData();
    public void set_NoData(bool value);
    public double get_FromValue();
    public void set_FromValue(double value);
    public double get_ToValue();
    public void set_ToValue(double value);
    public string get_TextValue();
    public void set_TextValue(string value);
    public bool get_HasTextValue();
    public bool get_AutomaticallyAdded();
    public void set_AutomaticallyAdded(bool value);
    internal ColorSwatchPanel get_Owner();
    internal void set_Owner(ColorSwatchPanel value);
    private void Invalidate(bool layout);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.SwatchColorCollection : NamedCollection {
    private SwatchColor Item { get; private set; }
    private SwatchColor Item { get; private set; }
    public SwatchColor Item { get; public set; }
    internal SwatchColorCollection(NamedElement parent, CommonElements common);
    public SwatchColor Add(string name);
    public int Add(SwatchColor value);
    public void Remove(SwatchColor value);
    private SwatchColor get_Item(int index);
    private void set_Item(int index, SwatchColor value);
    private SwatchColor get_Item(string name);
    private void set_Item(string name, SwatchColor value);
    public SwatchColor get_Item(object obj);
    public void set_Item(object obj, SwatchColor value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    internal virtual void Invalidate();
    protected virtual void OnValidate(object value);
}
internal enum Microsoft.Reporting.Map.WebForms.SwatchLabelType : Enum {
    public int value__;
    public static SwatchLabelType Auto;
    public static SwatchLabelType ShowMiddleValue;
    public static SwatchLabelType ShowBorderValue;
}
[DefaultMemberAttribute("Item")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.SymbolConverter")]
internal class Microsoft.Reporting.Map.WebForms.Symbol : NamedElement {
    private GraphicsPath[] cachedPaths;
    private RectangleF[] cachedPathBounds;
    internal Hashtable fields;
    private string fieldDataBuffer;
    internal PointF precalculatedCenterPoint;
    private XamlRenderer[] xamlRenderers;
    private SymbolData symbolData;
    private Offset offset;
    private string toolTip;
    private string href;
    private string mapAreaAttributes;
    private TextAlignment textAlignment;
    private bool visible;
    private Font font;
    private Color borderColor;
    private MapDashStyle borderStyle;
    private int borderWidth;
    private Color color;
    private Color textColor;
    private GradientType gradientType;
    private Color secondaryColor;
    private MapHatchStyle hatchStyle;
    private string text;
    private int shadowOffset;
    private int textShadowOffset;
    private bool selected;
    private MarkerStyle markerStyle;
    private float width;
    private float height;
    private ResizeMode imageResizeMode;
    private string image;
    private Color imageTransColor;
    private string category;
    private string parentShape;
    private Shape parentShapeObject;
    private bool useInternalProperties;
    private Color borderColorInt;
    private MapDashStyle borderStyleInt;
    private int borderWidthInt;
    private Color colorInt;
    private Color secondaryColorInt;
    private GradientType gradientTypeInt;
    private MapHatchStyle hatchStyleInt;
    private string textInt;
    private TextAlignment textAlignmentInt;
    private string toolTipInt;
    private Font fontInt;
    private Color textColorInt;
    private int textShadowOffsetInt;
    private MarkerStyle markerStyleInt;
    private float widthInt;
    private float heightInt;
    private int shadowOffsetInt;
    private string imageInt;
    private Color imageTransColorInt;
    private ResizeMode imageResizeModeInt;
    private bool visibleInt;
    private object mapAreaTag;
    private string layer;
    private bool belongsToLayer;
    private bool belongsToAllLayers;
    private Layer layerObject;
    private MapPoint Microsoft.Reporting.Map.WebForms.ISpatialElement.MinimumExtent { get; }
    private MapPoint Microsoft.Reporting.Map.WebForms.ISpatialElement.MaximumExtent { get; }
    [SRDescriptionAttribute("DescriptionAttributeSymbol_SymbolData")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public SymbolData SymbolData { get; public set; }
    private MapPoint[] Microsoft.Reporting.Map.WebForms.ISpatialElement.Points { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string EncodedSymbolData { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("")]
public string FieldData { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_Offset")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.ShapeOffsetConverter")]
[DesignerSerializationVisibilityAttribute("2")]
public Offset Offset { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_ToolTip")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("")]
public string ToolTip { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_Href")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string Href { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_MapAreaAttributes")]
[DefaultValueAttribute("")]
public string MapAreaAttributes { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_TextAlignment")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TextAlignment TextAlignment { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_Visible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_Font")]
[DefaultValueAttribute("System.Drawing.Font", "Microsoft Sans Serif, 8.25pt")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_BorderColor")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color BorderColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_BorderStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapDashStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_BorderWidth")]
[DefaultValueAttribute("1")]
public int BorderWidth { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_Color")]
[DefaultValueAttribute("System.Drawing.Color", "Red")]
public Color Color { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_TextColor")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color TextColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_GradientType")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.GradientEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GradientType GradientType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_SecondaryColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color SecondaryColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_HatchStyle")]
[EditorAttribute("Microsoft.Reporting.Map.WebForms.HatchStyleEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MapHatchStyle HatchStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_Text")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.KeywordConverter")]
[DefaultValueAttribute("")]
public string Text { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_ShadowOffset")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("0")]
public int ShadowOffset { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_TextShadowOffset")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("0")]
public int TextShadowOffset { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_Selected")]
[DefaultValueAttribute("False")]
public bool Selected { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_MarkerStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MarkerStyle MarkerStyle { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Size")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_Width")]
[DefaultValueAttribute("7")]
public float Width { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Size")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_Height")]
[DefaultValueAttribute("7")]
public float Height { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Coordinates")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_X")]
[DefaultValueAttribute("Microsoft.Reporting.Map.WebForms.MapCoordinate", "0d")]
public MapCoordinate X { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Coordinates")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_Y")]
[DefaultValueAttribute("Microsoft.Reporting.Map.WebForms.MapCoordinate", "0d")]
public MapCoordinate Y { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_ImageResizeMode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ResizeMode ImageResizeMode { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_Image")]
[DefaultValueAttribute("")]
public string Image { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Image")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_ImageTransColor")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color ImageTransColor { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_Category")]
[DefaultValueAttribute("")]
public string Category { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_ParentShape")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DesignTimeShapeConverter")]
[DefaultValueAttribute("(none)")]
public string ParentShape { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public object Item { get; public set; }
    internal Shape ParentShapeObject { get; internal set; }
    internal bool UseInternalProperties { get; internal set; }
    internal Color BorderColorInt { get; internal set; }
    internal MapDashStyle BorderStyleInt { get; internal set; }
    internal int BorderWidthInt { get; internal set; }
    internal Color ColorInt { get; internal set; }
    internal Color SecondaryColorInt { get; internal set; }
    internal GradientType GradientTypeInt { get; internal set; }
    internal MapHatchStyle HatchStyleInt { get; internal set; }
    internal string TextInt { get; internal set; }
    internal TextAlignment TextAlignmentInt { get; internal set; }
    internal string ToolTipInt { get; internal set; }
    internal Font FontInt { get; internal set; }
    internal Color TextColorInt { get; internal set; }
    internal int TextShadowOffsetInt { get; internal set; }
    internal MarkerStyle MarkerStyleInt { get; internal set; }
    internal float WidthInt { get; internal set; }
    internal float HeightInt { get; internal set; }
    internal int ShadowOffsetInt { get; internal set; }
    internal string ImageInt { get; internal set; }
    internal Color ImageTransColorInt { get; internal set; }
    internal ResizeMode ImageResizeModeInt { get; internal set; }
    internal bool VisibleInt { get; internal set; }
    private object Microsoft.Reporting.Map.WebForms.IImageMapProvider.Tag { get; private set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeSymbol_Layer")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DesignTimeLayerConverter")]
[DefaultValueAttribute("(none)")]
public string Layer { get; public set; }
    private bool Microsoft.Reporting.Map.WebForms.ILayerElement.BelongsToLayer { get; }
    private bool Microsoft.Reporting.Map.WebForms.ILayerElement.BelongsToAllLayers { get; }
    private Layer Microsoft.Reporting.Map.WebForms.ILayerElement.LayerObject { get; private set; }
    internal Symbol(CommonElements common);
    private sealed virtual override MapPoint Microsoft.Reporting.Map.WebForms.ISpatialElement.get_MinimumExtent();
    private sealed virtual override MapPoint Microsoft.Reporting.Map.WebForms.ISpatialElement.get_MaximumExtent();
    public SymbolData get_SymbolData();
    public void set_SymbolData(SymbolData value);
    private sealed virtual override MapPoint[] Microsoft.Reporting.Map.WebForms.ISpatialElement.get_Points();
    public string get_EncodedSymbolData();
    public void set_EncodedSymbolData(string value);
    public string get_FieldData();
    public void set_FieldData(string value);
    [EditorBrowsableAttribute("1")]
protected bool ShouldSerializeOffset();
    [EditorBrowsableAttribute("1")]
protected void ResetOffset();
    public sealed virtual Offset get_Offset();
    public sealed virtual void set_Offset(Offset value);
    public sealed virtual string get_ToolTip();
    public sealed virtual void set_ToolTip(string value);
    public sealed virtual string get_Href();
    public sealed virtual void set_Href(string value);
    public string get_MapAreaAttributes();
    public void set_MapAreaAttributes(string value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public sealed virtual Font get_Font();
    public sealed virtual void set_Font(Font value);
    public sealed virtual Color get_BorderColor();
    public sealed virtual void set_BorderColor(Color value);
    public MapDashStyle get_BorderStyle();
    public void set_BorderStyle(MapDashStyle value);
    public sealed virtual int get_BorderWidth();
    public sealed virtual void set_BorderWidth(int value);
    public sealed virtual Color get_Color();
    public sealed virtual void set_Color(Color value);
    public sealed virtual Color get_TextColor();
    public sealed virtual void set_TextColor(Color value);
    public sealed virtual GradientType get_GradientType();
    public sealed virtual void set_GradientType(GradientType value);
    public sealed virtual Color get_SecondaryColor();
    public sealed virtual void set_SecondaryColor(Color value);
    public sealed virtual MapHatchStyle get_HatchStyle();
    public sealed virtual void set_HatchStyle(MapHatchStyle value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual int get_ShadowOffset();
    public sealed virtual void set_ShadowOffset(int value);
    public int get_TextShadowOffset();
    public void set_TextShadowOffset(int value);
    public bool get_Selected();
    public void set_Selected(bool value);
    public MarkerStyle get_MarkerStyle();
    public void set_MarkerStyle(MarkerStyle value);
    public float get_Width();
    public void set_Width(float value);
    public float get_Height();
    public void set_Height(float value);
    public MapCoordinate get_X();
    public void set_X(MapCoordinate value);
    public MapCoordinate get_Y();
    public void set_Y(MapCoordinate value);
    public ResizeMode get_ImageResizeMode();
    public void set_ImageResizeMode(ResizeMode value);
    public string get_Image();
    public void set_Image(string value);
    public Color get_ImageTransColor();
    public void set_ImageTransColor(Color value);
    public sealed virtual string get_Category();
    public sealed virtual void set_Category(string value);
    public string get_ParentShape();
    public void set_ParentShape(string value);
    public sealed virtual object get_Item(string name);
    public sealed virtual void set_Item(string name, object value);
    internal Shape get_ParentShapeObject();
    internal void set_ParentShapeObject(Shape value);
    internal bool get_UseInternalProperties();
    internal void set_UseInternalProperties(bool value);
    internal Color get_BorderColorInt();
    internal void set_BorderColorInt(Color value);
    internal MapDashStyle get_BorderStyleInt();
    internal void set_BorderStyleInt(MapDashStyle value);
    internal int get_BorderWidthInt();
    internal void set_BorderWidthInt(int value);
    internal Color get_ColorInt();
    internal void set_ColorInt(Color value);
    internal Color get_SecondaryColorInt();
    internal void set_SecondaryColorInt(Color value);
    internal GradientType get_GradientTypeInt();
    internal void set_GradientTypeInt(GradientType value);
    internal MapHatchStyle get_HatchStyleInt();
    internal void set_HatchStyleInt(MapHatchStyle value);
    internal string get_TextInt();
    internal void set_TextInt(string value);
    internal TextAlignment get_TextAlignmentInt();
    internal void set_TextAlignmentInt(TextAlignment value);
    internal string get_ToolTipInt();
    internal void set_ToolTipInt(string value);
    internal Font get_FontInt();
    internal void set_FontInt(Font value);
    internal Color get_TextColorInt();
    internal void set_TextColorInt(Color value);
    internal int get_TextShadowOffsetInt();
    internal void set_TextShadowOffsetInt(int value);
    internal MarkerStyle get_MarkerStyleInt();
    internal void set_MarkerStyleInt(MarkerStyle value);
    internal float get_WidthInt();
    internal void set_WidthInt(float value);
    internal float get_HeightInt();
    internal void set_HeightInt(float value);
    internal int get_ShadowOffsetInt();
    internal void set_ShadowOffsetInt(int value);
    internal string get_ImageInt();
    internal void set_ImageInt(string value);
    internal Color get_ImageTransColorInt();
    internal void set_ImageTransColorInt(Color value);
    internal ResizeMode get_ImageResizeModeInt();
    internal void set_ImageResizeModeInt(ResizeMode value);
    internal bool get_VisibleInt();
    internal void set_VisibleInt(bool value);
    public virtual string ToString();
    public void AddPoints(MapPoint[] points);
    public void ClearSymbolData();
    public void SetPoints(MapPoint[] points);
    public void SetCoordinates(double longitude, double latitude);
    public void SetCoordinates(string longitude, string latitude);
    public void SetCoordinates(string latitudeAndLongitude);
    internal PointF GetCenterPointInContentPixels(MapGraphics g, int pointIndex, Boolean& visible);
    public PointF GetCenterPointInContentPixels(MapGraphics g, int pointIndex);
    internal MapCore GetMapCore();
    private string FieldDataToString();
    internal void FieldDataFromBuffer();
    internal virtual void OnAdded();
    internal virtual void OnRemove();
    protected virtual void OnDispose();
    internal void ApplyPredefinedSymbolAttributes(PredefinedSymbol predefinedSymbol, AffectedSymbolAttributes affectedAttributes);
    internal void InvalidateChildSymbols();
    internal float GetWidth();
    internal void InvalidateRules();
    internal static XamlRenderer CreateXamlRenderer(MarkerStyle markerStyle, Color color, RectangleF rect);
    internal XamlRenderer[] GetXamlRenderers(MapGraphics g);
    internal void ResetCachedXamlRenderers();
    internal static bool IsXamlMarker(MarkerStyle markerStyle);
    internal static RectangleF CalculateXamlMarkerBounds(MarkerStyle markerStyle, PointF centerPoint, float width, float height);
    public sealed virtual bool AddGeometry(SqlGeometry geometry);
    private void AddGeometryRec(SqlGeometry geometry, ArrayList pointsList);
    private void AddSimpleGeometry(SqlGeometry geometry, ArrayList pointsList);
    public sealed virtual bool AddGeography(SqlGeography geography);
    private void AddGeographyRec(SqlGeography geography, ArrayList pointsList);
    internal void AddSimpleGeography(SqlGeography geography, ArrayList pointsList);
    public sealed virtual bool LoadWKT(string wkt);
    public sealed virtual bool AddWKT(string wkt);
    public sealed virtual bool LoadWKB(Byte[] wkb);
    public sealed virtual bool AddWKB(Byte[] wkb);
    public sealed virtual string SaveWKT();
    public sealed virtual Byte[] SaveWKB();
    private void SaveWKBToStream(Stream stream);
    internal GraphicsPath[] GetPaths(MapGraphics g);
    internal void InvalidateCachedBounds();
    internal void ResetCachedPaths();
    private bool IsLabelVisible();
    private RectangleF GetLabelRect(MapGraphics g, RectangleF symbolRect);
    private void RenderText(MapGraphics g);
    internal bool IsRectangleVisible(MapGraphics g, RectangleF clipRect, MapPoint minExtent, MapPoint maxExtent);
    internal Brush GetBackBrush(MapGraphics g, GraphicsPath path);
    internal Pen GetPen();
    internal RectangleF[] DrawImage(MapGraphics g, string imageName, bool drawShadow);
    private Color ApplyLayerTransparency(Color color);
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.IContentElement.IsVisible(MapGraphics g, Layer layer, bool allLayers, RectangleF clipRect);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IContentElement.RenderShadow(MapGraphics g);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IContentElement.RenderBack(MapGraphics g, HotRegionList hotRegions);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IContentElement.RenderFront(MapGraphics g, HotRegionList hotRegions);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IContentElement.RenderText(MapGraphics g, HotRegionList hotRegions);
    private sealed virtual override RectangleF Microsoft.Reporting.Map.WebForms.IContentElement.GetBoundRect(MapGraphics g);
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IToolTipProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetToolTip();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetHref();
    private sealed virtual override string Microsoft.Reporting.Map.WebForms.IImageMapProvider.GetMapAreaAttributes();
    private sealed virtual override object Microsoft.Reporting.Map.WebForms.IImageMapProvider.get_Tag();
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.IImageMapProvider.set_Tag(object value);
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.ISelectable.DrawSelection(MapGraphics g, RectangleF clipRect, bool designTimeSelection);
    private sealed virtual override RectangleF Microsoft.Reporting.Map.WebForms.ISelectable.GetSelectionRectangle(MapGraphics g, RectangleF clipRect);
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ISelectable.IsSelected();
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ISelectable.IsVisible();
    public sealed virtual string get_Layer();
    public sealed virtual void set_Layer(string value);
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ILayerElement.get_BelongsToLayer();
    private sealed virtual override bool Microsoft.Reporting.Map.WebForms.ILayerElement.get_BelongsToAllLayers();
    private sealed virtual override Layer Microsoft.Reporting.Map.WebForms.ILayerElement.get_LayerObject();
    private sealed virtual override void Microsoft.Reporting.Map.WebForms.ILayerElement.set_LayerObject(Layer value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.SymbolCollection : NamedCollection {
    private Symbol Item { get; private set; }
    private Symbol Item { get; private set; }
    public Symbol Item { get; public set; }
    internal SymbolCollection(NamedElement parent, CommonElements common);
    public Symbol Add(string name);
    public int Add(Symbol value);
    public void Remove(Symbol value);
    private Symbol get_Item(int index);
    private void set_Item(int index, Symbol value);
    private Symbol get_Item(string name);
    private void set_Item(string name, Symbol value);
    public Symbol get_Item(object obj);
    public void set_Item(object obj, Symbol value);
    public ArrayList Find(string searchFor, bool ignoreCase, bool exactSearch, bool uniqueOnlyFields);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    protected virtual void OnInsertComplete(int index, object value);
    internal virtual void Invalidate();
}
internal class Microsoft.Reporting.Map.WebForms.SymbolConverter : CollectionItemTypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal class Microsoft.Reporting.Map.WebForms.SymbolData : object {
    private MapPoint[] points;
    private MapPoint minimumExtent;
    private MapPoint maximumExtent;
    public MapPoint[] Points { get; public set; }
    public MapPoint MinimumExtent { get; public set; }
    public MapPoint MaximumExtent { get; public set; }
    internal bool IsEmpty { get; }
    public MapPoint[] get_Points();
    public void set_Points(MapPoint[] value);
    public MapPoint get_MinimumExtent();
    public void set_MinimumExtent(MapPoint value);
    public MapPoint get_MaximumExtent();
    public void set_MaximumExtent(MapPoint value);
    internal bool get_IsEmpty();
    internal void UpdateStoredParameters();
    internal void LoadFromStream(Stream stream);
    internal void SaveToStream(Stream stream);
    internal static string SymbolDataToString(SymbolData symbolData);
    internal static SymbolData SymbolDataFromString(string data);
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.SymbolDataBindingRuleConverter")]
internal class Microsoft.Reporting.Map.WebForms.SymbolDataBindingRule : DataBindingRuleBase {
    private string category;
    private string xCoordinateField;
    private string yCoordinateField;
    private string parentShapeField;
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeSymbolDataBindingRule_BindingField")]
public string BindingField { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeSymbolDataBindingRule_Category")]
[DefaultValueAttribute("")]
public string Category { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeSymbolDataBindingRule_XCoordinateField")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.CoordinateFieldConverter")]
public string XCoordinateField { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeSymbolDataBindingRule_YCoordinateField")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.CoordinateFieldConverter")]
public string YCoordinateField { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeSymbolDataBindingRule_ParentShapeField")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.CoordinateFieldConverter")]
public string ParentShapeField { get; public set; }
    internal SymbolDataBindingRule(CommonElements common);
    public virtual string get_BindingField();
    public virtual void set_BindingField(string value);
    public string get_Category();
    public void set_Category(string value);
    public string get_XCoordinateField();
    public void set_XCoordinateField(string value);
    public string get_YCoordinateField();
    public void set_YCoordinateField(string value);
    public string get_ParentShapeField();
    public void set_ParentShapeField(string value);
    internal virtual void DataBind();
    internal virtual void UpdateDataFields(string dataMember, int dataMemberIndex, StringCollection dataFields);
}
internal class Microsoft.Reporting.Map.WebForms.SymbolDataBindingRuleConverter : CollectionItemTypeConverter {
}
internal class Microsoft.Reporting.Map.WebForms.SymbolFieldPropertyDescriptor : PropertyDescriptor {
    private Field field;
    public Type ComponentType { get; }
    public string DisplayName { get; }
    public bool IsBrowsable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public SymbolFieldPropertyDescriptor(Field field);
    public virtual Type get_ComponentType();
    public virtual string get_DisplayName();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
    public virtual void SetValue(object component, object value);
}
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.SymbolRuleConverter")]
internal class Microsoft.Reporting.Map.WebForms.SymbolRule : RuleBase {
    private PredefinedSymbolCollection predefinedSymbols;
    private bool showInColorSwatch;
    private string symbolField;
    private string category;
    private string showInLegend;
    private string legendText;
    private string fromValue;
    private string toValue;
    private DataGrouping dataGrouping;
    private AffectedSymbolAttributes affectedAttributes;
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeSymbolRule_PredefinedSymbols")]
[DesignerSerializationVisibilityAttribute("2")]
public PredefinedSymbolCollection PredefinedSymbols { get; }
    [SRCategoryAttribute("CategoryAttribute_Misc")]
[SRDescriptionAttribute("DescriptionAttributeSymbolRule_ShowInColorSwatch")]
[DefaultValueAttribute("False")]
public bool ShowInColorSwatch { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeSymbolRule_Name")]
public string Name { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeSymbolRule_SymbolField")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DesignTimeFieldConverter")]
[ParenthesizePropertyNameAttribute("True")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("(Name)")]
public string SymbolField { get; public set; }
    internal string Field { get; internal set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeSymbolRule_Category")]
[DefaultValueAttribute("")]
public string Category { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Legend")]
[SRDescriptionAttribute("DescriptionAttributeSymbolRule_ShowInLegend")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DesignTimeLegendConverter")]
[RefreshPropertiesAttribute("1")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("(none)")]
public string ShowInLegend { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Legend")]
[SRDescriptionAttribute("DescriptionAttributeSymbolRule_LegendText")]
[DefaultValueAttribute("#FROMVALUE{N0} - #TOVALUE{N0}")]
public string LegendText { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeSymbolRule_FromValue")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("")]
public string FromValue { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeSymbolRule_ToValue")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("")]
public string ToValue { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Data")]
[SRDescriptionAttribute("DescriptionAttributeSymbolRule_DataGrouping")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
internal DataGrouping DataGrouping { get; internal set; }
    internal CommonElements Common { get; internal set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
internal AffectedSymbolAttributes AffectedAttributes { get; internal set; }
    internal SymbolRule(CommonElements common);
    public PredefinedSymbolCollection get_PredefinedSymbols();
    public bool get_ShowInColorSwatch();
    public void set_ShowInColorSwatch(bool value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public string get_SymbolField();
    public void set_SymbolField(string value);
    internal virtual string get_Field();
    internal virtual void set_Field(string value);
    public virtual string get_Category();
    public virtual void set_Category(string value);
    public virtual string get_ShowInLegend();
    public virtual void set_ShowInLegend(string value);
    public virtual string get_LegendText();
    public virtual void set_LegendText(string value);
    public virtual string get_FromValue();
    public virtual void set_FromValue(string value);
    public virtual string get_ToValue();
    public virtual void set_ToValue(string value);
    internal virtual DataGrouping get_DataGrouping();
    internal virtual void set_DataGrouping(DataGrouping value);
    public virtual string ToString();
    internal virtual void OnAdded();
    internal void InvalidateRules();
    internal virtual void OnRemove();
    internal void UpdateAutoRanges();
    internal void UpdateColorSwatchAndLegend();
    internal string GetLegendText(Field field, string fromValue, string toValue);
    internal void Apply(Symbol symbol);
    internal virtual Field GetField();
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
    internal AffectedSymbolAttributes get_AffectedAttributes();
    internal void set_AffectedAttributes(AffectedSymbolAttributes value);
    internal void GetRangeFromSymbols(Field field, int intervalCount, Object& fromValue, Object& toValue);
    internal virtual ArrayList GetSortedValues(Field field, object fromValue, object toValue);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.SymbolRuleCollection : NamedCollection {
    private SymbolRule Item { get; private set; }
    private SymbolRule Item { get; private set; }
    public SymbolRule Item { get; public set; }
    internal SymbolRuleCollection(NamedElement parent, CommonElements common);
    public SymbolRule Add(string name);
    public int Add(SymbolRule value);
    public void Remove(SymbolRule value);
    private SymbolRule get_Item(int index);
    private void set_Item(int index, SymbolRule value);
    private SymbolRule get_Item(string name);
    private void set_Item(string name, SymbolRule value);
    public SymbolRule get_Item(object obj);
    public void set_Item(object obj, SymbolRule value);
    internal virtual string GetDefaultElementName(NamedElement el);
    internal virtual string GetElementNameFormat(NamedElement el);
    protected virtual void OnInsertComplete(int index, object value);
}
internal class Microsoft.Reporting.Map.WebForms.SymbolRuleConverter : CollectionItemTypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal class Microsoft.Reporting.Map.WebForms.SymbolRulePropertyDescriptor : PropertyDescriptor {
    private Field field;
    public Type ComponentType { get; }
    public bool IsBrowsable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public SymbolRulePropertyDescriptor(Field field, string name, Attribute[] attrs);
    public virtual Type get_ComponentType();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.Map.WebForms.TempLegendItemsCollection : CollectionBase {
    public LegendItem Item { get; public set; }
    public int Add(LegendItem item);
    public LegendItem get_Item(int index);
    public void set_Item(int index, LegendItem value);
}
internal enum Microsoft.Reporting.Map.WebForms.TextAlignment : Enum {
    public int value__;
    public static TextAlignment Left;
    public static TextAlignment Right;
    public static TextAlignment Top;
    public static TextAlignment Bottom;
    public static TextAlignment Center;
}
internal enum Microsoft.Reporting.Map.WebForms.TextAntiAliasingQuality : Enum {
    public int value__;
    public static TextAntiAliasingQuality Normal;
    public static TextAntiAliasingQuality High;
    public static TextAntiAliasingQuality SystemDefault;
}
internal enum Microsoft.Reporting.Map.WebForms.TextVisibility : Enum {
    public int value__;
    public static TextVisibility Shown;
    public static TextVisibility Hidden;
    public static TextVisibility Auto;
}
internal class Microsoft.Reporting.Map.WebForms.TickMark : CustomTickMark {
    private double interval;
    private double intervalOffset;
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeTickMark_Interval")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DoubleAutoValueConverter")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("не число")]
public double Interval { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeTickMark_IntervalOffset")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.DoubleAutoValueConverter")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("не число")]
public double IntervalOffset { get; public set; }
    public TickMark(object parent);
    public TickMark(object parent, MarkerStyle shape, float length, float width);
    public virtual double get_Interval();
    public virtual void set_Interval(double value);
    public virtual double get_IntervalOffset();
    public virtual void set_IntervalOffset(double value);
}
internal class Microsoft.Reporting.Map.WebForms.TileRequestState : object {
    public HttpWebRequest Request;
    public Image[0...,0...] TileImages;
    public int X;
    public int Y;
    public Rectangle Rectangle;
    public string Url;
    public Layer Layer;
    public MapCore MapCore;
    public bool Timeout;
    public TileRequestState(HttpWebRequest request, string url, Image[0...,0...] tileImages, int x, int y, Rectangle rect, Layer layer, MapCore mapCore);
}
internal enum Microsoft.Reporting.Map.WebForms.TileSystem : Enum {
    public int value__;
    public static TileSystem None;
    public static TileSystem VirtualEarthAerial;
    public static TileSystem VirtualEarthHybrid;
    public static TileSystem VirtualEarthRoad;
}
internal class Microsoft.Reporting.Map.WebForms.Utils : object {
    private static ResourceManager resMng;
    internal static float GoldenRatio;
    internal static ResourceManager ResourceStr { get; }
    private static Utils();
    internal static ResourceManager get_ResourceStr();
    public static string GetStack();
    public static void StartTrace();
    public static void StopTrace();
    [IteratorStateMachineAttribute("Microsoft.Reporting.Map.WebForms.Utils/<GetRectangePoints>d__8")]
internal static IEnumerable`1<PointF> GetRectangePoints(RectangleF rectangle);
    [IteratorStateMachineAttribute("Microsoft.Reporting.Map.WebForms.Utils/<DensifyPoints>d__9")]
internal static IEnumerable`1<PointF> DensifyPoints(IEnumerable`1<PointF> points, double step);
    internal static float GetDistanceSqr(PointF pointA, PointF pointB);
    internal static double GetDistanceSqr(MapPoint pointA, MapPoint pointB);
    internal static double Round(double value, int precision);
    internal static float Deg2Rad(float angleInDegree);
    internal static float Rad2Deg(float angleInRadians);
    internal static float NormalizeAngle(float angle);
    internal static float GetContactPointOffset(SizeF size, float angle);
    internal static float ToGDIAngle(float angle);
    internal static RectangleF NormalizeRectangle(RectangleF boundRect, SizeF insetSize, bool resizeResult);
    internal static string GetImageCustomProperty(Image image, CustomPropertyTag customPropertyTag);
    internal static void SetImageCustomProperty(Image image, CustomPropertyTag customPropertyTag, string text);
}
internal class Microsoft.Reporting.Map.WebForms.ViewCenter : MapObject {
    private PointF point;
    private bool defaultValues;
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeViewCenter_X")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("50")]
public float X { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Values")]
[SRDescriptionAttribute("DescriptionAttributeViewCenter_Y")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("50")]
public float Y { get; public set; }
    internal bool DefaultValues { get; internal set; }
    internal ViewCenter(object parent);
    internal ViewCenter(object parent, float x, float y);
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    internal bool get_DefaultValues();
    internal void set_DefaultValues(bool value);
    public virtual string ToString();
    public PointF ToPoint();
    public static PointF op_Implicit(ViewCenter viewCenter);
    public sealed virtual object Clone();
    internal PointF GetPointF();
}
internal class Microsoft.Reporting.Map.WebForms.ViewCenterConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.Reporting.Map.WebForms.Viewport : Panel {
    private bool autoSize;
    private int contentSize;
    private int contentAutoFitMargin;
    private bool enablePanning;
    private int minimumZoom;
    private int maximumZoom;
    private float zoom;
    private ViewCenter viewCenter;
    private bool optimizeForPanning;
    private bool loadTilesAsynchronously;
    private bool queryVirtualEarthAsynchronously;
    private string errorMessage;
    public int BorderWidth { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public bool Visible { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SerializationVisibilityAttribute("0")]
public int ZOrder { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeViewport_AutoSize")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("True")]
public bool AutoSize { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_MapContent")]
[SRDescriptionAttribute("DescriptionAttributeViewport_ContentSize")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.IntAutoFitConverter")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("0")]
public int ContentSize { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_MapContent")]
[SRDescriptionAttribute("DescriptionAttributeViewport_ContentAutoFitMargin")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("10")]
public int ContentAutoFitMargin { get; public set; }
    [DefaultValueAttribute("0")]
public int BackShadowOffset { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Interactivity")]
[SRDescriptionAttribute("DescriptionAttributeViewport_EnablePanning")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]
public bool EnablePanning { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Zooming")]
[SRDescriptionAttribute("DescriptionAttributeViewport_MinimumZoom")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("20")]
public int MinimumZoom { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Zooming")]
[SRDescriptionAttribute("DescriptionAttributeViewport_MaximumZoom")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("20000")]
public int MaximumZoom { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Zooming")]
[SRDescriptionAttribute("DescriptionAttributeViewport_Zoom")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("100")]
public float Zoom { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_View")]
[SRDescriptionAttribute("DescriptionAttributeViewport_ViewCenter")]
[TypeConverterAttribute("Microsoft.Reporting.Map.WebForms.ViewCenterConverter")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
public ViewCenter ViewCenter { get; public set; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CategoryAttribute_Interactivity")]
[SRDescriptionAttribute("DescriptionAttributeViewport_OptimizeForPanning")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("False")]
public bool OptimizeForPanning { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Interactivity")]
[SRDescriptionAttribute("DescriptionAttributeViewport_LoadTilesAsynchronously")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("False")]
public bool LoadTilesAsynchronously { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Interactivity")]
[SRDescriptionAttribute("DescriptionAttributeViewport_QueryVirtualEarthAsynchronously")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("False")]
public bool QueryVirtualEarthAsynchronously { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_MapContent")]
[SRDescriptionAttribute("DescriptionAttributeViewport_ErrorMessage")]
[DefaultValueAttribute("")]
public string ErrorMessage { get; public set; }
    internal Viewport(CommonElements common);
    public virtual int get_BorderWidth();
    public virtual void set_BorderWidth(int value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public virtual int get_ZOrder();
    public virtual void set_ZOrder(int value);
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    public int get_ContentSize();
    public void set_ContentSize(int value);
    public int get_ContentAutoFitMargin();
    public void set_ContentAutoFitMargin(int value);
    public virtual int get_BackShadowOffset();
    public virtual void set_BackShadowOffset(int value);
    public bool get_EnablePanning();
    public void set_EnablePanning(bool value);
    public int get_MinimumZoom();
    public void set_MinimumZoom(int value);
    public int get_MaximumZoom();
    public void set_MaximumZoom(int value);
    public float get_Zoom();
    public void set_Zoom(float value);
    [EditorBrowsableAttribute("1")]
protected bool ShouldSerializeViewCenter();
    [EditorBrowsableAttribute("1")]
protected void ResetViewCenter();
    public ViewCenter get_ViewCenter();
    public void set_ViewCenter(ViewCenter value);
    public bool get_OptimizeForPanning();
    public void set_OptimizeForPanning(bool value);
    public bool get_LoadTilesAsynchronously();
    public void set_LoadTilesAsynchronously(bool value);
    public bool get_QueryVirtualEarthAsynchronously();
    public void set_QueryVirtualEarthAsynchronously(bool value);
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    public PointF GetViewOrigin();
    internal SizeF GetContentSizeInPixels();
    internal PointF GetContentOffsetInPixels();
    internal void SetContentOffsetInPixels(PointF contentOffset);
    public double GetGroundResolutionAtEquator();
    internal double GetGeographicResolutionAtEquator();
    internal virtual void RenderBorder(MapGraphics g);
    internal virtual void Render(MapGraphics g);
    internal virtual void SizeLocationChanged(SizeLocationChangeInfo info);
    internal virtual object GetDefaultPropertyValue(string prop, object currentValue);
}
internal static class Microsoft.Reporting.Map.WebForms.VirtualEarthTileSystem : object {
    internal static int TileSize;
    internal static double EarthRadius;
    private static double MinLatitude;
    private static double MaxLatitude;
    private static double MinLongitude;
    private static double MaxLongitude;
    private static double Clip(double n, double minValue, double maxValue);
    public static UInt32 MapSize(int levelOfDetail);
    public static UInt32 MapSize(double levelOfDetail);
    public static double GroundResolution(double latitude, int levelOfDetail);
    public static double MapScale(double latitude, int levelOfDetail, int screenDpi);
    public static void LongLatToPixelXY(double longitude, double latitude, int levelOfDetail, Int32& pixelX, Int32& pixelY);
    public static void LongLatToPixelXY(double longitude, double latitude, double levelOfDetail, Double& pixelX, Double& pixelY);
    public static void PixelXYToTileXY(int pixelX, int pixelY, Int32& tileX, Int32& tileY);
    public static string TileXYToQuadKey(int tileX, int tileY, int levelOfDetail);
    public static double LevelOfDetail(double groundResolution);
    internal static ImageryType TileSystemToMapStyle(TileSystem tyleSystem);
}
internal class Microsoft.Reporting.Map.WebForms.XamlLayer : object {
    private PointF origin;
    private GraphicsPath[] paths;
    private Brush[] brushes;
    private Pen[] pens;
    private XamlLayer[] innerLayers;
    private bool disposed;
    public PointF Origin { get; }
    public GraphicsPath[] Paths { get; public set; }
    public Brush[] Brushes { get; public set; }
    public Pen[] Pens { get; public set; }
    public XamlLayer[] InnerLayers { get; public set; }
    public XamlLayer(PointF origin);
    public PointF get_Origin();
    public GraphicsPath[] get_Paths();
    public void set_Paths(GraphicsPath[] value);
    public Brush[] get_Brushes();
    public void set_Brushes(Brush[] value);
    public Pen[] get_Pens();
    public void set_Pens(Pen[] value);
    public XamlLayer[] get_InnerLayers();
    public void set_InnerLayers(XamlLayer[] value);
    public void Render(MapGraphics g);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class Microsoft.Reporting.Map.WebForms.XamlRenderer : object {
    private XmlDocument xaml;
    private bool allowPathGradientTransform;
    private Color[] layerHues;
    private XamlLayer[] layers;
    private bool disposed;
    public XmlDocument Xaml { get; }
    public bool AllowPathGradientTransform { get; public set; }
    private Color[] LayerHues { get; }
    public XamlLayer[] Layers { get; public set; }
    public XamlRenderer(string xamlResource);
    public XmlDocument get_Xaml();
    public bool get_AllowPathGradientTransform();
    public void set_AllowPathGradientTransform(bool value);
    private Color[] get_LayerHues();
    public XamlLayer[] get_Layers();
    public void set_Layers(XamlLayer[] value);
    public void ParseXaml(RectangleF viewportRect, Color[] layerHues);
    private RectangleF GetRootCanvasBoundingRectangle(XmlNode rootCanvas);
    private RectangleF GetCanvasBoundingRectangle(XmlNode canvasNode);
    private XamlLayer ParseCanvas(XmlNode canvasNode, int layerIndex, RectangleF fromBounds, RectangleF toBounds);
    private RectangleF[] TransformSlicedBounds(RectangleF[] slicedBounds, RectangleF fromBounds, RectangleF toBounds);
    private RectangleF[] GetSlicedBounds(XmlNode canvasNode);
    private Brush CreateBrush(XmlNode brushNode, int layerIndex, RectangleF shapeRect, RectangleF originalShapeRect, RectangleF fromBounds, RectangleF toBounds);
    private void ApplyTransform(XmlNode transformNode, RectangleF shapeRect, RectangleF fromBounds, RectangleF toBounds, PointF& startPoint, PointF& endPoint);
    private void ApplyTransform(XmlNode transformNode, RectangleF shapeRect, RectangleF fromBounds, RectangleF toBounds, Brush& brush);
    private void ApplyRelativeTransform(XmlNode transformNode, RectangleF originalShapeRect, RectangleF shapeRect, RectangleF fromBounds, RectangleF toBounds, Brush& brush);
    private void StretchBrushPoints(float stretchFactor, PointF& startPoint, PointF& endPoint);
    private float CalculateStretchFactor(PointF startPoint, PointF endPoint, RectangleF shapeRect);
    private ColorBlend CreateColorBlend(XmlNode gradientStopsNode, int layerIndex, float stretchFactor, bool radialBrush);
    private RectangleF GetStreamGeometryBounds(String[] parts, bool includeOrigin);
    private String[] GetStreamGeometryParts(string streamGeometry);
    private void IntepretStreamGeometry(String[] parts, PointF shapeOffset, float stretchFactorX, float stretchFactorY, bool includeOrigin, RectangleF fromBounds, RectangleF toBounds, GraphicsPath& graphicsPath);
    private PointF RelativeToAbsolute(PointF relativePoint, RectangleF relativeToRect);
    private PointF AbsoluteToRelative(PointF alsolutePoint, RectangleF relativeToRect);
    private XmlNode FindFillNode(XmlNode shapeNode);
    private XmlNode FindStrokeNode(XmlNode shapeNode);
    private XmlNode FindChildNode(XmlNode parent, string childName);
    private int CountChildNodes(XmlNode parentNode);
    private PointF OffsetPoint(PointF point, PointF offset);
    private PointF TransformPoint(PointF point, RectangleF fromBounds, RectangleF toBounds);
    private RectangleF TransformRectangle(RectangleF rect, RectangleF fromBounds, RectangleF toBounds);
    private Color TransformColor(Color color, int layerIndex);
    private PointF ParsePoint(string point);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class Microsoft.Reporting.Map.WebForms.XmlFormatSerializer : SerializerBase {
    public void Serialize(object objectToSerialize, Stream stream);
    public void Serialize(object objectToSerialize, XmlWriter xmlWriter);
    public void Serialize(object objectToSerialize, TextWriter textWriter);
    public void Serialize(object objectToSerialize, string fileName);
    public virtual void Serialize(object objectToSerialize, object writer);
    public void Serialize(object objectToSerialize, XmlDocument xmlDocument);
    private void SerializeObject(object objectToSerialize, object parent, string elementName, XmlNode xmlParentNode, XmlDocument xmlDocument);
    private void SerializeCollection(object objectToSerialize, string elementName, XmlNode xmlParentNode, XmlDocument xmlDocument);
    private void SerializeProperty(object objectToSerialize, object parent, string elementName, XmlNode xmlParentNode, XmlDocument xmlDocument);
    private string GetXmlValue(object obj, object parent, string elementName);
    private void RemoveEmptyChildNodes(XmlNode xmlNode);
    public void Deserialize(object objectToDeserialize, Stream stream);
    public void Deserialize(object objectToDeserialize, XmlReader xmlReader);
    public void Deserialize(object objectToDeserialize, TextReader textReader);
    public void Deserialize(object objectToDeserialize, string fileName);
    public virtual void Deserialize(object objectToDeserialize, object reader);
    protected virtual int DeserializeObject(object objectToDeserialize, object parent, string elementName, XmlNode xmlParentNode, XmlDocument xmlDocument);
    private void SetXmlValue(object obj, string attrName, string attrValue);
}
internal class Microsoft.Reporting.Map.WebForms.ZoomPanel : DockablePanel {
    private static double MaxScaleValue;
    private PanelButton zoomInButton;
    private PanelButton zoomOutButton;
    private bool internalZoomChange;
    private bool fixThumbPoition;
    private ZoomPanelStyle panelStyle;
    private Orientation orientation;
    private ZoomType zoomType;
    private bool zoomButtonsVisible;
    private Color symbolColor;
    private Color symbolBorderColor;
    private Color buttonBorderColor;
    private Color buttonColor;
    private Color thumbBorderColor;
    private Color thumbColor;
    private Color sliderBarBorderColor;
    private Color sliderBarColor;
    private Color tickBorderColor;
    private Color tickColor;
    private int tickCount;
    private bool snapToTickMarks;
    private LinearScale scale;
    private LinearPointer pointer;
    private SizeF absoluteSize;
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeZoomPanel_PanelStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ZoomPanelStyle PanelStyle { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeZoomPanel_Orientation")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Orientation Orientation { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeZoomPanel_Reversed")]
[DefaultValueAttribute("False")]
public bool Reversed { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeZoomPanel_ZoomType")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ZoomType ZoomType { get; public set; }
    [SRCategoryAttribute("CategoryAttribute_Layout")]
[SRDescriptionAttribute("DescriptionAttributeZoomPanel_Dock")]
[NotifyParentPropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public PanelDockStyle Dock { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeZoomPanel_ZoomButtonsVisible")]
[ParenthesizePropertyNameAttribute("True")]
[DefaultValueAttribute("True")]
public bool ZoomButtonsVisible { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeZoomPanel_SymbolColor")]
[DefaultValueAttribute("System.Drawing.Color", "LightGray")]
public Color SymbolColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeZoomPanel_SymbolBorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "DimGray")]
public Color SymbolBorderColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeZoomPanel_ButtonBorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color ButtonBorderColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeZoomPanel_ButtonColor")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
public Color ButtonColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeZoomPanel_ThumbBorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "Gray")]
public Color ThumbBorderColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeZoomPanel_ThumbColor")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
public Color ThumbColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeZoomPanel_SliderBarBorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "Silver")]
public Color SliderBarBorderColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeZoomPanel_SliderBarColor")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
public Color SliderBarColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeZoomPanel_TickBorderColor")]
[DefaultValueAttribute("System.Drawing.Color", "DarkGray")]
public Color TickBorderColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeZoomPanel_TickColor")]
[DefaultValueAttribute("System.Drawing.Color", "White")]
public Color TickColor { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Appearance")]
[SRDescriptionAttribute("DescriptionAttributeZoomPanel_TickCount")]
[DefaultValueAttribute("10")]
public int TickCount { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CategoryAttribute_Behavior")]
[SRDescriptionAttribute("DescriptionAttributeZoomPanel_SnapToTickMarks")]
[DefaultValueAttribute("False")]
public bool SnapToTickMarks { get; public set; }
    public string ToolTip { get; public set; }
    internal LinearScale Scale { get; }
    internal LinearPointer Pointer { get; internal set; }
    internal SizeF AbsoluteSize { get; internal set; }
    internal Position Position { get; }
    internal double MinimumZoom { get; }
    internal double MaximumZoom { get; }
    internal double ZoomLevel { get; internal set; }
    internal CommonElements Common { get; internal set; }
    internal ZoomPanel(CommonElements common);
    public ZoomPanelStyle get_PanelStyle();
    public void set_PanelStyle(ZoomPanelStyle value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public bool get_Reversed();
    public void set_Reversed(bool value);
    public ZoomType get_ZoomType();
    public void set_ZoomType(ZoomType value);
    public virtual PanelDockStyle get_Dock();
    public virtual void set_Dock(PanelDockStyle value);
    public bool get_ZoomButtonsVisible();
    public void set_ZoomButtonsVisible(bool value);
    public Color get_SymbolColor();
    public void set_SymbolColor(Color value);
    public Color get_SymbolBorderColor();
    public void set_SymbolBorderColor(Color value);
    public Color get_ButtonBorderColor();
    public void set_ButtonBorderColor(Color value);
    public Color get_ButtonColor();
    public void set_ButtonColor(Color value);
    public Color get_ThumbBorderColor();
    public void set_ThumbBorderColor(Color value);
    public Color get_ThumbColor();
    public void set_ThumbColor(Color value);
    public Color get_SliderBarBorderColor();
    public void set_SliderBarBorderColor(Color value);
    public Color get_SliderBarColor();
    public void set_SliderBarColor(Color value);
    public Color get_TickBorderColor();
    public void set_TickBorderColor(Color value);
    public Color get_TickColor();
    public void set_TickColor(Color value);
    public int get_TickCount();
    public void set_TickCount(int value);
    public bool get_SnapToTickMarks();
    public void set_SnapToTickMarks(bool value);
    public virtual string get_ToolTip();
    public virtual void set_ToolTip(string value);
    public float GetThumbPosition();
    public void SetThumbPosition(float thumbPosition);
    internal LinearScale get_Scale();
    internal LinearPointer get_Pointer();
    internal void set_Pointer(LinearPointer value);
    internal SizeF get_AbsoluteSize();
    internal void set_AbsoluteSize(SizeF value);
    internal Position get_Position();
    internal double get_MinimumZoom();
    internal double get_MaximumZoom();
    internal double get_ZoomLevel();
    internal void set_ZoomLevel(double value);
    internal virtual CommonElements get_Common();
    internal virtual void set_Common(CommonElements value);
    internal virtual void BeginInit();
    internal virtual void EndInit();
    protected virtual void OnDispose();
    internal Orientation GetOrientation();
    internal bool GetReversed();
    internal void InternalZoomLevelChanged();
    internal void UpdateZoomRange();
    internal double GetSnappingInterval();
    internal double GetNextZoomLevel(double currentZoom, int zoomLevels, bool zoomIn);
    private void ApplyStyle();
    private void ApplyColors();
    private void zoomButtonClickHandler(object sender, EventArgs e);
    private void AdjustAutoOrientationForDocking(PanelDockStyle dockStyle);
    internal double GetZoomLevelFromPointerPosition(double pos);
    internal double GetPointerPositionFromZoomLevel(double zoom);
    private double GetTickMarksInterval(int tickNumber);
    internal Single[] GetPossibleZoomLevels(float currentZoom);
    internal void RenderStaticElements(MapGraphics g);
    private void AdjustScaleSize(MapGraphics g);
    internal void RenderDynamicElements(MapGraphics g);
    internal void RenderDynamicShadows(MapGraphics g);
    internal void RenderStaticShadows(MapGraphics g);
    private void RenderButton(MapGraphics g, PanelButton button);
    internal virtual void Render(MapGraphics g);
    internal virtual object GetDefaultPropertyValue(string prop, object currentValue);
}
internal enum Microsoft.Reporting.Map.WebForms.ZoomPanelStyle : Enum {
    public int value__;
    public static ZoomPanelStyle RectangularButtons;
    public static ZoomPanelStyle CircularButtons;
}
internal enum Microsoft.Reporting.Map.WebForms.ZoomType : Enum {
    public int value__;
    public static ZoomType Linear;
    public static ZoomType Quadratic;
    public static ZoomType Exponential;
}
internal class Microsoft.Reporting.Map.WebForms.ZOrderSort : object {
    private ArrayList collection;
    public ZOrderSort(ArrayList collection);
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
}
internal static class Microsoft.ReportingServices.PublicKeyConstants : object {
    internal static string SQLTestKey;
    internal static string SQLTestKeyToken;
    private static string SQLPublicKey;
    private static string SQLPublicKeyToken;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string AssemblyVersion;
    internal static string AssemblyQualifier;
    internal static string CompanionAppPublicKey;
}
internal static class Microsoft.ReportingServices.TestPublicKeyConstants : object {
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string AssemblyVersion;
    internal static string AssemblyQualifier;
}
