internal static class AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
    public static int MinorVersion;
    public static int BuildVersion;
    public static int SPLevel;
    public static string ProductVersionString;
    public static string ProductNameString;
    public static string SqlEngineUsageMetricsRoleGuidString;
    public static string ProductNameBrandingString;
    public static string LongProductNameBrandingString;
    public static string ProductNameShortcutBrandingString;
    public static string ProductCodeNameString;
    public static string VersionLocationString;
    public static string FileVersionSuffix;
    public static string ProductVersionLocationString;
    public static string VersionHelpKeywordPrefix;
    public static string VersionHelpSettingsToken;
    public static string SetupSupportFolder;
    public static string ProductLicenseFile;
    public static string SqlProductFamilyCode;
    public static string ProductUpdateCategory;
    public static string ProductDiscoveryId;
    public static string SqlInstanceIDPrefix;
    public static string AsInstanceIDPrefix;
    public static string RsInstanceIDPrefix;
    public static string MaxMaintenanceVersion;
    public static UInt32 evalTimeBombValue;
    public static UInt32 currentReleaseTimeBombValue;
    public static string WerEventNameSetupMsi;
    public static string WerEventNameSetupConfig;
    public static string ASUsageMetricsRoleGuidString;
    public static string SqlMajorFileVersion;
    public static string strCopyrightMS;
    public static string MSOLAP_VER;
    public static string strCopyrightITMS;
    public static string VersionHelpNamespace;
    public static string VersionBIDSHelpNamespace;
    public static string VisualStudioShellVersion;
    public static string VisualStudio2012ShellVersion;
}
internal static class Microsoft.ReportDesigner.Design.DTEUtil : object {
    internal static string projectKindVB;
    internal static string projectKindCSharp;
    internal static string projectKindJSharp;
    internal static string projectKindCpp;
    internal static string projectKindWebsite;
    internal static string projectKindRS;
    internal static string projectKindWebApp;
    internal static ProjectKind GetProjectKind(Project project);
    internal static ProjectKind GetCurrentProjectKind(IServiceProvider provider);
    internal static bool IsReportProject(Project project);
    internal static bool IsReportProject(ProjectKind projectKind);
    internal static bool IsWebProject(Project project);
    internal static bool IsWebProject(ProjectKind projectKind);
    internal static bool IsWinFormsProject(Project project);
    internal static bool IsWinFormsProject(ProjectKind projectKind);
    internal static bool IsLangProject(ProjectKind projectKind);
    internal static bool IsWAProject(Project project);
    internal static bool IsWAProject(IVsHierarchy hier);
    internal static Project GetProject(IVsHierarchy hierarchy);
    internal static IVsHierarchy GetIVsHierarchy(Project project);
    internal static IVsProject GetIVsProject(Project project);
    internal static string GetFilePath(ProjectItem projectItem);
    internal static string GetComponentNamespaceName(IComponent component);
}
internal class Microsoft.ReportDesigner.Design.NoCurrentProjectException : Exception {
    internal NoCurrentProjectException(Exception innerException);
}
internal class Microsoft.ReportDesigner.Design.ProjectItemUtil : object {
    public static string RdlFileExtension;
    public static string DefinitionNamespace;
    public static string DesignerNamespace;
    internal static Project GetCurrentProject(IServiceProvider serviceProvider);
    internal static Project GetCurrentProject(IServiceProvider serviceProvider, bool throwException);
    public static string GetEmbeddedResourceName(ProjectItem projectItem);
    internal static ArrayList GetReportProjectItems(IServiceProvider provider);
    internal static ArrayList GetReportProjectItems(ProjectItems projectItems, IServiceProvider provider);
    internal static ArrayList GetReportProjectItems(ProjectItems projectItems, IServiceProvider provider, string extension);
    public static string GetItemPath(ProjectItem projectItem);
    internal static string GetRelativeItemPath(ProjectItem projectItem);
    internal static ProjectItem FindReportByRelativePath(string reportName, IServiceProvider provider);
    public static ProjectItem FindReportByName(string reportName, IServiceProvider provider);
    public static ProjectItem FindProjectItemRecursively(string name, IServiceProvider provider);
    public static ProjectItem FindProjectItemRecursively(string name, ProjectItems projectItems);
    internal static XmlElement LoadXmlProjectItem(ProjectItem projectItem, IServiceProvider provider);
    internal static XmlNodeList LoadXmlReportDataSets(ProjectItem projectItem, IServiceProvider provider, XmlNamespaceManager& nsmgr);
    private static bool IsNullOrWhiteSpace(string value);
    public static void FindProjectFilesWithExtension(ProjectItems projectItems, ArrayList resultList, string extension);
}
internal class Microsoft.Reporting.DataSourceDialog : Form {
    private ReportViewer m_reportViewer;
    private IServiceProvider m_serviceProvider;
    private bool m_isWebProject;
    private IContainer components;
    private DataGridView dataGrid;
    private Label label1;
    private Button okButton;
    private Button cancelButton;
    private DataGridViewTextBoxColumn nameColumn;
    private DataGridViewTextBoxColumn dataSourceColumn;
    public ArrayList DataSources { get; }
    public DataSourceDialog(ReportViewer reportViewer, IServiceProvider serviceProvider, bool isWebProject);
    public ArrayList get_DataSources();
    protected virtual void OnLoad(EventArgs e);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
internal class Microsoft.Reporting.DataSourceIDConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
internal class Microsoft.Reporting.DataSourceIDEditor : UITypeEditor {
    private static int ListBoxMaximumHeight;
    private TypeConverter m_converter;
    private IWindowsFormsEditorService m_editorSvc;
    private bool m_ignoreNextSelectChange;
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider serviceProvider, object value);
    private void OnListBoxKeyDown(object sender, KeyEventArgs e);
    private void OnListBoxSelectedIndexChanged(object sender, EventArgs e);
}
internal static class Microsoft.Reporting.DesignConstants : object {
    public static string DefinitionNamespace;
    public static string DesignerNamespace;
    public static string RdlcFileExtension;
}
internal static class Microsoft.Reporting.DesignerCodeGenerationHelper : object {
    internal static void InsertStatements(IDesignerHost host, CodeTypeDeclaration codeType, CodeMemberMethod method, CodeStatementCollection statements, InsertionPoint insertionPoint);
    internal static void InsertCode(IDesignerHost host, CodeTypeDeclaration codeType, CodeMemberMethod method, string code, InsertionPoint insertionPoint);
    private static void GenerateCodeForStatements(ICodeGenerator codeGenerator, CodeStatementCollection statements, TextWriter textWriter);
    private static CodeClass FindClass(CodeElements codeElements, string className);
    private static CodeFunction FindFunction(CodeClass codeClass, string methodName);
    internal static CodeStatementCollection FindMethodCode(IDesignerHost host, string nameSpaceName, CodeTypeDeclaration codeType, CodeMemberMethod method);
}
internal static class Microsoft.Reporting.DesignUtil : object {
    internal static Type GetType(IServiceProvider serviceProvider, string typeName);
    internal static ITypeResolutionService GetTypeResolutionService(IServiceProvider serviceProvider);
    internal static Attribute GetAttributeOfType(object target, Type attributeType);
    internal static Attribute FindAttributeOfType(AttributeCollection attributes, Type attributeType);
    public static string MakeNameCompliant(string name);
}
internal interface Microsoft.Reporting.ICodeElementFilter {
    public bool Continue { get; }
    public abstract virtual bool MatchFilter(CodeElement codeElement);
    public abstract virtual bool get_Continue();
    public abstract virtual object AddAs(CodeElement codeElement);
}
internal static class Microsoft.Reporting.NativeMethods : object {
    public static int WM_ACTIVATE;
    public static int WA_INACTIVE;
    public static int WM_CANCELMODE;
    public static int WS_EX_TOOLWINDOW;
    public static int WS_BORDER;
    public static int WS_POPUP;
    public static int CS_SAVEBITS;
    public static int GWL_HWNDPARENT;
    public static int QS_KEY;
    public static int QS_MOUSEMOVE;
    public static int QS_MOUSEBUTTON;
    public static int QS_POSTMESSAGE;
    public static int QS_TIMER;
    public static int QS_PAINT;
    public static int QS_SENDMESSAGE;
    public static int QS_HOTKEY;
    public static int QS_MOUSE;
    public static int QS_INPUT;
    public static int QS_ALLINPUT;
    public static bool Succeeded(int hresult);
    public static IntPtr GetWindowLong(HandleRef hWnd, int nIndex);
    public static IntPtr SetWindowLong(HandleRef hWnd, int nIndex, HandleRef dwNewLong);
    public static IntPtr GetCapture();
    public static bool ReleaseCapture();
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, int lParam);
    public static int MsgWaitForMultipleObjects(int nCount, IntPtr pHandles, bool fWaitAll, int dwMilliseconds, int dwWakeMask);
    public static IntPtr GetDC(HandleRef hWnd);
    public static IntPtr SelectObject(HandleRef hDC, HandleRef hObject);
    public static bool DeleteObject(HandleRef hObject);
    public static int ReleaseDC(HandleRef hWnd, HandleRef hDC);
    public static int GetTextExtentPoint32(HandleRef hDC, string str, int len, SIZE size);
    public static int GetTextMetricsW(HandleRef hDC, TEXTMETRIC& lptm);
}
public class Microsoft.Reporting.ReportSelectionConverter : TypeConverter {
    public static string ServerReportValue { get; }
    public static string get_ServerReportValue();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class Microsoft.Reporting.ReportViewerActionList : DesignerActionList {
    private static string CategoryGeneral;
    private string m_reportSelection;
    private ReportViewer m_reportViewer;
    private IServiceProvider m_serviceProvider;
    private bool m_fIsWebProject;
    [TypeConverterAttribute("Microsoft.Reporting.ReportSelectionConverter")]
public string ReportSelection { get; public set; }
    public Uri ReportServerUrl { get; public set; }
    public string ReportPath { get; public set; }
    public string LocalReportPath { get; public set; }
    public string ReportEmbeddedResource { get; public set; }
    public ReportViewer ReportViewer { get; }
    public string ReportName { get; public set; }
    public ReportViewerActionList(ReportViewer reportViewer);
    public virtual DesignerActionItemCollection GetSortedActionItems();
    public string get_ReportSelection();
    public void set_ReportSelection(string value);
    public Uri get_ReportServerUrl();
    public void set_ReportServerUrl(Uri value);
    private bool SetReportServerUrl(object context);
    public string get_ReportPath();
    public void set_ReportPath(string value);
    private bool SetReportPath(object context);
    public string get_LocalReportPath();
    public void set_LocalReportPath(string value);
    private bool SetLocalReportPath(object context);
    public string get_ReportEmbeddedResource();
    public void set_ReportEmbeddedResource(string value);
    private bool SetReportEmbeddedResource(object context);
    public ReportViewer get_ReportViewer();
    public string get_ReportName();
    public void set_ReportName(string value);
    private void SetInitialReportSelection();
    private void ChooseDataSources();
    internal void RebindDataSources();
    private bool SetReportDataSources(object context);
    private void BindReportToControl(string reportName, bool fIsServerReport);
}
internal class Microsoft.Reporting.ReportViewerDataBinder : object {
    public static BindingFlags MethodFilter;
    private IDesignerHost m_host;
    private IServiceProvider m_provider;
    private ReportViewer m_reportViewer;
    private string m_reportViewerName;
    private string m_NameSpaceName;
    private bool m_fIsWebControl;
    private ArrayList m_TableInfos;
    private bool m_fIsServerReport;
    internal ReportViewer ReportViewer { get; }
    internal ReportViewerDataBinder(ReportViewer reportViewer);
    internal ReportViewer get_ReportViewer();
    public void BindReportToControl(string reportDefinitionName);
    public void BindServerReportToControl();
    public void BindReportToWebControl(string reportName);
    internal void MakeReportEmbeddedResource(ProjectItem projectItem);
    internal void BindReportDataSets(ProjectItem projectItem);
    internal void GetReportDataSetInfo(XmlNode xmlDataSet, XmlNamespaceManager nsmgr);
    private void InsertDataSetComponents(Project project);
    private ObjectDataSource FindWebDataSource(string typeName, TableInfo tableInfo);
    private ParameterCollection GetSelectMethodParameters(TableInfo tableInfo);
    private bool CompareParameters(ParameterCollection parameters, TableInfo tableInfo);
    private string GetNewDataSourceName(Type dataSourceType);
    private bool SetReportDataSources(object context);
    private void InsertOnLoadInitialization();
    private CodeMemberMethod CreateOnLoadEventHandler();
    internal static string GetInitializationEventName(object component);
    internal static CodeMemberMethod GetEventHandlerCode(IDesignerHost host, IComponent target, string eventName, bool useNewHandler);
    internal static void GenerateSimpleEventHandler(IDesignerHost host, CodeMemberMethod eventHandlerMethod, CodeStatementCollection beginningHandlerStatements, CodeStatementCollection endHandlerStatements);
    internal void GenerateDataComponentsAutoFill(CodeMemberMethod eventHandlerMethod, CodeStatementCollection& autoFillStatements);
    private void RemoveExistingStatements(CodeStatementCollection newStatements, CodeStatementCollection existingStatements);
    internal static void GenerateDataComponentAutoFill(CodeStatementCollection statements, IComponent dataSet, IComponent dataTableAdapter, string dataTableName, string fillMethodName);
    internal static CodeExpression GenerateInstanceReferenceExpression(object instance);
}
[CompilerGeneratedAttribute]
internal class Microsoft.Reporting.Strings : object {
    public static CultureInfo Culture { get; public set; }
    public static string ActionChooseReport { get; }
    public static string ActionDescChooseReport { get; }
    public static string ActionChooseDataSources { get; }
    public static string ActionDescChooseDataSources { get; }
    public static string ActionSoapEndpoint { get; }
    public static string ActionDescSoapEndpoint { get; }
    public static string ActionReportPath { get; }
    public static string ActionDescReportPath { get; }
    public static string ActionReportEmbeddedResource { get; }
    public static string ActionDescReportEmbeddedResource { get; }
    public static string ActionRebindDataSources { get; }
    public static string ActionDescRebindDataSources { get; }
    public static string ActionNewReport { get; }
    public static string ActionDescNewReport { get; }
    public static string ServerReport { get; }
    public static string NoCurrentProjectException { get; }
    public static string DataSourceIDChromeConverter_NoDataSource { get; }
    public static string DataSourceIDChromeConverter_NewDataSource { get; }
    public static string SetLocalReportDataSources { get; }
    public static string NoCurrentProject { get; }
    public static string FileNotFoundError { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ActionChooseReport();
    public static string get_ActionDescChooseReport();
    public static string get_ActionChooseDataSources();
    public static string get_ActionDescChooseDataSources();
    public static string get_ActionSoapEndpoint();
    public static string get_ActionDescSoapEndpoint();
    public static string get_ActionReportPath();
    public static string get_ActionDescReportPath();
    public static string get_ActionReportEmbeddedResource();
    public static string get_ActionDescReportEmbeddedResource();
    public static string get_ActionRebindDataSources();
    public static string get_ActionDescRebindDataSources();
    public static string get_ActionNewReport();
    public static string get_ActionDescNewReport();
    public static string get_ServerReport();
    public static string get_NoCurrentProjectException();
    public static string get_DataSourceIDChromeConverter_NoDataSource();
    public static string get_DataSourceIDChromeConverter_NewDataSource();
    public static string get_SetLocalReportDataSources();
    public static string get_NoCurrentProject();
    public static string get_FileNotFoundError();
    public static string WinDataFormGen_ToDoComment_AutoFill(string dataTableName);
    public static string CantGetDSType(string dataSourceFullName);
    public static string DeserializationFailed(string message);
}
public class Microsoft.Reporting.WebForms.ReportViewerDesigner : ControlDesigner {
    private DesignerActionListCollection m_actionLists;
    private Dictionary`2<string, TempFile> m_tempFiles;
    private static bool m_hasDisplayedWebConfigError;
    public DesignerActionListCollection ActionLists { get; }
    private static ReportViewerDesigner();
    protected virtual void Dispose(bool disposing);
    protected virtual void PostFilterProperties(IDictionary properties);
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual string GetDesignTimeHtml();
    public virtual void Initialize(IComponent component);
    private void ProcessinInitializeException(Exception e);
    private void SetResourceReference(String& html, string runtimeResourceName, string designerResourceName);
    private void SetColorResourceReference(String& html, string runtimeResourceName, string designerResourceName, Color color);
    private static string CreateReference(string resourceName);
    private bool AddRdlBuildProviderConfig(Configuration config);
    private void BindReportToControl(string reportName);
}
internal class Microsoft.Reporting.WebForms.TempFile : object {
    private string m_fileName;
    public string FileName { get; }
    public TempFile(string resourceName);
    public TempFile(Byte[] fileBytes);
    protected virtual override void Finalize();
    public string get_FileName();
    public sealed virtual void Dispose();
    private void DeleteFile();
    private void CreateTempFile(string resourceName);
    private void CreateTempFile(Byte[] fileBytes);
}
internal static class Microsoft.ReportingServices.HttpHandlerConfig : object {
    private static HttpHandler m_httpHandler;
    private static HttpHandlerConfig();
    private static bool LegacyHandlersSectionContainsHandler(HttpHandlersSection httpHandlersSection);
    private static bool IIS7HandlerNodeIsValid(XmlNode node);
    private static void AddAttribute(XmlDocument doc, XmlNode node, string name, string value);
    private static bool AddValidateIntegratedModeConfigurationNode(XmlNode systemWebServerNode, XmlDocument doc);
    public static void AddIIS7HandlerToConfig(string webConfigPath);
    public static bool AddLegacyHandlerToConfig(Configuration webConfig);
}
internal static class Microsoft.ReportingServices.PublicKeyConstants : object {
    internal static string SQLTestKey;
    internal static string SQLTestKeyToken;
    private static string SQLPublicKey;
    private static string SQLPublicKeyToken;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string AssemblyVersion;
    internal static string AssemblyQualifier;
    internal static string CompanionAppPublicKey;
}
internal static class Microsoft.ReportingServices.TestPublicKeyConstants : object {
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string AssemblyVersion;
    internal static string AssemblyQualifier;
}
