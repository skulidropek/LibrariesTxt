internal static class AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
    public static int MinorVersion;
    public static int BuildVersion;
    public static int SPLevel;
    public static string ProductVersionString;
    public static string ProductNameString;
    public static string SqlEngineUsageMetricsRoleGuidString;
    public static string ProductNameBrandingString;
    public static string LongProductNameBrandingString;
    public static string ProductNameShortcutBrandingString;
    public static string ProductCodeNameString;
    public static string VersionLocationString;
    public static string FileVersionSuffix;
    public static string ProductVersionLocationString;
    public static string VersionHelpKeywordPrefix;
    public static string VersionHelpSettingsToken;
    public static string SetupSupportFolder;
    public static string ProductLicenseFile;
    public static string SqlProductFamilyCode;
    public static string ProductUpdateCategory;
    public static string ProductDiscoveryId;
    public static string SqlInstanceIDPrefix;
    public static string AsInstanceIDPrefix;
    public static string RsInstanceIDPrefix;
    public static string MaxMaintenanceVersion;
    public static UInt32 evalTimeBombValue;
    public static UInt32 currentReleaseTimeBombValue;
    public static string WerEventNameSetupMsi;
    public static string WerEventNameSetupConfig;
    public static string ASUsageMetricsRoleGuidString;
    public static string SqlMajorFileVersion;
    public static string strCopyrightMS;
    public static string MSOLAP_VER;
    public static string strCopyrightITMS;
    public static string VersionHelpNamespace;
    public static string VersionBIDSHelpNamespace;
    public static string VisualStudioShellVersion;
    public static string VisualStudio2012ShellVersion;
}
[CompilerGeneratedAttribute]
internal class Microsoft.Reporting.CommonStrings : object {
    public static CultureInfo Culture { get; public set; }
    public static string Report { get; }
    public static string MissingReportSource { get; }
    public static string ReportNotReady { get; }
    public static string NonClsCompliantException { get; }
    public static string MissingDataSourceCredentials { get; }
    public static string MissingReportServerUrl { get; }
    public static string NotInDrillthrough { get; }
    public static string LocalProcessingErrors { get; }
    public static string LocalModeMissingFullTrustErrors { get; }
    public static string ClientRenderingErrors { get; }
    public static string ToolBarCategoryDesc { get; }
    public static string ReportViewerDescription { get; }
    public static string ProcessingModeDesc { get; }
    public static string LocalReportDesc { get; }
    public static string ServerReportDesc { get; }
    public static string DocMapCollapsedDesc { get; }
    public static string PromptAreaCollapsedDesc { get; }
    public static string ShowParameterPromptsDesc { get; }
    public static string ShowCredentialPromptsDesc { get; }
    public static string ShowToolBarDesc { get; }
    public static string ShowProgressDesc { get; }
    public static string ShowContextMenuDesc { get; }
    public static string ShowDocumentMapButtonDesc { get; }
    public static string ShowPromptAreaButtonDesc { get; }
    public static string ShowPageNavigationDesc { get; }
    public static string ShowBackButtonDesc { get; }
    public static string ShowStopButtonDesc { get; }
    public static string ShowRefreshButtonDesc { get; }
    public static string ShowPrintButtonDesc { get; }
    public static string ShowExportButtonDesc { get; }
    public static string ShowZoomButtonDesc { get; }
    public static string ShowFindButtonDesc { get; }
    public static string PageCountModeDesc { get; }
    public static string ZoomModeDesc { get; }
    public static string ZoomPercentDesc { get; }
    public static string ZoomEventDesc { get; }
    public static string PageNavigationEventDesc { get; }
    public static string ExportEventDesc { get; }
    public static string RefreshEventDesc { get; }
    public static string PrintEventDesc { get; }
    public static string BackEventDesc { get; }
    public static string BookmarkEventDesc { get; }
    public static string ToggleEventDesc { get; }
    public static string DrillthroughEventDesc { get; }
    public static string ViewReportEventDesc { get; }
    public static string SortEventDesc { get; }
    public static string HyperlinkEventDesc { get; }
    public static string DocMapEventDesc { get; }
    public static string RenderCompleteEventDesc { get; }
    public static string RenderBeginEventDesc { get; }
    public static string SearchEventDesc { get; }
    public static string ErrorEventDesc { get; }
    public static string StateChangedEventDesc { get; }
    public static string DisplayNameDesc { get; }
    public static string ReportServerUrlDesc { get; }
    public static string ServerReportPathDesc { get; }
    public static string HistoryIdDesc { get; }
    public static string ServerTimeoutDesc { get; }
    public static string LocalReportPathDesc { get; }
    public static string ReportDataSourcesDesc { get; }
    public static string EnableExternalImagesDesc { get; }
    public static string EnableHyperlinksDesc { get; }
    public static string ReportEmbeddedResourceDesc { get; }
    public static string SubreportProcessingEventDesc { get; }
    public static string ShowReportBodyDesc { get; }
    public static string DocMapWidthDesc { get; }
    public static string AsyncRenderingDesc { get; }
    public static string WaitControlDisplayAfterDesc { get; }
    public static string ShowWaitControlCancelLinkDesc { get; }
    public static string HyperlinkTargetDesc { get; }
    public static string ToolbarDividerColorDesc { get; }
    public static string ToolbarHoverBackColorDesc { get; }
    public static string ToolbarForegroundDisabledColorDesc { get; }
    public static string ToolbarForegroundColor { get; }
    public static string ToolbarHoverForegroundColorDesc { get; }
    public static string HighlightBackgroundColorDesc { get; }
    public static string ContentDispositionDesc { get; }
    public static string DocMapWidthFixedDesc { get; }
    public static string SizeToContentDesc { get; }
    public static string InteractivityPostBackModeDesc { get; }
    public static string PrimaryButtonBackgroundColor { get; }
    public static string PrimaryButtonForegroundColor { get; }
    public static string PrimaryButtonHoverBackgroundColor { get; }
    public static string PrimaryButtonHoverForegroundColor { get; }
    public static string SecondaryButtonBackgroundColor { get; }
    public static string SecondaryButtonForegroundColor { get; }
    public static string SecondaryButtonHoverBackgroundColor { get; }
    public static string SecondaryButtonHoverForegroundColor { get; }
    public static string KeepSessionAliveDesc { get; }
    public static string EnableTelemetryDesc { get; }
    public static string SubmittingDataSourceCredentialsEventDesc { get; }
    public static string SubmittingParameterValuesEventDesc { get; }
    public static string PageSettingsChangedEventDesc { get; }
    public static string KeepSessionAliveException { get; }
    public static string ReportNotReadyException { get; }
    public static string PrintingBegingEventDesc { get; }
    public static string ShowDetailedSubreportMessagesDesc { get; }
    public static string AsyncProgressText { get; }
    public static string CancelLinkText { get; }
    public static string UnsupportedReportServerError { get; }
    public static string MapTileServerConfigurationDesc { get; }
    public static string MapTileServerConfigurationMaxConnectionsDesc { get; }
    public static string MapTileServerConfigurationTimeoutDesc { get; }
    public static string MapTileServerConfigurationAppIDDesc { get; }
    public static string ShowDocMapTooltip { get; }
    public static string HideDocMapTooltip { get; }
    public static string ShowParametersTooltip { get; }
    public static string HideParametersTooltip { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_Report();
    public static string get_MissingReportSource();
    public static string get_ReportNotReady();
    public static string get_NonClsCompliantException();
    public static string get_MissingDataSourceCredentials();
    public static string get_MissingReportServerUrl();
    public static string get_NotInDrillthrough();
    public static string get_LocalProcessingErrors();
    public static string get_LocalModeMissingFullTrustErrors();
    public static string get_ClientRenderingErrors();
    public static string get_ToolBarCategoryDesc();
    public static string get_ReportViewerDescription();
    public static string get_ProcessingModeDesc();
    public static string get_LocalReportDesc();
    public static string get_ServerReportDesc();
    public static string get_DocMapCollapsedDesc();
    public static string get_PromptAreaCollapsedDesc();
    public static string get_ShowParameterPromptsDesc();
    public static string get_ShowCredentialPromptsDesc();
    public static string get_ShowToolBarDesc();
    public static string get_ShowProgressDesc();
    public static string get_ShowContextMenuDesc();
    public static string get_ShowDocumentMapButtonDesc();
    public static string get_ShowPromptAreaButtonDesc();
    public static string get_ShowPageNavigationDesc();
    public static string get_ShowBackButtonDesc();
    public static string get_ShowStopButtonDesc();
    public static string get_ShowRefreshButtonDesc();
    public static string get_ShowPrintButtonDesc();
    public static string get_ShowExportButtonDesc();
    public static string get_ShowZoomButtonDesc();
    public static string get_ShowFindButtonDesc();
    public static string get_PageCountModeDesc();
    public static string get_ZoomModeDesc();
    public static string get_ZoomPercentDesc();
    public static string get_ZoomEventDesc();
    public static string get_PageNavigationEventDesc();
    public static string get_ExportEventDesc();
    public static string get_RefreshEventDesc();
    public static string get_PrintEventDesc();
    public static string get_BackEventDesc();
    public static string get_BookmarkEventDesc();
    public static string get_ToggleEventDesc();
    public static string get_DrillthroughEventDesc();
    public static string get_ViewReportEventDesc();
    public static string get_SortEventDesc();
    public static string get_HyperlinkEventDesc();
    public static string get_DocMapEventDesc();
    public static string get_RenderCompleteEventDesc();
    public static string get_RenderBeginEventDesc();
    public static string get_SearchEventDesc();
    public static string get_ErrorEventDesc();
    public static string get_StateChangedEventDesc();
    public static string get_DisplayNameDesc();
    public static string get_ReportServerUrlDesc();
    public static string get_ServerReportPathDesc();
    public static string get_HistoryIdDesc();
    public static string get_ServerTimeoutDesc();
    public static string get_LocalReportPathDesc();
    public static string get_ReportDataSourcesDesc();
    public static string get_EnableExternalImagesDesc();
    public static string get_EnableHyperlinksDesc();
    public static string get_ReportEmbeddedResourceDesc();
    public static string get_SubreportProcessingEventDesc();
    public static string get_ShowReportBodyDesc();
    public static string get_DocMapWidthDesc();
    public static string get_AsyncRenderingDesc();
    public static string get_WaitControlDisplayAfterDesc();
    public static string get_ShowWaitControlCancelLinkDesc();
    public static string get_HyperlinkTargetDesc();
    public static string get_ToolbarDividerColorDesc();
    public static string get_ToolbarHoverBackColorDesc();
    public static string get_ToolbarForegroundDisabledColorDesc();
    public static string get_ToolbarForegroundColor();
    public static string get_ToolbarHoverForegroundColorDesc();
    public static string get_HighlightBackgroundColorDesc();
    public static string get_ContentDispositionDesc();
    public static string get_DocMapWidthFixedDesc();
    public static string get_SizeToContentDesc();
    public static string get_InteractivityPostBackModeDesc();
    public static string get_PrimaryButtonBackgroundColor();
    public static string get_PrimaryButtonForegroundColor();
    public static string get_PrimaryButtonHoverBackgroundColor();
    public static string get_PrimaryButtonHoverForegroundColor();
    public static string get_SecondaryButtonBackgroundColor();
    public static string get_SecondaryButtonForegroundColor();
    public static string get_SecondaryButtonHoverBackgroundColor();
    public static string get_SecondaryButtonHoverForegroundColor();
    public static string get_KeepSessionAliveDesc();
    public static string get_EnableTelemetryDesc();
    public static string get_SubmittingDataSourceCredentialsEventDesc();
    public static string get_SubmittingParameterValuesEventDesc();
    public static string get_PageSettingsChangedEventDesc();
    public static string get_KeepSessionAliveException();
    public static string get_ReportNotReadyException();
    public static string get_PrintingBegingEventDesc();
    public static string get_ShowDetailedSubreportMessagesDesc();
    public static string get_AsyncProgressText();
    public static string get_CancelLinkText();
    public static string get_UnsupportedReportServerError();
    public static string get_MapTileServerConfigurationDesc();
    public static string get_MapTileServerConfigurationMaxConnectionsDesc();
    public static string get_MapTileServerConfigurationTimeoutDesc();
    public static string get_MapTileServerConfigurationAppIDDesc();
    public static string get_ShowDocMapTooltip();
    public static string get_HideDocMapTooltip();
    public static string get_ShowParametersTooltip();
    public static string get_HideParametersTooltip();
    public static string MissingParameter(string parameterName);
    public static string MissingDataSource(string dataSourceName);
    public static string HyperlinkSecurityError(string reportName);
    public static string ExternalImagesError(string reportName);
    public static string PolicyFileLoadFailed(string policyFileName);
    public static string DeviceInfoInternal(string deviceInfoName);
    public static string ParameterNotFound(string userSpecifiedName);
    public static string ParameterSpecifiedMultipleTimes(string name);
    public static string EstimateTotalPages(int pageCount);
}
internal static class Microsoft.Reporting.ReportViewerUtils : object {
    public static PageSettings DeepClonePageSettings(PageSettings pageSettings);
}
[AttributeUsageAttribute("644")]
internal class Microsoft.Reporting.SRCategoryAttribute : CategoryAttribute {
    private string m_value;
    private string m_key;
    public SRCategoryAttribute(string key);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("900")]
internal class Microsoft.Reporting.SRDescriptionAttribute : DescriptionAttribute {
    private string m_key;
    private bool m_initialized;
    public string Description { get; }
    public SRDescriptionAttribute(string key);
    public virtual string get_Description();
}
internal class Microsoft.Reporting.WinForms.AbortState : object {
    private object m_abortLock;
    private bool m_pendingAbort;
    private HttpWebRequest m_abortableRequest;
    public void AbortRequest();
    public bool RegisterAbortableRequest(HttpWebRequest request);
    public void ClearPendingAbort();
}
internal class Microsoft.Reporting.WinForms.Action : object {
    internal string Id;
    internal float DpiX;
    internal float DpiY;
    internal string Label;
    internal Rectangle Position;
    internal Point[] Points;
    internal ActionShape Shape;
    internal ActionType Type;
    internal int XOffset;
    internal int YOffset;
    private RectangleF m_position;
    private Single[] m_path;
    public string LocalizedTypeName { get; }
    public bool IsChildAction { get; }
    internal Action(string id, string label, ActionType type, ShapeType shape, RectangleF position, Single[] path);
    public string get_LocalizedTypeName();
    internal void SetDpi(float dpiX, float dpiY);
    private ActionShape ConvertRPLShape(ShapeType shape);
    public bool get_IsChildAction();
}
internal class Microsoft.Reporting.WinForms.ActionPoint : object {
    private PointF m_point;
    private Point m_pointInPixels;
    internal Point Point { get; }
    internal ActionPoint(PointF point);
    internal Point get_Point();
    internal void SetDpi(float dpiX, float dpiY);
}
internal enum Microsoft.Reporting.WinForms.ActionShape : Enum {
    public int value__;
    public static ActionShape None;
    public static ActionShape Rectangle;
    public static ActionShape Circle;
    public static ActionShape Polygon;
}
internal enum Microsoft.Reporting.WinForms.ActionType : Enum {
    public int value__;
    public static ActionType None;
    public static ActionType HyperLink;
    public static ActionType DrillThrough;
    public static ActionType BookmarkLink;
    public static ActionType Toggle;
    public static ActionType Sort;
    public static ActionType DocumentMap;
    public static ActionType Search;
    public static ActionType ScrollToBottomOfPage;
}
internal class Microsoft.Reporting.WinForms.AlphaPanel : Panel {
    private IRenderable m_background;
    private double m_opacity;
    private Brush m_alphaFillBrush;
    public AlphaPanel(IRenderable background);
    private void SetAlphaFillBrush();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
}
internal class Microsoft.Reporting.WinForms.AsyncAllStreamsRenderingOperation : AsyncRenderingOperation {
    private CreateAndRegisterStream m_streamCallback;
    public AsyncAllStreamsRenderingOperation(Report report, PageCountMode pageCountMode, string format, string deviceInfo, bool allowInternalRenderers, PostRenderArgs postRenderArgs, CreateAndRegisterStream streamCallback);
    protected virtual void RenderServerReport(ServerReport report);
    private Stream PrintStream();
    protected virtual void RenderLocalReport(LocalReport report);
}
internal class Microsoft.Reporting.WinForms.AsyncLoadOperation : AsyncReportOperation {
    private Stream m_reportDefinition;
    public AsyncLoadOperation(Report report, Stream reportDefinition);
    protected virtual void PerformOperation();
}
internal class Microsoft.Reporting.WinForms.AsyncMainStreamRenderingOperation : AsyncRenderingOperation {
    private Byte[] m_mainStreamBytes;
    private string m_mainStreamMimeType;
    private string m_mainStreamFileNameExt;
    public Byte[] ReportBytes { get; }
    public string FileNameExtension { get; }
    public AsyncMainStreamRenderingOperation(Report report, PageCountMode pageCountMode, string format, string deviceInfo, bool allowInternalRenderers, PostRenderArgs postRenderArgs);
    public Byte[] get_ReportBytes();
    public string get_FileNameExtension();
    protected virtual void RenderServerReport(ServerReport report);
    protected virtual void RenderLocalReport(LocalReport report);
}
internal abstract class Microsoft.Reporting.WinForms.AsyncRenderingOperation : AsyncReportOperation {
    private PageCountMode m_pageCountMode;
    private string m_format;
    private string m_deviceInfo;
    private bool m_allowInternalRenderers;
    private PostRenderArgs m_postRenderArgs;
    protected Warning[] m_warnings;
    public PostRenderArgs PostRenderArgs { get; }
    public Warning[] Warnings { get; }
    protected PageCountMode PageCountMode { get; }
    protected string Format { get; }
    protected string DeviceInfo { get; }
    protected bool AllowInternalRenderers { get; }
    protected AsyncRenderingOperation(Report report, PageCountMode pageCountMode, string format, string deviceInfo, bool allowInternalRenderers, PostRenderArgs postRenderArgs);
    protected abstract virtual void RenderServerReport(ServerReport report);
    protected abstract virtual void RenderLocalReport(LocalReport report);
    protected virtual void PerformOperation();
    public PostRenderArgs get_PostRenderArgs();
    public Warning[] get_Warnings();
    protected PageCountMode get_PageCountMode();
    protected string get_Format();
    protected string get_DeviceInfo();
    protected bool get_AllowInternalRenderers();
    protected NameValueCollection GetBaseServerUrlParameters();
}
internal abstract class Microsoft.Reporting.WinForms.AsyncReportOperation : object {
    private Report m_report;
    [CompilerGeneratedAttribute]
private AsyncCompletedEventHandler Completed;
    public Report Report { get; }
    protected AsyncReportOperation(Report report);
    [CompilerGeneratedAttribute]
public void add_Completed(AsyncCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Completed(AsyncCompletedEventHandler value);
    public void BeginAsyncExecution();
    public void EndAsyncExecution(Exception e);
    public bool Abort();
    public void ClearAbortFlag();
    public Report get_Report();
    protected abstract virtual void PerformOperation();
}
internal class Microsoft.Reporting.WinForms.AsyncWaitControl : AlphaPanel {
    private AsyncWaitMessage m_waitMessage;
    public Font Font { get; public set; }
    public Color BackColor { get; public set; }
    public AsyncWaitControl(IRenderable renderable);
    private void InitializeComponent();
    protected virtual void OnSizeChanged(EventArgs e);
    internal void ApplyCustomResources();
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
}
internal class Microsoft.Reporting.WinForms.AsyncWaitMessage : UserControl {
    private static string SpinningWheelResourceName;
    private Stream m_imageStream;
    private IContainer components;
    private TableLayoutPanel tableLayoutPanel1;
    private Panel SpinningWheelPanel;
    private PictureBox PictSpinningWheel;
    private Label LblLoading;
    public Font Font { get; public set; }
    protected virtual override void Finalize();
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public void CenterToParent();
    protected virtual void OnLoad(EventArgs e);
    internal void ApplyCustomResources();
    private void CenterSpinningWheel();
    protected virtual void OnLayout(LayoutEventArgs levent);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
internal class Microsoft.Reporting.WinForms.AutoWidthComboBox : ComboBox {
    public virtual Size GetPreferredSize(Size proposedSize);
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WinForms.BackEventArgs : CancelEventArgs {
    private Report m_parentReport;
    public Report ParentReport { get; }
    public BackEventArgs(Report parentReport);
    public Report get_ParentReport();
}
public class Microsoft.Reporting.WinForms.BackEventHandler : MulticastDelegate {
    public BackEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BackEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BackEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.WinForms.BookmarkLinkAction : Action {
    internal string ActionLink;
    public BookmarkLinkAction(string id, string label, ShapeType shape, RectangleF position, Single[] path, string action);
    public BookmarkLinkAction(string id, string label, RectangleF position, string action);
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WinForms.BookmarkNavigationEventArgs : CancelEventArgs {
    private string m_bookmarkId;
    public string BookmarkId { get; }
    public BookmarkNavigationEventArgs(string bookmarkId);
    public string get_BookmarkId();
}
public class Microsoft.Reporting.WinForms.BookmarkNavigationEventHandler : MulticastDelegate {
    public BookmarkNavigationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BookmarkNavigationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BookmarkNavigationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.WinForms.BookmarkPoint : ActionPoint {
    internal BookmarkPoint(PointF point);
}
internal class Microsoft.Reporting.WinForms.BooleanControl : ParameterControl {
    private RadioButton m_trueButton;
    private RadioButton m_falseButton;
    public String[] CurrentValue { get; }
    public BooleanControl(ReportParameterInfo paramInfo, ToolTip tooltip, Font font, bool allowQueryExecution, GridLayoutCellDefinition cellDefinition);
    protected virtual void InternalApplyCustomResources();
    public virtual String[] get_CurrentValue();
    protected virtual void CreateChildControls();
    private RadioButton RenderBoolRadioButton(bool isChecked);
    private void SetEnabledState(object sender, EventArgs e);
}
internal class Microsoft.Reporting.WinForms.ClientGDIRenderer : object {
    internal static float MEASUREMENT_DPI;
    internal static float MEASUREMENT_DELTA;
    private RenderingReport m_report;
    private GdiContext m_context;
    internal GdiContext Context { get; }
    internal float PageWidth { get; }
    internal float PageHeight { get; }
    internal RenderingReport Report { get; }
    internal ClientGDIRenderer(Byte[] pageByteArray);
    internal GdiContext get_Context();
    internal float get_PageWidth();
    internal float get_PageHeight();
    internal RenderingReport get_Report();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    internal void DrawToPage(Graphics graphics, bool firstDraw, bool testMode);
    internal void ClearSearchResults();
    internal void Search(string searchText);
    internal bool FindNext();
}
public class Microsoft.Reporting.WinForms.ClientRenderingException : ReportViewerException {
    internal ClientRenderingException(Exception renderingException);
    private ClientRenderingException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Reporting.WinForms.ColumnControlCollection : List`1<ParameterPanel> {
    public ColumnControlCollection(IEnumerable`1<ParameterPanel> panels);
    public void GetMaxWidths(Int32& maxLabelWidth, Int32& maxColumnWidth);
}
internal class Microsoft.Reporting.WinForms.ComboBoxItem : object {
    private ValidValue m_validValue;
    private string m_displayString;
    public string Value { get; }
    public ComboBoxItem(ValidValue validValue, string locNullText);
    public virtual string ToString();
    public string get_Value();
}
[ExtensionAttribute]
internal static class Microsoft.Reporting.WinForms.CreateAndRegisterStreamTypeConverter : object {
    [ExtensionAttribute]
internal static CreateAndRegisterStream ToInnerType(CreateAndRegisterStream callback);
    [ExtensionAttribute]
internal static CreateAndRegisterStream ToOuterType(CreateAndRegisterStream callback);
}
public class Microsoft.Reporting.WinForms.CreateStreamCallback : MulticastDelegate {
    public CreateStreamCallback(object object, IntPtr method);
    public virtual Stream Invoke(string name, string extension, Encoding encoding, string mimeType, bool willSeek);
    public virtual IAsyncResult BeginInvoke(string name, string extension, Encoding encoding, string mimeType, bool willSeek, AsyncCallback callback, object object);
    public virtual Stream EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.WinForms.DataSetExtensionConnection : object {
    private GetSubReportDataSetCallback m_subreportCallback;
    private IEnumerable m_dataSources;
    public bool MustResolveSharedDataSources { get; }
    public DataSetExtensionConnection(GetSubReportDataSetCallback subreportCallback, IEnumerable dataSources);
    public sealed virtual void DataSetRetrieveForReportInstance(ICatalogItemContext itemContext, ParameterInfoCollection reportParameters);
    public sealed virtual void HandleImpersonation(IProcessingDataSource dataSource, DataSourceInfo dataSourceInfo, string datasetName, IDbConnection connection, Action afterImpersonationAction);
    public sealed virtual IDbConnection OpenDataSourceExtensionConnection(IProcessingDataSource dataSource, string connectionString, DataSourceInfo dataSourceInfo, string datasetName);
    public sealed virtual void CloseConnection(IDbConnection connection, IProcessingDataSource dataSourceObj, DataSourceInfo dataSourceInfo);
    public sealed virtual void CloseConnectionWithoutPool(IDbConnection connection);
    public sealed virtual bool get_MustResolveSharedDataSources();
}
internal class Microsoft.Reporting.WinForms.DataSourceCollectionWrapper : object {
    private ReportDataSourceCollection m_dsCollection;
    internal DataSourceCollectionWrapper(ReportDataSourceCollection dsCollection);
    [IteratorStateMachineAttribute("Microsoft.Reporting.WinForms.DataSourceCollectionWrapper/<System-Collections-IEnumerable-GetEnumerator>d__1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Reporting.WinForms.DataSourceCredentials : object {
    private string m_name;
    private string m_userID;
    private string m_password;
    public string Name { get; public set; }
    public string UserId { get; public set; }
    public string Password { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_UserId();
    public void set_UserId(string value);
    public string get_Password();
    public void set_Password(string value);
    internal DataSourceCredentials ToSoapCredentials();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Reporting.WinForms.DataSourceCredentialsCollection : Collection`1<DataSourceCredentials> {
    public DataSourceCredentials Item { get; }
    public DataSourceCredentials get_Item(string name);
}
internal class Microsoft.Reporting.WinForms.DataSourcePromptControl : object {
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    private ParameterPanel m_promptPanel;
    private ParameterPanel m_userNamePanel;
    private ParameterPanel m_passwordPanel;
    private TextBox m_userName;
    private TextBox m_password;
    private ReportDataSourceInfo m_dsInfo;
    public ReportDataSourceInfo DataSourceInfo { get; }
    public string UserName { get; }
    public string Password { get; }
    public ParameterPanel PromptPanel { get; }
    public ParameterPanel UserNamePanel { get; }
    public ParameterPanel PasswordPanel { get; }
    public DataSourcePromptControl(ReportDataSourceInfo dsInfo, ToolTip toolTip);
    internal void ApplyCustomResources();
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    private void OnChanged(object sender, EventArgs e);
    public ReportDataSourceInfo get_DataSourceInfo();
    public string get_UserName();
    public string get_Password();
    public ParameterPanel get_PromptPanel();
    public ParameterPanel get_UserNamePanel();
    public ParameterPanel get_PasswordPanel();
    public bool Validate(Control owner);
    private TextBox CreateTextBox();
    private ParameterPanel CreatePanelForTextBox(TextBox textBox);
}
internal class Microsoft.Reporting.WinForms.DataSourceWrapper : object {
    private ReportDataSource m_ds;
    private string Microsoft.Reporting.IDataSource.Name { get; }
    private object Microsoft.Reporting.IDataSource.Value { get; }
    internal DataSourceWrapper(ReportDataSource ds);
    private sealed virtual override string Microsoft.Reporting.IDataSource.get_Name();
    private sealed virtual override object Microsoft.Reporting.IDataSource.get_Value();
}
internal class Microsoft.Reporting.WinForms.DateControl : ParameterControl {
    private bool m_changed;
    private TextBoxWithImage m_textbox;
    private GenericDropDown m_dropDown;
    private MonthCalendar m_monthCalendar;
    private TimeSpan m_savedTime;
    private Nullable`1<TimeSpan> m_savedTimeOffset;
    private TimeSpan _Midnight;
    protected int MinimumRequiredHeight { get; }
    public String[] CurrentValue { get; }
    public DateControl(ReportParameterInfo paramInfo, ToolTip tooltip, Font font, bool allowQueryExecution, GridLayoutCellDefinition cellDefinition);
    protected virtual void CreateChildControls();
    protected virtual void OnRightToLeftChanged(EventArgs e);
    protected virtual void InternalApplyCustomResources();
    private void m_monthCalendar_KeyPress(object sender, KeyPressEventArgs e);
    private void m_monthCalendar_DateSelected(object sender, EventArgs e);
    private void OnDateSelected();
    private void SetEnabledState(object sender, EventArgs e);
    protected virtual int get_MinimumRequiredHeight();
    private void UpdateSummaryStringDisplay();
    private void SetTextBoxValue(DateTime date);
    private void SetTextBoxValue(DateTimeOffset date);
    public virtual String[] get_CurrentValue();
    private void OnDropDown(object sender, EventArgs e);
    private bool IsSelectableDate(DateTime testDate);
    private void m_monthCalendar_MouseWheel(object sender, MouseEventArgs e);
    private void m_textbox_TextChanged(object sender, EventArgs e);
    private void OnDateControlValidated(object sender, EventArgs e);
    private void NotifyIfValueChanged();
}
public enum Microsoft.Reporting.WinForms.DisplayMode : Enum {
    public int value__;
    public static DisplayMode Normal;
    public static DisplayMode PrintLayout;
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WinForms.DocumentMapNavigationEventArgs : CancelEventArgs {
    private string m_docMapID;
    public string DocumentMapId { get; }
    public DocumentMapNavigationEventArgs(string docMapID);
    public string get_DocumentMapId();
}
public class Microsoft.Reporting.WinForms.DocumentMapNavigationEventHandler : MulticastDelegate {
    public DocumentMapNavigationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DocumentMapNavigationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DocumentMapNavigationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Reporting.WinForms.DocumentMapNode : object {
    private string m_label;
    private string m_id;
    private IList`1<DocumentMapNode> m_children;
    public string Label { get; }
    public string Id { get; }
    public IList`1<DocumentMapNode> Children { get; }
    internal DocumentMapNode(string label, string id, DocumentMapNode[] children);
    internal static DocumentMapNode CreateTree(IDocumentMap docMap, string rootName);
    internal static DocumentMapNode CreateTree(DocumentMapNode serverNode, string rootName);
    internal static DocumentMapNode CreateNode(IDocumentMap docMap);
    private static void CollapseTopLevel(Stack`1<NodeStackEntry> nodeStack, List`1<DocumentMapNode> workspace);
    private static DocumentMapNode FromOnDemandNode(OnDemandDocumentMapNode node);
    internal static DocumentMapNode CreateNode(DocumentMapNode serverNode);
    public string get_Label();
    public string get_Id();
    public IList`1<DocumentMapNode> get_Children();
    private void SetNodeChildren(IList`1<DocumentMapNode> children);
}
internal abstract class Microsoft.Reporting.WinForms.DrawablePage : object {
    public ReportActions Actions { get; }
    public Dictionary`2<string, BookmarkPoint> Bookmarks { get; }
    public ReportActions ToolTips { get; }
    public bool NeedsFrame { get; }
    public int ExternalMargin { get; }
    public bool DrawInPixels { get; }
    public bool IsRequireFullRedraw { get; }
    public abstract virtual void Draw(Graphics g, PointF scrollOffset, bool testMode);
    public abstract virtual void GetPageSize(Graphics g, Single& width, Single& height);
    public abstract virtual ReportActions get_Actions();
    public abstract virtual Dictionary`2<string, BookmarkPoint> get_Bookmarks();
    public abstract virtual ReportActions get_ToolTips();
    public abstract virtual void BuildInteractivityInfo(Graphics g);
    public abstract virtual bool get_NeedsFrame();
    public abstract virtual int get_ExternalMargin();
    public abstract virtual bool get_DrawInPixels();
    public abstract virtual bool get_IsRequireFullRedraw();
}
internal class Microsoft.Reporting.WinForms.DrillthroughAction : Action {
    internal string ReportId;
    public DrillthroughAction(string id, string label, ShapeType shape, RectangleF position, Single[] path, string reportId);
    public DrillthroughAction(string id, string label, RectangleF position, string reportId);
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WinForms.DrillthroughEventArgs : CancelEventArgs {
    private string m_reportPath;
    private Report m_report;
    public string ReportPath { get; }
    public Report Report { get; }
    public DrillthroughEventArgs(string reportPath, Report targetReport);
    public string get_ReportPath();
    public Report get_Report();
}
public class Microsoft.Reporting.WinForms.DrillthroughEventHandler : MulticastDelegate {
    public DrillthroughEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DrillthroughEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DrillthroughEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.WinForms.DropDownResizeGlyph : Control {
    private Point m_mouseLocation;
    private bool m_resize;
    private Size m_minimumSize;
    [CompilerGeneratedAttribute]
private EventHandler`1<ResizeEventArgs> Inflate;
    private IContainer components;
    private ImageList imageList;
    private Rectangle ResizableImageArea { get; }
    [CompilerGeneratedAttribute]
internal void add_Inflate(EventHandler`1<ResizeEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_Inflate(EventHandler`1<ResizeEventArgs> value);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    private void SetResizeCursor(MouseEventArgs e);
    private Rectangle get_ResizableImageArea();
    protected virtual void OnPaint(PaintEventArgs pe);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
internal class Microsoft.Reporting.WinForms.ExecutionInfo : object {
    [CompilerGeneratedAttribute]
private string <ExecutionID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HistoryID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReportPath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumPages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasDocumentMap>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AutoRefreshInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CredentialsRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParametersRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSnapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedsProcessing>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ExpirationDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowQueryExecution>k__BackingField;
    [CompilerGeneratedAttribute]
private PageCountMode <PageCountMode>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportDataSourceInfoCollection <DataSourcePrompts>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportParameterInfoCollection <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ReportPageSettings <ReportPageSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ParametersPaneLayout <ParametersPaneLayout>k__BackingField;
    public string ExecutionID { get; private set; }
    public string HistoryID { get; private set; }
    public string ReportPath { get; private set; }
    public int NumPages { get; public set; }
    public bool HasDocumentMap { get; private set; }
    public int AutoRefreshInterval { get; private set; }
    public bool CredentialsRequired { get; private set; }
    public bool ParametersRequired { get; private set; }
    public bool HasSnapshot { get; private set; }
    public bool NeedsProcessing { get; private set; }
    public DateTime ExpirationDateTime { get; private set; }
    public bool AllowQueryExecution { get; private set; }
    public PageCountMode PageCountMode { get; private set; }
    public ReportDataSourceInfoCollection DataSourcePrompts { get; private set; }
    public ReportParameterInfoCollection Parameters { get; private set; }
    public ReportPageSettings ReportPageSettings { get; private set; }
    public ParametersPaneLayout ParametersPaneLayout { get; private set; }
    public ExecutionInfo(string executionId, string historyId, string reportPath, int numPages, bool hasDocumentMap, int autoRefreshInterval, bool credentialsRequired, bool parametersRequired, bool hasSnapshot, bool needsProcessing, DateTime expirationDateTime, bool allowQueryExecution, PageCountMode pageCountMode, ReportDataSourceInfoCollection dataSourcePrompts, ReportParameterInfoCollection parameters, ReportPageSettings pageSettings, ParametersPaneLayout parametersPaneLayout);
    [CompilerGeneratedAttribute]
public string get_ExecutionID();
    [CompilerGeneratedAttribute]
private void set_ExecutionID(string value);
    [CompilerGeneratedAttribute]
public string get_HistoryID();
    [CompilerGeneratedAttribute]
private void set_HistoryID(string value);
    [CompilerGeneratedAttribute]
public string get_ReportPath();
    [CompilerGeneratedAttribute]
private void set_ReportPath(string value);
    [CompilerGeneratedAttribute]
public int get_NumPages();
    [CompilerGeneratedAttribute]
public void set_NumPages(int value);
    [CompilerGeneratedAttribute]
public bool get_HasDocumentMap();
    [CompilerGeneratedAttribute]
private void set_HasDocumentMap(bool value);
    [CompilerGeneratedAttribute]
public int get_AutoRefreshInterval();
    [CompilerGeneratedAttribute]
private void set_AutoRefreshInterval(int value);
    [CompilerGeneratedAttribute]
public bool get_CredentialsRequired();
    [CompilerGeneratedAttribute]
private void set_CredentialsRequired(bool value);
    [CompilerGeneratedAttribute]
public bool get_ParametersRequired();
    [CompilerGeneratedAttribute]
private void set_ParametersRequired(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasSnapshot();
    [CompilerGeneratedAttribute]
private void set_HasSnapshot(bool value);
    [CompilerGeneratedAttribute]
public bool get_NeedsProcessing();
    [CompilerGeneratedAttribute]
private void set_NeedsProcessing(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_ExpirationDateTime();
    [CompilerGeneratedAttribute]
private void set_ExpirationDateTime(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_AllowQueryExecution();
    [CompilerGeneratedAttribute]
private void set_AllowQueryExecution(bool value);
    [CompilerGeneratedAttribute]
public PageCountMode get_PageCountMode();
    [CompilerGeneratedAttribute]
private void set_PageCountMode(PageCountMode value);
    [CompilerGeneratedAttribute]
public ReportDataSourceInfoCollection get_DataSourcePrompts();
    [CompilerGeneratedAttribute]
private void set_DataSourcePrompts(ReportDataSourceInfoCollection value);
    [CompilerGeneratedAttribute]
public ReportParameterInfoCollection get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(ReportParameterInfoCollection value);
    [CompilerGeneratedAttribute]
public ReportPageSettings get_ReportPageSettings();
    [CompilerGeneratedAttribute]
private void set_ReportPageSettings(ReportPageSettings value);
    [CompilerGeneratedAttribute]
public ParametersPaneLayout get_ParametersPaneLayout();
    [CompilerGeneratedAttribute]
private void set_ParametersPaneLayout(ParametersPaneLayout value);
}
internal class Microsoft.Reporting.WinForms.ExportDialog : Form {
    private Button cancelButton;
    private Label exportLabel;
    private Container components;
    private ReportViewer m_viewerControl;
    private RenderingExtension m_format;
    private string m_deviceInfo;
    private string m_fileName;
    internal ExportDialog(ReportViewer viewer, RenderingExtension extension, string deviceInfo, string fileName);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    protected virtual void OnLoad(EventArgs e);
    private void ProcessOnLoadException(Exception ex);
    private void CancelButton_Click(object sender, EventArgs e);
    private void OnExportCompleteUI(object sender, AsyncCompletedEventArgs args);
    private void OnExportComplete(object sender, AsyncCompletedEventArgs args);
    private Stream PromptFileName(string fileExtension);
    private string ReplaceReservedCharacters(string original);
}
public class Microsoft.Reporting.WinForms.ExportEventHandler : MulticastDelegate {
    public ExportEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ReportExportEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ReportExportEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.WinForms.ExtensionSettings : object {
    private string m_extensionName;
    private NameValueCollection m_extensionParameters;
    public NameValueCollection Settings { get; }
    public ExtensionSettings(string name, NameValueCollection extensionParameters);
    public NameValueCollection get_Settings();
    public ExtensionSettings ConvertSettings();
}
internal class Microsoft.Reporting.WinForms.FileManager : object {
    private List`1<FileManagerStream> m_pages;
    private List`1<FileManagerStream> m_nonRegisteredStreams;
    private FileManagerStatus m_status;
    private ManualResetEvent m_waitingForNextPage;
    private object m_lockObject;
    private CreateFailureFlags m_createFailures;
    public FileManagerStatus Status { get; public set; }
    public int Count { get; }
    public FileManagerStatus get_Status();
    public void set_Status(FileManagerStatus value);
    public int get_Count();
    public void Clean();
    private void DeleteStream(FileManagerStream s);
    public Stream CreatePage(bool register);
    public Stream Get(int page);
    private FileManagerStream CreateStream();
    private void WaitForNextPage();
}
internal enum Microsoft.Reporting.WinForms.FileManagerStatus : Enum {
    public int value__;
    public static FileManagerStatus NotStarted;
    public static FileManagerStatus Aborted;
    public static FileManagerStatus Complete;
    public static FileManagerStatus InProgress;
}
internal abstract class Microsoft.Reporting.WinForms.FileManagerStream : object {
    private Stream m_stream;
    public Stream Stream { get; protected set; }
    public Stream get_Stream();
    protected void set_Stream(Stream value);
    public abstract virtual void Delete();
}
internal class Microsoft.Reporting.WinForms.FixedHeaderItem : object {
    internal List`1<Action> Actions;
    internal RectangleF Bounds;
    internal RenderingItemContainer Container;
    internal bool FoundActions;
    internal LayoutType Layout;
    internal List`1<RenderingItem> RenderingItems;
    internal FixedHeaderItem(RenderingItemContainer container, RectangleF bounds, LayoutType layout);
    internal void AddAction(Action action);
}
internal class Microsoft.Reporting.WinForms.GdiContext : object {
    private static ResourceManager m_imageResourceManager;
    internal static Dictionary`2<string, Bitmap> m_imageResources;
    private Graphics m_graphics;
    private GdiWriter m_gdiWriter;
    private FontCache m_fontCache;
    internal string SearchText;
    internal List`1<SearchMatch> SearchMatches;
    internal int SearchMatchIndex;
    internal int TextRunIndexHitStart;
    internal int TextRunIndexHitEnd;
    internal bool SearchHit;
    internal Dictionary`2<string, Image> SharedImages;
    internal RPLReport RplReport;
    internal RenderingReport RenderingReport;
    private bool m_firstDraw;
    private bool m_testMode;
    internal static Dictionary`2<string, Bitmap> ImageResources { get; }
    internal Graphics Graphics { get; internal set; }
    internal GdiWriter GdiWriter { get; }
    internal FontCache FontCache { get; }
    internal bool TestMode { get; internal set; }
    internal bool FirstDraw { get; internal set; }
    private static GdiContext();
    internal static Dictionary`2<string, Bitmap> get_ImageResources();
    internal Graphics get_Graphics();
    internal void set_Graphics(Graphics value);
    internal GdiWriter get_GdiWriter();
    internal FontCache get_FontCache();
    internal bool get_TestMode();
    internal void set_TestMode(bool value);
    internal bool get_FirstDraw();
    internal void set_FirstDraw(bool value);
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private static ResourceManager InitializeResourceManager();
    private static Dictionary`2<string, Bitmap> InitializeImageResources();
    internal static void CalculateUsableReportItemRectangle(RPLElementProps properties, RectangleF& position);
    internal static RectangleF GetMeasurementRectangle(RPLMeasurement measurement, RectangleF bounds);
    internal static Color GetStylePropertyValueColor(RPLElementProps properties, byte style);
    internal static float GetStylePropertyValueSizeMM(RPLElementProps properties, byte style, float value);
    internal static float GetStylePropertyValueSizeMM(RPLElementProps properties, byte style);
    internal static float GetStylePropertyValueSizePT(RPLElementProps properties, byte style);
    internal static float GetStylePropertyValueSizePT(RPLElementProps properties, byte style, Boolean& fromInstance);
    internal static string GetStylePropertyValueString(RPLElementProps properties, byte style);
    internal static string GetStylePropertyValueString(RPLElementProps properties, byte style, Boolean& fromInstance);
    internal bool IsOnScreen(RectangleF bounds);
    private static void GetReportItemPaddingStyleMM(RPLElementProps instanceProperties, Single& paddingLeft, Single& paddingTop, Single& paddingRight, Single& paddingBottom);
}
internal class Microsoft.Reporting.WinForms.GdiPage : DrawablePage {
    private List`1<int> m_sortedActionItemIndices;
    private ClientGDIRenderer m_gdiRenderer;
    private List`1<FixedHeaderItem> m_fixedHeaders;
    private ReportActions m_actions;
    private Dictionary`2<string, BookmarkPoint> m_bookmarks;
    private ReportActions m_toolTips;
    private bool m_allActionsInitialized;
    private bool m_rplActionsInitialized;
    private int m_actionIndex;
    private bool m_firstDraw;
    public ReportActions Actions { get; }
    public Dictionary`2<string, BookmarkPoint> Bookmarks { get; }
    public ReportActions ToolTips { get; }
    public bool NeedsFrame { get; }
    public int ExternalMargin { get; }
    public bool DrawInPixels { get; }
    public bool IsRequireFullRedraw { get; }
    public int ActionIndex { get; public set; }
    public Action CurrentAction { get; }
    public List`1<int> SortedActionItemIndices { get; }
    public GdiPage(ClientGDIRenderer renderer);
    public virtual void Draw(Graphics g, PointF scrollOffset, bool testMode);
    public virtual void GetPageSize(Graphics g, Single& width, Single& height);
    public virtual void BuildInteractivityInfo(Graphics g);
    public virtual ReportActions get_Actions();
    public virtual Dictionary`2<string, BookmarkPoint> get_Bookmarks();
    public virtual ReportActions get_ToolTips();
    public virtual bool get_NeedsFrame();
    public virtual int get_ExternalMargin();
    public virtual bool get_DrawInPixels();
    public virtual bool get_IsRequireFullRedraw();
    public int get_ActionIndex();
    public void set_ActionIndex(int value);
    public Action get_CurrentAction();
    public List`1<int> get_SortedActionItemIndices();
    private void RenderVisibleActionItem(Graphics g);
    private void RenderFixedHeaders(Graphics g, PointF offset);
    private void InitializeInteractivity(Graphics g, int actionsCount);
}
internal class Microsoft.Reporting.WinForms.GdiWriter : WriterBase {
    private Graphics m_graphics;
    internal Graphics Graphics { get; internal set; }
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    internal Graphics get_Graphics();
    internal void set_Graphics(Graphics value);
    internal virtual void DrawLine(Color color, float size, BorderStyles style, float x1, float y1, float x2, float y2);
    internal virtual void DrawRectangle(Color color, float size, BorderStyles style, RectangleF rectangle);
    internal virtual void FillPolygon(Color color, PointF[] polygon);
    internal virtual float ConvertToMillimeters(int pixels);
    internal virtual int ConvertToPixels(float mm);
}
internal static class Microsoft.Reporting.WinForms.Global : object {
    public static int ToPixels(double inMM, double dpi);
    public static float ToMillimeters(int pixels, double dpi);
    public static float ToMillimeters(float pixels, double dpi);
    public static int InchToPixels(float value, float dpi);
}
internal class Microsoft.Reporting.WinForms.GridLayoutCellDefinition : object {
    public int Row;
    public int Column;
    public string ParameterName;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.WinForms.GridLayoutCellDefinitionCollection : ReadOnlyCollection`1<GridLayoutCellDefinition> {
    private Dictionary`2<Index, GridLayoutCellDefinition> m_cellDefintionsByIndex;
    private Dictionary`2<string, GridLayoutCellDefinition> m_cellDefintionsByName;
    public string Item { get; }
    internal GridLayoutCellDefinitionCollection(IList`1<GridLayoutCellDefinition> cellDefinitions);
    public string get_Item(int rowIndex, int colIndex);
    public GridLayoutCellDefinition GetByName(string parameterName);
}
internal class Microsoft.Reporting.WinForms.GridLayoutDefinition : object {
    private int m_numberOfColumns;
    private int m_numberOfRows;
    private GridLayoutCellDefinitionCollection m_cellDefinitions;
    private Boolean[] m_rowsVisibility;
    private Boolean[] m_columnsVisibility;
    public int NumberOfColumns { get; }
    public int NumberOfRows { get; }
    public GridLayoutCellDefinitionCollection CellDefinitions { get; }
    public Boolean[] RowsVisibility { get; }
    public Boolean[] ColumnsVisibility { get; }
    internal GridLayoutDefinition(GridLayoutCellDefinitionCollection cellDefs, int numRows, int numColumns, ReportParameterInfoCollection paramInfoCollection);
    public int get_NumberOfColumns();
    public int get_NumberOfRows();
    public GridLayoutCellDefinitionCollection get_CellDefinitions();
    public Boolean[] get_RowsVisibility();
    public Boolean[] get_ColumnsVisibility();
    private bool IsParamVisible(ReportParameterInfo param);
}
internal class Microsoft.Reporting.WinForms.HyperLinkAction : Action {
    internal string Url;
    public HyperLinkAction(string id, string label, ShapeType shape, RectangleF position, Single[] path, string url);
    public HyperLinkAction(string id, string label, RectangleF position, string url);
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WinForms.HyperlinkEventArgs : CancelEventArgs {
    private string m_hyperlink;
    public string Hyperlink { get; }
    internal HyperlinkEventArgs(string hyperlink);
    public string get_Hyperlink();
}
public class Microsoft.Reporting.WinForms.HyperlinkEventHandler : MulticastDelegate {
    public HyperlinkEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, HyperlinkEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, HyperlinkEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[CompilerGeneratedAttribute]
internal class Microsoft.Reporting.WinForms.ImageRendererRes : object {
    public static CultureInfo Culture { get; public set; }
    public static string IMAGELocalizedName { get; }
    public static string PDFLocalizedName { get; }
    public static string RGDILocalizedName { get; }
    public static string Win32ErrorInfo { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_IMAGELocalizedName();
    public static string get_PDFLocalizedName();
    public static string get_RGDILocalizedName();
    public static string get_Win32ErrorInfo();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.DataSourceCredentials : object {
    private string dataSourceNameField;
    private string userNameField;
    private string passwordField;
    public string DataSourceName { get; public set; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public string get_DataSourceName();
    public void set_DataSourceName(string value);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_Password();
    public void set_Password(string value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.DataSourcePrompt : object {
    private string nameField;
    private string dataSourceIDField;
    private string promptField;
    public string Name { get; public set; }
    public string DataSourceID { get; public set; }
    public string Prompt { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_DataSourceID();
    public void set_DataSourceID(string value);
    public string get_Prompt();
    public void set_Prompt(string value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.DeliverReportItemCompletedEventHandler : MulticastDelegate {
    public DeliverReportItemCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AsyncCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AsyncCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.DocumentMapNode : object {
    private string labelField;
    private string uniqueNameField;
    private DocumentMapNode[] childrenField;
    public string Label { get; public set; }
    public string UniqueName { get; public set; }
    public DocumentMapNode[] Children { get; public set; }
    public string get_Label();
    public void set_Label(string value);
    public string get_UniqueName();
    public void set_UniqueName(string value);
    public DocumentMapNode[] get_Children();
    public void set_Children(DocumentMapNode[] value);
}
internal enum Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.EndpointVersion : Enum {
    public int value__;
    public static EndpointVersion Sql16;
    public static EndpointVersion Yukon;
    public static EndpointVersion Katmai;
    public static EndpointVersion Automatic;
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ExecutionHeader : SoapHeader {
    private string executionIDField;
    private XmlAttribute[] anyAttrField;
    public string ExecutionID { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] AnyAttr { get; public set; }
    public string get_ExecutionID();
    public void set_ExecutionID(string value);
    public XmlAttribute[] get_AnyAttr();
    public void set_AnyAttr(XmlAttribute[] value);
}
[XmlIncludeAttribute("Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ExecutionInfo2")]
[XmlIncludeAttribute("Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ExecutionInfo3")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ExecutionInfo : object {
    private bool hasSnapshotField;
    private bool needsProcessingField;
    private bool allowQueryExecutionField;
    private bool credentialsRequiredField;
    private bool parametersRequiredField;
    private DateTime expirationDateTimeField;
    private DateTime executionDateTimeField;
    private int numPagesField;
    private ReportParameter[] parametersField;
    private DataSourcePrompt[] dataSourcePromptsField;
    private bool hasDocumentMapField;
    private string executionIDField;
    private string reportPathField;
    private string historyIDField;
    private PageSettings reportPageSettingsField;
    private int autoRefreshIntervalField;
    public bool HasSnapshot { get; public set; }
    public bool NeedsProcessing { get; public set; }
    public bool AllowQueryExecution { get; public set; }
    public bool CredentialsRequired { get; public set; }
    public bool ParametersRequired { get; public set; }
    public DateTime ExpirationDateTime { get; public set; }
    public DateTime ExecutionDateTime { get; public set; }
    public int NumPages { get; public set; }
    public ReportParameter[] Parameters { get; public set; }
    public DataSourcePrompt[] DataSourcePrompts { get; public set; }
    public bool HasDocumentMap { get; public set; }
    public string ExecutionID { get; public set; }
    public string ReportPath { get; public set; }
    public string HistoryID { get; public set; }
    public PageSettings ReportPageSettings { get; public set; }
    public int AutoRefreshInterval { get; public set; }
    public bool get_HasSnapshot();
    public void set_HasSnapshot(bool value);
    public bool get_NeedsProcessing();
    public void set_NeedsProcessing(bool value);
    public bool get_AllowQueryExecution();
    public void set_AllowQueryExecution(bool value);
    public bool get_CredentialsRequired();
    public void set_CredentialsRequired(bool value);
    public bool get_ParametersRequired();
    public void set_ParametersRequired(bool value);
    public DateTime get_ExpirationDateTime();
    public void set_ExpirationDateTime(DateTime value);
    public DateTime get_ExecutionDateTime();
    public void set_ExecutionDateTime(DateTime value);
    public int get_NumPages();
    public void set_NumPages(int value);
    public ReportParameter[] get_Parameters();
    public void set_Parameters(ReportParameter[] value);
    public DataSourcePrompt[] get_DataSourcePrompts();
    public void set_DataSourcePrompts(DataSourcePrompt[] value);
    public bool get_HasDocumentMap();
    public void set_HasDocumentMap(bool value);
    public string get_ExecutionID();
    public void set_ExecutionID(string value);
    public string get_ReportPath();
    public void set_ReportPath(string value);
    public string get_HistoryID();
    public void set_HistoryID(string value);
    public PageSettings get_ReportPageSettings();
    public void set_ReportPageSettings(PageSettings value);
    public int get_AutoRefreshInterval();
    public void set_AutoRefreshInterval(int value);
}
[XmlIncludeAttribute("Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ExecutionInfo3")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ExecutionInfo2 : ExecutionInfo {
    private PageCountMode pageCountModeField;
    public PageCountMode PageCountMode { get; public set; }
    public PageCountMode get_PageCountMode();
    public void set_PageCountMode(PageCountMode value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ExecutionInfo3 : ExecutionInfo2 {
    private ParametersGridLayoutDefinition parametersLayoutField;
    public ParametersGridLayoutDefinition ParametersLayout { get; public set; }
    public ParametersGridLayoutDefinition get_ParametersLayout();
    public void set_ParametersLayout(ParametersGridLayoutDefinition value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.Extension : object {
    private ExtensionTypeEnum extensionTypeField;
    private string nameField;
    private string localizedNameField;
    private bool visibleField;
    private bool isModelGenerationSupportedField;
    public ExtensionTypeEnum ExtensionType { get; public set; }
    public string Name { get; public set; }
    public string LocalizedName { get; public set; }
    public bool Visible { get; public set; }
    public bool IsModelGenerationSupported { get; public set; }
    public ExtensionTypeEnum get_ExtensionType();
    public void set_ExtensionType(ExtensionTypeEnum value);
    public string get_Name();
    public void set_Name(string value);
    public string get_LocalizedName();
    public void set_LocalizedName(string value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public bool get_IsModelGenerationSupported();
    public void set_IsModelGenerationSupported(bool value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ExtensionSettings : object {
    private string extensionField;
    private ParameterValueOrFieldReference[] parameterValuesField;
    public string Extension { get; public set; }
    [XmlArrayItemAttribute("Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ParameterFieldReference")]
[XmlArrayItemAttribute("Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ParameterValue")]
public ParameterValueOrFieldReference[] ParameterValues { get; public set; }
    public string get_Extension();
    public void set_Extension(string value);
    public ParameterValueOrFieldReference[] get_ParameterValues();
    public void set_ParameterValues(ParameterValueOrFieldReference[] value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ExtensionTypeEnum : Enum {
    public int value__;
    public static ExtensionTypeEnum Delivery;
    public static ExtensionTypeEnum Render;
    public static ExtensionTypeEnum Data;
    public static ExtensionTypeEnum All;
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.FindStringCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public int Result { get; }
    internal FindStringCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public int get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.FindStringCompletedEventHandler : MulticastDelegate {
    public FindStringCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FindStringCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FindStringCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.GetDocumentMapCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public DocumentMapNode Result { get; }
    internal GetDocumentMapCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public DocumentMapNode get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.GetDocumentMapCompletedEventHandler : MulticastDelegate {
    public GetDocumentMapCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GetDocumentMapCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GetDocumentMapCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.GetExecutionInfo2CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo2 Result { get; }
    internal GetExecutionInfo2CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo2 get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.GetExecutionInfo2CompletedEventHandler : MulticastDelegate {
    public GetExecutionInfo2CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GetExecutionInfo2CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GetExecutionInfo2CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.GetExecutionInfo3CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo3 Result { get; }
    internal GetExecutionInfo3CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo3 get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.GetExecutionInfo3CompletedEventHandler : MulticastDelegate {
    public GetExecutionInfo3CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GetExecutionInfo3CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GetExecutionInfo3CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.GetExecutionInfoCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo Result { get; }
    internal GetExecutionInfoCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.GetExecutionInfoCompletedEventHandler : MulticastDelegate {
    public GetExecutionInfoCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GetExecutionInfoCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GetExecutionInfoCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.GetRenderResourceCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public Byte[] Result { get; }
    public string MimeType { get; }
    internal GetRenderResourceCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public Byte[] get_Result();
    public string get_MimeType();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.GetRenderResourceCompletedEventHandler : MulticastDelegate {
    public GetRenderResourceCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GetRenderResourceCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GetRenderResourceCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ListRenderingExtensionsCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public Extension[] Result { get; }
    internal ListRenderingExtensionsCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public Extension[] get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ListRenderingExtensionsCompletedEventHandler : MulticastDelegate {
    public ListRenderingExtensionsCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ListRenderingExtensionsCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ListRenderingExtensionsCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ListSecureMethodsCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public String[] Result { get; }
    internal ListSecureMethodsCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public String[] get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ListSecureMethodsCompletedEventHandler : MulticastDelegate {
    public ListSecureMethodsCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ListSecureMethodsCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ListSecureMethodsCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LoadDrillthroughTarget2CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo2 Result { get; }
    internal LoadDrillthroughTarget2CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo2 get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LoadDrillthroughTarget2CompletedEventHandler : MulticastDelegate {
    public LoadDrillthroughTarget2CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadDrillthroughTarget2CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadDrillthroughTarget2CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LoadDrillthroughTarget3CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo3 Result { get; }
    internal LoadDrillthroughTarget3CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo3 get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LoadDrillthroughTarget3CompletedEventHandler : MulticastDelegate {
    public LoadDrillthroughTarget3CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadDrillthroughTarget3CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadDrillthroughTarget3CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LoadDrillthroughTargetCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo Result { get; }
    internal LoadDrillthroughTargetCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LoadDrillthroughTargetCompletedEventHandler : MulticastDelegate {
    public LoadDrillthroughTargetCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadDrillthroughTargetCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadDrillthroughTargetCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LoadReport2CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo2 Result { get; }
    internal LoadReport2CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo2 get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LoadReport2CompletedEventHandler : MulticastDelegate {
    public LoadReport2CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadReport2CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadReport2CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LoadReport3CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo3 Result { get; }
    internal LoadReport3CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo3 get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LoadReport3CompletedEventHandler : MulticastDelegate {
    public LoadReport3CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadReport3CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadReport3CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LoadReportCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo Result { get; }
    internal LoadReportCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LoadReportCompletedEventHandler : MulticastDelegate {
    public LoadReportCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadReportCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadReportCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LoadReportDefinition2CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo2 Result { get; }
    public Warning[] warnings { get; }
    internal LoadReportDefinition2CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo2 get_Result();
    public Warning[] get_warnings();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LoadReportDefinition2CompletedEventHandler : MulticastDelegate {
    public LoadReportDefinition2CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadReportDefinition2CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadReportDefinition2CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LoadReportDefinition3CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo3 Result { get; }
    public Warning[] warnings { get; }
    internal LoadReportDefinition3CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo3 get_Result();
    public Warning[] get_warnings();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LoadReportDefinition3CompletedEventHandler : MulticastDelegate {
    public LoadReportDefinition3CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadReportDefinition3CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadReportDefinition3CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LoadReportDefinitionCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo Result { get; }
    public Warning[] warnings { get; }
    internal LoadReportDefinitionCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo get_Result();
    public Warning[] get_warnings();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LoadReportDefinitionCompletedEventHandler : MulticastDelegate {
    public LoadReportDefinitionCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadReportDefinitionCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadReportDefinitionCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LogoffCompletedEventHandler : MulticastDelegate {
    public LogoffCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AsyncCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AsyncCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.LogonUserCompletedEventHandler : MulticastDelegate {
    public LogonUserCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AsyncCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AsyncCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.NavigateBookmarkCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public int Result { get; }
    public string UniqueName { get; }
    internal NavigateBookmarkCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public int get_Result();
    public string get_UniqueName();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.NavigateBookmarkCompletedEventHandler : MulticastDelegate {
    public NavigateBookmarkCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NavigateBookmarkCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NavigateBookmarkCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.NavigateDocumentMapCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public int Result { get; }
    internal NavigateDocumentMapCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public int get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.NavigateDocumentMapCompletedEventHandler : MulticastDelegate {
    public NavigateDocumentMapCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NavigateDocumentMapCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NavigateDocumentMapCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.PageCountMode : Enum {
    public int value__;
    public static PageCountMode Actual;
    public static PageCountMode Estimate;
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.PageSettings : object {
    private ReportPaperSize paperSizeField;
    private ReportMargins marginsField;
    public ReportPaperSize PaperSize { get; public set; }
    public ReportMargins Margins { get; public set; }
    public ReportPaperSize get_PaperSize();
    public void set_PaperSize(ReportPaperSize value);
    public ReportMargins get_Margins();
    public void set_Margins(ReportMargins value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ParameterFieldReference : ParameterValueOrFieldReference {
    private string parameterNameField;
    private string fieldAliasField;
    public string ParameterName { get; public set; }
    public string FieldAlias { get; public set; }
    public string get_ParameterName();
    public void set_ParameterName(string value);
    public string get_FieldAlias();
    public void set_FieldAlias(string value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ParametersGridCellDefinition : object {
    private int rowIndexField;
    private int columnsIndexField;
    private string parameterNameField;
    public int RowIndex { get; public set; }
    public int ColumnsIndex { get; public set; }
    public string ParameterName { get; public set; }
    public int get_RowIndex();
    public void set_RowIndex(int value);
    public int get_ColumnsIndex();
    public void set_ColumnsIndex(int value);
    public string get_ParameterName();
    public void set_ParameterName(string value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ParametersGridLayoutDefinition : object {
    private int numberOfColumnsField;
    private int numberOfRowsField;
    private ParametersGridCellDefinition[] cellDefinitionsField;
    public int NumberOfColumns { get; public set; }
    public int NumberOfRows { get; public set; }
    public ParametersGridCellDefinition[] CellDefinitions { get; public set; }
    public int get_NumberOfColumns();
    public void set_NumberOfColumns(int value);
    public int get_NumberOfRows();
    public void set_NumberOfRows(int value);
    public ParametersGridCellDefinition[] get_CellDefinitions();
    public void set_CellDefinitions(ParametersGridCellDefinition[] value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ParameterStateEnum : Enum {
    public int value__;
    public static ParameterStateEnum HasValidValue;
    public static ParameterStateEnum MissingValidValue;
    public static ParameterStateEnum HasOutstandingDependencies;
    public static ParameterStateEnum DynamicValuesUnavailable;
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ParameterTypeEnum : Enum {
    public int value__;
    public static ParameterTypeEnum Boolean;
    public static ParameterTypeEnum DateTime;
    public static ParameterTypeEnum Integer;
    public static ParameterTypeEnum Float;
    public static ParameterTypeEnum String;
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ParameterValue : ParameterValueOrFieldReference {
    private string nameField;
    private string valueField;
    private string labelField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public string Label { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    public string get_Label();
    public void set_Label(string value);
}
[XmlIncludeAttribute("Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ParameterValue")]
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ParameterValueOrFieldReference : object {
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.Render2CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public Byte[] Result { get; }
    public string Extension { get; }
    public string MimeType { get; }
    public string Encoding { get; }
    public Warning[] Warnings { get; }
    public String[] StreamIds { get; }
    internal Render2CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public Byte[] get_Result();
    public string get_Extension();
    public string get_MimeType();
    public string get_Encoding();
    public Warning[] get_Warnings();
    public String[] get_StreamIds();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.Render2CompletedEventHandler : MulticastDelegate {
    public Render2CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, Render2CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, Render2CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.RenderCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public Byte[] Result { get; }
    public string Extension { get; }
    public string MimeType { get; }
    public string Encoding { get; }
    public Warning[] Warnings { get; }
    public String[] StreamIds { get; }
    internal RenderCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public Byte[] get_Result();
    public string get_Extension();
    public string get_MimeType();
    public string get_Encoding();
    public Warning[] get_Warnings();
    public String[] get_StreamIds();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.RenderCompletedEventHandler : MulticastDelegate {
    public RenderCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RenderCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RenderCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.RenderStreamCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public Byte[] Result { get; }
    public string Encoding { get; }
    public string MimeType { get; }
    internal RenderStreamCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public Byte[] get_Result();
    public string get_Encoding();
    public string get_MimeType();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.RenderStreamCompletedEventHandler : MulticastDelegate {
    public RenderStreamCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RenderStreamCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RenderStreamCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[WebServiceBindingAttribute]
[XmlIncludeAttribute("Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ParameterValueOrFieldReference")]
[EditorBrowsableAttribute("1")]
[ToolboxItemAttribute("False")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ReportExecutionService : SoapHttpClientProtocol {
    private TrustedUserHeader trustedUserHeaderValueField;
    private ServerInfoHeader serverInfoHeaderValueField;
    private SendOrPostCallback ListSecureMethodsOperationCompleted;
    private ExecutionHeader executionHeaderValueField;
    private SendOrPostCallback LoadReportOperationCompleted;
    private SendOrPostCallback LoadReport3OperationCompleted;
    private SendOrPostCallback LoadReport2OperationCompleted;
    private SendOrPostCallback LoadReportDefinitionOperationCompleted;
    private SendOrPostCallback LoadReportDefinition2OperationCompleted;
    private SendOrPostCallback LoadReportDefinition3OperationCompleted;
    private SendOrPostCallback SetExecutionCredentialsOperationCompleted;
    private SendOrPostCallback SetExecutionCredentials2OperationCompleted;
    private SendOrPostCallback SetExecutionCredentials3OperationCompleted;
    private SendOrPostCallback SetExecutionParametersOperationCompleted;
    private SendOrPostCallback SetExecutionParameters2OperationCompleted;
    private SendOrPostCallback SetExecutionParameters3OperationCompleted;
    private SendOrPostCallback ResetExecutionOperationCompleted;
    private SendOrPostCallback ResetExecution2OperationCompleted;
    private SendOrPostCallback ResetExecution3OperationCompleted;
    private SendOrPostCallback RenderOperationCompleted;
    private SendOrPostCallback Render2OperationCompleted;
    private SendOrPostCallback DeliverReportItemOperationCompleted;
    private SendOrPostCallback RenderStreamOperationCompleted;
    private SendOrPostCallback GetExecutionInfoOperationCompleted;
    private SendOrPostCallback GetExecutionInfo2OperationCompleted;
    private SendOrPostCallback GetExecutionInfo3OperationCompleted;
    private SendOrPostCallback GetDocumentMapOperationCompleted;
    private SendOrPostCallback LoadDrillthroughTargetOperationCompleted;
    private SendOrPostCallback LoadDrillthroughTarget2OperationCompleted;
    private SendOrPostCallback LoadDrillthroughTarget3OperationCompleted;
    private SendOrPostCallback ToggleItemOperationCompleted;
    private SendOrPostCallback NavigateDocumentMapOperationCompleted;
    private SendOrPostCallback NavigateBookmarkOperationCompleted;
    private SendOrPostCallback FindStringOperationCompleted;
    private SendOrPostCallback SortOperationCompleted;
    private SendOrPostCallback Sort2OperationCompleted;
    private SendOrPostCallback Sort3OperationCompleted;
    private SendOrPostCallback GetRenderResourceOperationCompleted;
    private SendOrPostCallback ListRenderingExtensionsOperationCompleted;
    private SendOrPostCallback LogonUserOperationCompleted;
    private SendOrPostCallback LogoffOperationCompleted;
    [CompilerGeneratedAttribute]
private ListSecureMethodsCompletedEventHandler ListSecureMethodsCompleted;
    [CompilerGeneratedAttribute]
private LoadReportCompletedEventHandler LoadReportCompleted;
    [CompilerGeneratedAttribute]
private LoadReport3CompletedEventHandler LoadReport3Completed;
    [CompilerGeneratedAttribute]
private LoadReport2CompletedEventHandler LoadReport2Completed;
    [CompilerGeneratedAttribute]
private LoadReportDefinitionCompletedEventHandler LoadReportDefinitionCompleted;
    [CompilerGeneratedAttribute]
private LoadReportDefinition2CompletedEventHandler LoadReportDefinition2Completed;
    [CompilerGeneratedAttribute]
private LoadReportDefinition3CompletedEventHandler LoadReportDefinition3Completed;
    [CompilerGeneratedAttribute]
private SetExecutionCredentialsCompletedEventHandler SetExecutionCredentialsCompleted;
    [CompilerGeneratedAttribute]
private SetExecutionCredentials2CompletedEventHandler SetExecutionCredentials2Completed;
    [CompilerGeneratedAttribute]
private SetExecutionCredentials3CompletedEventHandler SetExecutionCredentials3Completed;
    [CompilerGeneratedAttribute]
private SetExecutionParametersCompletedEventHandler SetExecutionParametersCompleted;
    [CompilerGeneratedAttribute]
private SetExecutionParameters2CompletedEventHandler SetExecutionParameters2Completed;
    [CompilerGeneratedAttribute]
private SetExecutionParameters3CompletedEventHandler SetExecutionParameters3Completed;
    [CompilerGeneratedAttribute]
private ResetExecutionCompletedEventHandler ResetExecutionCompleted;
    [CompilerGeneratedAttribute]
private ResetExecution2CompletedEventHandler ResetExecution2Completed;
    [CompilerGeneratedAttribute]
private ResetExecution3CompletedEventHandler ResetExecution3Completed;
    [CompilerGeneratedAttribute]
private RenderCompletedEventHandler RenderCompleted;
    [CompilerGeneratedAttribute]
private Render2CompletedEventHandler Render2Completed;
    [CompilerGeneratedAttribute]
private DeliverReportItemCompletedEventHandler DeliverReportItemCompleted;
    [CompilerGeneratedAttribute]
private RenderStreamCompletedEventHandler RenderStreamCompleted;
    [CompilerGeneratedAttribute]
private GetExecutionInfoCompletedEventHandler GetExecutionInfoCompleted;
    [CompilerGeneratedAttribute]
private GetExecutionInfo2CompletedEventHandler GetExecutionInfo2Completed;
    [CompilerGeneratedAttribute]
private GetExecutionInfo3CompletedEventHandler GetExecutionInfo3Completed;
    [CompilerGeneratedAttribute]
private GetDocumentMapCompletedEventHandler GetDocumentMapCompleted;
    [CompilerGeneratedAttribute]
private LoadDrillthroughTargetCompletedEventHandler LoadDrillthroughTargetCompleted;
    [CompilerGeneratedAttribute]
private LoadDrillthroughTarget2CompletedEventHandler LoadDrillthroughTarget2Completed;
    [CompilerGeneratedAttribute]
private LoadDrillthroughTarget3CompletedEventHandler LoadDrillthroughTarget3Completed;
    [CompilerGeneratedAttribute]
private ToggleItemCompletedEventHandler ToggleItemCompleted;
    [CompilerGeneratedAttribute]
private NavigateDocumentMapCompletedEventHandler NavigateDocumentMapCompleted;
    [CompilerGeneratedAttribute]
private NavigateBookmarkCompletedEventHandler NavigateBookmarkCompleted;
    [CompilerGeneratedAttribute]
private FindStringCompletedEventHandler FindStringCompleted;
    [CompilerGeneratedAttribute]
private SortCompletedEventHandler SortCompleted;
    [CompilerGeneratedAttribute]
private Sort2CompletedEventHandler Sort2Completed;
    [CompilerGeneratedAttribute]
private Sort3CompletedEventHandler Sort3Completed;
    [CompilerGeneratedAttribute]
private GetRenderResourceCompletedEventHandler GetRenderResourceCompleted;
    [CompilerGeneratedAttribute]
private ListRenderingExtensionsCompletedEventHandler ListRenderingExtensionsCompleted;
    [CompilerGeneratedAttribute]
private LogonUserCompletedEventHandler LogonUserCompleted;
    [CompilerGeneratedAttribute]
private LogoffCompletedEventHandler LogoffCompleted;
    public TrustedUserHeader TrustedUserHeaderValue { get; public set; }
    public ServerInfoHeader ServerInfoHeaderValue { get; public set; }
    public ExecutionHeader ExecutionHeaderValue { get; public set; }
    public TrustedUserHeader get_TrustedUserHeaderValue();
    public void set_TrustedUserHeaderValue(TrustedUserHeader value);
    public ServerInfoHeader get_ServerInfoHeaderValue();
    public void set_ServerInfoHeaderValue(ServerInfoHeader value);
    public ExecutionHeader get_ExecutionHeaderValue();
    public void set_ExecutionHeaderValue(ExecutionHeader value);
    [CompilerGeneratedAttribute]
public void add_ListSecureMethodsCompleted(ListSecureMethodsCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ListSecureMethodsCompleted(ListSecureMethodsCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_LoadReportCompleted(LoadReportCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LoadReportCompleted(LoadReportCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_LoadReport3Completed(LoadReport3CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LoadReport3Completed(LoadReport3CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_LoadReport2Completed(LoadReport2CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LoadReport2Completed(LoadReport2CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_LoadReportDefinitionCompleted(LoadReportDefinitionCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LoadReportDefinitionCompleted(LoadReportDefinitionCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_LoadReportDefinition2Completed(LoadReportDefinition2CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LoadReportDefinition2Completed(LoadReportDefinition2CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_LoadReportDefinition3Completed(LoadReportDefinition3CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LoadReportDefinition3Completed(LoadReportDefinition3CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_SetExecutionCredentialsCompleted(SetExecutionCredentialsCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SetExecutionCredentialsCompleted(SetExecutionCredentialsCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_SetExecutionCredentials2Completed(SetExecutionCredentials2CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SetExecutionCredentials2Completed(SetExecutionCredentials2CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_SetExecutionCredentials3Completed(SetExecutionCredentials3CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SetExecutionCredentials3Completed(SetExecutionCredentials3CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_SetExecutionParametersCompleted(SetExecutionParametersCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SetExecutionParametersCompleted(SetExecutionParametersCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_SetExecutionParameters2Completed(SetExecutionParameters2CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SetExecutionParameters2Completed(SetExecutionParameters2CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_SetExecutionParameters3Completed(SetExecutionParameters3CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SetExecutionParameters3Completed(SetExecutionParameters3CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ResetExecutionCompleted(ResetExecutionCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ResetExecutionCompleted(ResetExecutionCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ResetExecution2Completed(ResetExecution2CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ResetExecution2Completed(ResetExecution2CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ResetExecution3Completed(ResetExecution3CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ResetExecution3Completed(ResetExecution3CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_RenderCompleted(RenderCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RenderCompleted(RenderCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Render2Completed(Render2CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Render2Completed(Render2CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_DeliverReportItemCompleted(DeliverReportItemCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DeliverReportItemCompleted(DeliverReportItemCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_RenderStreamCompleted(RenderStreamCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RenderStreamCompleted(RenderStreamCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_GetExecutionInfoCompleted(GetExecutionInfoCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_GetExecutionInfoCompleted(GetExecutionInfoCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_GetExecutionInfo2Completed(GetExecutionInfo2CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_GetExecutionInfo2Completed(GetExecutionInfo2CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_GetExecutionInfo3Completed(GetExecutionInfo3CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_GetExecutionInfo3Completed(GetExecutionInfo3CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_GetDocumentMapCompleted(GetDocumentMapCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_GetDocumentMapCompleted(GetDocumentMapCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_LoadDrillthroughTargetCompleted(LoadDrillthroughTargetCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LoadDrillthroughTargetCompleted(LoadDrillthroughTargetCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_LoadDrillthroughTarget2Completed(LoadDrillthroughTarget2CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LoadDrillthroughTarget2Completed(LoadDrillthroughTarget2CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_LoadDrillthroughTarget3Completed(LoadDrillthroughTarget3CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LoadDrillthroughTarget3Completed(LoadDrillthroughTarget3CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ToggleItemCompleted(ToggleItemCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ToggleItemCompleted(ToggleItemCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_NavigateDocumentMapCompleted(NavigateDocumentMapCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_NavigateDocumentMapCompleted(NavigateDocumentMapCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_NavigateBookmarkCompleted(NavigateBookmarkCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_NavigateBookmarkCompleted(NavigateBookmarkCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_FindStringCompleted(FindStringCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FindStringCompleted(FindStringCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_SortCompleted(SortCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SortCompleted(SortCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Sort2Completed(Sort2CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Sort2Completed(Sort2CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Sort3Completed(Sort3CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Sort3Completed(Sort3CompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_GetRenderResourceCompleted(GetRenderResourceCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_GetRenderResourceCompleted(GetRenderResourceCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ListRenderingExtensionsCompleted(ListRenderingExtensionsCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ListRenderingExtensionsCompleted(ListRenderingExtensionsCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_LogonUserCompleted(LogonUserCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LogonUserCompleted(LogonUserCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_LogoffCompleted(LogoffCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LogoffCompleted(LogoffCompletedEventHandler value);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public String[] ListSecureMethods();
    protected Object[] Invoke(string methodName, Object[] parameters);
    public IAsyncResult BeginListSecureMethods(AsyncCallback callback, object asyncState);
    public String[] EndListSecureMethods(IAsyncResult asyncResult);
    public void ListSecureMethodsAsync();
    public void ListSecureMethodsAsync(object userState);
    private void OnListSecureMethodsOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo LoadReport(string Report, string HistoryID);
    public IAsyncResult BeginLoadReport(string Report, string HistoryID, AsyncCallback callback, object asyncState);
    public ExecutionInfo EndLoadReport(IAsyncResult asyncResult);
    public void LoadReportAsync(string Report, string HistoryID);
    public void LoadReportAsync(string Report, string HistoryID, object userState);
    private void OnLoadReportOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo3 LoadReport3(string Report, string HistoryID);
    public IAsyncResult BeginLoadReport3(string Report, string HistoryID, AsyncCallback callback, object asyncState);
    public ExecutionInfo3 EndLoadReport3(IAsyncResult asyncResult);
    public void LoadReport3Async(string Report, string HistoryID);
    public void LoadReport3Async(string Report, string HistoryID, object userState);
    private void OnLoadReport3OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo2 LoadReport2(string Report, string HistoryID);
    public IAsyncResult BeginLoadReport2(string Report, string HistoryID, AsyncCallback callback, object asyncState);
    public ExecutionInfo2 EndLoadReport2(IAsyncResult asyncResult);
    public void LoadReport2Async(string Report, string HistoryID);
    public void LoadReport2Async(string Report, string HistoryID, object userState);
    private void OnLoadReport2OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo LoadReportDefinition(Byte[] Definition, Warning[]& warnings);
    public IAsyncResult BeginLoadReportDefinition(Byte[] Definition, AsyncCallback callback, object asyncState);
    public ExecutionInfo EndLoadReportDefinition(IAsyncResult asyncResult, Warning[]& warnings);
    public void LoadReportDefinitionAsync(Byte[] Definition);
    public void LoadReportDefinitionAsync(Byte[] Definition, object userState);
    private void OnLoadReportDefinitionOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo2 LoadReportDefinition2(Byte[] Definition, Warning[]& warnings);
    public IAsyncResult BeginLoadReportDefinition2(Byte[] Definition, AsyncCallback callback, object asyncState);
    public ExecutionInfo2 EndLoadReportDefinition2(IAsyncResult asyncResult, Warning[]& warnings);
    public void LoadReportDefinition2Async(Byte[] Definition);
    public void LoadReportDefinition2Async(Byte[] Definition, object userState);
    private void OnLoadReportDefinition2OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo3 LoadReportDefinition3(Byte[] Definition, Warning[]& warnings);
    public IAsyncResult BeginLoadReportDefinition3(Byte[] Definition, AsyncCallback callback, object asyncState);
    public ExecutionInfo3 EndLoadReportDefinition3(IAsyncResult asyncResult, Warning[]& warnings);
    public void LoadReportDefinition3Async(Byte[] Definition);
    public void LoadReportDefinition3Async(Byte[] Definition, object userState);
    private void OnLoadReportDefinition3OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo SetExecutionCredentials(DataSourceCredentials[] Credentials);
    public IAsyncResult BeginSetExecutionCredentials(DataSourceCredentials[] Credentials, AsyncCallback callback, object asyncState);
    public ExecutionInfo EndSetExecutionCredentials(IAsyncResult asyncResult);
    public void SetExecutionCredentialsAsync(DataSourceCredentials[] Credentials);
    public void SetExecutionCredentialsAsync(DataSourceCredentials[] Credentials, object userState);
    private void OnSetExecutionCredentialsOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo2 SetExecutionCredentials2(DataSourceCredentials[] Credentials);
    public IAsyncResult BeginSetExecutionCredentials2(DataSourceCredentials[] Credentials, AsyncCallback callback, object asyncState);
    public ExecutionInfo2 EndSetExecutionCredentials2(IAsyncResult asyncResult);
    public void SetExecutionCredentials2Async(DataSourceCredentials[] Credentials);
    public void SetExecutionCredentials2Async(DataSourceCredentials[] Credentials, object userState);
    private void OnSetExecutionCredentials2OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo3 SetExecutionCredentials3(DataSourceCredentials[] Credentials);
    public IAsyncResult BeginSetExecutionCredentials3(DataSourceCredentials[] Credentials, AsyncCallback callback, object asyncState);
    public ExecutionInfo3 EndSetExecutionCredentials3(IAsyncResult asyncResult);
    public void SetExecutionCredentials3Async(DataSourceCredentials[] Credentials);
    public void SetExecutionCredentials3Async(DataSourceCredentials[] Credentials, object userState);
    private void OnSetExecutionCredentials3OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo SetExecutionParameters(ParameterValue[] Parameters, string ParameterLanguage);
    public IAsyncResult BeginSetExecutionParameters(ParameterValue[] Parameters, string ParameterLanguage, AsyncCallback callback, object asyncState);
    public ExecutionInfo EndSetExecutionParameters(IAsyncResult asyncResult);
    public void SetExecutionParametersAsync(ParameterValue[] Parameters, string ParameterLanguage);
    public void SetExecutionParametersAsync(ParameterValue[] Parameters, string ParameterLanguage, object userState);
    private void OnSetExecutionParametersOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo2 SetExecutionParameters2(ParameterValue[] Parameters, string ParameterLanguage);
    public IAsyncResult BeginSetExecutionParameters2(ParameterValue[] Parameters, string ParameterLanguage, AsyncCallback callback, object asyncState);
    public ExecutionInfo2 EndSetExecutionParameters2(IAsyncResult asyncResult);
    public void SetExecutionParameters2Async(ParameterValue[] Parameters, string ParameterLanguage);
    public void SetExecutionParameters2Async(ParameterValue[] Parameters, string ParameterLanguage, object userState);
    private void OnSetExecutionParameters2OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo3 SetExecutionParameters3(ParameterValue[] Parameters, string ParameterLanguage);
    public IAsyncResult BeginSetExecutionParameters3(ParameterValue[] Parameters, string ParameterLanguage, AsyncCallback callback, object asyncState);
    public ExecutionInfo3 EndSetExecutionParameters3(IAsyncResult asyncResult);
    public void SetExecutionParameters3Async(ParameterValue[] Parameters, string ParameterLanguage);
    public void SetExecutionParameters3Async(ParameterValue[] Parameters, string ParameterLanguage, object userState);
    private void OnSetExecutionParameters3OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo ResetExecution();
    public IAsyncResult BeginResetExecution(AsyncCallback callback, object asyncState);
    public ExecutionInfo EndResetExecution(IAsyncResult asyncResult);
    public void ResetExecutionAsync();
    public void ResetExecutionAsync(object userState);
    private void OnResetExecutionOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo2 ResetExecution2();
    public IAsyncResult BeginResetExecution2(AsyncCallback callback, object asyncState);
    public ExecutionInfo2 EndResetExecution2(IAsyncResult asyncResult);
    public void ResetExecution2Async();
    public void ResetExecution2Async(object userState);
    private void OnResetExecution2OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo3 ResetExecution3();
    public IAsyncResult BeginResetExecution3(AsyncCallback callback, object asyncState);
    public ExecutionInfo3 EndResetExecution3(IAsyncResult asyncResult);
    public void ResetExecution3Async();
    public void ResetExecution3Async(object userState);
    private void OnResetExecution3OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public Byte[] Render(string Format, string DeviceInfo, String& Extension, String& MimeType, String& Encoding, Warning[]& Warnings, String[]& StreamIds);
    public IAsyncResult BeginRender(string Format, string DeviceInfo, AsyncCallback callback, object asyncState);
    public Byte[] EndRender(IAsyncResult asyncResult, String& Extension, String& MimeType, String& Encoding, Warning[]& Warnings, String[]& StreamIds);
    public void RenderAsync(string Format, string DeviceInfo);
    public void RenderAsync(string Format, string DeviceInfo, object userState);
    private void OnRenderOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public Byte[] Render2(string Format, string DeviceInfo, PageCountMode PaginationMode, String& Extension, String& MimeType, String& Encoding, Warning[]& Warnings, String[]& StreamIds);
    public IAsyncResult BeginRender2(string Format, string DeviceInfo, PageCountMode PaginationMode, AsyncCallback callback, object asyncState);
    public Byte[] EndRender2(IAsyncResult asyncResult, String& Extension, String& MimeType, String& Encoding, Warning[]& Warnings, String[]& StreamIds);
    public void Render2Async(string Format, string DeviceInfo, PageCountMode PaginationMode);
    public void Render2Async(string Format, string DeviceInfo, PageCountMode PaginationMode, object userState);
    private void OnRender2OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public void DeliverReportItem(string Format, string DeviceInfo, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData);
    public IAsyncResult BeginDeliverReportItem(string Format, string DeviceInfo, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, AsyncCallback callback, object asyncState);
    public void EndDeliverReportItem(IAsyncResult asyncResult);
    public void DeliverReportItemAsync(string Format, string DeviceInfo, string Report, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData);
    public void DeliverReportItemAsync(string Format, string DeviceInfo, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, object userState);
    private void OnDeliverReportItemOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public Byte[] RenderStream(string Format, string StreamID, string DeviceInfo, String& Encoding, String& MimeType);
    public IAsyncResult BeginRenderStream(string Format, string StreamID, string DeviceInfo, AsyncCallback callback, object asyncState);
    public Byte[] EndRenderStream(IAsyncResult asyncResult, String& Encoding, String& MimeType);
    public void RenderStreamAsync(string Format, string StreamID, string DeviceInfo);
    public void RenderStreamAsync(string Format, string StreamID, string DeviceInfo, object userState);
    private void OnRenderStreamOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo GetExecutionInfo();
    public IAsyncResult BeginGetExecutionInfo(AsyncCallback callback, object asyncState);
    public ExecutionInfo EndGetExecutionInfo(IAsyncResult asyncResult);
    public void GetExecutionInfoAsync();
    public void GetExecutionInfoAsync(object userState);
    private void OnGetExecutionInfoOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo2 GetExecutionInfo2();
    public IAsyncResult BeginGetExecutionInfo2(AsyncCallback callback, object asyncState);
    public ExecutionInfo2 EndGetExecutionInfo2(IAsyncResult asyncResult);
    public void GetExecutionInfo2Async();
    public void GetExecutionInfo2Async(object userState);
    private void OnGetExecutionInfo2OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo3 GetExecutionInfo3();
    public IAsyncResult BeginGetExecutionInfo3(AsyncCallback callback, object asyncState);
    public ExecutionInfo3 EndGetExecutionInfo3(IAsyncResult asyncResult);
    public void GetExecutionInfo3Async();
    public void GetExecutionInfo3Async(object userState);
    private void OnGetExecutionInfo3OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public DocumentMapNode GetDocumentMap();
    public IAsyncResult BeginGetDocumentMap(AsyncCallback callback, object asyncState);
    public DocumentMapNode EndGetDocumentMap(IAsyncResult asyncResult);
    public void GetDocumentMapAsync();
    public void GetDocumentMapAsync(object userState);
    private void OnGetDocumentMapOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo LoadDrillthroughTarget(string DrillthroughID);
    public IAsyncResult BeginLoadDrillthroughTarget(string DrillthroughID, AsyncCallback callback, object asyncState);
    public ExecutionInfo EndLoadDrillthroughTarget(IAsyncResult asyncResult);
    public void LoadDrillthroughTargetAsync(string DrillthroughID);
    public void LoadDrillthroughTargetAsync(string DrillthroughID, object userState);
    private void OnLoadDrillthroughTargetOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo2 LoadDrillthroughTarget2(string DrillthroughID);
    public IAsyncResult BeginLoadDrillthroughTarget2(string DrillthroughID, AsyncCallback callback, object asyncState);
    public ExecutionInfo2 EndLoadDrillthroughTarget2(IAsyncResult asyncResult);
    public void LoadDrillthroughTarget2Async(string DrillthroughID);
    public void LoadDrillthroughTarget2Async(string DrillthroughID, object userState);
    private void OnLoadDrillthroughTarget2OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public ExecutionInfo3 LoadDrillthroughTarget3(string DrillthroughID);
    public IAsyncResult BeginLoadDrillthroughTarget3(string DrillthroughID, AsyncCallback callback, object asyncState);
    public ExecutionInfo3 EndLoadDrillthroughTarget3(IAsyncResult asyncResult);
    public void LoadDrillthroughTarget3Async(string DrillthroughID);
    public void LoadDrillthroughTarget3Async(string DrillthroughID, object userState);
    private void OnLoadDrillthroughTarget3OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public bool ToggleItem(string ToggleID);
    public IAsyncResult BeginToggleItem(string ToggleID, AsyncCallback callback, object asyncState);
    public bool EndToggleItem(IAsyncResult asyncResult);
    public void ToggleItemAsync(string ToggleID);
    public void ToggleItemAsync(string ToggleID, object userState);
    private void OnToggleItemOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public int NavigateDocumentMap(string DocMapID);
    public IAsyncResult BeginNavigateDocumentMap(string DocMapID, AsyncCallback callback, object asyncState);
    public int EndNavigateDocumentMap(IAsyncResult asyncResult);
    public void NavigateDocumentMapAsync(string DocMapID);
    public void NavigateDocumentMapAsync(string DocMapID, object userState);
    private void OnNavigateDocumentMapOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public int NavigateBookmark(string BookmarkID, String& UniqueName);
    public IAsyncResult BeginNavigateBookmark(string BookmarkID, AsyncCallback callback, object asyncState);
    public int EndNavigateBookmark(IAsyncResult asyncResult, String& UniqueName);
    public void NavigateBookmarkAsync(string BookmarkID);
    public void NavigateBookmarkAsync(string BookmarkID, object userState);
    private void OnNavigateBookmarkOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public int FindString(int StartPage, int EndPage, string FindValue);
    public IAsyncResult BeginFindString(int StartPage, int EndPage, string FindValue, AsyncCallback callback, object asyncState);
    public int EndFindString(IAsyncResult asyncResult);
    public void FindStringAsync(int StartPage, int EndPage, string FindValue);
    public void FindStringAsync(int StartPage, int EndPage, string FindValue, object userState);
    private void OnFindStringOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public int Sort(string SortItem, SortDirectionEnum Direction, bool Clear, String& ReportItem, Int32& NumPages);
    public IAsyncResult BeginSort(string SortItem, SortDirectionEnum Direction, bool Clear, AsyncCallback callback, object asyncState);
    public int EndSort(IAsyncResult asyncResult, String& ReportItem, Int32& NumPages);
    public void SortAsync(string SortItem, SortDirectionEnum Direction, bool Clear);
    public void SortAsync(string SortItem, SortDirectionEnum Direction, bool Clear, object userState);
    private void OnSortOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public int Sort2(string SortItem, SortDirectionEnum Direction, bool Clear, PageCountMode PaginationMode, String& ReportItem, ExecutionInfo2& ExecutionInfo);
    public IAsyncResult BeginSort2(string SortItem, SortDirectionEnum Direction, bool Clear, PageCountMode PaginationMode, AsyncCallback callback, object asyncState);
    public int EndSort2(IAsyncResult asyncResult, String& ReportItem, ExecutionInfo2& ExecutionInfo);
    public void Sort2Async(string SortItem, SortDirectionEnum Direction, bool Clear, PageCountMode PaginationMode);
    public void Sort2Async(string SortItem, SortDirectionEnum Direction, bool Clear, PageCountMode PaginationMode, object userState);
    private void OnSort2OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("ExecutionHeaderValue")]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public int Sort3(string SortItem, SortDirectionEnum Direction, bool Clear, PageCountMode PaginationMode, String& ReportItem, ExecutionInfo3& ExecutionInfo);
    public IAsyncResult BeginSort3(string SortItem, SortDirectionEnum Direction, bool Clear, PageCountMode PaginationMode, AsyncCallback callback, object asyncState);
    public int EndSort3(IAsyncResult asyncResult, String& ReportItem, ExecutionInfo3& ExecutionInfo);
    public void Sort3Async(string SortItem, SortDirectionEnum Direction, bool Clear, PageCountMode PaginationMode);
    public void Sort3Async(string SortItem, SortDirectionEnum Direction, bool Clear, PageCountMode PaginationMode, object userState);
    private void OnSort3OperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public Byte[] GetRenderResource(string Format, string DeviceInfo, String& MimeType);
    public IAsyncResult BeginGetRenderResource(string Format, string DeviceInfo, AsyncCallback callback, object asyncState);
    public Byte[] EndGetRenderResource(IAsyncResult asyncResult, String& MimeType);
    public void GetRenderResourceAsync(string Format, string DeviceInfo);
    public void GetRenderResourceAsync(string Format, string DeviceInfo, object userState);
    private void OnGetRenderResourceOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapHeaderAttribute("TrustedUserHeaderValue")]
[SoapDocumentMethodAttribute]
public Extension[] ListRenderingExtensions();
    public IAsyncResult BeginListRenderingExtensions(AsyncCallback callback, object asyncState);
    public Extension[] EndListRenderingExtensions(IAsyncResult asyncResult);
    public void ListRenderingExtensionsAsync();
    public void ListRenderingExtensionsAsync(object userState);
    private void OnListRenderingExtensionsOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapDocumentMethodAttribute]
public void LogonUser(string userName, string password, string authority);
    public IAsyncResult BeginLogonUser(string userName, string password, string authority, AsyncCallback callback, object asyncState);
    public void EndLogonUser(IAsyncResult asyncResult);
    public void LogonUserAsync(string userName, string password, string authority);
    public void LogonUserAsync(string userName, string password, string authority, object userState);
    private void OnLogonUserOperationCompleted(object arg);
    [SoapHeaderAttribute]
[SoapDocumentMethodAttribute]
public void Logoff();
    public IAsyncResult BeginLogoff(AsyncCallback callback, object asyncState);
    public void EndLogoff(IAsyncResult asyncResult);
    public void LogoffAsync();
    public void LogoffAsync(object userState);
    private void OnLogoffOperationCompleted(object arg);
    public void CancelAsync(object userState);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ReportMargins : object {
    private double topField;
    private double bottomField;
    private double leftField;
    private double rightField;
    public double Top { get; public set; }
    public double Bottom { get; public set; }
    public double Left { get; public set; }
    public double Right { get; public set; }
    public double get_Top();
    public void set_Top(double value);
    public double get_Bottom();
    public void set_Bottom(double value);
    public double get_Left();
    public void set_Left(double value);
    public double get_Right();
    public void set_Right(double value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ReportPaperSize : object {
    private double heightField;
    private double widthField;
    public double Height { get; public set; }
    public double Width { get; public set; }
    public double get_Height();
    public void set_Height(double value);
    public double get_Width();
    public void set_Width(double value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ReportParameter : object {
    private string nameField;
    private ParameterTypeEnum typeField;
    private bool typeFieldSpecified;
    private bool nullableField;
    private bool nullableFieldSpecified;
    private bool allowBlankField;
    private bool allowBlankFieldSpecified;
    private bool multiValueField;
    private bool multiValueFieldSpecified;
    private bool queryParameterField;
    private bool queryParameterFieldSpecified;
    private string promptField;
    private bool promptUserField;
    private bool promptUserFieldSpecified;
    private String[] dependenciesField;
    private bool validValuesQueryBasedField;
    private bool validValuesQueryBasedFieldSpecified;
    private ValidValue[] validValuesField;
    private bool defaultValuesQueryBasedField;
    private bool defaultValuesQueryBasedFieldSpecified;
    private String[] defaultValuesField;
    private ParameterStateEnum stateField;
    private bool stateFieldSpecified;
    private string errorMessageField;
    public string Name { get; public set; }
    public ParameterTypeEnum Type { get; public set; }
    [XmlIgnoreAttribute]
public bool TypeSpecified { get; public set; }
    public bool Nullable { get; public set; }
    [XmlIgnoreAttribute]
public bool NullableSpecified { get; public set; }
    public bool AllowBlank { get; public set; }
    [XmlIgnoreAttribute]
public bool AllowBlankSpecified { get; public set; }
    public bool MultiValue { get; public set; }
    [XmlIgnoreAttribute]
public bool MultiValueSpecified { get; public set; }
    public bool QueryParameter { get; public set; }
    [XmlIgnoreAttribute]
public bool QueryParameterSpecified { get; public set; }
    public string Prompt { get; public set; }
    public bool PromptUser { get; public set; }
    [XmlIgnoreAttribute]
public bool PromptUserSpecified { get; public set; }
    [XmlArrayItemAttribute("Dependency")]
public String[] Dependencies { get; public set; }
    public bool ValidValuesQueryBased { get; public set; }
    [XmlIgnoreAttribute]
public bool ValidValuesQueryBasedSpecified { get; public set; }
    public ValidValue[] ValidValues { get; public set; }
    public bool DefaultValuesQueryBased { get; public set; }
    [XmlIgnoreAttribute]
public bool DefaultValuesQueryBasedSpecified { get; public set; }
    [XmlArrayItemAttribute("Value")]
public String[] DefaultValues { get; public set; }
    public ParameterStateEnum State { get; public set; }
    [XmlIgnoreAttribute]
public bool StateSpecified { get; public set; }
    public string ErrorMessage { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public ParameterTypeEnum get_Type();
    public void set_Type(ParameterTypeEnum value);
    public bool get_TypeSpecified();
    public void set_TypeSpecified(bool value);
    public bool get_Nullable();
    public void set_Nullable(bool value);
    public bool get_NullableSpecified();
    public void set_NullableSpecified(bool value);
    public bool get_AllowBlank();
    public void set_AllowBlank(bool value);
    public bool get_AllowBlankSpecified();
    public void set_AllowBlankSpecified(bool value);
    public bool get_MultiValue();
    public void set_MultiValue(bool value);
    public bool get_MultiValueSpecified();
    public void set_MultiValueSpecified(bool value);
    public bool get_QueryParameter();
    public void set_QueryParameter(bool value);
    public bool get_QueryParameterSpecified();
    public void set_QueryParameterSpecified(bool value);
    public string get_Prompt();
    public void set_Prompt(string value);
    public bool get_PromptUser();
    public void set_PromptUser(bool value);
    public bool get_PromptUserSpecified();
    public void set_PromptUserSpecified(bool value);
    public String[] get_Dependencies();
    public void set_Dependencies(String[] value);
    public bool get_ValidValuesQueryBased();
    public void set_ValidValuesQueryBased(bool value);
    public bool get_ValidValuesQueryBasedSpecified();
    public void set_ValidValuesQueryBasedSpecified(bool value);
    public ValidValue[] get_ValidValues();
    public void set_ValidValues(ValidValue[] value);
    public bool get_DefaultValuesQueryBased();
    public void set_DefaultValuesQueryBased(bool value);
    public bool get_DefaultValuesQueryBasedSpecified();
    public void set_DefaultValuesQueryBasedSpecified(bool value);
    public String[] get_DefaultValues();
    public void set_DefaultValues(String[] value);
    public ParameterStateEnum get_State();
    public void set_State(ParameterStateEnum value);
    public bool get_StateSpecified();
    public void set_StateSpecified(bool value);
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ResetExecution2CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo2 Result { get; }
    internal ResetExecution2CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo2 get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ResetExecution2CompletedEventHandler : MulticastDelegate {
    public ResetExecution2CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ResetExecution2CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ResetExecution2CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ResetExecution3CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo3 Result { get; }
    internal ResetExecution3CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo3 get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ResetExecution3CompletedEventHandler : MulticastDelegate {
    public ResetExecution3CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ResetExecution3CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ResetExecution3CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ResetExecutionCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo Result { get; }
    internal ResetExecutionCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ResetExecutionCompletedEventHandler : MulticastDelegate {
    public ResetExecutionCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ResetExecutionCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ResetExecutionCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.RSExecutionConnection : ReportExecutionService {
    internal static string SoapEndpoint;
    private string m_secureServerUrl;
    private string m_nonsecureServerUrl;
    private bool m_currentlyUsingSSL;
    private bool m_alwaysUseSSL;
    private bool m_failedUsingKatmai;
    private bool m_failedUsingSql16;
    private EndpointVersion m_endpointVersion;
    private SecureMethodsList m_secureMethods;
    private bool m_unsafeHeaderServerIsIIS5;
    internal string UrlForRender { get; }
    private bool CanUseKatmaiMethods { get; }
    private bool CanUseSql16Methods { get; }
    public RSExecutionConnection(string reportServerLocation, EndpointVersion version);
    public void ValidateConnection();
    private void SetConnectionSSLForMethod(string methodname);
    private void SetConnectionSSL(bool useSSL);
    private void InitializeReportServerUrl(string reportServerLocation);
    internal string GetSoapURL(bool useSSL);
    internal string GetServerURL(bool useSSL);
    internal string get_UrlForRender();
    protected virtual WebRequest GetWebRequest(Uri uri);
    protected virtual WebResponse GetWebResponse(WebRequest request);
    protected virtual void OnSoapException(SoapException e);
    private String[] GetSecureMethods();
    private bool IsSecureMethod(string methodname);
    private bool get_CanUseKatmaiMethods();
    private bool get_CanUseSql16Methods();
    private bool CheckForDownlevelRetry(SoapException e);
    private void MarkAsFailedUsingKatmai();
    private void MarkAsFailedUsingSql16();
    public ExecutionInfo LoadReport(string Report, string HistoryID);
    public ExecutionInfo LoadReportDefinition(Byte[] Definition, Warning[]& warnings);
    public ExecutionInfo SetExecutionCredentials(DataSourceCredentials[] Credentials);
    public ExecutionInfo SetExecutionParameters(ParameterValue[] Parameters, string ParameterLanguage);
    public ExecutionInfo ResetExecution();
    public Byte[] Render(string Format, string DeviceInfo, String& Extension, String& MimeType, String& Encoding, Warning[]& Warnings, String[]& StreamIds);
    public Byte[] Render(string Format, string DeviceInfo, PageCountMode PaginationMode, String& Extension, String& MimeType, String& Encoding, Warning[]& Warnings, String[]& StreamIds);
    public Byte[] RenderStream(string Format, string StreamID, string DeviceInfo, String& Encoding, String& MimeType);
    public void DeliverReportItem(string Format, string DeviceInfo, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData);
    public ExecutionInfo GetExecutionInfo();
    public DocumentMapNode GetDocumentMap();
    public ExecutionInfo LoadDrillthroughTarget(string DrillthroughID);
    public bool ToggleItem(string ToggleID);
    public int NavigateDocumentMap(string DocMapID);
    public int NavigateBookmark(string BookmarkID, String& UniqueName);
    public int Sort(string SortItem, SortDirectionEnum Direction, bool Clear, String& ReportItem, Int32& NumPages);
    public int Sort(string SortItem, SortDirectionEnum Direction, bool Clear, PageCountMode PaginationMode, String& ReportItem, ExecutionInfo& ExecutionInfo, Int32& NumPages);
    public int FindString(int startPage, int endPage, string findValue);
    public Byte[] GetRenderResource(string Format, string DeviceInfo, String& MimeType);
    public Extension[] ListRenderingExtensions();
    public void LogonUser(string userName, string password, string authority);
    public void Logoff();
    [CompilerGeneratedAttribute]
private ExecutionInfo <ResetExecution>b__38_0();
    [CompilerGeneratedAttribute]
private ExecutionInfo <ResetExecution>b__38_1();
    [CompilerGeneratedAttribute]
private ExecutionInfo <ResetExecution>b__38_2();
    [CompilerGeneratedAttribute]
private ExecutionInfo <GetExecutionInfo>b__43_0();
    [CompilerGeneratedAttribute]
private ExecutionInfo <GetExecutionInfo>b__43_1();
    [CompilerGeneratedAttribute]
private ExecutionInfo <GetExecutionInfo>b__43_2();
    [CompilerGeneratedAttribute]
private DocumentMapNode <GetDocumentMap>b__44_0();
    [CompilerGeneratedAttribute]
private Extension[] <ListRenderingExtensions>b__53_0();
    [CompilerGeneratedAttribute]
private int <Logoff>b__55_0();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ServerInfoHeader : SoapHeader {
    private string reportServerVersionNumberField;
    private string reportServerEditionField;
    private string reportServerVersionField;
    private string reportServerDateTimeField;
    private XmlAttribute[] anyAttrField;
    public string ReportServerVersionNumber { get; public set; }
    public string ReportServerEdition { get; public set; }
    public string ReportServerVersion { get; public set; }
    public string ReportServerDateTime { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] AnyAttr { get; public set; }
    public string get_ReportServerVersionNumber();
    public void set_ReportServerVersionNumber(string value);
    public string get_ReportServerEdition();
    public void set_ReportServerEdition(string value);
    public string get_ReportServerVersion();
    public void set_ReportServerVersion(string value);
    public string get_ReportServerDateTime();
    public void set_ReportServerDateTime(string value);
    public XmlAttribute[] get_AnyAttr();
    public void set_AnyAttr(XmlAttribute[] value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionCredentials2CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo2 Result { get; }
    internal SetExecutionCredentials2CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo2 get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionCredentials2CompletedEventHandler : MulticastDelegate {
    public SetExecutionCredentials2CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SetExecutionCredentials2CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SetExecutionCredentials2CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionCredentials3CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo3 Result { get; }
    internal SetExecutionCredentials3CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo3 get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionCredentials3CompletedEventHandler : MulticastDelegate {
    public SetExecutionCredentials3CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SetExecutionCredentials3CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SetExecutionCredentials3CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionCredentialsCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo Result { get; }
    internal SetExecutionCredentialsCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionCredentialsCompletedEventHandler : MulticastDelegate {
    public SetExecutionCredentialsCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SetExecutionCredentialsCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SetExecutionCredentialsCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionParameters2CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo2 Result { get; }
    internal SetExecutionParameters2CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo2 get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionParameters2CompletedEventHandler : MulticastDelegate {
    public SetExecutionParameters2CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SetExecutionParameters2CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SetExecutionParameters2CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionParameters3CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo3 Result { get; }
    internal SetExecutionParameters3CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo3 get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionParameters3CompletedEventHandler : MulticastDelegate {
    public SetExecutionParameters3CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SetExecutionParameters3CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SetExecutionParameters3CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionParametersCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public ExecutionInfo Result { get; }
    internal SetExecutionParametersCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public ExecutionInfo get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.SetExecutionParametersCompletedEventHandler : MulticastDelegate {
    public SetExecutionParametersCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SetExecutionParametersCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SetExecutionParametersCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.Sort2CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public int Result { get; }
    public string ReportItem { get; }
    public ExecutionInfo2 ExecutionInfo { get; }
    internal Sort2CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public int get_Result();
    public string get_ReportItem();
    public ExecutionInfo2 get_ExecutionInfo();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.Sort2CompletedEventHandler : MulticastDelegate {
    public Sort2CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, Sort2CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, Sort2CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.Sort3CompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public int Result { get; }
    public string ReportItem { get; }
    public ExecutionInfo3 ExecutionInfo { get; }
    internal Sort3CompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public int get_Result();
    public string get_ReportItem();
    public ExecutionInfo3 get_ExecutionInfo();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.Sort3CompletedEventHandler : MulticastDelegate {
    public Sort3CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, Sort3CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, Sort3CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.SortCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public int Result { get; }
    public string ReportItem { get; }
    public int NumPages { get; }
    internal SortCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public int get_Result();
    public string get_ReportItem();
    public int get_NumPages();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.SortCompletedEventHandler : MulticastDelegate {
    public SortCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SortCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SortCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.SortDirectionEnum : Enum {
    public int value__;
    public static SortDirectionEnum None;
    public static SortDirectionEnum Ascending;
    public static SortDirectionEnum Descending;
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ToggleItemCompletedEventArgs : AsyncCompletedEventArgs {
    private Object[] results;
    public bool Result { get; }
    internal ToggleItemCompletedEventArgs(Object[] results, Exception exception, bool cancelled, object userState);
    public bool get_Result();
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ToggleItemCompletedEventHandler : MulticastDelegate {
    public ToggleItemCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToggleItemCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToggleItemCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.TrustedUserHeader : SoapHeader {
    private string userNameField;
    private Byte[] userTokenField;
    private XmlAttribute[] anyAttrField;
    public string UserName { get; public set; }
    [XmlElementAttribute]
public Byte[] UserToken { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] AnyAttr { get; public set; }
    public string get_UserName();
    public void set_UserName(string value);
    public Byte[] get_UserToken();
    public void set_UserToken(Byte[] value);
    public XmlAttribute[] get_AnyAttr();
    public void set_AnyAttr(XmlAttribute[] value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.ValidValue : object {
    private string labelField;
    private string valueField;
    public string Label { get; public set; }
    public string Value { get; public set; }
    public string get_Label();
    public void set_Label(string value);
    public string get_Value();
    public void set_Value(string value);
}
[GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.Reporting.WinForms.Internal.Soap.ReportingServices2005.Execution.Warning : object {
    private string codeField;
    private string severityField;
    private string objectNameField;
    private string objectTypeField;
    private string messageField;
    public string Code { get; public set; }
    public string Severity { get; public set; }
    public string ObjectName { get; public set; }
    public string ObjectType { get; public set; }
    public string Message { get; public set; }
    public string get_Code();
    public void set_Code(string value);
    public string get_Severity();
    public void set_Severity(string value);
    public string get_ObjectName();
    public void set_ObjectName(string value);
    public string get_ObjectType();
    public void set_ObjectType(string value);
    public string get_Message();
    public void set_Message(string value);
}
internal class Microsoft.Reporting.WinForms.InternalPageNavigationEventHandler : MulticastDelegate {
    public InternalPageNavigationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PageNavigationEventArgs e, ActionType postRenderAction);
    public virtual IAsyncResult BeginInvoke(object sender, PageNavigationEventArgs e, ActionType postRenderAction, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal interface Microsoft.Reporting.WinForms.IRenderable {
    public bool CanRender { get; }
    public abstract virtual void RenderToGraphics(Graphics g);
    public abstract virtual bool get_CanRender();
}
internal interface Microsoft.Reporting.WinForms.IReportExecutionService {
    unknown int Timeout {public set; }
    public string BearerToken { get; public set; }
    public abstract virtual ExecutionInfo GetExecutionInfo();
    public abstract virtual ExecutionInfo ResetExecution();
    public abstract virtual ExecutionInfo LoadReport(string report, string historyId);
    public abstract virtual ExecutionInfo LoadReportDefinition(Byte[] definition);
    public abstract virtual DocumentMapNode GetDocumentMap(string rootLabel);
    public abstract virtual RenderingExtension[] ListRenderingExtensions();
    public abstract virtual ExecutionInfo SetExecutionCredentials(IEnumerable`1<DataSourceCredentials> credentials);
    public abstract virtual ExecutionInfo SetExecutionParameters(IEnumerable`1<ReportParameter> parameters, string parameterLanguage);
    public abstract virtual Byte[] Render(string format, string deviceInfo, PageCountMode paginationMode, String& extension, String& mimeType, String& encoding, Warning[]& warnings, String[]& streamIds);
    public abstract virtual void Render(AbortState abortState, string reportPath, string executionId, string historyId, string format, XmlNodeList deviceInfo, NameValueCollection urlAccessParameters, Stream reportStream, String& mimeType, String& fileNameExtension);
    public abstract virtual Byte[] RenderStream(string format, string streamId, string deviceInfo, String& encoding, String& mimeType);
    public abstract virtual void DeliverReportItem(string format, string deviceInfo, ExtensionSettings extensionSettings, string description, string eventType, string matchData);
    public abstract virtual int FindString(int startPage, int endPage, string findValue);
    public abstract virtual void ToggleItem(string toggleId);
    public abstract virtual int NavigateBookmark(string bookmarkId, String& uniqueName);
    public abstract virtual int NavigateDocumentMap(string documentMapId);
    public abstract virtual ExecutionInfo LoadDrillthroughTarget(string drillthroughId);
    public abstract virtual int Sort(string sortItem, SortOrder direction, bool clear, PageCountMode paginationMode, String& reportItem, ExecutionInfo& executionInfo, Int32& numPages);
    public abstract virtual void SetExecutionId(string executionId);
    public abstract virtual string GetServerVersion();
    public abstract virtual void set_Timeout(int value);
    public abstract virtual string get_BearerToken();
    public abstract virtual void set_BearerToken(string value);
}
public interface Microsoft.Reporting.WinForms.IReportServerCredentials {
    public WindowsIdentity ImpersonationUser { get; }
    public ICredentials NetworkCredentials { get; }
    public abstract virtual WindowsIdentity get_ImpersonationUser();
    public abstract virtual ICredentials get_NetworkCredentials();
    public abstract virtual bool GetFormsCredentials(Cookie& authCookie, String& userName, String& password, String& authority);
}
public interface Microsoft.Reporting.WinForms.IReportViewerMessages {
    public string DocumentMapButtonToolTip { get; }
    public string ParameterAreaButtonToolTip { get; }
    public string FirstPageButtonToolTip { get; }
    public string PreviousPageButtonToolTip { get; }
    public string CurrentPageTextBoxToolTip { get; }
    public string PageOf { get; }
    public string NextPageButtonToolTip { get; }
    public string LastPageButtonToolTip { get; }
    public string BackButtonToolTip { get; }
    public string RefreshButtonToolTip { get; }
    public string PrintButtonToolTip { get; }
    public string ExportButtonToolTip { get; }
    public string ZoomControlToolTip { get; }
    public string SearchTextBoxToolTip { get; }
    public string FindButtonToolTip { get; }
    public string FindNextButtonToolTip { get; }
    public string FoundResultText { get; }
    public string ZoomToPageWidth { get; }
    public string ZoomToWholePage { get; }
    public string FindButtonText { get; }
    public string FindNextButtonText { get; }
    public string ViewReportButtonText { get; }
    public string ProgressText { get; }
    public string TextNotFound { get; }
    public string NoMoreMatches { get; }
    public string ChangeCredentialsText { get; }
    public string NullCheckBoxText { get; }
    public string NullValueText { get; }
    public string TrueValueText { get; }
    public string FalseValueText { get; }
    public string SelectAValue { get; }
    public string UserNamePrompt { get; }
    public string PasswordPrompt { get; }
    public string SelectAll { get; }
    public string PrintLayoutButtonToolTip { get; }
    public string PageSetupButtonToolTip { get; }
    public string NullCheckBoxToolTip { get; }
    public string TotalPagesToolTip { get; }
    public string StopButtonToolTip { get; }
    public string DocumentMapMenuItemText { get; }
    public string BackMenuItemText { get; }
    public string RefreshMenuItemText { get; }
    public string PrintMenuItemText { get; }
    public string PrintLayoutMenuItemText { get; }
    public string PageSetupMenuItemText { get; }
    public string ExportMenuItemText { get; }
    public string StopMenuItemText { get; }
    public string ZoomMenuItemText { get; }
    public string ViewReportButtonToolTip { get; }
    public abstract virtual string get_DocumentMapButtonToolTip();
    public abstract virtual string get_ParameterAreaButtonToolTip();
    public abstract virtual string get_FirstPageButtonToolTip();
    public abstract virtual string get_PreviousPageButtonToolTip();
    public abstract virtual string get_CurrentPageTextBoxToolTip();
    public abstract virtual string get_PageOf();
    public abstract virtual string get_NextPageButtonToolTip();
    public abstract virtual string get_LastPageButtonToolTip();
    public abstract virtual string get_BackButtonToolTip();
    public abstract virtual string get_RefreshButtonToolTip();
    public abstract virtual string get_PrintButtonToolTip();
    public abstract virtual string get_ExportButtonToolTip();
    public abstract virtual string get_ZoomControlToolTip();
    public abstract virtual string get_SearchTextBoxToolTip();
    public abstract virtual string get_FindButtonToolTip();
    public abstract virtual string get_FindNextButtonToolTip();
    public abstract virtual string get_FoundResultText();
    public abstract virtual string get_ZoomToPageWidth();
    public abstract virtual string get_ZoomToWholePage();
    public abstract virtual string get_FindButtonText();
    public abstract virtual string get_FindNextButtonText();
    public abstract virtual string get_ViewReportButtonText();
    public abstract virtual string get_ProgressText();
    public abstract virtual string get_TextNotFound();
    public abstract virtual string get_NoMoreMatches();
    public abstract virtual string get_ChangeCredentialsText();
    public abstract virtual string get_NullCheckBoxText();
    public abstract virtual string get_NullValueText();
    public abstract virtual string get_TrueValueText();
    public abstract virtual string get_FalseValueText();
    public abstract virtual string get_SelectAValue();
    public abstract virtual string get_UserNamePrompt();
    public abstract virtual string get_PasswordPrompt();
    public abstract virtual string get_SelectAll();
    public abstract virtual string get_PrintLayoutButtonToolTip();
    public abstract virtual string get_PageSetupButtonToolTip();
    public abstract virtual string get_NullCheckBoxToolTip();
    public abstract virtual string get_TotalPagesToolTip();
    public abstract virtual string get_StopButtonToolTip();
    public abstract virtual string get_DocumentMapMenuItemText();
    public abstract virtual string get_BackMenuItemText();
    public abstract virtual string get_RefreshMenuItemText();
    public abstract virtual string get_PrintMenuItemText();
    public abstract virtual string get_PrintLayoutMenuItemText();
    public abstract virtual string get_PageSetupMenuItemText();
    public abstract virtual string get_ExportMenuItemText();
    public abstract virtual string get_StopMenuItemText();
    public abstract virtual string get_ZoomMenuItemText();
    public abstract virtual string get_ViewReportButtonToolTip();
}
public interface Microsoft.Reporting.WinForms.IReportViewerMessages2 {
    public string ExportErrorTitle { get; }
    public string AllFilesFilter { get; }
    public string PromptAreaErrorTitle { get; }
    public string StringToolTip { get; }
    public string FloatToolTip { get; }
    public string IntToolTip { get; }
    public string DateToolTip { get; }
    public string MessageBoxTitle { get; }
    public string ProcessingStopped { get; }
    public string HyperlinkErrorTitle { get; }
    public abstract virtual string GetLocalizedNameForRenderingExtension(string format);
    public abstract virtual string ParameterMissingSelectionError(string parameterPrompt);
    public abstract virtual string ParameterMissingValueError(string parameterPrompt);
    public abstract virtual string CredentialMissingUserNameError(string dataSourcePrompt);
    public abstract virtual string get_ExportErrorTitle();
    public abstract virtual string get_AllFilesFilter();
    public abstract virtual string get_PromptAreaErrorTitle();
    public abstract virtual string get_StringToolTip();
    public abstract virtual string get_FloatToolTip();
    public abstract virtual string get_IntToolTip();
    public abstract virtual string get_DateToolTip();
    public abstract virtual string get_MessageBoxTitle();
    public abstract virtual string get_ProcessingStopped();
    public abstract virtual string get_HyperlinkErrorTitle();
}
public interface Microsoft.Reporting.WinForms.IReportViewerMessages3 {
    public string CancelLinkText { get; }
    public string ExportDialogTitle { get; }
    public string ExportDialogCancelButton { get; }
    public string ExportDialogStatusText { get; }
    public string FalseBooleanToolTip { get; }
    public string TrueBooleanToolTip { get; }
    public abstract virtual string TotalPages(int pageCount, PageCountMode pageCountMode);
    public abstract virtual string get_CancelLinkText();
    public abstract virtual string get_ExportDialogTitle();
    public abstract virtual string get_ExportDialogCancelButton();
    public abstract virtual string get_ExportDialogStatusText();
    public abstract virtual string get_FalseBooleanToolTip();
    public abstract virtual string get_TrueBooleanToolTip();
}
public interface Microsoft.Reporting.WinForms.IReportViewerMessages4 {
    public string ShowDocumentMapButtonTooltip { get; }
    public string HideDocumentMapButtonTooltip { get; }
    public string ShowParameterAreaButtonToolTip { get; }
    public string HideParameterAreaButtonToolTip { get; }
    public abstract virtual string get_ShowDocumentMapButtonTooltip();
    public abstract virtual string get_HideDocumentMapButtonTooltip();
    public abstract virtual string get_ShowParameterAreaButtonToolTip();
    public abstract virtual string get_HideParameterAreaButtonToolTip();
}
public interface Microsoft.Reporting.WinForms.IReportViewerMessages5 {
}
internal class Microsoft.Reporting.WinForms.LabelPoint : ActionPoint {
    internal LabelPoint(PointF point);
    internal LabelPoint(float x, float y);
}
internal class Microsoft.Reporting.WinForms.LocalDataRetrievalFromDataSet : LocalDataRetrieval {
    private GetSubReportDataSetCallback m_subreportDataCallback;
    unknown GetSubReportDataSetCallback SubReportDataSetCallback {public set; }
    public bool SupportsQueries { get; }
    public void set_SubReportDataSetCallback(GetSubReportDataSetCallback value);
    public virtual bool get_SupportsQueries();
    public virtual ProcessingContext CreateProcessingContext(PreviewItemContext itemContext, ParameterInfoCollection parameters, IEnumerable dataSources, RuntimeDataSourceInfoCollection dataSourceInfoColl, RuntimeDataSetInfoCollection dataSetInfoColl, SharedDataSetCompiler sharedDataSetCompiler, DatasourceCredentialsCollection credentials, OnDemandSubReportCallback subReportCallback, IGetResource getResourceFunction, IChunkFactory chunkFactory, ReportRuntimeSetup runtimeSetup, CreateAndRegisterStream createStreamCallback);
}
internal class Microsoft.Reporting.WinForms.LocalizationHelper : object {
    private static LocalizationHelper m_theInstance;
    private static object m_lockObject;
    private IReportViewerMessages m_winformsViewerMessages;
    public static IReportViewerMessages5 Current { get; }
    private IReportViewerMessages2 ReportViewerMessages2 { get; }
    private IReportViewerMessages3 ReportViewerMessages3 { get; }
    private IReportViewerMessages4 ReportViewerMessages4 { get; }
    private IReportViewerMessages5 ReportViewerMessages5 { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.DocumentMapButtonToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.ParameterAreaButtonToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.FirstPageButtonToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.PreviousPageButtonToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.CurrentPageTextBoxToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.PageOf { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.NextPageButtonToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.LastPageButtonToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.BackButtonToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.RefreshButtonToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.PrintButtonToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.ExportButtonToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.ZoomControlToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.SearchTextBoxToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.FindButtonToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.FindNextButtonToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.FoundResultText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.ZoomToPageWidth { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.ZoomToWholePage { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.FindButtonText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.FindNextButtonText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.ViewReportButtonText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.ProgressText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.TextNotFound { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.NoMoreMatches { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.ChangeCredentialsText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.NullCheckBoxText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.NullValueText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.TrueValueText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.FalseValueText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.SelectAValue { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.UserNamePrompt { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.PasswordPrompt { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.SelectAll { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.TotalPagesToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.StopButtonToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.PrintLayoutButtonToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.PageSetupButtonToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.NullCheckBoxToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.DocumentMapMenuItemText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.BackMenuItemText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.RefreshMenuItemText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.PrintMenuItemText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.PrintLayoutMenuItemText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.PageSetupMenuItemText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.ExportMenuItemText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.StopMenuItemText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.ZoomMenuItemText { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages.ViewReportButtonToolTip { get; }
    public string ExportErrorTitle { get; }
    public string AllFilesFilter { get; }
    public string PromptAreaErrorTitle { get; }
    public string StringToolTip { get; }
    public string FloatToolTip { get; }
    public string IntToolTip { get; }
    public string DateToolTip { get; }
    public string MessageBoxTitle { get; }
    public string ProcessingStopped { get; }
    public string HyperlinkErrorTitle { get; }
    public string CancelLinkText { get; }
    public string ExportDialogTitle { get; }
    public string ExportDialogCancelButton { get; }
    public string ExportDialogStatusText { get; }
    public string TrueBooleanToolTip { get; }
    public string FalseBooleanToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages4.ShowDocumentMapButtonTooltip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages4.HideDocumentMapButtonTooltip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages4.ShowParameterAreaButtonToolTip { get; }
    private string Microsoft.Reporting.WinForms.IReportViewerMessages4.HideParameterAreaButtonToolTip { get; }
    private static LocalizationHelper();
    public static IReportViewerMessages5 get_Current();
    private static string GetLocalizedString(string builtinString, string customString);
    private IReportViewerMessages2 get_ReportViewerMessages2();
    private IReportViewerMessages3 get_ReportViewerMessages3();
    private IReportViewerMessages4 get_ReportViewerMessages4();
    private IReportViewerMessages5 get_ReportViewerMessages5();
    internal void SetWinformsViewerMessages(IReportViewerMessages messages);
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_DocumentMapButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_ParameterAreaButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_FirstPageButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_PreviousPageButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_CurrentPageTextBoxToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_PageOf();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_NextPageButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_LastPageButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_BackButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_RefreshButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_PrintButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_ExportButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_ZoomControlToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_SearchTextBoxToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_FindButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_FindNextButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_FoundResultText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_ZoomToPageWidth();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_ZoomToWholePage();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_FindButtonText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_FindNextButtonText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_ViewReportButtonText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_ProgressText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_TextNotFound();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_NoMoreMatches();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_ChangeCredentialsText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_NullCheckBoxText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_NullValueText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_TrueValueText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_FalseValueText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_SelectAValue();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_UserNamePrompt();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_PasswordPrompt();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_SelectAll();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_TotalPagesToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_StopButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_PrintLayoutButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_PageSetupButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_NullCheckBoxToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_DocumentMapMenuItemText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_BackMenuItemText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_RefreshMenuItemText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_PrintMenuItemText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_PrintLayoutMenuItemText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_PageSetupMenuItemText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_ExportMenuItemText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_StopMenuItemText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_ZoomMenuItemText();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages.get_ViewReportButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages2.GetLocalizedNameForRenderingExtension(string format);
    public string GetLocalizedNameForRenderingExtension(RenderingExtension ext);
    public sealed virtual string ParameterMissingSelectionError(string parameterPrompt);
    public sealed virtual string ParameterMissingValueError(string parameterPrompt);
    public sealed virtual string CredentialMissingUserNameError(string dataSourcePrompt);
    public sealed virtual string get_ExportErrorTitle();
    public sealed virtual string get_AllFilesFilter();
    public sealed virtual string get_PromptAreaErrorTitle();
    public sealed virtual string get_StringToolTip();
    public sealed virtual string get_FloatToolTip();
    public sealed virtual string get_IntToolTip();
    public sealed virtual string get_DateToolTip();
    public sealed virtual string get_MessageBoxTitle();
    public sealed virtual string get_ProcessingStopped();
    public sealed virtual string get_HyperlinkErrorTitle();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages3.TotalPages(int pageCount, PageCountMode pageCountMode);
    public sealed virtual string get_CancelLinkText();
    public sealed virtual string get_ExportDialogTitle();
    public sealed virtual string get_ExportDialogCancelButton();
    public sealed virtual string get_ExportDialogStatusText();
    public sealed virtual string get_TrueBooleanToolTip();
    public sealed virtual string get_FalseBooleanToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages4.get_ShowDocumentMapButtonTooltip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages4.get_HideDocumentMapButtonTooltip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages4.get_ShowParameterAreaButtonToolTip();
    private sealed virtual override string Microsoft.Reporting.WinForms.IReportViewerMessages4.get_HideParameterAreaButtonToolTip();
}
public class Microsoft.Reporting.WinForms.LocalProcessingException : ReportViewerException {
    internal LocalProcessingException(Exception processingException);
    internal LocalProcessingException(string message, Exception processingException);
    internal LocalProcessingException(string message);
    private LocalProcessingException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Reporting.WinForms.LocalReport : Report {
    private static string TopLevelDirectReportDefinitionPath;
    [CompilerGeneratedAttribute]
private SubreportProcessingEventHandler SubreportProcessing;
    private string m_reportPath;
    private string m_reportEmbeddedResource;
    private Assembly m_embeddedResourceAssembly;
    private bool m_enableHyperlinks;
    private bool m_enableExternalImages;
    private NameValueCollection m_parentSuppliedParameters;
    private ReportDataSourceCollection m_dataSources;
    private ProcessingMessageList m_lastRenderingWarnings;
    private ILocalProcessingHost m_processingHost;
    private RenderingExtension[] m_externalRenderingExtensions;
    private MapTileServerConfiguration m_mapTileServerConfiguration;
    internal string DisplayNameForUse { get; }
    internal bool SupportsQueries { get; }
    internal bool CanSelfCancel { get; }
    private DefinitionSource DefinitionSource { get; }
    [NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("LocalReportPathDesc")]
public string ReportPath { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("Microsoft.ReportingServices.ReportSelectionConverter, Microsoft.Reporting.Design, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ReportEmbeddedResourceDesc")]
public string ReportEmbeddedResource { get; public set; }
    [CategoryAttribute("Security")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("EnableExternalImagesDesc")]
public bool EnableExternalImages { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowDetailedSubreportMessagesDesc")]
public bool ShowDetailedSubreportMessages { get; public set; }
    [CategoryAttribute("Security")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("EnableHyperlinksDesc")]
public bool EnableHyperlinks { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("MapTileServerConfigurationDesc")]
public MapTileServerConfiguration MapTileServerConfiguration { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("ReportDataSourcesDesc")]
[NotifyParentPropertyAttribute("True")]
public ReportDataSourceCollection DataSources { get; }
    internal bool IsReadyForConnection { get; }
    internal bool IsPreparedReportReadyForRendering { get; }
    internal bool HasExecutionSession { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IList`1<ReportParameter> OriginalParametersToDrillthrough { get; }
    internal bool HasDocMap { get; }
    internal int AutoRefreshInterval { get; }
    internal LocalReport(ILocalProcessingHost processingHost);
    internal LocalReport(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    private void Construct();
    public sealed virtual void Dispose();
    internal virtual string get_DisplayNameForUse();
    internal bool get_SupportsQueries();
    internal virtual bool get_CanSelfCancel();
    internal virtual void SetCancelState(bool shouldCancelRequests);
    private DefinitionSource get_DefinitionSource();
    private void DemandFullTrustWithFriendlyMessage();
    public string get_ReportPath();
    public void set_ReportPath(string value);
    public string get_ReportEmbeddedResource();
    public void set_ReportEmbeddedResource(string value);
    public bool get_EnableExternalImages();
    public void set_EnableExternalImages(bool value);
    public bool get_ShowDetailedSubreportMessages();
    public void set_ShowDetailedSubreportMessages(bool value);
    public bool get_EnableHyperlinks();
    public void set_EnableHyperlinks(bool value);
    public MapTileServerConfiguration get_MapTileServerConfiguration();
    private void SetEmbeddedResourceAsReportDefinition(string resourceName, Assembly assemblyWithResource);
    internal void SetDataSourceCredentials(IEnumerable credentials);
    internal ReportDataSourceInfoCollection GetDataSources(Boolean& allCredentialsSatisfied);
    public ReportDataSourceCollection get_DataSources();
    public IList`1<string> GetDataSourceNames();
    public virtual int GetTotalPages(PageCountMode& pageCountMode);
    internal virtual bool get_IsReadyForConnection();
    internal virtual bool get_IsPreparedReportReadyForRendering();
    public virtual void LoadReportDefinition(TextReader report);
    public void LoadSubreportDefinition(string reportName, TextReader report);
    public void LoadSubreportDefinition(string reportName, Stream report);
    private void SetDirectReportDefinition(string reportName, TextReader report);
    internal virtual int PerformSearch(string searchText, int startPage, int endPage);
    internal virtual void PerformToggle(string toggleId);
    internal virtual int PerformBookmarkNavigation(string bookmarkId, String& uniqueName);
    internal virtual int PerformDocumentMapNavigation(string documentMapId);
    internal virtual Report PerformDrillthrough(string drillthroughId, String& reportPath);
    public virtual ReportPageSettings GetDefaultPageSettings();
    private void PopulateDrillthroughReport(string reportPath, NameValueCollection drillParams, LocalReport drillReport);
    internal virtual int PerformSort(string sortId, SortOrder sortDirection, bool clearSort, PageCountMode pageCountMode, String& uniqueName);
    [ObsoleteAttribute("This method requires Code Access Security policy, which is deprecated.  For more information please go to http://go.microsoft.com/fwlink/?LinkId=160787.")]
public void ExecuteReportInCurrentAppDomain(Evidence reportEvidence);
    [ObsoleteAttribute("This method requires Code Access Security policy, which is deprecated.  For more information please go to http://go.microsoft.com/fwlink/?LinkId=160787.")]
public void AddTrustedCodeModuleInCurrentAppDomain(string assemblyName);
    [ObsoleteAttribute("This method requires Code Access Security policy, which is deprecated.  For more information please go to http://go.microsoft.com/fwlink/?LinkId=160787.")]
public void ExecuteReportInSandboxAppDomain();
    public void AddFullTrustModuleInSandboxAppDomain(StrongName assemblyName);
    public void SetBasePermissionsForSandboxAppDomain(PermissionSet permissions);
    public void ReleaseSandboxAppDomain();
    private void CopySecuritySettings(LocalReport parentReport);
    internal bool get_HasExecutionSession();
    internal virtual void EnsureExecutionSession();
    private void ValidateReportSecurity(PreviewItemContext itemContext, PublishingResult publishingResult);
    public virtual void Refresh();
    private void ChangeReportDefinition(DefinitionSource updatingSourceType, Action changeAction);
    public IList`1<ReportParameter> get_OriginalParametersToDrillthrough();
    public virtual ReportParameterInfoCollection GetParameters();
    internal virtual ParametersPaneLayout GetParametersPaneLayout();
    private ParametersPaneLayout BuildParameterPaneLayout(ParametersGridLayout processingParameterLayout, ReportParameterInfoCollection paramsInfo);
    public virtual void SetParameters(IEnumerable`1<ReportParameter> parameters);
    internal virtual Byte[] InternalRenderStream(string format, string streamID, string deviceInfo, String& mimeType, String& encoding);
    internal virtual void InternalDeliverReportItem(string format, string deviceInfo, ExtensionSettings settings, string description, string eventType, string matchData);
    internal virtual bool get_HasDocMap();
    internal virtual DocumentMapNode GetDocumentMap(string rootLabel);
    internal virtual int get_AutoRefreshInterval();
    public virtual Byte[] Render(string format, string deviceInfo, PageCountMode pageCountMode, String& mimeType, String& encoding, String& fileNameExtension, String[]& streams, Warning[]& warnings);
    internal Byte[] InternalRender(string format, bool allowInternalRenderers, string deviceInfo, PageCountMode pageCountMode, String& mimeType, String& encoding, String& fileNameExtension, String[]& streams, Warning[]& warnings);
    public void Render(string format, string deviceInfo, CreateStreamCallback createStream, Warning[]& warnings);
    public void Render(string format, string deviceInfo, PageCountMode pageCountMode, CreateStreamCallback createStream, Warning[]& warnings);
    internal void InternalRender(string format, bool allowInternalRenderers, string deviceInfo, PageCountMode pageCountMode, CreateAndRegisterStream createStreamCallback, Warning[]& warnings);
    private void WriteDebugResults(Warning[] warnings);
    private bool ValidateRenderingFormat(string format);
    [CompilerGeneratedAttribute]
public void add_SubreportProcessing(SubreportProcessingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SubreportProcessing(SubreportProcessingEventHandler value);
    private IEnumerable ControlSubReportInfoCallback(PreviewItemContext subReportContext, ParameterInfoCollection initialParameters);
    public virtual RenderingExtension[] ListRenderingExtensions();
    private string GetFullyQualifiedReportPath();
    private static string GetReportNameForFile(string path);
    private PreviewItemContext CreateItemContext();
    internal static PreviewItemContext CreateItemContextForFilePath(string filePath);
    private static PreviewItemContext CreateItemContext(string pathForFileDefinitionSource, string fullyQualifiedPath, DefinitionSource definitionSource, Assembly embeddedResourceAssembly);
    private LocalProcessingException WrapProcessingException(Exception processingException);
    private static string PageCountModeToProcessingPaginationMode(PageCountMode pageCountMode);
    private static ReportParameterInfoCollection ParameterInfoCollectionToApi(ParameterInfoCollection processingMetadata, bool supportsQueries);
    private static ReportParameterInfo ParameterInfoToApi(ParameterInfo paramInfo, bool supportsQueries);
    private void OnLocalReportChange(object sender, EventArgs e);
    private LocalReport CreateNewLocalReport();
    private LocalDataRetrieval CreateDataRetrieval();
    private static PreviewItemContext InstantiatePreviewItemContext();
}
[TypeConverterAttribute("Microsoft.Reporting.WinForms.TypeNameHidingExpandableObjectConverter")]
public class Microsoft.Reporting.WinForms.MapTileServerConfiguration : object {
    private LocalProcessingHostMapTileServerConfiguration m_underlyingConfiguration;
    [SRDescriptionAttribute("MapTileServerConfigurationMaxConnectionsDesc")]
[DefaultValueAttribute("2")]
[NotifyParentPropertyAttribute("True")]
public int MaxConnections { get; public set; }
    [SRDescriptionAttribute("MapTileServerConfigurationTimeoutDesc")]
[DefaultValueAttribute("10")]
[NotifyParentPropertyAttribute("True")]
public int Timeout { get; public set; }
    [SRDescriptionAttribute("MapTileServerConfigurationAppIDDesc")]
[DefaultValueAttribute("(Default)")]
[NotifyParentPropertyAttribute("True")]
public string AppID { get; public set; }
    internal MapTileServerConfiguration(LocalProcessingHostMapTileServerConfiguration underlyingConfiguration);
    public int get_MaxConnections();
    public void set_MaxConnections(int value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public string get_AppID();
    public void set_AppID(string value);
}
internal class Microsoft.Reporting.WinForms.MetaFilePage : DrawablePage {
    private Metafile m_metaFile;
    private float m_pageWidth;
    private float m_pageHeight;
    public ReportActions Actions { get; }
    public Dictionary`2<string, BookmarkPoint> Bookmarks { get; }
    public ReportActions ToolTips { get; }
    public bool NeedsFrame { get; }
    public int ExternalMargin { get; }
    public bool DrawInPixels { get; }
    public bool IsRequireFullRedraw { get; }
    public MetaFilePage(Stream metaFileStream, PageSettings pageSettings);
    public virtual void Draw(Graphics g, PointF scrollOffset, bool testMode);
    public virtual void GetPageSize(Graphics g, Single& width, Single& height);
    public virtual void BuildInteractivityInfo(Graphics g);
    public virtual ReportActions get_Actions();
    public virtual Dictionary`2<string, BookmarkPoint> get_Bookmarks();
    public virtual ReportActions get_ToolTips();
    public virtual bool get_NeedsFrame();
    public virtual int get_ExternalMargin();
    public virtual bool get_DrawInPixels();
    public virtual bool get_IsRequireFullRedraw();
    public void Draw(Graphics g, Rectangle destRect);
}
internal class Microsoft.Reporting.WinForms.MirrorComboBox : ComboBox {
    protected CreateParams CreateParams { get; }
    public RightToLeft RightToLeft { get; public set; }
    protected virtual CreateParams get_CreateParams();
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
}
internal class Microsoft.Reporting.WinForms.MirrorPanel : Panel {
    protected CreateParams CreateParams { get; }
    public RightToLeft RightToLeft { get; public set; }
    protected virtual CreateParams get_CreateParams();
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
}
internal static class Microsoft.Reporting.WinForms.MirrorUtil : object {
    private static int WS_EX_RIGHT;
    private static int WS_EX_RTLREADING;
    private static int WS_EX_LEFTSCROLLBAR;
    private static int WS_EX_LAYOUTRTL;
    private static int WS_EX_NOINHERITLAYOUT;
    public static CreateParams CreateMirrorParams(CreateParams baseParams, RightToLeft rtl);
}
public class Microsoft.Reporting.WinForms.MissingDataSourceCredentialsException : ReportViewerException {
    private MissingDataSourceCredentialsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Reporting.WinForms.MissingDataSourceException : ReportViewerException {
    internal MissingDataSourceException(string dataSourceName);
    private MissingDataSourceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Reporting.WinForms.MissingEndpointException : ReportServerException {
    internal MissingEndpointException(string message, Exception innerException);
    private MissingEndpointException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Reporting.WinForms.MissingParameterException : ReportViewerException {
    internal MissingParameterException(string parameterName);
    private MissingParameterException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Reporting.WinForms.MissingReportServerUrlException : ReportViewerException {
    private MissingReportServerUrlException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Reporting.WinForms.MissingReportSourceException : ReportViewerException {
    private MissingReportSourceException(SerializationInfo info, StreamingContext context);
}
internal abstract class Microsoft.Reporting.WinForms.MultiValueControl : ParameterControl {
    protected bool m_selectorChanged;
    private MirrorComboBox m_summaryCombo;
    private GenericDropDown m_dropDown;
    protected string SummaryString { get; }
    protected int MinimumRequiredHeight { get; }
    public MultiValueControl(ReportParameterInfo paramInfo, ToolTip tooltip, Font font, bool allowQueryExecution, GridLayoutCellDefinition cellDefinition);
    protected virtual void CreateChildControls();
    protected abstract virtual Control CreateSelectorControl();
    protected abstract virtual string get_SummaryString();
    protected virtual int get_MinimumRequiredHeight();
    protected virtual void OnRightToLeftChanged(EventArgs e);
    private void OnDropDown(object sender, EventArgs e);
    private void OnDropDownClosed(object sender, EventArgs e);
    protected void UpdateSummaryStringDisplay();
    [CompilerGeneratedAttribute]
private void <OnDropDown>b__8_0();
}
internal class Microsoft.Reporting.WinForms.MultiValueTextControl : MultiValueControl {
    private TextBox m_textBox;
    public String[] CurrentValue { get; }
    protected string SummaryString { get; }
    public MultiValueTextControl(ReportParameterInfo paramInfo, ToolTip tooltip, Font font, bool allowQueryExecution, GridLayoutCellDefinition cellDefinition);
    protected virtual Control CreateSelectorControl();
    public virtual String[] get_CurrentValue();
    protected virtual string get_SummaryString();
    private void OnSelectorChanged(object sender, EventArgs e);
}
internal class Microsoft.Reporting.WinForms.MultiValueValidValuesControl : MultiValueControl {
    private CheckedListBox m_listBox;
    private bool m_updatingCheckState;
    public String[] CurrentValue { get; }
    protected string SummaryString { get; }
    private bool HasSelectAllOption { get; }
    public MultiValueValidValuesControl(ReportParameterInfo paramInfo, ToolTip tooltip, Font font, bool allowQueryExecution, GridLayoutCellDefinition cellDefinition);
    protected virtual void InternalApplyCustomResources();
    protected virtual Control CreateSelectorControl();
    private void PopulateItemList();
    public virtual String[] get_CurrentValue();
    protected virtual string get_SummaryString();
    private void OnListBoxItemChecked(object sender, ItemCheckEventArgs e);
    private bool get_HasSelectAllOption();
}
public enum Microsoft.Reporting.WinForms.PageCountMode : Enum {
    public int value__;
    public static PageCountMode Actual;
    public static PageCountMode Estimate;
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WinForms.PageNavigationEventArgs : CancelEventArgs {
    private int m_newPage;
    public int NewPage { get; }
    public PageNavigationEventArgs(int newPage);
    public int get_NewPage();
}
public class Microsoft.Reporting.WinForms.PageNavigationEventHandler : MulticastDelegate {
    public PageNavigationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PageNavigationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PageNavigationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum Microsoft.Reporting.WinForms.ParameterAutoSubmit : Enum {
    public int value__;
    public static ParameterAutoSubmit Default;
    public static ParameterAutoSubmit Always;
    public static ParameterAutoSubmit Never;
}
internal abstract class Microsoft.Reporting.WinForms.ParameterControl : ParameterPanel {
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    [CompilerGeneratedAttribute]
private EventHandler NullValueChanged;
    public bool IsDependency;
    protected ReportParameterInfo m_paramInfo;
    protected CheckBox m_nullCheckBox;
    protected ToolTip m_tooltip;
    private bool m_allowQueryExecution;
    private bool m_ignoreChanges;
    private GridLayoutCellDefinition m_cellDefinition;
    public ReportParameterInfo ParameterInfo { get; }
    internal GridLayoutCellDefinition CellDefinition { get; }
    public bool DisableQueryParameter { get; }
    public String[] CurrentValue { get; }
    private bool ShouldDisableParam { get; }
    protected ParameterControl(ReportParameterInfo paramInfo, ToolTip tooltip, Font font, bool allowQueryExecution, GridLayoutCellDefinition cellDefinition);
    public static ParameterControl Create(ReportParameterInfo paramInfo, ToolTip tooltip, Font font, bool allowQueryExecution, GridLayoutCellDefinition cellDefinition);
    protected virtual void OnCreateControl();
    protected abstract virtual void CreateChildControls();
    internal void ApplyCustomResources();
    protected virtual void InternalApplyCustomResources();
    public ReportParameterInfo get_ParameterInfo();
    internal GridLayoutCellDefinition get_CellDefinition();
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    protected void OnValueChanged(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
protected void add_NullValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
protected void remove_NullValueChanged(EventHandler value);
    protected void OnNullValueChanged(object sender, EventArgs e);
    public bool get_DisableQueryParameter();
    public bool Validate();
    public abstract virtual String[] get_CurrentValue();
    protected void RenderNull();
    private bool get_ShouldDisableParam();
}
internal class Microsoft.Reporting.WinForms.ParameterControlCollection : Dictionary`2<string, ParameterControl> {
    private string m_hiddenParameterThatNeedsValue;
    private string m_anyParameterThatNeedsValue;
    private bool m_visibleParameterNeedsValue;
    [CompilerGeneratedAttribute]
private bool <HasLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfCols>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfRows>k__BackingField;
    public string HiddenParameterThatNeedsValue { get; }
    public string AnyParameterThatNeedsValue { get; }
    public bool VisibleParameterNeedsValue { get; }
    public bool HasLayout { get; private set; }
    public int NumberOfCols { get; private set; }
    public int NumberOfRows { get; private set; }
    public void Populate(ReportParameterInfoCollection reportParameters, bool isQueryExecutionAllowed, ToolTip tooltip, Font font, ParametersPaneLayout layout);
    public string get_HiddenParameterThatNeedsValue();
    public string get_AnyParameterThatNeedsValue();
    public bool get_VisibleParameterNeedsValue();
    private static bool ShouldDisplayParameter(ReportParameterInfo p);
    [CompilerGeneratedAttribute]
public bool get_HasLayout();
    [CompilerGeneratedAttribute]
private void set_HasLayout(bool value);
    [CompilerGeneratedAttribute]
public int get_NumberOfCols();
    [CompilerGeneratedAttribute]
private void set_NumberOfCols(int value);
    [CompilerGeneratedAttribute]
public int get_NumberOfRows();
    [CompilerGeneratedAttribute]
private void set_NumberOfRows(int value);
}
public enum Microsoft.Reporting.WinForms.ParameterDataType : Enum {
    public int value__;
    public static ParameterDataType Boolean;
    public static ParameterDataType DateTime;
    public static ParameterDataType Float;
    public static ParameterDataType Integer;
    public static ParameterDataType String;
}
internal class Microsoft.Reporting.WinForms.ParameterLabel : Label {
    public int OneLineWidth { get; }
    public ParameterLabel(string text);
    protected virtual void OnPaint(PaintEventArgs e);
    public void SetRequiredHeight();
    public int get_OneLineWidth();
}
internal class Microsoft.Reporting.WinForms.ParameterPanel : MirrorPanel {
    private ParameterLabel m_containedLabel;
    public int NonLabelWidth { get; }
    protected int MinimumRequiredHeight { get; }
    public ParameterLabel ContainedLabel { get; }
    public int get_NonLabelWidth();
    protected virtual int get_MinimumRequiredHeight();
    public void SetInternalLayout(int labelWidth);
    protected virtual void OnControlAdded(ControlEventArgs e);
    public ParameterLabel get_ContainedLabel();
}
internal class Microsoft.Reporting.WinForms.ParametersPaneLayout : object {
    public GridLayoutDefinition GridLayoutDefinition;
}
public enum Microsoft.Reporting.WinForms.ParameterState : Enum {
    public int value__;
    public static ParameterState HasValidValue;
    public static ParameterState MissingValidValue;
    public static ParameterState HasOutstandingDependencies;
    public static ParameterState DynamicValuesUnavailable;
}
internal class Microsoft.Reporting.WinForms.PostRenderArgs : object {
    private bool m_isDifferentReport;
    private bool m_isPartialRendering;
    private ActionType m_postActionType;
    private string m_actionID;
    private Point m_preActionScrollPosition;
    public bool IsDifferentReport { get; }
    public bool IsPartialRendering { get; }
    public string ActionID { get; }
    public ActionType PostActionType { get; }
    public Point PreActionScrollPosition { get; public set; }
    public PostRenderArgs(bool isDifferentReport, bool isPartialRendering);
    public PostRenderArgs(bool isDifferentReport, bool isPartialRendering, Point preActionScrollPosition);
    public PostRenderArgs(ActionType postActionType, string actionID);
    public PostRenderArgs(ActionType postActionType, string actionID, Point preActionScrollPosition);
    public bool get_IsDifferentReport();
    public bool get_IsPartialRendering();
    public string get_ActionID();
    public ActionType get_PostActionType();
    public Point get_PreActionScrollPosition();
    public void set_PreActionScrollPosition(Point value);
}
internal class Microsoft.Reporting.WinForms.ProcessingContextForDataSets : ProcessingContext {
    private IEnumerable m_dataSources;
    private GetSubReportDataSetCallback m_subReportInfoCallback;
    internal bool EnableDataBackedParameters { get; }
    internal IProcessingDataExtensionConnection CreateAndSetupDataExtensionFunction { get; }
    internal RuntimeDataSourceInfoCollection DataSources { get; }
    internal RuntimeDataSetInfoCollection SharedDataSetReferences { get; }
    internal bool CanShareDataSets { get; }
    public ProcessingContextForDataSets(PreviewItemContext reportContext, ParameterInfoCollection parameters, IEnumerable dataSources, OnDemandSubReportCallback subReportCallback, GetSubReportDataSetCallback subReportInfoCallback, IGetResource getResourceFunction, IChunkFactory chunkFactory, ReportRuntimeSetup reportRuntimeSetup, CreateAndRegisterStream createStreamCallback);
    internal virtual bool get_EnableDataBackedParameters();
    internal virtual IProcessingDataExtensionConnection get_CreateAndSetupDataExtensionFunction();
    internal virtual RuntimeDataSourceInfoCollection get_DataSources();
    internal virtual RuntimeDataSetInfoCollection get_SharedDataSetReferences();
    internal virtual bool get_CanShareDataSets();
    internal virtual ProcessingContext CreateInternalProcessingContext(string chartName, Report report, ErrorContext errorContext, DateTime executionTime, UserProfileState allowUserProfileState, bool isHistorySnapshot, bool snapshotProcessing, bool processWithCachedData, GetReportChunk getChunkCallback, CreateReportChunk cacheDataCallback);
    internal virtual ProcessingContext ParametersInternalProcessingContext(ErrorContext errorContext, DateTime executionTimeStamp, bool isSnapshot);
}
public enum Microsoft.Reporting.WinForms.ProcessingMode : Enum {
    public int value__;
    public static ProcessingMode Local;
    public static ProcessingMode Remote;
}
internal class Microsoft.Reporting.WinForms.ProcessingThread : object {
    private AsyncReportOperation m_operation;
    private Thread m_backgroundThread;
    private bool IsRendering { get; }
    private bool get_IsRendering();
    public bool Cancel(int millisecondsTimeout);
    public void BeginBackgroundOperation(AsyncReportOperation operation);
    private void PropagateThreadCulture();
    private void ProcessThreadMain(object arg);
}
internal class Microsoft.Reporting.WinForms.RenderingBody : RenderingItemContainer {
}
public class Microsoft.Reporting.WinForms.RenderingCompleteEventArgs : EventArgs {
    private IList`1<Warning> m_warnings;
    private Exception m_exception;
    public IList`1<Warning> Warnings { get; }
    public Exception Exception { get; }
    internal RenderingCompleteEventArgs(Warning[] warnings, Exception e);
    public IList`1<Warning> get_Warnings();
    public Exception get_Exception();
}
public class Microsoft.Reporting.WinForms.RenderingCompleteEventHandler : MulticastDelegate {
    public RenderingCompleteEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RenderingCompleteEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RenderingCompleteEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.WinForms.RenderingDynamicImage : RenderingImage {
    internal virtual void ProcessRenderingElementContent(RPLElement rplElement, GdiContext context, RectangleF bounds);
}
internal abstract class Microsoft.Reporting.WinForms.RenderingElement : RenderingElementBase {
    protected RPLElementProps m_instanceProperties;
    protected RPLElementPropsDef m_definitionProperties;
    protected List`1<Action> m_actions;
    internal RPLElementProps InstanceProperties { get; }
    internal RPLElementPropsDef DefinitionProperties { get; }
    internal IList`1<Action> Actions { get; }
    protected virtual void Initialize(RPLElement rplElement);
    internal virtual RPLElementProps get_InstanceProperties();
    internal virtual RPLElementPropsDef get_DefinitionProperties();
    internal IList`1<Action> get_Actions();
    internal virtual void ProcessRenderingElementContent(RPLElement rplElement, GdiContext context, RectangleF bounds);
    internal virtual void DrawContent(GdiContext context);
    internal bool ProcessActions(GdiContext context, string uniqueName, RPLActionInfo actionInfo, RectangleF position);
    protected void RegisterAction(GdiContext context, Action action);
}
internal abstract class Microsoft.Reporting.WinForms.RenderingElementBase : object {
    protected string m_accessibleName;
    protected RectangleF m_position;
    internal string AccessibleName { get; }
    internal RectangleF Position { get; }
    internal string get_AccessibleName();
    internal RectangleF get_Position();
    internal void SetWidth(float width);
}
public class Microsoft.Reporting.WinForms.RenderingExtension : object {
    private string m_name;
    private string m_localizedName;
    private bool m_isVisible;
    public string Name { get; }
    public string LocalizedName { get; }
    public bool Visible { get; }
    internal RenderingExtension(string name, string localizedName, bool isVisible);
    internal static RenderingExtension[] FromSoapExtensions(Extension[] soapExtensions);
    public string get_Name();
    public string get_LocalizedName();
    public bool get_Visible();
}
internal static class Microsoft.Reporting.WinForms.RenderingExtensionsHelper : object {
    public static void Populate(ToolStripDropDownItem dropDown, EventHandler handler, RenderingExtension[] extensions);
    private static bool ShouldDisplay(RenderingExtension extension);
    private static string GetEncodedDisplayName(RenderingExtension extension);
}
internal class Microsoft.Reporting.WinForms.RenderingFooter : RenderingItemContainer {
}
internal class Microsoft.Reporting.WinForms.RenderingHeader : RenderingItemContainer {
}
internal class Microsoft.Reporting.WinForms.RenderingImage : RenderingItem {
    internal RectangleF ImagePosition;
    internal RectangleF ImagePositionPX;
    internal Image Image;
    internal Sizings Sizing;
    private bool m_processedImage;
    internal virtual void ProcessRenderingElementContent(RPLElement rplElement, GdiContext context, RectangleF bounds);
    internal virtual void DrawContent(GdiContext context);
    internal void ProcessImageMap(GdiContext context);
}
internal abstract class Microsoft.Reporting.WinForms.RenderingItem : RenderingElement {
    private byte m_state;
    private int m_zIndex;
    private Color m_backgroundColor;
    private Image m_backgroundImage;
    private BackgroundRepeatTypes m_backgroundRepeat;
    private bool m_delayDrawBorders;
    private RenderingItemBorder m_borderLeft;
    private RenderingItemBorder m_borderRight;
    private RenderingItemBorder m_borderTop;
    private RenderingItemBorder m_borderBottom;
    internal bool HasBorders { get; }
    internal string Bookmark { get; }
    internal string ToolTip { get; }
    internal string Label { get; }
    internal bool DelayDrawBorders { get; internal set; }
    internal Color BackgroundColor { get; }
    internal Image BackgroundImage { get; }
    internal BackgroundRepeatTypes BackgroundRepeat { get; }
    internal virtual void Initialize(GdiContext context, RPLItemMeasurement measurement, RectangleF bounds, string accessibleName);
    internal bool get_HasBorders();
    internal string get_Bookmark();
    internal string get_ToolTip();
    internal string get_Label();
    internal bool get_DelayDrawBorders();
    internal void set_DelayDrawBorders(bool value);
    internal Color get_BackgroundColor();
    internal Image get_BackgroundImage();
    internal BackgroundRepeatTypes get_BackgroundRepeat();
    internal static RenderingItem CreateRenderingItem(GdiContext context, RPLItemMeasurement measurement, RectangleF bounds);
    internal void DrawToPage(GdiContext context);
    internal static void DrawBackgroundImage(GdiContext context, Image backgroundImage, BackgroundRepeatTypes backgroundRepeat, RectangleF position);
    internal void ProcessBackgroundColorAndImage(GdiContext context, RPLElementProps properties);
    internal static Image GetImage(GdiContext context, RPLImageData imageData);
    internal void DrawBorders(GdiContext context);
    internal static void ProcessBorders(GdiWriter writer, RenderingItemBorder& top, RenderingItemBorder& left, RenderingItemBorder& bottom, RenderingItemBorder& right, RectangleF position, RectangleF bounds, byte state);
    internal void ProcessBorders(GdiWriter writer, RPLItemProps properties, RectangleF bounds, byte state);
    internal static DashStyle TranslateBorderStyle(object style);
    private static void DrawImageClipped(GdiContext context, Image image, float xOffsetMM, float yOffsetMM, RectangleF position);
}
internal class Microsoft.Reporting.WinForms.RenderingItemBorder : ValueType {
    internal BorderStyles Style;
    internal float Width;
    internal Color Color;
    internal float Point;
    internal float Edge;
    internal List`1<Operation> Operations;
    internal bool IsVisible { get; }
    internal bool get_IsVisible();
}
internal class Microsoft.Reporting.WinForms.RenderingItemBorderTablix : object {
    internal int RowZIndex;
    internal int ColumnZIndex;
    internal int RowIndex;
    internal int ColumnIndex;
    internal bool CompareRowFirst;
    internal RenderingItem Item;
    internal RenderingItemBorderTablix(int rowZIndex, int columnZIndex, int rowIndex, int columnIndex, RenderingItem item);
}
internal class Microsoft.Reporting.WinForms.RenderingItemContainer : RenderingItem {
    private List`1<int> m_sortedRenderingItemIndices;
    private List`1<RenderingItem> m_children;
    internal List`1<int> SortedRenderingItemIndices { get; }
    internal List`1<RenderingItem> Children { get; }
    internal List`1<int> get_SortedRenderingItemIndices();
    internal List`1<RenderingItem> get_Children();
    internal void EnsureSortedRenderingItemIndices();
    internal virtual void ProcessRenderingElementContent(RPLElement rplElement, GdiContext context, RectangleF bounds);
    internal virtual void DrawContent(GdiContext context);
    internal void Search(GdiContext context);
}
internal class Microsoft.Reporting.WinForms.RenderingLine : RenderingItem {
    internal Color Color;
    internal float Width;
    internal DashStyle Style;
    internal virtual void ProcessRenderingElementContent(RPLElement rplElement, GdiContext context, RectangleF bounds);
    internal virtual void DrawContent(GdiContext context);
}
internal class Microsoft.Reporting.WinForms.RenderingParagraph : RenderingElement {
    private int m_paragraphNumber;
    private bool m_isSimple;
    private List`1<RenderingTextRun> m_textRuns;
    private RectangleF m_textPosition;
    private Paragraph m_richParagraph;
    private List`1<SearchMatch> m_searchResults;
    private int m_firstSearchIndex;
    private int m_lastSearchIndex;
    internal Paragraph RichParagraph { get; internal set; }
    internal string Text { get; }
    internal RectangleF TextPosition { get; internal set; }
    public float SpaceBefore { get; }
    public float SpaceAfter { get; }
    public float LeftIndent { get; }
    public float RightIndent { get; }
    public float HangingIndent { get; }
    public int ListLevel { get; }
    public ListStyles ListStyle { get; }
    public TextAlignments Alignment { get; }
    public int ParagraphNumber { get; public set; }
    internal void Initialize(RPLTextBox rplTextBox, RectangleF bounds);
    internal void Initialize(RPLParagraph rplParagraph, RectangleF bounds);
    internal Paragraph get_RichParagraph();
    internal void set_RichParagraph(Paragraph value);
    internal string get_Text();
    internal RectangleF get_TextPosition();
    internal void set_TextPosition(RectangleF value);
    public sealed virtual float get_SpaceBefore();
    public sealed virtual float get_SpaceAfter();
    public sealed virtual float get_LeftIndent();
    public sealed virtual float get_RightIndent();
    public sealed virtual float get_HangingIndent();
    public sealed virtual int get_ListLevel();
    public sealed virtual ListStyles get_ListStyle();
    public sealed virtual TextAlignments get_Alignment();
    public sealed virtual int get_ParagraphNumber();
    public sealed virtual void set_ParagraphNumber(int value);
    internal virtual void ProcessRenderingElementContent(RPLElement rplElement, GdiContext context, RectangleF bounds);
    internal virtual void DrawContent(GdiContext context);
    internal void Search(GdiContext context, int paragraphIndex);
    internal RTSelectionHighlight GetSearchHit(GdiContext context);
}
internal class Microsoft.Reporting.WinForms.RenderingRectangle : RenderingItemContainer {
}
internal class Microsoft.Reporting.WinForms.RenderingReport : object {
    private RectangleF m_position;
    private List`1<FixedHeaderItem> m_fixedHeaders;
    private List`1<Action> m_actions;
    private Dictionary`2<string, LabelPoint> m_labels;
    private Dictionary`2<string, BookmarkPoint> m_bookmarks;
    private List`1<Action> m_toolTips;
    private List`1<RenderingReportSection> m_reportSections;
    internal Color BackgroundColor;
    internal Image BackgroundImage;
    internal RenderingItemBorder BorderLeft;
    internal RenderingItemBorder BorderRight;
    internal RenderingItemBorder BorderTop;
    internal RenderingItemBorder BorderBottom;
    internal BackgroundRepeatTypes BackgroundRepeat;
    internal RectangleF Position { get; }
    internal List`1<Action> Actions { get; }
    internal List`1<FixedHeaderItem> FixedHeaders { get; }
    internal Dictionary`2<string, BookmarkPoint> Bookmarks { get; }
    internal List`1<Action> ToolTips { get; }
    internal Dictionary`2<string, LabelPoint> Labels { get; }
    internal List`1<RenderingReportSection> ReportSections { get; }
    internal RenderingReport(GdiContext context);
    internal RectangleF get_Position();
    internal List`1<Action> get_Actions();
    internal List`1<FixedHeaderItem> get_FixedHeaders();
    internal Dictionary`2<string, BookmarkPoint> get_Bookmarks();
    internal List`1<Action> get_ToolTips();
    internal Dictionary`2<string, LabelPoint> get_Labels();
    internal List`1<RenderingReportSection> get_ReportSections();
    private void ProcessBorders(GdiWriter writer, RPLElementStyle style, RectangleF position, RectangleF bounds, byte state);
    internal void DrawPageBorders(GdiContext context);
    internal void DrawToPage(GdiContext context);
    internal void Search(GdiContext context);
}
internal class Microsoft.Reporting.WinForms.RenderingReportSection : RenderingElementBase {
    private RenderingBody m_body;
    private RenderingHeader m_header;
    private RenderingFooter m_footer;
    internal RenderingHeader Header { get; }
    internal RenderingBody Body { get; }
    internal RenderingFooter Footer { get; }
    internal RenderingReportSection(GdiContext context, RPLReportSection reportSection, RPLSizes sectionSize, int index, float width, float offsetTop);
    internal RenderingHeader get_Header();
    internal RenderingBody get_Body();
    internal RenderingFooter get_Footer();
    internal void DrawToPage(GdiContext context);
    internal void Search(GdiContext context);
}
internal class Microsoft.Reporting.WinForms.RenderingSubReport : RenderingItemContainer {
    internal virtual void ProcessRenderingElementContent(RPLElement rplElement, GdiContext context, RectangleF bounds);
}
internal class Microsoft.Reporting.WinForms.RenderingTablix : RenderingItemContainer {
    private List`1<RenderingItemBorderTablix> m_cornerBorders;
    private List`1<RenderingItemBorderTablix> m_columnHeaderBorders;
    private List`1<RenderingItemBorderTablix> m_rowHeaderBorders;
    private List`1<RenderingItemBorderTablix> m_detailCellBorders;
    private Directions Direction { get; }
    private Directions get_Direction();
    internal virtual void ProcessRenderingElementContent(RPLElement rplElement, GdiContext context, RectangleF bounds);
    internal virtual void DrawContent(GdiContext context);
    private void DrawBorders(GdiContext context, List`1<RenderingItemBorderTablix> borders);
    private int CalculateZIndex(RPLTablixMemberCell header, bool forHeader);
}
internal class Microsoft.Reporting.WinForms.RenderingTextBox : RenderingItem {
    private TextBox m_richTextBox;
    private List`1<RenderingParagraph> m_paragraphs;
    private GdiContext m_context;
    private RectangleF m_textPosition;
    private RectangleF m_toggleRectangleMM;
    private RectangleF m_sortRectangleMM;
    internal RectangleF TextPosition { get; }
    public VerticalAlignments VerticalAlign { get; }
    public Directions Direction { get; }
    public WritingModes WritingMode { get; }
    public TextAlignments DefaultAlignment { get; }
    private Color Microsoft.ReportingServices.Rendering.RichText.ITextBoxProps.BackgroundColor { get; }
    private bool Microsoft.ReportingServices.Rendering.RichText.ITextBoxProps.CanGrow { get; }
    internal RectangleF get_TextPosition();
    public VerticalAlignments get_VerticalAlign();
    public sealed virtual Directions get_Direction();
    public sealed virtual WritingModes get_WritingMode();
    public sealed virtual TextAlignments get_DefaultAlignment();
    private sealed virtual override Color Microsoft.ReportingServices.Rendering.RichText.ITextBoxProps.get_BackgroundColor();
    private sealed virtual override bool Microsoft.ReportingServices.Rendering.RichText.ITextBoxProps.get_CanGrow();
    public sealed virtual void DrawTextRun(TextRun run, Paragraph paragraph, Win32DCSafeHandle hdc, float dpiX, FontCache fontCache, int x, int y, int baselineY, int lineHeight, Rectangle layoutRectangle);
    public sealed virtual void DrawClippedTextRun(TextRun run, Paragraph paragraph, Win32DCSafeHandle hdc, float dpiX, FontCache fontCache, int x, int y, int baselineY, int lineHeight, Rectangle layoutRectangle, UInt32 fontColorOverride, Rectangle clipRect);
    internal virtual void ProcessRenderingElementContent(RPLElement rplElement, GdiContext context, RectangleF bounds);
    internal virtual void DrawContent(GdiContext context);
    private void RenderRichText(RichTextRenderer richTextRenderer, Graphics graphics, RectangleF rectangle, PointF offset, List`1<RTSelectionHighlight> matches);
    internal void Search(GdiContext context);
    internal string GetText();
    private void DrawResourceImage(GdiContext context, Bitmap image, RectangleF itemRectangleMM, RectangleF imageRectanglePX);
    private void GetSortImage(GdiWriter writer, Bitmap& image, SortOrder& nextOrder);
    private void GetToggleImage(GdiWriter writer, Bitmap& image);
    private void AdjustParagraphLayout(float totalContent, float newContent, float usedContent, bool firstParagraph, WritingModes writingMode, Single& delta, RectangleF& layoutParagraph, PointF& offset);
}
internal class Microsoft.Reporting.WinForms.RenderingTextRun : RenderingElement {
    private TextRun m_richTextRun;
    private string m_fontKey;
    private int m_indexInParagraph;
    internal string Text { get; }
    internal string ToolTip { get; }
    internal TextRun RichTextRun { get; }
    public string FontFamily { get; }
    public float FontSize { get; }
    public Color Color { get; }
    public bool Bold { get; }
    public bool Italic { get; }
    public TextDecorations TextDecoration { get; }
    public int IndexInParagraph { get; }
    public string FontKey { get; public set; }
    internal void Initialize(RPLElement rplElement, RectangleF bounds, int indexInParagraph);
    internal string get_Text();
    internal string get_ToolTip();
    internal TextRun get_RichTextRun();
    public sealed virtual string get_FontFamily();
    public sealed virtual float get_FontSize();
    public sealed virtual Color get_Color();
    public sealed virtual bool get_Bold();
    public sealed virtual bool get_Italic();
    public sealed virtual TextDecorations get_TextDecoration();
    public sealed virtual int get_IndexInParagraph();
    public sealed virtual string get_FontKey();
    public sealed virtual void set_FontKey(string value);
    public sealed virtual void AddSplitIndex(int index);
    internal virtual void DrawContent(GdiContext context);
}
[TypeConverterAttribute("Microsoft.Reporting.WinForms.TypeNameHidingExpandableObjectConverter")]
public abstract class Microsoft.Reporting.WinForms.Report : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<ReportChangedEventArgs> Change;
    private string m_displayName;
    private int m_drillthroughDepth;
    internal object m_syncObject;
    [SRDescriptionAttribute("DisplayNameDesc")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
public string DisplayName { get; public set; }
    internal string DisplayNameForUse { get; }
    [BrowsableAttribute("False")]
public bool IsDrillthroughReport { get; }
    internal int DrillthroughDepth { get; internal set; }
    internal bool IsReadyForConnection { get; }
    [BrowsableAttribute("False")]
public bool IsReadyForRendering { get; }
    internal bool IsPreparedReportReadyForRendering { get; }
    internal bool HasDocMap { get; }
    internal int AutoRefreshInterval { get; }
    internal bool CanSelfCancel { get; }
    public string get_DisplayName();
    public void set_DisplayName(string value);
    internal abstract virtual string get_DisplayNameForUse();
    public abstract virtual ReportParameterInfoCollection GetParameters();
    internal abstract virtual ParametersPaneLayout GetParametersPaneLayout();
    public abstract virtual void SetParameters(IEnumerable`1<ReportParameter> parameters);
    public abstract virtual int GetTotalPages(PageCountMode& pageCountMode);
    public abstract virtual RenderingExtension[] ListRenderingExtensions();
    public abstract virtual void LoadReportDefinition(TextReader report);
    public abstract virtual void Refresh();
    public abstract virtual Byte[] Render(string format, string deviceInfo, PageCountMode pageCountMode, String& mimeType, String& encoding, String& fileNameExtension, String[]& streams, Warning[]& warnings);
    internal abstract virtual Byte[] InternalRenderStream(string format, string streamID, string deviceInfo, String& mimeType, String& encoding);
    internal abstract virtual void InternalDeliverReportItem(string format, string deviceInfo, ExtensionSettings settings, string description, string eventType, string matchData);
    internal abstract virtual int PerformSearch(string searchText, int startPage, int endPage);
    internal abstract virtual void PerformToggle(string toggleId);
    internal abstract virtual int PerformBookmarkNavigation(string bookmarkId, String& uniqueName);
    internal abstract virtual int PerformDocumentMapNavigation(string documentMapId);
    public abstract virtual ReportPageSettings GetDefaultPageSettings();
    public int GetTotalPages();
    public Byte[] Render(string format);
    public Byte[] Render(string format, string deviceInfo);
    public Byte[] Render(string format, string deviceInfo, String& mimeType, String& encoding, String& fileNameExtension, String[]& streams, Warning[]& warnings);
    public DocumentMapNode GetDocumentMap();
    public bool get_IsDrillthroughReport();
    internal int get_DrillthroughDepth();
    internal void set_DrillthroughDepth(int value);
    internal abstract virtual Report PerformDrillthrough(string drillthroughId, String& reportPath);
    internal abstract virtual int PerformSort(string sortId, SortOrder sortDirection, bool clearSort, PageCountMode pageCountMode, String& uniqueName);
    internal abstract virtual bool get_IsReadyForConnection();
    public bool get_IsReadyForRendering();
    internal abstract virtual bool get_IsPreparedReportReadyForRendering();
    internal bool PrepareForRender();
    internal abstract virtual void EnsureExecutionSession();
    internal abstract virtual bool get_HasDocMap();
    [CompilerGeneratedAttribute]
internal void add_Change(EventHandler`1<ReportChangedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_Change(EventHandler`1<ReportChangedEventArgs> value);
    internal abstract virtual DocumentMapNode GetDocumentMap(string rootLabel);
    internal abstract virtual int get_AutoRefreshInterval();
    internal abstract virtual bool get_CanSelfCancel();
    internal abstract virtual void SetCancelState(bool shouldCancel);
    public void LoadReportDefinition(Stream report);
    internal void OnChange(bool isRefreshOnly);
    internal void OnChange(object sender, EventArgs e);
    public void SetParameters(ReportParameter parameter);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Reporting.WinForms.ReportActions : object {
    private List`1<Action> m_actionList;
    public int Count { get; }
    unknown List`1<Action> Actions {public set; }
    public Action Item { get; }
    public int get_Count();
    public void set_Actions(List`1<Action> value);
    public Action get_Item(int i);
    public sealed virtual IEnumerator`1<Action> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public Point GetActionPoint(ActionType actionType, string actionId);
}
internal class Microsoft.Reporting.WinForms.ReportChangedEventArgs : EventArgs {
    private bool m_isRefreshOnly;
    public bool IsRefreshOnly { get; }
    public ReportChangedEventArgs(bool isRefreshOnly);
    public bool get_IsRefreshOnly();
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WinForms.ReportCredentialsEventArgs : CancelEventArgs {
    private DataSourceCredentialsCollection m_credentials;
    public DataSourceCredentialsCollection Credentials { get; }
    internal ReportCredentialsEventArgs(DataSourceCredentialsCollection credentials);
    public DataSourceCredentialsCollection get_Credentials();
}
public class Microsoft.Reporting.WinForms.ReportCredentialsEventHandler : MulticastDelegate {
    public ReportCredentialsEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ReportCredentialsEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ReportCredentialsEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Reporting.WinForms.ReportDataSource : object {
    [CompilerGeneratedAttribute]
private EventHandler Changed;
    private string m_name;
    private object m_value;
    [NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
public string Name { get; public set; }
    public object Value { get; public set; }
    public ReportDataSource(string name);
    public ReportDataSource(string name, object dataSourceValue);
    public ReportDataSource(string name, DataTable dataSourceValue);
    public ReportDataSource(string name, BindingSource dataSourceValue);
    public ReportDataSource(string name, Type dataSourceValue);
    public ReportDataSource(string name, IEnumerable dataSourceValue);
    [CompilerGeneratedAttribute]
internal void add_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_Changed(EventHandler value);
    internal void OnChanged();
    public string get_Name();
    public void set_Name(string value);
    public object get_Value();
    public void set_Value(object value);
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WinForms.ReportDataSourceCollection : SyncList`1<ReportDataSource> {
    [CompilerGeneratedAttribute]
private EventHandler Change;
    private EventHandler m_onChangeEventHandler;
    public ReportDataSource Item { get; }
    internal ReportDataSourceCollection(object syncObject);
    internal ReportDataSourceCollection(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public ReportDataSource get_Item(string name);
    [CompilerGeneratedAttribute]
internal void add_Change(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_Change(EventHandler value);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, ReportDataSource item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, ReportDataSource item);
    private void RegisterItem(ReportDataSource item);
    private void UnregisterItem(ReportDataSource item);
    private void OnChange();
    private void OnChange(object sender, EventArgs e);
}
public class Microsoft.Reporting.WinForms.ReportDataSourceInfo : object {
    private string m_name;
    private string m_prompt;
    public string Name { get; }
    public string Prompt { get; }
    internal ReportDataSourceInfo(string name, string prompt);
    public string get_Name();
    public string get_Prompt();
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WinForms.ReportDataSourceInfoCollection : ReadOnlyCollection`1<ReportDataSourceInfo> {
    public ReportDataSourceInfo Item { get; }
    internal ReportDataSourceInfoCollection(IList`1<ReportDataSourceInfo> dsInfos);
    public ReportDataSourceInfo get_Item(string name);
    internal static ReportDataSourceInfoCollection FromSoapDataSourcePrompts(DataSourcePrompt[] soapPrompts);
}
public class Microsoft.Reporting.WinForms.ReportErrorEventArgs : EventArgs {
    private Exception m_exception;
    private bool m_isHandled;
    public Exception Exception { get; }
    public bool Handled { get; public set; }
    internal ReportErrorEventArgs(Exception e);
    public Exception get_Exception();
    public bool get_Handled();
    public void set_Handled(bool value);
}
public class Microsoft.Reporting.WinForms.ReportErrorEventHandler : MulticastDelegate {
    public ReportErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ReportErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ReportErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WinForms.ReportExportEventArgs : CancelEventArgs {
    private RenderingExtension m_extension;
    private string m_deviceInfo;
    public RenderingExtension Extension { get; }
    public string DeviceInfo { get; public set; }
    public ReportExportEventArgs(RenderingExtension extension);
    public RenderingExtension get_Extension();
    public string get_DeviceInfo();
    public void set_DeviceInfo(string value);
}
internal class Microsoft.Reporting.WinForms.ReportHierarchy : object {
    private Stack`1<ReportInfo> m_stack;
    private bool m_keepSessionAlive;
    public int Count { get; }
    public bool KeepSessionAlive { get; public set; }
    public sealed virtual void Dispose();
    public int get_Count();
    public void Push(ReportInfo reportInfo);
    public void Pop();
    public ReportInfo Peek();
    public void Clear();
    public ReportInfo[] ToArray();
    public bool get_KeepSessionAlive();
    public void set_KeepSessionAlive(bool value);
}
internal class Microsoft.Reporting.WinForms.ReportInfo : object {
    public int CurrentPage;
    private ClientGDIRenderer m_gdiRenderer;
    private LocalReport m_localReport;
    private ServerReport m_serverReport;
    private FileManager m_fileManager;
    private Timer m_serverSessionTimer;
    private object m_timerLock;
    private PageSettings m_pageSettings;
    private bool m_useTimer;
    public LocalReport LocalReport { get; }
    public ServerReport ServerReport { get; }
    public ClientGDIRenderer GdiRenderer { get; }
    public FileManager FileManager { get; }
    public PageSettings PageSettings { get; public set; }
    public ReportInfo(LocalReport localReport, ServerReport serverReport);
    public sealed virtual void Dispose();
    public LocalReport get_LocalReport();
    public ServerReport get_ServerReport();
    public ClientGDIRenderer get_GdiRenderer();
    public FileManager get_FileManager();
    public void SetNewGdiPage(Byte[] pageBytes);
    public void ClearGdiPage();
    public PageSettings get_PageSettings();
    public void set_PageSettings(PageSettings value);
    public void StartTimer();
    public void StopTimer();
    private void OnServerExecutionIdChanged(object sender, EventArgs e);
    private void TimerProc(object sender, ElapsedEventArgs e);
    private void DisposeTimer();
}
public class Microsoft.Reporting.WinForms.ReportPageSettings : object {
    private int m_pageWidth;
    private int m_pageHeight;
    private Margins m_margins;
    public PaperSize PaperSize { get; }
    public Margins Margins { get; }
    public bool IsLandscape { get; }
    internal PageSettings CustomPageSettings { get; }
    internal ReportPageSettings(double pageHeight, double pageWidth, double leftMargin, double rightMargin, double topMargin, double bottomMargin);
    private static int ConvertMmTo100thInch(double mm);
    public PaperSize get_PaperSize();
    public Margins get_Margins();
    public bool get_IsLandscape();
    internal PageSettings get_CustomPageSettings();
    internal static void UpdatePageSettingsForPrinter(PageSettings pageSettings, PrinterSettings printerSettings);
    internal PageSettings ToPageSettings(PrinterSettings currentPrinter);
}
internal class Microsoft.Reporting.WinForms.ReportPanel : MirrorPanel {
    [CompilerGeneratedAttribute]
private InternalPageNavigationEventHandler PageNavigation;
    [CompilerGeneratedAttribute]
private EventHandler Back;
    [CompilerGeneratedAttribute]
private EventHandler ReportRefresh;
    [CompilerGeneratedAttribute]
private EventHandler Print;
    [CompilerGeneratedAttribute]
private EventHandler PageSettings;
    [CompilerGeneratedAttribute]
private ExportEventHandler Export;
    [CompilerGeneratedAttribute]
private ZoomChangedEventHandler ZoomChange;
    private bool m_showContextMenu;
    private bool m_inLongRunningAction;
    private IContainer components;
    private DrawablePage m_currentPage;
    private RenderingPanel m_renderPanel;
    private ContextMenuStrip m_contextMenu;
    private ToolStripMenuItem m_documentMapToolStripMenuItem;
    private ToolStripMenuItem m_backToolStripMenuItem;
    private ToolStripMenuItem m_refreshToolStripMenuItem;
    private ToolStripMenuItem m_printToolStripMenuItem;
    private ToolStripMenuItem m_printLayoutToolStripMenuItem;
    private ToolStripMenuItem m_exportToolStripMenuItem;
    private ToolStripMenuItem m_stopToolStripMenuItem;
    private ToolStripMenuItem m_zoomToolStripMenuItem;
    private ToolStripMenuItem m_pageSetupToolStripMenuItem;
    private ReportViewer m_viewerControl;
    private Dictionary`2<string, Point> m_previousChildActionPoints;
    private int m_previousPageWidth;
    public bool ShowContextMenu { get; public set; }
    public DrawablePage CurrentPage { get; public set; }
    public ReportViewer ViewerControl { get; public set; }
    [CompilerGeneratedAttribute]
public void add_PageNavigation(InternalPageNavigationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PageNavigation(InternalPageNavigationEventHandler value);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public void add_Back(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Back(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_ReportRefresh(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ReportRefresh(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Print(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Print(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PageSettings(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PageSettings(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Export(ExportEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Export(ExportEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ZoomChange(ZoomChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ZoomChange(ZoomChangedEventHandler value);
    private void OnDocumentMapClick(object sender, EventArgs e);
    private void OnBackClick(object sender, EventArgs e);
    private void OnReportRefreshClick(object sender, EventArgs e);
    private void OnPrintClick(object sender, EventArgs e);
    private void OnPrintLayoutClick(object sender, EventArgs e);
    private void OnPageSettingsClick(object sender, EventArgs e);
    private void OnExportClick(object sender, EventArgs e);
    private void OnStopClick(object sender, EventArgs e);
    private void OnZoomClick(object sender, EventArgs e);
    private void OnContextMenuOpening(object sender, CancelEventArgs e);
    private void OnContextMenuOpened(object sender, EventArgs e);
    private void OnContextMenuClosed(object sender, EventArgs e);
    protected virtual void OnMouseWheel(MouseEventArgs e);
    private void OnMouseClick(object sender, MouseEventArgs e);
    private void InitializeContextMenu();
    private void ApplyContextMenuCustomResources();
    public bool get_ShowContextMenu();
    public void set_ShowContextMenu(bool value);
    private void UpdateScrollBarIncrements();
    protected virtual void OnSizeChanged(EventArgs e);
    protected virtual void OnScroll(ScrollEventArgs se);
    private void OnRenderingPanelSizeChanged(object sender, EventArgs e);
    internal void SetToolStripRenderer(ToolStripRenderer renderer);
    internal void ApplyCustomResources();
    private void InitializeComponent();
    private ReportActions GetCurrentPageActions();
    private int GetCurrentPageWidth();
    public void ProcessCurrentAction();
    private void MoveToNextAction(bool reverse);
    protected virtual bool IsInputKey(Keys keyData);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private void OnPageNavigation(int newPage, ActionType postRenderAction);
    private void ScrollReportView(bool isVerticalScroll, bool scrollByViewSize, bool isPositiveMovement);
    private Point MirrorPointForRTL(Point focusPoint);
    private void MaintainChildActionView(Point newPoint, Point origPoint);
    private void BringItemToView(Point focusPoint, FocusMode focusMode);
    public void SetAutoScrollLocation(Point point);
    public void SetFocusPoint(Point focusPoint, FocusMode focusMode);
    public void SetFocusPointMm(PointF focusPoint, FocusMode focusMode);
    private bool IsExtentVisible(bool checkVerticalExtent, bool checkPositiveDirection);
    public void SetBookmarkFocusPoint(string bookmarkId);
    public void SetActionFocusPoint(ActionType actionType, string actionId);
    public float GetZoomRate();
    public DrawablePage get_CurrentPage();
    public void set_CurrentPage(DrawablePage value);
    public ReportViewer get_ViewerControl();
    public void set_ViewerControl(ReportViewer value);
    public void ScrollReport(bool positiveDirection);
    public void SetZoom();
    private void OnReportViewerStateChanged(object sender, EventArgs e);
    public void RenderToGraphics(Graphics g, bool testMode);
    protected virtual AccessibleObject CreateAccessibilityInstance();
}
public class Microsoft.Reporting.WinForms.ReportParameter : object {
    private string m_name;
    private StringCollection m_value;
    private bool m_visible;
    public string Name { get; public set; }
    public StringCollection Values { get; public set; }
    public bool Visible { get; public set; }
    public ReportParameter(string name);
    public ReportParameter(string name, string value);
    public ReportParameter(string name, String[] values);
    public ReportParameter(string name, string value, bool visible);
    public ReportParameter(string name, String[] values, bool visible);
    public string get_Name();
    public void set_Name(string value);
    public StringCollection get_Values();
    public void set_Values(StringCollection value);
    public bool get_Visible();
    public void set_Visible(bool value);
    internal static NameValueCollection ToNameValueCollection(IEnumerable`1<ReportParameter> reportParameters);
    internal static ReportParameter[] FromNameValueCollection(NameValueCollection parameterColl);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Reporting.WinForms.ReportParameterCollection : Collection`1<ReportParameter> {
    public ReportParameter Item { get; }
    public ReportParameter get_Item(string name);
}
public class Microsoft.Reporting.WinForms.ReportParameterInfo : object {
    private string m_name;
    private ParameterDataType m_dataType;
    private bool m_isNullable;
    private bool m_allowBlank;
    private bool m_isMultiValue;
    private bool m_isQueryParameter;
    private string m_prompt;
    private bool m_promptUser;
    private bool m_areDefaultValuesQueryBased;
    private bool m_areValidValuesQueryBased;
    private string m_errorMessage;
    private IList`1<ValidValue> m_validValues;
    private IList`1<string> m_currentValues;
    private ParameterState m_state;
    private ReportParameterInfoCollection m_dependencyCollection;
    private ReportParameterInfoCollection m_dependentsCollection;
    private String[] m_dependencies;
    private List`1<ReportParameterInfo> m_dependentsCollectionConstruction;
    private bool m_visible;
    internal bool HasUnsatisfiedDownstreamParametersWithDefaults { get; }
    public string Name { get; }
    public ParameterDataType DataType { get; }
    public bool Nullable { get; }
    public bool AllowBlank { get; }
    public bool MultiValue { get; }
    public bool IsQueryParameter { get; }
    public string Prompt { get; }
    public bool PromptUser { get; }
    public ReportParameterInfoCollection Dependencies { get; }
    public ReportParameterInfoCollection Dependents { get; }
    public bool AreValidValuesQueryBased { get; }
    public IList`1<ValidValue> ValidValues { get; }
    public bool AreDefaultValuesQueryBased { get; }
    public IList`1<string> Values { get; public set; }
    public ParameterState State { get; }
    public string ErrorMessage { get; }
    public bool Visible { get; internal set; }
    internal ReportParameterInfo(string name, ParameterDataType dataType, bool isNullable, bool allowBlank, bool isMultiValue, bool isQueryParameter, string prompt, bool promptUser, bool areDefaultValuesQueryBased, bool areValidValuesQueryBased, string errorMessage, String[] currentValues, IList`1<ValidValue> validValues, String[] dependencies, ParameterState state);
    internal void SetDependencies(ReportParameterInfoCollection coll);
    internal bool get_HasUnsatisfiedDownstreamParametersWithDefaults();
    public string get_Name();
    public ParameterDataType get_DataType();
    public bool get_Nullable();
    public bool get_AllowBlank();
    public bool get_MultiValue();
    public bool get_IsQueryParameter();
    public string get_Prompt();
    public bool get_PromptUser();
    public ReportParameterInfoCollection get_Dependencies();
    public ReportParameterInfoCollection get_Dependents();
    public bool get_AreValidValuesQueryBased();
    public IList`1<ValidValue> get_ValidValues();
    public bool get_AreDefaultValuesQueryBased();
    public IList`1<string> get_Values();
    public void set_Values(IList`1<string> value);
    public ParameterState get_State();
    public string get_ErrorMessage();
    public bool get_Visible();
    internal void set_Visible(bool value);
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WinForms.ReportParameterInfoCollection : ReadOnlyCollection`1<ReportParameterInfo> {
    public ReportParameterInfo Item { get; }
    internal ReportParameterInfoCollection(IList`1<ReportParameterInfo> parameterInfos);
    public ReportParameterInfo get_Item(string name);
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WinForms.ReportParametersEventArgs : CancelEventArgs {
    private ReportParameterCollection m_parameters;
    private bool m_autoSubmit;
    public ReportParameterCollection Parameters { get; }
    public bool AutoSubmit { get; }
    internal ReportParametersEventArgs(ReportParameterCollection parameters, bool autoSubmit);
    public ReportParameterCollection get_Parameters();
    public bool get_AutoSubmit();
}
public class Microsoft.Reporting.WinForms.ReportParametersEventHandler : MulticastDelegate {
    public ReportParametersEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ReportParametersEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ReportParametersEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[CompilerGeneratedAttribute]
internal class Microsoft.Reporting.WinForms.ReportPreviewStrings : object {
    public static CultureInfo Culture { get; public set; }
    public static string StopProcessing { get; }
    public static string ExportErrors { get; }
    public static string HyperlinkError { get; }
    public static string ParamsErrors { get; }
    public static string AllFiles { get; }
    public static string NoMatches { get; }
    public static string NoMoreMatches { get; }
    public static string NotSearching { get; }
    public static string GenericMessageBoxCaption { get; }
    public static string BadReportDataSourceType { get; }
    public static string ViewReportButton { get; }
    public static string DateTimeTooltip { get; }
    public static string StringTooltip { get; }
    public static string FloatTooltip { get; }
    public static string IntTooltip { get; }
    public static string BoolTooltip { get; }
    public static string TrueButtonLabel { get; }
    public static string FalseButtonLabel { get; }
    public static string NullTooltip { get; }
    public static string NullParameterLabel { get; }
    public static string NullValue { get; }
    public static string LogInNamePrompt { get; }
    public static string PasswordPrompt { get; }
    public static string SelectAll { get; }
    public static string SelectValidValue { get; }
    public static string FullPage { get; }
    public static string PageWidth { get; }
    public static string DocMapToolTipText { get; }
    public static string DocMapAccessibleName { get; }
    public static string DocMapHotAreaAccessibleName { get; }
    public static string ShowParamsToolTipText { get; }
    public static string ShowParamsAccessibleName { get; }
    public static string ShowParamsHotAreaAccessibleName { get; }
    public static string FirstPageToolTipText { get; }
    public static string FirstPageAccessibleName { get; }
    public static string PreviousPageToolTipText { get; }
    public static string PreviousPageAccessibleName { get; }
    public static string CurrentPageToolTipText { get; }
    public static string CurrentPageAccessibleName { get; }
    public static string LabelOfText { get; }
    public static string TotalPagesToolTipText { get; }
    public static string NextPageToolTipText { get; }
    public static string NextPageAccessibleName { get; }
    public static string LastPageToolTipText { get; }
    public static string LastPageAccessibleName { get; }
    public static string BackToolTipText { get; }
    public static string BackAccessibleName { get; }
    public static string StopToolTipText { get; }
    public static string StopAccessibleName { get; }
    public static string RefreshToolTipText { get; }
    public static string RefreshAccessibleName { get; }
    public static string PrintToolTipText { get; }
    public static string PrintAccessibleName { get; }
    public static string PrintPreviewToolTipText { get; }
    public static string PrintPreviewAccessibleName { get; }
    public static string PageSetupToolTipText { get; }
    public static string PageSetupAccessibleName { get; }
    public static string ExportToolTipText { get; }
    public static string ExportAccessibleDescription { get; }
    public static string ExportAccessibleName { get; }
    public static string ExportDialogTitle { get; }
    public static string ExportDialogCancelButton { get; }
    public static string ExportDialogStatusText { get; }
    public static string ZoomToolTipText { get; }
    public static string ZoomAccessibleName { get; }
    public static string SearchTextBoxToolTipText { get; }
    public static string SearchTextBoxAccessibleName { get; }
    public static string FindToolTipText { get; }
    public static string FindText { get; }
    public static string FindAccessibleName { get; }
    public static string FindNextToolTipText { get; }
    public static string FindNextText { get; }
    public static string FindNextAccessibleName { get; }
    public static string ReportToolBarAccessibleName { get; }
    public static string DocumentMapMenuItemText { get; }
    public static string BackMenuItemText { get; }
    public static string RefreshMenuItemText { get; }
    public static string PrintMenuItemText { get; }
    public static string PrintLayoutMenuItemText { get; }
    public static string ExportMenuItemText { get; }
    public static string StopMenuItemText { get; }
    public static string ZoomMenuItemText { get; }
    public static string PageSetupMenuItemText { get; }
    public static string SetReportEmbeddedResource { get; }
    public static string InvalidRGDIStream { get; }
    public static string ReportItemAccessibleNameImage { get; }
    public static string ReportItemAccessibleNameLine { get; }
    public static string ReportItemAccessibleNameTextBox { get; }
    public static string ReportItemAccessibleNameBody { get; }
    public static string ReportItemAccessibleNameHeader { get; }
    public static string ReportItemAccessibleNameFooter { get; }
    public static string ReportItemAccessibleNameRectangle { get; }
    public static string ReportItemAccessibleNameSubreport { get; }
    public static string ReportItemAccessibleNameTablix { get; }
    public static string ReportItemAccessibleNameChart { get; }
    public static string ReportItemAccessibleNameGaugePanel { get; }
    public static string ReportItemAccessibleNameMap { get; }
    public static string ReportAccessibleName { get; }
    public static string ReportActionAccessibleNameBookmark { get; }
    public static string ReportActionAccessibleNameDocumentMap { get; }
    public static string ReportActionAccessibleNameDrillThrough { get; }
    public static string ReportActionAccessibleNameHyperLink { get; }
    public static string ReportActionAccessibleNameSort { get; }
    public static string ReportActionAccessibleNameToggle { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_StopProcessing();
    public static string get_ExportErrors();
    public static string get_HyperlinkError();
    public static string get_ParamsErrors();
    public static string get_AllFiles();
    public static string get_NoMatches();
    public static string get_NoMoreMatches();
    public static string get_NotSearching();
    public static string get_GenericMessageBoxCaption();
    public static string get_BadReportDataSourceType();
    public static string get_ViewReportButton();
    public static string get_DateTimeTooltip();
    public static string get_StringTooltip();
    public static string get_FloatTooltip();
    public static string get_IntTooltip();
    public static string get_BoolTooltip();
    public static string get_TrueButtonLabel();
    public static string get_FalseButtonLabel();
    public static string get_NullTooltip();
    public static string get_NullParameterLabel();
    public static string get_NullValue();
    public static string get_LogInNamePrompt();
    public static string get_PasswordPrompt();
    public static string get_SelectAll();
    public static string get_SelectValidValue();
    public static string get_FullPage();
    public static string get_PageWidth();
    public static string get_DocMapToolTipText();
    public static string get_DocMapAccessibleName();
    public static string get_DocMapHotAreaAccessibleName();
    public static string get_ShowParamsToolTipText();
    public static string get_ShowParamsAccessibleName();
    public static string get_ShowParamsHotAreaAccessibleName();
    public static string get_FirstPageToolTipText();
    public static string get_FirstPageAccessibleName();
    public static string get_PreviousPageToolTipText();
    public static string get_PreviousPageAccessibleName();
    public static string get_CurrentPageToolTipText();
    public static string get_CurrentPageAccessibleName();
    public static string get_LabelOfText();
    public static string get_TotalPagesToolTipText();
    public static string get_NextPageToolTipText();
    public static string get_NextPageAccessibleName();
    public static string get_LastPageToolTipText();
    public static string get_LastPageAccessibleName();
    public static string get_BackToolTipText();
    public static string get_BackAccessibleName();
    public static string get_StopToolTipText();
    public static string get_StopAccessibleName();
    public static string get_RefreshToolTipText();
    public static string get_RefreshAccessibleName();
    public static string get_PrintToolTipText();
    public static string get_PrintAccessibleName();
    public static string get_PrintPreviewToolTipText();
    public static string get_PrintPreviewAccessibleName();
    public static string get_PageSetupToolTipText();
    public static string get_PageSetupAccessibleName();
    public static string get_ExportToolTipText();
    public static string get_ExportAccessibleDescription();
    public static string get_ExportAccessibleName();
    public static string get_ExportDialogTitle();
    public static string get_ExportDialogCancelButton();
    public static string get_ExportDialogStatusText();
    public static string get_ZoomToolTipText();
    public static string get_ZoomAccessibleName();
    public static string get_SearchTextBoxToolTipText();
    public static string get_SearchTextBoxAccessibleName();
    public static string get_FindToolTipText();
    public static string get_FindText();
    public static string get_FindAccessibleName();
    public static string get_FindNextToolTipText();
    public static string get_FindNextText();
    public static string get_FindNextAccessibleName();
    public static string get_ReportToolBarAccessibleName();
    public static string get_DocumentMapMenuItemText();
    public static string get_BackMenuItemText();
    public static string get_RefreshMenuItemText();
    public static string get_PrintMenuItemText();
    public static string get_PrintLayoutMenuItemText();
    public static string get_ExportMenuItemText();
    public static string get_StopMenuItemText();
    public static string get_ZoomMenuItemText();
    public static string get_PageSetupMenuItemText();
    public static string get_SetReportEmbeddedResource();
    public static string get_InvalidRGDIStream();
    public static string get_ReportItemAccessibleNameImage();
    public static string get_ReportItemAccessibleNameLine();
    public static string get_ReportItemAccessibleNameTextBox();
    public static string get_ReportItemAccessibleNameBody();
    public static string get_ReportItemAccessibleNameHeader();
    public static string get_ReportItemAccessibleNameFooter();
    public static string get_ReportItemAccessibleNameRectangle();
    public static string get_ReportItemAccessibleNameSubreport();
    public static string get_ReportItemAccessibleNameTablix();
    public static string get_ReportItemAccessibleNameChart();
    public static string get_ReportItemAccessibleNameGaugePanel();
    public static string get_ReportItemAccessibleNameMap();
    public static string get_ReportAccessibleName();
    public static string get_ReportActionAccessibleNameBookmark();
    public static string get_ReportActionAccessibleNameDocumentMap();
    public static string get_ReportActionAccessibleNameDrillThrough();
    public static string get_ReportActionAccessibleNameHyperLink();
    public static string get_ReportActionAccessibleNameSort();
    public static string get_ReportActionAccessibleNameToggle();
    public static string NullCheckAccessibleName(string parameterName);
    public static string DropDownIconAccessibleName(string parameterName);
    public static string UserNameTooltip(string name, string ext);
    public static string PasswordTooltip(string name, string ext);
    public static string ZoomPercent(int percent);
    public static string RGDIStreamVersionInfo(string version, string expectedVersion);
    public static string MissingValueClientError(string prompt);
    public static string MissingSelectionClientError(string prompt);
    public static string MissingCredentials(string prompt);
}
internal class Microsoft.Reporting.WinForms.ReportPrintDocument : PrintDocument {
    private FileManager m_fileManager;
    private PageSettings m_pageSettings;
    private int m_currentPage;
    private int m_endPage;
    private int m_hardMarginX;
    private int m_hardMarginY;
    internal ReportPrintDocument(FileManager fileManager, PageSettings pageSettings);
    protected virtual void OnBeginPrint(PrintEventArgs e);
    protected virtual void OnPrintPage(PrintPageEventArgs e);
    protected virtual void OnQueryPageSettings(QueryPageSettingsEventArgs e);
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WinForms.ReportPrintEventArgs : CancelEventArgs {
    private PrinterSettings m_printerSettings;
    public PrinterSettings PrinterSettings { get; public set; }
    internal ReportPrintEventArgs(PrinterSettings printerSettings);
    public PrinterSettings get_PrinterSettings();
    public void set_PrinterSettings(PrinterSettings value);
}
public class Microsoft.Reporting.WinForms.ReportPrintEventHandler : MulticastDelegate {
    public ReportPrintEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ReportPrintEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ReportPrintEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Reporting.WinForms.ReportSecurityException : ReportViewerException {
    internal ReportSecurityException(string message);
    private ReportSecurityException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Reporting.WinForms.ReportServerCredentials : object {
    private object m_syncObject;
    private WindowsIdentity m_impersonationUser;
    private ICredentials m_networkCredentials;
    private Cookie m_formsCookie;
    private string m_formsUserName;
    private string m_formsPassword;
    private string m_formsAuthority;
    [CompilerGeneratedAttribute]
private EventHandler Change;
    public WindowsIdentity ImpersonationUser { get; public set; }
    public ICredentials NetworkCredentials { get; public set; }
    internal ReportServerCredentials(object syncObject);
    internal void CopyFrom(ReportServerCredentials other);
    [CompilerGeneratedAttribute]
internal void add_Change(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_Change(EventHandler value);
    private void OnChange();
    public sealed virtual WindowsIdentity get_ImpersonationUser();
    public void set_ImpersonationUser(WindowsIdentity value);
    public sealed virtual ICredentials get_NetworkCredentials();
    public void set_NetworkCredentials(ICredentials value);
    public sealed virtual bool GetFormsCredentials(Cookie& authCookie, String& userName, String& password, String& authority);
    public void SetFormsCredentials(Cookie authCookie, string userName, string password, string authority);
}
public class Microsoft.Reporting.WinForms.ReportServerException : ReportViewerException {
    private static string SoapErrorNamespace;
    private string m_errorCode;
    public string ErrorCode { get; }
    protected ReportServerException(string message, string errorCode, Exception innerException);
    protected ReportServerException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_ErrorCode();
    internal static ReportServerException FromException(Exception e);
    internal static ReportServerException FromMoreInformationNode(XmlNode moreInfoNode);
    private static XmlNode GetNestedMoreInformationNode(XmlNode node);
}
internal class Microsoft.Reporting.WinForms.ReportToolBar : UserControl {
    [CompilerGeneratedAttribute]
private ZoomChangedEventHandler ZoomChange;
    [CompilerGeneratedAttribute]
private PageNavigationEventHandler PageNavigation;
    [CompilerGeneratedAttribute]
private ExportEventHandler Export;
    [CompilerGeneratedAttribute]
private SearchEventHandler Search;
    [CompilerGeneratedAttribute]
private EventHandler ReportRefresh;
    [CompilerGeneratedAttribute]
private EventHandler Print;
    [CompilerGeneratedAttribute]
private EventHandler Back;
    [CompilerGeneratedAttribute]
private EventHandler PageSetup;
    private bool m_ignoreZoomEvents;
    private ReportViewer m_currentViewerControl;
    private ToolStripButton firstPage;
    private ToolStripButton previousPage;
    private ToolStripTextBox currentPage;
    private ToolStripLabel labelOf;
    private ToolStripLabel totalPages;
    private ToolStripButton nextPage;
    private ToolStripButton lastPage;
    private ToolStripSeparator toolStripSeparator2;
    private ToolStripButton back;
    private ToolStripButton stop;
    private ToolStripButton refresh;
    private ToolStripSeparator toolStripSeparator3;
    private ToolStripButton print;
    private ToolStripButton printPreview;
    private ToolStripSeparator separator4;
    private ToolStrip toolStrip1;
    private ToolStripComboBox zoom;
    private ToolStripTextBox textToFind;
    private ToolStripButton find;
    private ToolStripSeparator toolStripSeparator4;
    private ToolStripButton findNext;
    private ToolStripButton pageSetup;
    private ToolStripDropDownButton export;
    public Size MinimumSize { get; public set; }
    public Size MaximumSize { get; public set; }
    internal ReportViewer ViewerControl { get; internal set; }
    protected virtual void Dispose(bool disposing);
    protected virtual void OnLoad(EventArgs e);
    internal void ApplyCustomResources();
    private void ApplyLocalizedResources();
    internal void SetToolStripRenderer(ToolStripRenderer renderer);
    private Size GetIdealSize();
    private void InitializeComponent();
    [CompilerGeneratedAttribute]
public void add_ZoomChange(ZoomChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ZoomChange(ZoomChangedEventHandler value);
    private void OnZoomChanged(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
public void add_PageNavigation(PageNavigationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PageNavigation(PageNavigationEventHandler value);
    private void OnPageNavigation(int newPage);
    [CompilerGeneratedAttribute]
public void add_Export(ExportEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Export(ExportEventHandler value);
    private void OnExport(object sender, ToolStripItemClickedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_Search(SearchEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Search(SearchEventHandler value);
    private void OnSearch(object sender, SearchEventArgs se);
    [CompilerGeneratedAttribute]
public void add_ReportRefresh(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ReportRefresh(EventHandler value);
    private void OnRefresh(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
public void add_Print(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Print(EventHandler value);
    private void OnPrint(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
public void add_Back(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Back(EventHandler value);
    private void OnBack(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
public void add_PageSetup(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PageSetup(EventHandler value);
    private void OnPageSetupClick(object sender, EventArgs e);
    public virtual Size get_MinimumSize();
    public virtual void set_MinimumSize(Size value);
    public virtual Size get_MaximumSize();
    public virtual void set_MaximumSize(Size value);
    internal ReportViewer get_ViewerControl();
    internal void set_ViewerControl(ReportViewer value);
    public void SetZoom();
    private void PopulateExportList();
    private void OnPageNavButtonClick(object sender, EventArgs e);
    private void find_Click(object sender, EventArgs e);
    private void findNext_Click(object sender, EventArgs e);
    private void textToFind_TextChanged(object sender, EventArgs e);
    private void textToFind_KeyPress(object sender, KeyPressEventArgs e);
    private void OnPrintPreviewClick(object sender, EventArgs e);
    private void OnStopClick(object sender, EventArgs e);
    private void OnReportViewerStateChanged(object sender, EventArgs e);
    private void CurrentPage_KeyPress(object sender, KeyPressEventArgs e);
}
internal class Microsoft.Reporting.WinForms.ReportToolTip : Action {
    internal string Caption;
    public ReportToolTip(string id, ShapeType shape, RectangleF position, Single[] path, string caption);
    public ReportToolTip(string id, RectangleF position, string caption);
}
[DesignerAttribute("Microsoft.Reporting.WinForms.ReportViewerDesigner, Microsoft.ReportViewer.Design, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91", "System.ComponentModel.Design.IDesigner")]
[DockingAttribute]
[SRDescriptionAttribute("ReportViewerDescription")]
public class Microsoft.Reporting.WinForms.ReportViewer : UserControl {
    public static int MaximumPageCount;
    [CompilerGeneratedAttribute]
private ZoomChangedEventHandler ZoomChange;
    [CompilerGeneratedAttribute]
private PageNavigationEventHandler PageNavigation;
    [CompilerGeneratedAttribute]
private ExportEventHandler ReportExport;
    [CompilerGeneratedAttribute]
private CancelEventHandler ReportRefresh;
    [CompilerGeneratedAttribute]
private ReportPrintEventHandler Print;
    [CompilerGeneratedAttribute]
private ReportPrintEventHandler PrintingBegin;
    [CompilerGeneratedAttribute]
private BackEventHandler Back;
    [CompilerGeneratedAttribute]
private BookmarkNavigationEventHandler BookmarkNavigation;
    [CompilerGeneratedAttribute]
private CancelEventHandler Toggle;
    [CompilerGeneratedAttribute]
private DrillthroughEventHandler Drillthrough;
    [CompilerGeneratedAttribute]
private CancelEventHandler ViewButtonClick;
    [CompilerGeneratedAttribute]
private SortEventHandler Sort;
    [CompilerGeneratedAttribute]
private HyperlinkEventHandler Hyperlink;
    [CompilerGeneratedAttribute]
private DocumentMapNavigationEventHandler DocumentMapNavigation;
    [CompilerGeneratedAttribute]
private RenderingCompleteEventHandler RenderingComplete;
    [CompilerGeneratedAttribute]
private CancelEventHandler RenderingBegin;
    [CompilerGeneratedAttribute]
private SearchEventHandler Search;
    [CompilerGeneratedAttribute]
private ReportErrorEventHandler ReportError;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> StatusChanged;
    [CompilerGeneratedAttribute]
private ReportCredentialsEventHandler SubmittingDataSourceCredentials;
    [CompilerGeneratedAttribute]
private ReportParametersEventHandler SubmittingParameterValues;
    [CompilerGeneratedAttribute]
private EventHandler PageSettingsChanged;
    private bool m_showToolbar;
    private bool m_showParameterPrompts;
    private bool m_showCredentialPrompts;
    private bool m_promptAreaCollapsed;
    private bool m_docMapCollapsed;
    private bool m_showProgress;
    private int m_toolbarVisibility;
    private UIState m_lastUIState;
    private SearchState m_searchState;
    private bool m_userChangedSplitter;
    private PageCountMode m_pageCountMode;
    private ZoomMode m_zoomMode;
    private int m_zoomPercent;
    private ProcessingMode m_processingMode;
    private PrinterSettings m_printerSettings;
    private DisplayMode m_viewMode;
    private Timer m_autoRefreshTimer;
    private ProcessingThread m_processingThread;
    private RVSplitContainer paramsSplitContainer;
    private AsyncWaitControl m_asyncWaitControl;
    private Timer m_asyncWaitControlTimer;
    private int m_waitControlDisplayAfter;
    private bool m_canRenderForWaitControl;
    private RSParams rsParams;
    private ReportToolBar reportToolBar;
    private RVSplitContainer dmSplitContainer;
    private RSDocMap rsDocMap;
    private WinRSviewer winRSviewer;
    private bool m_disposing;
    private ReportHierarchy m_reportHierarchy;
    private IReportViewerMessages m_reportViewerMessages;
    private Queue`1<MethodInvoker> m_pendingAsyncInvokes;
    private ToolStripRenderer m_toolStripRenderer;
    private ReportViewerStatus m_status;
    [DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("ServerReportDesc")]
public ServerReport ServerReport { get; }
    [DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("LocalReportDesc")]
public LocalReport LocalReport { get; }
    internal Report Report { get; }
    [DefaultValueAttribute]
public BorderStyle BorderStyle { get; public set; }
    [DefaultValueAttribute("System.Drawing.Color", "White")]
public Color BackColor { get; public set; }
    public Image BackgroundImage { get; public set; }
    public ImageLayout BackgroundImageLayout { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("100")]
[SRDescriptionAttribute("DocMapWidthDesc")]
public int DocumentMapWidth { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DocMapWidthFixedDesc")]
public bool IsDocumentMapWidthFixed { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DocMapCollapsedDesc")]
public bool DocumentMapCollapsed { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("PromptAreaCollapsedDesc")]
public bool PromptAreaCollapsed { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowParameterPromptsDesc")]
public bool ShowParameterPrompts { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowCredentialPromptsDesc")]
public bool ShowCredentialPrompts { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowToolBarDesc")]
public bool ShowToolBar { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowProgressDesc")]
public bool ShowProgress { get; public set; }
    [SRDescriptionAttribute("WaitControlDisplayAfterDesc")]
[DefaultValueAttribute("1000")]
public int WaitControlDisplayAfter { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowContextMenuDesc")]
public bool ShowContextMenu { get; public set; }
    [DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowDocumentMapButtonDesc")]
public bool ShowDocumentMapButton { get; public set; }
    [DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowPromptAreaButtonDesc")]
public bool ShowPromptAreaButton { get; public set; }
    [SRCategoryAttribute("ToolBarCategoryDesc")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowPageNavigationDesc")]
public bool ShowPageNavigationControls { get; public set; }
    [SRCategoryAttribute("ToolBarCategoryDesc")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowBackButtonDesc")]
public bool ShowBackButton { get; public set; }
    [SRCategoryAttribute("ToolBarCategoryDesc")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowStopButtonDesc")]
public bool ShowStopButton { get; public set; }
    [SRCategoryAttribute("ToolBarCategoryDesc")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowRefreshButtonDesc")]
public bool ShowRefreshButton { get; public set; }
    [SRCategoryAttribute("ToolBarCategoryDesc")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowPrintButtonDesc")]
public bool ShowPrintButton { get; public set; }
    [SRCategoryAttribute("ToolBarCategoryDesc")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowExportButtonDesc")]
public bool ShowExportButton { get; public set; }
    [SRCategoryAttribute("ToolBarCategoryDesc")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowZoomButtonDesc")]
public bool ShowZoomControl { get; public set; }
    [SRCategoryAttribute("ToolBarCategoryDesc")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ShowFindButtonDesc")]
public bool ShowFindControls { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ProcessingModeDesc")]
public ProcessingMode ProcessingMode { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IReportViewerMessages Messages { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int CurrentPage { get; public set; }
    [BrowsableAttribute("False")]
public DisplayMode DisplayMode { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("PageCountModeDesc")]
public PageCountMode PageCountMode { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ZoomModeDesc")]
public ZoomMode ZoomMode { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("100")]
[SRDescriptionAttribute("ZoomPercentDesc")]
public int ZoomPercent { get; public set; }
    [BrowsableAttribute("False")]
public int ZoomCalculated { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStripRenderer ToolStripRenderer { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ReportViewerStatus CurrentStatus { get; }
    [SRDescriptionAttribute("KeepSessionAliveDesc")]
[DefaultValueAttribute("True")]
public bool KeepSessionAlive { get; public set; }
    internal ProcessingThread BackgroundThread { get; }
    internal ReportInfo CurrentReport { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SearchState SearchState { get; }
    private PageSettings PageSettings { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public PrinterSettings PrinterSettings { get; public set; }
    private CreateAndRegisterStream PrintCreateAndRegisterStream { get; }
    private bool ParametersAreaSupported { get; }
    private bool Microsoft.Reporting.WinForms.IRenderable.CanRender { get; }
    [CompilerGeneratedAttribute]
public void add_ZoomChange(ZoomChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ZoomChange(ZoomChangedEventHandler value);
    private void OnZoomChanged(object sender, ZoomChangeEventArgs e);
    [CompilerGeneratedAttribute]
public void add_PageNavigation(PageNavigationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PageNavigation(PageNavigationEventHandler value);
    private void OnPageNavigation(object sender, PageNavigationEventArgs e);
    private void OnPageNavigation(object sender, PageNavigationEventArgs e, ActionType postRenderAction);
    private bool OnPageNavigation(int targetPage);
    [CompilerGeneratedAttribute]
public void add_ReportExport(ExportEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ReportExport(ExportEventHandler value);
    private void OnExport(object sender, ReportExportEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ReportRefresh(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ReportRefresh(CancelEventHandler value);
    private void OnRefresh(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
public void add_Print(ReportPrintEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Print(ReportPrintEventHandler value);
    private void OnPrint(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
public void add_PrintingBegin(ReportPrintEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PrintingBegin(ReportPrintEventHandler value);
    private bool OnPrintingBegin(object sender, PrinterSettings printerSettings);
    [CompilerGeneratedAttribute]
public void add_Back(BackEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Back(BackEventHandler value);
    private void OnBack(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
public void add_BookmarkNavigation(BookmarkNavigationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BookmarkNavigation(BookmarkNavigationEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Toggle(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Toggle(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Drillthrough(DrillthroughEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Drillthrough(DrillthroughEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ViewButtonClick(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ViewButtonClick(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Sort(SortEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Sort(SortEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Hyperlink(HyperlinkEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Hyperlink(HyperlinkEventHandler value);
    [CompilerGeneratedAttribute]
public void add_DocumentMapNavigation(DocumentMapNavigationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DocumentMapNavigation(DocumentMapNavigationEventHandler value);
    private void OnDocumentMapNavigation(object sender, DocumentMapNavigationEventArgs e);
    [CompilerGeneratedAttribute]
public void add_RenderingComplete(RenderingCompleteEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RenderingComplete(RenderingCompleteEventHandler value);
    [CompilerGeneratedAttribute]
public void add_RenderingBegin(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RenderingBegin(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Search(SearchEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Search(SearchEventHandler value);
    private void OnSearch(object sender, SearchEventArgs se);
    [CompilerGeneratedAttribute]
public void add_ReportError(ReportErrorEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ReportError(ReportErrorEventHandler value);
    private bool OnError(Exception e);
    [CompilerGeneratedAttribute]
public void add_StatusChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_StatusChanged(EventHandler`1<EventArgs> value);
    private void OnStatusChanged(object sender, EventArgs e);
    private void TriggerWaitControl();
    private void OnWaitPanelTimerTick(object sender, EventArgs e);
    private void SetWaitControlVisibility(bool visible);
    [CompilerGeneratedAttribute]
public void add_SubmittingDataSourceCredentials(ReportCredentialsEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SubmittingDataSourceCredentials(ReportCredentialsEventHandler value);
    private void OnSubmittingDataSourceCredentials(object sender, ReportCredentialsEventArgs credentialArgs);
    [CompilerGeneratedAttribute]
public void add_SubmittingParameterValues(ReportParametersEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SubmittingParameterValues(ReportParametersEventHandler value);
    private void OnSubmittingParameterValues(object sender, ReportParametersEventArgs parameterArgs);
    public ServerReport get_ServerReport();
    public LocalReport get_LocalReport();
    internal Report get_Report();
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public int get_DocumentMapWidth();
    public void set_DocumentMapWidth(int value);
    public bool get_IsDocumentMapWidthFixed();
    public void set_IsDocumentMapWidthFixed(bool value);
    public bool get_DocumentMapCollapsed();
    public void set_DocumentMapCollapsed(bool value);
    public bool get_PromptAreaCollapsed();
    public void set_PromptAreaCollapsed(bool value);
    public bool get_ShowParameterPrompts();
    public void set_ShowParameterPrompts(bool value);
    public bool get_ShowCredentialPrompts();
    public void set_ShowCredentialPrompts(bool value);
    public bool get_ShowToolBar();
    public void set_ShowToolBar(bool value);
    public bool get_ShowProgress();
    public void set_ShowProgress(bool value);
    public int get_WaitControlDisplayAfter();
    public void set_WaitControlDisplayAfter(int value);
    public bool get_ShowContextMenu();
    public void set_ShowContextMenu(bool value);
    public bool get_ShowDocumentMapButton();
    public void set_ShowDocumentMapButton(bool value);
    public bool get_ShowPromptAreaButton();
    public void set_ShowPromptAreaButton(bool value);
    public bool get_ShowPageNavigationControls();
    public void set_ShowPageNavigationControls(bool value);
    public bool get_ShowBackButton();
    public void set_ShowBackButton(bool value);
    public bool get_ShowStopButton();
    public void set_ShowStopButton(bool value);
    public bool get_ShowRefreshButton();
    public void set_ShowRefreshButton(bool value);
    public bool get_ShowPrintButton();
    public void set_ShowPrintButton(bool value);
    public bool get_ShowExportButton();
    public void set_ShowExportButton(bool value);
    public bool get_ShowZoomControl();
    public void set_ShowZoomControl(bool value);
    public bool get_ShowFindControls();
    public void set_ShowFindControls(bool value);
    public ProcessingMode get_ProcessingMode();
    public void set_ProcessingMode(ProcessingMode value);
    public IReportViewerMessages get_Messages();
    public void set_Messages(IReportViewerMessages value);
    public int get_CurrentPage();
    public void set_CurrentPage(int value);
    public DisplayMode get_DisplayMode();
    public PageCountMode get_PageCountMode();
    public void set_PageCountMode(PageCountMode value);
    public ZoomMode get_ZoomMode();
    public void set_ZoomMode(ZoomMode value);
    public int get_ZoomPercent();
    public void set_ZoomPercent(int value);
    public int get_ZoomCalculated();
    public ToolStripRenderer get_ToolStripRenderer();
    public void set_ToolStripRenderer(ToolStripRenderer value);
    public ReportViewerStatus get_CurrentStatus();
    private bool IsVisibilityFlagSet(ToolbarFlags flag);
    private void SetVisibilityFlag(ToolbarFlags flag, bool shouldSet);
    public bool get_KeepSessionAlive();
    public void set_KeepSessionAlive(bool value);
    private void InitializeComponent();
    internal ProcessingThread get_BackgroundThread();
    public int GetTotalPages();
    public int GetTotalPages(PageCountMode& pageCountMode);
    internal ReportInfo get_CurrentReport();
    private void SetCurrentPage(int page, ActionType postActionType, string actionID);
    private void SetViewForCurrentPage(UIState state, PostRenderArgs args);
    internal bool CanMoveToPage(int page);
    private void CancelAllRenderingRequests();
    public bool CancelRendering(int millisecondsTimeout);
    private void RenderDrillthrough(DrillthroughAction action);
    public void PerformBack();
    private void PushReport(LocalReport localReport, ServerReport serverReport);
    public void Clear();
    public void Reset();
    private LocalReport CreateLocalReport();
    private void OnPrintPreviewPageAvailableUI(int pageNumber, bool isLastPage);
    private void OnRenderingComplete(object sender, AsyncCompletedEventArgs args);
    private void PerformPostRenderAction(PostRenderArgs args);
    private void ExportDialogClosed(object sender, EventArgs e);
    internal void DisplayErrorMsgBox(Exception ex, string title);
    private AsyncReportOperationWrapper WrapAsyncOperationForUIThreadNotification(AsyncReportOperation operation);
    private void OnBackgroundThreadCompleted(object sender, AsyncCompletedEventArgs e);
    private void ProcessAsyncInvokes();
    private void RegisterAsyncInvoke(MethodInvoker method);
    private void OnRenderingCompletePrintOnly(object sender, AsyncCompletedEventArgs args);
    private void OnAsyncLoadCompleted(object sender, AsyncCompletedEventArgs args);
    internal void LoadAndRefreshReportAsync(Stream reportDefinition);
    public void RefreshReport();
    private void RefreshReport(int targetPage, PostRenderArgs postRenderArgs);
    public int Find(string searchString, int startPage);
    private int Find(string searchString, int startPage, int endPage);
    private int GetDefaultEndPageForStartPage(int startPage);
    public int FindNext();
    public SearchState get_SearchState();
    public void JumpToBookmark(string bookmarkId);
    public void JumpToDocumentMapId(string documentMapId);
    private void RenderReportWithNewParameters(int pageNumber, PostRenderArgs postRenderArgs);
    public DialogResult PrintDialog();
    public DialogResult PrintDialog(PrinterSettings printerSettings);
    private PrinterSettings CreateDefaultPrintSettings();
    private PageSettings get_PageSettings();
    public PageSettings GetPageSettings();
    public void ResetPageSettings();
    private PageSettings ResetAndGetPageSettings();
    public void SetPageSettings(PageSettings pageSettings);
    public PrinterSettings get_PrinterSettings();
    public void set_PrinterSettings(PrinterSettings value);
    private void RenderForPreview(PostRenderArgs postRenderArgs, bool invalidateCache);
    private CreateAndRegisterStream get_PrintCreateAndRegisterStream();
    private void BeginAsyncRender(string format, bool allowInternalRenderers, string deviceInfo, PageCountMode pageCountMode, CreateAndRegisterStream createStreamCallback, AsyncCompletedEventHandler onCompleteCallback, PostRenderArgs postRenderArgs, bool requireCompletionOnUIThread);
    private void RenderRPLPage(int page, PostRenderArgs postRenderArgs);
    private string CreateEMFDeviceInfo(int startPage, int endPage);
    private static string ToInches(int hundrethsOfInch);
    private Stream CreateStreamEMF(string name, string extension, Encoding encoding, string mimeType, bool useChunking, StreamOper operation);
    private Stream CreateStreamEMFPrintOnly(string name, string extension, Encoding encoding, string mimeType, bool useChunking, StreamOper operation);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnLayout(LayoutEventArgs e);
    private void OnPreferredPromptAreaHeightChanged(object sender, EventArgs e);
    private void OnParamsSplitterMoving(object sender, EventArgs e);
    private void OnPromptAreaCollapse(object sender, EventArgs e);
    private void OnDocumentMapCollapse(object sender, EventArgs e);
    protected virtual void OnLoad(EventArgs e);
    private void ApplySplitterResources(bool allResources);
    public void SetDisplayMode(DisplayMode mode);
    private void OnViewButtonClick(object sender, EventArgs e);
    public DialogResult ExportDialog(RenderingExtension extension);
    public DialogResult ExportDialog(RenderingExtension extension, string deviceInfo);
    public DialogResult ExportDialog(RenderingExtension extension, string deviceInfo, string fileName);
    private void OnPageSetup(object sender, EventArgs e);
    public DialogResult PageSetupDialog();
    [CompilerGeneratedAttribute]
public void add_PageSettingsChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PageSettingsChanged(EventHandler value);
    private void CancelAutoRefreshTimer();
    private void StartAutoRefreshTimer(int autoRefreshSeconds);
    private void SetZoom();
    internal void FireAnAction(Action action, bool shiftKeyDown);
    private void SpawnHyperLink(string url);
    internal void UpdateUIState(Exception e);
    private void UpdateUIState(UIState newState);
    private bool get_ParametersAreaSupported();
    private void RenderToGraphics(Graphics g);
    private sealed virtual override void Microsoft.Reporting.WinForms.IRenderable.RenderToGraphics(Graphics g);
    private sealed virtual override bool Microsoft.Reporting.WinForms.IRenderable.get_CanRender();
}
public class Microsoft.Reporting.WinForms.ReportViewerCookieCollection : SyncList`1<Cookie> {
    internal ReportViewerCookieCollection(object syncObject);
}
public abstract class Microsoft.Reporting.WinForms.ReportViewerException : Exception {
    protected ReportViewerException(string message);
    protected ReportViewerException(string message, Exception innerException);
    protected ReportViewerException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Reporting.WinForms.ReportViewerHeaderCollection : SyncList`1<string> {
    internal ReportViewerHeaderCollection(object syncObject);
}
public class Microsoft.Reporting.WinForms.ReportViewerStatus : object {
    private bool m_canNavigatePages;
    private bool m_canNavigateBack;
    private bool m_inCancelableOperation;
    private bool m_canRefreshData;
    private bool m_canPrint;
    private bool m_canSearch;
    private bool m_canContinueSearch;
    private bool m_canChangeDisplayModes;
    private bool m_canExport;
    private bool m_canChangeZoom;
    private bool m_isPromptingSupported;
    private bool m_hasPromptsToDisplay;
    private bool m_canChangePromptableValues;
    private bool m_arePromptsVisible;
    private bool m_docMapCanBeVisible;
    private bool m_docMapIsVisible;
    private bool m_canInteractWithReportPage;
    private bool m_isInFailedState;
    internal bool IsInFailedState { get; }
    internal bool CanInteractWithReportPage { get; }
    public bool CanNavigatePages { get; }
    public bool CanNavigateBack { get; }
    public bool InCancelableOperation { get; }
    public bool CanRefreshData { get; }
    public bool CanPrint { get; }
    public bool CanSearch { get; }
    public bool CanContinueSearch { get; }
    public bool CanChangeDisplayModes { get; }
    public bool CanExport { get; }
    public bool CanChangeZoom { get; }
    public bool IsPromptingSupported { get; }
    public bool HasPromptsToDisplay { get; }
    public bool CanSubmitPromptAreaValues { get; }
    public bool ArePromptsVisible { get; }
    public bool HasDocumentMapToDisplay { get; }
    public bool IsDocumentMapVisible { get; }
    internal ReportViewerStatus(ReportViewer viewer, UIState state, bool canContinueSearch, bool isPromptingSupported, bool hasPromptsToDisplay, bool hasDocumentMap);
    internal static bool DoesStateAllowInteractWithReportPage(UIState state);
    internal static bool DoesStateAllowPrinting(UIState state);
    internal static bool DoesStateAllowSearch(ReportViewer viewer, UIState state);
    internal static bool DoesStateAllowExport(UIState state);
    internal static bool ShouldPromptsBeVisible(bool havePromptsToDisplay, bool isPromptAreaCollapsed, bool isPromptingSupported);
    internal bool get_IsInFailedState();
    [DebuggerStepThroughAttribute]
internal bool get_CanInteractWithReportPage();
    [DebuggerStepThroughAttribute]
public bool get_CanNavigatePages();
    [DebuggerStepThroughAttribute]
public bool get_CanNavigateBack();
    [DebuggerStepThroughAttribute]
public bool get_InCancelableOperation();
    [DebuggerStepThroughAttribute]
public bool get_CanRefreshData();
    [DebuggerStepThroughAttribute]
public bool get_CanPrint();
    [DebuggerStepThroughAttribute]
public bool get_CanSearch();
    [DebuggerStepThroughAttribute]
public bool get_CanContinueSearch();
    [DebuggerStepThroughAttribute]
public bool get_CanChangeDisplayModes();
    [DebuggerStepThroughAttribute]
public bool get_CanExport();
    [DebuggerStepThroughAttribute]
public bool get_CanChangeZoom();
    [DebuggerStepThroughAttribute]
public bool get_IsPromptingSupported();
    [DebuggerStepThroughAttribute]
public bool get_HasPromptsToDisplay();
    [DebuggerStepThroughAttribute]
public bool get_CanSubmitPromptAreaValues();
    [DebuggerStepThroughAttribute]
public bool get_ArePromptsVisible();
    [DebuggerStepThroughAttribute]
public bool get_HasDocumentMapToDisplay();
    [DebuggerStepThroughAttribute]
public bool get_IsDocumentMapVisible();
}
internal class Microsoft.Reporting.WinForms.ResizableToolStripPanel : Panel {
    private Control m_control;
    private DropDownResizeGlyph m_resizeControl;
    private Size m_minimumSize;
    private Point parentLocation;
    public ResizableToolStripPanel(Control c);
    protected virtual void OnGotFocus(EventArgs e);
    private void ResizeControl_Inflate(object sender, ResizeEventArgs e);
}
internal class Microsoft.Reporting.WinForms.ResizeEventArgs : EventArgs {
    private int m_deltaX;
    private int m_deltaY;
    internal int DeltaX { get; }
    internal int DeltaY { get; }
    internal ResizeEventArgs(int deltaX, int deltaY);
    internal int get_DeltaX();
    internal int get_DeltaY();
}
internal class Microsoft.Reporting.WinForms.RSDocMap : TreeView {
    private Container components;
    [CompilerGeneratedAttribute]
private DocumentMapNavigationEventHandler DocumentMapNavigation;
    private Dictionary`2<string, NodeData> m_allNodes;
    private bool m_hasDocMap;
    public bool HasDocMap { get; }
    [CompilerGeneratedAttribute]
public void add_DocumentMapNavigation(DocumentMapNavigationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DocumentMapNavigation(DocumentMapNavigationEventHandler value);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
    public bool get_HasDocMap();
    public void Clear();
    public void PopulateTree(DocumentMapNode rootNode);
    private void AddChildren(DocumentMapNode thisNode, TreeNode inTreeNode);
    private void AddNodeData(DocumentMapNode node, TreeNode inTreeNode);
    protected virtual void OnNodeMouseClick(TreeNodeMouseClickEventArgs e);
    protected virtual void OnAfterSelect(TreeViewEventArgs e);
    private void PerformNavigationForNode(TreeNode node);
    public Point GetFocusPoint(string id);
    public void UpdateTreeForPage(Dictionary`2<string, LabelPoint> labels);
}
internal class Microsoft.Reporting.WinForms.RSParams : MirrorPanel {
    [CompilerGeneratedAttribute]
private EventHandler ViewButtonClick;
    [CompilerGeneratedAttribute]
private ReportCredentialsEventHandler SubmitDataSourceCredentials;
    [CompilerGeneratedAttribute]
private ReportParametersEventHandler SubmitParameters;
    [CompilerGeneratedAttribute]
private EventHandler PreferredHeightChanged;
    private IContainer components;
    internal static int SEPARATOR;
    internal static int MIN_LABEL_WIDTH;
    internal static int MAX_LABEL_HEIGHT;
    internal static int EDIT_CONTROL_WIDTH;
    internal static int DROPDOWN_HEIGHT;
    internal static int PADDING;
    internal static int TOP_PADDING;
    internal static int LEFT_PADDING;
    internal static int EMPTY_COLUMN_WIDTH;
    internal static int EMPTY_ROW_HEIGHT;
    private int m_preferredHeight;
    private ToolTip toolTipForParams;
    private MirrorPanel buttonPanel;
    private Button viewReport;
    private Splitter splitterViewer;
    private MirrorPanel promptPanel;
    private ReportViewer m_currentViewerControl;
    private bool m_credentialsHaveChanged;
    private bool m_allCredentialsSatisfied;
    private List`1<DataSourcePromptControl> m_dataSourcePrompts;
    private ReportParameterInfoCollection m_paramInfos;
    private ParametersPaneLayout m_paramLayout;
    private ParameterControlCollection m_paramControls;
    private ColumnControlCollection m_leftColumnControls;
    private LinkLabel linkChangeCredentials;
    private bool m_linkCredentialsVisible;
    private ColumnControlCollection m_rightColumnControls;
    internal ReportViewer ViewerControl { get; internal set; }
    internal Report Report { get; }
    public bool HaveContent { get; }
    public int PreferredHeight { get; }
    protected virtual void Dispose(bool disposing);
    internal void ApplyCustomResources();
    private void InitializeComponent();
    internal virtual ReportViewer get_ViewerControl();
    internal virtual void set_ViewerControl(ReportViewer value);
    internal virtual Report get_Report();
    [CompilerGeneratedAttribute]
public void add_ViewButtonClick(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ViewButtonClick(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_SubmitDataSourceCredentials(ReportCredentialsEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SubmitDataSourceCredentials(ReportCredentialsEventHandler value);
    [CompilerGeneratedAttribute]
public void add_SubmitParameters(ReportParametersEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SubmitParameters(ReportParametersEventHandler value);
    public bool get_HaveContent();
    public void Clear();
    internal void EnsureParamsLoaded();
    private void EnsureParamsLoaded(bool forceCredentialsShown, ReportParameterInfoCollection parameterInfos);
    public void ValidateReportInputsSatisfied();
    private void SetViewReportPosition();
    private ReportDataSourceInfoCollection GetDataSources(Boolean& allSatisfied);
    private void AddDataSourcePrompts(ReportDataSourceInfoCollection dsInfos);
    private void CreateParameterPrompts(ReportParameterInfoCollection parameterInfos);
    private void AddParameterPrompts();
    private void SetAutoPostbackOnDependencies(ReportParameterInfo p);
    private void viewReport_Click(object sender, EventArgs e);
    private bool ValidateVisiblePrompts();
    private void OnChangeCredentialsClicked(object sender, LinkLabelLinkClickedEventArgs e);
    internal void SaveControlValuesToReport(bool autoSubmit);
    private bool HasDownstreamParametersWithDefaults(ReportParameterInfo rootParam);
    protected virtual bool ProcessDialogKey(Keys keyData);
    public int get_PreferredHeight();
    [CompilerGeneratedAttribute]
public void add_PreferredHeightChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PreferredHeightChanged(EventHandler value);
    private void PromptPanel_Layout(object sender, LayoutEventArgs e);
    private void PromptPanel_LayoutTwoColumns(object sender, LayoutEventArgs e);
    private void GetRowsAndColumnsToRender(Boolean[]& rowsToRender, Boolean[]& columnsToRender);
    private void PromptPanel_LayoutGrid(object sender, LayoutEventArgs e);
    private void OnDependencyChanged(object sender, EventArgs e);
    private void OnCredentialsChanged(object sender, EventArgs e);
    private void SetCredentialLinkVisibility(bool isVisible);
}
internal class Microsoft.Reporting.WinForms.RVSplitContainer : UserControl {
    private bool m_collapsed;
    private bool m_fixed;
    private bool m_tooltipSet;
    private bool m_trackingMouse;
    private bool m_mouseOverCollapseRegion;
    private Color m_splitterHoverColor;
    private Color m_splitterNormalColor;
    private Orientation m_orienation;
    private bool m_panel1Visible;
    private bool m_splitterVisble;
    private int m_splitterDistance;
    private bool m_isSplitterFixed;
    private bool m_canCollapse;
    private static Bitmap[] m_bitmaps;
    private int m_panel1MinSize;
    private int m_panel2MinSize;
    private string m_toolTip;
    [CompilerGeneratedAttribute]
private EventHandler SplitterMoving;
    [CompilerGeneratedAttribute]
private EventHandler CollapsedChanged;
    private IContainer components;
    private TableLayoutPanel tableLayoutPanel1;
    private Panel panel1;
    private Panel panel2;
    private SplitterButton splitter;
    private ToolTip toolTip1;
    public string ToolTip { get; public set; }
    public int Panel1MinSize { get; public set; }
    public int Panel2MinSize { get; public set; }
    public int SplitterDistance { get; public set; }
    public bool Panel1Visible { get; public set; }
    public bool SplitterVisible { get; public set; }
    public bool FixedSize { get; public set; }
    public bool Collapsed { get; public set; }
    public bool IsSplitterFixed { get; public set; }
    public bool CanCollapse { get; public set; }
    public Orientation Orientation { get; public set; }
    public int SplitterWidth { get; }
    public Color SplitterNormalColor { get; public set; }
    public Color SplitterHoverColor { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public Panel Panel1 { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public Panel Panel2 { get; }
    internal SplitterButton Splitter { get; }
    private SizeType CurrentSizeType { get; }
    private Rectangle ButtonRectangle { get; }
    private Bitmap ButtonBitmap { get; }
    private static RVSplitContainer();
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public int get_Panel1MinSize();
    public void set_Panel1MinSize(int value);
    public int get_Panel2MinSize();
    public void set_Panel2MinSize(int value);
    public int get_SplitterDistance();
    public void set_SplitterDistance(int value);
    public bool get_Panel1Visible();
    public void set_Panel1Visible(bool value);
    public bool get_SplitterVisible();
    public void set_SplitterVisible(bool value);
    public bool get_FixedSize();
    public void set_FixedSize(bool value);
    public bool get_Collapsed();
    public void set_Collapsed(bool value);
    public bool get_IsSplitterFixed();
    public void set_IsSplitterFixed(bool value);
    public bool get_CanCollapse();
    public void set_CanCollapse(bool value);
    private void PerformCollapse();
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public int get_SplitterWidth();
    public Color get_SplitterNormalColor();
    public void set_SplitterNormalColor(Color value);
    public Color get_SplitterHoverColor();
    public void set_SplitterHoverColor(Color value);
    public Panel get_Panel1();
    public Panel get_Panel2();
    internal SplitterButton get_Splitter();
    private void splitter_Paint(object sender, PaintEventArgs e);
    private void splitter_Click(object sender, EventArgs e);
    private bool IsMouseOverExpandCollapseRegion(Point mouseLocation);
    private bool CanClickSplitterButton(Point mouseLocation);
    private void splitter_KeyDown(object sender, KeyEventArgs e);
    private void splitter_MouseLeave(object sender, EventArgs e);
    private void splitter_MouseDown(object sender, MouseEventArgs e);
    private void splitter_MouseUp(object sender, MouseEventArgs e);
    private void splitter_MouseMove(object sender, MouseEventArgs e);
    private void MoveSplitterBy(int delta);
    private void MoveSplitterTo(int newSplitterLocation);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnRightToLeftChanged(EventArgs e);
    private void AdjustSplitterDistance(int value);
    private void EnsureVisibility();
    private void EnsureOrientation();
    private SizeType get_CurrentSizeType();
    private void EnsureFixedSize();
    private Rectangle get_ButtonRectangle();
    private Bitmap get_ButtonBitmap();
    [CompilerGeneratedAttribute]
public void add_SplitterMoving(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SplitterMoving(EventHandler value);
    public void OnSplitterMoving();
    [CompilerGeneratedAttribute]
public void add_CollapsedChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CollapsedChanged(EventHandler value);
    public void OnCollapsedChanged(EventArgs e);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WinForms.SearchEventArgs : CancelEventArgs {
    private string m_searchString;
    private int m_startPage;
    private bool m_isFindNext;
    public string SearchString { get; }
    public int StartPage { get; }
    public bool IsFindNext { get; }
    public SearchEventArgs(string searchString, int startPage, bool isFindNext);
    public string get_SearchString();
    public int get_StartPage();
    public bool get_IsFindNext();
}
public class Microsoft.Reporting.WinForms.SearchEventHandler : MulticastDelegate {
    public SearchEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SearchEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SearchEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Reporting.WinForms.SearchMatch : object {
    private RTSelectionHighlight m_match;
    private PointF m_point;
    internal RTSelectionHighlight Match { get; }
    internal PointF Point { get; internal set; }
    internal SearchMatch(RTSelectionHighlight match);
    internal RTSelectionHighlight get_Match();
    internal PointF get_Point();
    internal void set_Point(PointF value);
}
public class Microsoft.Reporting.WinForms.SearchState : object {
    private string m_text;
    private int m_startPage;
    public string Text { get; }
    public int StartPage { get; }
    internal SearchState(string text, int startPage);
    public string get_Text();
    public int get_StartPage();
}
public class Microsoft.Reporting.WinForms.ServerReport : Report {
    private static string ParamServerSession;
    [CompilerGeneratedAttribute]
private EventHandler ExecutionIDChanged;
    [CompilerGeneratedAttribute]
private string <BearerToken>k__BackingField;
    private Uri m_serverUrl;
    private IReportServerCredentials m_serverCredentials;
    private ReportServerCredentials m_serverCredentialsImpl;
    private WindowsIdentity m_serverIdentity;
    private ReportViewerHeaderCollection m_headers;
    private ReportViewerCookieCollection m_cookies;
    private string m_reportPath;
    private string m_historyID;
    private string m_executionID;
    private int m_timeOut;
    private List`1<int> m_hiddenParameters;
    private IReportExecutionService m_service;
    private ExecutionInfo m_executionInfo;
    private TrustedUserHeader m_trustedUserHeader;
    private RenderingExtension[] m_renderingExtensions;
    private AbortState m_abortState;
    internal TrustedUserHeader TrustedUserHeaderValue { get; internal set; }
    [SRDescriptionAttribute("ReportServerUrlDesc")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("System.Uri", "http://localhost/reportserver")]
public Uri ReportServerUrl { get; public set; }
    public string BearerToken { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ReportServerCredentials ReportServerCredentials { get; }
    [SRDescriptionAttribute("ServerTimeoutDesc")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("600000")]
public int Timeout { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ReportViewerHeaderCollection Headers { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ReportViewerCookieCollection Cookies { get; }
    [SRDescriptionAttribute("ServerReportPathDesc")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
public string ReportPath { get; public set; }
    [SRDescriptionAttribute("HistoryIdDesc")]
[NotifyParentPropertyAttribute("True")]
[DefaultValueAttribute("")]
public string HistoryId { get; public set; }
    internal string DisplayNameForUse { get; }
    internal bool HasExecutionId { get; }
    internal bool CanSelfCancel { get; }
    private PageCountMode PageCountMode { get; }
    internal bool HasDocMap { get; }
    internal int AutoRefreshInterval { get; }
    internal bool IsReadyForConnection { get; }
    internal bool IsPreparedReportReadyForRendering { get; }
    private bool IsReadyForProcessingPostTasks { get; }
    private IReportExecutionService Service { get; }
    internal ServerReport(ServerReport original);
    private ServerReport(ServerReport parentReport, ExecutionInfo executionInfo);
    internal ServerReport(SerializationInfo info, StreamingContext context);
    internal TrustedUserHeader get_TrustedUserHeaderValue();
    internal void set_TrustedUserHeaderValue(TrustedUserHeader value);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
internal void add_ExecutionIDChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_ExecutionIDChanged(EventHandler value);
    private void OnExecutionIDChanged();
    internal object SaveViewState();
    internal void LoadViewState(object viewStateObj);
    private void OnCredentialsChanged(IReportServerCredentials credentials);
    public Uri get_ReportServerUrl();
    public void set_ReportServerUrl(Uri value);
    [CompilerGeneratedAttribute]
public string get_BearerToken();
    [CompilerGeneratedAttribute]
public void set_BearerToken(string value);
    public ReportServerCredentials get_ReportServerCredentials();
    public int get_Timeout();
    public void set_Timeout(int value);
    public ReportViewerHeaderCollection get_Headers();
    public ReportViewerCookieCollection get_Cookies();
    public string get_ReportPath();
    public void set_ReportPath(string value);
    public string get_HistoryId();
    public void set_HistoryId(string value);
    internal virtual string get_DisplayNameForUse();
    private static string RetrieveReportNameFromPath(string reportPath);
    internal DateTime GetExecutionSessionExpiration();
    public bool IsQueryExecutionAllowed();
    public virtual ReportParameterInfoCollection GetParameters();
    internal virtual ParametersPaneLayout GetParametersPaneLayout();
    public virtual void SetParameters(IEnumerable`1<ReportParameter> parameters);
    public virtual ReportPageSettings GetDefaultPageSettings();
    public void SetDataSourceCredentials(IEnumerable`1<DataSourceCredentials> credentials);
    public void SetExecutionId(string executionId);
    internal void SetExecutionId(string executionId, bool fullReportLoad);
    internal bool get_HasExecutionId();
    public string GetExecutionId();
    internal virtual bool get_CanSelfCancel();
    internal virtual void SetCancelState(bool shouldCancel);
    public Stream Render(string format, string deviceInfo, NameValueCollection urlAccessParameters, String& mimeType, String& fileNameExtension);
    public void Render(string format, string deviceInfo, NameValueCollection urlAccessParameters, Stream reportStream, String& mimeType, String& fileNameExtension);
    internal void InternalRender(bool isAbortable, string format, string deviceInfo, NameValueCollection urlAccessParameters, Stream reportStream, String& mimeType, String& fileNameExtension);
    public virtual Byte[] Render(string format, string deviceInfo, PageCountMode pageCountMode, String& mimeType, String& encoding, String& fileNameExtension, String[]& streams, Warning[]& warnings);
    private void UpdatedExecutionInfoIfNecessary();
    public Byte[] RenderStream(string format, string streamId, string deviceInfo, String& mimeType, String& encoding);
    internal virtual Byte[] InternalRenderStream(string format, string streamId, string deviceInfo, String& mimeType, String& encoding);
    internal void DeliverReportItem(string format, string deviceInfo, ExtensionSettings extensionSettings, string description, string eventType, string matchData);
    internal virtual void InternalDeliverReportItem(string format, string deviceInfo, ExtensionSettings extensionSettings, string description, string eventType, string matchData);
    public virtual void LoadReportDefinition(TextReader report);
    internal virtual int PerformSearch(string searchText, int startPage, int endPage);
    internal virtual void PerformToggle(string toggleId);
    internal virtual int PerformBookmarkNavigation(string bookmarkId, String& uniqueName);
    internal virtual int PerformDocumentMapNavigation(string documentMapId);
    internal virtual Report PerformDrillthrough(string drillthroughId, String& reportPath);
    internal virtual int PerformSort(string sortId, SortOrder sortDirection, bool clearSort, PageCountMode pageCountMode, String& uniqueName);
    internal void TouchSession();
    public virtual int GetTotalPages(PageCountMode& pageCountMode);
    private PageCountMode get_PageCountMode();
    internal virtual bool get_HasDocMap();
    internal virtual DocumentMapNode GetDocumentMap(string rootLabel);
    internal virtual int get_AutoRefreshInterval();
    public virtual RenderingExtension[] ListRenderingExtensions();
    public virtual void Refresh();
    internal virtual bool get_IsReadyForConnection();
    internal virtual bool get_IsPreparedReportReadyForRendering();
    private bool get_IsReadyForProcessingPostTasks();
    public ReportDataSourceInfoCollection GetDataSources();
    public ReportDataSourceInfoCollection GetDataSources(Boolean& allCredentialsSet);
    public string GetServerVersion();
    private IReportExecutionService get_Service();
    private void ApplyExecutionIdToService(IReportExecutionService service);
    internal virtual void EnsureExecutionSession();
    private void ClearSession();
    private void ClearSession(bool doRefresh);
    private void ClearServerSpecificInfo();
    private int GetIndexForParameter(string parameterName);
    private IReportExecutionService CreateExecutionService();
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(object <p0>, EventArgs <p1>);
}
public enum Microsoft.Reporting.WinForms.Severity : Enum {
    public int value__;
    public static Severity Warning;
    public static Severity Error;
}
internal class Microsoft.Reporting.WinForms.SoapReportExecutionService : object {
    private WindowsIdentity m_impersonationUser;
    private Uri m_reportServerUrl;
    private IReportServerCredentials m_reportServerCredentials;
    private TrustedUserHeader m_trustedUserHeader;
    private IEnumerable`1<string> m_headers;
    private IEnumerable`1<Cookie> m_cookies;
    private int m_timeout;
    private ServerReportSoapProxy m_service;
    private static EndpointVersion EndpointVersion;
    private static int BufferedReadSize;
    [CompilerGeneratedAttribute]
private string <BearerToken>k__BackingField;
    private ICredentials ServerNetworkCredentials { get; }
    private ICredentials DefaultCredentials { get; }
    public string BearerToken { get; public set; }
    private ServerReportSoapProxy Service { get; }
    unknown int Timeout {public set; }
    private int ServerMajorVersion { get; }
    public SoapReportExecutionService(WindowsIdentity impersonationUser, Uri reportServerUrl, IReportServerCredentials reportServerCredentials, TrustedUserHeader trustedUserHeader, IEnumerable`1<string> headers, IEnumerable`1<Cookie> cookies, int timeout);
    private ICredentials get_ServerNetworkCredentials();
    private ICredentials get_DefaultCredentials();
    [CompilerGeneratedAttribute]
public sealed virtual string get_BearerToken();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BearerToken(string value);
    private ServerReportSoapProxy get_Service();
    public sealed virtual ExecutionInfo GetExecutionInfo();
    public sealed virtual ExecutionInfo ResetExecution();
    public sealed virtual ExecutionInfo LoadReport(string report, string historyId);
    public sealed virtual ExecutionInfo LoadReportDefinition(Byte[] definition);
    public sealed virtual DocumentMapNode GetDocumentMap(string rootLabel);
    public sealed virtual RenderingExtension[] ListRenderingExtensions();
    public sealed virtual ExecutionInfo SetExecutionCredentials(IEnumerable`1<DataSourceCredentials> credentials);
    public sealed virtual ExecutionInfo SetExecutionParameters(IEnumerable`1<ReportParameter> parameters, string parameterLanguage);
    public sealed virtual Byte[] Render(string format, string deviceInfo, PageCountMode paginationMode, String& extension, String& mimeType, String& encoding, Warning[]& warnings, String[]& streamIds);
    public sealed virtual void Render(AbortState abortState, string reportPath, string executionId, string historyId, string format, XmlNodeList deviceInfo, NameValueCollection urlAccessParameters, Stream reportStream, String& mimeType, String& fileNameExtension);
    public sealed virtual Byte[] RenderStream(string format, string streamId, string deviceInfo, String& encoding, String& mimeType);
    public sealed virtual void DeliverReportItem(string format, string deviceInfo, ExtensionSettings extensionSettings, string description, string eventType, string matchData);
    public sealed virtual int FindString(int startPage, int endPage, string findValue);
    public sealed virtual void ToggleItem(string toggleId);
    public sealed virtual int NavigateBookmark(string bookmarkId, String& uniqueName);
    public sealed virtual int NavigateDocumentMap(string documentMapId);
    public sealed virtual ExecutionInfo LoadDrillthroughTarget(string drillthroughId);
    public sealed virtual int Sort(string sortItem, SortOrder direction, bool clear, PageCountMode paginationMode, String& reportItem, ExecutionInfo& executionInfo, Int32& numPages);
    public sealed virtual void SetExecutionId(string executionId);
    public sealed virtual string GetServerVersion();
    public sealed virtual void set_Timeout(int value);
    private int get_ServerMajorVersion();
    private static ExecutionInfo FromSoapExecutionInfo(ExecutionInfo soapExecutionInfo);
    private static void SoapExecutionInfoToParametersLayout(ParametersPaneLayout paramPaneLayout, ExecutionInfo3 soapExecInfo3, ReportParameterInfoCollection paramInfoCollection);
    private static ReportParameterInfo SoapParameterToReportParameterInfo(ReportParameter soapParam);
    private static PageCountMode SoapPageCountFromViewerAPI(PageCountMode pageCountMode);
    private void ServerUrlRequest(AbortState abortState, string url, Stream outputStream, String& mimeType, String& fileNameExtension);
}
public class Microsoft.Reporting.WinForms.SoapVersionMismatchException : ReportServerException {
    internal SoapVersionMismatchException(string message, Exception innerException);
    private SoapVersionMismatchException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Reporting.WinForms.SortAction : Action {
    internal SortOrder Direction;
    public SortAction(string id, string label, ShapeType shape, RectangleF position, Single[] path, SortOrder direction);
    public SortAction(string id, string label, RectangleF position, SortOrder direction);
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WinForms.SortEventArgs : CancelEventArgs {
    private string m_sortId;
    private SortOrder m_sortDirection;
    private bool m_clearSort;
    public string SortId { get; }
    public SortOrder SortDirection { get; }
    public bool ClearSort { get; }
    public SortEventArgs(string sortId, SortOrder sortDirection, bool clearSort);
    public string get_SortId();
    public SortOrder get_SortDirection();
    public bool get_ClearSort();
}
public class Microsoft.Reporting.WinForms.SortEventHandler : MulticastDelegate {
    public SortEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SortEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SortEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Microsoft.Reporting.WinForms.SortOrder : Enum {
    public int value__;
    public static SortOrder Ascending;
    public static SortOrder Descending;
}
internal class Microsoft.Reporting.WinForms.StreamInIsolatedStorage : FileManagerStream {
    private string m_fileName;
    private IsolatedStorageFile m_isf;
    private IsolatedStorageFile IsolatedStorage { get; }
    public virtual void Delete();
    private IsolatedStorageFile get_IsolatedStorage();
}
internal class Microsoft.Reporting.WinForms.StreamInMemory : FileManagerStream {
    public virtual void Delete();
}
internal class Microsoft.Reporting.WinForms.StreamInTempDirectory : FileManagerStream {
    private string m_fileName;
    public virtual void Delete();
}
public class Microsoft.Reporting.WinForms.SubreportProcessingEventArgs : EventArgs {
    private string m_subReportName;
    private ReportParameterInfoCollection m_paramMetaData;
    private IList`1<string> m_dsNames;
    private ReportParameter[] m_userParams;
    private ReportDataSourceCollection m_dataSources;
    public string ReportPath { get; }
    public ReportParameterInfoCollection Parameters { get; }
    public IList`1<string> DataSourceNames { get; }
    public ReportDataSourceCollection DataSources { get; }
    internal SubreportProcessingEventArgs(string subreportName, ReportParameterInfoCollection paramMetaData, String[] dataSetNames);
    public string get_ReportPath();
    public ReportParameterInfoCollection get_Parameters();
    public IList`1<string> get_DataSourceNames();
    public ReportDataSourceCollection get_DataSources();
}
public class Microsoft.Reporting.WinForms.SubreportProcessingEventHandler : MulticastDelegate {
    public SubreportProcessingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SubreportProcessingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SubreportProcessingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Reporting.WinForms.SyncList`1 : Collection`1<TListType> {
    private object m_syncObject;
    internal SyncList`1(object syncObject);
    internal void SetSyncObject(object syncObject);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, TListType item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, TListType item);
}
internal class Microsoft.Reporting.WinForms.TextBoxWithImage : MirrorPanel {
    private int m_imageSpacing;
    private TextBox m_textBox;
    private PictureBox m_pictureBox;
    [CompilerGeneratedAttribute]
private EventHandler ImageClick;
    public string Text { get; public set; }
    public TextBoxWithImage(string accessibleName, string imageResource);
    [CompilerGeneratedAttribute]
public void add_ImageClick(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ImageClick(EventHandler value);
    protected virtual void OnLayout(LayoutEventArgs levent);
    private void OnImageClick();
    private void m_pictureBox_Click(object sender, EventArgs e);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    private void m_textBox_TextChanged(object sender, EventArgs e);
    public void SetTooltip(ToolTip tooltip, string tooltipStr);
}
internal class Microsoft.Reporting.WinForms.TextControl : ParameterControl {
    private bool m_textChanged;
    private TextBox m_textBox;
    public String[] CurrentValue { get; }
    public TextControl(ReportParameterInfo paramInfo, ToolTip tooltip, Font font, bool allowQueryExecution, GridLayoutCellDefinition cellDefinition);
    public virtual String[] get_CurrentValue();
    protected virtual void CreateChildControls();
    protected virtual void InternalApplyCustomResources();
    private void OnTextValidated(object sender, EventArgs e);
    private void SetEnabledState(object sender, EventArgs e);
    private void OnTextChanged(object sender, EventArgs e);
}
internal class Microsoft.Reporting.WinForms.ToggleAction : Action {
    internal bool ToggleState;
    public ToggleAction(string id, string label, ShapeType shape, RectangleF position, Single[] path, bool state);
    public ToggleAction(string id, string label, RectangleF position, bool state);
}
[FlagsAttribute]
internal enum Microsoft.Reporting.WinForms.ToolbarFlags : Enum {
    public int value__;
    public static ToolbarFlags DocMap;
    public static ToolbarFlags Params;
    public static ToolbarFlags PageNav;
    public static ToolbarFlags Refresh;
    public static ToolbarFlags Print;
    public static ToolbarFlags Export;
    public static ToolbarFlags Zoom;
    public static ToolbarFlags Back;
    public static ToolbarFlags Stop;
    public static ToolbarFlags Find;
}
[ComVisibleAttribute("False")]
internal class Microsoft.Reporting.WinForms.TypeNameHidingExpandableObjectConverter : ExpandableObjectConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal enum Microsoft.Reporting.WinForms.UIState : Enum {
    public int value__;
    public static UIState NoReport;
    public static UIState LongRunningAction;
    public static UIState ProcessingSuccess;
    public static UIState ProcessingPartial;
    public static UIState ProcessingFailure;
}
public class Microsoft.Reporting.WinForms.ValidValue : object {
    private string m_label;
    private string m_value;
    public string Label { get; }
    public string Value { get; }
    internal ValidValue(string label, string value);
    public string get_Label();
    public string get_Value();
}
internal class Microsoft.Reporting.WinForms.ValidValuesControl : ParameterControl {
    private int m_lastSelectedIndex;
    private AutoWidthComboBox m_comboBox;
    public String[] CurrentValue { get; }
    public ValidValuesControl(ReportParameterInfo paramInfo, ToolTip tooltip, Font font, bool allowQueryExecution, GridLayoutCellDefinition cellDefinition);
    protected virtual void InternalApplyCustomResources();
    public virtual String[] get_CurrentValue();
    protected virtual void CreateChildControls();
    private void PopulateItemList();
    private void OnDropDownExit(object sender, EventArgs e);
    private void OnSelectedValueChanged(object sender, EventArgs e);
}
public class Microsoft.Reporting.WinForms.Warning : object {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private Severity <Severity>k__BackingField;
    public string Code { get; private set; }
    public string Message { get; private set; }
    public string ObjectName { get; private set; }
    public string ObjectType { get; private set; }
    public Severity Severity { get; private set; }
    internal Warning(string code, string message, string objectName, string objectType, string severity);
    internal static Warning[] FromSoapWarnings(Warning[] soapWarnings);
    internal static Warning[] FromProcessingMessageList(ProcessingMessageList processingWarnings);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_ObjectName();
    [CompilerGeneratedAttribute]
private void set_ObjectName(string value);
    [CompilerGeneratedAttribute]
public string get_ObjectType();
    [CompilerGeneratedAttribute]
private void set_ObjectType(string value);
    [CompilerGeneratedAttribute]
public Severity get_Severity();
    [CompilerGeneratedAttribute]
private void set_Severity(Severity value);
}
internal static class Microsoft.Reporting.WinForms.WebRequestHelper : object {
    private static string InfoQuery;
    private static string SPUserTokenParam;
    private static string SPUserNameParam;
    public static HttpWebRequest GetServerUrlAccessObject(string url, int timeout, ICredentials credentials, Cookie formsAuthCookie, IEnumerable`1<string> headers, IEnumerable`1<Cookie> cookies, string userName, string bearerToken, Byte[] userToken);
    public static void SetRequestHeaders(HttpWebRequest request, Cookie formsAuthCookie, IEnumerable`1<string> headers, IEnumerable`1<Cookie> cookies);
    public static ReportServerException ExceptionFromWebResponse(Exception e);
    private static Exception ExceptionFromWebResponseUnwrapped(Exception e);
}
internal class Microsoft.Reporting.WinForms.WinRSviewer : UserControl {
    private ReportViewer m_currentViewerControl;
    private TextBox m_errorBox;
    private ReportPanel m_reportPanel;
    private DrawablePage m_currentPage;
    public bool ShowContextMenu { get; public set; }
    internal ReportViewer ViewerControl { get; internal set; }
    unknown Color BackColor {public set; }
    public Point ReportPanelAutoScrollPosition { get; public set; }
    public float ZoomCalculated { get; }
    public void add_PageNavigation(InternalPageNavigationEventHandler value);
    public void remove_PageNavigation(InternalPageNavigationEventHandler value);
    public void add_Back(EventHandler value);
    public void remove_Back(EventHandler value);
    public void add_ReportRefresh(EventHandler value);
    public void remove_ReportRefresh(EventHandler value);
    public void add_Print(EventHandler value);
    public void remove_Print(EventHandler value);
    public void add_PageSettings(EventHandler value);
    public void remove_PageSettings(EventHandler value);
    public void add_Export(ExportEventHandler value);
    public void remove_Export(ExportEventHandler value);
    public void add_ZoomChange(ZoomChangedEventHandler value);
    public void remove_ZoomChange(ZoomChangedEventHandler value);
    protected virtual void OnGotFocus(EventArgs e);
    public bool get_ShowContextMenu();
    public void set_ShowContextMenu(bool value);
    private void InitializeReportPanel();
    private void InitializeComponent();
    internal void ApplyCustomResources();
    internal ReportViewer get_ViewerControl();
    internal void set_ViewerControl(ReportViewer value);
    public virtual void set_BackColor(Color value);
    public Point get_ReportPanelAutoScrollPosition();
    public void set_ReportPanelAutoScrollPosition(Point value);
    public void ShowMessage(Exception e);
    public void ShowMessage(string text, bool enabled);
    private void ChangeView(ViewType viewType);
    public void SetFocusPoint(Point point, FocusMode focusMode);
    public void SetBookmarkFocusPoint(string bookMarkId);
    public void SetFocusPointMm(PointF pointF, FocusMode focusMode);
    public void SetActionFocusPoint(ActionType actionType, string actionId);
    public void ScrollReport(bool positiveDirection);
    public void SetZoom();
    public float get_ZoomCalculated();
    public void SetNewPage(DrawablePage currentPage);
    private void OnReportViewerStateChanged(object sender, EventArgs e);
    public void RenderToGraphics(Graphics g, bool testMode);
    internal void SetToolStripRenderer(ToolStripRenderer renderer);
}
internal class Microsoft.Reporting.WinForms.ZIndexComparer : object {
    public sealed virtual int Compare(RPLItemMeasurement x, RPLItemMeasurement y);
    public sealed virtual int Compare(RenderingItemBorderTablix x, RenderingItemBorderTablix y);
    public int Compare(int x, int y);
}
public class Microsoft.Reporting.WinForms.ZoomChangedEventHandler : MulticastDelegate {
    public ZoomChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ZoomChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ZoomChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("False")]
public class Microsoft.Reporting.WinForms.ZoomChangeEventArgs : CancelEventArgs {
    private int m_zoomPercent;
    private ZoomMode m_zoomMode;
    public int ZoomPercent { get; }
    public ZoomMode ZoomMode { get; }
    public ZoomChangeEventArgs(ZoomMode zoomMode, int zoomPercent);
    public int get_ZoomPercent();
    public ZoomMode get_ZoomMode();
}
internal class Microsoft.Reporting.WinForms.ZoomItem : object {
    private ZoomMode m_zoomMode;
    private int m_zoomPercent;
    public ZoomMode ZoomMode { get; }
    public int ZoomPercent { get; }
    public ZoomItem(ZoomMode zoomMode, int zoomPercent);
    public ZoomMode get_ZoomMode();
    public int get_ZoomPercent();
    public virtual string ToString();
}
internal static class Microsoft.Reporting.WinForms.ZoomMenuHelper : object {
    private static Int32[] DefaultPercents;
    private static ZoomMenuHelper();
    private static bool NeedCustomEntry(ZoomMode zoomMode, int zoomPercent);
    public static void Populate(ToolStripDropDownItem parentItem, EventHandler handler, ZoomMode selectedMode, int selectedPercent);
    private static ToolStripMenuItem CreateMenuItem(ZoomMode mode, int zoomPercent, EventHandler handler, bool selected);
    public static void Populate(ToolStripComboBox comboBox, ZoomMode selectedMode, int selectedPercent);
}
public enum Microsoft.Reporting.WinForms.ZoomMode : Enum {
    public int value__;
    public static ZoomMode FullPage;
    public static ZoomMode PageWidth;
    public static ZoomMode Percent;
}
internal static class Microsoft.ReportingServices.Common.MessageBoxWrappers : object {
    private static MessageBoxOptions GetMessageBoxOptions(Control owner);
    public static DialogResult ShowMessageBox(Control owner, string text);
    public static DialogResult ShowMessageBox(Control owner, string text, string caption);
    public static DialogResult ShowMessageBox(Control owner, string text, string caption, MessageBoxButtons buttons);
    public static DialogResult ShowMessageBox(Control owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon);
    public static DialogResult ShowMessageBox(Control owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton);
}
internal static class Microsoft.ReportingServices.Common.UrlUtil : object {
    public static string UrlEncode(string input);
    public static string UrlDecode(string input);
}
internal class Microsoft.ReportingServices.CommonControls.GenericDropDown : UserControl {
    [CompilerGeneratedAttribute]
private EventHandler DropDownClosed;
    private Control m_topControl;
    private Control m_dropDownControl;
    private ToolStripDropDown m_dropDown;
    public Control TopControl { get; public set; }
    public Control DropDownControl { get; public set; }
    [CompilerGeneratedAttribute]
public void add_DropDownClosed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DropDownClosed(EventHandler value);
    public Control get_TopControl();
    public void set_TopControl(Control value);
    public Control get_DropDownControl();
    public void set_DropDownControl(Control value);
    public void OpenDropDown();
    public void CloseDropDown();
    protected virtual void OnRightToLeftChanged(EventArgs e);
    private void OnDropDownClosed(object sender, ToolStripDropDownClosedEventArgs e);
}
internal static class Microsoft.ReportingServices.PublicKeyConstants : object {
    internal static string SQLTestKey;
    internal static string SQLTestKeyToken;
    private static string SQLPublicKey;
    private static string SQLPublicKeyToken;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string AssemblyVersion;
    internal static string AssemblyQualifier;
    internal static string CompanionAppPublicKey;
}
internal static class Microsoft.ReportingServices.TestPublicKeyConstants : object {
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string AssemblyVersion;
    internal static string AssemblyQualifier;
}
